uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  uint64_t *v34;
  long long v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, GroupSessionMessenger.MessageStreamStore.Storage>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(void *)(v5 + 16))
  {
    v8 = 0;
    v34 = (uint64_t *)(v5 + 64);
    v9 = 1 << *(unsigned char *)(v5 + 32);
    v30 = -1 << v9;
    if (v9 < 64) {
      v10 = ~(-1 << v9);
    }
    else {
      v10 = -1;
    }
    v11 = v10 & *(void *)(v5 + 64);
    v31 = 1 << *(unsigned char *)(v5 + 32);
    v32 = v3;
    v33 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v33) {
          goto LABEL_33;
        }
        v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_33;
          }
          v21 = v34[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v32;
                goto LABEL_40;
              }
              if (v31 >= 64) {
                bzero(v34, 8 * v33);
              }
              else {
                *v34 = v30;
              }
              v3 = v32;
              *(void *)(v5 + 16) = 0;
              break;
            }
            v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                v21 = v34[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      v28 = *(void *)(v5 + 56) + 24 * v19;
      v29 = *(void *)v28;
      v35 = *(_OWORD *)(v28 + 8);
      if ((a2 & 1) == 0)
      {
        swift_retain();
        swift_retain();
      }
      result = static Hasher._hash(seed:_:)();
      v13 = -1 << *(unsigned char *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24) {
            v15 = 0;
          }
          v23 |= v25;
          v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      v17 = *(void *)(v7 + 56) + 24 * v16;
      *(void *)v17 = v29;
      *(_OWORD *)(v17 + 8) = v35;
      ++*(void *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSDictionary>);
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  v8 = 1 << *(unsigned char *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64) {
    v9 = ~(-1 << v8);
  }
  else {
    v9 = -1;
  }
  v10 = v9 & *(void *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    v22 = (void *)(v5 + 64);
    v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(unsigned char *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26) {
          v16 = 0;
        }
        v25 |= v27;
        v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  void *v36;
  long long v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  v6 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (*(void *)(v5 + 16))
  {
    v9 = 1 << *(unsigned char *)(v5 + 32);
    v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      v10 = ~(-1 << v9);
    }
    else {
      v10 = -1;
    }
    v11 = v10 & *(void *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v14 << 6);
      }
      else
      {
        v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35) {
          goto LABEL_33;
        }
        v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          v24 = v36[v14];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if (v6)
              {
                v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            v14 = v25;
          }
        }
LABEL_30:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      v30 = 16 * v22;
      v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      v33 = *v31;
      v32 = v31[1];
      v37 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v37, *((unint64_t *)&v37 + 1));
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v15 = -1 << *(unsigned char *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v17 == v27;
          if (v17 == v27) {
            v17 = 0;
          }
          v26 |= v28;
          v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 16 * v18;
      v20 = (void *)(*(void *)(v8 + 48) + v19);
      *v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v37;
      ++*(void *)(v8 + 16);
    }
  }
  result = swift_release();
  *v3 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  unint64_t v19;
  int64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  uint64_t v33;
  unsigned char v34[56];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<TopicManager.ServiceName, TopicManager.ConversationClient.Service>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  v31 = v2;
  v8 = 1 << *(unsigned char *)(v5 + 32);
  v33 = v5 + 64;
  if (v8 < 64) {
    v9 = ~(-1 << v8);
  }
  else {
    v9 = -1;
  }
  v10 = v9 & *(void *)(v5 + 64);
  v32 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v32) {
      break;
    }
    v18 = (void *)(v5 + 64);
    v19 = *(void *)(v33 + 8 * v17);
    ++v13;
    if (!v19)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v32) {
        goto LABEL_34;
      }
      v19 = *(void *)(v33 + 8 * v13);
      if (!v19)
      {
        v20 = v17 + 2;
        if (v20 >= v32)
        {
LABEL_34:
          swift_release();
          v3 = v31;
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        v19 = *(void *)(v33 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            v13 = v20 + 1;
            if (__OFADD__(v20, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v32) {
              goto LABEL_34;
            }
            v19 = *(void *)(v33 + 8 * v13);
            ++v20;
            if (v19) {
              goto LABEL_21;
            }
          }
        }
        v13 = v20;
      }
    }
LABEL_21:
    v10 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    v21 = *(unsigned char *)(*(void *)(v5 + 48) + v16);
    v22 = *(void *)(v5 + 56) + 48 * v16;
    if (a2) {
      outlined init with take of TopicManager.ConversationClient.Service(v22, (uint64_t)v34);
    }
    else {
      outlined init with copy of TopicManager.ConversationClient.Service(v22, (uint64_t)v34);
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v23 = -1 << *(unsigned char *)(v7 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v11 + 8 * (v24 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v24) & ~*(void *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v28 = v25 == v27;
        if (v25 == v27) {
          v25 = 0;
        }
        v26 |= v28;
        v29 = *(void *)(v11 + 8 * v25);
      }
      while (v29 == -1);
      v14 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(unsigned char *)(*(void *)(v7 + 48) + v14) = v21;
    result = outlined init with take of TopicManager.ConversationClient.Service((uint64_t)v34, *(void *)(v7 + 56) + 48 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  v3 = v31;
  v18 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  v30 = 1 << *(unsigned char *)(v5 + 32);
  if (v30 >= 64) {
    bzero(v18, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *v18 = -1 << v30;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AnyCancellable>);
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  v8 = 1 << *(unsigned char *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64) {
    v9 = ~(-1 << v8);
  }
  else {
    v9 = -1;
  }
  v10 = v9 & *(void *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    v22 = (void *)(v5 + 64);
    v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(unsigned char *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26) {
          v16 = 0;
        }
        v25 |= v27;
        v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  void *v42;
  uint64_t i;
  char v44;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SpatialTemplatePreference>);
  v44 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  v8 = 1 << *(unsigned char *)(v5 + 32);
  v42 = (void *)(v5 + 64);
  if (v8 < 64) {
    v9 = ~(-1 << v8);
  }
  else {
    v9 = -1;
  }
  v10 = v9 & *(void *)(v5 + 64);
  v40 = v2;
  v41 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v41) {
      break;
    }
    v24 = v42;
    v25 = v42[v23];
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v41) {
        goto LABEL_33;
      }
      v25 = v42[v13];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_33:
          swift_release();
          v3 = v40;
          if ((v44 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v41) {
              goto LABEL_33;
            }
            v25 = v42[v13];
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = *(void *)(v5 + 56) + v31;
    v36 = *(void *)v35;
    v37 = *(unsigned char *)(v35 + 8);
    v38 = *(unsigned char *)(v35 + 9);
    if ((v44 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(unsigned char *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28) {
          v16 = 0;
        }
        v27 |= v29;
        v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (void *)(*(void *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = *(void *)(v7 + 56) + v18;
    *(void *)v20 = v36;
    *(unsigned char *)(v20 + 8) = v37;
    *(unsigned char *)(v20 + 9) = v38;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  v3 = v40;
  v24 = v42;
  if ((v44 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  v39 = 1 << *(unsigned char *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *v24 = -1 << v39;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3, void (*a4)(uint64_t, unsigned char *))
{
  v6 = v4;
  uint64_t v8 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v38 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    v37 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & *(void *)(v8 + 64);
    int64_t v36 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v16 = 0;
    while (1)
    {
      if (v13)
      {
        unint64_t v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v20 = v19 | (v16 << 6);
      }
      else
      {
        int64_t v21 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v36) {
          goto LABEL_34;
        }
        unint64_t v22 = v37[v21];
        ++v16;
        if (!v22)
        {
          int64_t v16 = v21 + 1;
          if (v21 + 1 >= v36) {
            goto LABEL_34;
          }
          unint64_t v22 = v37[v16];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v36)
            {
LABEL_34:
              swift_release();
              v6 = v4;
              if (v38)
              {
                uint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
                if (v35 >= 64) {
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v37 = -1 << v35;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v37[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v16 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v16 >= v36) {
                  goto LABEL_34;
                }
                unint64_t v22 = v37[v16];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v16 = v23;
          }
        }
LABEL_21:
        unint64_t v13 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v16 << 6);
      }
      v24 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v20);
      uint64_t v26 = *v24;
      uint64_t v25 = v24[1];
      uint64_t v27 = *(void *)(v8 + 56) + 40 * v20;
      if (v38)
      {
        a4(v27, v39);
      }
      else
      {
        outlined init with copy of AudioSessionAssertionManager(v27, (uint64_t)v39);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v28 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v14 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v29) & ~*(void *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v14 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v17 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (void *)(*(void *)(v10 + 48) + 16 * v17);
      void *v18 = v26;
      v18[1] = v25;
      uint64_t result = ((uint64_t (*)(unsigned char *, unint64_t))a4)(v39, *(void *)(v10 + 56) + 40 * v17);
      ++*(void *)(v10 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v6 = v10;
  return result;
}

uint64_t sub_1A380EF44(id *a1)
{
  return SystemCoordinatorHostManager.state.setter(*a1);
}

uint64_t sub_1A380EF78@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_1A380EFC8()
{
  return swift_weakAssign();
}

uint64_t ObjC metadata update function for SystemCoordinatorHostManager()
{
  return type metadata accessor for SystemCoordinatorHostManager(0);
}

uint64_t type metadata accessor for SystemCoordinatorHostManager(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for SystemCoordinatorHostManager);
}

void type metadata completion function for SystemCoordinatorHostManager()
{
  type metadata accessor for Published<[UUID : SystemCoordinatorConfiguration]>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(319);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for SystemCoordinatorHostManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemCoordinatorHostManager);
}

uint64_t dispatch thunk of SystemCoordinatorHostManager.__allocating_init(configurationUpdatesRateLimit:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of SystemCoordinatorHostManager.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t *initializeBufferWithCopyOfBuffer for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for DispatchTimeInterval();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 24)), (uint64_t *)((char *)a2 + *(int *)(a3 + 24)), v7);
  }
  return a1;
}

uint64_t destroy for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v7)((void *)(v4 - 8), a1, v4);
  v7(a1 + *(int *)(a2 + 20), v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);

  return ((uint64_t (*)(uint64_t, uint64_t))v7)(v5, v4);
}

uint64_t initializeWithCopy for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v7(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24), v6);
  return a1;
}

uint64_t assignWithCopy for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v7(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24), v6);
  return a1;
}

uint64_t initializeWithTake for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v7(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24), v6);
  return a1;
}

uint64_t assignWithTake for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v7(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24), v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1A380F668);
}

uint64_t sub_1A380F668(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1A380F6E8);
}

uint64_t sub_1A380F6E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t method lookup function for SystemCoordinatorHostManager.EndpointProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemCoordinatorHostManager.EndpointProvider);
}

uint64_t dispatch thunk of SystemCoordinatorHostManager.EndpointProvider.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      unint64_t v14 = v24;
      unint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = v21 + *(void *)(*(void *)(type metadata accessor for LinkManager.Attachment(0) - 8) + 72) * v14;

  return outlined assign with take of LinkManager.Attachment(a1, v22);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(uint64_t))specialized _NativeDictionary.copy(), &demangling cache variable for type metadata for _DictionaryStorage<UUID, OSSignpostIntervalState>);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(uint64_t))specialized _NativeDictionary.copy(), &demangling cache variable for type metadata for _DictionaryStorage<UUID, GroupSessionProviderObserver>);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(uint64_t))specialized _NativeDictionary.copy(), &demangling cache variable for type metadata for _DictionaryStorage<UUID, PresenceGroupSessionProviderObserver>);
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    int64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      unint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7] + 24 * v14;

  return outlined assign with take of GroupSessionTable.Storage(a1, v21);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(uint64_t))specialized _NativeDictionary.copy(), &demangling cache variable for type metadata for _DictionaryStorage<UUID, TopicManager.ConversationClient>);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  uint64_t v12 = (v9 & 1) == 0;
  char v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v25 & 1))
    {
      uint64_t v10 = v24;
      BOOL v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  BOOL v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7];
    char v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation);
    uint64_t v19 = *(void *)(v18 - 8);
    unint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 40);
    uint64_t v21 = v18;
    uint64_t v22 = v17 + *(void *)(v19 + 72) * v10;
    return v20(v22, a1, v21);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(uint64_t))specialized _NativeDictionary.copy(), &demangling cache variable for type metadata for _DictionaryStorage<UUID, Conversation>);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      unint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = (_OWORD *)(v20[7] + 32 * v14);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);

  return outlined init with take of Any(a1, v21);
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  uint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    unint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (uint64_t *)(v20[7] + 24 * v14);
      swift_release();
      unint64_t result = swift_release();
      *uint64_t v21 = a1;
      v21[1] = a2;
      v21[2] = a3;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  unint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v14, a4, a1, a2, a3, v20);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), &demangling cache variable for type metadata for _DictionaryStorage<String, TypedPayloadDecoding>, (uint64_t (*)(uint64_t, uint64_t))outlined init with take of TypedPayloadDecoding, (uint64_t (*)(uint64_t, uint64_t))outlined init with take of TypedPayloadDecoding);
}

{
  void *v4;
  void **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  void *v21;
  uint64_t *v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  uint64_t v5 = (void **)v4;
  uint64_t v28 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = (void *)*v4;
  uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  BOOL v16 = v13[2];
  uint64_t v17 = (v14 & 1) == 0;
  char v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v19 = v14;
  unint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v5;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = (uint64_t *)(v21[7] + 16 * v15);
      swift_release();
      unint64_t result = swift_release();
      char v24 = v28;
      *uint64_t v22 = a1;
      v22[1] = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  uint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v15 = v25;
  uint64_t v21 = *v5;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, v28, v21);
}

{
  void *v4;
  void *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t vars8;

  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  uint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  char v13 = *(void *)(v10 + 16);
  unint64_t v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  BOOL v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      unint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v12 = v21;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *unint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  char v24 = v18[2];
  uint64_t v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;

  return swift_bridgeObjectRetain();
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), &demangling cache variable for type metadata for _DictionaryStorage<String, SpatialTemplateRole>, (uint64_t (*)(uint64_t, uint64_t))outlined init with take of TypedPayloadDecoding, (uint64_t (*)(uint64_t, uint64_t))outlined init with take of TypedPayloadDecoding);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v22 = a2;
  v22[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v23 = v18[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v25;

  swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 48 * v10;
    return outlined assign with take of TopicManager.ConversationClient.Service(a1, v17);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(uint64_t), uint64_t *a5)
{
  uint64_t v26 = a5;
  uint64_t v27 = a1;
  uint64_t v7 = (void **)v5;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = (void *)*v5;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v22 = *v7;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];

      *(void *)(v23 + 8 * v16) = v27;
      return;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    a4(v19);
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a3 & 1, v26);
  unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v20 & 1) != (v25 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v16 = v24;
  uint64_t v22 = *v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  specialized _NativeDictionary._insert(at:key:value:)(v16, (uint64_t)v13, v27, v22);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(uint64_t), uint64_t *a5)
{
  uint64_t v27 = a5;
  uint64_t v28 = a1;
  uint64_t v7 = (void **)v5;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = (void *)*v5;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v22 = *v7;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];
      uint64_t result = swift_release();
      *(void *)(v23 + 8 * v16) = v28;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    a4(v19);
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a3 & 1, v27);
  unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  uint64_t v22 = *v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  return specialized _NativeDictionary._insert(at:key:value:)(v16, (uint64_t)v13, v28, v22);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  uint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a5 & 1) != 0)
  {
LABEL_7:
    char v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 16 * v14;
      *(void *)uint64_t v21 = a1;
      *(unsigned char *)(v21 + 8) = a2 & 1;
      *(unsigned char *)(v21 + 9) = HIBYTE(a2);
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a5 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a5 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v18 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  char v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2 & 0xFF01, v20);

  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), uint64_t *a6, uint64_t (*a7)(uint64_t, uint64_t), uint64_t (*a8)(uint64_t, uint64_t))
{
  uint64_t v11 = (void **)v8;
  BOOL v16 = (void *)*v8;
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v19 = v16[2];
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v22 = v17;
  uint64_t v23 = v16[3];
  if (v23 < v21 || (a4 & 1) == 0)
  {
    if (v23 >= v21 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, a4 & 1, a6, (void (*)(uint64_t, unsigned char *))a7);
    unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v22 & 1) == (v28 & 1))
    {
      unint64_t v18 = v27;
      unint64_t v24 = *v11;
      if (v22) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v24 = *v11;
  if (v22)
  {
LABEL_8:
    uint64_t v25 = v24[7] + 40 * v18;
    __swift_destroy_boxed_opaque_existential_1Tm(v25);
    return a8(a1, v25);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v18, a2, a3, a1, v24, a7);

  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for LinkManager.Attachment(0);
  uint64_t result = outlined init with take of LinkManager.Attachment(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t result = outlined init with take of GroupSessionTable.Storage(a3, a4[7] + 24 * a1);
  uint64_t v11 = a4[2];
  uint64_t v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, a3, v8);
  uint64_t v10 = a4[2];
  uint64_t v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  uint64_t v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CodingUserInfoKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  *(void *)(a6[6] + 8 * result) = a2;
  uint64_t v6 = (void *)(a6[7] + 24 * result);
  void *v6 = a3;
  v6[1] = a4;
  v6[2] = a5;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  *uint64_t v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, char a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1) = a2;
  uint64_t result = outlined init with take of TopicManager.ConversationClient.Service(a3, a4[7] + 48 * a1);
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t v7 = a6[7] + 16 * result;
  *(void *)uint64_t v7 = a4;
  *(unsigned char *)(v7 + 8) = a5 & 1;
  *(unsigned char *)(v7 + 9) = HIBYTE(a5);
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v7 = (void *)(a5[6] + 16 * a1);
  *uint64_t v7 = a2;
  v7[1] = a3;
  uint64_t result = a6(a4, a5[7] + 40 * a1);
  uint64_t v9 = a5[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a5[2] = v11;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined assign with take of TopicManager.ConversationClient.Service(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of TopicManager.ConversationClient.Service(uint64_t a1, uint64_t a2)
{
  return a2;
}

void partial apply for closure #1 in SystemCoordinatorHostManager._state.didset(uint64_t a1, uint64_t a2)
{
  closure #1 in SystemCoordinatorHostManager._state.didset(a1, a2, v2);
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(char *, void *))
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: SystemCoordinatorHost));
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v22 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v23 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    int64_t v18 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v23) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v22 + 8 * v18);
    ++v12;
    if (!v19)
    {
      int64_t v12 = v18 + 1;
      if (v18 + 1 >= v23) {
        return swift_release();
      }
      unint64_t v19 = *(void *)(v22 + 8 * v12);
      if (!v19)
      {
        int64_t v12 = v18 + 2;
        if (v18 + 2 >= v23) {
          return swift_release();
        }
        unint64_t v19 = *(void *)(v22 + 8 * v12);
        if (!v19)
        {
          int64_t v12 = v18 + 3;
          if (v18 + 3 >= v23) {
            return swift_release();
          }
          unint64_t v19 = *(void *)(v22 + 8 * v12);
          if (!v19) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v14 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_5:
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v16 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v6, v15 + *(void *)(*(void *)(v16 - 8) + 72) * v14, v16);
    char v17 = *(void **)(*(void *)(a1 + 56) + 8 * v14);
    *(void *)&v6[*(int *)(v4 + 48)] = v17;
    a2(v6, v17);
    uint64_t result = outlined destroy of (key: UUID, value: SystemCoordinatorHost)((uint64_t)v6);
  }
  int64_t v20 = v18 + 4;
  if (v20 >= v23) {
    return swift_release();
  }
  unint64_t v19 = *(void *)(v22 + 8 * v20);
  if (v19)
  {
    int64_t v12 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v12 >= v23) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v22 + 8 * v12);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t outlined destroy of (key: UUID, value: SystemCoordinatorHost)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: SystemCoordinatorHost));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of GroupSessionTable.Storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined assign with take of LinkManager.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LinkManager.Attachment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of SystemCoordinatorHostManager.ConfigurationUpdatesRateLimit(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of LinkManager.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LinkManager.Attachment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id closure #1 in SystemCoordinatorHostManager.state.getterpartial apply@<X0>(void *a1@<X8>)
{
  return partial apply for closure #1 in SystemCoordinatorHostManager.state.getter(a1);
}

objc_class *closure #1 in SystemCoordinatorHostManager.host(for:)partial apply@<X0>(objc_class **a1@<X8>)
{
  return partial apply for closure #1 in SystemCoordinatorHostManager.host(for:)(a1);
}

void _Streamed.wrappedValue.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  type metadata accessor for _Streamed.State();
  uint64_t v4 = v3 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  partial apply for closure #1 in _Streamed.wrappedValue.getter(v4, a1);
  os_unfair_lock_unlock(v5);
}

uint64_t _Streamed.wrappedValue.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  specialized _Streamed.wrappedValue.setter();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8);

  return v4(a1);
}

uint64_t partial apply for closure #1 in _Streamed.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = type metadata accessor for _Streamed.State();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1 + *(int *)(v6 + 40), v5);
}

uint64_t type metadata accessor for _Streamed.State()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _Streamed.yield(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v40 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  v37 = (char *)&v31 - v5;
  uint64_t v36 = type metadata accessor for AsyncStream.Continuation.YieldResult();
  uint64_t v33 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36);
  uint64_t v7 = (char *)&v31 - v6;
  uint64_t v8 = type metadata accessor for AsyncStream.Continuation();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  int64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  unint64_t v14 = (char *)&v31 - v13;
  uint64_t v15 = v1[2];
  uint64_t v41 = v4;
  uint64_t v42 = *(void *)(v3 + 88);
  uint64_t v43 = a1;
  uint64_t v38 = v4;
  uint64_t v39 = a1;
  type metadata accessor for _Streamed.State();
  type metadata accessor for Dictionary.Values();
  type metadata accessor for Optional();
  uint64_t v16 = v15 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v15 + 16);
  char v17 = (os_unfair_lock_s *)(v15 + ((*(unsigned int *)(*(void *)v15 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v17);
  partial apply for closure #1 in _Streamed.yield(_:)(v16, &v44);
  os_unfair_lock_unlock(v17);
  uint64_t result = v44;
  if (!v44) {
    return result;
  }
  uint64_t v19 = *(void *)(v44 + 64);
  uint64_t v31 = v44 + 64;
  uint64_t v20 = 1 << *(unsigned char *)(v44 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & v19;
  uint64_t v34 = v9 + 32;
  uint64_t v35 = v9 + 16;
  int64_t v23 = (void (**)(char *, uint64_t, uint64_t))(v40 + 16);
  unint64_t v24 = (void (**)(char *, uint64_t))(v33 + 8);
  int64_t v32 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v33 = v9 + 8;
  uint64_t v40 = v44;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v25 = 0;
  while (1)
  {
    if (v22)
    {
      unint64_t v26 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      unint64_t v27 = v26 | (v25 << 6);
      goto LABEL_6;
    }
    int64_t v28 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v28 >= v32) {
      goto LABEL_22;
    }
    unint64_t v29 = *(void *)(v31 + 8 * v28);
    ++v25;
    if (!v29)
    {
      int64_t v25 = v28 + 1;
      if (v28 + 1 >= v32) {
        goto LABEL_22;
      }
      unint64_t v29 = *(void *)(v31 + 8 * v25);
      if (!v29)
      {
        int64_t v25 = v28 + 2;
        if (v28 + 2 >= v32) {
          goto LABEL_22;
        }
        unint64_t v29 = *(void *)(v31 + 8 * v25);
        if (!v29) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v22 = (v29 - 1) & v29;
    unint64_t v27 = __clz(__rbit64(v29)) + (v25 << 6);
LABEL_6:
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v14, *(void *)(v40 + 56) + *(void *)(v9 + 72) * v27, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v14, v8);
    (*v23)(v37, v39, v38);
    AsyncStream.Continuation.yield(_:)();
    (*v24)(v7, v36);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  int64_t v30 = v28 + 3;
  if (v30 >= v32)
  {
LABEL_22:
    swift_release();
    return swift_bridgeObjectRelease_n();
  }
  unint64_t v29 = *(void *)(v31 + 8 * v30);
  if (v29)
  {
    int64_t v25 = v30;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v25 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v25 >= v32) {
      goto LABEL_22;
    }
    unint64_t v29 = *(void *)(v31 + 8 * v25);
    ++v30;
    if (v29) {
      goto LABEL_21;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void (*_Streamed.wrappedValue.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[4] = v7;
  _Streamed.wrappedValue.getter((uint64_t)v7);
  return _Streamed.wrappedValue.modify;
}

void _Streamed.wrappedValue.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 8);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    _Streamed.yield(_:)((uint64_t)v3);
    uint64_t v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    _Streamed.yield(_:)(*(void *)(*(void *)a1 + 32));
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

void *_Streamed.__allocating_init(wrappedValue:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_allocObject();
  uint64_t v4 = specialized _Streamed.init(wrappedValue:)(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v2 + 80) - 8) + 8))(a1);
  return v4;
}

void *_Streamed.init(wrappedValue:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = specialized _Streamed.init(wrappedValue:)(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8))(a1);
  return v4;
}

uint64_t _Streamed.deinit()
{
  _Streamed.finish()();
  swift_release();
  return v0;
}

Swift::Void __swiftcall _Streamed.finish()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 80);
  uint64_t v3 = type metadata accessor for AsyncStream.Continuation();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v22 - v5;
  uint64_t v7 = v0[2];
  uint64_t v24 = v2;
  uint64_t v25 = *(void *)(v1 + 88);
  type metadata accessor for _Streamed.State();
  type metadata accessor for Dictionary();
  uint64_t v8 = v7 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v7 + 16);
  uint64_t v9 = (os_unfair_lock_s *)(v7 + ((*(unsigned int *)(*(void *)v7 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v9);
  partial apply for closure #1 in _Streamed.finish()(v8, &v26);
  os_unfair_lock_unlock(v9);
  int64_t v10 = 0;
  uint64_t v11 = v26;
  uint64_t v12 = *(void *)(v26 + 64);
  uint64_t v23 = v26 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(v26 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v19 >= v16) {
      goto LABEL_21;
    }
    unint64_t v20 = *(void *)(v23 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v16) {
        goto LABEL_21;
      }
      unint64_t v20 = *(void *)(v23 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v16) {
          goto LABEL_21;
        }
        unint64_t v20 = *(void *)(v23 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v15 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v11 + 56) + *(void *)(v4 + 72) * v18, v3);
    AsyncStream.Continuation.finish()();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v16)
  {
LABEL_21:
    swift_release();
    return;
  }
  unint64_t v20 = *(void *)(v23 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v16) {
      goto LABEL_21;
    }
    unint64_t v20 = *(void *)(v23 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
}

uint64_t _Streamed.__deallocating_deinit()
{
  _Streamed.finish()();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t _Streamed.projectedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v38 = a1;
  uint64_t v40 = *v1;
  uint64_t v2 = *(void *)(v40 + 80);
  uint64_t v3 = type metadata accessor for AsyncStream.Continuation.YieldResult();
  uint64_t v43 = *(void *)(v3 - 8);
  uint64_t v44 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v42 = (char *)&v36 - v4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v6 = TupleTypeMetadata2 - 8;
  uint64_t v7 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v9 = (uint64_t *)((char *)&v36 - v8);
  uint64_t v39 = *(void *)(v2 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v41 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  v37 = (char *)&v36 - v12;
  uint64_t v13 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  int64_t v16 = (char *)&v36 - v15;
  uint64_t v17 = type metadata accessor for AsyncStream.Continuation();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  int64_t v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v36 - v22;
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, *MEMORY[0x1E4FBD028], v13);
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v21, v17);
  uint64_t v24 = *(void *)(v45 + 16);
  uint64_t v46 = v2;
  uint64_t v47 = *(void *)(v40 + 88);
  uint64_t v25 = v47;
  v48 = v23;
  type metadata accessor for _Streamed.State();
  uint64_t v26 = (uint64_t *)(v24 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v24 + 16));
  unint64_t v27 = (os_unfair_lock_s *)(v24 + ((*(unsigned int *)(*(void *)v24 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v27);
  partial apply for closure #1 in _Streamed.projectedValue.getter(v26, v9);
  os_unfair_lock_unlock(v27);
  uint64_t v28 = *v9;
  unint64_t v29 = (char *)v9 + *(int *)(v6 + 56);
  uint64_t v30 = v39;
  uint64_t v31 = v37;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v37, v29, v2);
  uint64_t v32 = swift_allocObject();
  swift_weakInit();
  uint64_t v33 = (void *)swift_allocObject();
  v33[2] = v2;
  v33[3] = v25;
  v33[4] = v32;
  v33[5] = v28;
  AsyncStream.Continuation.onTermination.setter();
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v41, v31, v2);
  uint64_t v34 = v42;
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v34, v44);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v23, v17);
}

uint64_t closure #1 in _Streamed.projectedValue.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for AsyncStream.Continuation();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t result = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)v20 - v13;
  uint64_t v15 = *a1;
  uint64_t v16 = *a1 + 1;
  if (__OFADD__(*a1, 1))
  {
    __break(1u);
  }
  else
  {
    v20[0] = a4;
    *a1 = v16;
    uint64_t v17 = *(void *)(v10 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v14, a2, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v10);
    v20[3] = v15;
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    uint64_t v18 = (char *)a5 + *(int *)(swift_getTupleTypeMetadata2() + 48);
    *a5 = v15;
    uint64_t v19 = type metadata accessor for _Streamed.State();
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(a3 - 8) + 16))(v18, (char *)a1 + *(int *)(v19 + 40), a3);
  }
  return result;
}

uint64_t closure #2 in _Streamed.projectedValue.getter()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = *(void *)(result + 16);
    swift_retain();
    uint64_t v2 = swift_release();
    MEMORY[0x1F4188790](v2);
    type metadata accessor for _Streamed.State();
    uint64_t v3 = v1 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v1 + 16);
    uint64_t v4 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(void *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v4);
    partial apply for closure #1 in closure #2 in _Streamed.projectedValue.getter(v3);
    os_unfair_lock_unlock(v4);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #2 in _Streamed.projectedValue.getter(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AsyncStream.Continuation();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v8 - v5;
  v8[1] = a2;
  type metadata accessor for Dictionary();
  Dictionary.removeValue(forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t closure #1 in _Streamed.yield(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1 + *(int *)(type metadata accessor for _Streamed.State() + 40);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, a3);
  char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a3);
  uint64_t v14 = 0;
  if ((v12 & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v11, a2, a3);
    uint64_t v14 = *(void *)(a1 + 8);
    type metadata accessor for AsyncStream.Continuation();
    uint64_t result = swift_bridgeObjectRetain();
  }
  *a4 = v14;
  return result;
}

void closure #1 in _Streamed.finish()(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  type metadata accessor for AsyncStream.Continuation();
  type metadata accessor for Dictionary();
  swift_bridgeObjectRetain();
  Dictionary.removeAll(keepingCapacity:)(0);
  *a2 = v3;
}

uint64_t specialized OSAllocatedUnfairLock.init(uncheckedState:)()
{
  return static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)();
}

void *specialized _Streamed.init(wrappedValue:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v14 - v5;
  uint64_t v7 = type metadata accessor for _Streamed.State();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  type metadata accessor for AsyncStream.Continuation();
  uint64_t v11 = Dictionary.init()();
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = v11;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v10[*(int *)(v7 + 40)], v6, v3);
  uint64_t v12 = specialized OSAllocatedUnfairLock.init(uncheckedState:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v1[2] = v12;
  return v1;
}

void partial apply for closure #1 in _Streamed.finish()(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t partial apply for closure #1 in _Streamed.projectedValue.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _Streamed.projectedValue.getter(a1, v2[4], v2[2], v2[3], a2);
}

uint64_t sub_1A38133F0()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1A3813428()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #2 in _Streamed.projectedValue.getter()
{
  return closure #2 in _Streamed.projectedValue.getter();
}

void sub_1A381346C(uint64_t a1@<X8>)
{
}

uint64_t sub_1A3813490()
{
  return specialized _Streamed.wrappedValue.setter();
}

uint64_t sub_1A38134B4()
{
  return 16;
}

__n128 sub_1A38134C0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for _Streamed()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for _Streamed()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for _Streamed(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for _Streamed);
}

uint64_t dispatch thunk of _Streamed.__allocating_init(wrappedValue:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata completion function for _Streamed.State()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _Streamed.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v11 = *a2;
    unint64_t v10 = (unint64_t)a2 + 15;
    *a1 = v11;
    uint64_t v12 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v12 = *(void *)(v10 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = ((unint64_t)v12 + v6 + 8) & ~v6;
    unint64_t v14 = ((v10 & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6;
    uint64_t v15 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v15(v13, v14, v4);
  }
  return v3;
}

uint64_t destroy for _Streamed.State(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *initializeWithCopy for _Streamed.State(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  unint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v6 = *(void *)(v4 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v10 = ((unint64_t)v6 + v9 + 8) & ~v9;
  unint64_t v11 = (v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  swift_bridgeObjectRetain();
  v8(v10, v11, v7);
  return a1;
}

void *assignWithCopy for _Streamed.State(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))(((unint64_t)v5 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

void *initializeWithTake for _Streamed.State(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *assignWithTake for _Streamed.State(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)v5 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _Streamed.State(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      uint64_t v15 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v6 + 8) & ~v6);
      }
      unint64_t v16 = *v15;
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for _Streamed.State(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x1A3813E0CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        uint64_t v18 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v7 & 0x80000000) != 0)
        {
          uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(((unint64_t)v18 + v9 + 8) & ~v9);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = a2 - 1;
          }
          void *v18 = v19;
        }
      }
      return;
  }
}

uint64_t partial apply for closure #1 in _Streamed.yield(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in _Streamed.yield(_:)(a1, *(void *)(v2 + 32), *(void *)(v2 + 16), a2);
}

uint64_t partial apply for closure #1 in closure #2 in _Streamed.projectedValue.getter(uint64_t a1)
{
  return closure #1 in closure #2 in _Streamed.projectedValue.getter(a1, *(void *)(v1 + 32));
}

uint64_t partial apply for closure #1 in OSAllocatedUnfairLock.init(uncheckedState:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *a1;
  *(_DWORD *)((char *)a1 + ((*(unsigned int *)(v4 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v4 + *MEMORY[0x1E4FBBAB0]) - 8) + 16))(a2, v3);
}

uint64_t SystemCoordinatorHostConnection.__allocating_init(connection:queue:)()
{
  id v1 = objc_allocWithZone(v0);
  swift_unknownObjectWeakInit();
  return XPCHostConnection.init(connection:queue:)();
}

uint64_t SystemCoordinatorHostConnection.delegate.getter()
{
  uint64_t v1 = v0 + direct field offset for SystemCoordinatorHostConnection.delegate;
  swift_beginAccess();
  return MEMORY[0x1A624F980](v1);
}

void SystemCoordinatorHostConnection.delegate.setter(void *a1)
{
}

void (*SystemCoordinatorHostConnection.delegate.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = direct field offset for SystemCoordinatorHostConnection.delegate;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1A624F980](v5);
  return SystemCoordinatorHostConnection.delegate.modify;
}

void SystemCoordinatorHostConnection.delegate.modify(id **a1, char a2)
{
  uint64_t v3 = *a1;
  id v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if (a2)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();
  }

  free(v3);
}

Swift::Void __swiftcall SystemCoordinatorHostConnection.handleHostConnectionInvalidated()()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  id v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = v0 + direct field offset for SystemCoordinatorHostConnection.delegate;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1A624F980](v5);
  if (v6)
  {
    unsigned int v7 = (char *)v6;
    unsigned int v8 = *(void **)(v6 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_queue);
    void *v4 = v8;
    (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCBF0], v1);
    id v9 = v8;
    LOBYTE(v8) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
    if (v8)
    {
      size_t v10 = &v7[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_delegate];
      swift_beginAccess();
      if (MEMORY[0x1A624F980](v10))
      {
        uint64_t v11 = *((void *)v10 + 1);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v7, ObjectType, v11);

        swift_unknownObjectRelease();
      }
      else
      {
      }
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t SystemCoordinatorHostConnection.init(connection:queue:)()
{
  swift_unknownObjectWeakInit();

  return XPCHostConnection.init(connection:queue:)();
}

uint64_t SystemCoordinatorHostConnection.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

id SystemCoordinatorHostConnection.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc SystemCoordinatorHostConnection.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t SystemCoordinatorHostConnection.requestCurrentState(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unsigned int v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unsigned int v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v13 = (void *)XPCHostConnection.queue.getter();
  unsigned int v14 = (void *)swift_allocObject();
  v14[2] = v2;
  v14[3] = a1;
  v14[4] = a2;
  aBlock[4] = partial apply for closure #1 in SystemCoordinatorHostConnection.requestCurrentState(_:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_6;
  int v15 = _Block_copy(aBlock);
  id v16 = v2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v18[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A624E5F0](0, v12, v8, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

void closure #1 in SystemCoordinatorHostConnection.requestCurrentState(_:)(uint64_t a1, void (*a2)(void))
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = a1 + direct field offset for SystemCoordinatorHostConnection.delegate;
  swift_beginAccess();
  uint64_t v9 = MEMORY[0x1A624F980](v8);
  if (v9)
  {
    uint64_t v10 = (char *)v9;
    uint64_t v11 = *(void **)(v9 + OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_queue);
    *uint64_t v7 = v11;
    (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBCBF0], v4);
    id v12 = v11;
    LOBYTE(v11) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
    if (v11)
    {
      int v13 = (id *)&v10[OBJC_IVAR____TtC15GroupActivities21SystemCoordinatorHost_currentState];
      swift_beginAccess();
      id v14 = *v13;
      a2();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_1A3814788()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

void partial apply for closure #1 in SystemCoordinatorHostConnection.requestCurrentState(_:)()
{
  closure #1 in SystemCoordinatorHostConnection.requestCurrentState(_:)(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t @objc SystemCoordinatorHostConnection.requestCurrentState(_:)(void *a1, int a2, void *aBlock)
{
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  id v6 = a1;
  SystemCoordinatorHostConnection.requestCurrentState(_:)((uint64_t)partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned SystemCoordinatorState) -> (), v5);

  return swift_release();
}

uint64_t SystemCoordinatorHostConnection.setConfiguration(_:)(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  id v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)XPCHostConnection.queue.getter();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v1;
  *(void *)(v12 + 24) = a1;
  aBlock[4] = partial apply for closure #1 in SystemCoordinatorHostConnection.setConfiguration(_:);
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_6;
  int v13 = _Block_copy(aBlock);
  id v14 = v1;
  id v15 = a1;
  static DispatchQoS.unspecified.getter();
  v17[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A624E5F0](0, v10, v6, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

void closure #1 in SystemCoordinatorHostConnection.setConfiguration(_:)(uint64_t a1)
{
  uint64_t v1 = a1 + direct field offset for SystemCoordinatorHostConnection.delegate;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1A624F980](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    PassthroughSubject.send(_:)();
  }
}

uint64_t sub_1A3814C1C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in SystemCoordinatorHostConnection.setConfiguration(_:)()
{
  closure #1 in SystemCoordinatorHostConnection.setConfiguration(_:)(*(void *)(v0 + 16));
}

uint64_t sub_1A3814C64@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + direct field offset for SystemCoordinatorHostConnection.delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1A624F980](v3);
  *a2 = result;
  return result;
}

uint64_t sub_1A3814CBC()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t type metadata accessor for SystemCoordinatorHostConnection()
{
  uint64_t result = type metadata singleton initialization cache for SystemCoordinatorHostConnection;
  if (!type metadata singleton initialization cache for SystemCoordinatorHostConnection) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for SystemCoordinatorHostConnection()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for SystemCoordinatorHostConnection()
{
  return type metadata accessor for SystemCoordinatorHostConnection();
}

void @objc SystemCoordinatorHostConnection.setConfiguration(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  SystemCoordinatorHostConnection.setConfiguration(_:)(v4);
}

uint64_t sub_1A3814E1C()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned SystemCoordinatorState) -> ()(uint64_t a1)
{
  return thunk for @escaping @callee_unowned @convention(block) (@unowned SystemCoordinatorState) -> ()(a1, *(void *)(v1 + 16));
}

uint64_t GroupStateObserver.isEligibleForGroupSession.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t key path getter for GroupStateObserver.isEligibleForGroupSession : GroupStateObserver@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for GroupStateObserver.isEligibleForGroupSession : GroupStateObserver()
{
  return static Published.subscript.setter();
}

uint64_t key path getter for GroupStateObserver.$isEligibleForGroupSession : GroupStateObserver()
{
  return swift_endAccess();
}

uint64_t key path setter for GroupStateObserver.$isEligibleForGroupSession : GroupStateObserver(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  id v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t GroupStateObserver.__allocating_init(conversationManagerClient:queue:)(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  uint64_t v8 = specialized GroupStateObserver.__allocating_init(conversationManagerClient:queue:)(v7, a2, v2, v5, v6);

  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v8;
}

uint64_t GroupStateObserver.init(conversationManagerClient:queue:)(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  uint64_t v11 = specialized GroupStateObserver.init(conversationManagerClient:queue:)((uint64_t)v9, a2, v2, v5, v6);

  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v11;
}

uint64_t GroupStateObserver.__allocating_init(queue:)(void *a1)
{
  type metadata accessor for ConversationManagerClient();
  uint64_t v2 = (void *)static ConversationManagerClient.shared.getter();
  uint64_t v3 = swift_allocObject();

  return specialized GroupStateObserver.init(conversationManagerClient:queue:)(v2, a1, v3);
}

uint64_t GroupStateObserver.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15GroupActivities18GroupStateObserver__isEligibleForGroupSession;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t GroupStateObserver.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15GroupActivities18GroupStateObserver__isEligibleForGroupSession;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t specialized GroupStateObserver.init(conversationManagerClient:queue:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v51[1] = a5;
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  uint64_t v70 = *(void *)(v59 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v59);
  v68 = (char *)v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  v69 = (char *)v51 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  MEMORY[0x1F4188790](v11 - 8);
  v63 = (char *)v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>);
  uint64_t v53 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  v52 = (char *)v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>>);
  uint64_t v56 = *(void *)(v58 - 8);
  MEMORY[0x1F4188790](v58);
  v55 = (char *)v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>>, OS_dispatch_queue>);
  uint64_t v62 = *(void *)(v64 - 8);
  MEMORY[0x1F4188790](v64);
  v60 = (char *)v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, Bool>);
  uint64_t v66 = *(void *)(v17 - 8);
  uint64_t v67 = v17;
  MEMORY[0x1F4188790](v17);
  v65 = (char *)v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v61 = v25;
  uint64_t v26 = *(void (**)(void))(v25 + 32);
  v73 = (char *)v51 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26();
  uint64_t v71 = a3;
  uint64_t v27 = a3 + OBJC_IVAR____TtC15GroupActivities18GroupStateObserver__isEligibleForGroupSession;
  LOBYTE(v74) = 0;
  Published.init(initialValue:)();
  uint64_t v28 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 32);
  uint64_t v54 = v27;
  uint64_t v57 = v19;
  v28(v27, v23, v19);
  if (one-time initialization token for client != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Logger.client);
  v72 = a2;
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 138412290;
    uint64_t v34 = v72;
    uint64_t v74 = (uint64_t)v72;
    uint64_t v35 = v72;
    v51[0] = v13;
    uint64_t v36 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v33 = v34;

    uint64_t v13 = v51[0];
    _os_log_impl(&dword_1A375F000, v30, v31, "Initialized group state observer on queue: %@", v32, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v33, -1, -1);
    MEMORY[0x1A624F870](v32, -1, -1);
  }
  else
  {

    uint64_t v30 = v72;
  }

  uint64_t v37 = a4;
  uint64_t v74 = dispatch thunk of ActivitySessionContainerProvider.onActivitySessionsChanged.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>);
  uint64_t v38 = v65;
  Publisher.map<A>(_:)();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, Bool> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, Bool>);
  uint64_t v39 = v67;
  uint64_t v74 = Publisher.eraseToAnyPublisher()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<Bool, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
  uint64_t v40 = v52;
  Publisher<>.removeDuplicates()();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>);
  uint64_t v41 = v55;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v40, v13);
  uint64_t v74 = (uint64_t)v72;
  uint64_t v42 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v43 = (uint64_t)v63;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v63, 1, 1, v42);
  type metadata accessor for OS_dispatch_queue();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>>);
  lazy protocol witness table accessor for type OS_dispatch_queue and conformance OS_dispatch_queue();
  uint64_t v44 = v60;
  uint64_t v45 = v58;
  Publisher.receive<A>(on:options:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v43, &demangling cache variable for type metadata for OS_dispatch_queue.SchedulerOptions?);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v41, v45);
  swift_beginAccess();
  uint64_t v46 = v69;
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.ReceiveOn<Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>>, OS_dispatch_queue> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<Publishers.HandleEvents<Publishers.RemoveDuplicates<AnyPublisher<Bool, Never>>>, OS_dispatch_queue>);
  uint64_t v47 = v64;
  Publisher<>.assign(to:)();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v44, v47);
  uint64_t v48 = v70;
  uint64_t v49 = v59;
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v68, v46, v59);
  swift_beginAccess();
  Published.projectedValue.setter();
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v46, v49);
  swift_release();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v38, v39);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v73, v37);
  return v71;
}

uint64_t specialized GroupStateObserver.__allocating_init(conversationManagerClient:queue:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  return specialized GroupStateObserver.init(conversationManagerClient:queue:)((uint64_t)v11, a2, v12, a4, a5);
}

uint64_t ObjC metadata update function for GroupStateObserver()
{
  return type metadata accessor for GroupStateObserver();
}

uint64_t method lookup function for GroupStateObserver(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for GroupStateObserver);
}

uint64_t dispatch thunk of GroupStateObserver.__allocating_init(conversationManagerClient:queue:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t outlined init with take of (key: UUID, value: TUConversationActivitySessionContainer)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: TUConversationActivitySessionContainer));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t Subject.wrappedValue.getter()
{
  if (*(void *)(v0 + 8))
  {
    uint64_t v1 = *(void *)(v0 + 8);
  }
  else
  {
    uint64_t v1 = closure #1 in Subject.wrappedValue.getter();
    *(void *)(v0 + 8) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

uint64_t Subject.wrappedValue.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t Subject.projectedValue.getter()
{
  return swift_retain();
}

uint64_t Subject.init()@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for PassthroughSubject();
  uint64_t result = PassthroughSubject.__allocating_init()();
  *a1 = result;
  a1[1] = 0;
  return result;
}

uint64_t closure #1 in Subject.wrappedValue.getter()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t (*Subject.wrappedValue.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = Subject.wrappedValue.getter();
  return Subject.wrappedValue.modify;
}

uint64_t Subject.wrappedValue.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (a2)
  {
    swift_retain();
    swift_release();
    *(void *)(v3 + 8) = v2;
    return swift_release();
  }
  else
  {
    uint64_t result = swift_release();
    *(void *)(v3 + 8) = v2;
  }
  return result;
}

uint64_t destroy for Subject()
{
  swift_release();

  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for Subject(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for Subject(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for Subject(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for Subject()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ContentAssociation.tuContentAssociation.getter()
{
  return *(void *)v0;
}

uint64_t ContentAssociation.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ContentAssociation.shared.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void static ContentAssociation.initiatorOwned.getter(void *a1@<X8>)
{
  *a1 = 1;
}

BOOL static ContentAssociation.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

ValueMetadata *type metadata accessor for ContentAssociation()
{
  return &type metadata for ContentAssociation;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, unint64_t *a2)
{
  uint64_t v44 = a2;
  uint64_t v48 = type metadata accessor for UTType();
  uint64_t v3 = MEMORY[0x1F4188790](v48);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v3);
  uint64_t v8 = (char *)&v37 - v7;
  MEMORY[0x1F4188790](v6);
  uint64_t v42 = (char *)&v37 - v10;
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v38 = a1 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  uint64_t v41 = v9 + 16;
  uint64_t v49 = v9 + 32;
  uint64_t v47 = v9;
  int64_t v39 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v40 = v9 + 8;
  uint64_t v45 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v16 = 0;
  uint64_t v43 = v5;
  if (!v14) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v17 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  int64_t v46 = v16;
  for (unint64_t i = v17 | (v16 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v21 << 6))
  {
    uint64_t v23 = v47;
    uint64_t v24 = v48;
    uint64_t v25 = *(void *)(v47 + 72);
    uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v47 + 16);
    uint64_t v27 = v42;
    v26(v42, *(void *)(v45 + 48) + v25 * i, v48);
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v28(v8, v27, v24);
    uint64_t v29 = v8;
    v26(v5, (unint64_t)v8, v24);
    uint64_t v30 = v44;
    unint64_t v31 = *v44;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v30 = v31;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v31 + 16) + 1, 1, v31);
      *uint64_t v44 = v31;
    }
    unint64_t v34 = *(void *)(v31 + 16);
    unint64_t v33 = *(void *)(v31 + 24);
    if (v34 >= v33 >> 1)
    {
      unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, v31);
      *uint64_t v44 = v31;
    }
    *(void *)(v31 + 16) = v34 + 1;
    uint64_t v36 = v47;
    uint64_t v35 = v48;
    uint64_t v5 = v43;
    v28((char *)(v31+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ v34 * v25), v43, v48);
    uint64_t v8 = v29;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v29, v35);
    int64_t v16 = v46;
    if (v14) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v19 >= v39) {
      return swift_release();
    }
    unint64_t v20 = *(void *)(v38 + 8 * v19);
    int64_t v21 = v16 + 1;
    if (!v20)
    {
      int64_t v21 = v16 + 2;
      if (v16 + 2 >= v39) {
        return swift_release();
      }
      unint64_t v20 = *(void *)(v38 + 8 * v21);
      if (!v20)
      {
        int64_t v21 = v16 + 3;
        if (v16 + 3 >= v39) {
          return swift_release();
        }
        unint64_t v20 = *(void *)(v38 + 8 * v21);
        if (!v20)
        {
          int64_t v21 = v16 + 4;
          if (v16 + 4 >= v39) {
            return swift_release();
          }
          unint64_t v20 = *(void *)(v38 + 8 * v21);
          if (!v20) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v14 = (v20 - 1) & v20;
    int64_t v46 = v21;
  }
  uint64_t v22 = v16 + 5;
  if (v16 + 5 >= v39) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v38 + 8 * v22);
  if (v20)
  {
    int64_t v21 = v16 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v21 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v21 >= v39) {
      return swift_release();
    }
    unint64_t v20 = *(void *)(v38 + 8 * v21);
    ++v22;
    if (v20) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized _PublisherElements.Iterator.Inner.cancel()(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v7 = *(os_unfair_lock_s **)(v3 + 16);
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v3 + 24);
  *(void *)(v3 + 24) = MEMORY[0x1E4FBC860];
  uint64_t v9 = v3 + 32;
  swift_beginAccess();
  outlined init with copy of URL?(v3 + 32, (uint64_t)&v49, a1);
  if (v50 >= 2)
  {
    outlined init with take of TypedPayloadDecoding(&v49, (uint64_t)v47);
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Log.default);
    outlined init with copy of AudioSessionAssertionManager((uint64_t)v47, (uint64_t)v45);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v36 = a1;
      uint64_t v38 = v8;
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v41 = v21;
      *(_DWORD *)unint64_t v20 = 136315138;
      outlined init with copy of AudioSessionAssertionManager((uint64_t)v45, (uint64_t)v44);
      outlined init with copy of URL?((uint64_t)v44, (uint64_t)&v42, &demangling cache variable for type metadata for Subscription?);
      uint64_t v35 = v7;
      if (v43)
      {
        outlined init with take of TypedPayloadDecoding(&v42, (uint64_t)v40);
        outlined init with copy of AudioSessionAssertionManager((uint64_t)v40, (uint64_t)v39);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Subscription);
        uint64_t v22 = String.init<A>(reflecting:)();
        unint64_t v24 = v23;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v40);
      }
      else
      {
        uint64_t v22 = 7104878;
        unint64_t v24 = 0xE300000000000000;
      }
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v44, &demangling cache variable for type metadata for Subscription?);
      v44[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v45);
      _os_log_impl(&dword_1A375F000, v18, v19, "Handling cancellation by terminating upstream subscription: %s", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v21, -1, -1);
      MEMORY[0x1A624F870](v20, -1, -1);

      a1 = v36;
      uint64_t v8 = v38;
      uint64_t v7 = v35;
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v45);
    }
    memset(v45, 0, sizeof(v45));
    long long v46 = xmmword_1A38F7C50;
    swift_beginAccess();
    outlined assign with take of _PublisherElements<AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never>>.Iterator.Inner.State((uint64_t)v45, v9, a1);
    swift_endAccess();
    os_unfair_lock_unlock(v7);
    __swift_project_boxed_opaque_existential_1(v47, v48);
    dispatch thunk of Cancellable.cancel()();
    uint64_t v30 = *(void *)(v8 + 16);
    if (v30)
    {
      unint64_t v31 = (uint64_t *)(v8 + 32);
      do
      {
        uint64_t v32 = *v31++;
        v45[0] = 0;
        outlined init with take of Date?((uint64_t)v45, *(void *)(*(void *)(v32 + 64) + 40), a2);
        swift_continuation_resume();
        --v30;
      }
      while (v30);
    }
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.default);
    swift_retain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v34 = v7;
      uint64_t v37 = v8;
      uint64_t v13 = a1;
      unint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      v40[0] = v33;
      *(_DWORD *)unint64_t v14 = 136315138;
      outlined init with copy of URL?(v9, (uint64_t)v47, v13);
      outlined init with copy of URL?((uint64_t)v47, (uint64_t)v45, a3);
      if ((void)v46 == 2)
      {
        uint64_t v15 = 7104878;
        unint64_t v16 = 0xE300000000000000;
      }
      else
      {
        outlined init with take of Date?((uint64_t)v45, (uint64_t)v44, v13);
        outlined init with copy of URL?((uint64_t)v44, (uint64_t)&v42, v13);
        __swift_instantiateConcreteTypeFromMangledName(v13);
        uint64_t v15 = String.init<A>(reflecting:)();
        unint64_t v16 = v25;
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v44, v13);
      }
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v47, a3);
      v47[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v11, v12, "Terminating sequence from state: %s", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v33, -1, -1);
      MEMORY[0x1A624F870](v14, -1, -1);

      a1 = v13;
      uint64_t v8 = v37;
      uint64_t v7 = v34;
    }
    else
    {

      swift_release_n();
    }
    memset(v47, 0, sizeof(v47));
    long long v48 = xmmword_1A38F7C50;
    swift_beginAccess();
    outlined assign with take of _PublisherElements<AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never>>.Iterator.Inner.State((uint64_t)v47, v9, a1);
    swift_endAccess();
    os_unfair_lock_unlock(v7);
    uint64_t v26 = *(void *)(v8 + 16);
    if (v26)
    {
      uint64_t v27 = (uint64_t *)(v8 + 32);
      do
      {
        uint64_t v28 = *v27++;
        v47[0] = 0;
        outlined init with take of Date?((uint64_t)v47, *(void *)(*(void *)(v28 + 64) + 40), a2);
        swift_continuation_resume();
        --v26;
      }
      while (v26);
    }
    swift_bridgeObjectRelease();
    return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v49, a1);
  }
}

uint64_t specialized closure #1 in _PublisherElements.Iterator.next()()
{
  return specialized _PublisherElements.Iterator.Inner.cancel()(&demangling cache variable for type metadata for _PublisherElements<AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never>>.Iterator.Inner.State, &demangling cache variable for type metadata for [GroupSessionAttachmentManager.Attachment]?, &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never>>.Iterator.Inner.State?);
}

uint64_t GroupSessionJournal.session.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t GroupSessionJournal.attachments.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>.Publisher);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v1 + 32))
  {
    uint64_t v8 = *(void *)(v1 + 32);
  }
  else
  {
    swift_beginAccess();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>);
    Published.projectedValue.getter();
    swift_endAccess();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<[GroupSessionJournal.Attachment]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>.Publisher);
    uint64_t v8 = Publisher.eraseToAnyPublisher()();
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(void *)(v2 + 32) = v8;
    swift_retain();
    swift_release();
  }
  *a1 = v8;
  return swift_retain();
}

uint64_t GroupSessionJournal.attachments.setter(void *a1)
{
  *(void *)(v1 + 32) = *a1;
  return swift_release();
}

uint64_t GroupSessionJournal.Attachments.init(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>);
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<[GroupSessionJournal.Attachment]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>.Publisher);
  uint64_t v6 = Publisher.eraseToAnyPublisher()();
  swift_release();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *a1 = v6;
  return result;
}

uint64_t (*GroupSessionJournal.attachments.modify(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  GroupSessionJournal.attachments.getter(a1);
  return GroupSessionJournal.attachments.modify;
}

uint64_t GroupSessionJournal.attachments.modify(void *a1)
{
  *(void *)(a1[1] + 32) = *a1;
  return swift_release();
}

uint64_t GroupSessionJournal._attachments.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t GroupSessionJournal.cancellables.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t GroupSessionJournal.cancellables.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC15GroupActivities19GroupSessionJournal_cancellables);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*GroupSessionJournal.cancellables.modify())()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t GroupSessionJournal.add<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v7 = type metadata accessor for URL();
  v5[9] = v7;
  v5[10] = *(void *)(v7 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Optional();
  v5[12] = v8;
  v5[13] = *(void *)(v8 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = *(void *)(a3 - 8);
  v5[16] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v5[17] = v9;
  v5[18] = *(void *)(v9 - 8);
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  return MEMORY[0x1F4188298](GroupSessionJournal.add<A>(_:), 0, 0);
}

uint64_t GroupSessionJournal.add<A>(_:)()
{
  uint64_t v43 = v0;
  UUID.init()();
  if (one-time initialization token for ledger != -1) {
    swift_once();
  }
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  uint64_t v6 = v0[15];
  uint64_t v5 = v0[16];
  uint64_t v8 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.ledger);
  type = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  type(v5, v8, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = v0[18];
  uint64_t v14 = v0[19];
  uint64_t v15 = v0[17];
  uint64_t v16 = v0[15];
  if (v12)
  {
    uint64_t v38 = v0[17];
    uint64_t v17 = v0[13];
    uint64_t v18 = v0[14];
    uint64_t v35 = v0[12];
    uint64_t v36 = v0[18];
    uint64_t v19 = v0[6];
    uint64_t v20 = v0[16];
    uint64_t v37 = v0[19];
    uint64_t v21 = swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    uint64_t v42 = v39;
    *(_DWORD *)uint64_t v21 = 136315394;
    type(v18, v20, v19);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v19);
    uint64_t v22 = v10;
    uint64_t v23 = >> prefix<A>(_:)(v18, v19);
    os_log_type_t typea = v11;
    unint64_t v25 = v24;
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v35);
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v20, v19);
    *(_WORD *)(v21 + 12) = 2080;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v28(v37, v38);
    _os_log_impl(&dword_1A375F000, v22, typea, "Received add request for item: %s, using ID: %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v39, -1, -1);
    MEMORY[0x1A624F870](v21, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v16 + 8))(v0[16], v0[6]);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v28(v14, v15);
  }
  v0[21] = v28;
  uint64_t v29 = (void *)swift_task_alloc();
  v0[22] = v29;
  *uint64_t v29 = v0;
  v29[1] = GroupSessionJournal.add<A>(_:);
  uint64_t v30 = v0[11];
  uint64_t v31 = v0[6];
  uint64_t v32 = v0[7];
  uint64_t v33 = v0[5];
  return static URL.file<A>(from:)(v30, v33, v31, v32);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v2 = (void *)*v1;
  v2[23] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](GroupSessionJournal.add<A>(_:), 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[24] = v3;
    void *v3 = v2;
    v3[1] = GroupSessionJournal.add<A>(_:);
    uint64_t v4 = v2[20];
    uint64_t v5 = v2[11];
    uint64_t v6 = v2[4];
    return GroupSessionJournal.add(id:attachmentData:developerMetadata:)(v6, v4, v5, 0, 0xF000000000000000);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = GroupSessionJournal.add<A>(_:);
  }
  else {
    uint64_t v2 = GroupSessionJournal.add<A>(_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[20];
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[21];
  uint64_t v3 = v0[17];
  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
  v2(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0 + 168))(*(void *)(v0 + 160), *(void *)(v0 + 136));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(*(void *)(v0 + 80) + 8))(*(void *)(v0 + 88), *(void *)(v0 + 72));
  (*(void (**)(void, void))(v0 + 168))(*(void *)(v0 + 160), *(void *)(v0 + 136));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t static URL.file<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[29] = a3;
  v4[30] = a4;
  v4[27] = a1;
  v4[28] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v4[31] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v4[32] = v5;
  v4[33] = *(void *)(v5 - 8);
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[37] = v6;
  v4[38] = *(void *)(v6 - 8);
  v4[39] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ResolvedTransferRepresentation();
  v4[40] = v7;
  v4[41] = *(void *)(v7 - 8);
  v4[42] = swift_task_alloc();
  v4[43] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for _TransferRepresentationInputs();
  v4[44] = v8;
  v4[45] = *(void *)(v8 - 8);
  v4[46] = swift_task_alloc();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4[47] = AssociatedTypeWitness;
  uint64_t v10 = type metadata accessor for _TransferRepresentationValue();
  v4[48] = v10;
  v4[49] = *(void *)(v10 - 8);
  v4[50] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for _TransferRepresentationOutputs();
  v4[51] = v11;
  v4[52] = *(void *)(v11 - 8);
  v4[53] = swift_task_alloc();
  v4[54] = *(void *)(AssociatedTypeWitness - 8);
  v4[55] = swift_task_alloc();
  v4[56] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for UTType();
  v4[57] = v12;
  v4[58] = *(void *)(v12 - 8);
  v4[59] = swift_task_alloc();
  v4[60] = swift_task_alloc();
  v4[61] = swift_task_alloc();
  v4[62] = swift_task_alloc();
  v4[63] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UTType?);
  v4[64] = swift_task_alloc();
  v4[65] = swift_task_alloc();
  v4[66] = swift_task_alloc();
  return MEMORY[0x1F4188298](static URL.file<A>(from:), 0, 0);
}

uint64_t static URL.file<A>(from:)()
{
  uint64_t v70 = v0;
  v69[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = static Transferable.readableContentTypes.getter();
  uint64_t v2 = specialized Set.init<A>(_:)(v1);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 200) = v2;
  uint64_t v3 = v0 + 200;
  if (one-time initialization token for default != -1) {
LABEL_26:
  }
    swift_once();
  uint64_t v4 = (unint64_t *)(v3 - 24);
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v0 + 536) = v5;
  *(void *)(v0 + 544) = __swift_project_value_buffer(v5, (uint64_t)static Log.default);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    v69[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v10 = _typeName(_:qualified:)();
    *(void *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    swift_beginAccess();
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
    swift_bridgeObjectRetain();
    uint64_t v12 = Set.description.getter();
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v6, v7, "ItemType: %s has readableContentTypes: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    uint64_t v15 = v9;
    uint64_t v4 = (unint64_t *)(v3 - 24);
    MEMORY[0x1A624F870](v15, -1, -1);
    MEMORY[0x1A624F870](v8, -1, -1);
  }

  uint64_t v16 = *(void *)(v0 + 528);
  uint64_t v17 = *(void *)(v0 + 504);
  uint64_t v18 = *(void *)(v0 + 456);
  uint64_t v19 = *(void *)(v0 + 464);
  *(void *)(v0 + 176) = MEMORY[0x1E4FBC860];
  static UTType.fileURL.getter();
  swift_beginAccess();
  specialized Set._Variant.remove(_:)(v17, v16);
  swift_endAccess();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  *(void *)(v0 + 552) = v20;
  *(void *)(v0 + 560) = (v19 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v20(v17, v18);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  *(void *)(v0 + 568) = v21;
  *(void *)(v0 + 576) = (v19 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  int v22 = v21(v16, 1, v18);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v16, (uint64_t *)&demangling cache variable for type metadata for UTType?);
  if (v22 != 1)
  {
    static UTType.fileURL.getter();
    unint64_t v23 = *(void *)(v0 + 176);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v23 + 16) + 1, 1, v23);
    }
    unint64_t v25 = *(void *)(v23 + 16);
    unint64_t v24 = *(void *)(v23 + 24);
    if (v25 >= v24 >> 1) {
      unint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, v23);
    }
    uint64_t v26 = *(void *)(v0 + 496);
    uint64_t v27 = *(void *)(v0 + 456);
    uint64_t v28 = *(void *)(v0 + 464);
    *(void *)(v23 + 16) = v25 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v28 + 32))(v23+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(void *)(v28 + 72) * v25, v26, v27);
    *(void *)(v0 + 176) = v23;
  }
  uint64_t v29 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v29, v4);
  swift_bridgeObjectRelease();
  uint64_t v30 = *(void *)(v0 + 176);
  *(void *)(v0 + 584) = v30;
  uint64_t v31 = *(void *)(v30 + 16);
  *(void *)(v0 + 592) = v31;
  if (v31)
  {
    *(_DWORD *)(v0 + 752) = *(_DWORD *)(*(void *)(v0 + 464) + 80);
    swift_bridgeObjectRetain();
    unint64_t v32 = 0;
    while (1)
    {
      *(void *)(v0 + 600) = v32;
      if (v32 >= *(void *)(*(void *)(v0 + 584) + 16))
      {
        __break(1u);
        goto LABEL_26;
      }
      uint64_t v33 = *(void *)(v0 + 464);
      uint64_t v35 = *(void *)(v0 + 440);
      uint64_t v34 = *(void *)(v0 + 448);
      uint64_t v36 = *(void *)(v0 + 432);
      uint64_t v66 = *(void *)(v0 + 488);
      uint64_t v67 = *(void *)(v0 + 416);
      uint64_t v37 = *(void *)(v0 + 400);
      uint64_t v68 = *(void *)(v0 + 408);
      uint64_t v38 = *(void *)(v0 + 376);
      uint64_t v64 = *(void *)(v0 + 392);
      uint64_t v65 = *(void *)(v0 + 384);
      uint64_t v40 = *(void *)(v0 + 360);
      uint64_t v39 = *(void *)(v0 + 368);
      uint64_t v62 = *(void *)(v0 + 424);
      uint64_t v63 = *(void *)(v0 + 352);
      uint64_t v3 = *(void *)(v0 + 240);
      uint64_t v41 = *(void (**)(void))(v33 + 16);
      *(void *)(v0 + 608) = v41;
      *(void *)(v0 + 616) = (v33 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v41();
      dispatch thunk of static Transferable.transferRepresentation.getter();
      swift_getDynamicType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v35, v34, v38);
      _TransferRepresentationValue.init(_:)();
      _TransferRepresentationInputs.init()();
      swift_getAssociatedConformanceWitness();
      dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)();
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v63);
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v37, v65);
      uint64_t v42 = _TransferRepresentationOutputs.storage.getter();
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v62, v68);
      uint64_t v43 = swift_task_alloc();
      *(void *)(v43 + 16) = v66;
      uint64_t v44 = specialized _ArrayProtocol.filter(_:)((uint64_t (*)(char *))partial apply for closure #2 in static URL.file<A>(from:), v43, v42);
      *(void *)(v0 + 624) = v44;
      swift_task_dealloc();
      uint64_t v45 = *(void *)(v44 + 16);
      *(void *)(v0 + 632) = v45;
      if (v45) {
        break;
      }
LABEL_17:
      swift_bridgeObjectRelease();
      uint64_t v53 = *(void *)(v0 + 448);
      uint64_t v54 = *(void *)(v0 + 432);
      uint64_t v55 = *(void *)(v0 + 376);
      (*(void (**)(void, void))(v0 + 552))(*(void *)(v0 + 488), *(void *)(v0 + 456));
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
      unint64_t v32 = *(void *)(v0 + 600) + 1;
      if (v32 == *(void *)(v0 + 592))
      {
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
    }
    uint64_t v46 = 0;
    uint64_t v47 = *(void *)(v0 + 328);
    *(_DWORD *)(v0 + 756) = *(_DWORD *)(v47 + 80);
    *(void *)(v0 + 640) = *(void *)(v47 + 72);
    *(void *)(v0 + 648) = *(void *)(v47 + 16);
    uint64_t v48 = MEMORY[0x1E4F277C0];
    while (1)
    {
      *(void *)(v0 + 656) = v46;
      long long v49 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 648);
      uint64_t v50 = *(void *)(v0 + 344);
      uint64_t v51 = *(void *)(v0 + 320);
      unint64_t v52 = *(void *)(v0 + 624)
          + ((*(unsigned __int8 *)(v0 + 756) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 756))
          + *(void *)(v0 + 640) * v46;
      *(void *)(v0 + 664) = (*(void *)(v0 + 328) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v49(v50, v52, v51);
      if (ResolvedTransferRepresentation.representationType.getter() == v48) {
        break;
      }
      (*(void (**)(void, void))(*(void *)(v0 + 328) + 8))(*(void *)(v0 + 344), *(void *)(v0 + 320));
      uint64_t v46 = *(void *)(v0 + 656) + 1;
      if (v46 == *(void *)(v0 + 632)) {
        goto LABEL_17;
      }
    }
    uint64_t v59 = swift_task_alloc();
    *(void *)(v0 + 672) = v59;
    *(void *)uint64_t v59 = v0;
    *(void *)(v59 + 8) = static URL.file<A>(from:);
    uint64_t v60 = *(void *)(v0 + 344);
    long long v61 = *(_OWORD *)(v0 + 224);
    *(void *)(v59 + 128) = *(void *)(v0 + 240);
    *(void *)(v59 + 136) = v60;
    *(_OWORD *)(v59 + 112) = v61;
    return MEMORY[0x1F4188298](ResolvedTransferRepresentation.data<A>(from:), 0, 0);
  }
  else
  {
LABEL_19:
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *uint64_t v56 = 1;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v57 = *(uint64_t (**)(void))(v0 + 8);
    return v57();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  NSString *v7;
  void (*v8)(uint64_t, id);
  void *v9;
  void (*v10)(uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(void);
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t);
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(void);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, unint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  long long v100;
  unsigned int (*v101)(uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  NSObject *log;
  os_log_t loga;
  os_log_t logb;
  id v113;
  id v114;
  uint64_t (*v115)(uint64_t, uint64_t);
  uint64_t v116;

  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 280);
  uint64_t v5 = *(id *)(v0 + 256);
  uint64_t v6 = *(void *)(v0 + 264);
  v113 = *(id *)(v0 + 232);
  outlined copy of Data._Representation(*(void *)(v0 + 688), *(void *)(v0 + 696));
  swift_bridgeObjectRelease();
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  os_log_type_t v7 = NSTemporaryDirectory();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:isDirectory:)();
  swift_bridgeObjectRelease();
  URL.appendingPathComponent(_:isDirectory:)();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void (**)(uint64_t, id))(v6 + 8);
  *(void *)(v0 + 704) = v8;
  *(void *)(v0 + 712) = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v4, v5);
  if (v5 == v113)
  {
    uint64_t v35 = ResolvedTransferRepresentation.importing.getter();
    *(void *)(v0 + 720) = v35;
    *(void *)(v0 + 728) = v36;
    if (v35)
    {
      uint64_t v37 = (int *)v35;
      uint64_t v38 = *(void *)(v0 + 696);
      uint64_t v39 = *(void *)(v0 + 688);
      uint64_t v40 = MEMORY[0x1E4F248B8];
      *(void *)(v0 + 40) = MEMORY[0x1E4F277C0];
      *(void *)(v0 + 48) = v40;
      *(void *)(v0 + 16) = v39;
      *(void *)(v0 + 24) = v38;
      outlined copy of Data._Representation(v39, v38);
      v115 = (uint64_t (*)(uint64_t, uint64_t))((char *)v37 + *v37);
      uint64_t v41 = (void *)swift_task_alloc();
      *(void *)(v0 + 736) = v41;
      *uint64_t v41 = v0;
      v41[1] = static URL.file<A>(from:);
      return v115(v0 + 56, v0 + 16);
    }
    uint64_t v58 = *(void *)(v0 + 264);
    uint64_t v59 = *(void *)(v0 + 248);
    uint64_t v60 = *(void *)(v0 + 232);
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    *(void *)(v0 + 88) = 0;
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + 56, &demangling cache variable for type metadata for Transferable?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v59, 1, 1, v60);
    uint64_t v9 = *(void **)(v0 + 680);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(void *)(v0 + 248), &demangling cache variable for type metadata for URL?);
  }
  else
  {
    uint64_t v9 = *(void **)(v0 + 680);
  }
  Data.write(to:options:)();
  if (!v9)
  {
    uint64_t v43 = *(void *)(v0 + 696);
    uint64_t v44 = *(void *)(v0 + 688);
    loga = *(os_log_t *)(v0 + 552);
    uint64_t v45 = *(void *)(v0 + 488);
    uint64_t v46 = *(void *)(v0 + 456);
    uint64_t v47 = *(void *)(v0 + 344);
    uint64_t v48 = *(void *)(v0 + 320);
    long long v49 = *(void *)(v0 + 328);
    uint64_t v50 = *(void *)(v0 + 264);
    outlined consume of Data._Representation(v44, v43);
    outlined consume of Data._Representation(v44, v43);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))loga)(v45, v46);
    uint64_t v51 = *(void *)(v0 + 448);
    unint64_t v52 = *(void *)(v0 + 432);
    uint64_t v53 = *(void *)(v0 + 376);
    (*(void (**)(void, void, void))(v50 + 32))(*(void *)(v0 + 216), *(void *)(v0 + 288), *(void *)(v0 + 256));
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v53);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v54 = *(uint64_t (**)(void))(v0 + 8);
LABEL_18:
    return v54();
  }
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 704);
  unint64_t v11 = *(void *)(v0 + 696);
  uint64_t v12 = *(void *)(v0 + 688);
  unint64_t v13 = *(void *)(v0 + 344);
  v114 = v9;
  uint64_t v15 = *(void *)(v0 + 320);
  unint64_t v14 = *(void *)(v0 + 328);
  uint64_t v16 = *(void *)(v0 + 288);
  uint64_t v17 = *(void *)(v0 + 256);
  outlined consume of Data._Representation(v12, v11);
  outlined consume of Data._Representation(v12, v11);
  v10(v16, v17);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 608);
  uint64_t v20 = *(void *)(v0 + 480);
  uint64_t v19 = *(void *)(v0 + 488);
  uint64_t v21 = *(void *)(v0 + 456);
  (*(void (**)(void, void))(*(void *)(v0 + 432) + 8))(*(void *)(v0 + 448), *(void *)(v0 + 376));
  v18(v20, v19, v21);
  int v22 = v114;
  unint64_t v23 = v114;
  unint64_t v24 = Logger.logObject.getter();
  unint64_t v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    log = v24;
    v105 = (uint64_t *)(v0 + 168);
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 608);
    v101 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 568);
    uint64_t v27 = *(void *)(v0 + 520);
    uint64_t v28 = *(void *)(v0 + 512);
    uint64_t v29 = *(void *)(v0 + 480);
    uint64_t v31 = *(void *)(v0 + 456);
    uint64_t v30 = *(void *)(v0 + 464);
    unint64_t v32 = swift_slowAlloc();
    v107 = swift_slowAlloc();
    *(void *)(v0 + 168) = v107;
    *(_DWORD *)unint64_t v32 = 136315394;
    v26(v27, v29, v31);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v31);
    outlined init with copy of URL?(v27, v28, (uint64_t *)&demangling cache variable for type metadata for UTType?);
    if (v101(v28, 1, v31) == 1)
    {
      uint64_t v33 = 0xE300000000000000;
      uint64_t v34 = 7104878;
    }
    else
    {
      long long v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 608);
      uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
      uint64_t v63 = *(void *)(v0 + 504);
      uint64_t v64 = *(void *)(v0 + 472);
      uint64_t v65 = *(void *)(v0 + 456);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 464) + 32))(v63, *(void *)(v0 + 512), v65);
      v61(v64, v63, v65);
      uint64_t v34 = String.init<A>(reflecting:)();
      uint64_t v33 = v66;
      v62(v63, v65);
    }
    uint64_t v67 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
    uint64_t v68 = *(void *)(v0 + 480);
    v69 = *(void *)(v0 + 456);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(void *)(v0 + 520), (uint64_t *)&demangling cache variable for type metadata for UTType?);
    *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v33, v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v67(v68, v69);
    *(_WORD *)(v32 + 12) = 2080;
    *(void *)(v0 + 152) = v114;
    uint64_t v70 = v114;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v71 = String.init<A>(reflecting:)();
    *(void *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, log, v25, "Failed to get file from type: %s, error: %s", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v107, -1, -1);
    MEMORY[0x1A624F870](v32, -1, -1);
  }
  else
  {
    uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
    uint64_t v56 = *(void *)(v0 + 480);
    uint64_t v57 = *(void *)(v0 + 456);

    v55(v56, v57);
  }
  (*(void (**)(void, void))(v0 + 552))(*(void *)(v0 + 488), *(void *)(v0 + 456));
  v73 = *(void *)(v0 + 600) + 1;
  if (v73 == *(void *)(v0 + 592))
  {
LABEL_17:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *uint64_t v74 = 1;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v54 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_18;
  }
  while (1)
  {
    *(void *)(v0 + 600) = v73;
    if (v73 >= *(void *)(*(void *)(v0 + 584) + 16)) {
      __break(1u);
    }
    v75 = *(void *)(v0 + 464);
    v77 = *(void *)(v0 + 440);
    v76 = *(void *)(v0 + 448);
    v78 = *(void *)(v0 + 432);
    v108 = *(void *)(v0 + 488);
    v109 = *(void *)(v0 + 416);
    v79 = *(void *)(v0 + 400);
    logb = *(os_log_t *)(v0 + 408);
    v80 = *(void *)(v0 + 376);
    v104 = *(void *)(v0 + 392);
    v106 = *(void *)(v0 + 384);
    v82 = *(void *)(v0 + 360);
    v81 = *(void *)(v0 + 368);
    v102 = *(void *)(v0 + 424);
    v103 = *(void *)(v0 + 352);
    v83 = *(void (**)(void))(v75 + 16);
    *(void *)(v0 + 608) = v83;
    *(void *)(v0 + 616) = (v75 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v83();
    dispatch thunk of static Transferable.transferRepresentation.getter();
    swift_getDynamicType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 16))(v77, v76, v80);
    _TransferRepresentationValue.init(_:)();
    _TransferRepresentationInputs.init()();
    swift_getAssociatedConformanceWitness();
    dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)();
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v81, v103);
    (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v79, v106);
    v84 = _TransferRepresentationOutputs.storage.getter();
    (*(void (**)(uint64_t, os_log_t))(v109 + 8))(v102, logb);
    v85 = swift_task_alloc();
    *(void *)(v85 + 16) = v108;
    v86 = specialized _ArrayProtocol.filter(_:)((uint64_t (*)(char *))partial apply for closure #2 in static URL.file<A>(from:), v85, v84);
    *(void *)(v0 + 624) = v86;
    swift_task_dealloc();
    v87 = *(void *)(v86 + 16);
    *(void *)(v0 + 632) = v87;
    if (v87) {
      break;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    v95 = *(void *)(v0 + 448);
    v96 = *(void *)(v0 + 432);
    v97 = *(void *)(v0 + 376);
    (*(void (**)(void, void))(v0 + 552))(*(void *)(v0 + 488), *(void *)(v0 + 456));
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v95, v97);
    v73 = *(void *)(v0 + 600) + 1;
    if (v73 == *(void *)(v0 + 592)) {
      goto LABEL_17;
    }
  }
  v88 = 0;
  v89 = *(void *)(v0 + 328);
  *(_DWORD *)(v0 + 756) = *(_DWORD *)(v89 + 80);
  *(void *)(v0 + 640) = *(void *)(v89 + 72);
  *(void *)(v0 + 648) = *(void *)(v89 + 16);
  v90 = MEMORY[0x1E4F277C0];
  while (1)
  {
    *(void *)(v0 + 656) = v88;
    v91 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 648);
    v92 = *(void *)(v0 + 344);
    v93 = *(void *)(v0 + 320);
    v94 = *(void *)(v0 + 624)
        + ((*(unsigned __int8 *)(v0 + 756) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 756))
        + *(void *)(v0 + 640) * v88;
    *(void *)(v0 + 664) = (*(void *)(v0 + 328) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v91(v92, v94, v93);
    if (ResolvedTransferRepresentation.representationType.getter() == v90) {
      break;
    }
    (*(void (**)(void, void))(*(void *)(v0 + 328) + 8))(*(void *)(v0 + 344), *(void *)(v0 + 320));
    v88 = *(void *)(v0 + 656) + 1;
    if (v88 == *(void *)(v0 + 632)) {
      goto LABEL_26;
    }
  }
  v98 = swift_task_alloc();
  *(void *)(v0 + 672) = v98;
  *(void *)v98 = v0;
  *(void *)(v98 + 8) = static URL.file<A>(from:);
  v99 = *(void *)(v0 + 344);
  v100 = *(_OWORD *)(v0 + 224);
  *(void *)(v98 + 128) = *(void *)(v0 + 240);
  *(void *)(v98 + 136) = v99;
  *(_OWORD *)(v98 + 112) = v100;
  return MEMORY[0x1F4188298](ResolvedTransferRepresentation.data<A>(from:), 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 744) = v0;
  swift_task_dealloc();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(void *)(v2 + 720));
  if (v0)
  {
    uint64_t v3 = static URL.file<A>(from:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v2 + 16);
    uint64_t v3 = static URL.file<A>(from:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  void *v5;
  void (*v6)(uint64_t, uint64_t);
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  NSURL *v15;
  void *v16;
  void *v17;
  NSURL *v18;
  void *v19;
  void *v20;
  unsigned int v21;
  void *v22;
  void (*v23)(uint64_t, uint64_t);
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void (*v31)(void, void, void);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(void);
  void (*v68)(uint64_t, uint64_t, uint64_t);
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned char *v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(void);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, unint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  long long v108;
  unsigned int (*v109)(uint64_t, uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  void (*v119)(uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(uint64_t, uint64_t);
  uint64_t v125;
  os_log_t logb;
  os_log_t log;
  os_log_t logc;
  NSObject *loga;
  uint64_t v130;

  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 232);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transferable);
  uint64_t v4 = swift_dynamicCast();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1 + 56))(v2, v4 ^ 1u, 1, v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v2, 1, v3) == 1)
  {
    uint64_t v5 = *(void **)(v0 + 744);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(void *)(v0 + 248), &demangling cache variable for type metadata for URL?);
    Data.write(to:options:)();
    if (v5)
    {
      uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 704);
      os_log_type_t v7 = *(void *)(v0 + 696);
      uint64_t v8 = *(void *)(v0 + 688);
      logb = *(os_log_t *)(v0 + 344);
      uint64_t v10 = *(void *)(v0 + 320);
      uint64_t v9 = *(void *)(v0 + 328);
      unint64_t v11 = *(void *)(v0 + 288);
      uint64_t v12 = *(void *)(v0 + 256);
      outlined consume of Data._Representation(v8, v7);
      outlined consume of Data._Representation(v8, v7);
      v6(v11, v12);
      (*(void (**)(os_log_t, uint64_t))(v9 + 8))(logb, v10);
      unint64_t v13 = v5;
      goto LABEL_7;
    }
    uint64_t v56 = *(void *)(v0 + 696);
    uint64_t v57 = *(void *)(v0 + 688);
    v124 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
    uint64_t v58 = *(void *)(v0 + 488);
    uint64_t v59 = *(void *)(v0 + 456);
    uint64_t v60 = *(void *)(v0 + 344);
    long long v61 = *(void *)(v0 + 320);
    uint64_t v62 = *(void *)(v0 + 328);
    uint64_t v63 = *(void *)(v0 + 264);
    outlined consume of Data._Representation(v57, v56);
    outlined consume of Data._Representation(v57, v56);
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v60, v61);
    swift_bridgeObjectRelease();
    v124(v58, v59);
    uint64_t v31 = *(void (**)(void, void, void))(v63 + 32);
LABEL_12:
    uint64_t v64 = *(void *)(v0 + 448);
    uint64_t v65 = *(void *)(v0 + 432);
    uint64_t v66 = *(void *)(v0 + 376);
    v31(*(void *)(v0 + 216), *(void *)(v0 + 288), *(void *)(v0 + 256));
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v67 = *(uint64_t (**)(void))(v0 + 8);
LABEL_17:
    return v67();
  }
  log = *(os_log_t *)(*(void *)(v0 + 264) + 32);
  ((void (*)(void, void, void))log)(*(void *)(v0 + 272), *(void *)(v0 + 248), *(void *)(v0 + 232));
  unint64_t v14 = objc_msgSend(self, sel_defaultManager);
  URL._bridgeToObjectiveC()(v15);
  uint64_t v17 = v16;
  URL._bridgeToObjectiveC()(v18);
  uint64_t v20 = v19;
  *(void *)(v0 + 184) = 0;
  uint64_t v21 = objc_msgSend(v14, sel_copyItemAtURL_toURL_error_, v17, v19, v0 + 184);

  int v22 = *(void **)(v0 + 184);
  unint64_t v23 = *(void (**)(uint64_t, uint64_t))(v0 + 704);
  unint64_t v25 = *(void *)(v0 + 688);
  unint64_t v24 = *(void *)(v0 + 696);
  if (v21)
  {
    v119 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
    v116 = *(void *)(v0 + 488);
    v114 = *(void *)(v0 + 456);
    v111 = *(void *)(v0 + 344);
    uint64_t v26 = *(void *)(v0 + 320);
    uint64_t v27 = *(void *)(v0 + 328);
    uint64_t v28 = *(void *)(v0 + 272);
    uint64_t v29 = *(void *)(v0 + 232);
    uint64_t v30 = v22;
    outlined consume of Data._Representation(v25, v24);
    outlined consume of Data._Representation(v25, v24);
    v23(v28, v29);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v111, v26);
    swift_bridgeObjectRelease();
    v119(v116, v114);
    uint64_t v31 = (void (*)(void, void, void))log;
    goto LABEL_12;
  }
  unint64_t v32 = *(void *)(v0 + 328);
  v123 = *(void *)(v0 + 320);
  logc = *(os_log_t *)(v0 + 344);
  v120 = *(void *)(v0 + 288);
  uint64_t v33 = *(void *)(v0 + 272);
  uint64_t v34 = *(void *)(v0 + 232);
  uint64_t v35 = v22;
  unint64_t v13 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  outlined consume of Data._Representation(v25, v24);
  outlined consume of Data._Representation(v25, v24);
  v23(v33, v34);
  v23(v120, v34);
  (*(void (**)(os_log_t, uint64_t))(v32 + 8))(logc, v123);
LABEL_7:
  uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 608);
  uint64_t v38 = *(void *)(v0 + 480);
  uint64_t v37 = *(void *)(v0 + 488);
  uint64_t v39 = *(void *)(v0 + 456);
  (*(void (**)(void, void))(*(void *)(v0 + 432) + 8))(*(void *)(v0 + 448), *(void *)(v0 + 376));
  v36(v38, v37, v39);
  uint64_t v40 = v13;
  uint64_t v41 = v13;
  uint64_t v42 = Logger.logObject.getter();
  uint64_t v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    loga = v42;
    v117 = (uint64_t *)(v0 + 168);
    uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 608);
    v109 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 568);
    uint64_t v45 = *(void *)(v0 + 520);
    uint64_t v46 = *(void *)(v0 + 512);
    uint64_t v47 = *(void *)(v0 + 480);
    long long v49 = *(void *)(v0 + 456);
    uint64_t v48 = *(void *)(v0 + 464);
    uint64_t v50 = swift_slowAlloc();
    v121 = swift_slowAlloc();
    *(void *)(v0 + 168) = v121;
    *(_DWORD *)uint64_t v50 = 136315394;
    v44(v45, v47, v49);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v49);
    outlined init with copy of URL?(v45, v46, (uint64_t *)&demangling cache variable for type metadata for UTType?);
    if (v109(v46, 1, v49) == 1)
    {
      uint64_t v51 = 0xE300000000000000;
      unint64_t v52 = 7104878;
    }
    else
    {
      uint64_t v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 608);
      v69 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
      uint64_t v70 = *(void *)(v0 + 504);
      uint64_t v71 = *(void *)(v0 + 472);
      v72 = *(void *)(v0 + 456);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 464) + 32))(v70, *(void *)(v0 + 512), v72);
      v68(v71, v70, v72);
      unint64_t v52 = String.init<A>(reflecting:)();
      uint64_t v51 = v73;
      v69(v70, v72);
    }
    uint64_t v74 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
    v75 = *(void *)(v0 + 480);
    v76 = *(void *)(v0 + 456);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(void *)(v0 + 520), (uint64_t *)&demangling cache variable for type metadata for UTType?);
    *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v51, v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v74(v75, v76);
    *(_WORD *)(v50 + 12) = 2080;
    *(void *)(v0 + 152) = v13;
    v77 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v78 = String.init<A>(reflecting:)();
    *(void *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, loga, v43, "Failed to get file from type: %s, error: %s", (uint8_t *)v50, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v121, -1, -1);
    MEMORY[0x1A624F870](v50, -1, -1);
  }
  else
  {
    uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
    uint64_t v54 = *(void *)(v0 + 480);
    uint64_t v55 = *(void *)(v0 + 456);

    v53(v54, v55);
  }
  (*(void (**)(void, void))(v0 + 552))(*(void *)(v0 + 488), *(void *)(v0 + 456));
  v80 = *(void *)(v0 + 600) + 1;
  if (v80 == *(void *)(v0 + 592))
  {
LABEL_16:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *v81 = 1;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v67 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_17;
  }
  while (1)
  {
    *(void *)(v0 + 600) = v80;
    if (v80 >= *(void *)(*(void *)(v0 + 584) + 16)) {
      __break(1u);
    }
    v83 = *(void *)(v0 + 464);
    v85 = *(void *)(v0 + 440);
    v84 = *(void *)(v0 + 448);
    v86 = *(void *)(v0 + 432);
    v118 = *(void *)(v0 + 488);
    v122 = *(void *)(v0 + 416);
    v87 = *(void *)(v0 + 400);
    v125 = *(void *)(v0 + 408);
    v88 = *(void *)(v0 + 376);
    v113 = *(void *)(v0 + 392);
    v115 = *(void *)(v0 + 384);
    v90 = *(void *)(v0 + 360);
    v89 = *(void *)(v0 + 368);
    v110 = *(void *)(v0 + 424);
    v112 = *(void *)(v0 + 352);
    v91 = *(void (**)(void))(v83 + 16);
    *(void *)(v0 + 608) = v91;
    *(void *)(v0 + 616) = (v83 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v91();
    dispatch thunk of static Transferable.transferRepresentation.getter();
    swift_getDynamicType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16))(v85, v84, v88);
    _TransferRepresentationValue.init(_:)();
    _TransferRepresentationInputs.init()();
    swift_getAssociatedConformanceWitness();
    dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)();
    (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v89, v112);
    (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v87, v115);
    v92 = _TransferRepresentationOutputs.storage.getter();
    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v110, v125);
    v93 = swift_task_alloc();
    *(void *)(v93 + 16) = v118;
    v94 = specialized _ArrayProtocol.filter(_:)((uint64_t (*)(char *))partial apply for closure #2 in static URL.file<A>(from:), v93, v92);
    *(void *)(v0 + 624) = v94;
    swift_task_dealloc();
    v95 = *(void *)(v94 + 16);
    *(void *)(v0 + 632) = v95;
    if (v95) {
      break;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    v103 = *(void *)(v0 + 448);
    v104 = *(void *)(v0 + 432);
    v105 = *(void *)(v0 + 376);
    (*(void (**)(void, void))(v0 + 552))(*(void *)(v0 + 488), *(void *)(v0 + 456));
    (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v103, v105);
    v80 = *(void *)(v0 + 600) + 1;
    if (v80 == *(void *)(v0 + 592)) {
      goto LABEL_16;
    }
  }
  v96 = 0;
  v97 = *(void *)(v0 + 328);
  *(_DWORD *)(v0 + 756) = *(_DWORD *)(v97 + 80);
  *(void *)(v0 + 640) = *(void *)(v97 + 72);
  *(void *)(v0 + 648) = *(void *)(v97 + 16);
  v98 = MEMORY[0x1E4F277C0];
  while (1)
  {
    *(void *)(v0 + 656) = v96;
    v99 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 648);
    v100 = *(void *)(v0 + 344);
    v101 = *(void *)(v0 + 320);
    v102 = *(void *)(v0 + 624)
         + ((*(unsigned __int8 *)(v0 + 756) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 756))
         + *(void *)(v0 + 640) * v96;
    *(void *)(v0 + 664) = (*(void *)(v0 + 328) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v99(v100, v102, v101);
    if (ResolvedTransferRepresentation.representationType.getter() == v98) {
      break;
    }
    (*(void (**)(void, void))(*(void *)(v0 + 328) + 8))(*(void *)(v0 + 344), *(void *)(v0 + 320));
    v96 = *(void *)(v0 + 656) + 1;
    if (v96 == *(void *)(v0 + 632)) {
      goto LABEL_25;
    }
  }
  v106 = swift_task_alloc();
  *(void *)(v0 + 672) = v106;
  *(void *)v106 = v0;
  *(void *)(v106 + 8) = static URL.file<A>(from:);
  v107 = *(void *)(v0 + 344);
  v108 = *(_OWORD *)(v0 + 224);
  *(void *)(v106 + 128) = *(void *)(v0 + 240);
  *(void *)(v106 + 136) = v107;
  *(_OWORD *)(v106 + 112) = v108;
  return MEMORY[0x1F4188298](ResolvedTransferRepresentation.data<A>(from:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(void);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, unint64_t, uint64_t);
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned char *v53;
  uint64_t (*v54)(void);
  uint64_t v56;
  uint64_t v57;
  long long v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72[2];
  uint64_t v73;
  uint64_t v74;

  v73 = v0;
  v72[1] = *MEMORY[0x1E4F143B8];
  if (one-time initialization token for ledger != -1) {
LABEL_22:
  }
    swift_once();
  uint64_t v1 = *(void **)(v0 + 680);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 648);
  uint64_t v4 = *(void *)(v0 + 336);
  uint64_t v3 = *(void *)(v0 + 344);
  uint64_t v5 = *(void *)(v0 + 320);
  __swift_project_value_buffer(*(void *)(v0 + 536), (uint64_t)static Log.ledger);
  v2(v4, v3, v5);
  uint64_t v6 = v1;
  os_log_type_t v7 = v1;
  uint64_t v8 = Logger.logObject.getter();
  uint64_t v9 = static os_log_type_t.fault.getter();
  uint64_t v10 = os_log_type_enabled(v8, v9);
  unint64_t v11 = *(void **)(v0 + 680);
  if (v10)
  {
    uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
    uint64_t v12 = *(void *)(v0 + 504);
    uint64_t v60 = *(void *)(v0 + 456);
    unint64_t v13 = *(void *)(v0 + 336);
    uint64_t v71 = *(void *)(v0 + 344);
    uint64_t v65 = *(void *)(v0 + 328);
    uint64_t v67 = *(void *)(v0 + 320);
    unint64_t v14 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    v69 = swift_slowAlloc();
    v72[0] = v69;
    *(_DWORD *)unint64_t v14 = 136315394;
    ResolvedTransferRepresentation.contentType.getter();
    uint64_t v16 = UTType.identifier.getter();
    uint64_t v18 = v17;
    v62(v12, v60);
    *(void *)(v14 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, v72);
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
    v19(v13, v67);
    *(_WORD *)(v14 + 12) = 2112;
    uint64_t v20 = v11;
    uint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v14 + 14) = v21;
    *uint64_t v15 = v21;

    _os_log_impl(&dword_1A375F000, v8, v9, "Error loading data for type identifier\n%s: %@", (uint8_t *)v14, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v15, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v69, -1, -1);
    MEMORY[0x1A624F870](v14, -1, -1);

    v19(v71, v67);
  }
  else
  {
    unint64_t v23 = *(void *)(v0 + 336);
    int v22 = *(void *)(v0 + 344);
    unint64_t v24 = *(void *)(v0 + 320);
    unint64_t v25 = *(void *)(v0 + 328);

    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v26(v23, v24);

    v26(v22, v24);
  }
  uint64_t v27 = MEMORY[0x1E4F277C0];
  while (1)
  {
    uint64_t v28 = *(void *)(v0 + 656) + 1;
    if (v28 == *(void *)(v0 + 632)) {
      break;
    }
    uint64_t v46 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 648);
    uint64_t v47 = *(void *)(v0 + 640);
    LOBYTE(v48) = *(unsigned char *)(v0 + 756);
    long long v49 = *(void *)(v0 + 328);
LABEL_13:
    *(void *)(v0 + 656) = v28;
    uint64_t v50 = *(void *)(v0 + 344);
    uint64_t v51 = *(void *)(v0 + 320);
    unint64_t v52 = *(void *)(v0 + 624) + ((v48 + 32) & ~(unint64_t)v48) + v47 * v28;
    *(void *)(v0 + 664) = (v49 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v46(v50, v52, v51);
    if (ResolvedTransferRepresentation.representationType.getter() == v27)
    {
      uint64_t v56 = swift_task_alloc();
      *(void *)(v0 + 672) = v56;
      *(void *)uint64_t v56 = v0;
      *(void *)(v56 + 8) = static URL.file<A>(from:);
      uint64_t v57 = *(void *)(v0 + 344);
      uint64_t v58 = *(_OWORD *)(v0 + 224);
      *(void *)(v56 + 128) = *(void *)(v0 + 240);
      *(void *)(v56 + 136) = v57;
      *(_OWORD *)(v56 + 112) = v58;
      return MEMORY[0x1F4188298](ResolvedTransferRepresentation.data<A>(from:), 0, 0);
    }
    (*(void (**)(void, void))(*(void *)(v0 + 328) + 8))(*(void *)(v0 + 344), *(void *)(v0 + 320));
  }
  while (1)
  {
    swift_bridgeObjectRelease();
    uint64_t v29 = *(void *)(v0 + 448);
    uint64_t v30 = *(void *)(v0 + 432);
    uint64_t v31 = *(void *)(v0 + 376);
    (*(void (**)(void, void))(v0 + 552))(*(void *)(v0 + 488), *(void *)(v0 + 456));
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    unint64_t v32 = *(void *)(v0 + 600) + 1;
    if (v32 == *(void *)(v0 + 592)) {
      break;
    }
    *(void *)(v0 + 600) = v32;
    if (v32 >= *(void *)(*(void *)(v0 + 584) + 16))
    {
      __break(1u);
      goto LABEL_22;
    }
    uint64_t v33 = *(void *)(v0 + 464);
    uint64_t v35 = *(void *)(v0 + 440);
    uint64_t v34 = *(void *)(v0 + 448);
    uint64_t v36 = *(void *)(v0 + 432);
    uint64_t v66 = *(void *)(v0 + 488);
    uint64_t v68 = *(void *)(v0 + 416);
    uint64_t v37 = *(void *)(v0 + 400);
    uint64_t v70 = *(void *)(v0 + 408);
    uint64_t v38 = *(void *)(v0 + 376);
    uint64_t v63 = *(void *)(v0 + 392);
    uint64_t v64 = *(void *)(v0 + 384);
    uint64_t v40 = *(void *)(v0 + 360);
    uint64_t v39 = *(void *)(v0 + 368);
    uint64_t v59 = *(void *)(v0 + 424);
    long long v61 = *(void *)(v0 + 352);
    uint64_t v41 = *(void (**)(void))(v33 + 16);
    *(void *)(v0 + 608) = v41;
    *(void *)(v0 + 616) = (v33 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v41();
    dispatch thunk of static Transferable.transferRepresentation.getter();
    swift_getDynamicType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v35, v34, v38);
    _TransferRepresentationValue.init(_:)();
    _TransferRepresentationInputs.init()();
    swift_getAssociatedConformanceWitness();
    dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)();
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v61);
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v37, v64);
    uint64_t v42 = _TransferRepresentationOutputs.storage.getter();
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v59, v70);
    uint64_t v43 = swift_task_alloc();
    *(void *)(v43 + 16) = v66;
    uint64_t v44 = specialized _ArrayProtocol.filter(_:)((uint64_t (*)(char *))partial apply for closure #2 in static URL.file<A>(from:), v43, v42);
    *(void *)(v0 + 624) = v44;
    swift_task_dealloc();
    uint64_t v45 = *(void *)(v44 + 16);
    *(void *)(v0 + 632) = v45;
    if (v45)
    {
      uint64_t v28 = 0;
      long long v49 = *(void *)(v0 + 328);
      uint64_t v48 = *(_DWORD *)(v49 + 80);
      *(_DWORD *)(v0 + 756) = v48;
      uint64_t v47 = *(void *)(v49 + 72);
      *(void *)(v0 + 640) = v47;
      uint64_t v46 = *(void (**)(uint64_t, unint64_t, uint64_t))(v49 + 16);
      *(void *)(v0 + 648) = v46;
      uint64_t v27 = MEMORY[0x1E4F277C0];
      goto LABEL_13;
    }
  }
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
  swift_allocError();
  *uint64_t v53 = 1;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v54 = *(uint64_t (**)(void))(v0 + 8);
  return v54();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned char *v43;
  uint64_t (*v44)(void);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(void);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, unint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  long long v71;
  unsigned int (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *log;
  uint64_t v83;

  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 704);
  uint64_t v2 = *(void *)(v0 + 696);
  uint64_t v3 = *(void *)(v0 + 688);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v6 = *(void *)(v0 + 320);
  uint64_t v5 = *(void *)(v0 + 328);
  os_log_type_t v7 = *(void *)(v0 + 288);
  uint64_t v8 = *(void *)(v0 + 232);
  outlined consume of Data._Representation(v3, v2);
  outlined consume of Data._Representation(v3, v2);
  v1(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v9 = *(void **)(v0 + 744);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 608);
  uint64_t v12 = *(void *)(v0 + 480);
  unint64_t v11 = *(void *)(v0 + 488);
  unint64_t v13 = *(void *)(v0 + 456);
  (*(void (**)(void, void))(*(void *)(v0 + 432) + 8))(*(void *)(v0 + 448), *(void *)(v0 + 376));
  v10(v12, v11, v13);
  unint64_t v14 = v9;
  uint64_t v15 = v9;
  uint64_t v16 = Logger.logObject.getter();
  uint64_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    log = v16;
    v77 = (uint64_t *)(v0 + 168);
    uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 608);
    v72 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 568);
    uint64_t v19 = *(void *)(v0 + 520);
    uint64_t v20 = *(void *)(v0 + 512);
    uint64_t v21 = *(void *)(v0 + 480);
    unint64_t v23 = *(void *)(v0 + 456);
    int v22 = *(void *)(v0 + 464);
    unint64_t v24 = swift_slowAlloc();
    v79 = swift_slowAlloc();
    *(void *)(v0 + 168) = v79;
    *(_DWORD *)unint64_t v24 = 136315394;
    v18(v19, v21, v23);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v23);
    outlined init with copy of URL?(v19, v20, (uint64_t *)&demangling cache variable for type metadata for UTType?);
    if (v72(v20, 1, v23) == 1)
    {
      unint64_t v25 = 0xE300000000000000;
      uint64_t v26 = 7104878;
    }
    else
    {
      uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 608);
      uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
      unint64_t v32 = *(void *)(v0 + 504);
      uint64_t v33 = *(void *)(v0 + 472);
      uint64_t v34 = *(void *)(v0 + 456);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 464) + 32))(v32, *(void *)(v0 + 512), v34);
      v30(v33, v32, v34);
      uint64_t v26 = String.init<A>(reflecting:)();
      unint64_t v25 = v35;
      v31(v32, v34);
    }
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
    uint64_t v37 = *(void *)(v0 + 480);
    uint64_t v38 = *(void *)(v0 + 456);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(void *)(v0 + 520), (uint64_t *)&demangling cache variable for type metadata for UTType?);
    *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v25, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v36(v37, v38);
    *(_WORD *)(v24 + 12) = 2080;
    *(void *)(v0 + 152) = v9;
    uint64_t v39 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v40 = String.init<A>(reflecting:)();
    *(void *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, log, v17, "Failed to get file from type: %s, error: %s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v79, -1, -1);
    MEMORY[0x1A624F870](v24, -1, -1);
  }
  else
  {
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
    uint64_t v28 = *(void *)(v0 + 480);
    uint64_t v29 = *(void *)(v0 + 456);

    v27(v28, v29);
  }
  (*(void (**)(void, void))(v0 + 552))(*(void *)(v0 + 488), *(void *)(v0 + 456));
  uint64_t v42 = *(void *)(v0 + 600) + 1;
  if (v42 == *(void *)(v0 + 592))
  {
LABEL_8:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *uint64_t v43 = 1;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v44 = *(uint64_t (**)(void))(v0 + 8);
    return v44();
  }
  else
  {
    while (1)
    {
      *(void *)(v0 + 600) = v42;
      if (v42 >= *(void *)(*(void *)(v0 + 584) + 16)) {
        __break(1u);
      }
      uint64_t v46 = *(void *)(v0 + 464);
      uint64_t v48 = *(void *)(v0 + 440);
      uint64_t v47 = *(void *)(v0 + 448);
      long long v49 = *(void *)(v0 + 432);
      v78 = *(void *)(v0 + 488);
      v80 = *(void *)(v0 + 416);
      uint64_t v50 = *(void *)(v0 + 400);
      v81 = *(void *)(v0 + 408);
      uint64_t v51 = *(void *)(v0 + 376);
      v75 = *(void *)(v0 + 392);
      v76 = *(void *)(v0 + 384);
      uint64_t v53 = *(void *)(v0 + 360);
      unint64_t v52 = *(void *)(v0 + 368);
      v73 = *(void *)(v0 + 424);
      uint64_t v74 = *(void *)(v0 + 352);
      uint64_t v54 = *(void (**)(void))(v46 + 16);
      *(void *)(v0 + 608) = v54;
      *(void *)(v0 + 616) = (v46 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v54();
      dispatch thunk of static Transferable.transferRepresentation.getter();
      swift_getDynamicType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v48, v47, v51);
      _TransferRepresentationValue.init(_:)();
      _TransferRepresentationInputs.init()();
      swift_getAssociatedConformanceWitness();
      dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)();
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v74);
      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v50, v76);
      uint64_t v55 = _TransferRepresentationOutputs.storage.getter();
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v73, v81);
      uint64_t v56 = swift_task_alloc();
      *(void *)(v56 + 16) = v78;
      uint64_t v57 = specialized _ArrayProtocol.filter(_:)((uint64_t (*)(char *))partial apply for closure #2 in static URL.file<A>(from:), v56, v55);
      *(void *)(v0 + 624) = v57;
      swift_task_dealloc();
      uint64_t v58 = *(void *)(v57 + 16);
      *(void *)(v0 + 632) = v58;
      if (v58) {
        break;
      }
LABEL_16:
      swift_bridgeObjectRelease();
      uint64_t v66 = *(void *)(v0 + 448);
      uint64_t v67 = *(void *)(v0 + 432);
      uint64_t v68 = *(void *)(v0 + 376);
      (*(void (**)(void, void))(v0 + 552))(*(void *)(v0 + 488), *(void *)(v0 + 456));
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
      uint64_t v42 = *(void *)(v0 + 600) + 1;
      if (v42 == *(void *)(v0 + 592)) {
        goto LABEL_8;
      }
    }
    uint64_t v59 = 0;
    uint64_t v60 = *(void *)(v0 + 328);
    *(_DWORD *)(v0 + 756) = *(_DWORD *)(v60 + 80);
    *(void *)(v0 + 640) = *(void *)(v60 + 72);
    *(void *)(v0 + 648) = *(void *)(v60 + 16);
    long long v61 = MEMORY[0x1E4F277C0];
    while (1)
    {
      *(void *)(v0 + 656) = v59;
      uint64_t v62 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 648);
      uint64_t v63 = *(void *)(v0 + 344);
      uint64_t v64 = *(void *)(v0 + 320);
      uint64_t v65 = *(void *)(v0 + 624)
          + ((*(unsigned __int8 *)(v0 + 756) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 756))
          + *(void *)(v0 + 640) * v59;
      *(void *)(v0 + 664) = (*(void *)(v0 + 328) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v62(v63, v65, v64);
      if (ResolvedTransferRepresentation.representationType.getter() == v61) {
        break;
      }
      (*(void (**)(void, void))(*(void *)(v0 + 328) + 8))(*(void *)(v0 + 344), *(void *)(v0 + 320));
      uint64_t v59 = *(void *)(v0 + 656) + 1;
      if (v59 == *(void *)(v0 + 632)) {
        goto LABEL_16;
      }
    }
    v69 = swift_task_alloc();
    *(void *)(v0 + 672) = v69;
    *(void *)v69 = v0;
    *(void *)(v69 + 8) = static URL.file<A>(from:);
    uint64_t v70 = *(void *)(v0 + 344);
    uint64_t v71 = *(_OWORD *)(v0 + 224);
    *(void *)(v69 + 128) = *(void *)(v0 + 240);
    *(void *)(v69 + 136) = v70;
    *(_OWORD *)(v69 + 112) = v71;
    return MEMORY[0x1F4188298](ResolvedTransferRepresentation.data<A>(from:), 0, 0);
  }
}

uint64_t static URL.file<A>(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 680) = v2;
  swift_task_dealloc();
  if (v2)
  {
    os_log_type_t v7 = static URL.file<A>(from:);
  }
  else
  {
    *(void *)(v6 + 688) = a1;
    *(void *)(v6 + 696) = a2;
    os_log_type_t v7 = static URL.file<A>(from:);
  }
  return MEMORY[0x1F4188298](v7, 0, 0);
}

uint64_t GroupSessionJournal.add(id:attachmentData:developerMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
  v6[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](GroupSessionJournal.add(id:attachmentData:developerMetadata:), 0, 0);
}

uint64_t GroupSessionJournal.add(id:attachmentData:developerMetadata:)()
{
  uint64_t v1 = v0[9];
  unint64_t v2 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = v0[2];
  uint64_t v7 = v0[3];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  uint64_t v9 = (uint64_t *)(v1
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?))
                          + 48));
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v1, v5, v10);
  *uint64_t v9 = v4;
  v9[1] = v2;
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = type metadata accessor for GroupSessionJournal.Attachment(0);
  swift_weakInit();
  outlined init with take of GroupSessionJournal.Attachment.AttachmentSource(v1, v6 + *(int *)(v11 + 24), type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
  uint64_t v12 = *(void *)(v3 + 24);
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v14 = *(int **)(v12 + 40);
  outlined copy of Data?(v4, v2);
  uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v14 + *v14);
  uint64_t v15 = (void *)swift_task_alloc();
  v0[10] = v15;
  *uint64_t v15 = v0;
  v15[1] = GroupSessionJournal.add(id:attachmentData:developerMetadata:);
  uint64_t v16 = v0[5];
  uint64_t v17 = v0[6];
  uint64_t v19 = v0[3];
  uint64_t v18 = v0[4];
  return v21(v19, v18, v16, v17, ObjectType, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  unint64_t v2 = *v1;
  *(void *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](GroupSessionJournal.add(id:attachmentData:developerMetadata:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of GroupSessionJournal.Attachment(*(void *)(v0 + 16), type metadata accessor for GroupSessionJournal.Attachment);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t GroupSessionJournal.add<A, B>(_:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[11] = a8;
  v9[12] = v8;
  v9[9] = a5;
  v9[10] = a6;
  v9[7] = a3;
  v9[8] = a4;
  v9[5] = a1;
  v9[6] = a2;
  uint64_t v12 = type metadata accessor for URL();
  v9[13] = v12;
  v9[14] = *(void *)(v12 - 8);
  v9[15] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Optional();
  v9[16] = v13;
  v9[17] = *(void *)(v13 - 8);
  v9[18] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for Optional();
  v9[19] = v14;
  v9[20] = *(void *)(v14 - 8);
  v9[21] = swift_task_alloc();
  v9[22] = *(void *)(a5 - 8);
  v9[23] = swift_task_alloc();
  v9[24] = *(void *)(a4 - 8);
  v9[25] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for UUID();
  v9[26] = v15;
  v9[27] = *(void *)(v15 - 8);
  v9[28] = swift_task_alloc();
  v9[29] = swift_task_alloc();
  return MEMORY[0x1F4188298](GroupSessionJournal.add<A, B>(_:metadata:), 0, 0);
}

uint64_t GroupSessionJournal.add<A, B>(_:metadata:)()
{
  uint64_t v59 = v0;
  UUID.init()();
  if (one-time initialization token for ledger != -1) {
    swift_once();
  }
  uint64_t v1 = v0[27];
  uint64_t v54 = v0[28];
  uint64_t v56 = v0[29];
  uint64_t v2 = v0[25];
  uint64_t v52 = v0[26];
  uint64_t v3 = v0[24];
  uint64_t v51 = v0[23];
  uint64_t v4 = v0[22];
  uint64_t v6 = v0[8];
  uint64_t v5 = v0[9];
  uint64_t v8 = v0[6];
  uint64_t v7 = v0[7];
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Log.ledger);
  uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v48(v2, v8, v6);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v10(v51, v7, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v54, v56, v52);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v14 = v0[27];
  uint64_t v15 = v0[28];
  uint64_t v16 = v0[25];
  uint64_t v17 = v0[26];
  uint64_t v18 = v0[24];
  uint64_t v57 = v0[23];
  uint64_t v19 = v0[22];
  if (v13)
  {
    uint64_t v55 = v11;
    uint64_t v43 = v10;
    uint64_t v21 = v0[20];
    uint64_t v20 = v0[21];
    uint64_t v40 = v0[19];
    uint64_t v44 = v0[17];
    uint64_t v45 = v0[16];
    uint64_t v41 = v0[9];
    uint64_t v42 = v0[18];
    os_log_type_t v53 = v12;
    uint64_t v22 = v0[8];
    uint64_t v46 = v0[28];
    uint64_t v23 = swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    uint64_t v58 = v47;
    *(_DWORD *)uint64_t v23 = 136315650;
    v48(v20, v16, v22);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v20, 0, 1, v22);
    uint64_t v49 = v17;
    uint64_t v50 = v14;
    uint64_t v24 = >> prefix<A>(_:)(v20, v22);
    unint64_t v26 = v25;
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v40);
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v22);
    *(_WORD *)(v23 + 12) = 2080;
    v43(v42, v57, v41);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v42, 0, 1, v41);
    uint64_t v27 = >> prefix<A>(_:)(v42, v41);
    unint64_t v29 = v28;
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v45);
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v57, v41);
    *(_WORD *)(v23 + 22) = 2080;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v32 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    v32(v46, v49);
    _os_log_impl(&dword_1A375F000, v55, v53, "Received add request for item: %s, metadata: %s, using ID: %s", (uint8_t *)v23, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v47, -1, -1);
    MEMORY[0x1A624F870](v23, -1, -1);
  }
  else
  {
    uint64_t v33 = v0[9];
    (*(void (**)(uint64_t, void))(v18 + 8))(v16, v0[8]);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v57, v33);
    unint64_t v32 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v32(v15, v17);
  }
  v0[30] = v32;
  uint64_t v34 = (void *)swift_task_alloc();
  v0[31] = v34;
  *uint64_t v34 = v0;
  v34[1] = GroupSessionJournal.add<A, B>(_:metadata:);
  uint64_t v35 = v0[15];
  uint64_t v36 = v0[10];
  uint64_t v37 = v0[8];
  uint64_t v38 = v0[6];
  return static URL.file<A>(from:)(v35, v38, v37, v36);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 256) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = GroupSessionJournal.add<A, B>(_:metadata:);
  }
  else {
    uint64_t v2 = GroupSessionJournal.add<A, B>(_:metadata:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v1 = *(void *)(v0 + 256);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  *(void *)(v0 + 264) = JSONEncoder.init()();
  uint64_t v2 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  *(void *)(v0 + 272) = v2;
  *(void *)(v0 + 280) = v3;
  if (v1)
  {
    uint64_t v5 = *(void *)(v0 + 112);
    uint64_t v4 = *(void *)(v0 + 120);
    uint64_t v6 = *(void *)(v0 + 104);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    (*(void (**)(void, void))(v0 + 240))(*(void *)(v0 + 232), *(void *)(v0 + 208));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
  else
  {
    uint64_t v9 = v2;
    uint64_t v10 = v3;
    outlined copy of Data._Representation(v2, v3);
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 288) = v11;
    *uint64_t v11 = v0;
    v11[1] = GroupSessionJournal.add<A, B>(_:metadata:);
    os_log_type_t v12 = *(void *)(v0 + 232);
    BOOL v13 = *(void *)(v0 + 120);
    uint64_t v14 = *(void *)(v0 + 40);
    return GroupSessionJournal.add(id:attachmentData:developerMetadata:)(v14, v12, v13, v9, v10);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 296) = v0;
  swift_task_dealloc();
  outlined consume of Data._Representation(*(void *)(v2 + 272), *(void *)(v2 + 280));
  if (v0) {
    uint64_t v3 = GroupSessionJournal.add<A, B>(_:metadata:);
  }
  else {
    uint64_t v3 = GroupSessionJournal.add<A, B>(_:metadata:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = v0[34];
  uint64_t v2 = v0[35];
  uint64_t v3 = v0[29];
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[30];
  uint64_t v5 = v0[26];
  uint64_t v6 = v0[14];
  uint64_t v7 = v0[15];
  uint64_t v8 = v0[13];
  swift_release();
  outlined consume of Data._Representation(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  v4(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0 + 240))(*(void *)(v0 + 232), *(void *)(v0 + 208));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 104);
  swift_release();
  outlined consume of Data._Representation(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  (*(void (**)(void, void))(v0 + 240))(*(void *)(v0 + 232), *(void *)(v0 + 208));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t GroupSessionJournal.Attachment.init(id:ledger:source:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t v7 = type metadata accessor for GroupSessionJournal.Attachment(0);
  swift_weakInit();
  swift_release();
  return outlined init with take of GroupSessionJournal.Attachment.AttachmentSource(a2, a3 + *(int *)(v7 + 24), type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
}

uint64_t GroupSessionJournal.remove(attachment:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x1F4188298](GroupSessionJournal.remove(attachment:), 0, 0);
}

uint64_t GroupSessionJournal.remove(attachment:)()
{
  uint64_t v1 = *(void *)(v0[3] + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 64) + **(int **)(v1 + 64));
  uint64_t v3 = (void *)swift_task_alloc();
  v0[4] = v3;
  void *v3 = v0;
  v3[1] = GroupSessionJournal.remove(attachment:);
  uint64_t v4 = v0[2];
  return v6(v4, ObjectType, v1);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void *GroupSessionJournal.__allocating_init<A>(session:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for GroupSession();
  uint64_t v3 = (void *)swift_allocObject();

  return specialized GroupSessionJournal.init(transportSession:)(a1, v3, v2, (uint64_t)&protocol witness table for GroupSession<A>);
}

void *GroupSessionJournal.__allocating_init(transportSession:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();

  return specialized GroupSessionJournal.__allocating_init(transportSession:)(a1, v2, ObjectType, a2);
}

void *GroupSessionJournal.init(transportSession:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();

  return specialized GroupSessionJournal.init(transportSession:)(a1, v2, ObjectType, a2);
}

uint64_t closure #1 in GroupSessionJournal.init(transportSession:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_retain();
  unint64_t v6 = specialized Sequence.compactMap<A>(_:)(v5, a2);
  uint64_t result = swift_release();
  *a3 = v6;
  return result;
}

uint64_t closure #2 in GroupSessionJournal.init(transportSession:)(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4)
{
  v82 = a3;
  uint64_t v80 = a2;
  uint64_t v84 = a1;
  uint64_t v68 = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
  MEMORY[0x1F4188790](v68);
  uint64_t v70 = (uint64_t *)((char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v69 = type metadata accessor for GroupSessionJournal.Attachment(0);
  uint64_t v71 = *(void *)(v69 - 8);
  MEMORY[0x1F4188790](v69);
  uint64_t v77 = (uint64_t)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v67 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  v76 = (char *)&v63 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v63 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v63 - v15;
  uint64_t v17 = type metadata accessor for Participant();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v22);
  v83 = (char *)&v63 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  v72 = (char *)&v63 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  v73 = (char *)&v63 - v30;
  MEMORY[0x1F4188790](v29);
  unint64_t v32 = (char *)&v63 - v31;
  uint64_t v81 = a4 + 16;
  if (one-time initialization token for ledger != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  uint64_t v34 = __swift_project_value_buffer(v33, (uint64_t)static Log.ledger);
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v35(v32, v84, v20);
  outlined init with copy of GroupSessionJournal.Attachment.AttachmentSource((uint64_t)v82, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for Participant);
  uint64_t v74 = v34;
  uint64_t v36 = Logger.logObject.getter();
  int v78 = static os_log_type_t.default.getter();
  BOOL v37 = os_log_type_enabled(v36, (os_log_type_t)v78);
  uint64_t v79 = v21;
  if (v37)
  {
    os_log_t v64 = v36;
    uint64_t v65 = v19;
    v75 = v24;
    uint64_t v38 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v85[0] = v63;
    *(_DWORD *)uint64_t v38 = 136315394;
    v35(v16, (uint64_t)v32, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v16, 0, 1, v20);
    outlined init with copy of URL?((uint64_t)v16, (uint64_t)v14, &demangling cache variable for type metadata for UUID?);
    int v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v14, 1, v20);
    uint64_t v66 = v35;
    if (v39 == 1)
    {
      uint64_t v40 = 7104878;
      unint64_t v41 = 0xE300000000000000;
    }
    else
    {
      uint64_t v42 = v73;
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v73, v14, v20);
      v35(v72, (uint64_t)v42, v20);
      uint64_t v40 = String.init<A>(reflecting:)();
      unint64_t v41 = v43;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v42, v20);
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
    uint64_t v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v82 = *(void (**)(char *, uint64_t))(v21 + 8);
    v82(v32, v20);
    *(_WORD *)(v38 + 12) = 2080;
    uint64_t v44 = (uint64_t)v65;
    unint64_t v45 = Participant.description.getter();
    uint64_t v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of GroupSessionJournal.Attachment(v44, (uint64_t (*)(void))type metadata accessor for Participant);
    os_log_t v47 = v64;
    _os_log_impl(&dword_1A375F000, v64, (os_log_type_t)v78, "Received new attachment: %s from: %s", (uint8_t *)v38, 0x16u);
    uint64_t v48 = v63;
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v48, -1, -1);
    MEMORY[0x1A624F870](v38, -1, -1);

    uint64_t v35 = v66;
  }
  else
  {
    v82 = *(void (**)(char *, uint64_t))(v21 + 8);
    v82(v32, v20);
    outlined destroy of GroupSessionJournal.Attachment((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for Participant);
  }
  uint64_t v49 = v83;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    v35(v49, v84, v20);
    uint64_t v51 = Data.init(contentsOf:options:)();
    uint64_t v52 = (uint64_t)v70;
    *uint64_t v70 = v51;
    *(void *)(v52 + 8) = v53;
    swift_storeEnumTagMultiPayload();
    uint64_t v54 = v77;
    (*(void (**)(uint64_t, char *, uint64_t))(v79 + 32))(v77, v49, v20);
    uint64_t v55 = v69;
    swift_weakInit();
    outlined init with take of GroupSessionJournal.Attachment.AttachmentSource(v52, v54 + *(int *)(v55 + 24), type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v56 = (void (*)(uint64_t *, void))static Published.subscript.modify();
    uint64_t v58 = v57;
    unint64_t v59 = *v57;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v58 = v59;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v59 + 16) + 1, 1, v59);
      *uint64_t v58 = v59;
    }
    unint64_t v62 = *(void *)(v59 + 16);
    unint64_t v61 = *(void *)(v59 + 24);
    if (v62 >= v61 >> 1)
    {
      unint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1, v59);
      *uint64_t v58 = v59;
    }
    *(void *)(v59 + 16) = v62 + 1;
    outlined init with take of GroupSessionJournal.Attachment.AttachmentSource(v77, v59+ ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))+ *(void *)(v71 + 72) * v62, type metadata accessor for GroupSessionJournal.Attachment);
    v56(v85, 0);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t GroupSessionJournal.deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15GroupActivities19GroupSessionJournal___attachments;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t GroupSessionJournal.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15GroupActivities19GroupSessionJournal___attachments;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t GroupSessionJournal.Attachment.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t GroupSessionJournal.Attachment.id.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*GroupSessionJournal.Attachment.id.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t key path getter for GroupSessionJournal.Attachment.ledger : GroupSessionJournal.Attachment@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for GroupSessionJournal.Attachment(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of GroupSessionJournal.Attachment.AttachmentSource(a1, (uint64_t)v6, type metadata accessor for GroupSessionJournal.Attachment);
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t result = outlined destroy of GroupSessionJournal.Attachment((uint64_t)v6, type metadata accessor for GroupSessionJournal.Attachment);
  *a2 = Strong;
  return result;
}

uint64_t GroupSessionJournal.Attachment.ledger.getter()
{
  type metadata accessor for GroupSessionJournal.Attachment(0);

  return swift_weakLoadStrong();
}

uint64_t GroupSessionJournal.Attachment.ledger.setter()
{
  type metadata accessor for GroupSessionJournal.Attachment(0);
  swift_weakAssign();

  return swift_release();
}

uint64_t (*GroupSessionJournal.Attachment.ledger.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(type metadata accessor for GroupSessionJournal.Attachment(0) + 20);
  *(void *)a1 = swift_weakLoadStrong();
  return GroupSessionJournal.Attachment.ledger.modify;
}

uint64_t GroupSessionJournal.Attachment.ledger.modify()
{
  swift_weakAssign();

  return swift_release();
}

uint64_t GroupSessionJournal.Attachment.source.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for GroupSessionJournal.Attachment(0);
  return outlined init with copy of GroupSessionJournal.Attachment.AttachmentSource(v1 + *(int *)(v3 + 24), a1, type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
}

uint64_t GroupSessionJournal.Attachment.source.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for GroupSessionJournal.Attachment(0) + 24);

  return outlined assign with take of GroupSessionJournal.Attachment.AttachmentSource(a1, v3);
}

uint64_t (*GroupSessionJournal.Attachment.source.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t GroupSessionJournal.Attachment.load<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[126] = v4;
  v5[125] = a4;
  v5[124] = a3;
  v5[123] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionJournal.Attachment?);
  v5[127] = swift_task_alloc();
  v5[128] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for GroupSessionJournal.Attachment(0);
  v5[129] = v6;
  v5[130] = *(void *)(v6 - 8);
  v5[131] = swift_task_alloc();
  v5[132] = swift_task_alloc();
  v5[133] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResolvedTransferRepresentation?);
  v5[134] = swift_task_alloc();
  v5[135] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Optional();
  v5[136] = v7;
  v5[137] = *(void *)(v7 - 8);
  v5[138] = swift_task_alloc();
  v5[139] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UTType();
  v5[140] = v8;
  v5[141] = *(void *)(v8 - 8);
  v5[142] = swift_task_alloc();
  v5[143] = swift_task_alloc();
  v5[144] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ResolvedTransferRepresentation();
  v5[145] = v9;
  v5[146] = *(void *)(v9 - 8);
  v5[147] = swift_task_alloc();
  v5[148] = swift_task_alloc();
  v5[149] = swift_task_alloc();
  v5[150] = swift_task_alloc();
  v5[151] = swift_task_alloc();
  v5[152] = swift_task_alloc();
  v5[153] = swift_task_alloc();
  v5[154] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for _TransferRepresentationInputs();
  v5[155] = v10;
  v5[156] = *(void *)(v10 - 8);
  v5[157] = swift_task_alloc();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[158] = AssociatedTypeWitness;
  uint64_t v12 = type metadata accessor for _TransferRepresentationValue();
  v5[159] = v12;
  v5[160] = *(void *)(v12 - 8);
  v5[161] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for _TransferRepresentationOutputs();
  v5[162] = v13;
  v5[163] = *(void *)(v13 - 8);
  v5[164] = swift_task_alloc();
  v5[165] = *(void *)(AssociatedTypeWitness - 8);
  v5[166] = swift_task_alloc();
  v5[167] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for URL();
  v5[168] = v14;
  v5[169] = *(void *)(v14 - 8);
  v5[170] = swift_task_alloc();
  v5[171] = swift_task_alloc();
  v5[172] = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
  v5[173] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v5[174] = swift_task_alloc();
  v5[175] = swift_task_alloc();
  return MEMORY[0x1F4188298](GroupSessionJournal.Attachment.load<A>(_:), 0, 0);
}

uint64_t GroupSessionJournal.Attachment.load<A>(_:)()
{
  v156 = v0;
  outlined init with copy of GroupSessionJournal.Attachment.AttachmentSource(v0[126] + *(int *)(v0[129] + 24), v0[173], type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v2 = (uint64_t *)v0[173];
      uint64_t v4 = *v2;
      unint64_t v3 = v2[1];
      lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
      swift_allocError();
      *uint64_t v5 = 11;
      swift_willThrow();
      outlined consume of Data._Representation(v4, v3);
LABEL_48:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v132 = (uint64_t (*)(void))v0[1];
      return v132();
    }
    uint64_t Strong = swift_weakLoadStrong();
    v0[176] = Strong;
    if (!Strong)
    {
      lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
      swift_allocError();
      *uint64_t v58 = 2;
      swift_willThrow();
      goto LABEL_48;
    }
    v0[177] = *(void *)(Strong + 16);
    uint64_t v32 = *(void *)(Strong + 24);
    uint64_t ObjectType = swift_getObjectType();
    v148 = (int *)(*(void *)(v32 + 48) + **(int **)(v32 + 48));
    swift_unknownObjectRetain();
    uint64_t v34 = (void *)swift_task_alloc();
    v0[178] = v34;
    *uint64_t v34 = v0;
    v34[1] = GroupSessionJournal.Attachment.load<A>(_:);
    uint64_t v35 = v0[171];
    uint64_t v36 = v0[126];
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v148)(v35, v36, ObjectType, v32);
  }
  uint64_t v6 = v0[175];
  uint64_t v7 = v0[173];
  uint64_t v8 = v0[169];
  uint64_t v9 = v0[168];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?));
  outlined consume of Data?(*(void *)(v7 + *(int *)(v10 + 48)), *(void *)(v7 + *(int *)(v10 + 48) + 8));
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  v11(v6, v7, v9);
  uint64_t v12 = v0[175];
  uint64_t v13 = v0[174];
  uint64_t v14 = v0[169];
  uint64_t v15 = v0[168];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v15);
  outlined init with copy of URL?(v12, v13, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v13, 1, v15) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0[174], &demangling cache variable for type metadata for URL?);
    if (one-time initialization token for ledger == -1)
    {
LABEL_6:
      uint64_t v16 = v0[133];
      uint64_t v17 = v0[126];
      uint64_t v18 = type metadata accessor for Logger();
      __swift_project_value_buffer(v18, (uint64_t)static Log.ledger);
      outlined init with copy of GroupSessionJournal.Attachment.AttachmentSource(v17, v16, type metadata accessor for GroupSessionJournal.Attachment);
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      BOOL v21 = os_log_type_enabled(v19, v20);
      uint64_t v22 = v0[133];
      if (v21)
      {
        uint64_t v23 = v0[130];
        uint64_t v24 = v0[129];
        uint64_t v25 = v0[128];
        uint64_t v26 = v0[127];
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        v155[0] = v28;
        *(_DWORD *)uint64_t v27 = 136315138;
        outlined init with copy of GroupSessionJournal.Attachment.AttachmentSource(v22, v25, type metadata accessor for GroupSessionJournal.Attachment);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, v24);
        outlined init with copy of URL?(v25, v26, &demangling cache variable for type metadata for GroupSessionJournal.Attachment?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v26, 1, v24) == 1)
        {
          uint64_t v29 = 7104878;
          unint64_t v30 = 0xE300000000000000;
        }
        else
        {
          uint64_t v118 = v0[132];
          uint64_t v119 = v0[131];
          outlined init with take of GroupSessionJournal.Attachment.AttachmentSource(v0[127], v118, type metadata accessor for GroupSessionJournal.Attachment);
          outlined init with copy of GroupSessionJournal.Attachment.AttachmentSource(v118, v119, type metadata accessor for GroupSessionJournal.Attachment);
          uint64_t v29 = String.init<A>(reflecting:)();
          unint64_t v30 = v120;
          outlined destroy of GroupSessionJournal.Attachment(v118, type metadata accessor for GroupSessionJournal.Attachment);
        }
        uint64_t v121 = v0[133];
        outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0[128], &demangling cache variable for type metadata for GroupSessionJournal.Attachment?);
        v0[111] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v155);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of GroupSessionJournal.Attachment(v121, type metadata accessor for GroupSessionJournal.Attachment);
        _os_log_impl(&dword_1A375F000, v19, v20, "Failed to find URL for attachment %s", v27, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v28, -1, -1);
        MEMORY[0x1A624F870](v27, -1, -1);
      }
      else
      {
        outlined destroy of GroupSessionJournal.Attachment(v0[133], type metadata accessor for GroupSessionJournal.Attachment);
      }

      uint64_t v122 = v0[175];
      lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
      swift_allocError();
      unsigned char *v123 = 2;
      swift_willThrow();
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v122, &demangling cache variable for type metadata for URL?);
      goto LABEL_48;
    }
LABEL_59:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v38 = v0[167];
  uint64_t v39 = v0[166];
  uint64_t v40 = v0[165];
  uint64_t v140 = v0[164];
  v149 = (int *)v0[163];
  uint64_t v153 = v0[162];
  uint64_t v139 = v0[161];
  uint64_t v143 = v0[160];
  uint64_t v144 = v0[159];
  uint64_t v41 = v0[158];
  uint64_t v42 = v0[157];
  uint64_t v43 = v0[156];
  uint64_t v141 = v0[155];
  v11(v0[170], v0[174], v0[168]);
  dispatch thunk of static Transferable.transferRepresentation.getter();
  swift_getDynamicType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v39, v38, v41);
  _TransferRepresentationValue.init(_:)();
  _TransferRepresentationInputs.init()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)();
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v141);
  (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v139, v144);
  uint64_t v44 = _TransferRepresentationOutputs.storage.getter();
  (*((void (**)(uint64_t, uint64_t))v149 + 1))(v140, v153);
  v154 = v0;
  uint64_t v145 = *(void *)(v44 + 16);
  if (v145)
  {
    unint64_t v45 = 0;
    uint64_t v46 = v0[146];
    uint64_t v47 = MEMORY[0x1E4FBC860];
    while (v45 < *(void *)(v44 + 16))
    {
      uint64_t v48 = v154[154];
      unint64_t v49 = v154[153];
      uint64_t v50 = v154[145];
      unint64_t v51 = (*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
      uint64_t v52 = *(void *)(v46 + 72);
      uint64_t v0 = (void *)v44;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v46 + 16))(v48, v44 + v51 + v52 * v45, v50);
      uint64_t v53 = *(void (**)(unint64_t, uint64_t, uint64_t))(v46 + 32);
      v53(v49, v48, v50);
      v155[0] = v47;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v47 + 16) + 1, 1);
        uint64_t v47 = v155[0];
      }
      unint64_t v55 = *(void *)(v47 + 16);
      unint64_t v54 = *(void *)(v47 + 24);
      if (v55 >= v54 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1);
        uint64_t v47 = v155[0];
      }
      ++v45;
      uint64_t v56 = v154[153];
      uint64_t v57 = v154[145];
      *(void *)(v47 + 16) = v55 + 1;
      v53(v47 + v51 + v55 * v52, v56, v57);
      uint64_t v44 = (uint64_t)v0;
      if (v145 == v45) {
        goto LABEL_25;
      }
    }
    __break(1u);
    goto LABEL_59;
  }
  uint64_t v47 = MEMORY[0x1E4FBC860];
LABEL_25:
  uint64_t v0 = v154;
  v154[180] = v47;
  swift_bridgeObjectRelease();
  if (one-time initialization token for ledger != -1) {
    swift_once();
  }
  uint64_t v59 = type metadata accessor for Logger();
  v154[181] = __swift_project_value_buffer(v59, (uint64_t)static Log.ledger);
  swift_retain_n();
  uint64_t v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v60, v61))
  {
    unint64_t v62 = (uint8_t *)swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    v155[0] = v63;
    *(_DWORD *)unint64_t v62 = 136315138;
    v154[121] = v47;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ResolvedTransferRepresentation]);
    uint64_t v64 = String.init<A>(reflecting:)();
    v154[122] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, v155);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A375F000, v60, v61, "Supported representations: %s", v62, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v63, -1, -1);
    MEMORY[0x1A624F870](v62, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v66 = *(void *)(v47 + 16);
  v154[182] = v66;
  if (!v66)
  {
LABEL_47:
    swift_release();
    uint64_t v124 = v154[175];
    uint64_t v125 = v154[170];
    uint64_t v126 = v154[169];
    uint64_t v127 = v154[168];
    uint64_t v128 = v154[167];
    uint64_t v129 = v154[165];
    uint64_t v130 = v154[158];
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    unsigned char *v131 = 0;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v125, v127);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v124, &demangling cache variable for type metadata for URL?);
    (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v128, v130);
    goto LABEL_48;
  }
  uint64_t v67 = 0;
  uint64_t v68 = v154[146];
  *((_DWORD *)v154 + 408) = *(_DWORD *)(v68 + 80);
  v154[183] = *(void *)(v68 + 72);
  v154[184] = *(void *)(v68 + 16);
  while (1)
  {
    v154[185] = v67;
    uint64_t v69 = (void (*)(uint64_t, unint64_t, uint64_t))v154[184];
    uint64_t v70 = v154[152];
    uint64_t v71 = v154[145];
    unint64_t v72 = v154[180]
        + ((*((unsigned __int8 *)v154 + 1632) + 32) & ~(unint64_t)*((unsigned __int8 *)v154 + 1632))
        + v154[183] * v67;
    v154[186] = (v154[146] + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v69(v70, v72, v71);
    uint64_t v73 = ResolvedTransferRepresentation.importing.getter();
    v154[187] = v73;
    v154[188] = v74;
    v75 = (void (*)(uint64_t, uint64_t, int *))v154[184];
    if (v73) {
      break;
    }
    v75(v154[149], v154[152], (int *)v154[145]);
    v93 = Logger.logObject.getter();
    os_log_type_t v94 = static os_log_type_t.error.getter();
    BOOL v95 = os_log_type_enabled(v93, v94);
    uint64_t v96 = v154[149];
    uint64_t v97 = v154[146];
    uint64_t v98 = v154[145];
    if (v95)
    {
      os_log_type_t v151 = v94;
      v99 = (void (*)(uint64_t, uint64_t, uint64_t))v154[184];
      uint64_t v100 = v154[135];
      uint64_t v101 = v154[134];
      uint64_t v102 = swift_slowAlloc();
      uint64_t v147 = swift_slowAlloc();
      v154[118] = v147;
      *(_DWORD *)uint64_t v102 = 136315138;
      v99(v100, v96, v98);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v97 + 56))(v100, 0, 1, v98);
      outlined init with copy of URL?(v100, v101, &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v101, 1, v98) == 1)
      {
        unint64_t v103 = 0xE300000000000000;
        uint64_t v104 = 7104878;
      }
      else
      {
        v107 = (void (*)(uint64_t, uint64_t, uint64_t))v154[184];
        uint64_t v108 = v154[148];
        uint64_t v109 = v154[147];
        uint64_t v110 = v154[146];
        uint64_t v111 = v154[145];
        (*(void (**)(uint64_t, void, uint64_t))(v110 + 32))(v108, v154[134], v111);
        v107(v109, v108, v111);
        uint64_t v104 = String.init<A>(reflecting:)();
        unint64_t v103 = v112;
        (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v108, v111);
      }
      uint64_t v113 = v154[152];
      uint64_t v114 = v154[149];
      uint64_t v115 = v154[146];
      uint64_t v116 = v154[145];
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v154[135], &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      *(void *)(v102 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, v103, v154 + 118);
      swift_bridgeObjectRelease();
      v117 = *(void (**)(uint64_t, uint64_t))(v115 + 8);
      v117(v114, v116);
      _os_log_impl(&dword_1A375F000, v93, v151, "Failed to find importing closure from representation %s", (uint8_t *)v102, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v147, -1, -1);
      MEMORY[0x1A624F870](v102, -1, -1);

      v117(v113, v116);
    }
    else
    {
      uint64_t v105 = v154[152];

      v106 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
      v106(v96, v98);
      v106(v105, v98);
    }
    uint64_t v67 = v154[185] + 1;
    if (v67 == v154[182]) {
      goto LABEL_47;
    }
  }
  v142 = (int *)v73;
  uint64_t v76 = v154[152];
  uint64_t v146 = v154[151];
  v150 = (int *)v154[145];
  uint64_t v77 = v154[144];
  uint64_t v78 = v154[143];
  uint64_t v79 = v154[141];
  uint64_t v80 = v154[140];
  ResolvedTransferRepresentation.contentType.getter();
  static UTType.url.getter();
  char v81 = static UTType.== infix(_:_:)();
  v82 = *(void (**)(uint64_t, uint64_t))(v79 + 8);
  v154[189] = v82;
  v154[190] = (v79 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v82(v78, v80);
  v82(v77, v80);
  v75(v146, v76, v150);
  uint64_t v83 = v154[151];
  uint64_t v84 = v154[146];
  uint64_t v85 = v154[145];
  if (v81)
  {
    v90 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
    v90(v154[151], v154[145]);
  }
  else
  {
    uint64_t v86 = v154[144];
    uint64_t v87 = v154[143];
    uint64_t v88 = v154[140];
    ResolvedTransferRepresentation.contentType.getter();
    static UTType.fileURL.getter();
    char v89 = static UTType.== infix(_:_:)();
    v82(v87, v88);
    v82(v86, v88);
    v90 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
    v154[191] = v90;
    v154[192] = (v84 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v90(v83, v85);
    if ((v89 & 1) == 0)
    {
      uint64_t v91 = Data.init(contentsOf:options:)();
      v154[200] = v91;
      v154[201] = v92;
      uint64_t v137 = MEMORY[0x1E4F248B8];
      v154[30] = MEMORY[0x1E4F277C0];
      v154[31] = v137;
      v154[27] = v91;
      v154[28] = v92;
      outlined copy of Data._Representation(v91, v92);
      v152 = (int *)((char *)v142 + *v142);
      v138 = (void *)swift_task_alloc();
      v154[202] = v138;
      void *v138 = v154;
      v138[1] = GroupSessionJournal.Attachment.load<A>(_:);
      return ((uint64_t (*)(void *, void *))v152)(v154 + 22, v154 + 27);
    }
  }
  v154[193] = v90;
  ResolvedTransferRepresentation.contentType.getter();
  v133 = (void *)swift_task_alloc();
  v154[194] = v133;
  uint64_t v134 = _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
  void *v133 = v154;
  v133[1] = GroupSessionJournal.Attachment.load<A>(_:);
  uint64_t v135 = v154[168];
  uint64_t v136 = v154[142];
  return MEMORY[0x1F40DFA18](v136, v135, v134);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 1432) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = GroupSessionJournal.Attachment.load<A>(_:);
  }
  else {
    uint64_t v2 = GroupSessionJournal.Attachment.load<A>(_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, unint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  void (*v78)(uint64_t, uint64_t);
  uint64_t v79;
  unint64_t v80;
  id v81;
  id v82;
  NSObject *v83;
  os_log_type_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t MetatypeMetadata;
  uint64_t v92;
  unint64_t v93;
  id v94;
  uint64_t v95;
  unint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t);
  void (*v111)(uint64_t, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned char *v135;
  uint64_t (*v136)(void);
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int *v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  os_log_type_t v159;
  void *v160;
  int *v161;
  uint64_t v162[3];
  void *v163;
  uint64_t v164;

  v163 = v0;
  uint64_t v1 = v0[175];
  uint64_t v2 = v0[171];
  unint64_t v3 = v0[169];
  uint64_t v4 = v0[168];
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
  v5(v1, v2, v4);
  os_log_type_t v151 = (void *)v0[179];
  uint64_t v6 = v0[175];
  uint64_t v7 = v0[174];
  uint64_t v8 = v0[169];
  uint64_t v9 = v0[168];
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v9);
  outlined init with copy of URL?(v6, v7, &demangling cache variable for type metadata for URL?);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v7, 1, v9);
  uint64_t v11 = v0[174];
  v160 = v0;
  if (v10 == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v11, &demangling cache variable for type metadata for URL?);
    if (one-time initialization token for ledger == -1)
    {
LABEL_3:
      uint64_t v12 = v0[133];
      uint64_t v13 = v0[126];
      uint64_t v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)static Log.ledger);
      outlined init with copy of GroupSessionJournal.Attachment.AttachmentSource(v13, v12, type metadata accessor for GroupSessionJournal.Attachment);
      uint64_t v15 = Logger.logObject.getter();
      uint64_t v16 = static os_log_type_t.error.getter();
      uint64_t v17 = os_log_type_enabled(v15, v16);
      uint64_t v18 = v0[133];
      if (v17)
      {
        uint64_t v19 = v0[130];
        os_log_type_t v20 = v0[129];
        BOOL v21 = v0[128];
        uint64_t v22 = v0[127];
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v24 = swift_slowAlloc();
        v162[0] = v24;
        *(_DWORD *)uint64_t v23 = 136315138;
        outlined init with copy of GroupSessionJournal.Attachment.AttachmentSource(v18, v21, type metadata accessor for GroupSessionJournal.Attachment);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v21, 0, 1, v20);
        outlined init with copy of URL?(v21, v22, &demangling cache variable for type metadata for GroupSessionJournal.Attachment?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v22, 1, v20) == 1)
        {
          uint64_t v25 = 7104878;
          uint64_t v26 = 0xE300000000000000;
        }
        else
        {
          uint64_t v122 = v0[132];
          v123 = v0[131];
          outlined init with take of GroupSessionJournal.Attachment.AttachmentSource(v0[127], v122, type metadata accessor for GroupSessionJournal.Attachment);
          outlined init with copy of GroupSessionJournal.Attachment.AttachmentSource(v122, v123, type metadata accessor for GroupSessionJournal.Attachment);
          uint64_t v25 = String.init<A>(reflecting:)();
          uint64_t v26 = v124;
          outlined destroy of GroupSessionJournal.Attachment(v122, type metadata accessor for GroupSessionJournal.Attachment);
        }
        uint64_t v125 = v0[133];
        outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0[128], &demangling cache variable for type metadata for GroupSessionJournal.Attachment?);
        v160[111] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v162);
        uint64_t v0 = v160;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of GroupSessionJournal.Attachment(v125, type metadata accessor for GroupSessionJournal.Attachment);
        _os_log_impl(&dword_1A375F000, v15, v16, "Failed to find URL for attachment %s", v23, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v24, -1, -1);
        MEMORY[0x1A624F870](v23, -1, -1);
      }
      else
      {
        outlined destroy of GroupSessionJournal.Attachment(v0[133], type metadata accessor for GroupSessionJournal.Attachment);
      }

      uint64_t v126 = v0[175];
      lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
      swift_allocError();
      *uint64_t v127 = 2;
      swift_willThrow();
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v126, &demangling cache variable for type metadata for URL?);
      goto LABEL_44;
    }
LABEL_55:
    swift_once();
    goto LABEL_3;
  }
  uint64_t v27 = v0[167];
  uint64_t v28 = v0[166];
  uint64_t v29 = v0[165];
  uint64_t v146 = v0[164];
  uint64_t v153 = v0[163];
  uint64_t v157 = v0[162];
  uint64_t v145 = v0[161];
  v149 = v0[160];
  v152 = v0[159];
  unint64_t v30 = v0[158];
  uint64_t v31 = v0[157];
  uint64_t v32 = v0[156];
  v148 = v0[155];
  v5(v0[170], v11, v0[168]);
  dispatch thunk of static Transferable.transferRepresentation.getter();
  swift_getDynamicType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v28, v27, v30);
  _TransferRepresentationValue.init(_:)();
  _TransferRepresentationInputs.init()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)();
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v148);
  (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v145, v152);
  uint64_t v33 = _TransferRepresentationOutputs.storage.getter();
  (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v146, v157);
  v154 = *(void *)(v33 + 16);
  if (v154)
  {
    uint64_t v34 = 0;
    uint64_t v35 = v0[146];
    uint64_t v36 = MEMORY[0x1E4FBC860];
    while (v34 < *(void *)(v33 + 16))
    {
      BOOL v37 = v160[154];
      uint64_t v38 = v160[153];
      uint64_t v39 = v160[145];
      uint64_t v40 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
      uint64_t v41 = *(void *)(v35 + 72);
      uint64_t v0 = (void *)v33;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v35 + 16))(v37, v33 + v40 + v41 * v34, v39);
      uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32);
      v42(v38, v37, v39);
      v162[0] = v36;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v36 + 16) + 1, 1);
        uint64_t v36 = v162[0];
      }
      uint64_t v44 = *(void *)(v36 + 16);
      uint64_t v43 = *(void *)(v36 + 24);
      if (v44 >= v43 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
        uint64_t v36 = v162[0];
      }
      ++v34;
      unint64_t v45 = v160[153];
      uint64_t v46 = v160[145];
      *(void *)(v36 + 16) = v44 + 1;
      v42(v36 + v40 + v44 * v41, v45, v46);
      uint64_t v33 = (uint64_t)v0;
      if (v154 == v34) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v36 = MEMORY[0x1E4FBC860];
LABEL_17:
  uint64_t v0 = v160;
  v160[180] = v36;
  swift_bridgeObjectRelease();
  if (one-time initialization token for ledger != -1) {
    swift_once();
  }
  uint64_t v47 = type metadata accessor for Logger();
  v160[181] = __swift_project_value_buffer(v47, (uint64_t)static Log.ledger);
  swift_retain_n();
  uint64_t v48 = Logger.logObject.getter();
  unint64_t v49 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = (uint8_t *)swift_slowAlloc();
    unint64_t v51 = swift_slowAlloc();
    v162[0] = v51;
    *(_DWORD *)uint64_t v50 = 136315138;
    v160[121] = v36;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ResolvedTransferRepresentation]);
    uint64_t v52 = String.init<A>(reflecting:)();
    v160[122] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, v162);
    uint64_t v0 = v160;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A375F000, v48, v49, "Supported representations: %s", v50, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v51, -1, -1);
    MEMORY[0x1A624F870](v50, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  unint64_t v54 = *(void *)(v36 + 16);
  v0[182] = v54;
  if (!v54)
  {
LABEL_43:
    swift_release();
    uint64_t v128 = v0[175];
    uint64_t v129 = v0[170];
    uint64_t v130 = v0[169];
    v131 = v0[168];
    v132 = v0[167];
    v133 = v0[165];
    uint64_t v134 = v0[158];
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *uint64_t v135 = 0;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v129, v131);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v128, &demangling cache variable for type metadata for URL?);
    (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v132, v134);
LABEL_44:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v136 = (uint64_t (*)(void))v0[1];
    return v136();
  }
  unint64_t v55 = 0;
  uint64_t v147 = (uint64_t)(v0 + 117);
  uint64_t v144 = v0 + 118;
  uint64_t v56 = v0[146];
  *((_DWORD *)v0 + 408) = *(_DWORD *)(v56 + 80);
  v0[183] = *(void *)(v56 + 72);
  v0[184] = *(void *)(v56 + 16);
  while (1)
  {
    v0[185] = v55;
    uint64_t v57 = (void (*)(uint64_t, unint64_t, uint64_t))v0[184];
    uint64_t v58 = v0[152];
    uint64_t v59 = v0[145];
    uint64_t v60 = v0[180]
        + ((*((unsigned __int8 *)v0 + 1632) + 32) & ~(unint64_t)*((unsigned __int8 *)v0 + 1632))
        + v0[183] * v55;
    v0[186] = (v0[146] + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v57(v58, v60, v59);
    os_log_type_t v61 = ResolvedTransferRepresentation.importing.getter();
    v0[187] = v61;
    v0[188] = v62;
    uint64_t v63 = (void (*)(uint64_t, uint64_t, uint64_t))v0[184];
    if (!v61)
    {
      v63(v0[149], v0[152], v0[145]);
      uint64_t v97 = Logger.logObject.getter();
      uint64_t v98 = static os_log_type_t.error.getter();
      v99 = os_log_type_enabled(v97, v98);
      uint64_t v100 = v0[149];
      uint64_t v101 = v0[146];
      uint64_t v102 = v0[145];
      if (v99)
      {
        v159 = v98;
        unint64_t v103 = (void (*)(uint64_t, uint64_t, uint64_t))v0[184];
        uint64_t v104 = v0[135];
        uint64_t v105 = v0[134];
        v106 = swift_slowAlloc();
        v156 = swift_slowAlloc();
        v0[118] = v156;
        *(_DWORD *)v106 = 136315138;
        v103(v104, v100, v102);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v101 + 56))(v104, 0, 1, v102);
        outlined init with copy of URL?(v104, v105, &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48))(v105, 1, v102) == 1)
        {
          v107 = 0xE300000000000000;
          uint64_t v108 = 7104878;
        }
        else
        {
          uint64_t v111 = (void (*)(uint64_t, uint64_t, uint64_t))v0[184];
          unint64_t v112 = v0[148];
          uint64_t v113 = v0[147];
          uint64_t v114 = v0[146];
          uint64_t v115 = v0[145];
          (*(void (**)(uint64_t, void, uint64_t))(v114 + 32))(v112, v0[134], v115);
          v111(v113, v112, v115);
          uint64_t v108 = String.init<A>(reflecting:)();
          v107 = v116;
          (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v112, v115);
        }
        v117 = v0[152];
        uint64_t v118 = v0[149];
        uint64_t v119 = v0[146];
        unint64_t v120 = v0[145];
        outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0[135], &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
        *(void *)(v106 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v108, v107, v144);
        swift_bridgeObjectRelease();
        uint64_t v121 = *(void (**)(uint64_t, uint64_t))(v119 + 8);
        v121(v118, v120);
        _os_log_impl(&dword_1A375F000, v97, v159, "Failed to find importing closure from representation %s", (uint8_t *)v106, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v156, -1, -1);
        MEMORY[0x1A624F870](v106, -1, -1);

        v121(v117, v120);
      }
      else
      {
        uint64_t v109 = v0[152];

        uint64_t v110 = *(void (**)(uint64_t, uint64_t))(v101 + 8);
        v110(v100, v102);
        v110(v109, v102);
      }
      goto LABEL_26;
    }
    v150 = (int *)v61;
    uint64_t v64 = v0[152];
    v155 = v0[151];
    v158 = v0[145];
    unint64_t v65 = v0[144];
    uint64_t v66 = v0[143];
    uint64_t v67 = v0[141];
    uint64_t v68 = v0[140];
    ResolvedTransferRepresentation.contentType.getter();
    static UTType.url.getter();
    uint64_t v69 = static UTType.== infix(_:_:)();
    uint64_t v70 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
    v0[189] = v70;
    v0[190] = (v67 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v70(v66, v68);
    v70(v65, v68);
    v63(v155, v64, v158);
    uint64_t v71 = v0[151];
    unint64_t v72 = v0[146];
    uint64_t v73 = v0[145];
    if (v69) {
      break;
    }
    uint64_t v74 = v0[144];
    v75 = v0[143];
    uint64_t v76 = v0[140];
    ResolvedTransferRepresentation.contentType.getter();
    static UTType.fileURL.getter();
    uint64_t v77 = static UTType.== infix(_:_:)();
    v70(v75, v76);
    v70(v74, v76);
    uint64_t v78 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
    v0[191] = v78;
    v0[192] = (v72 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v78(v71, v73);
    if (v77) {
      goto LABEL_48;
    }
    uint64_t v79 = Data.init(contentsOf:options:)();
    v0[200] = v79;
    v0[201] = v80;
    if (!v151)
    {
      v142 = MEMORY[0x1E4F248B8];
      v0[30] = MEMORY[0x1E4F277C0];
      v0[31] = v142;
      v0[27] = v79;
      v0[28] = v80;
      outlined copy of Data._Representation(v79, v80);
      v161 = (int *)((char *)v150 + *v150);
      uint64_t v143 = (void *)swift_task_alloc();
      v0[202] = v143;
      *uint64_t v143 = v0;
      v143[1] = GroupSessionJournal.Attachment.load<A>(_:);
      return ((uint64_t (*)(void *, void *))v161)(v0 + 22, v0 + 27);
    }
    $defer #1 <A>() in GroupSessionJournal.Attachment.load<A>(_:)(v0[126], v0[170]);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v150);
    char v81 = v151;
    v82 = v151;
    uint64_t v83 = Logger.logObject.getter();
    uint64_t v84 = static os_log_type_t.error.getter();
    uint64_t v85 = os_log_type_enabled(v83, v84);
    uint64_t v86 = v0[152];
    uint64_t v87 = v0[145];
    if (v85)
    {
      uint64_t v88 = v0[124];
      char v89 = swift_slowAlloc();
      v90 = swift_slowAlloc();
      v162[0] = v90;
      *(_DWORD *)char v89 = 136315394;
      v160[117] = v88;
      MetatypeMetadata = swift_getMetatypeMetadata();
      unint64_t v92 = >> prefix<A>(_:)(v147, MetatypeMetadata);
      *(void *)(v89 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v93, v162);
      swift_bridgeObjectRelease();
      *(_WORD *)(v89 + 12) = 2080;
      v160[115] = v151;
      os_log_type_t v94 = v151;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      BOOL v95 = String.init<A>(reflecting:)();
      *(void *)(v89 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v96, v162);
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A375F000, v83, v84, "Failed load %s, error: %s", (uint8_t *)v89, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v90, -1, -1);
      uint64_t v0 = v160;
      MEMORY[0x1A624F870](v89, -1, -1);
    }
    else
    {
    }
    v78(v86, v87);
    os_log_type_t v151 = 0;
LABEL_26:
    unint64_t v55 = v0[185] + 1;
    if (v55 == v0[182]) {
      goto LABEL_43;
    }
  }
  uint64_t v78 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
  v78(v0[151], v0[145]);
LABEL_48:
  v0[193] = v78;
  ResolvedTransferRepresentation.contentType.getter();
  v138 = (void *)swift_task_alloc();
  v0[194] = v138;
  uint64_t v139 = _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
  void *v138 = v0;
  v138[1] = GroupSessionJournal.Attachment.load<A>(_:);
  uint64_t v140 = v0[168];
  uint64_t v141 = v0[142];
  return MEMORY[0x1F40DFA18](v141, v140, v139);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int *v20;
  void *v21;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  os_log_type_t type;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v31 = v0;
  uint64_t v1 = *(void *)(v0 + 1568);
  uint64_t v2 = *(void *)(v0 + 1560);
  (*(void (**)(void, void, void))(v0 + 1472))(*(void *)(v0 + 1200), *(void *)(v0 + 1216), *(void *)(v0 + 1160));
  outlined copy of Data._Representation(v2, v1);
  outlined copy of Data._Representation(v2, v1);
  unint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 1568);
    uint64_t v6 = *(void *)(v0 + 1560);
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v0 + 1544);
    uint64_t v23 = *(void *)(v0 + 1200);
    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v0 + 1512);
    uint64_t v25 = *(void *)(v0 + 1160);
    uint64_t v7 = *(void *)(v0 + 1152);
    uint64_t v8 = *(void *)(v0 + 1120);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    unint64_t v30 = v28;
    *(_DWORD *)uint64_t v9 = 136315394;
    type = v4;
    ResolvedTransferRepresentation.contentType.getter();
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v12 = v11;
    v24(v7, v8);
    *(void *)(v0 + 952) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v26(v23, v25);
    *(_WORD *)(v9 + 12) = 2080;
    outlined copy of Data._Representation(v6, v5);
    uint64_t v13 = Data.description.getter();
    uint64_t v15 = v14;
    outlined consume of Data._Representation(v6, v5);
    *(void *)(v0 + 960) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v6, v5);
    outlined consume of Data._Representation(v6, v5);
    _os_log_impl(&dword_1A375F000, v3, type, "Exported data from attachmentURL to contentType: %s successfully. %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v28, -1, -1);
    MEMORY[0x1A624F870](v9, -1, -1);
  }
  else
  {
    uint64_t v16 = *(void *)(v0 + 1568);
    uint64_t v17 = *(void *)(v0 + 1560);
    (*(void (**)(void, void))(v0 + 1544))(*(void *)(v0 + 1200), *(void *)(v0 + 1160));
    outlined consume of Data._Representation(v17, v16);
    outlined consume of Data._Representation(v17, v16);
  }

  uint64_t v18 = *(void *)(v0 + 1568);
  uint64_t v19 = *(void *)(v0 + 1560);
  os_log_type_t v20 = *(int **)(v0 + 1496);
  *(void *)(v0 + 640) = MEMORY[0x1E4F277C0];
  *(void *)(v0 + 648) = MEMORY[0x1E4F248B8];
  *(void *)(v0 + 616) = v19;
  *(void *)(v0 + 624) = v18;
  outlined copy of Data._Representation(v19, v18);
  uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t))((char *)v20 + *v20);
  BOOL v21 = (void *)swift_task_alloc();
  *(void *)(v0 + 1584) = v21;
  *BOOL v21 = v0;
  v21[1] = GroupSessionJournal.Attachment.load<A>(_:);
  return v29(v0 + 576, v0 + 616);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1592) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v3 = GroupSessionJournal.Attachment.load<A>(_:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v2 + 616);
    unint64_t v3 = GroupSessionJournal.Attachment.load<A>(_:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t MetatypeMetadata;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned char *v43;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  void (*v47)(uint64_t, unint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, int *);
  NSObject *v54;
  os_log_type_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  int *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, int *);
  uint64_t v89;
  unint64_t v90;
  id v91;
  id v92;
  NSObject *v93;
  os_log_type_t v94;
  BOOL v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  id v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  unint64_t v122;
  void (*v123)(uint64_t, uint64_t);
  void *v124;
  void (*v125)(uint64_t, uint64_t);
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  os_log_type_t v136;
  int *v137;
  int *v138;
  int *v139;
  uint64_t v140[3];
  uint64_t v141;
  uint64_t v142;

  uint64_t v141 = v0;
  uint64_t v1 = v0 + 576;
  uint64_t v2 = v0 + 696;
  outlined init with copy of AudioSessionAssertionManager(v0 + 576, v0 + 656);
  unint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(void *)(v0 + 904) = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    outlined init with copy of AudioSessionAssertionManager(v0 + 656, v0 + 336);
    outlined init with copy of URL?(v0 + 336, v0 + 136, &demangling cache variable for type metadata for Transferable?);
    if (*(void *)(v0 + 160))
    {
      outlined init with take of TypedPayloadDecoding((long long *)(v0 + 136), v0 + 96);
      outlined init with copy of AudioSessionAssertionManager(v0 + 96, v0 + 56);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transferable);
      uint64_t v7 = String.init<A>(reflecting:)();
      uint64_t v9 = v8;
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
    }
    else
    {
      uint64_t v7 = 7104878;
      uint64_t v9 = 0xE300000000000000;
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + 336, &demangling cache variable for type metadata for Transferable?);
    *(void *)(v0 + 928) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, (uint64_t *)(v0 + 904));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 656);
    _os_log_impl(&dword_1A375F000, v3, v4, "Imported attachmentURL successfully. %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v6, -1, -1);
    MEMORY[0x1A624F870](v5, -1, -1);

    uint64_t v2 = v0 + 696;
    uint64_t v1 = v0 + 576;
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 656);
  }
  outlined init with copy of AudioSessionAssertionManager(v1, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transferable);
  if (swift_dynamicCast())
  {
    uint64_t v119 = *(void *)(v0 + 1560);
    uint64_t v122 = *(void *)(v0 + 1568);
    uint64_t v10 = *(void *)(v0 + 1496);
    uint64_t v125 = *(void (**)(uint64_t, uint64_t))(v0 + 1544);
    uint64_t v134 = *(void *)(v0 + 1400);
    uint64_t v128 = *(void *)(v0 + 1360);
    uint64_t v11 = *(void *)(v0 + 1352);
    uint64_t v126 = *(void *)(v0 + 1344);
    uint64_t v116 = *(void *)(v0 + 1216);
    uint64_t v12 = *(void *)(v0 + 1160);
    uint64_t v13 = *(void *)(v0 + 1112);
    uint64_t v14 = *(void *)(v0 + 992);
    uint64_t v129 = *(void *)(v0 + 984);
    uint64_t v15 = *(void *)(v14 - 8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v10);
    outlined consume of Data._Representation(v119, v122);
    __swift_destroy_boxed_opaque_existential_1Tm(v1);
    v125(v116, v12);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v128, v126);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v134, &demangling cache variable for type metadata for URL?);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v129, v13, v14);
    (*(void (**)(void, void))(*(void *)(v0 + 1320) + 8))(*(void *)(v0 + 1336), *(void *)(v0 + 1264));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
LABEL_17:
    return v16();
  }
  uint64_t v17 = *(void *)(v0 + 1112);
  uint64_t v18 = *(void *)(v0 + 1096);
  uint64_t v19 = *(void *)(v0 + 1088);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(v0 + 992) - 8) + 56))(v17, 1, 1);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  outlined init with copy of AudioSessionAssertionManager(v1, v0 + 16);
  os_log_type_t v20 = Logger.logObject.getter();
  BOOL v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v135 = v1;
    uint64_t v127 = (uint64_t *)(v0 + 856);
    uint64_t v22 = swift_slowAlloc();
    uint64_t v130 = swift_slowAlloc();
    *(void *)(v0 + 856) = v130;
    *(_DWORD *)uint64_t v22 = 136315394;
    outlined init with copy of AudioSessionAssertionManager(v0 + 16, v0 + 816);
    outlined init with copy of URL?(v0 + 816, v0 + 776, &demangling cache variable for type metadata for Transferable?);
    if (*(void *)(v0 + 800))
    {
      outlined init with take of TypedPayloadDecoding((long long *)(v0 + 776), v0 + 736);
      outlined init with copy of AudioSessionAssertionManager(v0 + 736, v0 + 456);
      uint64_t v23 = String.init<A>(reflecting:)();
      uint64_t v25 = v24;
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 736);
    }
    else
    {
      uint64_t v25 = 0xE300000000000000;
      uint64_t v23 = 7104878;
    }
    uint64_t v113 = *(void *)(v0 + 1496);
    unint64_t v120 = *(void *)(v0 + 1216);
    v123 = *(void (**)(uint64_t, uint64_t))(v0 + 1544);
    uint64_t v115 = *(void *)(v0 + 1568);
    v117 = *(void *)(v0 + 1160);
    uint64_t v31 = *(void *)(v0 + 992);
    uint64_t v114 = *(void *)(v0 + 1560);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + 816, &demangling cache variable for type metadata for Transferable?);
    *(void *)(v0 + 864) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    *(_WORD *)(v22 + 12) = 2080;
    *(void *)(v0 + 872) = v31;
    MetatypeMetadata = swift_getMetatypeMetadata();
    uint64_t v33 = >> prefix<A>(_:)(v0 + 872, MetatypeMetadata);
    *(void *)(v0 + 880) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v20, v21, "Failed to convert %s to %s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v130, -1, -1);
    MEMORY[0x1A624F870](v22, -1, -1);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v113);

    outlined consume of Data._Representation(v114, v115);
    __swift_destroy_boxed_opaque_existential_1Tm(v135);
    v123(v120, v117);
  }
  else
  {
    uint64_t v26 = *(void *)(v0 + 1568);
    uint64_t v27 = *(void *)(v0 + 1560);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v0 + 1544);
    uint64_t v29 = *(void *)(v0 + 1216);
    unint64_t v30 = *(void *)(v0 + 1160);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(void *)(v0 + 1496));

    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    outlined consume of Data._Representation(v27, v26);
    __swift_destroy_boxed_opaque_existential_1Tm(v1);
    v28(v29, v30);
  }
  uint64_t v35 = *(void *)(v0 + 1480) + 1;
  if (v35 == *(void *)(v0 + 1456))
  {
LABEL_16:
    swift_release();
    uint64_t v36 = *(void *)(v0 + 1400);
    BOOL v37 = *(void *)(v0 + 1360);
    uint64_t v38 = *(void *)(v0 + 1352);
    uint64_t v39 = *(void *)(v0 + 1344);
    uint64_t v40 = *(void *)(v0 + 1336);
    uint64_t v41 = *(void *)(v0 + 1320);
    uint64_t v42 = *(void *)(v0 + 1264);
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *uint64_t v43 = 0;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v36, &demangling cache variable for type metadata for URL?);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_17;
  }
  uint64_t v124 = *(void **)(v0 + 1592);
  while (1)
  {
    *(void *)(v0 + 1480) = v35;
    uint64_t v47 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1472);
    uint64_t v48 = *(void *)(v0 + 1216);
    unint64_t v49 = *(void *)(v0 + 1160);
    uint64_t v50 = *(void *)(v0 + 1440)
        + ((*(unsigned __int8 *)(v0 + 1632) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1632))
        + *(void *)(v0 + 1464) * v35;
    *(void *)(v0 + 1488) = (*(void *)(v0 + 1168) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v47(v48, v50, v49);
    unint64_t v51 = ResolvedTransferRepresentation.importing.getter();
    *(void *)(v0 + 1496) = v51;
    *(void *)(v0 + 1504) = v52;
    uint64_t v53 = *(void (**)(uint64_t, uint64_t, int *))(v0 + 1472);
    if (!v51)
    {
      v53(*(void *)(v0 + 1192), *(void *)(v0 + 1216), *(int **)(v0 + 1160));
      unint64_t v54 = Logger.logObject.getter();
      unint64_t v55 = static os_log_type_t.error.getter();
      uint64_t v56 = os_log_type_enabled(v54, v55);
      uint64_t v57 = *(void *)(v0 + 1192);
      uint64_t v58 = *(void *)(v0 + 1168);
      uint64_t v59 = *(void *)(v0 + 1160);
      if (v56)
      {
        uint64_t v136 = v55;
        uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
        os_log_type_t v61 = *(void *)(v0 + 1080);
        unint64_t v62 = *(void *)(v0 + 1072);
        uint64_t v63 = swift_slowAlloc();
        v131 = swift_slowAlloc();
        *(void *)(v0 + 944) = v131;
        *(_DWORD *)uint64_t v63 = 136315138;
        v60(v61, v57, v59);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56))(v61, 0, 1, v59);
        outlined init with copy of URL?(v61, v62, &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v62, 1, v59) == 1)
        {
          uint64_t v64 = 0xE300000000000000;
          unint64_t v65 = 7104878;
        }
        else
        {
          uint64_t v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
          uint64_t v67 = *(void *)(v0 + 1184);
          uint64_t v68 = *(void *)(v0 + 1176);
          uint64_t v69 = *(void *)(v0 + 1168);
          uint64_t v70 = *(void *)(v0 + 1160);
          (*(void (**)(uint64_t, void, uint64_t))(v69 + 32))(v67, *(void *)(v0 + 1072), v70);
          v66(v68, v67, v70);
          unint64_t v65 = String.init<A>(reflecting:)();
          uint64_t v64 = v71;
          (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v67, v70);
        }
        unint64_t v72 = *(void *)(v0 + 1216);
        uint64_t v73 = *(void *)(v0 + 1192);
        uint64_t v74 = *(void *)(v0 + 1168);
        v75 = *(void *)(v0 + 1160);
        outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(void *)(v0 + 1080), &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
        *(void *)(v63 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v64, (uint64_t *)(v0 + 944));
        swift_bridgeObjectRelease();
        uint64_t v76 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
        v76(v73, v75);
        _os_log_impl(&dword_1A375F000, v54, v136, "Failed to find importing closure from representation %s", (uint8_t *)v63, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v131, -1, -1);
        MEMORY[0x1A624F870](v63, -1, -1);

        v76(v72, v75);
      }
      else
      {
        unint64_t v45 = *(void *)(v0 + 1216);

        uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
        v46(v57, v59);
        v46(v45, v59);
      }
      goto LABEL_22;
    }
    uint64_t v77 = (int *)v51;
    uint64_t v78 = *(void *)(v0 + 1216);
    v132 = *(void *)(v0 + 1208);
    uint64_t v137 = *(int **)(v0 + 1160);
    uint64_t v79 = *(void *)(v0 + 1152);
    uint64_t v80 = *(void *)(v0 + 1144);
    char v81 = *(void *)(v0 + 1128);
    uint64_t v118 = *(void *)(v0 + 1120);
    ResolvedTransferRepresentation.contentType.getter();
    static UTType.url.getter();
    uint64_t v121 = static UTType.== infix(_:_:)();
    v82 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
    *(void *)(v0 + 1512) = v82;
    *(void *)(v0 + 1520) = (v81 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v82(v80, v118);
    v82(v79, v118);
    v53(v132, v78, v137);
    uint64_t v83 = *(void *)(v0 + 1208);
    uint64_t v84 = *(void *)(v0 + 1168);
    if (v121) {
      break;
    }
    uint64_t v85 = *(void *)(v0 + 1152);
    uint64_t v86 = *(void *)(v0 + 1144);
    uint64_t v87 = *(void *)(v0 + 1120);
    v138 = *(int **)(v0 + 1160);
    ResolvedTransferRepresentation.contentType.getter();
    static UTType.fileURL.getter();
    v133 = static UTType.== infix(_:_:)();
    v82(v86, v87);
    v82(v85, v87);
    uint64_t v88 = *(void (**)(uint64_t, int *))(v84 + 8);
    *(void *)(v0 + 1528) = v88;
    *(void *)(v0 + 1536) = (v84 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v88(v83, v138);
    if (v133) {
      goto LABEL_37;
    }
    char v89 = Data.init(contentsOf:options:)();
    *(void *)(v0 + 1600) = v89;
    *(void *)(v0 + 1608) = v90;
    if (!v124)
    {
      uint64_t v111 = MEMORY[0x1E4F248B8];
      *(void *)(v0 + 240) = MEMORY[0x1E4F277C0];
      *(void *)(v0 + 248) = v111;
      *(void *)(v0 + 216) = v89;
      *(void *)(v0 + 224) = v90;
      outlined copy of Data._Representation(v89, v90);
      uint64_t v139 = (int *)((char *)v77 + *v77);
      unint64_t v112 = (void *)swift_task_alloc();
      *(void *)(v0 + 1616) = v112;
      *unint64_t v112 = v0;
      v112[1] = GroupSessionJournal.Attachment.load<A>(_:);
      return ((uint64_t (*)(uint64_t, uint64_t))v139)(v0 + 176, v0 + 216);
    }
    $defer #1 <A>() in GroupSessionJournal.Attachment.load<A>(_:)(*(void *)(v0 + 1008), *(void *)(v0 + 1360));
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v77);
    uint64_t v91 = v124;
    unint64_t v92 = v124;
    v93 = Logger.logObject.getter();
    os_log_type_t v94 = static os_log_type_t.error.getter();
    BOOL v95 = os_log_type_enabled(v93, v94);
    uint64_t v96 = *(void *)(v0 + 1216);
    uint64_t v97 = *(int **)(v0 + 1160);
    if (v95)
    {
      uint64_t v98 = *(void *)(v0 + 992);
      v99 = swift_slowAlloc();
      uint64_t v100 = swift_slowAlloc();
      v140[0] = v100;
      *(_DWORD *)v99 = 136315394;
      *(void *)(v0 + 936) = v98;
      uint64_t v101 = swift_getMetatypeMetadata();
      uint64_t v102 = >> prefix<A>(_:)(v0 + 936, v101);
      *(void *)(v99 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v103, v140);
      swift_bridgeObjectRelease();
      *(_WORD *)(v99 + 12) = 2080;
      *(void *)(v0 + 920) = v124;
      uint64_t v104 = v124;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v105 = String.init<A>(reflecting:)();
      *(void *)(v99 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v105, v106, v140);
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A375F000, v93, v94, "Failed load %s, error: %s", (uint8_t *)v99, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v100, -1, -1);
      MEMORY[0x1A624F870](v99, -1, -1);
    }
    else
    {
    }
    v88(v96, v97);
    uint64_t v124 = 0;
LABEL_22:
    uint64_t v35 = *(void *)(v0 + 1480) + 1;
    if (v35 == *(void *)(v0 + 1456)) {
      goto LABEL_16;
    }
  }
  uint64_t v88 = *(void (**)(uint64_t, int *))(v84 + 8);
  v88(*(void *)(v0 + 1208), *(int **)(v0 + 1160));
LABEL_37:
  *(void *)(v0 + 1544) = v88;
  ResolvedTransferRepresentation.contentType.getter();
  v107 = (void *)swift_task_alloc();
  *(void *)(v0 + 1552) = v107;
  uint64_t v108 = _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
  *v107 = v0;
  v107[1] = GroupSessionJournal.Attachment.load<A>(_:);
  uint64_t v109 = *(void *)(v0 + 1344);
  uint64_t v110 = *(void *)(v0 + 1136);
  return MEMORY[0x1F40DFA18](v110, v109, v108);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1624) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v3 = GroupSessionJournal.Attachment.load<A>(_:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v2 + 216);
    unint64_t v3 = GroupSessionJournal.Attachment.load<A>(_:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t MetatypeMetadata;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned char *v40;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  void (*v44)(uint64_t, unint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, int *);
  NSObject *v51;
  os_log_type_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, int *);
  uint64_t v86;
  unint64_t v87;
  id v88;
  id v89;
  NSObject *v90;
  os_log_type_t v91;
  BOOL v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  id v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void (*v120)(uint64_t, uint64_t);
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  os_log_type_t v127;
  int *v128;
  int *v129;
  int *v130;
  uint64_t v131[3];
  uint64_t v132;
  uint64_t v133;

  v132 = v0;
  uint64_t v1 = v0 + 176;
  outlined init with copy of AudioSessionAssertionManager(v0 + 176, v0 + 256);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transferable);
  if (swift_dynamicCast())
  {
    uint64_t v2 = *(void *)(v0 + 1608);
    unint64_t v3 = *(void *)(v0 + 1600);
    unint64_t v120 = *(void (**)(uint64_t, uint64_t))(v0 + 1528);
    uint64_t v115 = *(void *)(v0 + 1496);
    uint64_t v125 = *(void *)(v0 + 1400);
    uint64_t v4 = *(void *)(v0 + 1360);
    uint64_t v5 = *(void *)(v0 + 1352);
    uint64_t v118 = *(void *)(v0 + 1344);
    uint64_t v111 = *(void *)(v0 + 1160);
    uint64_t v113 = *(void *)(v0 + 1216);
    uint64_t v6 = *(void *)(v0 + 1104);
    uint64_t v110 = *(void *)(v0 + 1008);
    uint64_t v7 = *(void *)(v0 + 992);
    uint64_t v8 = *(void *)(v0 + 984);
    uint64_t v9 = *(void *)(v7 - 8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v7);
    outlined consume of Data._Representation(v3, v2);
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v8, v6, v7);
    $defer #1 <A>() in GroupSessionJournal.Attachment.load<A>(_:)(v110, v4);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v115);
    v120(v113, v111);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v118);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v125, &demangling cache variable for type metadata for URL?);
    (*(void (**)(void, void))(*(void *)(v0 + 1320) + 8))(*(void *)(v0 + 1336), *(void *)(v0 + 1264));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
LABEL_11:
    return v10();
  }
  uint64_t v11 = *(void *)(v0 + 1104);
  uint64_t v12 = *(void *)(v0 + 1096);
  uint64_t v13 = *(void *)(v0 + 1088);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(v0 + 992) - 8) + 56))(v11, 1, 1);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  outlined init with copy of AudioSessionAssertionManager(v0 + 176, v0 + 296);
  uint64_t v14 = Logger.logObject.getter();
  uint64_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v121 = (uint64_t *)(v0 + 912);
    uint64_t v16 = swift_slowAlloc();
    uint64_t v126 = swift_slowAlloc();
    *(void *)(v0 + 912) = v126;
    *(_DWORD *)uint64_t v16 = 136315394;
    outlined init with copy of AudioSessionAssertionManager(v0 + 296, v0 + 376);
    outlined init with copy of URL?(v0 + 376, v0 + 416, &demangling cache variable for type metadata for Transferable?);
    if (*(void *)(v0 + 440))
    {
      outlined init with take of TypedPayloadDecoding((long long *)(v0 + 416), v0 + 496);
      outlined init with copy of AudioSessionAssertionManager(v0 + 496, v0 + 536);
      uint64_t v17 = String.init<A>(reflecting:)();
      uint64_t v19 = v18;
      uint64_t v1 = v0 + 176;
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 496);
    }
    else
    {
      uint64_t v19 = 0xE300000000000000;
      uint64_t v17 = 7104878;
    }
    uint64_t v119 = *(void *)(v0 + 1608);
    v117 = *(void *)(v0 + 1600);
    uint64_t v24 = *(void *)(v0 + 992);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + 376, &demangling cache variable for type metadata for Transferable?);
    *(void *)(v16 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, v121);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 296);
    *(_WORD *)(v16 + 12) = 2080;
    *(void *)(v0 + 896) = v24;
    MetatypeMetadata = swift_getMetatypeMetadata();
    uint64_t v26 = >> prefix<A>(_:)(v0 + 896, MetatypeMetadata);
    *(void *)(v16 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v121);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v14, v15, "Failed to convert %s to %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v126, -1, -1);
    MEMORY[0x1A624F870](v16, -1, -1);

    uint64_t v22 = v117;
    uint64_t v23 = v119;
  }
  else
  {
    os_log_type_t v20 = *(void *)(v0 + 1608);
    BOOL v21 = *(void *)(v0 + 1600);

    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 296);
    uint64_t v22 = v21;
    uint64_t v23 = v20;
  }
  outlined consume of Data._Representation(v22, v23);
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v0 + 1528);
  uint64_t v29 = *(void *)(v0 + 1496);
  unint64_t v30 = *(void *)(v0 + 1216);
  uint64_t v31 = *(void *)(v0 + 1160);
  $defer #1 <A>() in GroupSessionJournal.Attachment.load<A>(_:)(*(void *)(v0 + 1008), *(void *)(v0 + 1360));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v29);
  v28(v30, v31);
  uint64_t v32 = *(void *)(v0 + 1480) + 1;
  if (v32 == *(void *)(v0 + 1456))
  {
LABEL_10:
    swift_release();
    uint64_t v33 = *(void *)(v0 + 1400);
    uint64_t v34 = *(void *)(v0 + 1360);
    uint64_t v35 = *(void *)(v0 + 1352);
    uint64_t v36 = *(void *)(v0 + 1344);
    BOOL v37 = *(void *)(v0 + 1336);
    uint64_t v38 = *(void *)(v0 + 1320);
    uint64_t v39 = *(void *)(v0 + 1264);
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *uint64_t v40 = 0;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v33, &demangling cache variable for type metadata for URL?);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_11;
  }
  uint64_t v116 = *(void **)(v0 + 1624);
  while (1)
  {
    *(void *)(v0 + 1480) = v32;
    uint64_t v44 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1472);
    unint64_t v45 = *(void *)(v0 + 1216);
    uint64_t v46 = *(void *)(v0 + 1160);
    uint64_t v47 = *(void *)(v0 + 1440)
        + ((*(unsigned __int8 *)(v0 + 1632) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1632))
        + *(void *)(v0 + 1464) * v32;
    *(void *)(v0 + 1488) = (*(void *)(v0 + 1168) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v44(v45, v47, v46);
    uint64_t v48 = ResolvedTransferRepresentation.importing.getter();
    *(void *)(v0 + 1496) = v48;
    *(void *)(v0 + 1504) = v49;
    uint64_t v50 = *(void (**)(uint64_t, uint64_t, int *))(v0 + 1472);
    if (!v48)
    {
      v50(*(void *)(v0 + 1192), *(void *)(v0 + 1216), *(int **)(v0 + 1160));
      unint64_t v51 = Logger.logObject.getter();
      uint64_t v52 = static os_log_type_t.error.getter();
      uint64_t v53 = os_log_type_enabled(v51, v52);
      unint64_t v54 = *(void *)(v0 + 1192);
      unint64_t v55 = *(void *)(v0 + 1168);
      uint64_t v56 = *(void *)(v0 + 1160);
      if (v53)
      {
        uint64_t v127 = v52;
        uint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
        uint64_t v58 = *(void *)(v0 + 1080);
        uint64_t v59 = *(void *)(v0 + 1072);
        uint64_t v60 = swift_slowAlloc();
        uint64_t v122 = swift_slowAlloc();
        *(void *)(v0 + 944) = v122;
        *(_DWORD *)uint64_t v60 = 136315138;
        v57(v58, v54, v56);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v55 + 56))(v58, 0, 1, v56);
        outlined init with copy of URL?(v58, v59, &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v59, 1, v56) == 1)
        {
          os_log_type_t v61 = 0xE300000000000000;
          unint64_t v62 = 7104878;
        }
        else
        {
          uint64_t v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
          uint64_t v64 = *(void *)(v0 + 1184);
          unint64_t v65 = *(void *)(v0 + 1176);
          uint64_t v66 = *(void *)(v0 + 1168);
          uint64_t v67 = *(void *)(v0 + 1160);
          (*(void (**)(uint64_t, void, uint64_t))(v66 + 32))(v64, *(void *)(v0 + 1072), v67);
          v63(v65, v64, v67);
          unint64_t v62 = String.init<A>(reflecting:)();
          os_log_type_t v61 = v68;
          (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v67);
        }
        uint64_t v69 = *(void *)(v0 + 1216);
        uint64_t v70 = *(void *)(v0 + 1192);
        uint64_t v71 = *(void *)(v0 + 1168);
        unint64_t v72 = *(void *)(v0 + 1160);
        outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(void *)(v0 + 1080), &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
        *(void *)(v60 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v61, (uint64_t *)(v0 + 944));
        swift_bridgeObjectRelease();
        uint64_t v73 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
        v73(v70, v72);
        _os_log_impl(&dword_1A375F000, v51, v127, "Failed to find importing closure from representation %s", (uint8_t *)v60, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v122, -1, -1);
        MEMORY[0x1A624F870](v60, -1, -1);

        v73(v69, v72);
      }
      else
      {
        uint64_t v42 = *(void *)(v0 + 1216);

        uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
        v43(v54, v56);
        v43(v42, v56);
      }
      goto LABEL_16;
    }
    uint64_t v74 = (int *)v48;
    v75 = *(void *)(v0 + 1216);
    v123 = *(void *)(v0 + 1208);
    uint64_t v128 = *(int **)(v0 + 1160);
    uint64_t v76 = *(void *)(v0 + 1152);
    uint64_t v77 = *(void *)(v0 + 1144);
    uint64_t v78 = *(void *)(v0 + 1128);
    unint64_t v112 = *(void *)(v0 + 1120);
    ResolvedTransferRepresentation.contentType.getter();
    static UTType.url.getter();
    uint64_t v114 = static UTType.== infix(_:_:)();
    uint64_t v79 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
    *(void *)(v0 + 1512) = v79;
    *(void *)(v0 + 1520) = (v78 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v79(v77, v112);
    v79(v76, v112);
    v50(v123, v75, v128);
    uint64_t v80 = *(void *)(v0 + 1208);
    char v81 = *(void *)(v0 + 1168);
    if (v114) {
      break;
    }
    v82 = *(void *)(v0 + 1152);
    uint64_t v83 = *(void *)(v0 + 1144);
    uint64_t v84 = *(void *)(v0 + 1120);
    uint64_t v129 = *(int **)(v0 + 1160);
    ResolvedTransferRepresentation.contentType.getter();
    static UTType.fileURL.getter();
    uint64_t v124 = static UTType.== infix(_:_:)();
    v79(v83, v84);
    v79(v82, v84);
    uint64_t v85 = *(void (**)(uint64_t, int *))(v81 + 8);
    *(void *)(v0 + 1528) = v85;
    *(void *)(v0 + 1536) = (v81 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v85(v80, v129);
    if (v124) {
      goto LABEL_31;
    }
    uint64_t v86 = Data.init(contentsOf:options:)();
    *(void *)(v0 + 1600) = v86;
    *(void *)(v0 + 1608) = v87;
    if (!v116)
    {
      uint64_t v108 = MEMORY[0x1E4F248B8];
      *(void *)(v0 + 240) = MEMORY[0x1E4F277C0];
      *(void *)(v0 + 248) = v108;
      *(void *)(v0 + 216) = v86;
      *(void *)(v0 + 224) = v87;
      outlined copy of Data._Representation(v86, v87);
      uint64_t v130 = (int *)((char *)v74 + *v74);
      uint64_t v109 = (void *)swift_task_alloc();
      *(void *)(v0 + 1616) = v109;
      *uint64_t v109 = v0;
      v109[1] = GroupSessionJournal.Attachment.load<A>(_:);
      return ((uint64_t (*)(uint64_t, uint64_t))v130)(v0 + 176, v0 + 216);
    }
    $defer #1 <A>() in GroupSessionJournal.Attachment.load<A>(_:)(*(void *)(v0 + 1008), *(void *)(v0 + 1360));
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v74);
    uint64_t v88 = v116;
    char v89 = v116;
    v90 = Logger.logObject.getter();
    uint64_t v91 = static os_log_type_t.error.getter();
    unint64_t v92 = os_log_type_enabled(v90, v91);
    v93 = *(void *)(v0 + 1216);
    os_log_type_t v94 = *(int **)(v0 + 1160);
    if (v92)
    {
      BOOL v95 = *(void *)(v0 + 992);
      uint64_t v96 = swift_slowAlloc();
      uint64_t v97 = swift_slowAlloc();
      v131[0] = v97;
      *(_DWORD *)uint64_t v96 = 136315394;
      *(void *)(v0 + 936) = v95;
      uint64_t v98 = swift_getMetatypeMetadata();
      v99 = >> prefix<A>(_:)(v0 + 936, v98);
      *(void *)(v96 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, v131);
      swift_bridgeObjectRelease();
      *(_WORD *)(v96 + 12) = 2080;
      *(void *)(v0 + 920) = v116;
      uint64_t v101 = v116;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v102 = String.init<A>(reflecting:)();
      *(void *)(v96 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v103, v131);
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A375F000, v90, v91, "Failed load %s, error: %s", (uint8_t *)v96, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v97, -1, -1);
      MEMORY[0x1A624F870](v96, -1, -1);
    }
    else
    {
    }
    v85(v93, v94);
    uint64_t v116 = 0;
LABEL_16:
    uint64_t v32 = *(void *)(v0 + 1480) + 1;
    if (v32 == *(void *)(v0 + 1456)) {
      goto LABEL_10;
    }
  }
  uint64_t v85 = *(void (**)(uint64_t, int *))(v81 + 8);
  v85(*(void *)(v0 + 1208), *(int **)(v0 + 1160));
LABEL_31:
  *(void *)(v0 + 1544) = v85;
  ResolvedTransferRepresentation.contentType.getter();
  uint64_t v104 = (void *)swift_task_alloc();
  *(void *)(v0 + 1552) = v104;
  uint64_t v105 = _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
  *uint64_t v104 = v0;
  v104[1] = GroupSessionJournal.Attachment.load<A>(_:);
  v106 = *(void *)(v0 + 1344);
  v107 = *(void *)(v0 + 1136);
  return MEMORY[0x1F40DFA18](v107, v106, v105);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(uint64_t, uint64_t);
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t MetatypeMetadata;
  uint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  void (*v22)(uint64_t, unint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, int *);
  NSObject *v29;
  os_log_type_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, int *);
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned char *v73;
  uint64_t (*v74)(void);
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  os_log_type_t v87;
  int *v88;
  int *v89;
  int *v90;
  uint64_t v91[3];
  uint64_t v92;
  uint64_t v93;

  unint64_t v92 = v0;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(void *)(v0 + 1496));
  uint64_t v1 = *(void **)(v0 + 1576);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0 + 1544);
  unint64_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void *)(v0 + 1216);
  uint64_t v9 = *(void *)(v0 + 1160);
  if (v7)
  {
    uint64_t v10 = *(void *)(v0 + 992);
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    v91[0] = v12;
    *(_DWORD *)uint64_t v11 = 136315394;
    *(void *)(v0 + 936) = v10;
    MetatypeMetadata = swift_getMetatypeMetadata();
    uint64_t v14 = >> prefix<A>(_:)(v0 + 936, MetatypeMetadata);
    *(void *)(v11 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v91);
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    *(void *)(v0 + 920) = v1;
    uint64_t v16 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v17 = String.init<A>(reflecting:)();
    *(void *)(v11 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v91);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v5, v6, "Failed load %s, error: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v12, -1, -1);
    MEMORY[0x1A624F870](v11, -1, -1);

    v2(v8, v9);
  }
  else
  {

    v2(v8, v9);
  }
  while (1)
  {
    BOOL v21 = *(void *)(v0 + 1480) + 1;
    if (v21 == *(void *)(v0 + 1456))
    {
      swift_release();
      uint64_t v66 = *(void *)(v0 + 1400);
      uint64_t v67 = *(void *)(v0 + 1360);
      uint64_t v68 = *(void *)(v0 + 1352);
      uint64_t v69 = *(void *)(v0 + 1344);
      uint64_t v70 = *(void *)(v0 + 1336);
      uint64_t v71 = *(void *)(v0 + 1320);
      unint64_t v72 = *(void *)(v0 + 1264);
      lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
      swift_allocError();
      char *v73 = 0;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v66, &demangling cache variable for type metadata for URL?);
      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v72);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v74 = *(uint64_t (**)(void))(v0 + 8);
      return v74();
    }
    *(void *)(v0 + 1480) = v21;
    uint64_t v22 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1472);
    uint64_t v23 = *(void *)(v0 + 1216);
    uint64_t v24 = *(void *)(v0 + 1160);
    uint64_t v25 = *(void *)(v0 + 1440)
        + ((*(unsigned __int8 *)(v0 + 1632) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1632))
        + *(void *)(v0 + 1464) * v21;
    *(void *)(v0 + 1488) = (*(void *)(v0 + 1168) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v22(v23, v25, v24);
    uint64_t v26 = ResolvedTransferRepresentation.importing.getter();
    *(void *)(v0 + 1496) = v26;
    *(void *)(v0 + 1504) = v27;
    uint64_t v28 = *(void (**)(uint64_t, uint64_t, int *))(v0 + 1472);
    if (v26) {
      break;
    }
    v28(*(void *)(v0 + 1192), *(void *)(v0 + 1216), *(int **)(v0 + 1160));
    uint64_t v29 = Logger.logObject.getter();
    unint64_t v30 = static os_log_type_t.error.getter();
    uint64_t v31 = os_log_type_enabled(v29, v30);
    uint64_t v32 = *(void *)(v0 + 1192);
    uint64_t v33 = *(void *)(v0 + 1168);
    uint64_t v34 = *(void *)(v0 + 1160);
    if (v31)
    {
      uint64_t v87 = v30;
      uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
      uint64_t v36 = *(void *)(v0 + 1080);
      BOOL v37 = *(void *)(v0 + 1072);
      uint64_t v38 = swift_slowAlloc();
      uint64_t v84 = swift_slowAlloc();
      *(void *)(v0 + 944) = v84;
      *(_DWORD *)uint64_t v38 = 136315138;
      v35(v36, v32, v34);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v36, 0, 1, v34);
      outlined init with copy of URL?(v36, v37, &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v37, 1, v34) == 1)
      {
        uint64_t v39 = 0xE300000000000000;
        uint64_t v40 = 7104878;
      }
      else
      {
        uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
        uint64_t v42 = *(void *)(v0 + 1184);
        uint64_t v43 = *(void *)(v0 + 1176);
        uint64_t v44 = *(void *)(v0 + 1168);
        unint64_t v45 = *(void *)(v0 + 1160);
        (*(void (**)(uint64_t, void, uint64_t))(v44 + 32))(v42, *(void *)(v0 + 1072), v45);
        v41(v43, v42, v45);
        uint64_t v40 = String.init<A>(reflecting:)();
        uint64_t v39 = v46;
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v45);
      }
      uint64_t v47 = *(void *)(v0 + 1216);
      uint64_t v48 = *(void *)(v0 + 1192);
      unint64_t v49 = *(void *)(v0 + 1168);
      uint64_t v50 = *(void *)(v0 + 1160);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(void *)(v0 + 1080), &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      *(void *)(v38 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v39, (uint64_t *)(v0 + 944));
      swift_bridgeObjectRelease();
      unint64_t v51 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
      v51(v48, v50);
      _os_log_impl(&dword_1A375F000, v29, v87, "Failed to find importing closure from representation %s", (uint8_t *)v38, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v84, -1, -1);
      MEMORY[0x1A624F870](v38, -1, -1);

      v51(v47, v50);
    }
    else
    {
      uint64_t v19 = *(void *)(v0 + 1216);

      os_log_type_t v20 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
      v20(v32, v34);
      v20(v19, v34);
    }
  }
  uint64_t v52 = (int *)v26;
  uint64_t v53 = *(void *)(v0 + 1216);
  uint64_t v85 = *(void *)(v0 + 1208);
  uint64_t v88 = *(int **)(v0 + 1160);
  unint64_t v54 = *(void *)(v0 + 1152);
  unint64_t v55 = *(void *)(v0 + 1144);
  uint64_t v56 = *(void *)(v0 + 1128);
  v82 = *(void *)(v0 + 1120);
  ResolvedTransferRepresentation.contentType.getter();
  static UTType.url.getter();
  uint64_t v83 = static UTType.== infix(_:_:)();
  uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
  *(void *)(v0 + 1512) = v57;
  *(void *)(v0 + 1520) = (v56 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v57(v55, v82);
  v57(v54, v82);
  v28(v85, v53, v88);
  uint64_t v58 = *(void *)(v0 + 1208);
  uint64_t v59 = *(void *)(v0 + 1168);
  if (v83)
  {
    uint64_t v63 = *(void (**)(uint64_t, int *))(v59 + 8);
    v63(*(void *)(v0 + 1208), *(int **)(v0 + 1160));
  }
  else
  {
    uint64_t v60 = *(void *)(v0 + 1152);
    os_log_type_t v61 = *(void *)(v0 + 1144);
    unint64_t v62 = *(void *)(v0 + 1120);
    char v89 = *(int **)(v0 + 1160);
    ResolvedTransferRepresentation.contentType.getter();
    static UTType.fileURL.getter();
    uint64_t v86 = static UTType.== infix(_:_:)();
    v57(v61, v62);
    v57(v60, v62);
    uint64_t v63 = *(void (**)(uint64_t, int *))(v59 + 8);
    *(void *)(v0 + 1528) = v63;
    *(void *)(v0 + 1536) = (v59 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v63(v58, v89);
    if ((v86 & 1) == 0)
    {
      uint64_t v64 = Data.init(contentsOf:options:)();
      *(void *)(v0 + 1600) = v64;
      *(void *)(v0 + 1608) = v65;
      uint64_t v80 = MEMORY[0x1E4F248B8];
      *(void *)(v0 + 240) = MEMORY[0x1E4F277C0];
      *(void *)(v0 + 248) = v80;
      *(void *)(v0 + 216) = v64;
      *(void *)(v0 + 224) = v65;
      outlined copy of Data._Representation(v64, v65);
      v90 = (int *)((char *)v52 + *v52);
      char v81 = (void *)swift_task_alloc();
      *(void *)(v0 + 1616) = v81;
      *char v81 = v0;
      v81[1] = GroupSessionJournal.Attachment.load<A>(_:);
      return ((uint64_t (*)(uint64_t, uint64_t))v90)(v0 + 176, v0 + 216);
    }
  }
  *(void *)(v0 + 1544) = v63;
  ResolvedTransferRepresentation.contentType.getter();
  uint64_t v76 = (void *)swift_task_alloc();
  *(void *)(v0 + 1552) = v76;
  uint64_t v77 = _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
  char *v76 = v0;
  v76[1] = GroupSessionJournal.Attachment.load<A>(_:);
  uint64_t v78 = *(void *)(v0 + 1344);
  uint64_t v79 = *(void *)(v0 + 1136);
  return MEMORY[0x1F40DFA18](v79, v78, v77);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void (*v3)(uint64_t, uint64_t);
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t MetatypeMetadata;
  uint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  void (*v23)(uint64_t, unint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, int *);
  NSObject *v30;
  os_log_type_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, int *);
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned char *v74;
  uint64_t (*v75)(void);
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  os_log_type_t v88;
  int *v89;
  int *v90;
  int *v91;
  uint64_t v92[3];
  uint64_t v93;
  uint64_t v94;

  v93 = v0;
  uint64_t v1 = *(void *)(v0 + 1496);
  outlined consume of Data._Representation(*(void *)(v0 + 1560), *(void *)(v0 + 1568));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v1);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 616);
  uint64_t v2 = *(void **)(v0 + 1592);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0 + 1544);
  uint64_t v4 = v2;
  uint64_t v5 = v2;
  uint64_t v6 = Logger.logObject.getter();
  uint64_t v7 = static os_log_type_t.error.getter();
  uint64_t v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 1216);
  uint64_t v10 = *(void *)(v0 + 1160);
  if (v8)
  {
    uint64_t v11 = *(void *)(v0 + 992);
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    v92[0] = v13;
    *(_DWORD *)uint64_t v12 = 136315394;
    *(void *)(v0 + 936) = v11;
    MetatypeMetadata = swift_getMetatypeMetadata();
    uint64_t v15 = >> prefix<A>(_:)(v0 + 936, MetatypeMetadata);
    *(void *)(v12 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v92);
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    *(void *)(v0 + 920) = v2;
    uint64_t v17 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v18 = String.init<A>(reflecting:)();
    *(void *)(v12 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v92);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v6, v7, "Failed load %s, error: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v13, -1, -1);
    MEMORY[0x1A624F870](v12, -1, -1);

    v3(v9, v10);
  }
  else
  {

    v3(v9, v10);
  }
  while (1)
  {
    uint64_t v22 = *(void *)(v0 + 1480) + 1;
    if (v22 == *(void *)(v0 + 1456))
    {
      swift_release();
      uint64_t v67 = *(void *)(v0 + 1400);
      uint64_t v68 = *(void *)(v0 + 1360);
      uint64_t v69 = *(void *)(v0 + 1352);
      uint64_t v70 = *(void *)(v0 + 1344);
      uint64_t v71 = *(void *)(v0 + 1336);
      unint64_t v72 = *(void *)(v0 + 1320);
      uint64_t v73 = *(void *)(v0 + 1264);
      lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
      swift_allocError();
      *uint64_t v74 = 0;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v70);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v67, &demangling cache variable for type metadata for URL?);
      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v71, v73);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v75 = *(uint64_t (**)(void))(v0 + 8);
      return v75();
    }
    *(void *)(v0 + 1480) = v22;
    uint64_t v23 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1472);
    uint64_t v24 = *(void *)(v0 + 1216);
    uint64_t v25 = *(void *)(v0 + 1160);
    uint64_t v26 = *(void *)(v0 + 1440)
        + ((*(unsigned __int8 *)(v0 + 1632) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1632))
        + *(void *)(v0 + 1464) * v22;
    *(void *)(v0 + 1488) = (*(void *)(v0 + 1168) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v23(v24, v26, v25);
    uint64_t v27 = ResolvedTransferRepresentation.importing.getter();
    *(void *)(v0 + 1496) = v27;
    *(void *)(v0 + 1504) = v28;
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, int *))(v0 + 1472);
    if (v27) {
      break;
    }
    v29(*(void *)(v0 + 1192), *(void *)(v0 + 1216), *(int **)(v0 + 1160));
    unint64_t v30 = Logger.logObject.getter();
    uint64_t v31 = static os_log_type_t.error.getter();
    uint64_t v32 = os_log_type_enabled(v30, v31);
    uint64_t v33 = *(void *)(v0 + 1192);
    uint64_t v34 = *(void *)(v0 + 1168);
    uint64_t v35 = *(void *)(v0 + 1160);
    if (v32)
    {
      uint64_t v88 = v31;
      uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
      BOOL v37 = *(void *)(v0 + 1080);
      uint64_t v38 = *(void *)(v0 + 1072);
      uint64_t v39 = swift_slowAlloc();
      uint64_t v85 = swift_slowAlloc();
      *(void *)(v0 + 944) = v85;
      *(_DWORD *)uint64_t v39 = 136315138;
      v36(v37, v33, v35);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v37, 0, 1, v35);
      outlined init with copy of URL?(v37, v38, &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v38, 1, v35) == 1)
      {
        uint64_t v40 = 0xE300000000000000;
        uint64_t v41 = 7104878;
      }
      else
      {
        uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
        uint64_t v43 = *(void *)(v0 + 1184);
        uint64_t v44 = *(void *)(v0 + 1176);
        unint64_t v45 = *(void *)(v0 + 1168);
        uint64_t v46 = *(void *)(v0 + 1160);
        (*(void (**)(uint64_t, void, uint64_t))(v45 + 32))(v43, *(void *)(v0 + 1072), v46);
        v42(v44, v43, v46);
        uint64_t v41 = String.init<A>(reflecting:)();
        uint64_t v40 = v47;
        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v46);
      }
      uint64_t v48 = *(void *)(v0 + 1216);
      unint64_t v49 = *(void *)(v0 + 1192);
      uint64_t v50 = *(void *)(v0 + 1168);
      unint64_t v51 = *(void *)(v0 + 1160);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(void *)(v0 + 1080), &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      *(void *)(v39 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v40, (uint64_t *)(v0 + 944));
      swift_bridgeObjectRelease();
      uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
      v52(v49, v51);
      _os_log_impl(&dword_1A375F000, v30, v88, "Failed to find importing closure from representation %s", (uint8_t *)v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v85, -1, -1);
      MEMORY[0x1A624F870](v39, -1, -1);

      v52(v48, v51);
    }
    else
    {
      os_log_type_t v20 = *(void *)(v0 + 1216);

      BOOL v21 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
      v21(v33, v35);
      v21(v20, v35);
    }
  }
  uint64_t v53 = (int *)v27;
  unint64_t v54 = *(void *)(v0 + 1216);
  uint64_t v86 = *(void *)(v0 + 1208);
  char v89 = *(int **)(v0 + 1160);
  unint64_t v55 = *(void *)(v0 + 1152);
  uint64_t v56 = *(void *)(v0 + 1144);
  uint64_t v57 = *(void *)(v0 + 1128);
  uint64_t v83 = *(void *)(v0 + 1120);
  ResolvedTransferRepresentation.contentType.getter();
  static UTType.url.getter();
  uint64_t v84 = static UTType.== infix(_:_:)();
  uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
  *(void *)(v0 + 1512) = v58;
  *(void *)(v0 + 1520) = (v57 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v58(v56, v83);
  v58(v55, v83);
  v29(v86, v54, v89);
  uint64_t v59 = *(void *)(v0 + 1208);
  uint64_t v60 = *(void *)(v0 + 1168);
  if (v84)
  {
    uint64_t v64 = *(void (**)(uint64_t, int *))(v60 + 8);
    v64(*(void *)(v0 + 1208), *(int **)(v0 + 1160));
  }
  else
  {
    os_log_type_t v61 = *(void *)(v0 + 1152);
    unint64_t v62 = *(void *)(v0 + 1144);
    uint64_t v63 = *(void *)(v0 + 1120);
    v90 = *(int **)(v0 + 1160);
    ResolvedTransferRepresentation.contentType.getter();
    static UTType.fileURL.getter();
    uint64_t v87 = static UTType.== infix(_:_:)();
    v58(v62, v63);
    v58(v61, v63);
    uint64_t v64 = *(void (**)(uint64_t, int *))(v60 + 8);
    *(void *)(v0 + 1528) = v64;
    *(void *)(v0 + 1536) = (v60 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v64(v59, v90);
    if ((v87 & 1) == 0)
    {
      unint64_t v65 = Data.init(contentsOf:options:)();
      *(void *)(v0 + 1600) = v65;
      *(void *)(v0 + 1608) = v66;
      char v81 = MEMORY[0x1E4F248B8];
      *(void *)(v0 + 240) = MEMORY[0x1E4F277C0];
      *(void *)(v0 + 248) = v81;
      *(void *)(v0 + 216) = v65;
      *(void *)(v0 + 224) = v66;
      outlined copy of Data._Representation(v65, v66);
      uint64_t v91 = (int *)((char *)v53 + *v53);
      v82 = (void *)swift_task_alloc();
      *(void *)(v0 + 1616) = v82;
      *v82 = v0;
      v82[1] = GroupSessionJournal.Attachment.load<A>(_:);
      return ((uint64_t (*)(uint64_t, uint64_t))v91)(v0 + 176, v0 + 216);
    }
  }
  *(void *)(v0 + 1544) = v64;
  ResolvedTransferRepresentation.contentType.getter();
  uint64_t v77 = (void *)swift_task_alloc();
  *(void *)(v0 + 1552) = v77;
  uint64_t v78 = _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
  *uint64_t v77 = v0;
  v77[1] = GroupSessionJournal.Attachment.load<A>(_:);
  uint64_t v79 = *(void *)(v0 + 1344);
  uint64_t v80 = *(void *)(v0 + 1136);
  return MEMORY[0x1F40DFA18](v80, v79, v78);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void (*v5)(uint64_t, uint64_t);
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t MetatypeMetadata;
  uint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(uint64_t, unint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, int *);
  NSObject *v32;
  os_log_type_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, int *);
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned char *v76;
  uint64_t (*v77)(void);
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  os_log_type_t v90;
  int *v91;
  int *v92;
  int *v93;
  uint64_t v94[3];
  uint64_t v95;
  uint64_t v96;

  BOOL v95 = v0;
  uint64_t v1 = *(void *)(v0 + 1496);
  uint64_t v2 = *(void *)(v0 + 1360);
  unint64_t v3 = *(void *)(v0 + 1008);
  outlined consume of Data._Representation(*(void *)(v0 + 1600), *(void *)(v0 + 1608));
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 216);
  $defer #1 <A>() in GroupSessionJournal.Attachment.load<A>(_:)(v3, v2);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v1);
  uint64_t v4 = *(void **)(v0 + 1624);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 1528);
  uint64_t v6 = v4;
  uint64_t v7 = v4;
  uint64_t v8 = Logger.logObject.getter();
  uint64_t v9 = static os_log_type_t.error.getter();
  uint64_t v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = *(void *)(v0 + 1216);
  uint64_t v12 = *(void *)(v0 + 1160);
  if (v10)
  {
    uint64_t v13 = *(void *)(v0 + 992);
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    v94[0] = v15;
    *(_DWORD *)uint64_t v14 = 136315394;
    *(void *)(v0 + 936) = v13;
    MetatypeMetadata = swift_getMetatypeMetadata();
    uint64_t v17 = >> prefix<A>(_:)(v0 + 936, MetatypeMetadata);
    *(void *)(v14 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v94);
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    *(void *)(v0 + 920) = v4;
    uint64_t v19 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    os_log_type_t v20 = String.init<A>(reflecting:)();
    *(void *)(v14 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v94);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v8, v9, "Failed load %s, error: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v15, -1, -1);
    MEMORY[0x1A624F870](v14, -1, -1);

    v5(v11, v12);
  }
  else
  {

    v5(v11, v12);
  }
  while (1)
  {
    uint64_t v24 = *(void *)(v0 + 1480) + 1;
    if (v24 == *(void *)(v0 + 1456))
    {
      swift_release();
      uint64_t v69 = *(void *)(v0 + 1400);
      uint64_t v70 = *(void *)(v0 + 1360);
      uint64_t v71 = *(void *)(v0 + 1352);
      unint64_t v72 = *(void *)(v0 + 1344);
      uint64_t v73 = *(void *)(v0 + 1336);
      uint64_t v74 = *(void *)(v0 + 1320);
      v75 = *(void *)(v0 + 1264);
      lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
      swift_allocError();
      char *v76 = 0;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v72);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v69, &demangling cache variable for type metadata for URL?);
      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v77 = *(uint64_t (**)(void))(v0 + 8);
      return v77();
    }
    *(void *)(v0 + 1480) = v24;
    uint64_t v25 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1472);
    uint64_t v26 = *(void *)(v0 + 1216);
    uint64_t v27 = *(void *)(v0 + 1160);
    uint64_t v28 = *(void *)(v0 + 1440)
        + ((*(unsigned __int8 *)(v0 + 1632) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1632))
        + *(void *)(v0 + 1464) * v24;
    *(void *)(v0 + 1488) = (*(void *)(v0 + 1168) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v25(v26, v28, v27);
    uint64_t v29 = ResolvedTransferRepresentation.importing.getter();
    *(void *)(v0 + 1496) = v29;
    *(void *)(v0 + 1504) = v30;
    uint64_t v31 = *(void (**)(uint64_t, uint64_t, int *))(v0 + 1472);
    if (v29) {
      break;
    }
    v31(*(void *)(v0 + 1192), *(void *)(v0 + 1216), *(int **)(v0 + 1160));
    uint64_t v32 = Logger.logObject.getter();
    uint64_t v33 = static os_log_type_t.error.getter();
    uint64_t v34 = os_log_type_enabled(v32, v33);
    uint64_t v35 = *(void *)(v0 + 1192);
    uint64_t v36 = *(void *)(v0 + 1168);
    BOOL v37 = *(void *)(v0 + 1160);
    if (v34)
    {
      v90 = v33;
      uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
      uint64_t v39 = *(void *)(v0 + 1080);
      uint64_t v40 = *(void *)(v0 + 1072);
      uint64_t v41 = swift_slowAlloc();
      uint64_t v87 = swift_slowAlloc();
      *(void *)(v0 + 944) = v87;
      *(_DWORD *)uint64_t v41 = 136315138;
      v38(v39, v35, v37);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v39, 0, 1, v37);
      outlined init with copy of URL?(v39, v40, &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v40, 1, v37) == 1)
      {
        uint64_t v42 = 0xE300000000000000;
        uint64_t v43 = 7104878;
      }
      else
      {
        uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1472);
        unint64_t v45 = *(void *)(v0 + 1184);
        uint64_t v46 = *(void *)(v0 + 1176);
        uint64_t v47 = *(void *)(v0 + 1168);
        uint64_t v48 = *(void *)(v0 + 1160);
        (*(void (**)(uint64_t, void, uint64_t))(v47 + 32))(v45, *(void *)(v0 + 1072), v48);
        v44(v46, v45, v48);
        uint64_t v43 = String.init<A>(reflecting:)();
        uint64_t v42 = v49;
        (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v48);
      }
      uint64_t v50 = *(void *)(v0 + 1216);
      unint64_t v51 = *(void *)(v0 + 1192);
      uint64_t v52 = *(void *)(v0 + 1168);
      uint64_t v53 = *(void *)(v0 + 1160);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(void *)(v0 + 1080), &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      *(void *)(v41 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v42, (uint64_t *)(v0 + 944));
      swift_bridgeObjectRelease();
      unint64_t v54 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
      v54(v51, v53);
      _os_log_impl(&dword_1A375F000, v32, v90, "Failed to find importing closure from representation %s", (uint8_t *)v41, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v87, -1, -1);
      MEMORY[0x1A624F870](v41, -1, -1);

      v54(v50, v53);
    }
    else
    {
      uint64_t v22 = *(void *)(v0 + 1216);

      uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
      v23(v35, v37);
      v23(v22, v37);
    }
  }
  unint64_t v55 = (int *)v29;
  uint64_t v56 = *(void *)(v0 + 1216);
  uint64_t v88 = *(void *)(v0 + 1208);
  uint64_t v91 = *(int **)(v0 + 1160);
  uint64_t v57 = *(void *)(v0 + 1152);
  uint64_t v58 = *(void *)(v0 + 1144);
  uint64_t v59 = *(void *)(v0 + 1128);
  uint64_t v85 = *(void *)(v0 + 1120);
  ResolvedTransferRepresentation.contentType.getter();
  static UTType.url.getter();
  uint64_t v86 = static UTType.== infix(_:_:)();
  uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
  *(void *)(v0 + 1512) = v60;
  *(void *)(v0 + 1520) = (v59 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v60(v58, v85);
  v60(v57, v85);
  v31(v88, v56, v91);
  os_log_type_t v61 = *(void *)(v0 + 1208);
  unint64_t v62 = *(void *)(v0 + 1168);
  if (v86)
  {
    uint64_t v66 = *(void (**)(uint64_t, int *))(v62 + 8);
    v66(*(void *)(v0 + 1208), *(int **)(v0 + 1160));
  }
  else
  {
    uint64_t v63 = *(void *)(v0 + 1152);
    uint64_t v64 = *(void *)(v0 + 1144);
    unint64_t v65 = *(void *)(v0 + 1120);
    unint64_t v92 = *(int **)(v0 + 1160);
    ResolvedTransferRepresentation.contentType.getter();
    static UTType.fileURL.getter();
    char v89 = static UTType.== infix(_:_:)();
    v60(v64, v65);
    v60(v63, v65);
    uint64_t v66 = *(void (**)(uint64_t, int *))(v62 + 8);
    *(void *)(v0 + 1528) = v66;
    *(void *)(v0 + 1536) = (v62 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v66(v61, v92);
    if ((v89 & 1) == 0)
    {
      uint64_t v67 = Data.init(contentsOf:options:)();
      *(void *)(v0 + 1600) = v67;
      *(void *)(v0 + 1608) = v68;
      uint64_t v83 = MEMORY[0x1E4F248B8];
      *(void *)(v0 + 240) = MEMORY[0x1E4F277C0];
      *(void *)(v0 + 248) = v83;
      *(void *)(v0 + 216) = v67;
      *(void *)(v0 + 224) = v68;
      outlined copy of Data._Representation(v67, v68);
      v93 = (int *)((char *)v55 + *v55);
      uint64_t v84 = (void *)swift_task_alloc();
      *(void *)(v0 + 1616) = v84;
      *uint64_t v84 = v0;
      v84[1] = GroupSessionJournal.Attachment.load<A>(_:);
      return ((uint64_t (*)(uint64_t, uint64_t))v93)(v0 + 176, v0 + 216);
    }
  }
  *(void *)(v0 + 1544) = v66;
  ResolvedTransferRepresentation.contentType.getter();
  uint64_t v79 = (void *)swift_task_alloc();
  *(void *)(v0 + 1552) = v79;
  uint64_t v80 = _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
  *uint64_t v79 = v0;
  v79[1] = GroupSessionJournal.Attachment.load<A>(_:);
  char v81 = *(void *)(v0 + 1344);
  v82 = *(void *)(v0 + 1136);
  return MEMORY[0x1F40DFA18](v82, v81, v80);
}

uint64_t GroupSessionJournal.Attachment.load<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  uint64_t v5 = (void *)*v3;
  v5[195] = a1;
  v5[196] = a2;
  v5[197] = v2;
  swift_task_dealloc();
  ((void (*)(void, void))v4[189])(v4[142], v4[140]);
  if (v2) {
    uint64_t v6 = GroupSessionJournal.Attachment.load<A>(_:);
  }
  else {
    uint64_t v6 = GroupSessionJournal.Attachment.load<A>(_:);
  }
  return MEMORY[0x1F4188298](v6, 0, 0);
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v28 = type metadata accessor for ResolvedTransferRepresentation();
  uint64_t v7 = *(void *)(v28 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v28);
  uint64_t v27 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v20 - v11;
  uint64_t v13 = MEMORY[0x1E4FBC860];
  uint64_t v29 = MEMORY[0x1E4FBC860];
  uint64_t v26 = *(void *)(a3 + 16);
  if (v26)
  {
    unint64_t v14 = 0;
    uint64_t v21 = a3;
    uint64_t v22 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v24 = (void (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t v25 = v7 + 16;
    v20[0] = a1;
    v20[1] = a2;
    while (v14 < *(void *)(a3 + 16))
    {
      unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v13 = *(void *)(v7 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, a3 + v15 + v13 * v14, v28);
      char v16 = a1(v12);
      if (v3)
      {
        (*v22)(v12, v28);
        swift_bridgeObjectRelease();
        swift_release();
        return v13;
      }
      if (v16)
      {
        uint64_t v23 = *v24;
        v23(v27, v12, v28);
        uint64_t v17 = v29;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1);
          uint64_t v17 = v29;
        }
        unint64_t v19 = *(void *)(v17 + 16);
        unint64_t v18 = *(void *)(v17 + 24);
        if (v19 >= v18 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
          uint64_t v17 = v29;
        }
        *(void *)(v17 + 16) = v19 + 1;
        uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v23)(v17 + v15 + v19 * v13, v27, v28);
        uint64_t v29 = v17;
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))*v22)(v12, v28);
      }
      if (v26 == ++v14)
      {
        uint64_t v13 = v29;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

void $defer #1 <A>() in GroupSessionJournal.Attachment.load<A>(_:)(uint64_t a1, uint64_t a2)
{
  v35[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for GroupSessionJournal.Attachment(0);
  outlined init with copy of GroupSessionJournal.Attachment.AttachmentSource(a1 + *(int *)(v11 + 24), (uint64_t)v10, type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
  LODWORD(a1) = swift_getEnumCaseMultiPayload();
  outlined destroy of GroupSessionJournal.Attachment((uint64_t)v10, type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
  if (a1 == 2)
  {
    id v12 = objc_msgSend(self, sel_defaultManager);
    URL._bridgeToObjectiveC()(v13);
    unint64_t v15 = v14;
    v35[0] = 0;
    unsigned int v16 = objc_msgSend(v12, sel_removeItemAtURL_error_, v14, v35);

    id v17 = v35[0];
    if (v16)
    {
      id v18 = v17;
    }
    else
    {
      v33[1] = v35[0];
      id v19 = v35[0];
      os_log_type_t v20 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      if (one-time initialization token for ledger != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      __swift_project_value_buffer(v21, (uint64_t)static Log.ledger);
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
      id v22 = v20;
      id v23 = v20;
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = swift_slowAlloc();
        uint64_t v27 = (void *)swift_slowAlloc();
        v35[0] = v27;
        *(_DWORD *)uint64_t v26 = 136315394;
        _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
        uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, (uint64_t *)v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        *(_WORD *)(v26 + 12) = 2080;
        uint64_t v34 = (uint64_t)v20;
        id v30 = v20;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v31 = String.init<A>(reflecting:)();
        uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, (uint64_t *)v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1A375F000, v24, v25, "Failed to remove file: %s, reason: %s", (uint8_t *)v26, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v27, -1, -1);
        MEMORY[0x1A624F870](v26, -1, -1);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      }
    }
  }
}

uint64_t GroupSessionJournal.Attachment.loadMetadata<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[4] = a4;
  v5[5] = v4;
  v5[2] = a1;
  v5[3] = a3;
  v5[6] = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
  v5[7] = swift_task_alloc();
  return MEMORY[0x1F4188298](GroupSessionJournal.Attachment.loadMetadata<A>(of:), 0, 0);
}

uint64_t GroupSessionJournal.Attachment.loadMetadata<A>(of:)()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = type metadata accessor for GroupSessionJournal.Attachment(0);
  outlined init with copy of GroupSessionJournal.Attachment.AttachmentSource(v2 + *(int *)(v3 + 24), v1, type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v6 = *(void *)(v0 + 56);
    uint64_t v7 = (uint64_t *)(v6
                   + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?))
                            + 48));
    uint64_t v8 = *v7;
    unint64_t v9 = v7[1];
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v6, v10);
    if (v9 >> 60 != 15)
    {
      outlined copy of Data._Representation(v8, v9);
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      outlined consume of Data?(v8, v9);
      swift_release();
      outlined consume of Data._Representation(v8, v9);
      goto LABEL_15;
    }
    if (one-time initialization token for ledger != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Log.ledger);
    id v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      unint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v14 = 0;
      _os_log_impl(&dword_1A375F000, v12, v13, "Failed to find the metadata", v14, 2u);
      MEMORY[0x1A624F870](v14, -1, -1);
    }

    char v5 = 2;
LABEL_10:
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *unint64_t v15 = v5;
    swift_willThrow();
LABEL_15:
    swift_task_dealloc();
    id v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
  if (EnumCaseMultiPayload == 1)
  {
    outlined consume of Data._Representation(**(void **)(v0 + 56), *(void *)(*(void *)(v0 + 56) + 8));
    char v5 = 0;
    goto LABEL_10;
  }
  unsigned int v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v16;
  *unsigned int v16 = v0;
  v16[1] = GroupSessionJournal.Attachment.loadMetadata<A>(of:);
  uint64_t v17 = *(void *)(v0 + 40);
  v16[2] = v17;
  v16[3] = v17;
  return MEMORY[0x1F4188298](GroupSessionJournal.Attachment.loadMetadataFromAttachment(attachmentID:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  outlined copy of Data._Representation(v0[11], v0[10]);
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  outlined consume of Data?(v1, v2);
  swift_release();
  outlined consume of Data._Representation(v1, v2);
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t GroupSessionJournal.Attachment.loadMetadata<A>(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 72) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = GroupSessionJournal.Attachment.loadMetadata<A>(of:);
  }
  else
  {
    *(void *)(v6 + 80) = a2;
    *(void *)(v6 + 88) = a1;
    uint64_t v7 = GroupSessionJournal.Attachment.loadMetadata<A>(of:);
  }
  return MEMORY[0x1F4188298](v7, 0, 0);
}

uint64_t GroupSessionJournal.Attachment.loadMetadataFromAttachment(attachmentID:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x1F4188298](GroupSessionJournal.Attachment.loadMetadataFromAttachment(attachmentID:), 0, 0);
}

uint64_t GroupSessionJournal.Attachment.loadMetadataFromAttachment(attachmentID:)()
{
  type metadata accessor for GroupSessionJournal.Attachment(0);
  uint64_t Strong = swift_weakLoadStrong();
  v0[4] = Strong;
  if (Strong)
  {
    v0[5] = *(void *)(Strong + 16);
    uint64_t v2 = *(void *)(Strong + 24);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 56) + **(int **)(v2 + 56));
    swift_unknownObjectRetain();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[6] = v4;
    void *v4 = v0;
    v4[1] = GroupSessionJournal.Attachment.loadMetadataFromAttachment(attachmentID:);
    uint64_t v5 = v0[2];
    return v9(v5, ObjectType, v2);
  }
  else
  {
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *uint64_t v7 = 2;
    swift_willThrow();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

{
  void *v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_unknownObjectRelease();
  swift_release();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  return v1(v2, v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_unknownObjectRelease();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t GroupSessionJournal.Attachment.loadMetadataFromAttachment(attachmentID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 56) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = GroupSessionJournal.Attachment.loadMetadataFromAttachment(attachmentID:);
  }
  else
  {
    *(void *)(v6 + 64) = a2;
    *(void *)(v6 + 72) = a1;
    uint64_t v7 = GroupSessionJournal.Attachment.loadMetadataFromAttachment(attachmentID:);
  }
  return MEMORY[0x1F4188298](v7, 0, 0);
}

uint64_t GroupSessionJournal.Attachment.loadDataFromAttachment(attachmentID:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x1F4188298](GroupSessionJournal.Attachment.loadDataFromAttachment(attachmentID:), 0, 0);
}

uint64_t GroupSessionJournal.Attachment.loadDataFromAttachment(attachmentID:)()
{
  type metadata accessor for GroupSessionJournal.Attachment(0);
  uint64_t Strong = swift_weakLoadStrong();
  v0[5] = Strong;
  if (Strong)
  {
    v0[6] = *(void *)(Strong + 16);
    uint64_t v2 = *(void *)(Strong + 24);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 48) + **(int **)(v2 + 48));
    swift_unknownObjectRetain();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[7] = v4;
    void *v4 = v0;
    v4[1] = GroupSessionJournal.Attachment.loadDataFromAttachment(attachmentID:);
    uint64_t v5 = v0[2];
    uint64_t v6 = v0[3];
    return v10(v5, v6, ObjectType, v2);
  }
  else
  {
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *uint64_t v8 = 2;
    swift_willThrow();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = GroupSessionJournal.Attachment.loadDataFromAttachment(attachmentID:);
  }
  else {
    uint64_t v2 = GroupSessionJournal.Attachment.loadDataFromAttachment(attachmentID:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_unknownObjectRelease();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_unknownObjectRelease();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t GroupSessionJournal.Attachments.base.getter()
{
  return swift_retain();
}

uint64_t GroupSessionJournal.Attachments.makeAsyncIterator()@<X0>(uint64_t *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PublisherElements<AnyPublisher<[GroupSessionJournal.Attachment], Never>>.Iterator.Inner);
  uint64_t v2 = swift_allocObject();
  swift_retain();
  uint64_t v3 = (_DWORD *)swift_slowAlloc();
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)(v2 + 16) = v3;
  *(void *)(v2 + 24) = v4;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = static Subscribers.Demand.none.getter();
  _DWORD *v3 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[GroupSessionJournal.Attachment], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<[GroupSessionJournal.Attachment], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[GroupSessionJournal.Attachment], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type _PublisherElements<AnyPublisher<[GroupSessionJournal.Attachment], Never>>.Iterator.Inner and conformance _PublisherElements<A>.Iterator.Inner, &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<[GroupSessionJournal.Attachment], Never>>.Iterator.Inner);
  Publisher.subscribe<A>(_:)();
  uint64_t result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t GroupSessionJournal.Attachments.Iterator.init(baseIterator:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t GroupSessionJournal.Attachments.Iterator.baseIterator.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*GroupSessionJournal.Attachments.Iterator.baseIterator.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t GroupSessionJournal.Attachments.Iterator.next()()
{
  *(void *)(v1 + 24) = v0;
  return MEMORY[0x1F4188298](GroupSessionJournal.Attachments.Iterator.next(), 0, 0);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = (uint64_t *)v0[3];
  uint64_t v2 = *v1;
  v0[4] = *v1;
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v1;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GroupSessionJournal.Attachment]?);
  void *v4 = v0;
  v4[1] = GroupSessionJournal.Attachments.Iterator.next();
  return MEMORY[0x1F4188148](v0 + 2, &async function pointer to partial apply for specialized closure #2 in _PublisherElements.Iterator.next(), v3, partial apply for specialized closure #1 in _PublisherElements.Iterator.next(), v2, 0, 0, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  uint64_t v1 = *v0;
  uint64_t v5 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 16);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(v2);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance GroupSessionJournal.Attachments.Iterator(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return MEMORY[0x1F4188298](protocol witness for AsyncIteratorProtocol.next() in conformance GroupSessionJournal.Attachments.Iterator, 0, 0);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance GroupSessionJournal.Attachments.Iterator()
{
  uint64_t v1 = (uint64_t *)v0[4];
  uint64_t v2 = *v1;
  v0[5] = *v1;
  uint64_t v3 = swift_task_alloc();
  v0[6] = v3;
  *(void *)(v3 + 16) = v1;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[7] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GroupSessionJournal.Attachment]?);
  void *v4 = v0;
  v4[1] = protocol witness for AsyncIteratorProtocol.next() in conformance GroupSessionJournal.Attachments.Iterator;
  return MEMORY[0x1F4188148](v0 + 2, &closure #2 in _PublisherElements.Iterator.next()specialized partial apply, v3, closure #1 in _PublisherElements.Iterator.next()specialized partial apply, v2, 0, 0, v5);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  *(void *)(v1 + 64) = *(void *)(v1 + 16);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](protocol witness for AsyncIteratorProtocol.next() in conformance GroupSessionJournal.Attachments.Iterator, 0, 0);
}

{
  uint64_t v0;

  **(void **)(v0 + 24) = *(void *)(v0 + 64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _s15GroupActivities0A14SessionJournalC11AttachmentsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return MEMORY[0x1F4188298](_s15GroupActivities0A14SessionJournalC11AttachmentsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY0_, 0, 0);
}

uint64_t _s15GroupActivities0A14SessionJournalC11AttachmentsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY0_()
{
  uint64_t v1 = (uint64_t *)v0[6];
  uint64_t v2 = *v1;
  v0[7] = *v1;
  uint64_t v3 = swift_task_alloc();
  v0[8] = v3;
  *(void *)(v3 + 16) = v1;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[9] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GroupSessionJournal.Attachment]?);
  void *v4 = v0;
  v4[1] = _s15GroupActivities0A14SessionJournalC11AttachmentsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ1_;
  return MEMORY[0x1F4188148](v0 + 2, &closure #2 in _PublisherElements.Iterator.next()specialized partial apply, v3, closure #1 in _PublisherElements.Iterator.next()specialized partial apply, v2, 0, 0, v5);
}

uint64_t _s15GroupActivities0A14SessionJournalC11AttachmentsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ1_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 32);
  swift_task_dealloc();
  swift_release();
  *(void *)(v1 + 80) = *(void *)(v1 + 16);
  swift_task_dealloc();
  if (v2)
  {
    swift_getObjectType();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = 0;
  }
  return MEMORY[0x1F4188298](_s15GroupActivities0A14SessionJournalC11AttachmentsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY2_, v3, v5);
}

uint64_t _s15GroupActivities0A14SessionJournalC11AttachmentsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY2_()
{
  **(void **)(v0 + 24) = *(void *)(v0 + 80);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance GroupSessionJournal.Attachments@<X0>(uint64_t *a1@<X8>)
{
  GroupSessionJournal.Attachments.makeAsyncIterator()(a1);

  return swift_release();
}

uint64_t static GroupSessionJournal.InternalErrors.== infix(_:_:)()
{
  return 1;
}

void GroupSessionJournal.InternalErrors.hash(into:)()
{
}

Swift::Int GroupSessionJournal.InternalErrors.hashValue.getter()
{
  return Hasher._finalize()();
}

BOOL static GroupSessionJournal.Errors.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void GroupSessionJournal.Errors.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int GroupSessionJournal.Errors.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t closure #2 in static URL.file<A>(from:)()
{
  uint64_t v0 = type metadata accessor for UTType();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  ResolvedTransferRepresentation.contentType.getter();
  char v4 = static UTType.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4 & 1;
}

uint64_t ResolvedTransferRepresentation.data<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[16] = a3;
  v4[17] = v3;
  v4[14] = a1;
  v4[15] = a2;
  return MEMORY[0x1F4188298](ResolvedTransferRepresentation.data<A>(from:), 0, 0);
}

uint64_t ResolvedTransferRepresentation.data<A>(from:)()
{
  uint64_t v1 = ResolvedTransferRepresentation.exporting.getter();
  *(void *)(v0 + 144) = v1;
  *(void *)(v0 + 152) = v2;
  if (v1)
  {
    uint64_t v3 = (int *)v1;
    uint64_t v4 = *(void *)(v0 + 112);
    long long v11 = *(_OWORD *)(v0 + 120);
    *(_OWORD *)(v0 + 80) = v11;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 56));
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(boxed_opaque_existential_1, v4);
    id v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)v3 + *v3);
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v6;
    void *v6 = v0;
    v6[1] = ResolvedTransferRepresentation.data<A>(from:);
    return v12(v0 + 16, v0 + 56);
  }
  else
  {
    uint64_t v8 = type metadata accessor for TransferableError();
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, MEMORY[0x1E4F248F8]);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104))(v9, *MEMORY[0x1E4F248E8], v8);
    swift_willThrow();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = ResolvedTransferRepresentation.data<A>(from:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v2 + 56);
    uint64_t v3 = ResolvedTransferRepresentation.data<A>(from:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;

  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v0[18]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransferableCurrency);
  if (swift_dynamicCast())
  {
    uint64_t v1 = v0[12];
    uint64_t v2 = v0[13];
    uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v3(v1, v2);
  }
  else
  {
    uint64_t v5 = type metadata accessor for TransferableError();
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, MEMORY[0x1E4F248F8]);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v5 - 8) + 104))(v6, *MEMORY[0x1E4F248E8], v5);
    swift_willThrow();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(void *)(v0 + 144));
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t key path getter for GroupSessionJournal._attachments : GroupSessionJournal@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for GroupSessionJournal._attachments : GroupSessionJournal()
{
  return static Published.subscript.setter();
}

uint64_t type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for GroupSessionJournal.Attachment.AttachmentSource);
}

uint64_t type metadata accessor for GroupSessionJournal.Attachment(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for GroupSessionJournal.Attachment);
}

uint64_t specialized closure #2 in _PublisherElements.Iterator.next()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 88) = a1;
  *(void *)(v2 + 96) = a2;
  return MEMORY[0x1F4188298](specialized closure #2 in _PublisherElements.Iterator.next(), 0, 0);
}

{
  uint64_t v2;

  *(void *)(v2 + 88) = a1;
  *(void *)(v2 + 96) = a2;
  return MEMORY[0x1F4188298](specialized closure #2 in _PublisherElements.Iterator.next(), 0, 0);
}

uint64_t specialized closure #2 in _PublisherElements.Iterator.next()()
{
  *(void *)(v0 + 104) = **(void **)(v0 + 96);
  swift_retain();
  return MEMORY[0x1F4188298](specialized closure #2 in _PublisherElements.Iterator.next(), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = (void *)v0[13];
  v0[2] = v0;
  v0[7] = v0 + 10;
  v0[3] = specialized closure #2 in _PublisherElements.Iterator.next();
  uint64_t v2 = swift_continuation_init();
  specialized closure #1 in _PublisherElements.Iterator.Inner.next()(v2, v1);
  return MEMORY[0x1F41881E8](v0 + 2);
}

{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;
  uint64_t v6;

  uint64_t v1 = *(void **)(*v0 + 88);
  uint64_t v5 = *v0;
  uint64_t v2 = *(void *)(*v0 + 80);
  swift_release();
  *uint64_t v1 = v2;
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(v0 + 104) = **(void **)(v0 + 96);
  swift_retain();
  return MEMORY[0x1F4188298](specialized closure #2 in _PublisherElements.Iterator.next(), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = (void *)v0[13];
  v0[2] = v0;
  v0[7] = v0 + 10;
  v0[3] = specialized closure #2 in _PublisherElements.Iterator.next();
  uint64_t v2 = swift_continuation_init();
  specialized closure #1 in _PublisherElements.Iterator.Inner.next()(v2, v1, &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never>>.Iterator.Inner.State, &demangling cache variable for type metadata for [GroupSessionAttachmentManager.Attachment]?, &demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafeContinuation<[GroupSessionAttachmentManager.Attachment]?, Never>>);
  return MEMORY[0x1F41881E8](v0 + 2);
}

void *specialized GroupSessionJournal.__allocating_init(transportSession:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)swift_allocObject();

  return specialized GroupSessionJournal.init(transportSession:)(a1, v7, a3, a4);
}

void *specialized GroupSessionJournal.init(transportSession:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a3;
  uint64_t v34 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>.Publisher);
  uint64_t v32 = *(void *)(v6 - 8);
  uint64_t v33 = v6;
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v31 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[UUID], Never>, [GroupSessionJournal.Attachment]>);
  uint64_t v11 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2[4] = 0;
  id v18 = (char *)a2 + OBJC_IVAR____TtC15GroupActivities19GroupSessionJournal___attachments;
  v35[0] = MEMORY[0x1E4FBC860];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GroupSessionJournal.Attachment]);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v17, v14);
  *(void *)((char *)a2 + OBJC_IVAR____TtC15GroupActivities19GroupSessionJournal_cancellables) = MEMORY[0x1E4FBC870];
  a2[2] = v34;
  a2[3] = a4;
  id v19 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 24);
  swift_unknownObjectRetain();
  v35[0] = v19(v29, a4);
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[UUID], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<[UUID], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[UUID], Never>);
  Publisher.map<A>(_:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<AnyPublisher<[UUID], Never>, [GroupSessionJournal.Attachment]> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[UUID], Never>, [GroupSessionJournal.Attachment]>);
  uint64_t v20 = v30;
  Publisher<>.assign(to:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v20);
  uint64_t v21 = v32;
  uint64_t v22 = v33;
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v31, v10, v33);
  swift_beginAccess();
  Published.projectedValue.setter();
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v22);
  uint64_t v23 = a2[3];
  uint64_t ObjectType = swift_getObjectType();
  v35[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 32))(ObjectType, v23);
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = partial apply for closure #2 in GroupSessionJournal.init(transportSession:);
  *(void *)(v26 + 24) = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(UUID, URL, Participant), Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<(UUID, URL, Participant), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(UUID, URL, Participant), Never>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  GroupSessionJournal.attachments.getter(v35);
  swift_unknownObjectRelease();
  swift_release();
  return a2;
}

uint64_t outlined assign with take of GroupSessionJournal.Attachment.AttachmentSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of GroupSessionJournal.Attachment.AttachmentSource(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors;
  if (!lazy protocol witness table cache variable for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors;
  if (!lazy protocol witness table cache variable for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors);
  }
  return result;
}

uint64_t outlined init with take of GroupSessionJournal.Attachment.AttachmentSource(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for specialized closure #1 in _PublisherElements.Iterator.next()()
{
  return specialized _PublisherElements.Iterator.Inner.cancel()(&demangling cache variable for type metadata for _PublisherElements<AnyPublisher<[GroupSessionJournal.Attachment], Never>>.Iterator.Inner.State, &demangling cache variable for type metadata for [GroupSessionJournal.Attachment]?, &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<[GroupSessionJournal.Attachment], Never>>.Iterator.Inner.State?);
}

{
  return specialized closure #1 in _PublisherElements.Iterator.next()();
}

uint64_t partial apply for specialized closure #2 in _PublisherElements.Iterator.next()(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized closure #2 in _PublisherElements.Iterator.next()
                                                + async function pointer to specialized closure #2 in _PublisherElements.Iterator.next());
  return v6(a1, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v8;

  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized closure #2 in _PublisherElements.Iterator.next()
                                                + async function pointer to specialized closure #2 in _PublisherElements.Iterator.next());
  return v6(a1, v4);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in GroupSessionJournal.Attachment()
{
  return _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
}

unint64_t lazy protocol witness table accessor for type GroupSessionJournal.Attachments.Iterator and conformance GroupSessionJournal.Attachments.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupSessionJournal.Attachments.Iterator and conformance GroupSessionJournal.Attachments.Iterator;
  if (!lazy protocol witness table cache variable for type GroupSessionJournal.Attachments.Iterator and conformance GroupSessionJournal.Attachments.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionJournal.Attachments.Iterator and conformance GroupSessionJournal.Attachments.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GroupSessionJournal.InternalErrors and conformance GroupSessionJournal.InternalErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupSessionJournal.InternalErrors and conformance GroupSessionJournal.InternalErrors;
  if (!lazy protocol witness table cache variable for type GroupSessionJournal.InternalErrors and conformance GroupSessionJournal.InternalErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionJournal.InternalErrors and conformance GroupSessionJournal.InternalErrors);
  }
  return result;
}

uint64_t sub_1A38294FC@<X0>(void *a1@<X8>)
{
  uint64_t result = GroupSessionJournal.attachments.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_1A3829538(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 32) = *a1;
  swift_retain();

  return swift_release();
}

uint64_t sub_1A3829580()
{
  type metadata accessor for GroupSessionJournal.Attachment(0);

  return swift_weakAssign();
}

uint64_t ObjC metadata update function for GroupSessionJournal()
{
  return type metadata accessor for GroupSessionJournal(0);
}

uint64_t type metadata accessor for GroupSessionJournal(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for GroupSessionJournal);
}

void type metadata completion function for GroupSessionJournal()
{
  type metadata accessor for Published<[GroupSessionJournal.Attachment]>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for GroupSessionJournal(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for GroupSessionJournal);
}

uint64_t dispatch thunk of GroupSessionJournal.__allocating_init(transportSession:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

void type metadata accessor for Published<[GroupSessionJournal.Attachment]>()
{
  if (!lazy cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GroupSessionJournal.Attachment]);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<[GroupSessionJournal.Attachment]>);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupSessionJournal.Attachment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_weakCopyInit();
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v20 = *v10;
      unint64_t v19 = v10[1];
      outlined copy of Data._Representation(v20, v19);
      *uint64_t v9 = v20;
      v9[1] = v19;
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v13 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16))(v9, v10, v13);
      uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?))
                   + 48);
      uint64_t v15 = (char *)v9 + v14;
      uint64_t v16 = (char *)v10 + v14;
      unint64_t v17 = *((void *)v16 + 1);
      if (v17 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      }
      else
      {
        uint64_t v21 = *(void *)v16;
        outlined copy of Data._Representation(*(void *)v16, *((void *)v16 + 1));
        *(void *)uint64_t v15 = v21;
        *((void *)v15 + 1) = v17;
      }
      goto LABEL_10;
    }
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  return a1;
}

uint64_t destroy for GroupSessionJournal.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_weakDestroy();
  int v5 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    unint64_t v8 = v5[1];
  }
  else
  {
    if (result) {
      return result;
    }
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?));
    int v5 = (uint64_t *)((char *)v5 + *(int *)(result + 48));
    unint64_t v8 = v5[1];
    if (v8 >> 60 == 15) {
      return result;
    }
  }
  uint64_t v9 = *v5;

  return outlined consume of Data._Representation(v9, v8);
}

uint64_t initializeWithCopy for GroupSessionJournal.Attachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  swift_weakCopyInit();
  uint64_t v7 = *(int *)(a3 + 24);
  unint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v18 = *v9;
    unint64_t v17 = v9[1];
    outlined copy of Data._Representation(v18, v17);
    *unint64_t v8 = v18;
    v8[1] = v17;
LABEL_8:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v12 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16))(v8, v9, v12);
    uint64_t v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?))
                 + 48);
    uint64_t v14 = (char *)v8 + v13;
    uint64_t v15 = (char *)v9 + v13;
    unint64_t v16 = *((void *)v15 + 1);
    if (v16 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    }
    else
    {
      uint64_t v19 = *(void *)v15;
      outlined copy of Data._Representation(*(void *)v15, *((void *)v15 + 1));
      *(void *)uint64_t v14 = v19;
      *((void *)v14 + 1) = v16;
    }
    goto LABEL_8;
  }
  memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  return a1;
}

uint64_t assignWithCopy for GroupSessionJournal.Attachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  swift_weakCopyAssign();
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 24);
    unint64_t v8 = (uint64_t *)(a1 + v7);
    uint64_t v9 = (uint64_t *)(a2 + v7);
    outlined destroy of GroupSessionJournal.Attachment(a1 + v7, type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
    uint64_t v10 = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v18 = *v9;
      unint64_t v17 = v9[1];
      outlined copy of Data._Representation(v18, v17);
      *unint64_t v8 = v18;
      v8[1] = v17;
LABEL_9:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v12 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16))(v8, v9, v12);
      uint64_t v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?))
                   + 48);
      uint64_t v14 = (char *)v8 + v13;
      uint64_t v15 = (char *)v9 + v13;
      unint64_t v16 = *((void *)v15 + 1);
      if (v16 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      }
      else
      {
        uint64_t v19 = *(void *)v15;
        outlined copy of Data._Representation(*(void *)v15, *((void *)v15 + 1));
        *(void *)uint64_t v14 = v19;
        *((void *)v14 + 1) = v16;
      }
      goto LABEL_9;
    }
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  return a1;
}

uint64_t outlined destroy of GroupSessionJournal.Attachment(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t initializeWithTake for GroupSessionJournal.Attachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  swift_weakTakeInit();
  uint64_t v7 = *(int *)(a3 + 24);
  unint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?));
    *(_OWORD *)&v8[*(int *)(v12 + 48)] = *(_OWORD *)&v9[*(int *)(v12 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t assignWithTake for GroupSessionJournal.Attachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  swift_weakTakeAssign();
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 24);
    unint64_t v8 = (char *)(a1 + v7);
    uint64_t v9 = (char *)(a2 + v7);
    outlined destroy of GroupSessionJournal.Attachment(a1 + v7, type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
    uint64_t v10 = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v11 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?));
      *(_OWORD *)&v8[*(int *)(v12 + 48)] = *(_OWORD *)&v9[*(int *)(v12 + 48)];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionJournal.Attachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1A382A060);
}

uint64_t sub_1A382A060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 24);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for GroupSessionJournal.Attachment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1A382A16C);
}

uint64_t sub_1A382A16C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 24);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata completion function for GroupSessionJournal.Attachment()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupSessionJournal.Attachment.AttachmentSource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v15 = *a2;
      unint64_t v14 = a2[1];
      outlined copy of Data._Representation(v15, v14);
      *a1 = v15;
      a1[1] = v14;
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v8 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?))
                  + 48);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      unint64_t v12 = *((void *)v11 + 1);
      if (v12 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
      }
      else
      {
        uint64_t v16 = *(void *)v11;
        outlined copy of Data._Representation(*(void *)v11, *((void *)v11 + 1));
        *(void *)uint64_t v10 = v16;
        *((void *)v10 + 1) = v12;
      }
      goto LABEL_10;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t destroy for GroupSessionJournal.Attachment.AttachmentSource(uint64_t *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    unint64_t v4 = a1[1];
  }
  else
  {
    if (result) {
      return result;
    }
    uint64_t v3 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?));
    a1 = (uint64_t *)((char *)a1 + *(int *)(result + 48));
    unint64_t v4 = a1[1];
    if (v4 >> 60 == 15) {
      return result;
    }
  }
  uint64_t v5 = *a1;

  return outlined consume of Data._Representation(v5, v4);
}

uint64_t *initializeWithCopy for GroupSessionJournal.Attachment.AttachmentSource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v13 = *a2;
    unint64_t v12 = a2[1];
    outlined copy of Data._Representation(v13, v12);
    *a1 = v13;
    a1[1] = v12;
LABEL_8:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?))
                + 48);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v14 = *(void *)v10;
      outlined copy of Data._Representation(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v14;
      *((void *)v9 + 1) = v11;
    }
    goto LABEL_8;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

uint64_t *assignWithCopy for GroupSessionJournal.Attachment.AttachmentSource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of GroupSessionJournal.Attachment((uint64_t)a1, type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v13 = *a2;
      unint64_t v12 = a2[1];
      outlined copy of Data._Representation(v13, v12);
      *a1 = v13;
      a1[1] = v12;
LABEL_9:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?))
                  + 48);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      unint64_t v11 = *((void *)v10 + 1);
      if (v11 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      }
      else
      {
        uint64_t v14 = *(void *)v10;
        outlined copy of Data._Representation(*(void *)v10, *((void *)v10 + 1));
        *(void *)uint64_t v9 = v14;
        *((void *)v9 + 1) = v11;
      }
      goto LABEL_9;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *initializeWithTake for GroupSessionJournal.Attachment.AttachmentSource(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?));
    *(_OWORD *)&a1[*(int *)(v7 + 48)] = *(_OWORD *)&a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for GroupSessionJournal.Attachment.AttachmentSource(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of GroupSessionJournal.Attachment((uint64_t)a1, type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (attachmentData: URL, developerMetadata: Data?));
      *(_OWORD *)&a1[*(int *)(v7 + 48)] = *(_OWORD *)&a2[*(int *)(v7 + 48)];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for GroupSessionJournal.Attachment.AttachmentSource()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[4] = v2;
    v2[5] = &unk_1A38F9000;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionJournal.Attachments()
{
  return &type metadata for GroupSessionJournal.Attachments;
}

ValueMetadata *type metadata accessor for GroupSessionJournal.Attachments.Iterator()
{
  return &type metadata for GroupSessionJournal.Attachments.Iterator;
}

unsigned char *storeEnumTagSinglePayload for GroupSessionJournal.InternalErrors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1A382AB04);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionJournal.InternalErrors()
{
  return &type metadata for GroupSessionJournal.InternalErrors;
}

unsigned char *storeEnumTagSinglePayload for GroupSessionJournal.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A382AC08);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionJournal.Errors()
{
  return &type metadata for GroupSessionJournal.Errors;
}

uint64_t closure #2 in _PublisherElements.Iterator.next()specialized partial apply(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  unsigned int v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized closure #2 in _PublisherElements.Iterator.next()
                                                + async function pointer to specialized closure #2 in _PublisherElements.Iterator.next());
  return v6(a1, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v8;

  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  unsigned int v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized closure #2 in _PublisherElements.Iterator.next()
                                                + async function pointer to specialized closure #2 in _PublisherElements.Iterator.next());
  return v6(a1, v4);
}

uint64_t outlined assign with take of _PublisherElements<AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never>>.Iterator.Inner.State(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1A382AD58()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in GroupSessionJournal.init(transportSession:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return closure #1 in GroupSessionJournal.init(transportSession:)(a1, v2, a2);
}

uint64_t partial apply for closure #2 in GroupSessionJournal.init(transportSession:)(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t))
{
  return closure #2 in GroupSessionJournal.init(transportSession:)(a1, a2, a3, v3);
}

uint64_t sub_1A382ADA0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed UUID, @in_guaranteed URL, @in_guaranteed Participant) -> ()(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed UUID, @in_guaranteed URL, @in_guaranteed Participant) -> ()(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource(0);
  MEMORY[0x1F4188790](v54);
  uint64_t v53 = (char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionJournal.Attachment?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for GroupSessionJournal.Attachment(0);
  uint64_t v9 = *(void *)(v52 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v52);
  uint64_t v51 = (uint64_t)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v39 = (uint64_t)v37 - v12;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v50 = (char *)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v56 = (char *)v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18)
  {
    v37[2] = v2;
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    uint64_t v20 = v14 + 16;
    uint64_t v19 = v21;
    uint64_t v22 = a1;
    uint64_t v23 = a1 + ((*(unsigned __int8 *)(v20 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 64));
    unint64_t v55 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 40);
    unint64_t v49 = (unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 32);
    uint64_t v24 = *(void *)(v20 + 56);
    unint64_t v45 = (void (**)(char *, char *, uint64_t))(v20 + 16);
    uint64_t v46 = v24;
    uint64_t v43 = (void (**)(char *, void, uint64_t, uint64_t))(v9 + 56);
    uint64_t v44 = a2 + 16;
    uint64_t v42 = (void (**)(char *, uint64_t))(v20 - 8);
    uint64_t v38 = v9;
    uint64_t v41 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
    v37[1] = v22;
    swift_bridgeObjectRetain();
    unint64_t v57 = MEMORY[0x1E4FBC860];
    uint64_t v25 = v56;
    uint64_t v47 = v21;
    uint64_t v48 = v20;
    while (1)
    {
      v19(v25, v23, v13);
      uint64_t v40 = *v55;
      v40(v25, 0, 1, v13);
      if ((*v49)(v25, 1, v13) == 1) {
        break;
      }
      uint64_t v26 = (void (*)(char *, char *, uint64_t))v19;
      uint64_t v27 = v50;
      (*v45)(v50, v25, v13);
      swift_beginAccess();
      swift_weakLoadStrong();
      uint64_t v28 = (uint64_t)v53;
      swift_storeEnumTagMultiPayload();
      v26(v8, v27, v13);
      uint64_t v29 = v52;
      swift_weakInit();
      swift_release();
      outlined init with take of GroupSessionJournal.Attachment.AttachmentSource(v28, (uint64_t)&v8[*(int *)(v29 + 24)], type metadata accessor for GroupSessionJournal.Attachment.AttachmentSource);
      (*v43)(v8, 0, 1, v29);
      (*v42)(v27, v13);
      if ((*v41)(v8, 1, v29) == 1)
      {
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for GroupSessionJournal.Attachment?);
        uint64_t v19 = v47;
      }
      else
      {
        uint64_t v30 = v39;
        outlined init with take of GroupSessionJournal.Attachment.AttachmentSource((uint64_t)v8, v39, type metadata accessor for GroupSessionJournal.Attachment);
        outlined init with take of GroupSessionJournal.Attachment.AttachmentSource(v30, v51, type metadata accessor for GroupSessionJournal.Attachment);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v57 + 16) + 1, 1, v57);
        }
        uint64_t v31 = v38;
        uint64_t v19 = v47;
        unint64_t v33 = *(void *)(v57 + 16);
        unint64_t v32 = *(void *)(v57 + 24);
        if (v33 >= v32 >> 1) {
          unint64_t v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, v57);
        }
        unint64_t v34 = v57;
        *(void *)(v57 + 16) = v33 + 1;
        outlined init with take of GroupSessionJournal.Attachment.AttachmentSource(v51, v34+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(void *)(v31 + 72) * v33, type metadata accessor for GroupSessionJournal.Attachment);
      }
      v23 += v46;
      --v18;
      uint64_t v25 = v56;
      if (!v18)
      {
        v40(v56, 1, 1, v13);
        break;
      }
    }
  }
  else
  {
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    swift_bridgeObjectRetain();
    unint64_t v57 = MEMORY[0x1E4FBC860];
    v35(v56, 1, 1, v13);
  }
  swift_bridgeObjectRelease();
  return v57;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (**v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  void (**v43)(char *, char *, uint64_t);
  void (**v44)(char *, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (**v48)(char *, uint64_t, uint64_t);
  void (*v49)(char *, uint64_t, uint64_t);
  char *v50;
  void (**v51)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;

  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionAttachmentManager.Attachment?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for GroupSessionAttachmentManager.Attachment(0);
  uint64_t v8 = *(void *)(v47 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v47);
  uint64_t v46 = (uint64_t)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v39 = (uint64_t)&v36 - v11;
  uint64_t v52 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52);
  uint64_t v50 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17)
  {
    uint64_t v54 = v2;
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    uint64_t v18 = v12 + 16;
    uint64_t v20 = a1;
    uint64_t v21 = a1 + ((*(unsigned __int8 *)(v18 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 64));
    uint64_t v51 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 40);
    uint64_t v22 = *(void *)(v18 + 56);
    uint64_t v48 = (unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 32);
    unint64_t v49 = v19;
    uint64_t v42 = v22;
    uint64_t v43 = (void (**)(char *, char *, uint64_t))(v18 + 16);
    uint64_t v44 = (void (**)(char *, uint64_t))(v18 - 8);
    uint64_t v36 = v20;
    BOOL v37 = v8;
    uint64_t v41 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    swift_bridgeObjectRetain();
    uint64_t v53 = MEMORY[0x1E4FBC860];
    uint64_t v38 = a2;
    unint64_t v45 = v7;
    uint64_t v23 = v18;
    uint64_t v24 = v52;
    while (1)
    {
      uint64_t v25 = v23;
      v49(v16, v21, v24);
      uint64_t v40 = *v51;
      v40(v16, 0, 1, v24);
      if ((*v48)(v16, 1, v24) == 1) {
        break;
      }
      uint64_t v26 = a2;
      uint64_t v27 = v50;
      (*v43)(v50, v16, v24);
      uint64_t v28 = v54;
      closure #1 in closure #1 in GroupSessionAttachmentManager.init(transportSession:)(v27, v26, v7);
      if (v28)
      {
        (*v44)(v27, v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v53;
      }
      (*v44)(v27, v24);
      uint64_t v29 = (*v41)(v7, 1, v47) == 1;
      uint64_t v54 = 0;
      if (v29)
      {
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v7, &demangling cache variable for type metadata for GroupSessionAttachmentManager.Attachment?);
        a2 = v26;
        uint64_t v24 = v52;
      }
      else
      {
        uint64_t v30 = v39;
        outlined init with take of GroupSessionAttachmentManager.Attachment((uint64_t)v7, v39);
        outlined init with take of GroupSessionAttachmentManager.Attachment(v30, v46);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v53 + 16) + 1, 1, v53, &demangling cache variable for type metadata for _ContiguousArrayStorage<GroupSessionAttachmentManager.Attachment>, type metadata accessor for GroupSessionAttachmentManager.Attachment, type metadata accessor for GroupSessionAttachmentManager.Attachment);
        }
        uint64_t v24 = v52;
        unint64_t v32 = *(void *)(v53 + 16);
        uint64_t v31 = *(void *)(v53 + 24);
        if (v32 >= v31 >> 1) {
          uint64_t v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, v53, &demangling cache variable for type metadata for _ContiguousArrayStorage<GroupSessionAttachmentManager.Attachment>, type metadata accessor for GroupSessionAttachmentManager.Attachment, type metadata accessor for GroupSessionAttachmentManager.Attachment);
        }
        unint64_t v33 = v53;
        *(void *)(v53 + 16) = v32 + 1;
        outlined init with take of GroupSessionAttachmentManager.Attachment(v46, v33+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(void *)(v37 + 72) * v32);
        a2 = v38;
      }
      v21 += v42;
      --v17;
      uint64_t v23 = v25;
      if (!v17)
      {
        v40(v16, 1, 1, v24);
        break;
      }
    }
  }
  else
  {
    unint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    swift_bridgeObjectRetain();
    uint64_t v53 = MEMORY[0x1E4FBC860];
    v34(v16, 1, 1, v52);
  }
  swift_bridgeObjectRelease();
  return v53;
}

uint64_t partial apply for closure #2 in static URL.file<A>(from:)()
{
  return closure #2 in static URL.file<A>(from:)() & 1;
}

uint64_t specialized GroupSessionProvider.uuid.getter()
{
  (*(void (**)(void))(*(void *)v0 + 176))();
  static SharableObjectIdentifier.identifier<A, B>(ofType:with:)();
  swift_bridgeObjectRelease();
  specialized static GroupSessionProvider.providerIdentifier.getter();
  swift_bridgeObjectRetain();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for UUID();
  static SharableObjectIdentifier.identifier<A>(ofType:with:)();
  return swift_bridgeObjectRelease();
}

uint64_t specialized static GroupSessionProvider.providerIdentifier.getter()
{
  id v0 = objc_msgSend(self, sel_processInfo);
  uint64_t v1 = NSProcessInfo.stableAppIdentifier.getter();
  uint64_t v3 = v2;

  if (v3) {
    goto LABEL_4;
  }
  id v4 = objc_msgSend(self, sel_mainBundle);
  id v5 = objc_msgSend(v4, sel_bundleIdentifier);

  if (v5)
  {
    uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

LABEL_4:
    v6._countAndFlagsBits = 46;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    v7._object = (void *)0x80000001A3901A00;
    v7._countAndFlagsBits = 0xD000000000000032;
    String.append(_:)(v7);
    return v1;
  }
  _StringGuts.grow(_:)(147);
  v9._countAndFlagsBits = 0xD000000000000090;
  v9._object = (void *)0x80000001A3900CC0;
  String.append(_:)(v9);
  v10._object = (void *)0x80000001A3901A00;
  v10._countAndFlagsBits = 0xD000000000000032;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 46;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized GroupSessionProvider.join()()
{
  *(void *)(v1 + 72) = v0;
  return MEMORY[0x1F4188298](specialized GroupSessionProvider.join(), 0, 0);
}

{
  void *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _UNKNOWN **v6;
  uint64_t ObjectType;
  void *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v11;

  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = one-time initialization token for default;
    swift_retain();
    if (v3 != -1) {
      swift_once();
    }
    id v4 = type metadata accessor for GroupSessionProviderTestingOverrides();
    __swift_project_value_buffer(v4, (uint64_t)static GroupSessionProviderTestingOverrides.default);
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
    Testable.wrappedValue.getter();
    id v5 = v0[5];
    if (v5)
    {
      Swift::String v6 = (_UNKNOWN **)v0[6];
      swift_endAccess();
    }
    else
    {
      swift_endAccess();
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      id v5 = static BackgroundGroupSessionManager.shared;
      swift_retain();
      Swift::String v6 = &protocol witness table for BackgroundGroupSessionManager;
    }
    v0[10] = v5;
    uint64_t ObjectType = swift_getObjectType();
    Swift::String v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, _UNKNOWN **))((char *)v6[3] + *(int *)v6[3]);
    uint64_t v8 = (void *)swift_task_alloc();
    v0[11] = v8;
    *uint64_t v8 = v0;
    v8[1] = specialized GroupSessionProvider.join();
    Swift::String v9 = v0[9];
    return v10(v9, v2, ObjectType, v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized GroupSessionProvider.join();
  }
  else {
    uint64_t v2 = specialized GroupSessionProvider.join();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  swift_unknownObjectRelease();
  swift_release();
  if (one-time initialization token for groupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.groupSessionProvider);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v4 = 0;
    _os_log_impl(&dword_1A375F000, v2, v3, "Successfully started tracking GroupSessionProvider on join()", v4, 2u);
    MEMORY[0x1A624F870](v4, -1, -1);
  }
  id v5 = v0[9];

  (*(void (**)(void))(*(void *)v5 + 200))();
  v0[8] = 1;
  CurrentValueSubject.send(_:)();
  swift_release();
  Swift::String v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  swift_unknownObjectRelease();
  swift_release();
  if (one-time initialization token for groupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.groupSessionProvider);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v4 = 0;
    _os_log_impl(&dword_1A375F000, v2, v3, "Failed to start tracking GroupSessionProvider on join()", v4, 2u);
    MEMORY[0x1A624F870](v4, -1, -1);
  }
  id v5 = (void *)v0[12];
  Swift::String v6 = v0[9];

  (*(void (**)(void))(*(void *)v6 + 200))();
  v0[7] = v5;
  Swift::String v7 = v5;
  CurrentValueSubject.send(_:)();
  swift_release();

  swift_willThrow();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t specialized GroupSessionProvider.leave()()
{
  v1[9] = v0;
  uint64_t v2 = type metadata accessor for UUID();
  v1[10] = v2;
  v1[11] = *(void *)(v2 - 8);
  v1[12] = swift_task_alloc();
  return MEMORY[0x1F4188298](specialized GroupSessionProvider.leave(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  _UNKNOWN **v3;
  uint64_t ObjectType;
  void *v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v9;

  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for GroupSessionProviderTestingOverrides();
  __swift_project_value_buffer(v1, (uint64_t)static GroupSessionProviderTestingOverrides.default);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Testable<GroupSessionServiceProvider?>);
  Testable.wrappedValue.getter();
  uint64_t v2 = v0[5];
  if (v2)
  {
    uint64_t v3 = (_UNKNOWN **)v0[6];
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v2 = static BackgroundGroupSessionManager.shared;
    swift_retain();
    uint64_t v3 = &protocol witness table for BackgroundGroupSessionManager;
  }
  v0[13] = v2;
  uint64_t ObjectType = swift_getObjectType();
  specialized GroupSessionProvider.uuid.getter();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, _UNKNOWN **))((char *)v3[4] + *(int *)v3[4]);
  id v5 = (void *)swift_task_alloc();
  v0[14] = v5;
  *id v5 = v0;
  v5[1] = specialized GroupSessionProvider.leave();
  Swift::String v6 = v0[12];
  return v8(v6, ObjectType, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[11] + 8))(v2[12], v2[10]);
  swift_unknownObjectRelease();
  if (v0) {
    uint64_t v3 = specialized GroupSessionProvider.leave();
  }
  else {
    uint64_t v3 = specialized GroupSessionProvider.leave();
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  if (one-time initialization token for groupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.groupSessionProvider);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1A375F000, v2, v3, "Successfully left GroupSessionProvider", v4, 2u);
    MEMORY[0x1A624F870](v4, -1, -1);
  }
  id v5 = v0[9];

  (*(void (**)(void))(*(void *)v5 + 200))();
  v0[8] = 0;
  CurrentValueSubject.send(_:)();
  swift_release();
  swift_task_dealloc();
  Swift::String v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  if (one-time initialization token for groupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.groupSessionProvider);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1A375F000, v2, v3, "Failed to leave GroupSessionProvider", v4, 2u);
    MEMORY[0x1A624F870](v4, -1, -1);
  }
  id v5 = (void *)v0[15];
  Swift::String v6 = v0[9];

  (*(void (**)(void))(*(void *)v6 + 200))();
  v0[7] = v5;
  Swift::String v7 = v5;
  CurrentValueSubject.send(_:)();
  swift_release();

  swift_willThrow();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t CollaborationActivity.activate()()
{
  *(void *)(v1 + 48) = v0;
  return MEMORY[0x1F4188298](CollaborationActivity.activate(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v9;
  void *v10;
  uint64_t (*v11)(void);
  uint64_t (*v12)(void);
  uint64_t (*v13)(void);
  uint64_t v14;

  uint64_t v1 = v0[6];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 136);
  uint64_t v3 = (*(void *)v1 + 136) & 0xFFFFFFFFFFFFLL | 0x51B000000000000;
  v0[7] = v2;
  v0[8] = v3;
  uint64_t v4 = v2();
  id v5 = swift_release();
  if (v4)
  {
    Swift::String v6 = ((uint64_t (*)(uint64_t))v0[7])(v5);
    v0[14] = v6;
    if (v6)
    {
      uint64_t v13 = (uint64_t (*)(void))((char *)&async function pointer to specialized GroupSessionProvider.join()
                              + async function pointer to specialized GroupSessionProvider.join());
      Swift::String v7 = (void *)swift_task_alloc();
      v0[15] = v7;
      *Swift::String v7 = v0;
      v7[1] = CollaborationActivity.activate();
      return v13();
    }
    else
    {
      Swift::String v11 = (uint64_t (*)(void))v0[1];
      return v11();
    }
  }
  else
  {
    Swift::String v9 = (void *)v0[6];
    v0[9] = v9[2];
    v0[10] = v9[3];
    uint64_t v12 = (uint64_t (*)(void))(*(void *)(*v9 + 128) + **(int **)(*v9 + 128));
    swift_bridgeObjectRetain();
    swift_retain();
    Swift::String v10 = (void *)swift_task_alloc();
    v0[11] = v10;
    *Swift::String v10 = v0;
    v10[1] = CollaborationActivity.activate();
    return v12();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t (__cdecl *v13)();
  uint64_t v14;

  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v1 = *(void **)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);
  id v5 = *(void *)(v0 + 48);
  Swift::String v6 = objc_msgSend(self, sel_defaultContainer);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CollaborationActivity>);
  swift_allocObject();
  Swift::String v7 = specialized CKShareGroupSessionProvider.init(id:activity:share:container:)(v4, v3, v5, v1, v6);
  if (v2)
  {
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
LABEL_3:
    return v8(0);
  }
  Swift::String v10 = (*(uint64_t (**)(void *))(**(void **)(v0 + 48) + 144))(v7);
  Swift::String v11 = (*(uint64_t (**)(uint64_t))(v0 + 56))(v10);
  *(void *)(v0 + 112) = v11;
  if (!v11)
  {
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_3;
  }
  uint64_t v13 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized GroupSessionProvider.join()
                              + async function pointer to specialized GroupSessionProvider.join());
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v12;
  *uint64_t v12 = v0;
  v12[1] = CollaborationActivity.activate();
  return v13();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = CollaborationActivity.activate();
  }
  else {
    uint64_t v2 = CollaborationActivity.activate();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(BOOL);
  BOOL v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(BOOL))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 112) != 0;
  return v1(v2);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v18;
  uint64_t v19[2];
  void *v20;
  uint64_t v21;

  uint64_t v20 = v0;
  if (one-time initialization token for ckShareGroupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[16];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.ckShareGroupSessionProvider);
  swift_retain();
  uint64_t v3 = v1;
  swift_retain();
  uint64_t v4 = v1;
  id v5 = Logger.logObject.getter();
  Swift::String v6 = static os_log_type_t.error.getter();
  Swift::String v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[16];
  Swift::String v9 = v0[6];
  if (v7)
  {
    Swift::String v10 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    v19[0] = v18;
    *(_DWORD *)Swift::String v10 = 136315394;
    v0[2] = v9;
    type metadata accessor for CollaborationActivity();
    swift_retain();
    Swift::String v11 = String.init<A>(reflecting:)();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v10 + 12) = 2080;
    v0[4] = v8;
    uint64_t v13 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v14 = String.init<A>(reflecting:)();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v5, v6, "Failed to active activity %s, error: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v18, -1, -1);
    MEMORY[0x1A624F870](v10, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  swift_willThrow();
  swift_release();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16(0);
}

uint64_t CollaborationActivity.activate()(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[12] = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    id v5 = (uint64_t (*)(void))v4[1];
    return v5(0);
  }
  else
  {
    v4[13] = a1;
    return MEMORY[0x1F4188298](CollaborationActivity.activate(), 0, 0);
  }
}

uint64_t specialized IdentifiableGroupActivity.uuid.getter()
{
  return static SharableObjectIdentifier.identifier<A, B>(ofType:with:)();
}

{
  type metadata accessor for UUID();
  return static SharableObjectIdentifier.identifier<A, B>(ofType:with:)();
}

void *specialized CKShareGroupSessionProvider.init(id:activity:share:container:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v69 = a5;
  Swift::String v6 = v5;
  uint64_t v70 = a2;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<@Sendable ()>.Continuation.BufferingPolicy);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<GroupSessionProviderState, Never>);
  swift_allocObject();
  v5[4] = CurrentValueSubject.init(_:)();
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  v71[0] = static PresenceSessionInfo.default;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PresenceSessionInfo, Never>);
  swift_allocObject();
  swift_bridgeObjectRetain();
  v5[12] = CurrentValueSubject.init(_:)();
  static TaskPriority.userInitiated.getter();
  uint64_t v17 = type metadata accessor for TaskPriority();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t, uint8_t *))(v18 + 56);
  uint64_t v67 = (uint8_t *)v17;
  uint64_t v65 = v18 + 56;
  ((void (*)(char *, void, uint64_t))v66)(v16, 0, 1);
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E4FBD028], v10);
  AsyncSerialQueue.init(priority:bufferingPolicy:)();
  *(void *)((char *)v5 + *(void *)(*v5 + 168)) = MEMORY[0x1E4FBC870];
  uint64_t v19 = v70;
  v5[2] = a1;
  v5[3] = v19;
  v5[6] = a3;
  swift_retain();
  id v20 = objc_msgSend(a4, sel_containerID);

  uint64_t v21 = a4;
  if (!v20)
  {
    if (one-time initialization token for ckShareGroupSessionProvider != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)static Log.ckShareGroupSessionProvider);
    id v42 = a4;
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      unint64_t v45 = (uint8_t *)swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      uint64_t v68 = v21;
      uint64_t v47 = v53;
      uint64_t v70 = a3;
      v71[0] = v53;
      *(_DWORD *)unint64_t v45 = 136315138;
      uint64_t v67 = v45 + 4;
      uint64_t v72 = (uint64_t)v42;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
      id v54 = v42;
      uint64_t v55 = String.init<A>(reflecting:)();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      uint64_t v51 = "Share %s doesn't have a containerID";
      goto LABEL_17;
    }
LABEL_18:

    goto LABEL_19;
  }
  v71[0] = CKShare.members.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Set<AddressableMember>, Never>);
  swift_allocObject();
  v5[5] = CurrentValueSubject.init(_:)();
  id v22 = objc_msgSend(a4, sel_currentUserParticipant);
  if (v22)
  {
    uint64_t v23 = v22;
    id v24 = CKShareParticipant.handle.getter();

    if (v24)
    {
      uint64_t v70 = a3;
      id v25 = objc_msgSend(v24, sel_normalizedValue);
      if (!v25) {
        id v25 = objc_msgSend(v24, sel_value);
      }
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v64 = v24;
      uint64_t v27 = v26;
      uint64_t v29 = v28;

      v71[3] = (uint64_t)&type metadata for AddressableMember;
      v71[4] = lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember();
      v71[0] = v27;
      v71[1] = v29;
      outlined init with take of Member?((uint64_t)v71, (uint64_t)(v6 + 7));
      id v30 = v69;
      *(void *)((char *)v6 + *(void *)(*v6 + 152)) = v69;
      swift_beginAccess();
      uint64_t v72 = (uint64_t)v21;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
      id v63 = v21;
      id v69 = v30;
      Published.init(initialValue:)();
      swift_endAccess();
      unint64_t v32 = v66;
      uint64_t v31 = v67;
      v66(v16, 1, 1, v67);
      unint64_t v33 = (void *)swift_allocObject();
      void v33[2] = 0;
      v33[3] = 0;
      v33[4] = v6;
      swift_retain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v16, (uint64_t)&async function pointer to partial apply for specialized closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:), (uint64_t)v33);
      swift_beginAccess();
      type metadata accessor for AnyCancellable();
      swift_allocObject();
      swift_retain();
      uint64_t v34 = AnyCancellable.init(_:)();
      specialized Set._Variant.insert(_:)(&v72, v34);
      swift_release();
      swift_endAccess();
      swift_release();
      v32(v16, 1, 1, v31);
      uint64_t v35 = (void *)swift_allocObject();
      id v35[2] = 0;
      uint64_t v35[3] = 0;
      uint64_t v36 = v63;
      v35[4] = v6;
      v35[5] = v36;
      id v37 = v69;
      v35[6] = v69;
      id v38 = v36;
      id v39 = v37;
      swift_retain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v16, (uint64_t)&async function pointer to partial apply for specialized closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:), (uint64_t)v35);
      swift_beginAccess();
      swift_allocObject();
      swift_retain();
      uint64_t v40 = AnyCancellable.init(_:)();
      specialized Set._Variant.insert(_:)(&v72, v40);
      swift_release();
      swift_endAccess();
      swift_release();

      swift_release();
      return v6;
    }
  }
  if (one-time initialization token for ckShareGroupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v41 = type metadata accessor for Logger();
  __swift_project_value_buffer(v41, (uint64_t)static Log.ckShareGroupSessionProvider);
  id v42 = a4;
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v43, v44)) {
    goto LABEL_18;
  }
  uint64_t v70 = a3;
  unint64_t v45 = (uint8_t *)swift_slowAlloc();
  uint64_t v46 = swift_slowAlloc();
  uint64_t v68 = v21;
  uint64_t v47 = v46;
  v71[0] = v46;
  *(_DWORD *)unint64_t v45 = 136315138;
  uint64_t v67 = v45 + 4;
  uint64_t v72 = (uint64_t)v42;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
  id v48 = v42;
  uint64_t v49 = String.init<A>(reflecting:)();
  uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, v71);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  uint64_t v51 = "Share %s doesn't have a currentUserParticipant";
LABEL_17:
  _os_log_impl(&dword_1A375F000, v43, v44, v51, v45, 0xCu);
  swift_arrayDestroy();
  uint64_t v57 = v47;
  uint64_t v21 = v68;
  MEMORY[0x1A624F870](v57, -1, -1);
  MEMORY[0x1A624F870](v45, -1, -1);

LABEL_19:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CollaborationActivity>.Errors);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CKShareGroupSessionProvider<CollaborationActivity>.Errors and conformance CKShareGroupSessionProvider<A>.Errors, &demangling cache variable for type metadata for CKShareGroupSessionProvider<CollaborationActivity>.Errors);
  swift_allocError();
  *uint64_t v58 = 0;
  swift_willThrow();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  if (v20) {
    swift_release();
  }
  swift_release();
  swift_release();
  uint64_t v59 = (char *)v6 + *(void *)(*v6 + 144);
  uint64_t v60 = type metadata accessor for AsyncSerialQueue();
  (*(void (**)(char *, uint64_t))(*(void *)(v60 - 8) + 8))(v59, v60);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CollaborationActivity>);
  swift_deallocPartialClassInstance();
  return v6;
}

uint64_t specialized closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<CKShare>.Publisher>);
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CKShare>.Publisher);
  v4[11] = v6;
  v4[12] = *(void *)(v6 - 8);
  v4[13] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<CKShare>.Publisher>.Iterator);
  v4[14] = v7;
  v4[15] = *(void *)(v7 - 8);
  v4[16] = swift_task_alloc();
  return MEMORY[0x1F4188298](specialized closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:), 0, 0);
}

uint64_t specialized closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:)()
{
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 72);
  (*(void (**)(void))(**(void **)(v0 + 56) + 344))();
  uint64_t v7 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<CKShare>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CKShare>.Publisher);
  MEMORY[0x1A624DD30](v3, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  uint64_t v8 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<Published<CKShare>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<CKShare>.Publisher>.Iterator);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v9;
  *uint64_t v9 = v0;
  v9[1] = specialized closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:);
  uint64_t v10 = *(void *)(v0 + 112);
  return MEMORY[0x1F4187C78](v0 + 16, v10, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:);
  }
  else {
    uint64_t v2 = specialized closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;

  *(void *)(v0 + 152) = *(void *)(v0 + 16);
  return MEMORY[0x1F4188298](specialized closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  BOOL v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t v31;
  void *v32;
  uint64_t v33;

  unint64_t v32 = v0;
  uint64_t v1 = (void *)v0[19];
  if (v1)
  {
    if (one-time initialization token for ckShareGroupSessionProvider != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.ckShareGroupSessionProvider);
    swift_retain_n();
    uint64_t v3 = v1;
    uint64_t v4 = Logger.logObject.getter();
    uint64_t v5 = static os_log_type_t.default.getter();
    uint64_t v6 = os_log_type_enabled(v4, v5);
    uint64_t v7 = v0[7];
    if (v6)
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v31 = v9;
      *(_DWORD *)uint64_t v8 = 136315394;
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 408))(v9);
      uint64_t v12 = v11;
      swift_release();
      *(void *)(v8 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v31);
      swift_bridgeObjectRelease();
      swift_release();
      *(_WORD *)(v8 + 12) = 2080;
      v0[6] = v3;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
      uint64_t v13 = v3;
      uint64_t v14 = String.init<A>(reflecting:)();
      *(void *)(v8 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v31);
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A375F000, v4, v5, "%s Saw an updated CKShare: %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v9, -1, -1);
      MEMORY[0x1A624F870](v8, -1, -1);
    }
    else
    {
      swift_release_n();
    }
    (*(void (**)(uint64_t))(*(void *)v0[7] + 224))(v25);
    v0[5] = CKShare.members.getter();
    CurrentValueSubject.send(_:)();
    swift_release();

    swift_bridgeObjectRelease();
    uint64_t v26 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<Published<CKShare>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<CKShare>.Publisher>.Iterator);
    uint64_t v27 = (void *)swift_task_alloc();
    v0[17] = v27;
    *uint64_t v27 = v0;
    v27[1] = specialized closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:);
    uint64_t v28 = v0[14];
    return MEMORY[0x1F4187C78](v0 + 2, v28, v26);
  }
  else
  {
    (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
    if (one-time initialization token for ckShareGroupSessionProvider != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Log.ckShareGroupSessionProvider);
    swift_retain();
    uint64_t v17 = Logger.logObject.getter();
    uint64_t v18 = static os_log_type_t.default.getter();
    uint64_t v19 = os_log_type_enabled(v17, v18);
    id v20 = v0[7];
    if (v19)
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      id v22 = swift_slowAlloc();
      uint64_t v31 = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 408))(v22);
      v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_1A375F000, v17, v18, "%s Stopped listening for updated CKShares", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v22, -1, -1);
      MEMORY[0x1A624F870](v21, -1, -1);
    }
    else
    {
      swift_release();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v29 = (uint64_t (*)(void))v0[1];
    return v29();
  }
}

uint64_t specialized closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[13] = a5;
  v6[14] = a6;
  v6[12] = a4;
  uint64_t v7 = type metadata accessor for AsyncSerialQueue();
  v6[15] = v7;
  v6[16] = *(void *)(v7 - 8);
  v6[17] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>);
  v6[18] = v8;
  v6[19] = *(void *)(v8 - 8);
  v6[20] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Iterator);
  v6[21] = v9;
  v6[22] = *(void *)(v9 - 8);
  v6[23] = swift_task_alloc();
  return MEMORY[0x1F4188298](specialized closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:), 0, 0);
}

uint64_t specialized closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)()
{
  id v37 = v0;
  if (one-time initialization token for ckShareGroupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)v0[13];
  uint64_t v1 = (void *)v0[14];
  uint64_t v3 = type metadata accessor for Logger();
  v0[24] = __swift_project_value_buffer(v3, (uint64_t)static Log.ckShareGroupSessionProvider);
  swift_retain_n();
  id v4 = v2;
  id v5 = v1;
  id v6 = v4;
  id v7 = v5;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = (void *)v0[13];
  uint64_t v12 = (void *)v0[14];
  uint64_t v13 = v0[12];
  if (v10)
  {
    unint64_t v33 = (void *)v0[14];
    os_log_type_t type = v9;
    uint64_t v14 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v36 = v35;
    *(_DWORD *)uint64_t v14 = 136315650;
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v13 + 408))();
    unint64_t v17 = v16;
    swift_release();
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v14 + 12) = 2080;
    v0[8] = v11;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
    id v18 = v11;
    uint64_t v19 = String.init<A>(reflecting:)();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v14 + 22) = 2080;
    v0[10] = v33;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKContainer);
    id v21 = v33;
    uint64_t v22 = String.init<A>(reflecting:)();
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v8, type, "%s Starting task to listen for CKShare updates on share: %s, container: %s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v35, -1, -1);
    MEMORY[0x1A624F870](v14, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  v0[25] = v13;
  uint64_t v25 = v0[19];
  uint64_t v24 = v0[20];
  uint64_t v26 = v0[18];
  uint64_t v27 = (void *)v0[13];
  uint64_t v28 = (void *)v0[14];
  type metadata accessor for ShareChangeObserver();
  swift_allocObject();
  uint64_t v29 = ShareChangeObserver.init(share:container:)(v27, v28);
  v0[26] = v29;
  (*(void (**)(void))(*v29 + 128))();
  MEMORY[0x1A624E3D0](v26);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  id v30 = (void *)swift_task_alloc();
  v0[27] = v30;
  *id v30 = v0;
  v30[1] = specialized closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:);
  uint64_t v31 = v0[21];
  return MEMORY[0x1F4187ED8](v0 + 2, 0, 0, v31, v0 + 3);
}

{
  uint64_t v0;
  uint64_t (*v1)();
  uint64_t v3;

  swift_task_dealloc();
  if (v0) {
    uint64_t v1 = specialized closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:);
  }
  else {
    uint64_t v1 = specialized closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:);
  }
  return MEMORY[0x1F4188298](v1, 0, 0);
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t (*v19)(void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;

  id v30 = v0;
  uint64_t v1 = (void *)v0[2];
  if (v1)
  {
    uint64_t v2 = v1;
    swift_retain_n();
    uint64_t v3 = v2;
    id v4 = Logger.logObject.getter();
    id v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      id v6 = v0[12];
      id v7 = swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v29 = v8;
      *(_DWORD *)id v7 = 136315650;
      os_log_type_t v9 = (*(uint64_t (**)(void))(*(void *)v6 + 408))();
      uint64_t v11 = v10;
      swift_release();
      *(void *)(v7 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v29);
      swift_bridgeObjectRelease();
      swift_release();
      *(_WORD *)(v7 + 12) = 2080;
      v0[5] = v3;
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShare);
      uint64_t v12 = v3;
      uint64_t v13 = String.init<A>(reflecting:)();
      *(void *)(v7 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v29);
      swift_bridgeObjectRelease();

      *(_WORD *)(v7 + 22) = 2080;
      uint64_t v15 = objc_msgSend(v12, sel_participants);
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKShareParticipant);
      unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v0[6] = v16;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CKShareParticipant]);
      unint64_t v17 = String.init<A>(reflecting:)();
      *(void *)(v7 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v29);
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A375F000, v4, v5, "%s Saw share %s updated with participants: %s", (uint8_t *)v7, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v8, -1, -1);
      MEMORY[0x1A624F870](v7, -1, -1);
    }
    else
    {
      swift_release_n();
    }
    uint64_t v22 = v0[16];
    id v21 = v0[17];
    unint64_t v23 = v0[15];
    uint64_t v24 = v0[12];
    (*(void (**)(void))(*(void *)v24 + 272))();
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = v24;
    *(void *)(v25 + 24) = v3;
    swift_retain();
    uint64_t v26 = v3;
    AsyncSerialQueue.perform(_:)();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    uint64_t v27 = (void *)swift_task_alloc();
    v0[27] = v27;
    *uint64_t v27 = v0;
    v27[1] = specialized closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:);
    uint64_t v28 = v0[21];
    return MEMORY[0x1F4187ED8](v0 + 2, 0, 0, v28, v0 + 3);
  }
  else
  {
    (*(void (**)(void, void))(v0[22] + 8))(v0[23], v0[21]);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
}

{
  void *v0;
  void *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  void *v12;
  uint64_t v13;

  uint64_t v12 = v0;
  (*(void (**)(void, void))(v0[22] + 8))(v0[23], v0[21]);
  uint64_t v1 = (void *)v0[3];
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = v0[12];
    id v5 = (uint8_t *)swift_slowAlloc();
    id v6 = swift_slowAlloc();
    uint64_t v11 = v6;
    *(_DWORD *)id v5 = 136315138;
    id v7 = (*(uint64_t (**)(void))(*(void *)v4 + 408))();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_1A375F000, v2, v3, "%s Share ended", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v6, -1, -1);
    MEMORY[0x1A624F870](v5, -1, -1);
  }
  else
  {
    swift_release();
  }
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

BOOL static CollaborationActivity.CollaborationActivityError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void CollaborationActivity.CollaborationActivityError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t CollaborationActivity.id.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CollaborationActivity.metadata.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of GroupActivityMetadata(v1 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_metadata, a1);
}

id CollaborationActivity.container.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_container);
}

uint64_t CollaborationActivity.fetchShare.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_fetchShare);
  swift_retain();
  return v1;
}

uint64_t CollaborationActivity.share.getter()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](CollaborationActivity.share.getter, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v3)(void);
  uint64_t v4;

  uint64_t v3 = (uint64_t (*)(void))(*(void *)(*(void *)(v0 + 16)
                                     + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_fetchShare)
                         + **(int **)(*(void *)(v0 + 16)
                                    + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_fetchShare));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = CollaborationActivity.share.getter;
  return v3();
}

uint64_t CollaborationActivity.share.getter(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  id v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t CollaborationActivity.sessionManager.getter()
{
  return swift_retain();
}

uint64_t CollaborationActivity.groupSessionProvider.getter()
{
  return swift_retain();
}

uint64_t CollaborationActivity.groupSessionProvider.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_groupSessionProvider);
  swift_beginAccess();
  void *v3 = a1;
  return swift_release();
}

uint64_t (*CollaborationActivity.groupSessionProvider.modify())()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t CollaborationActivity.__allocating_init(id:metadata:container:fetchShare:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_sessionManager;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  *(void *)(v12 + v13) = static BackgroundGroupSessionManager.shared;
  *(void *)(v12 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_groupSessionProvider) = 0;
  outlined init with take of GroupActivityMetadata(a3, v12 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_metadata);
  *(void *)(v12 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_container) = a4;
  uint64_t v14 = (void *)(v12 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_fetchShare);
  *uint64_t v14 = a5;
  v14[1] = a6;
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  swift_retain();
  return v12;
}

uint64_t CollaborationActivity.init(id:metadata:container:fetchShare:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_sessionManager;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  *(void *)(v6 + v13) = static BackgroundGroupSessionManager.shared;
  *(void *)(v6 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_groupSessionProvider) = 0;
  outlined init with take of GroupActivityMetadata(a3, v6 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_metadata);
  *(void *)(v6 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_container) = a4;
  uint64_t v14 = (void *)(v6 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_fetchShare);
  *uint64_t v14 = a5;
  v14[1] = a6;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  swift_retain();
  return v6;
}

uint64_t CollaborationActivity.__allocating_init(id:metadata:share:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = swift_allocObject();
  CollaborationActivity.init(id:metadata:share:)(a1, a2, a3, a4);
  return v8;
}

id CollaborationActivity.init(id:metadata:share:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_sessionManager;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  *(void *)(v4 + v9) = static BackgroundGroupSessionManager.shared;
  *(void *)(v4 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_groupSessionProvider) = 0;
  swift_retain();
  id result = objc_msgSend(a4, sel_containerID);
  if (result)
  {
    uint64_t v11 = result;
    id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F19EC8]), sel_initWithContainerID_, result);

    outlined init with take of GroupActivityMetadata(a3, v4 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_metadata);
    *(void *)(v4 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_container) = v12;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = a4;
    uint64_t v14 = (void *)(v4 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_fetchShare);
    *uint64_t v14 = &async function pointer to partial apply for closure #1 in CollaborationActivity.init(id:metadata:share:);
    v14[1] = v13;
    *(void *)(v4 + 16) = a1;
    *(void *)(v4 + 24) = a2;
    return (id)v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in CollaborationActivity.init(id:metadata:share:)(void *a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v1 + 8);
  id v3 = a1;
  return closure #1 in CollaborationActivity.init(id:metadata:share:)(v2, v1, (uint64_t)v3);
}

uint64_t CollaborationActivity.updateShare(_:)()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for UUID();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return MEMORY[0x1F4188298](CollaborationActivity.updateShare(_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_sessionManager);
  swift_retain();
  specialized IdentifiableGroupActivity.uuid.getter();
  swift_release();
  return MEMORY[0x1F4188298](CollaborationActivity.updateShare(_:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned char *v8;
  uint64_t v10;

  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  uint64_t v2 = Logger.logObject.getter();
  id v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1A375F000, v2, v3, "Updating CKShare", v4, 2u);
    MEMORY[0x1A624F870](v4, -1, -1);
  }
  uint64_t v6 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v7 = v0[3];

  lazy protocol witness table accessor for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError();
  v0[6] = swift_allocError();
  *uint64_t v8 = 5;
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  return MEMORY[0x1F4188298](CollaborationActivity.updateShare(_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

GroupActivities::CollaborationActivity::CodingKeys_optional __swiftcall CollaborationActivity.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (GroupActivities::CollaborationActivity::CodingKeys_optional)3;
}

Swift::Int CollaborationActivity.CollaborationActivityError.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t CollaborationActivity.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t CollaborationActivity.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x617461646174656DLL;
  }
  if (a1 == 1) {
    return 25705;
  }
  return 0x656E6961746E6F63;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CollaborationActivity.CodingKeys()
{
  uint64_t v1 = 25705;
  if (*v0 != 1) {
    uint64_t v1 = 0x656E6961746E6F63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x617461646174656DLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CollaborationActivity.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CollaborationActivity.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance CollaborationActivity.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CollaborationActivity.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CollaborationActivity.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t CollaborationActivity.__allocating_init(from:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  CollaborationActivity.init(from:)(a1);
  return v2;
}

uint64_t CollaborationActivity.init(from:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for GroupActivityMetadata(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CollaborationActivity.CodingKeys>);
  uint64_t v27 = *(void *)(v8 - 8);
  uint64_t v28 = v8;
  MEMORY[0x1F4188790](v8);
  BOOL v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_sessionManager;
  if (one-time initialization token for shared != -1)
  {
    uint64_t v26 = OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_sessionManager;
    swift_once();
    uint64_t v11 = v26;
  }
  uint64_t v29 = v11;
  id v30 = a1;
  *(void *)(v3 + v11) = static BackgroundGroupSessionManager.shared;
  *(void *)(v3 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_groupSessionProvider) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys();
  swift_retain();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v17 = (uint64_t)v30;
  }
  else
  {
    LOBYTE(v31) = 0;
    lazy protocol witness table accessor for type GroupActivityMetadata and conformance GroupActivityMetadata(&lazy protocol witness table cache variable for type GroupActivityMetadata and conformance GroupActivityMetadata, (void (*)(uint64_t))type metadata accessor for GroupActivityMetadata);
    uint64_t v12 = v28;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v15 = v3 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_metadata;
    outlined init with take of GroupActivityMetadata((uint64_t)v7, v3 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_metadata);
    LOBYTE(v31) = 1;
    *(void *)(v3 + 16) = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v3 + 24) = v16;
    char v33 = 2;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v17 = (uint64_t)v30;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSKeyedUnarchiver);
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CKContainerSetupInfo);
    uint64_t v18 = v31;
    unint64_t v19 = v32;
    unint64_t v20 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
    outlined consume of Data._Representation(v18, v19);
    if (v20)
    {
      uint64_t v21 = v12;
      uint64_t v22 = v17;
      id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F19EC8]), sel_initWithContainerSetupInfo_, v20);

      (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v21);
      *(void *)(v3 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_container) = v23;
      uint64_t v24 = (void *)(v3 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_fetchShare);
      void *v24 = &async function pointer to closure #1 in CollaborationActivity.init(from:);
      v24[1] = 0;
      uint64_t v13 = v22;
      goto LABEL_7;
    }
    lazy protocol witness table accessor for type CollaborationActivity.CollaborationActivityError and conformance CollaborationActivity.CollaborationActivityError();
    swift_allocError();
    *uint64_t v25 = 3;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v12);
    swift_bridgeObjectRelease();
    outlined destroy of GroupActivityMetadata(v15);
  }
  swift_release();
  swift_release();
  type metadata accessor for CollaborationActivity();
  swift_deallocPartialClassInstance();
  uint64_t v13 = v17;
LABEL_7:
  __swift_destroy_boxed_opaque_existential_1Tm(v13);
  return v3;
}

uint64_t closure #1 in CollaborationActivity.init(from:)()
{
  return MEMORY[0x1F4188298](closure #1 in CollaborationActivity.init(from:), 0, 0);
}

{
  uint64_t v0;
  unsigned char *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  lazy protocol witness table accessor for type CollaborationActivity.CollaborationActivityError and conformance CollaborationActivity.CollaborationActivityError();
  swift_allocError();
  *uint64_t v1 = 0;
  swift_willThrow();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t CollaborationActivity.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  v19[2] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CollaborationActivity.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v19[0]) = 0;
  type metadata accessor for GroupActivityMetadata(0);
  lazy protocol witness table accessor for type GroupActivityMetadata and conformance GroupActivityMetadata(&lazy protocol witness table cache variable for type GroupActivityMetadata and conformance GroupActivityMetadata, (void (*)(uint64_t))type metadata accessor for GroupActivityMetadata);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v19[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v9 = self;
    id v10 = objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_container), sel_setupInfo);
    v19[0] = 0;
    id v11 = objc_msgSend(v9, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v10, 1, v19);

    id v12 = v19[0];
    if (v11)
    {
      uint64_t v13 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;

      v19[0] = v13;
      v19[1] = v15;
      v18[7] = 2;
      lazy protocol witness table accessor for type Data and conformance Data();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      outlined consume of Data._Representation((uint64_t)v13, (unint64_t)v15);
    }
    else
    {
      uint64_t v16 = v12;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t CollaborationActivity.deactivate()()
{
  *(void *)(v1 + 48) = v0;
  return MEMORY[0x1F4188298](CollaborationActivity.deactivate(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t (*v8)(void);
  uint64_t (__cdecl *v9)();
  uint64_t v10;

  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 48) + 136))();
  *(void *)(v0 + 56) = v1;
  if (v1)
  {
    uint64_t v9 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized GroupSessionProvider.leave()
                               + async function pointer to specialized GroupSessionProvider.leave());
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v2;
    *uint64_t v2 = v0;
    v2[1] = CollaborationActivity.deactivate();
    return v9();
  }
  else
  {
    if (one-time initialization token for ckShareGroupSessionProvider != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Log.ckShareGroupSessionProvider);
    uint64_t v5 = Logger.logObject.getter();
    uint64_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1A375F000, v5, v6, "deactivate called on legacy API, but activate() was never called.", v7, 2u);
      MEMORY[0x1A624F870](v7, -1, -1);
    }

    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = CollaborationActivity.deactivate();
  }
  else {
    uint64_t v2 = CollaborationActivity.deactivate();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v18;
  uint64_t v19[2];
  void *v20;
  uint64_t v21;

  unint64_t v20 = v0;
  if (one-time initialization token for ckShareGroupSessionProvider != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[9];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.ckShareGroupSessionProvider);
  swift_retain();
  uint64_t v3 = v1;
  swift_retain();
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[9];
  uint64_t v9 = v0[6];
  if (v7)
  {
    id v10 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    v19[0] = v18;
    *(_DWORD *)id v10 = 136315394;
    v0[2] = v9;
    type metadata accessor for CollaborationActivity();
    swift_retain();
    id v11 = String.init<A>(reflecting:)();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    v0[4] = v8;
    uint64_t v13 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v14 = String.init<A>(reflecting:)();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v5, v6, "Failed to leave activity %s, error: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v18, -1, -1);
    MEMORY[0x1A624F870](v10, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  swift_willThrow();
  swift_release();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t CollaborationActivity.deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of GroupActivityMetadata(v0 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_metadata);

  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t CollaborationActivity.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of GroupActivityMetadata(v0 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_metadata);

  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

id protocol witness for CollaborationGroupActivity.container.getter in conformance CollaborationActivity()
{
  return *(id *)(*v0 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_container);
}

uint64_t protocol witness for CollaborationGroupActivity.share.getter in conformance CollaborationActivity()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(**(void **)v0 + 128) + **(int **)(**(void **)v0 + 128));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for CollaborationGroupActivity.share.getter in conformance CollaborationActivity;
  return v4();
}

uint64_t protocol witness for CollaborationGroupActivity.share.getter in conformance CollaborationActivity(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t protocol witness for GroupActivity.metadata.getter in conformance CollaborationActivity(uint64_t a1)
{
  outlined init with copy of GroupActivityMetadata(*v1 + OBJC_IVAR____TtC15GroupActivities21CollaborationActivity_metadata, a1);
  uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
  return protocol witness for GroupActivity.metadata.getter in conformance CollaborationActivity(v3);
}

uint64_t protocol witness for Identifiable.id.getter in conformance CollaborationActivity@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *a1 = *(void *)(*(void *)v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CollaborationActivity@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 184))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CollaborationActivity()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

uint64_t static CollaborationActivity.== infix(_:_:)()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v10 - v5;
  swift_retain();
  specialized IdentifiableGroupActivity.uuid.getter();
  swift_release();
  swift_retain();
  specialized IdentifiableGroupActivity.uuid.getter();
  swift_release();
  char v7 = static UUID.== infix(_:_:)();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  return v7 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CollaborationActivity()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v10 - v5;
  swift_retain();
  specialized IdentifiableGroupActivity.uuid.getter();
  swift_release();
  swift_retain();
  specialized IdentifiableGroupActivity.uuid.getter();
  swift_release();
  char v7 = static UUID.== infix(_:_:)();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  return v7 & 1;
}

uint64_t CKUserIdentity.loggingIdentity.getter()
{
  uint64_t v1 = 0x6E776F6E6B6E75;
  id v2 = objc_msgSend(v0, sel_lookupInfo);
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = objc_msgSend(v2, sel_emailAddress);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v1 = 0;
      uint64_t v7 = 0;
    }
    id v8 = objc_msgSend(v3, sel_phoneNumber);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;

      if (!v7)
      {
        if (v12)
        {

          return v10;
        }
LABEL_12:

        return 0x6E776F6E6B6E75;
      }
    }
    else if (!v7)
    {
      goto LABEL_12;
    }

    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t type metadata accessor for CollaborationActivity()
{
  uint64_t result = type metadata singleton initialization cache for CollaborationActivity;
  if (!type metadata singleton initialization cache for CollaborationActivity) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of GroupActivityMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GroupActivityMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of GroupActivityMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GroupActivityMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A3831A90()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in CollaborationActivity.init(id:metadata:share:)()
{
  id v2 = *(void **)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = partial apply for closure #1 in CollaborationActivity.init(id:metadata:share:);
  id v4 = v2;
  return partial apply for closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:)((uint64_t)v4);
}

unint64_t lazy protocol witness table accessor for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError()
{
  unint64_t result = lazy protocol witness table cache variable for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError;
  if (!lazy protocol witness table cache variable for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError;
  if (!lazy protocol witness table cache variable for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError);
  }
  return result;
}

uint64_t specialized CollaborationActivity.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x617461646174656DLL && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656E6961746E6F63 && a2 == 0xED00006F666E4972)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t lazy protocol witness table accessor for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollaborationActivity.CodingKeys and conformance CollaborationActivity.CodingKeys);
  }
  return result;
}

uint64_t outlined destroy of GroupActivityMetadata(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for GroupActivityMetadata(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type CollaborationActivity.CollaborationActivityError and conformance CollaborationActivity.CollaborationActivityError()
{
  unint64_t result = lazy protocol witness table cache variable for type CollaborationActivity.CollaborationActivityError and conformance CollaborationActivity.CollaborationActivityError;
  if (!lazy protocol witness table cache variable for type CollaborationActivity.CollaborationActivityError and conformance CollaborationActivity.CollaborationActivityError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollaborationActivity.CollaborationActivityError and conformance CollaborationActivity.CollaborationActivityError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CollaborationActivity.CollaborationActivityError and conformance CollaborationActivity.CollaborationActivityError;
  if (!lazy protocol witness table cache variable for type CollaborationActivity.CollaborationActivityError and conformance CollaborationActivity.CollaborationActivityError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollaborationActivity.CollaborationActivityError and conformance CollaborationActivity.CollaborationActivityError);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CollaborationActivity(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type GroupActivityMetadata and conformance GroupActivityMetadata(&lazy protocol witness table cache variable for type CollaborationActivity and conformance CollaborationActivity, (void (*)(uint64_t))type metadata accessor for CollaborationActivity);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for CollaborationActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for CollaborationActivity(a1, a2, a3, &lazy protocol witness table cache variable for type CollaborationActivity and conformance CollaborationActivity, (uint64_t)&protocol conformance descriptor for CollaborationActivity, &lazy protocol witness table cache variable for type CollaborationActivity and conformance CollaborationActivity);
}

{
  return instantiation function for generic protocol witness table for CollaborationActivity(a1, a2, a3, &lazy protocol witness table cache variable for type CollaborationActivity and conformance CollaborationActivity, (uint64_t)&protocol conformance descriptor for CollaborationActivity, &lazy protocol witness table cache variable for type CollaborationActivity and conformance CollaborationActivity);
}

uint64_t instantiation function for generic protocol witness table for CollaborationActivity(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type GroupActivityMetadata and conformance GroupActivityMetadata(a4, (void (*)(uint64_t))type metadata accessor for CollaborationActivity);
  uint64_t result = lazy protocol witness table accessor for type GroupActivityMetadata and conformance GroupActivityMetadata(a6, (void (*)(uint64_t))type metadata accessor for CollaborationActivity);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type GroupActivityMetadata and conformance GroupActivityMetadata(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1A3832104@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t sub_1A3832150(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 144);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t dispatch thunk of CollaborationGroupActivity.container.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CollaborationGroupActivity.share.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 24) + **(int **)(a2 + 24));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:);
  return v7(a1, a2);
}

uint64_t ObjC metadata update function for CollaborationActivity()
{
  return type metadata accessor for CollaborationActivity();
}

uint64_t type metadata completion function for CollaborationActivity()
{
  uint64_t result = type metadata accessor for GroupActivityMetadata(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for CollaborationActivity(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CollaborationActivity);
}

uint64_t dispatch thunk of CollaborationActivity.share.getter()
{
  id v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 128) + **(int **)(*(void *)v0 + 128));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in CollaborationActivity.init(id:metadata:share:);
  return v4();
}

uint64_t dispatch thunk of CollaborationActivity.groupSessionProvider.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of CollaborationActivity.groupSessionProvider.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of CollaborationActivity.groupSessionProvider.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of CollaborationActivity.__allocating_init(id:metadata:container:fetchShare:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of CollaborationActivity.__allocating_init(id:metadata:share:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of CollaborationActivity.updateShare(_:)(uint64_t a1)
{
  char v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 176) + **(int **)(*(void *)v1 + 176));
  id v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v6(a1);
}

uint64_t dispatch thunk of CollaborationActivity.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of CollaborationActivity.encode(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of CollaborationActivity.deactivate()()
{
  id v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 200) + **(int **)(*(void *)v0 + 200));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v4();
}

unsigned char *storeEnumTagSinglePayload for CollaborationActivity.CollaborationActivityError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A3832844);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CollaborationActivity.CollaborationActivityError()
{
  return &type metadata for CollaborationActivity.CollaborationActivityError;
}

unsigned char *storeEnumTagSinglePayload for CollaborationActivity.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A3832948);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CollaborationActivity.CodingKeys()
{
  return &type metadata for CollaborationActivity.CodingKeys;
}

uint64_t protocol witness for GroupActivity.metadata.getter in conformance CollaborationActivity(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in CollaborationActivity.init(id:metadata:share:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_1A383299C()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for specialized closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return specialized closure #1 in CKShareGroupSessionProvider.init(id:activity:share:container:)(a1, v4, v5, v6);
}

void _sScT15GroupActivitiesE5store2inyShy7Combine14AnyCancellableCGz_tFyycfU_yt_s5NeverOTg5TA_0()
{
}

uint64_t sub_1A3832A98()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for specialized closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return specialized closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1A3832BB0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for specialized closure #1 in closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  *(_OWORD *)(v2 + 16) = v3;
  return MEMORY[0x1F4188298](closure #1 in closure #2 in CKShareGroupSessionProvider.init(id:activity:share:container:), 0, 0);
}

uint64_t one-time initialization function for _groupActivity()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UTType?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for UTType();
  __swift_allocate_value_buffer(v3, static UTType._groupActivity);
  __swift_project_value_buffer(v3, (uint64_t)static UTType._groupActivity);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  return UTType.init(exportedAs:conformingTo:)();
}

uint64_t static UTType._groupActivity.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for _groupActivity != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for UTType();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static UTType._groupActivity);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

void NSItemProvider.registerGroupActivity<A>(preparationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.default);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v26 = v5;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = a2;
    uint64_t v14 = swift_slowAlloc();
    aBlock[0] = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v15 = a3;
    uint64_t v16 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v11, v12, "Async registerGroupActivity called for type %s", v13, 0xCu);
    swift_arrayDestroy();
    uint64_t v18 = v14;
    a2 = v25;
    MEMORY[0x1A624F870](v18, -1, -1);
    unint64_t v19 = v13;
    uint64_t v5 = v26;
    MEMORY[0x1A624F870](v19, -1, -1);
  }
  else
  {
    uint64_t v15 = a3;
  }

  if (one-time initialization token for _groupActivity != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for UTType();
  __swift_project_value_buffer(v20, (uint64_t)static UTType._groupActivity);
  uint64_t v21 = UTType.identifier.getter();
  uint64_t v22 = (void *)MEMORY[0x1A624DFA0](v21);
  swift_bridgeObjectRelease();
  id v23 = (void *)swift_allocObject();
  v23[2] = v15;
  v23[3] = a4;
  v23[4] = a1;
  v23[5] = a2;
  aBlock[4] = (uint64_t)partial apply for closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:);
  aBlock[5] = (uint64_t)v23;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed (@escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ())?, @unowned @thick Swift.AnyObject.Type?, @guaranteed [AnyHashable : Any]?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_7;
  uint64_t v24 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_registerItemForTypeIdentifier_loadHandler_, v22, v24);
  _Block_release(v24);
}

uint64_t closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  uint64_t v18 = (void *)swift_allocObject();
  void v18[2] = 0;
  v18[3] = 0;
  v18[4] = a7;
  v18[5] = a8;
  v18[6] = a5;
  v18[7] = a6;
  unsigned char v18[8] = a1;
  v18[9] = a2;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(a1);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v16, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:), (uint64_t)v18);
  return swift_release();
}

uint64_t closure #1 in closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[8] = a8;
  v8[9] = v17;
  v8[6] = a6;
  v8[7] = a7;
  uint64_t v11 = *(void *)(type metadata accessor for AnyGroupActivity(0) - 8);
  v8[10] = v11;
  v8[11] = *(void *)(v11 + 64);
  v8[12] = swift_task_alloc();
  v8[13] = swift_task_alloc();
  v8[14] = *(void *)(a8 - 8);
  uint64_t v12 = swift_task_alloc();
  v8[15] = v12;
  uint64_t v15 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v13 = (void *)swift_task_alloc();
  v8[16] = v13;
  *uint64_t v13 = v8;
  v13[1] = closure #1 in closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:);
  return v15(v12);
}

uint64_t closure #1 in closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:)()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:);
  }
  else {
    uint64_t v2 = closure #1 in closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void, void *);
  id v26;
  uint64_t (*v27)(void);
  uint64_t v29;
  uint64_t v30[2];
  uint64_t v31;
  uint64_t v32;

  uint64_t v31 = v0;
  uint64_t v1 = *(void **)(v0 + 136);
  GroupActivity.eraseToAnyGroupActivity()(*(void *)(v0 + 64), *(void *)(v0 + 72), *(uint64_t **)(v0 + 104));
  if (v1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 112) + 8))(*(void *)(v0 + 120), *(void *)(v0 + 64));
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.default);
    uint64_t v3 = v1;
    uint64_t v4 = v1;
    uint64_t v5 = Logger.logObject.getter();
    uint64_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      v30[0] = v8;
      *(_DWORD *)uint64_t v7 = 136315394;
      uint64_t v9 = _typeName(_:qualified:)();
      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2080;
      *(void *)(v0 + 24) = v1;
      uint64_t v11 = v1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v12 = String.init<A>(reflecting:)();
      *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A375F000, v5, v6, "Activity conversion failed for type %s, error: %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v8, -1, -1);
      MEMORY[0x1A624F870](v7, -1, -1);
    }
    else
    {
    }
    uint64_t v25 = *(void (**)(void, void *))(v0 + 48);
    if (v25)
    {
      uint64_t v26 = v1;
      v25(0, v1);
    }
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 112);
    uint64_t v29 = *(void *)(v0 + 120);
    uint64_t v15 = *(void *)(v0 + 96);
    uint64_t v16 = *(void *)(v0 + 104);
    uint64_t v17 = *(void *)(v0 + 80);
    unint64_t v19 = *(void *)(v0 + 56);
    uint64_t v18 = *(void *)(v0 + 64);
    uint64_t v20 = *(void *)(v0 + 48);
    outlined init with copy of AnyGroupActivity(v16, v15);
    uint64_t v21 = (*(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    uint64_t v22 = swift_allocObject();
    outlined init with take of AnyGroupActivity(v15, v22 + v21);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Future<TUConversationActivity, Error>);
    swift_allocObject();
    *(void *)(v0 + 40) = Future.init(_:)();
    id v23 = swift_allocObject();
    *(void *)(v23 + 16) = v20;
    *(void *)(v23 + 24) = v19;
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = v20;
    *(void *)(v24 + 24) = v19;
    outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v20);
    outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v20);
    lazy protocol witness table accessor for type Future<TUConversationActivity, Error> and conformance Future<A, B>();
    Publisher.sinkOnce(_:onError:)();
    swift_release();
    swift_release();
    swift_release();
    outlined destroy of AnyGroupActivity(v16);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v29, v18);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(void, void *);
  id v15;
  uint64_t (*v16)(void);
  uint64_t v18;
  void *v19;
  uint64_t v20;

  unint64_t v19 = v0;
  uint64_t v1 = (void *)v0[17];
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v18 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v9 = _typeName(_:qualified:)();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    v0[3] = v1;
    uint64_t v11 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(reflecting:)();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v5, v6, "Activity conversion failed for type %s, error: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v8, -1, -1);
    MEMORY[0x1A624F870](v7, -1, -1);
  }
  else
  {
  }
  uint64_t v14 = (void (*)(void, void *))v0[6];
  if (v14)
  {
    uint64_t v15 = v1;
    v14(0, v1);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

void closure #2 in closure #1 in closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:)(void **a1, void (*a2)(void, void *))
{
  uint64_t v3 = *a1;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  id v5 = v3;
  id v6 = v3;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v7, v8))
  {

    if (!a2) {
      return;
    }
    goto LABEL_7;
  }
  uint64_t v9 = (uint8_t *)swift_slowAlloc();
  uint64_t v10 = swift_slowAlloc();
  uint64_t v14 = v10;
  *(_DWORD *)uint64_t v9 = 136315138;
  id v11 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v12 = String.init<A>(reflecting:)();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v14);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();

  _os_log_impl(&dword_1A375F000, v7, v8, "Failed to convert from AnyGroupActivity to TUConversationActivity, error: %s", v9, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1A624F870](v10, -1, -1);
  MEMORY[0x1A624F870](v9, -1, -1);

  if (a2) {
LABEL_7:
  }
    a2(0, v3);
}

void thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSSecureCoding?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

void NSItemProvider.registerGroupActivity<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v42 = a3;
  uint64_t v46 = a1;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v41 = v6;
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v36 - v8;
  uint64_t v10 = *(void *)(a2 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v7);
  uint64_t v44 = v12;
  unint64_t v45 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v36 - v13;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.default);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v16(v14, v46, a2);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  int v19 = v18;
  BOOL v20 = os_log_type_enabled(v17, v18);
  uint64_t v43 = v16;
  if (v20)
  {
    id v39 = v4;
    uint64_t v21 = swift_slowAlloc();
    int v38 = v19;
    uint64_t v22 = (uint8_t *)v21;
    uint64_t v23 = swift_slowAlloc();
    aBlock[0] = v23;
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v36 = v22 + 4;
    id v37 = v22;
    v16(v9, (uint64_t)v14, a2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v9, 0, 1, a2);
    uint64_t v24 = >> prefix<A>(_:)((uint64_t)v9, a2);
    unint64_t v26 = v25;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v41);
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v4 = v39;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, a2);
    uint64_t v27 = v37;
    _os_log_impl(&dword_1A375F000, v17, (os_log_type_t)v38, "Synchronous registerGroupActivity called for activity %s", v37, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v23, -1, -1);
    MEMORY[0x1A624F870](v27, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, a2);
  }

  if (one-time initialization token for _groupActivity != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for UTType();
  __swift_project_value_buffer(v28, (uint64_t)static UTType._groupActivity);
  uint64_t v29 = UTType.identifier.getter();
  id v30 = (void *)MEMORY[0x1A624DFA0](v29);
  swift_bridgeObjectRelease();
  uint64_t v31 = v45;
  v43(v45, v46, a2);
  unint64_t v32 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v33 = swift_allocObject();
  uint64_t v34 = v42;
  *(void *)(v33 + 16) = a2;
  *(void *)(v33 + 24) = v34;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v33 + v32, v31, a2);
  aBlock[4] = (uint64_t)partial apply for closure #1 in NSItemProvider.registerGroupActivity<A>(_:);
  aBlock[5] = v33;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed (@escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ())?, @unowned @thick Swift.AnyObject.Type?, @guaranteed [AnyHashable : Any]?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_6_0;
  uint64_t v35 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v4, sel_registerItemForTypeIdentifier_loadHandler_, v30, v35);
  _Block_release(v35);
}

uint64_t closure #1 in NSItemProvider.registerGroupActivity<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v25[8] = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  v25[7] = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  v25[5] = *(void *)(v12 - 8);
  v25[6] = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v13 = type metadata accessor for AnyGroupActivity(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v17 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  int v19 = (char *)v25 - v18;
  GroupActivity.eraseToAnyGroupActivity()(a6, a7, (void *)((char *)v25 - v18));
  outlined init with copy of AnyGroupActivity((uint64_t)v19, (uint64_t)v17);
  unint64_t v20 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v21 = swift_allocObject();
  outlined init with take of AnyGroupActivity((uint64_t)v17, v21 + v20);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Future<TUConversationActivity, Error>);
  swift_allocObject();
  v25[10] = Future.init(_:)();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a1;
  *(void *)(v22 + 24) = a2;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a1;
  *(void *)(v23 + 24) = a2;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(a1);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(a1);
  lazy protocol witness table accessor for type Future<TUConversationActivity, Error> and conformance Future<A, B>();
  Publisher.sinkOnce(_:onError:)();
  swift_release();
  swift_release();
  swift_release();
  return outlined destroy of AnyGroupActivity((uint64_t)v19);
}

id NSItemProvider.loadGroupActivity(completionHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_msgSend(self, sel_progressWithTotalUnitCount_, 100);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = a1;
  v10[5] = a2;
  v10[6] = v2;
  v10[7] = v8;
  swift_retain();
  id v11 = v2;
  id v12 = v8;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in NSItemProvider.loadGroupActivity(completionHandler:), (uint64_t)v10);
  swift_release();
  return v12;
}

uint64_t closure #1 in NSItemProvider.loadGroupActivity(completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyGroupActivity?);
  v7[9] = swift_task_alloc();
  v7[10] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in NSItemProvider.loadGroupActivity(completionHandler:), 0, 0);
}

uint64_t closure #1 in NSItemProvider.loadGroupActivity(completionHandler:)()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = swift_task_alloc();
  v0[11] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[12] = v3;
  unint64_t v4 = type metadata accessor for TUConversationActivity();
  void *v3 = v0;
  v3[1] = closure #1 in NSItemProvider.loadGroupActivity(completionHandler:);
  return MEMORY[0x1F4188160](v0 + 2, 0, 0, 0xD000000000000013, 0x80000001A3901A80, closure #1 in NSItemProvider.loadGroupActivity()partial apply, v2, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in NSItemProvider.loadGroupActivity(completionHandler:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = closure #1 in NSItemProvider.loadGroupActivity(completionHandler:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void (*v14)(uint64_t, void);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, void *);
  uint64_t v18;
  id v19;
  uint64_t (*v20)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  uint64_t v23 = v0;
  uint64_t v1 = *(void **)(v0 + 104);
  AnyGroupActivity.init(tuConversationActivity:)(*(void **)(v0 + 16), *(char **)(v0 + 80));
  if (v1)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.default);
    uint64_t v3 = v1;
    unint64_t v4 = v1;
    uint64_t v5 = Logger.logObject.getter();
    uint64_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      id v8 = swift_slowAlloc();
      uint64_t v22 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      *(void *)(v0 + 24) = v1;
      uint64_t v9 = v1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v10 = String.init<A>(reflecting:)();
      *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A375F000, v5, v6, "Failed to load GroupActivity, error %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v8, -1, -1);
      MEMORY[0x1A624F870](v7, -1, -1);
    }
    else
    {
    }
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v17 = *(void (**)(uint64_t, void *))(v0 + 40);
    uint64_t v18 = type metadata accessor for AnyGroupActivity(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v16, 1, 1, v18);
    int v19 = v1;
    v17(v16, v1);

    outlined destroy of AnyGroupActivity?(v16);
  }
  else
  {
    id v12 = *(void *)(v0 + 80);
    uint64_t v13 = *(void **)(v0 + 64);
    uint64_t v14 = *(void (**)(uint64_t, void))(v0 + 40);
    uint64_t v15 = type metadata accessor for AnyGroupActivity(0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 0, 1, v15);
    v14(v12, 0);
    outlined destroy of AnyGroupActivity?(v12);
    objc_msgSend(v13, sel_setCompletedUnitCount_, objc_msgSend(v13, sel_totalUnitCount));
  }
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, void *);
  uint64_t v14;
  id v15;
  uint64_t (*v16)(void);
  uint64_t v18;
  void *v19;
  uint64_t v20;

  int v19 = v0;
  swift_task_dealloc();
  uint64_t v1 = (void *)v0[13];
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  uint64_t v3 = v1;
  unint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    id v8 = swift_slowAlloc();
    uint64_t v18 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    v0[3] = v1;
    uint64_t v9 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v10 = String.init<A>(reflecting:)();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v5, v6, "Failed to load GroupActivity, error %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v8, -1, -1);
    MEMORY[0x1A624F870](v7, -1, -1);
  }
  else
  {
  }
  id v12 = v0[9];
  uint64_t v13 = (void (*)(uint64_t, void *))v0[5];
  uint64_t v14 = type metadata accessor for AnyGroupActivity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v12, 1, 1, v14);
  uint64_t v15 = v1;
  v13(v12, v1);

  outlined destroy of AnyGroupActivity?(v12);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t NSItemProvider.loadGroupActivity()(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return MEMORY[0x1F4188298](NSItemProvider.loadGroupActivity(), 0, 0);
}

uint64_t NSItemProvider.loadGroupActivity()()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = swift_task_alloc();
  v0[5] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[6] = v3;
  unint64_t v4 = type metadata accessor for TUConversationActivity();
  void *v3 = v0;
  v3[1] = NSItemProvider.loadGroupActivity();
  return MEMORY[0x1F4188160](v0 + 2, 0, 0, 0xD000000000000013, 0x80000001A3901A80, partial apply for closure #1 in NSItemProvider.loadGroupActivity(), v2, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NSItemProvider.loadGroupActivity();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = NSItemProvider.loadGroupActivity();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  AnyGroupActivity.init(tuConversationActivity:)(*(void **)(v0 + 16), *(char **)(v0 + 24));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 24) = v0;
  return MEMORY[0x1F4188298](NSItemProvider.loadGroupActivity(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = v0[3];
  uint64_t v2 = swift_task_alloc();
  v0[4] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  unint64_t v4 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivity);
  void *v3 = v0;
  v3[1] = NSItemProvider.loadGroupActivity();
  return MEMORY[0x1F4188160](v0 + 2, 0, 0, 0xD000000000000013, 0x80000001A3901A80, partial apply for closure #1 in NSItemProvider.loadGroupActivity(), v2, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NSItemProvider.loadGroupActivity();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = AnyGroupActivity.tuConversationActivity<A>(as:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1A3835710()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:)(a1, a2, a3, a4, v4[4], v4[5], v4[2], v4[3]);
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t sub_1A383576C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x1F4186498](v0, v4, v5);
}

uint64_t partial apply for closure #1 in NSItemProvider.registerGroupActivity<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in NSItemProvider.registerGroupActivity<A>(_:)(a1, a2, a3, a4, v4+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v4 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v4 + 16) - 8) + 80)), *(void *)(v4 + 16), *(void *)(v4 + 24));
}

uint64_t sub_1A3835834()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #1 in NSItemProvider.loadGroupActivity(completionHandler:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return closure #1 in NSItemProvider.loadGroupActivity(completionHandler:)(a1, v4, v5, v6, v7, v9, v8);
}

void partial apply for closure #1 in NSItemProvider.loadGroupActivity()(uint64_t a1)
{
  closure #1 in NSItemProvider.loadGroupActivity()(a1, *(void **)(v1 + 16));
}

uint64_t outlined destroy of AnyGroupActivity?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyGroupActivity?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *partial apply for closure #2 in closure #1 in NSItemProvider.registerGroupActivity<A>(_:)(void *result)
{
  uint64_t v2 = *(uint64_t (**)(void, void))(v1 + 16);
  if (v2) {
    return (void *)v2(0, *result);
  }
  return result;
}

uint64_t sub_1A3835A0C()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSSecureCoding?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSSecureCoding?, @unowned NSError?) -> ()(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1A3835A4C()
{
  swift_unknownObjectRelease();
  swift_release();
  if (*(void *)(v0 + 64)) {
    swift_release();
  }

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t partial apply for closure #1 in closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:)(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = (int *)v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v9 = v1[9];
  id v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *id v11 = v2;
  v11[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:)(a1, v5, v6, v7, v8, v10, v9, v4);
}

void *partial apply for closure #1 in closure #1 in NSItemProvider.registerGroupActivity<A>(_:)(void *result)
{
  uint64_t v2 = *(uint64_t (**)(void, void))(v1 + 16);
  if (v2) {
    return (void *)v2(*result, 0);
  }
  return result;
}

uint64_t objectdestroy_19Tm_0()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #2 in closure #1 in closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:)(void **a1)
{
  closure #2 in closure #1 in closure #1 in NSItemProvider.registerGroupActivity<A>(preparationHandler:)(a1, *(void (**)(void, void *))(v1 + 16));
}

uint64_t CodingUserInfoKey.typedPayloadDecoderMap.unsafeMutableAddressor()
{
  if (one-time initialization token for typedPayloadDecoderMap != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for CodingUserInfoKey();

  return __swift_project_value_buffer(v0, (uint64_t)static CodingUserInfoKey.typedPayloadDecoderMap);
}

uint64_t one-time initialization function for typedPayloadDecoderMap()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingUserInfoKey?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for CodingUserInfoKey();
  __swift_allocate_value_buffer(v3, static CodingUserInfoKey.typedPayloadDecoderMap);
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static CodingUserInfoKey.typedPayloadDecoderMap);
  CodingUserInfoKey.init(rawValue:)();
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  }
  __break(1u);
  return result;
}

uint64_t static CodingUserInfoKey.typedPayloadDecoderMap.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for typedPayloadDecoderMap != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for CodingUserInfoKey();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static CodingUserInfoKey.typedPayloadDecoderMap);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t TypedPayloadDecoder.decode(fromDecodingContainer:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result = swift_dynamicCastMetatype();
  if (result)
  {
    __break(1u);
  }
  else
  {
    a4[3] = a1;
    a4[4] = a2;
    a4[5] = a3;
    __swift_allocate_boxed_opaque_existential_1(a4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TypedPayloadBox.CodingKeys>);
    uint64_t result = KeyedDecodingContainer.decode<A>(_:forKey:)();
    if (v4) {
      return __swift_deallocate_boxed_opaque_existential_1((uint64_t)a4);
    }
  }
  return result;
}

uint64_t protocol witness for TypedPayloadDecoding.decode(fromDecodingContainer:) in conformance TypedPayloadDecoder<A>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  return TypedPayloadDecoder.decode(fromDecodingContainer:)(a1[2], a1[3], a1[4], a2);
}

uint64_t dispatch thunk of TypedPayloadDecoding.decode(fromDecodingContainer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t type metadata accessor for TypedPayloadDecoder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t BroadcastOptions.rawValue.getter()
{
  return *(void *)v0;
}

GroupActivities::BroadcastOptions __swiftcall BroadcastOptions.init(rawValue:)(GroupActivities::BroadcastOptions rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t BroadcastOptions.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static BroadcastOptions.mirroredVideo.getter(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t BroadcastOptions.tuBroadcastingAttributes.getter()
{
  return *(void *)v0;
}

unint64_t lazy protocol witness table accessor for type BroadcastOptions and conformance BroadcastOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions;
  if (!lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions;
  if (!lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions;
  if (!lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions;
  if (!lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BroadcastOptions and conformance BroadcastOptions);
  }
  return result;
}

ValueMetadata *type metadata accessor for BroadcastOptions()
{
  return &type metadata for BroadcastOptions;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

double AnySpatialTemplateRole.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of TypedPayloadDecoding((long long *)a1, (uint64_t)v4);
    outlined init with take of TypedPayloadDecoding(v4, a2);
  }
  else
  {
    outlined destroy of SpatialTemplateRole?(a1);
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t outlined destroy of SpatialTemplateRole?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTemplateRole?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AnySpatialTemplateRole.spatialTemplateRole.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AudioSessionAssertionManager(v1, a1);
}

uint64_t AnySpatialTemplateRole.hash(into:)()
{
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int AnySpatialTemplateRole.hashValue.getter()
{
  Hasher.init(_seed:)();
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnySpatialTemplateRole()
{
  Hasher.init(_seed:)();
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnySpatialTemplateRole()
{
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnySpatialTemplateRole()
{
  Hasher.init(_seed:)();
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t specialized static AnySpatialTemplateRole.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of AudioSessionAssertionManager(a1, (uint64_t)v26);
  outlined init with copy of AudioSessionAssertionManager(a2, (uint64_t)v23);
  uint64_t v3 = v27;
  uint64_t v4 = v28;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  uint64_t v7 = v6;
  uint64_t v8 = v24;
  uint64_t v9 = v25;
  __swift_project_boxed_opaque_existential_1(v23, v24);
  if (v5 == (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9) && v7 == v10)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v13 = 0;
    if ((v12 & 1) == 0) {
      goto LABEL_9;
    }
  }
  uint64_t v14 = __swift_project_boxed_opaque_existential_1(v26, v27);
  MEMORY[0x1F4188790](v14);
  (*(void (**)(unsigned char *))(v16 + 16))(&v21[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  AnyHashable.init<A>(_:)();
  uint64_t v17 = __swift_project_boxed_opaque_existential_1(v23, v24);
  MEMORY[0x1F4188790](v17);
  (*(void (**)(unsigned char *))(v19 + 16))(&v21[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  AnyHashable.init<A>(_:)();
  char v13 = MEMORY[0x1A624E850](v22, v21);
  outlined destroy of AnyHashable((uint64_t)v21);
  outlined destroy of AnyHashable((uint64_t)v22);
LABEL_9:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
  return v13 & 1;
}

unint64_t lazy protocol witness table accessor for type AnySpatialTemplateRole and conformance AnySpatialTemplateRole()
{
  unint64_t result = lazy protocol witness table cache variable for type AnySpatialTemplateRole and conformance AnySpatialTemplateRole;
  if (!lazy protocol witness table cache variable for type AnySpatialTemplateRole and conformance AnySpatialTemplateRole)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnySpatialTemplateRole and conformance AnySpatialTemplateRole);
  }
  return result;
}

ValueMetadata *type metadata accessor for AnySpatialTemplateRole()
{
  return &type metadata for AnySpatialTemplateRole;
}

uint64_t GroupSessionProviderObserver.groupSessionService.getter()
{
  swift_beginAccess();
  return MEMORY[0x1A624F980](v0 + 16);
}

uint64_t GroupSessionProviderObserver.groupSessionService.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*GroupSessionProviderObserver.groupSessionService.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1A624F980](v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  v3[3] = v4;
  v3[4] = v5;
  return PresenceGroupSessionProviderObserver.groupSessionService.modify;
}

uint64_t GroupSessionProviderObserver.provider.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t GroupSessionProviderObserver.membershipObserver.getter()
{
  return swift_retain();
}

uint64_t GroupSessionProviderObserver.membershipObserver.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 48) = a1;
  return swift_release();
}

uint64_t (*GroupSessionProviderObserver.membershipObserver.modify())()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t GroupSessionProviderObserver.unknownParticipants.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t GroupSessionProviderObserver.unknownParticipants.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 56) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*GroupSessionProviderObserver.unknownParticipants.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

void *GroupSessionProviderObserver.__allocating_init(provider:groupSessionService:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = specialized GroupSessionProviderObserver.init(provider:groupSessionService:)(a1, a2, a3, v8, ObjectType, a4);
  swift_unknownObjectRelease();
  return v10;
}

void *GroupSessionProviderObserver.init(provider:groupSessionService:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = specialized GroupSessionProviderObserver.init(provider:groupSessionService:)(a1, a2, a3, v4, ObjectType, a4);
  swift_unknownObjectRelease();
  return v10;
}

Swift::Void __swiftcall GroupSessionProviderObserver.start()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v41 = (char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Set<AddressableMember>, Never>>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = MEMORY[0x1F4188790](v4);
  uint64_t v42 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v38 - v8;
  if (one-time initialization token for groupSessionProviderObserver != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Log.groupSessionProviderObserver);
  swift_retain_n();
  char v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v38[1] = v11;
    uint64_t v14 = swift_slowAlloc();
    uint64_t v40 = v4;
    uint64_t v15 = (uint8_t *)v14;
    uint64_t v16 = swift_slowAlloc();
    id v39 = v9;
    *(_DWORD *)uint64_t v15 = 136315138;
    uint64_t v44 = v16;
    long long v43 = *(_OWORD *)(v1 + 32);
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionProvider);
    uint64_t v17 = String.init<A>(reflecting:)();
    *(void *)&long long v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v44);
    uint64_t v9 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A375F000, v12, v13, "ProviderObserver for %s started", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v16, -1, -1);
    uint64_t v19 = v15;
    uint64_t v4 = v40;
    MEMORY[0x1A624F870](v19, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v1 + 136))();
  swift_release();
  if (v20)
  {
    swift_retain_n();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      uint64_t v44 = v24;
      long long v43 = *(_OWORD *)(v1 + 32);
      swift_unknownObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionProvider);
      uint64_t v25 = String.init<A>(reflecting:)();
      *(void *)&long long v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1A375F000, v21, v22, "ProviderObserver for %s already started.", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v24, -1, -1);
      MEMORY[0x1A624F870](v23, -1, -1);
    }
    else
    {
      swift_release_n();
    }
  }
  else
  {
    uint64_t v27 = *(void *)(v1 + 40);
    uint64_t ObjectType = swift_getObjectType();
    *(void *)&long long v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 72))(ObjectType, v27);
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Set<AddressableMember>, Never>);
    uint64_t v30 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type CurrentValueSubject<Set<AddressableMember>, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<Set<AddressableMember>, Never>);
    MEMORY[0x1A624DD30](v29, v30);
    swift_release();
    uint64_t v31 = type metadata accessor for TaskPriority();
    uint64_t v32 = (uint64_t)v41;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v41, 1, 1, v31);
    uint64_t v33 = swift_allocObject();
    swift_weakInit();
    uint64_t v34 = v42;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v42, v9, v4);
    unint64_t v35 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = 0;
    *(void *)(v36 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v36 + v35, v34, v4);
    *(void *)(v36 + ((v6 + v35 + 7) & 0xFFFFFFFFFFFFFFF8)) = v33;
    uint64_t v37 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v32, (uint64_t)&async function pointer to partial apply for closure #1 in GroupSessionProviderObserver.start(), v36);
    (*(void (**)(uint64_t))(*(void *)v1 + 144))(v37);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  }
}

uint64_t closure #1 in GroupSessionProviderObserver.start()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[16] = a4;
  v5[17] = a5;
  uint64_t v6 = type metadata accessor for UUID();
  v5[18] = v6;
  v5[19] = *(void *)(v6 - 8);
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Set<AddressableMember>, Never>>.Iterator);
  v5[22] = v7;
  v5[23] = *(void *)(v7 - 8);
  v5[24] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in GroupSessionProviderObserver.start(), 0, 0);
}

uint64_t closure #1 in GroupSessionProviderObserver.start()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Set<AddressableMember>, Never>>);
  AsyncPublisher.makeAsyncIterator()();
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v1 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<Set<AddressableMember>, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Set<AddressableMember>, Never>>.Iterator);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in GroupSessionProviderObserver.start();
  uint64_t v3 = *(void *)(v0 + 176);
  return MEMORY[0x1F4187C78](v0 + 64, v3, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in GroupSessionProviderObserver.start();
  }
  else {
    uint64_t v2 = closure #1 in GroupSessionProviderObserver.start();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;

  *(void *)(v0 + 216) = *(void *)(v0 + 64);
  return MEMORY[0x1F4188298](closure #1 in GroupSessionProviderObserver.start(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t (*v25)(void);
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;

  uint64_t v1 = v0[27];
  if (v1)
  {
    if (one-time initialization token for groupSessionProviderObserver != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    v0[28] = __swift_project_value_buffer(v2, (uint64_t)static Log.groupSessionProviderObserver);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      v0[13] = v6;
      *(_DWORD *)uint64_t v5 = 136315394;
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        v0[15] = Strong;
        type metadata accessor for GroupSessionProviderObserver();
        uint64_t v8 = String.init<A>(reflecting:)();
        uint64_t v10 = v9;
      }
      else
      {
        uint64_t v10 = 0xE300000000000000;
        uint64_t v8 = 7104878;
      }
      *(void *)(v5 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, v0 + 13);
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2080;
      v0[14] = v1;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<AddressableMember>);
      uint64_t v11 = String.init<A>(reflecting:)();
      *(void *)(v5 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v0 + 13);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v3, v4, "%s received updated members: %s", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v6, -1, -1);
      MEMORY[0x1A624F870](v5, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
    os_log_type_t v13 = swift_weakLoadStrong();
    v0[29] = v13;
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 112))(v13);
      v0[30] = v15;
      if (v15)
      {
        uint64_t v17 = v16;
        unint64_t v18 = v0[21];
        v0[31] = v16;
        uint64_t ObjectType = swift_getObjectType();
        v0[32] = ObjectType;
        uint64_t v20 = *(void *)(v14 + 40);
        uint64_t v21 = swift_getObjectType();
        GroupSessionProvider.uuid.getter(v21, v20, v18);
        unint64_t v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 40) + **(int **)(v17 + 40));
        os_log_type_t v22 = (void *)swift_task_alloc();
        v0[33] = v22;
        *os_log_type_t v22 = v0;
        v22[1] = closure #1 in GroupSessionProviderObserver.start();
        uint64_t v23 = v0[21];
        return v26(v23, v1, ObjectType, v17);
      }
      (*(void (**)(void, void))(v0[23] + 8))(v0[24], v0[22]);
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      (*(void (**)(void, void))(v0[23] + 8))(v0[24], v0[22]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    (*(void (**)(void, void))(v0[23] + 8))(v0[24], v0[22]);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v0 + 72) = *(void *)(v0 + 208);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v2 = (void *)*v1;
  v2[34] = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[21];
  uint64_t v4 = v2[19];
  uint64_t v5 = v2[18];
  if (v0)
  {
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v2[36] = v6;
    v2[37] = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v6(v3, v5);
    swift_bridgeObjectRelease();
    uint64_t v7 = closure #1 in GroupSessionProviderObserver.start();
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v7 = closure #1 in GroupSessionProviderObserver.start();
  }
  return MEMORY[0x1F4188298](v7, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  swift_release();
  swift_unknownObjectRelease();
  uint64_t v1 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<Set<AddressableMember>, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Set<AddressableMember>, Never>>.Iterator);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in GroupSessionProviderObserver.start();
  uint64_t v3 = *(void *)(v0 + 176);
  return MEMORY[0x1F4187C78](v0 + 64, v3, v1);
}

{
  void *v0;
  void *v1;
  void *v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v2[36];
  uint64_t v4 = v2[20];
  uint64_t v5 = v2[18];
  if (v0)
  {

    v3(v4, v5);
    uint64_t v6 = closure #1 in GroupSessionProviderObserver.start();
  }
  else
  {
    v3(v4, v5);
    uint64_t v6 = closure #1 in GroupSessionProviderObserver.start();
  }
  return MEMORY[0x1F4188298](v6, 0, 0);
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  void *v23;
  uint64_t v24;

  uint64_t v23 = v0;
  uint64_t v1 = (void *)v0[34];
  uint64_t v2 = v1;
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (void *)v0[34];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    os_log_type_t v22 = v8;
    v0[11] = v6;
    uint64_t v9 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v10 = String.init<A>(reflecting:)();
    v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v4, v5, "Failed to update members for reason: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v8, -1, -1);
    MEMORY[0x1A624F870](v7, -1, -1);
  }
  else
  {
    char v12 = (void *)v0[34];
  }
  os_log_type_t v13 = v0[31];
  uint64_t v14 = v0[20];
  uint64_t v15 = *(void *)(v0[29] + 40);
  uint64_t ObjectType = swift_getObjectType();
  GroupSessionProvider.uuid.getter(ObjectType, v15, v14);
  uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 32) + **(int **)(v13 + 32));
  uint64_t v17 = (void *)swift_task_alloc();
  v0[35] = v17;
  *uint64_t v17 = v0;
  v17[1] = closure #1 in GroupSessionProviderObserver.start();
  unint64_t v18 = v0[32];
  uint64_t v19 = v0[20];
  return v21(v19, v18, v13);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  id v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = (void *)v0[34];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[24];
  uint64_t v4 = v0[22];
  uint64_t v5 = *(void *)(v0[29] + 40);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  v0[10] = v1;
  uint64_t v7 = v1;
  CurrentValueSubject.send(_:)();
  swift_release();

  swift_willThrow();
  swift_release();
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t GroupSessionProviderObserver.handleUnknownParticipants(unknownParticipants:)(uint64_t a1)
{
  *(void *)(v2 + 144) = a1;
  *(void *)(v2 + 152) = v1;
  return MEMORY[0x1F4188298](GroupSessionProviderObserver.handleUnknownParticipants(unknownParticipants:), 0, 0);
}

uint64_t GroupSessionProviderObserver.handleUnknownParticipants(unknownParticipants:)()
{
  *(_OWORD *)(v0 + 128) = *(_OWORD *)(*(void *)(v0 + 152) + 32);
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionProvider);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ErrorRecoveryGroupSessionProvider);
  if (!swift_dynamicCast())
  {
    *(void *)(v0 + 88) = 0;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    outlined destroy of ErrorRecoveryGroupSessionProvider?(v0 + 56);
LABEL_9:
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v25 = (void *)(v0 + 16);
  uint64_t v3 = outlined init with take of TypedPayloadDecoding((long long *)(v0 + 56), v0 + 16);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 160);
  uint64_t v5 = v4(v3);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 176);
  swift_bridgeObjectRetain();
  uint64_t v7 = (uint64_t (*)(uint64_t, void))v6(v0 + 96);
  specialized Set.formUnion<A>(_:)(v2);
  uint64_t v8 = v7(v0 + 96, 0);
  uint64_t v9 = v4(v8);
  char v10 = specialized static Set.== infix(_:_:)(v5, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v10)
  {
    if (one-time initialization token for groupSessionProviderObserver != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Log.groupSessionProviderObserver);
    char v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_1A375F000, v12, v13, "No change in unknown participants", v14, 2u);
      MEMORY[0x1A624F870](v14, -1, -1);
    }

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
    goto LABEL_9;
  }
  if (one-time initialization token for groupSessionProviderObserver != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Log.groupSessionProviderObserver);
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl(&dword_1A375F000, v18, v19, "Detected a difference in unknown participants, fetching membership update.", v20, 2u);
    MEMORY[0x1A624F870](v20, -1, -1);
  }

  uint64_t v21 = *(void *)(v0 + 40);
  uint64_t v22 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1(v25, v21);
  uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v22 + 8) + **(int **)(v22 + 8));
  uint64_t v23 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v23;
  *uint64_t v23 = v0;
  v23[1] = GroupSessionProviderObserver.handleUnknownParticipants(unknownParticipants:);
  return v24(v21, v22);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = GroupSessionProviderObserver.handleUnknownParticipants(unknownParticipants:);
  }
  else {
    uint64_t v2 = AttachmentLedgerTopic.requestUploadToken();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized Set.formUnion<A>(_:)(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v13 >= v7) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v3 + 8 * v13);
    ++v2;
    if (!v14)
    {
      int64_t v2 = v13 + 1;
      if (v13 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v14 = *(void *)(v3 + 8 * v2);
      if (!v14)
      {
        int64_t v2 = v13 + 2;
        if (v13 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v3 + 8 * v2);
        if (!v14)
        {
          int64_t v2 = v13 + 3;
          if (v13 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v14 = *(void *)(v3 + 8 * v2);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v14 - 1) & v14;
    unint64_t v9 = __clz(__rbit64(v14)) + (v2 << 6);
LABEL_5:
    char v10 = (Swift::Int *)(*(void *)(v1 + 48) + 16 * v9);
    Swift::Int v11 = *v10;
    Swift::Int v12 = v10[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v16, v11, v12);
    unint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v15 = v13 + 4;
  if (v15 < v7)
  {
    unint64_t v14 = *(void *)(v3 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v2 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_27;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v3 + 8 * v2);
        ++v15;
        if (v14) {
          goto LABEL_22;
        }
      }
    }
    int64_t v2 = v15;
    goto LABEL_22;
  }
LABEL_23:

  return swift_release();
}

uint64_t GroupSessionProviderObserver.deinit()
{
  outlined destroy of weak SystemCoordinatorHostDelegate?(v0 + 16);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t GroupSessionProviderObserver.__deallocating_deinit()
{
  outlined destroy of weak SystemCoordinatorHostDelegate?(v0 + 16);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v29 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v30 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v31 = v3;
      unint64_t v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }
    int64_t v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v10);
    int64_t v12 = v3 + 1;
    if (!v11)
    {
      int64_t v12 = v3 + 2;
      if (v3 + 2 >= v30) {
        return 1;
      }
      unint64_t v11 = *(void *)(v29 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v3 + 3;
        if (v3 + 3 >= v30) {
          return 1;
        }
        unint64_t v11 = *(void *)(v29 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v3 + 4;
          if (v3 + 4 >= v30) {
            return 1;
          }
          unint64_t v11 = *(void *)(v29 + 8 * v12);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_25:
    unint64_t v6 = (v11 - 1) & v11;
    int64_t v31 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    uint64_t v14 = result;
    int64_t v15 = (uint64_t *)(*(void *)(result + 48) + 16 * v9);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v20 = v18 & ~v19;
    if (((*(void *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
      goto LABEL_41;
    }
    uint64_t v21 = *(void *)(a2 + 48);
    uint64_t v22 = (void *)(v21 + 16 * v20);
    BOOL v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v24 = ~v19;
      for (unint64_t i = v20 + 1; ; unint64_t i = v26 + 1)
      {
        uint64_t v26 = i & v24;
        if (((*(void *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0) {
          break;
        }
        uint64_t v27 = (void *)(v21 + 16 * v26);
        BOOL v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_7;
        }
      }
LABEL_41:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    unint64_t result = v14;
    int64_t v3 = v31;
  }
  uint64_t v13 = v3 + 5;
  if (v3 + 5 >= v30) {
    return 1;
  }
  unint64_t v11 = *(void *)(v29 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v3 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_25;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

void *specialized GroupSessionProviderObserver.init(provider:groupSessionService:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  a4[3] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v10 = MEMORY[0x1E4FBC870];
  a4[6] = 0;
  a4[7] = v10;
  a4[4] = a1;
  a4[5] = a2;
  swift_beginAccess();
  a4[3] = a6;
  swift_unknownObjectWeakAssign();
  return a4;
}

uint64_t sub_1A3838CA8()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1A3838CE0()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Set<AddressableMember>, Never>>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t partial apply for closure #1 in GroupSessionProviderObserver.start()(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<Set<AddressableMember>, Never>>)
                 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in GroupSessionProviderObserver.start()(a1, v6, v7, v8, v9);
}

uint64_t outlined destroy of ErrorRecoveryGroupSessionProvider?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ErrorRecoveryGroupSessionProvider?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A3838F54@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 112))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A3838FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 120);
  uint64_t v4 = swift_unknownObjectRetain();
  return v3(v4, v2);
}

uint64_t sub_1A3839004@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 136))();
  *a2 = result;
  return result;
}

uint64_t sub_1A3839050(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 144);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A38390A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160))();
  *a2 = result;
  return result;
}

uint64_t sub_1A38390F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 168);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t type metadata accessor for GroupSessionProviderObserver()
{
  return self;
}

uint64_t method lookup function for GroupSessionProviderObserver(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for GroupSessionProviderObserver);
}

uint64_t dispatch thunk of GroupSessionProviderObserver.groupSessionService.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of GroupSessionProviderObserver.groupSessionService.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of GroupSessionProviderObserver.groupSessionService.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of GroupSessionProviderObserver.membershipObserver.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of GroupSessionProviderObserver.membershipObserver.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of GroupSessionProviderObserver.membershipObserver.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of GroupSessionProviderObserver.unknownParticipants.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of GroupSessionProviderObserver.unknownParticipants.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of GroupSessionProviderObserver.unknownParticipants.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of GroupSessionProviderObserver.__allocating_init(provider:groupSessionService:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of GroupSessionProviderObserver.start()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of GroupSessionProviderObserver.handleUnknownParticipants(unknownParticipants:)(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 200) + **(int **)(*(void *)v1 + 200));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v6(a1);
}

Swift::Int InternalGroupSessionProvider.groupSessions(for:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = a1;
  id v8 = objc_msgSend(a1, sel_activitySessions);
  type metadata accessor for TUConversationActivitySession();
  _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0(&lazy protocol witness table cache variable for type TUConversationActivitySession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for TUConversationActivitySession);
  uint64_t v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v9 & 0xC000000000000001) != 0)
  {
    uint64_t v10 = MEMORY[0x1E4FBC870];
    uint64_t v36 = MEMORY[0x1E4FBC870];
    __CocoaSet.makeIterator()();
    uint64_t v11 = __CocoaSet.Iterator.next()();
    if (v11)
    {
      uint64_t v29 = a2;
      int64_t v30 = v7;
      uint64_t v31 = a3;
      uint64_t v32 = 0;
      uint64_t v33 = v4;
      do
      {
        uint64_t v34 = v11;
        swift_dynamicCast();
        if (objc_msgSend(v35, sel_state) && objc_msgSend(v35, sel_state) != (id)1)
        {
        }
        else
        {
          id v12 = v35;
          uint64_t v13 = v36;
          unint64_t v14 = *(void *)(v36 + 16);
          if (*(void *)(v36 + 24) <= v14)
          {
            specialized _NativeSet.resize(capacity:)(v14 + 1, &demangling cache variable for type metadata for _SetStorage<TUConversationActivitySession>);
            uint64_t v13 = v36;
          }
          Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v13 + 40));
          uint64_t v16 = v13 + 56;
          uint64_t v17 = -1 << *(unsigned char *)(v13 + 32);
          unint64_t v18 = result & ~v17;
          unint64_t v19 = v18 >> 6;
          if (((-1 << v18) & ~*(void *)(v13 + 56 + 8 * (v18 >> 6))) != 0)
          {
            unint64_t v20 = __clz(__rbit64((-1 << v18) & ~*(void *)(v13 + 56 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            char v21 = 0;
            unint64_t v22 = (unint64_t)(63 - v17) >> 6;
            do
            {
              if (++v19 == v22 && (v21 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              BOOL v23 = v19 == v22;
              if (v19 == v22) {
                unint64_t v19 = 0;
              }
              v21 |= v23;
              uint64_t v24 = *(void *)(v16 + 8 * v19);
            }
            while (v24 == -1);
            unint64_t v20 = __clz(__rbit64(~v24)) + (v19 << 6);
          }
          *(void *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
          *(void *)(*(void *)(v13 + 48) + 8 * v20) = v12;
          ++*(void *)(v13 + 16);
        }
        uint64_t v11 = __CocoaSet.Iterator.next()();
      }
      while (v11);
      uint64_t v10 = v36;
      uint64_t v4 = v33;
      uint64_t v7 = v30;
      a3 = v31;
      a2 = v29;
    }
    uint64_t v25 = swift_release();
  }
  else
  {
    uint64_t v25 = specialized _NativeSet.filter(_:)(v9);
    uint64_t v10 = v25;
  }
  MEMORY[0x1F4188790](v25);
  v28[2] = a2;
  v28[3] = a3;
  v28[4] = v7;
  v28[5] = v4;
  specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, void *))partial apply for closure #2 in InternalGroupSessionProvider.groupSessions(for:), (uint64_t)v28, v10);
  uint64_t v27 = v26;
  swift_release();
  return v27;
}

void closure #2 in InternalGroupSessionProvider.groupSessions(for:)(id *a1@<X0>, void *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v37 = a5;
  uint64_t v9 = type metadata accessor for UUID();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v34 = *a1;
  id v12 = objc_msgSend(a2, sel_groupUUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v13 = objc_msgSend(a2, sel_initiator);
  if (v13)
  {
    unint64_t v14 = v13;
    id v15 = objc_msgSend(v13, sel_value);

    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = v17;
    uint64_t v33 = v16;
  }
  else
  {
    uint64_t v32 = 0xE000000000000000;
    uint64_t v33 = 0;
  }
  id v18 = objc_msgSend(a2, sel_localParticipantIdentifier);
  id v19 = objc_msgSend(a2, sel_localMember);
  unint64_t v20 = v19;
  if (v19)
  {
    id v21 = objc_msgSend(v19, sel_handle);

    id v22 = [v21 (SEL)0x1E5B12F98];
    unint64_t v20 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;
  }
  else
  {
    uint64_t v24 = 0xE000000000000000;
  }
  id v25 = objc_msgSend(a2, sel_unreliableMessengerConfig);
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 32))(v36, a3, a4);
  uint64_t v27 = v34;
  BOOL v28 = v35;
  uint64_t v29 = specialized GroupSession<>.init(tuConversationActivitySession:groupUUID:initiatorHandle:localParticipantIdentifier:localParticipantHandle:unreliableMessengerConfig:topicManager:audioSessionAssertionManager:)(v34, (uint64_t)v11, v33, v32, (uint64_t)v18, (uint64_t)v20, v24, v25, v26, (uint64_t)v36);
  if (v28)
  {

    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v30 = v29;
  }
  uint64_t *v37 = v30;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Participant();
  uint64_t v36 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Participant>);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    id v35 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    uint64_t v33 = v0;
    int64_t v34 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v34) {
          goto LABEL_33;
        }
        unint64_t v19 = v35[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v34) {
            goto LABEL_33;
          }
          unint64_t v19 = v35[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v34) {
              goto LABEL_33;
            }
            unint64_t v19 = v35[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v34)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v33;
                uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
                if (v31 > 63) {
                  bzero(v35, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *id v35 = -1 << v31;
                }
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v19 = v35[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v34) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v35[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = v5;
      uint64_t v22 = *(void *)(v5 + 48);
      uint64_t v23 = *(void *)(v36 + 72);
      outlined init with take of PresenceSessionInfo.Participant(v22 + v23 * v17, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for Participant);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      dispatch thunk of Hashable.hash(into:)();
      String.hash(into:)();
      Hasher._combine(_:)(*(void *)&v4[*(int *)(v2 + 24)]);
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v12 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v15 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t result = outlined init with take of PresenceSessionInfo.Participant((uint64_t)v4, *(void *)(v7 + 48) + v15 * v23, (uint64_t (*)(void))type metadata accessor for Participant);
      ++*(void *)(v7 + 16);
      uint64_t v5 = v21;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v7;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt64>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v26 = -1 << v7;
    char v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    uint64_t v9 = v8 & *(void *)(v2 + 56);
    unint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
    unint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        id v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        int64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        unint64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          uint64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            uint64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  char *v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v5 = v17;
            }
          }
        }
LABEL_23:
        uint64_t v9 = (v16 - 1) & v16;
        int64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      int64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      int64_t v20 = result & ~v19;
      uint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        uint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v24 = v21 == v23;
          if (v21 == v23) {
            uint64_t v21 = 0;
          }
          v22 |= v24;
          unint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        uint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  void *v27;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v27 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    unint64_t v26 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    uint64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        uint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        id v13 = v12 | (v10 << 6);
      }
      else
      {
        int64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v26) {
          goto LABEL_33;
        }
        unint64_t v15 = v27[v14];
        ++v10;
        if (!v15)
        {
          uint64_t v10 = v14 + 1;
          if (v14 + 1 >= v26) {
            goto LABEL_33;
          }
          unint64_t v15 = v27[v10];
          if (!v15)
          {
            uint64_t v10 = v14 + 2;
            if (v14 + 2 >= v26) {
              goto LABEL_33;
            }
            unint64_t v15 = v27[v10];
            if (!v15)
            {
              unint64_t v16 = v14 + 3;
              if (v16 >= v26)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                unint64_t v25 = 1 << *(unsigned char *)(v2 + 32);
                if (v25 > 63) {
                  bzero(v27, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v27 = -1 << v25;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v27[v16];
              if (!v15)
              {
                while (1)
                {
                  uint64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v26) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v27[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v10 = v16;
            }
          }
        }
LABEL_23:
        uint64_t v7 = (v15 - 1) & v15;
        id v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      type metadata accessor for AnyCancellable();
      _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, MEMORY[0x1E4F1AB18]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      int64_t v18 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v19 = result & ~v18;
      int64_t v20 = v19 >> 6;
      if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v22 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v22 && (v21 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v23 = v20 == v22;
          if (v20 == v22) {
            int64_t v20 = 0;
          }
          v21 |= v23;
          uint64_t v24 = *(void *)(v8 + 8 * v20);
        }
        while (v24 == -1);
        unint64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & v8;
    id v35 = v0;
    uint64_t v36 = (unint64_t)(v7 + 63) >> 6;
    id v39 = v2;
    unint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    id v13 = 0;
    int v38 = v6;
    int64_t v14 = v41;
    unint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v40 = v13;
        int64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        unint64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        int64_t v20 = v37[v19];
        uint64_t v21 = v13 + 1;
        if (!v20)
        {
          uint64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          int64_t v20 = v37[v21];
          if (!v20)
          {
            uint64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            int64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                int64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  uint64_t *v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              int64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  uint64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  int64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        uint64_t v10 = (v20 - 1) & v20;
        uint64_t v40 = v21;
        int64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      unint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      char v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      BOOL v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            BOOL v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      id v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AddressableMember>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    uint64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    unint64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        int64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        unint64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          unint64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            unint64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                BOOL v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  unint64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v11 = v18;
            }
          }
        }
LABEL_23:
        uint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      int64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v23 = result & ~v22;
      uint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        uint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          char v27 = v24 == v26;
          if (v24 == v26) {
            uint64_t v24 = 0;
          }
          v25 |= v27;
          unint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        uint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      id v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *id v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  void *v35;
  uint64_t v36;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PresenceSessionInfo.Participant(0);
  uint64_t v36 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<PresenceSessionInfo.Participant>);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    id v35 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    uint64_t v33 = v0;
    int64_t v34 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v34) {
          goto LABEL_33;
        }
        unint64_t v19 = v35[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v34) {
            goto LABEL_33;
          }
          unint64_t v19 = v35[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v34) {
              goto LABEL_33;
            }
            unint64_t v19 = v35[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v34)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v33;
                uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
                if (v31 > 63) {
                  bzero(v35, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *id v35 = -1 << v31;
                }
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v19 = v35[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v34) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v35[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = v5;
      uint64_t v22 = *(void *)(v5 + 48);
      uint64_t v23 = *(void *)(v36 + 72);
      outlined init with take of PresenceSessionInfo.Participant(v22 + v23 * v17, (uint64_t)v4, type metadata accessor for PresenceSessionInfo.Participant);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      dispatch thunk of Hashable.hash(into:)();
      String.hash(into:)();
      Hasher._combine(_:)(v4[*(int *)(v2 + 24)]);
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v12 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v15 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t result = outlined init with take of PresenceSessionInfo.Participant((uint64_t)v4, *(void *)(v7 + 48) + v15 * v23, type metadata accessor for PresenceSessionInfo.Participant);
      ++*(void *)(v7 + 16);
      uint64_t v5 = v21;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v7;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UTType();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UTType>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & v8;
    id v35 = v0;
    uint64_t v36 = (unint64_t)(v7 + 63) >> 6;
    id v39 = v2;
    unint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    id v13 = 0;
    int v38 = v6;
    int64_t v14 = v41;
    unint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v40 = v13;
        int64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        unint64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        int64_t v20 = v37[v19];
        uint64_t v21 = v13 + 1;
        if (!v20)
        {
          uint64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          int64_t v20 = v37[v21];
          if (!v20)
          {
            uint64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            int64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                int64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  uint64_t *v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              int64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  uint64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  int64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        uint64_t v10 = (v20 - 1) & v20;
        uint64_t v40 = v21;
        int64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      unint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      char v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      BOOL v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            BOOL v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      id v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  return specialized _NativeSet.resize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<CPParticipant>);
}

{
  return specialized _NativeSet.resize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<TUHandle>);
}

{
  return specialized _NativeSet.resize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<TUConversationActivitySession>);
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v30 = v2;
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_33;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_33;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v30;
                uint64_t v29 = 1 << *(unsigned char *)(v4 + 32);
                if (v29 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v8 = -1 << v29;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v11) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v4 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v22 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v6;
  return result;
}

unint64_t type metadata accessor for TUConversationActivitySession()
{
  unint64_t result = lazy cache variable for type metadata for TUConversationActivitySession;
  if (!lazy cache variable for type metadata for TUConversationActivitySession)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TUConversationActivitySession);
  }
  return result;
}

void partial apply for closure #2 in InternalGroupSessionProvider.groupSessions(for:)(id *a1@<X0>, uint64_t *a2@<X8>)
{
  closure #2 in InternalGroupSessionProvider.groupSessions(for:)(a1, *(void **)(v2 + 32), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x1E4F143B8];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v11 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    specialized closure #1 in _NativeSet.filter(_:)((void *)((char *)v11 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    uint64_t v7 = v6;
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v8 = (void *)swift_slowAlloc();
    bzero(v8, v5);
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v8, v4, v2);
    uint64_t v7 = v9;
    swift_release();
    MEMORY[0x1A624F870](v8, -1, -1);
  }
  return v7;
}

uint64_t dispatch thunk of InternalGroupSessionProvider.groupSessions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of InternalGroupSessionProvider.groupSessionsPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of InternalGroupSessionProvider.topicManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of InternalGroupSessionProvider.audioSessionAssertionManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of InternalGroupSessionProvider.groupSessionTable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of InternalGroupSessionProvider.prepareForActivation(options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 48) + **(int **)(a4 + 48));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of InternalGroupSessionProvider.begin(activity:request:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 56) + **(int **)(a4 + 56));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = partial apply for closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:);
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of InternalGroupSessionProvider.end(activity:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 64) + **(int **)(a3 + 64));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of GroupSessionServiceProvider.start(provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 16) + **(int **)(a4 + 16));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of GroupSessionServiceProvider.start(presenceProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 24) + **(int **)(a4 + 24));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of GroupSessionServiceProvider.leave(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 32) + **(int **)(a3 + 32));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of GroupSessionServiceProvider.updateMembers(identifier:members:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 40) + **(int **)(a4 + 40));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of GroupSessionServiceProvider.start(presenceSession:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 48) + **(int **)(a3 + 48));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = partial apply for closure #1 in GroupActivityTransferRepresentation.init<A>(exporting:);
  return v9(a1, a2, a3);
}

void specialized closure #1 in _NativeSet.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = 0;
  int64_t v4 = 0;
  uint64_t v5 = a3 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v12 = v11 | (v4 << 6);
LABEL_20:
    id v16 = *(id *)(*(void *)(a3 + 48) + 8 * v12);
    if (objc_msgSend(v16, sel_state))
    {
      id v17 = objc_msgSend(v16, sel_state);

      if (v17 == (id)1) {
        goto LABEL_5;
      }
    }
    else
    {

LABEL_5:
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v20++, 1)) {
        goto LABEL_26;
      }
    }
  }
  int64_t v13 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v13 >= v9) {
    goto LABEL_23;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v13);
  ++v4;
  if (v14) {
    goto LABEL_19;
  }
  int64_t v4 = v13 + 1;
  if (v13 + 1 >= v9) {
    goto LABEL_23;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v4);
  if (v14)
  {
LABEL_19:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
    goto LABEL_20;
  }
  int64_t v15 = v13 + 2;
  if (v15 >= v9)
  {
LABEL_23:
    swift_retain();
    specialized _NativeSet.extractSubset(using:count:)(a1, a2, v20, a3);
    return;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v9) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v9 = MEMORY[0x1E4FBC870];
LABEL_34:
    swift_release();
    return v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<TUConversationActivitySession>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v9 = result;
  uint64_t v29 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_22;
    }
    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_37;
    }
    if (v15 >= a2) {
      goto LABEL_34;
    }
    unint64_t v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_34;
      }
      unint64_t v16 = v29[v11];
      if (!v16) {
        break;
      }
    }
LABEL_21:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_22:
    Swift::Int v18 = *(void *)(v9 + 40);
    id v19 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    uint64_t result = NSObject._rawHashValue(seed:)(v18);
    uint64_t v20 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v12 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(void *)(*(void *)(v9 + 48) + 8 * v23) = v19;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (!v5) {
      goto LABEL_34;
    }
  }
  uint64_t v17 = v15 + 2;
  if (v17 >= a2) {
    goto LABEL_34;
  }
  unint64_t v16 = v29[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_34;
    }
    unint64_t v16 = v29[v11];
    ++v17;
    if (v16) {
      goto LABEL_21;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t _sSo29TUConversationActivitySessionCSo8NSObjectCSH10ObjectiveCWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t PresentationSpatialTemplate.customOutput.getter@<X0>(uint64_t a1@<X8>)
{
  outlined init with copy of SpatialTemplateConfiguration(v1 + 8, (uint64_t)v12);
  outlined init with take of SpatialTemplateRole?((uint64_t)v12, (uint64_t)v13);
  uint64_t v3 = v14;
  if (v14)
  {
    uint64_t v4 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
    uint64_t v7 = v6;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
    if (v5 == 0x65746E6573657270 && v7 == 0xE900000000000072)
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v11 = 1;
    }
    else
    {
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v11 = v9 & 1;
    }
  }
  else
  {
    uint64_t result = outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v13, &demangling cache variable for type metadata for SpatialTemplateRole?);
    uint64_t v11 = 0;
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v11;
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

uint64_t PresentationSpatialTemplate.elements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PresentationSpatialTemplate.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SpatialTemplateConfiguration(v1 + 8, a1);
}

uint64_t PresentationSpatialTemplate.Role.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PresentationSpatialTemplate.Role.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

void *static PresentationSpatialTemplate.Role.allCases.getter()
{
  return &outlined read-only object #0 of static PresentationSpatialTemplate.Role.allCases.getter;
}

uint64_t PresentationSpatialTemplate.Role.rawValue.getter()
{
  return 0x65746E6573657270;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PresentationSpatialTemplate.Role()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PresentationSpatialTemplate.Role()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PresentationSpatialTemplate.Role()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PresentationSpatialTemplate.Role@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance PresentationSpatialTemplate.Role, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PresentationSpatialTemplate.Role(void *a1@<X8>)
{
  *a1 = 0x65746E6573657270;
  a1[1] = 0xE900000000000072;
}

uint64_t outlined init with copy of SpatialTemplateConfiguration(uint64_t a1, uint64_t a2)
{
  return a2;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PresentationSpatialTemplate.Role(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance PresentationSpatialTemplate.Role;
}

BOOL static PresentationSpatialTemplate.PresenterRoleBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void PresentationSpatialTemplate.PresenterRoleBehavior.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int PresentationSpatialTemplate.PresenterRoleBehavior.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t PresentationSpatialTemplate.init(presenterRoleBehavior:)@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  char v3 = *a1;
  *a2 = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v4 = 0;
    unint64_t result = 0;
    a2[1] = 0;
    a2[2] = 0;
    a2[3] = 0;
  }
  else
  {
    uint64_t v4 = &type metadata for PresentationSpatialTemplate.Role;
    unint64_t result = lazy protocol witness table accessor for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role();
  }
  a2[4] = v4;
  a2[5] = result;
  return result;
}

uint64_t static PresentationSpatialTemplate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static SpatialTemplateConfiguration.== infix(_:_:)(a1 + 8, a2 + 8);
}

uint64_t PresentationSpatialTemplate.hash(into:)()
{
  outlined init with copy of URL?(v0 + 8, (uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((void *)&v6 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v5, (uint64_t)v8);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v8, 0, sizeof(v8));
    uint64_t v9 = 0;
  }
  outlined init with copy of URL?((uint64_t)v8, (uint64_t)&v5, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((void *)&v6 + 1))
  {
    long long v2 = v5;
    long long v3 = v6;
    uint64_t v4 = v7;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v2, *((uint64_t *)&v3 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
}

unint64_t lazy protocol witness table accessor for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role;
  if (!lazy protocol witness table cache variable for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role;
  if (!lazy protocol witness table cache variable for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role;
  if (!lazy protocol witness table cache variable for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role);
  }
  return result;
}

Swift::Int PresentationSpatialTemplate.hashValue.getter()
{
  Hasher.init(_seed:)();
  outlined init with copy of URL?(v0 + 8, (uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((void *)&v6 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v5, (uint64_t)v8);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v8, 0, sizeof(v8));
    uint64_t v9 = 0;
  }
  outlined init with copy of URL?((uint64_t)v8, (uint64_t)&v5, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((void *)&v6 + 1))
  {
    long long v2 = v5;
    long long v3 = v6;
    uint64_t v4 = v7;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v2, *((uint64_t *)&v3 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  return Hasher._finalize()();
}

uint64_t protocol witness for SpatialTemplate.configuration.getter in conformance PresentationSpatialTemplate@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SpatialTemplateConfiguration(v1 + 8, a1);
}

uint64_t protocol witness for SpatialTemplate.elements.getter in conformance PresentationSpatialTemplate()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PresentationSpatialTemplate()
{
  outlined init with copy of URL?(v0 + 8, (uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((void *)&v6 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v5, (uint64_t)v8);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v8, 0, sizeof(v8));
    uint64_t v9 = 0;
  }
  outlined init with copy of URL?((uint64_t)v8, (uint64_t)&v5, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((void *)&v6 + 1))
  {
    long long v2 = v5;
    long long v3 = v6;
    uint64_t v4 = v7;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v2, *((uint64_t *)&v3 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PresentationSpatialTemplate()
{
  Hasher.init(_seed:)();
  outlined init with copy of URL?(v0 + 8, (uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((void *)&v6 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v5, (uint64_t)v8);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v8, 0, sizeof(v8));
    uint64_t v9 = 0;
  }
  outlined init with copy of URL?((uint64_t)v8, (uint64_t)&v5, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((void *)&v6 + 1))
  {
    long long v2 = v5;
    long long v3 = v6;
    uint64_t v4 = v7;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v2, *((uint64_t *)&v3 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PresentationSpatialTemplate(uint64_t a1, uint64_t a2)
{
  return specialized static SpatialTemplateConfiguration.== infix(_:_:)(a1 + 8, a2 + 8);
}

uint64_t one-time initialization function for presentation()
{
  v1[0] = MEMORY[0x1E4FBC860];
  v1[4] = &type metadata for PresentationSpatialTemplate.Role;
  v1[5] = lazy protocol witness table accessor for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role();
  uint64_t result = outlined destroy of PresentationSpatialTemplate((uint64_t)v1);
  static SpatialTemplatePreference.presentation = 0;
  word_1E95D5570 = 1025;
  return result;
}

uint64_t static SpatialTemplatePreference.presentation.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for presentation != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  char v3 = word_1E95D5570;
  char v4 = HIBYTE(word_1E95D5570);
  *(void *)a1 = static SpatialTemplatePreference.presentation;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4;
  return result;
}

uint64_t static SpatialTemplatePreference.presentation.setter(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  char v2 = *(unsigned char *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 9);
  if (one-time initialization token for presentation != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  static SpatialTemplatePreference.presentation = v1;
  LOBYTE(word_1E95D5570) = v2;
  HIBYTE(word_1E95D5570) = v3;
  return result;
}

uint64_t (*static SpatialTemplatePreference.presentation.modify())()
{
  if (one-time initialization token for presentation != -1) {
    swift_once();
  }
  swift_beginAccess();
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

unint64_t lazy protocol witness table accessor for type [PresentationSpatialTemplate.Role] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [PresentationSpatialTemplate.Role] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PresentationSpatialTemplate.Role] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PresentationSpatialTemplate.Role]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [PresentationSpatialTemplate.Role] and conformance [A]);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PresentationSpatialTemplate.Role(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PresentationSpatialTemplate.Role and conformance PresentationSpatialTemplate.Role();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationSpatialTemplate.PresenterRoleBehavior and conformance PresentationSpatialTemplate.PresenterRoleBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationSpatialTemplate.PresenterRoleBehavior and conformance PresentationSpatialTemplate.PresenterRoleBehavior;
  if (!lazy protocol witness table cache variable for type PresentationSpatialTemplate.PresenterRoleBehavior and conformance PresentationSpatialTemplate.PresenterRoleBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationSpatialTemplate.PresenterRoleBehavior and conformance PresentationSpatialTemplate.PresenterRoleBehavior);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationSpatialTemplate and conformance PresentationSpatialTemplate()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationSpatialTemplate and conformance PresentationSpatialTemplate;
  if (!lazy protocol witness table cache variable for type PresentationSpatialTemplate and conformance PresentationSpatialTemplate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationSpatialTemplate and conformance PresentationSpatialTemplate);
  }
  return result;
}

uint64_t destroy for PresentationSpatialTemplate(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 32))
  {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1 + 8);
  }
  return result;
}

uint64_t initializeWithCopy for PresentationSpatialTemplate(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  char v4 = (_OWORD *)(a1 + 8);
  long long v5 = a2 + 1;
  uint64_t v6 = a2[4];
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v7 = a2[5];
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v7;
    (**(void (***)(uint64_t, void *, uint64_t))(v6 - 8))(a1 + 8, v5, v6);
  }
  else
  {
    long long v8 = *((_OWORD *)v5 + 1);
    _OWORD *v4 = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 24) = v8;
    *(void *)(a1 + 40) = v5[4];
  }
  return a1;
}

uint64_t assignWithCopy for PresentationSpatialTemplate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v4)
    {
      *(void *)(a1 + 32) = v4;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
      return a1;
    }
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 8);
    long long v6 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 24) = v6;
    return a1;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 8);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  return a1;
}

uint64_t assignWithTake for PresentationSpatialTemplate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 32)) {
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 8);
  }
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentationSpatialTemplate(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentationSpatialTemplate(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationSpatialTemplate()
{
  return &type metadata for PresentationSpatialTemplate;
}

unsigned char *storeEnumTagSinglePayload for PresentationSpatialTemplate.Role(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1A383D3F8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationSpatialTemplate.Role()
{
  return &type metadata for PresentationSpatialTemplate.Role;
}

unsigned char *storeEnumTagSinglePayload for PresentationSpatialTemplate.PresenterRoleBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A383D4FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationSpatialTemplate.PresenterRoleBehavior()
{
  return &type metadata for PresentationSpatialTemplate.PresenterRoleBehavior;
}

void CGImageRef.thumbnailImageData(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UTType();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Thumb = CGImageCreateThumb();
  if (Thumb)
  {
    uint64_t v9 = (CGImage *)Thumb;
    unint64_t v10 = (__CFData *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA58]), sel_init);
    static UTType.jpeg.getter();
    uint64_t v11 = UTType.identifier.getter();
    uint64_t v13 = v12;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v14 = (__CFString *)MEMORY[0x1A624DFA0](v11, v13);
    swift_bridgeObjectRelease();
    uint64_t v15 = CGImageDestinationCreateWithData(v10, v14, 1uLL, 0);
    if (v15)
    {
      unint64_t v16 = v15;
      CGImageDestinationAddImage(v15, v9, 0);
      if (CGImageDestinationFinalize(v16))
      {
        if (one-time initialization token for default != -1) {
          swift_once();
        }
        uint64_t v17 = type metadata accessor for Logger();
        __swift_project_value_buffer(v17, (uint64_t)static Log.default);
        Swift::Int v18 = v10;
        id v19 = v2;
        uint64_t v20 = v18;
        id v21 = v19;
        unint64_t v22 = Logger.logObject.getter();
        int v23 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v22, (os_log_type_t)v23))
        {

          goto LABEL_28;
        }
        id v55 = v21;
        int v57 = v23;
        os_log_t v58 = v22;
        uint64_t v24 = swift_slowAlloc();
        uint64_t v56 = swift_slowAlloc();
        uint64_t v59 = a1;
        uint64_t v60 = v56;
        *(_DWORD *)uint64_t v24 = 136315650;
        uint64_t v25 = String.init<A>(reflecting:)();
        uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v24 + 12) = 2080;
        uint64_t v27 = v20;
        uint64_t v28 = NSData.startIndex.getter();
        uint64_t v29 = NSData.endIndex.getter();
        uint64_t v30 = NSData.startIndex.getter();
        uint64_t v31 = NSData.endIndex.getter();
        if (v28 < v30 || v31 < v28)
        {
          __break(1u);
        }
        else
        {
          uint64_t v32 = NSData.startIndex.getter();
          uint64_t v33 = NSData.endIndex.getter();

          if (v29 >= v32 && v33 >= v29)
          {
            if (!__OFSUB__(v29, v28))
            {
              uint64_t v59 = v29 - v28;
              uint64_t v34 = String.init<A>(reflecting:)();
              uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v60);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              *(_WORD *)(v24 + 22) = 2080;
              uint64_t v36 = v55;
              uint64_t v59 = (uint64_t)v55;
              type metadata accessor for CGImageRef(0);
              id v37 = v36;
              uint64_t v38 = String.init<A>(reflecting:)();
              uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v60);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              os_log_t v40 = v58;
              _os_log_impl(&dword_1A375F000, v58, (os_log_type_t)v57, "Generated image preview of size %s  %s bytes for %s", (uint8_t *)v24, 0x20u);
              uint64_t v41 = v56;
              swift_arrayDestroy();
              MEMORY[0x1A624F870](v41, -1, -1);
              MEMORY[0x1A624F870](v24, -1, -1);

LABEL_28:
              id v54 = v20;
              static Data._unconditionallyBridgeFromObjectiveC(_:)();

              return;
            }
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_33:
        __break(1u);
        return;
      }
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v50 = type metadata accessor for Logger();
      __swift_project_value_buffer(v50, (uint64_t)static Log.default);
      uint64_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v53 = 0;
        _os_log_impl(&dword_1A375F000, v51, v52, "Error finalizing thumbnail image", v53, 2u);
        MEMORY[0x1A624F870](v53, -1, -1);

        return;
      }
    }
    else
    {
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      __swift_project_value_buffer(v46, (uint64_t)static Log.default);
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v49 = 0;
        _os_log_impl(&dword_1A375F000, v47, v48, "Error creating thumbnail image destination ref", v49, 2u);
        MEMORY[0x1A624F870](v49, -1, -1);

        return;
      }
    }
    return;
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v42 = type metadata accessor for Logger();
  __swift_project_value_buffer(v42, (uint64_t)static Log.default);
  long long v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v43, v44))
  {
    unint64_t v45 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v45 = 0;
    _os_log_impl(&dword_1A375F000, v43, v44, "Error creating thumbnail image", v45, 2u);
    MEMORY[0x1A624F870](v45, -1, -1);
  }
}

CGImageRef specialized static CGImageRef.thumbnailImage(from:)()
{
  CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v1 = CGDataProviderCreateWithCFData(isa);

  if (v1)
  {
    CGImageRef v2 = CGImageCreateWithJPEGDataProvider(v1, 0, 1, kCGRenderingIntentDefault);
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.default);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_1A375F000, v4, v5, "Failed to create CGDataProvider from dataBlob", v6, 2u);
      MEMORY[0x1A624F870](v6, -1, -1);
    }

    return 0;
  }
  return v2;
}

void GroupSessionMessenger.receive<A>(_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  unint64_t v22 = a4;
  void v20[4] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>);
  type metadata accessor for GroupSessionMessenger.MessageContext();
  v20[3] = swift_getTupleTypeMetadata2();
  void v20[2] = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>);
  uint64_t v8 = type metadata accessor for Publishers.CompactMap();
  uint64_t v21 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unint64_t v10 = (char *)v20 - v9;
  v20[1] = swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for Publishers.HandleEvents();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v20 - v13;
  uint64_t v23 = static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(*(void *)(v4 + 16), *(void *)(v4 + 24), a1, a1, a2, a3);
  char v15 = *(unsigned char *)(v4 + 40);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a2;
  *(void *)(v16 + 32) = a3;
  *(unsigned char *)(v16 + 40) = v15;
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = a1;
  v17[3] = a2;
  v17[4] = a3;
  v17[5] = partial apply for closure #1 in GroupSessionMessenger.receive<A>(_:);
  v17[6] = v16;
  Publisher.compactMap<A>(_:)();
  swift_release();
  swift_release();
  Swift::Int v18 = (void *)swift_allocObject();
  void v18[2] = a1;
  v18[3] = a2;
  v18[4] = a3;
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v8);
  swift_getWitnessTable();
  uint64_t v19 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  GroupSessionMessenger.MessageStream.init(outputStream:)(v19, v22);
}

uint64_t type metadata accessor for GroupSessionMessenger.MessageContext()
{
  uint64_t result = type metadata singleton initialization cache for GroupSessionMessenger.MessageContext;
  if (!type metadata singleton initialization cache for GroupSessionMessenger.MessageContext) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t GroupSessionMessenger.send<A>(_:to:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v12;
  v36[3] = v14;
  v36[4] = v15;
  void v36[5] = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v36);
  Swift::Int v18 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16);
  v18(boxed_opaque_existential_1, a1, a5);
  char v37 = 1;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Log.default);
  v18((uint64_t *)v11, a1, a5);
  swift_bridgeObjectRetain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v31 = v6;
    uint64_t v24 = v23;
    uint64_t v35 = v23;
    *(_DWORD *)uint64_t v22 = 136315394;
    swift_getDynamicType();
    uint64_t v25 = _typeName(_:qualified:)();
    uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a5);
    *(_WORD *)(v22 + 12) = 2080;
    uint64_t v34 = v13;
    swift_bridgeObjectRetain();
    uint64_t v27 = String.init<A>(reflecting:)();
    uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v20, v21, "Sending message: %s to: %s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    uint64_t v29 = v24;
    uint64_t v6 = v31;
    MEMORY[0x1A624F870](v29, -1, -1);
    MEMORY[0x1A624F870](v22, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a5);

    swift_bridgeObjectRelease_n();
  }
  uint64_t v35 = v13;
  LOBYTE(v34) = *(unsigned char *)(v6 + 40);
  GroupSessionMessenger.send(messageWrapper:to:deliveryMode:completion:)((uint64_t)v36, &v35, (char *)&v34, v32, v33);
  return outlined destroy of GroupSessionMessenger.MessageWrapper((uint64_t)v36);
}

void (*specialized Dictionary.subscript.modify(void *a1))(void *a1)
{
  CGImageRef v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = type metadata accessor for UUID();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[5] = v4;
  uint64_t v6 = malloc(*(void *)(v4 + 64));
  void v2[6] = v6;
  (*(void (**)(void))(v5 + 16))();
  v2[7] = specialized Dictionary._Variant.subscript.modify(v2, (uint64_t)v6);
  return AttachmentLedgerTopic.attachments.modify;
}

void (*specialized Dictionary.subscript.modify(void *a1, uint64_t a2))(void *a1)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized Dictionary._Variant.subscript.modify(v4, a2);
  return GroupSessionProviderTestingOverrides.groupSessionServiceProvider.modify;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF15GroupActivities0C16SessionMessengerC14MessageWrapper33_7F6FED5A36F2E7FBC6D91B446E55DE7FLLV_s5NeverOAI_AF0G7ContextVAD15SendReliabilityOtTg5@<X0>(void (*a1)(_OWORD *)@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of URL?(v2, (uint64_t)v11, &demangling cache variable for type metadata for GroupSessionMessenger.MessageWrapper?);
  if (v12 == 255)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 1, 1, v7);
  }
  else
  {
    v9[0] = v11[0];
    v9[1] = v11[1];
    v9[2] = v11[2];
    unsigned __int8 v10 = v12;
    a1(v9);
    uint64_t result = outlined destroy of GroupSessionMessenger.MessageWrapper((uint64_t)v9);
    if (!v3)
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability));
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a2, 0, 1, v8);
    }
  }
  return result;
}

void GroupSessionMessenger.deliveryMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 40);
}

uint64_t GroupSessionMessenger.__allocating_init<A>(session:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  GroupSessionMessenger.init<A>(session:)(a1);
  return v2;
}

uint64_t GroupSessionMessenger.init<A>(session:)(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  uint64_t v4 = PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  *(void *)(v2 + 32) = v4;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = &protocol witness table for GroupSession<A>;
  *(unsigned char *)(v2 + 40) = 0;
  return v2;
}

uint64_t GroupSessionMessenger.__allocating_init<A>(session:deliveryMode:)(uint64_t a1, char *a2)
{
  uint64_t v4 = swift_allocObject();
  GroupSessionMessenger.init<A>(session:deliveryMode:)(a1, a2);
  return v4;
}

uint64_t GroupSessionMessenger.init<A>(session:deliveryMode:)(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  char v5 = *a2;
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  uint64_t v6 = PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  *(void *)(v3 + 32) = v6;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = &protocol witness table for GroupSession<A>;
  *(unsigned char *)(v3 + 40) = v5;
  return v3;
}

uint64_t GroupSessionMessenger.__allocating_init(transportSession:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  uint64_t v5 = PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v5;
  *(unsigned char *)(v4 + 40) = 0;
  *(void *)(v4 + 16) = a1;
  return v4;
}

uint64_t GroupSessionMessenger.init(transportSession:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  uint64_t v6 = PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 32) = v6;
  *(unsigned char *)(v3 + 40) = 0;
  *(void *)(v3 + 16) = a1;
  return v3;
}

uint64_t GroupSessionMessenger.deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t GroupSessionMessenger.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

BOOL static GroupSessionMessenger.DeliveryMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void GroupSessionMessenger.DeliveryMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

GroupActivities::SendReliability __swiftcall SendReliability.init(_:)(GroupActivities::SendReliability result)
{
  *uint64_t v1 = *(unsigned char *)result;
  return result;
}

uint64_t GroupSessionMessenger.MessageContext.source.getter@<X0>(uint64_t a1@<X8>)
{
  return _s15GroupActivities11ParticipantVWOcTm_0(v1, a1, (uint64_t (*)(void))type metadata accessor for Participant);
}

uint64_t GroupSessionMessenger.MessageContext.source.setter(uint64_t a1)
{
  return outlined assign with take of Participant(a1, v1);
}

uint64_t (*GroupSessionMessenger.MessageContext.source.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t GroupSessionMessenger.MessageContext.init(source:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of Participant(a1, a2);
}

uint64_t GroupSessionMessenger.MessageWrapper.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GroupSessionMessenger.MessageWrapper.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type GroupSessionMessenger.MessageType and conformance GroupSessionMessenger.MessageType();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    outlined init with take of GroupSessionMessenger.MessageType(v11, (uint64_t)v12);
    long long v9 = v12[1];
    *(_OWORD *)a2 = v12[0];
    *(_OWORD *)(a2 + 16) = v9;
    *(_OWORD *)(a2 + 32) = v12[2];
    *(unsigned char *)(a2 + 48) = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GroupSessionMessenger.MessageWrapper.CodingKeys()
{
  return 0x6567617373656DLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GroupSessionMessenger.MessageWrapper.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance GroupSessionMessenger.MessageWrapper.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GroupSessionMessenger.MessageWrapper.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GroupSessionMessenger.MessageWrapper.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance GroupSessionMessenger.MessageWrapper@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return GroupSessionMessenger.MessageWrapper.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GroupSessionMessenger.MessageWrapper(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GroupSessionMessenger.MessageWrapper.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  lazy protocol witness table accessor for type GroupSessionMessenger.MessageType and conformance GroupSessionMessenger.MessageType();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GroupSessionMessenger.MessageType.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GroupSessionMessenger.MessageType.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GroupSessionMessenger.MessageType.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GroupSessionMessenger.MessageType.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GroupSessionMessenger.MessageType.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of GroupSessionMessenger.MessageType.CodingKeys.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GroupSessionMessenger.MessageType.CodingKeys(uint64_t *a1@<X8>)
{
  uint64_t v2 = 100;
  if (*v1) {
    uint64_t v2 = 116;
  }
  *a1 = v2;
  a1[1] = 0xE100000000000000;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GroupSessionMessenger.MessageType.CodingKeys()
{
  if (*v0) {
    return 116;
  }
  else {
    return 100;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GroupSessionMessenger.MessageType.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of GroupSessionMessenger.MessageType.CodingKeys.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GroupSessionMessenger.MessageType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GroupSessionMessenger.MessageType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t GroupSessionMessenger.MessageType.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GroupSessionMessenger.MessageType.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v17[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v9 = *(void *)(KeyedDecodingContainer.allKeys.getter() + 16);
    swift_bridgeObjectRelease();
    if (v9 == 1)
    {
      uint64_t v10 = KeyedDecodingContainer.allKeys.getter();
      if (*(void *)(v10 + 16))
      {
        char v11 = *(unsigned char *)(v10 + 32);
        swift_bridgeObjectRelease();
        if (v11)
        {
          LOBYTE(v16) = 1;
          lazy protocol witness table accessor for type TypedPayloadBox and conformance TypedPayloadBox();
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          char v18 = 1;
LABEL_11:
          outlined init with take of GroupSessionMessenger.MessageType(v17, (uint64_t)v19);
          outlined init with take of GroupSessionMessenger.MessageType(v19, a2);
          return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      char v20 = 0;
      lazy protocol witness table accessor for type Data and conformance Data();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v17[0] = v16;
      char v18 = 0;
      goto LABEL_11;
    }
    uint64_t v12 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v14 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v14 = &type metadata for GroupSessionMessenger.MessageType;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v14, *MEMORY[0x1E4FBBA70], v12);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t GroupSessionMessenger.MessageType.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GroupSessionMessenger.MessageType.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of GroupSessionMessenger.MessageType(v2, (uint64_t)v13);
  if (v14)
  {
    v12[0] = v13[0];
    v12[1] = v13[1];
    v12[2] = v13[2];
    char v11 = 1;
    lazy protocol witness table accessor for type TypedPayloadBox and conformance TypedPayloadBox();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    outlined destroy of TypedPayloadBox((uint64_t)v12);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    long long v9 = v13[0];
    v12[0] = v13[0];
    char v11 = 0;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return outlined consume of Data._Representation(v9, *((unint64_t *)&v9 + 1));
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance GroupSessionMessenger.MessageType@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return GroupSessionMessenger.MessageType.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GroupSessionMessenger.MessageType(void *a1)
{
  return GroupSessionMessenger.MessageType.encode(to:)(a1);
}

void specialized GroupSessionMessenger.MessageStream.init(outputStream:)(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void specialized GroupSessionMessenger.MessageStream.init(outputStream:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.default);
  long long v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    char v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = v12;
    *(_DWORD *)char v11 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1A375F000, v9, v10, "Creating message stream for message type: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v12, -1, -1);
    MEMORY[0x1A624F870](v11, -1, -1);
  }

  *a4 = a1;
}

void GroupSessionMessenger.MessageStream.init(outputStream:)(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v11 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v9 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v5, v6, "Creating message stream for message type: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v8, -1, -1);
    MEMORY[0x1A624F870](v7, -1, -1);
  }

  *a2 = a1;
}

uint64_t GroupSessionMessenger.MessageStream.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *v4;
  type metadata accessor for GroupSessionMessenger.MessageContext();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = MEMORY[0x1E4FBC248];

  return MEMORY[0x1F40D6910](a1, v8, TupleTypeMetadata2, v10, a3, a4);
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance GroupSessionMessenger.MessageStream<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return GroupSessionMessenger.MessageStream.receive<A>(subscriber:)(a1, a4, a2, a3);
}

uint64_t GroupSessionMessenger.send(messageWrapper:to:deliveryMode:completion:)(uint64_t a1, uint64_t *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a2;
  char v9 = *a3;
  uint64_t v15 = MEMORY[0x1E4F277C0];
  uint64_t result = tryLog<A>(_:_:function:line:)();
  unint64_t v11 = v19;
  if (v19 >> 60 != 15)
  {
    uint64_t v12 = v18;
    uint64_t v13 = *(void *)(v5 + 24);
    uint64_t v17 = v8;
    uint64_t ObjectType = swift_getObjectType();
    char v16 = v9;
    (*(void (**)(uint64_t, unint64_t, uint64_t *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16))(v18, v19, &v17, &v16, a4, a5, ObjectType, v13, v15);
    return outlined consume of Data?(v12, v11);
  }
  return result;
}

uint64_t implicit closure #1 in GroupSessionMessenger.send(messageWrapper:to:deliveryMode:completion:)@<X0>(uint64_t *a1@<X8>)
{
  lazy protocol witness table accessor for type GroupSessionMessenger.MessageWrapper and conformance GroupSessionMessenger.MessageWrapper();
  swift_retain();
  uint64_t v3 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v5 = v4;
  uint64_t result = swift_release();
  if (!v1)
  {
    *a1 = v3;
    a1[1] = v5;
  }
  return result;
}

uint64_t GroupSessionMessenger.send(_:to:completion:)(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v11 = *a3;
  v27[0] = a1;
  v27[1] = a2;
  char v28 = 0;
  outlined copy of Data._Representation(a1, a2);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Log.default);
  outlined copy of Data._Representation(a1, a2);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a1, a2);
  swift_bridgeObjectRetain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v24 = a4;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v26 = v16;
    *(_DWORD *)uint64_t v15 = 134218242;
    uint64_t v17 = v16;
    switch(a2 >> 62)
    {
      case 1uLL:
        outlined consume of Data._Representation(a1, a2);
        if (!__OFSUB__(HIDWORD(a1), a1)) {
          goto LABEL_11;
        }
        __break(1u);
LABEL_14:
        __break(1u);
        JUMPOUT(0x1A383FE34);
      case 2uLL:
        uint64_t v23 = a5;
        uint64_t v19 = *(void *)(a1 + 16);
        uint64_t v18 = *(void *)(a1 + 24);
        outlined consume of Data._Representation(a1, a2);
        if (__OFSUB__(v18, v19)) {
          goto LABEL_14;
        }
        a5 = v23;
LABEL_11:
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        outlined consume of Data._Representation(a1, a2);
        *(_WORD *)(v15 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v20 = String.init<A>(reflecting:)();
        uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A375F000, v13, v14, "Sending raw data of length: %ld to: %s", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v17, -1, -1);
        MEMORY[0x1A624F870](v15, -1, -1);

        a4 = v24;
        break;
      default:
        outlined consume of Data._Representation(a1, a2);
        goto LABEL_11;
    }
  }
  else
  {
    outlined consume of Data._Representation(a1, a2);
    outlined consume of Data._Representation(a1, a2);

    swift_bridgeObjectRelease_n();
  }
  uint64_t v26 = v11;
  LOBYTE(v25) = *(unsigned char *)(v6 + 40);
  GroupSessionMessenger.send(messageWrapper:to:deliveryMode:completion:)((uint64_t)v27, &v26, (char *)&v25, a4, a5);
  return outlined destroy of GroupSessionMessenger.MessageWrapper((uint64_t)v27);
}

uint64_t specialized static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v77 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  char v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CodingUserInfoKey();
  uint64_t v74 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  Lock.lock()();
  uint64_t ObjectType = swift_getObjectType();
  if (one-time initialization token for contents != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v13 = static GroupSessionMessenger.MessageStreamStore.contents;
  if (*((void *)static GroupSessionMessenger.MessageStreamStore.contents + 2)
    && (unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v15 & 1) != 0))
  {
    uint64_t v16 = a1;
    uint64_t v17 = *(void *)(v13[7] + 24 * v14 + 16);
    swift_endAccess();
    uint64_t v18 = swift_conformsToProtocol2();
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    if (v18) {
      uint64_t v20 = &type metadata for PlaybackSyncer.Message;
    }
    else {
      uint64_t v20 = 0;
    }
    if (v20)
    {
      unint64_t v21 = *(uint64_t (**)(ValueMetadata *, uint64_t))(v19 + 8);
      swift_retain();
      swift_retain();
      uint64_t v22 = v21(v20, v19);
      uint64_t v24 = v23;
    }
    else
    {
      uint64_t v22 = 0xD000000000000026;
      swift_retain();
      swift_retain();
      uint64_t v24 = 0x80000001A3901C90;
    }
    uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TypedPayloadDecoder<PlaybackSyncer.Message>);
    uint64_t v82 = v57;
    uint64_t v83 = &protocol witness table for TypedPayloadDecoder<A>;
    unint64_t v58 = PropertyListDecoder.messageDecodersByMessageIdentifier.getter();
    uint64_t v80 = v58;
    if (v57)
    {
      unint64_t v59 = v58;
      outlined init with take of TypedPayloadDecoding(&v81, (uint64_t)v79);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v78 = v59;
      uint64_t v80 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v79, v22, v24, isUniquelyReferenced_nonNull_native);
      uint64_t v80 = v78;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v81, &demangling cache variable for type metadata for TypedPayloadDecoding?);
      specialized Dictionary._Variant.removeValue(forKey:)(v22, v24, (uint64_t)v79);
      swift_bridgeObjectRelease();
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v79, &demangling cache variable for type metadata for TypedPayloadDecoding?);
    }
    PropertyListDecoder.messageDecodersByMessageIdentifier.setter(v80);
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    __swift_project_value_buffer(v61, (uint64_t)static Log.default);
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v62, v63))
    {
      id v64 = (uint8_t *)swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      *(void *)&long long v81 = v65;
      *(_DWORD *)id v64 = 136315138;
      v79[0] = v16;
      uint64_t v66 = String.init<A>(reflecting:)();
      v79[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, (uint64_t *)&v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v62, v63, "Returning stored message stream for session %s", v64, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v65, -1, -1);
      MEMORY[0x1A624F870](v64, -1, -1);
    }
    swift_release();
  }
  else
  {
    uint64_t v70 = v4;
    swift_endAccess();
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Log.default);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    BOOL v28 = os_log_type_enabled(v26, v27);
    uint64_t v72 = v7;
    uint64_t v73 = v6;
    uint64_t v71 = v3;
    if (v28)
    {
      uint64_t v29 = swift_slowAlloc();
      id v69 = v9;
      uint64_t v30 = (uint8_t *)v29;
      uint64_t v31 = swift_slowAlloc();
      *(void *)&long long v81 = v31;
      *(_DWORD *)uint64_t v30 = 136315138;
      v79[0] = a1;
      uint64_t v32 = String.init<A>(reflecting:)();
      v79[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, (uint64_t *)&v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v26, v27, "Creating new message stream for session %s", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v31, -1, -1);
      uint64_t v34 = v30;
      char v9 = v69;
      MEMORY[0x1A624F870](v34, -1, -1);
    }

    uint64_t v35 = v74;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    uint64_t v36 = PropertyListDecoder.init()();
    if (one-time initialization token for typedPayloadDecoderMap != -1) {
      swift_once();
    }
    uint64_t v37 = __swift_project_value_buffer(v10, (uint64_t)static CodingUserInfoKey.typedPayloadDecoderMap);
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v12, v37, v10);
    uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : TypedPayloadDecoding]);
    *(void *)&long long v81 = MEMORY[0x1E4FBC868];
    uint64_t v38 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
    specialized Dictionary.subscript.setter((uint64_t)&v81, (uint64_t)v12);
    v38(v79, 0);
    uint64_t v39 = swift_conformsToProtocol2();
    if (v39) {
      uint64_t v40 = v39;
    }
    else {
      uint64_t v40 = 0;
    }
    if (v39) {
      uint64_t v41 = &type metadata for PlaybackSyncer.Message;
    }
    else {
      uint64_t v41 = 0;
    }
    if (v41)
    {
      uint64_t v42 = (*(uint64_t (**)(void))(v40 + 8))();
      uint64_t v44 = v43;
    }
    else
    {
      uint64_t v42 = 0xD000000000000026;
      uint64_t v44 = 0x80000001A3901C90;
    }
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TypedPayloadDecoder<PlaybackSyncer.Message>);
    uint64_t v82 = v45;
    uint64_t v83 = &protocol witness table for TypedPayloadDecoder<A>;
    unint64_t v46 = PropertyListDecoder.messageDecodersByMessageIdentifier.getter();
    uint64_t v80 = v46;
    if (v45)
    {
      unint64_t v47 = v46;
      outlined init with take of TypedPayloadDecoding(&v81, (uint64_t)v79);
      char v48 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v78 = v47;
      uint64_t v80 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v79, v42, v44, v48);
      uint64_t v80 = v78;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v81, &demangling cache variable for type metadata for TypedPayloadDecoding?);
      specialized Dictionary._Variant.removeValue(forKey:)(v42, v44, (uint64_t)v79);
      swift_bridgeObjectRelease();
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v79, &demangling cache variable for type metadata for TypedPayloadDecoding?);
    }
    PropertyListDecoder.messageDecodersByMessageIdentifier.setter(v80);
    *(void *)&long long v81 = (*(uint64_t (**)(uint64_t))(v76 + 8))(ObjectType);
    uint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = partial apply for closure #1 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:);
    *(void *)(v49 + 24) = v36;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(Data, Participant, SendReliability), Never>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability));
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<(Data, Participant, SendReliability), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(Data, Participant, SendReliability), Never>);
    uint64_t v50 = v77;
    Publisher.compactMap<A>(_:)();
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>);
    uint64_t v51 = v71;
    uint64_t v52 = Publisher.share()();
    (*(void (**)(char *, uint64_t))(v70 + 8))(v50, v51);
    *(void *)&long long v81 = v52;
    *(void *)(swift_allocObject() + 16) = a1;
    *(void *)(swift_allocObject() + 16) = a1;
    *(void *)(swift_allocObject() + 16) = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>> and conformance Publishers.Share<A>, &demangling cache variable for type metadata for Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>);
    Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>>);
    uint64_t v53 = v73;
    uint64_t v54 = Publisher.eraseToAnyPublisher()();
    id v55 = v9;
    uint64_t v17 = v54;
    (*(void (**)(char *, uint64_t))(v72 + 8))(v55, v53);
    swift_beginAccess();
    swift_retain();
    swift_retain();
    char v56 = swift_isUniquelyReferenced_nonNull_native();
    v79[0] = static GroupSessionMessenger.MessageStreamStore.contents;
    static GroupSessionMessenger.MessageStreamStore.contents = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, v36, v17, a1, v56);
    static GroupSessionMessenger.MessageStreamStore.contents = (_UNKNOWN *)v79[0];
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();
  }
  Lock.unlock()();
  return v17;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  BOOL v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(void **, void);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t ObjectType;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56[4];

  uint64_t v52 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>);
  uint64_t v54 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v53 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v9 = type metadata accessor for CodingUserInfoKey();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  Lock.lock()();
  uint64_t ObjectType = swift_getObjectType();
  if (one-time initialization token for contents != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v13 = static GroupSessionMessenger.MessageStreamStore.contents;
  if (*((void *)static GroupSessionMessenger.MessageStreamStore.contents + 2)
    && (unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v15 & 1) != 0))
  {
    uint64_t v16 = *(void *)(v13[7] + 24 * v14 + 16);
    swift_endAccess();
    uint64_t v17 = one-time initialization token for default;
    swift_retain();
    swift_retain();
    if (v17 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Log.default);
    uint64_t v19 = Logger.logObject.getter();
    uint64_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      v56[0] = v22;
      *(_DWORD *)unint64_t v21 = 136315138;
      id v55 = (void *)a1;
      uint64_t v23 = String.init<A>(reflecting:)();
      id v55 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v19, v20, "Returning stored message stream for session %s", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v22, -1, -1);
      MEMORY[0x1A624F870](v21, -1, -1);
    }
    swift_release();
  }
  else
  {
    unint64_t v46 = v3;
    swift_endAccess();
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Log.default);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    BOOL v28 = os_log_type_enabled(v26, v27);
    uint64_t v49 = v5;
    uint64_t v50 = a1;
    unint64_t v47 = v8;
    char v48 = v6;
    if (v28)
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      v56[0] = v30;
      *(_DWORD *)uint64_t v29 = 136315138;
      id v55 = (void *)a1;
      uint64_t v31 = String.init<A>(reflecting:)();
      id v55 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v26, v27, "Creating new message stream for session %s", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v30, -1, -1);
      MEMORY[0x1A624F870](v29, -1, -1);
    }

    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    unint64_t v33 = PropertyListDecoder.init()();
    if (one-time initialization token for typedPayloadDecoderMap != -1) {
      swift_once();
    }
    uint64_t v34 = __swift_project_value_buffer(v9, (uint64_t)static CodingUserInfoKey.typedPayloadDecoderMap);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v34, v9);
    v56[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : TypedPayloadDecoding]);
    v56[0] = MEMORY[0x1E4FBC868];
    uint64_t v35 = (void (*)(void **, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
    specialized Dictionary.subscript.setter((uint64_t)v56, (uint64_t)v12);
    v35(&v55, 0);
    uint64_t v36 = v50;
    v56[0] = (*(uint64_t (**)(uint64_t))(v52 + 8))(ObjectType);
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = partial apply for closure #1 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:);
    *(void *)(v37 + 24) = v33;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(Data, Participant, SendReliability), Never>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability));
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<(Data, Participant, SendReliability), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(Data, Participant, SendReliability), Never>);
    uint64_t v38 = v53;
    Publisher.compactMap<A>(_:)();
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>);
    uint64_t v39 = v46;
    uint64_t v40 = Publisher.share()();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v38, v39);
    v56[0] = v40;
    *(void *)(swift_allocObject() + 16) = v36;
    *(void *)(swift_allocObject() + 16) = v36;
    *(void *)(swift_allocObject() + 16) = v36;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>> and conformance Publishers.Share<A>, &demangling cache variable for type metadata for Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>);
    uint64_t v41 = v47;
    Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>>);
    uint64_t v42 = v49;
    uint64_t v16 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v41, v42);
    swift_beginAccess();
    swift_retain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v55 = static GroupSessionMessenger.MessageStreamStore.contents;
    static GroupSessionMessenger.MessageStreamStore.contents = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, v33, v16, v36, isUniquelyReferenced_nonNull_native);
    static GroupSessionMessenger.MessageStreamStore.contents = v55;
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();
  }
  Lock.unlock()();
  return v16;
}

uint64_t static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v76 = a5;
  uint64_t v77 = a6;
  uint64_t v75 = a4;
  uint64_t v81 = a2;
  uint64_t v82 = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  unint64_t v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CodingUserInfoKey();
  uint64_t v78 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v79 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  Lock.lock()();
  uint64_t ObjectType = swift_getObjectType();
  if (one-time initialization token for contents != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v17 = static GroupSessionMessenger.MessageStreamStore.contents;
  if (*((void *)static GroupSessionMessenger.MessageStreamStore.contents + 2)
    && (unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v19 & 1) != 0))
  {
    uint64_t v20 = *(void *)(v17[7] + 24 * v18 + 16);
    swift_endAccess();
    uint64_t v21 = MEMORY[0x1E4F277C0];
    swift_retain();
    swift_retain();
    if (v82 != v21)
    {
      uint64_t v22 = a1;
      uint64_t v23 = v75;
      uint64_t v24 = v77;
      uint64_t v25 = static Encodable.messageIdentifier.getter(v75);
      uint64_t v27 = v26;
      TypedPayloadDecoder.init()(v23, v76, v24);
      uint64_t v28 = type metadata accessor for TypedPayloadDecoder();
      uint64_t v87 = v28;
      uint64_t v88 = &protocol witness table for TypedPayloadDecoder<A>;
      unint64_t v29 = PropertyListDecoder.messageDecodersByMessageIdentifier.getter();
      uint64_t v85 = v29;
      if (v28)
      {
        unint64_t v30 = v29;
        outlined init with take of TypedPayloadDecoding(&v86, (uint64_t)v84);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v83 = v30;
        uint64_t v85 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v84, v25, v27, isUniquelyReferenced_nonNull_native);
        uint64_t v85 = v83;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v86, &demangling cache variable for type metadata for TypedPayloadDecoding?);
        specialized Dictionary._Variant.removeValue(forKey:)(v25, v27, (uint64_t)v84);
        swift_bridgeObjectRelease();
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v84, &demangling cache variable for type metadata for TypedPayloadDecoding?);
      }
      PropertyListDecoder.messageDecodersByMessageIdentifier.setter(v85);
      a1 = v22;
    }
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for Logger();
    __swift_project_value_buffer(v60, (uint64_t)static Log.default);
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v61, v62))
    {
      os_log_type_t v63 = (uint8_t *)swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      uint64_t v65 = a1;
      uint64_t v66 = v64;
      *(void *)&long long v86 = v64;
      *(_DWORD *)os_log_type_t v63 = 136315138;
      v84[0] = v65;
      uint64_t v67 = String.init<A>(reflecting:)();
      v84[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, (uint64_t *)&v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v61, v62, "Returning stored message stream for session %s", v63, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v66, -1, -1);
      MEMORY[0x1A624F870](v63, -1, -1);
    }
    swift_release();
  }
  else
  {
    uint64_t v70 = v8;
    swift_endAccess();
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Log.default);
    unint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    uint64_t v74 = v12;
    uint64_t v73 = v14;
    uint64_t v72 = v7;
    uint64_t v71 = v10;
    if (v35)
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(void *)&long long v86 = v37;
      *(_DWORD *)uint64_t v36 = 136315138;
      v84[0] = a1;
      uint64_t v38 = String.init<A>(reflecting:)();
      v84[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, (uint64_t *)&v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v33, v34, "Creating new message stream for session %s", v36, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v37, -1, -1);
      MEMORY[0x1A624F870](v36, -1, -1);
    }

    uint64_t v40 = v70;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    uint64_t v41 = PropertyListDecoder.init()();
    if (one-time initialization token for typedPayloadDecoderMap != -1) {
      swift_once();
    }
    uint64_t v42 = __swift_project_value_buffer(v15, (uint64_t)static CodingUserInfoKey.typedPayloadDecoderMap);
    uint64_t v43 = (uint64_t)v79;
    (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v79, v42, v15);
    uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : TypedPayloadDecoding]);
    *(void *)&long long v86 = MEMORY[0x1E4FBC868];
    uint64_t v44 = (void (*)(void *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
    specialized Dictionary.subscript.setter((uint64_t)&v86, v43);
    v44(v84, 0);
    if (v82 != MEMORY[0x1E4F277C0])
    {
      uint64_t v45 = v75;
      uint64_t v46 = v77;
      uint64_t v47 = static Encodable.messageIdentifier.getter(v75);
      uint64_t v49 = v48;
      TypedPayloadDecoder.init()(v45, v76, v46);
      uint64_t v50 = type metadata accessor for TypedPayloadDecoder();
      uint64_t v87 = v50;
      uint64_t v88 = &protocol witness table for TypedPayloadDecoder<A>;
      unint64_t v51 = PropertyListDecoder.messageDecodersByMessageIdentifier.getter();
      uint64_t v85 = v51;
      if (v50)
      {
        unint64_t v52 = v51;
        outlined init with take of TypedPayloadDecoding(&v86, (uint64_t)v84);
        char v53 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v83 = v52;
        uint64_t v85 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v84, v47, v49, v53);
        uint64_t v85 = v83;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v86, &demangling cache variable for type metadata for TypedPayloadDecoding?);
        specialized Dictionary._Variant.removeValue(forKey:)(v47, v49, (uint64_t)v84);
        swift_bridgeObjectRelease();
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v84, &demangling cache variable for type metadata for TypedPayloadDecoding?);
      }
      PropertyListDecoder.messageDecodersByMessageIdentifier.setter(v85);
    }
    *(void *)&long long v86 = (*(uint64_t (**)(uint64_t))(v81 + 8))(ObjectType);
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = partial apply for closure #1 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:);
    *(void *)(v54 + 24) = v41;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(Data, Participant, SendReliability), Never>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability));
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<(Data, Participant, SendReliability), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(Data, Participant, SendReliability), Never>);
    id v55 = v71;
    Publisher.compactMap<A>(_:)();
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>);
    uint64_t v56 = v72;
    uint64_t v57 = Publisher.share()();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v55, v56);
    *(void *)&long long v86 = v57;
    *(void *)(swift_allocObject() + 16) = a1;
    *(void *)(swift_allocObject() + 16) = a1;
    *(void *)(swift_allocObject() + 16) = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>> and conformance Publishers.Share<A>, &demangling cache variable for type metadata for Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>);
    unint64_t v58 = v73;
    Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.Share<Publishers.CompactMap<AnyPublisher<(Data, Participant, SendReliability), Never>, (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)>>>);
    uint64_t v20 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v74 + 8))(v58, v11);
    swift_beginAccess();
    swift_retain();
    swift_retain();
    char v59 = swift_isUniquelyReferenced_nonNull_native();
    v84[0] = static GroupSessionMessenger.MessageStreamStore.contents;
    static GroupSessionMessenger.MessageStreamStore.contents = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, v41, v20, a1, v59);
    static GroupSessionMessenger.MessageStreamStore.contents = (_UNKNOWN *)v84[0];
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();
  }
  Lock.unlock()();
  return v20;
}

uint64_t closure #1 in GroupSessionMessenger.receive<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v29 = a8;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  unint64_t v18 = (char *)&v28 - v17;
  if (a4)
  {
    if (*a3)
    {
LABEL_3:
      outlined init with copy of GroupSessionMessenger.MessageType(a1, (uint64_t)v30);
      if (v31)
      {
        v32[0] = v30[0];
        v32[1] = v30[1];
        v32[2] = v30[2];
        uint64_t v19 = TypedPayloadBox.unbox<A>(as:)(a5, (uint64_t)v18);
        MEMORY[0x1F4188790](v19);
        *(&v28 - 4) = a5;
        *(&v28 - 3) = a6;
        *(&v28 - 2) = a7;
        *(&v28 - 1) = a2;
        type metadata accessor for GroupSessionMessenger.MessageContext();
        TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
        _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #1 in GroupSessionMessenger.receive<A>(_:), (uint64_t)(&v28 - 6), MEMORY[0x1E4FBC248], TupleTypeMetadata2, v21, v29);
        (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
        return outlined destroy of TypedPayloadBox((uint64_t)v32);
      }
      else
      {
        outlined destroy of GroupSessionMessenger.MessageType((uint64_t)v30);
        type metadata accessor for GroupSessionMessenger.MessageContext();
        uint64_t v27 = swift_getTupleTypeMetadata2();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v29, 1, 1, v27);
      }
    }
  }
  else if ((*a3 & 1) == 0)
  {
    goto LABEL_3;
  }
  type metadata accessor for GroupSessionMessenger.MessageContext();
  uint64_t v23 = swift_getTupleTypeMetadata2();
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
  uint64_t v25 = v23;
  uint64_t v26 = v29;

  return v24(v26, 1, 1, v25);
}

uint64_t sub_1A3842260()
{
  return MEMORY[0x1F4186498](v0, 41, 7);
}

uint64_t partial apply for closure #1 in GroupSessionMessenger.receive<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  return closure #1 in GroupSessionMessenger.receive<A>(_:)(a1, a2, a3, *(unsigned char *)(v4 + 40), *(void *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), a4);
}

uint64_t closure #1 in closure #1 in GroupSessionMessenger.receive<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for GroupSessionMessenger.MessageContext();
  uint64_t v8 = a4 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a4, a1, a3);
  return _s15GroupActivities11ParticipantVWOcTm_0(a2, v8, (uint64_t (*)(void))type metadata accessor for GroupSessionMessenger.MessageContext);
}

uint64_t sub_1A3842340()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed GroupSessionMessenger.MessageWrapper, @in_guaranteed GroupSessionMessenger.MessageContext, @in_guaranteed SendReliability) -> (@out (A, GroupSessionMessenger.MessageContext)?)(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 40);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability));
  return v3(a1, a1 + *(int *)(v4 + 48), a1 + *(int *)(v4 + 64));
}

void closure #2 in GroupSessionMessenger.receive<A>(_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for GroupSessionMessenger.MessageContext();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v5 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v21 - v9;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Log.default);
  uint64_t v12 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v13 = (uint64_t)&v10[v12];
  uint64_t v14 = a1 + v12;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v10, a1, a2);
  _s15GroupActivities11ParticipantVWOcTm_0(v14, v13, (uint64_t (*)(void))type metadata accessor for GroupSessionMessenger.MessageContext);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v10, TupleTypeMetadata2);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v22 = v18;
    *(_DWORD *)uint64_t v17 = 136315138;
    swift_getDynamicType();
    uint64_t v19 = _typeName(_:qualified:)();
    uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, TupleTypeMetadata2);
    _os_log_impl(&dword_1A375F000, v15, v16, "Receiving message: %s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v18, -1, -1);
    MEMORY[0x1A624F870](v17, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, TupleTypeMetadata2);
  }
}

uint64_t sub_1A38426D4()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

void partial apply for closure #2 in GroupSessionMessenger.receive<A>(_:)(uint64_t a1)
{
  closure #2 in GroupSessionMessenger.receive<A>(_:)(a1, *(void *)(v1 + 16));
}

void GroupSessionMessenger.receive(_:)(void *a1@<X8>)
{
  v14[0] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (Data, GroupSessionMessenger.MessageContext)>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (Data, GroupSessionMessenger.MessageContext)>>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[1] = (void *)specialized static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(*(void *)(v1 + 16), *(void *)(v1 + 24));
  char v10 = *(unsigned char *)(v1 + 40);
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = v10;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = partial apply for closure #1 in GroupSessionMessenger.receive(_:);
  *(void *)(v12 + 24) = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, GroupSessionMessenger.MessageContext));
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>);
  Publisher.compactMap<A>(_:)();
  swift_release();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (Data, GroupSessionMessenger.MessageContext)> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (Data, GroupSessionMessenger.MessageContext)>);
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.HandleEvents<Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (Data, GroupSessionMessenger.MessageContext)>> and conformance Publishers.HandleEvents<A>, &demangling cache variable for type metadata for Publishers.HandleEvents<Publishers.CompactMap<AnyPublisher<(GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability), Never>, (Data, GroupSessionMessenger.MessageContext)>>);
  uint64_t v13 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  specialized GroupSessionMessenger.MessageStream.init(outputStream:)(v13, 1635017028, 0xE400000000000000, v14[0]);
}

uint64_t closure #1 in GroupSessionMessenger.receive(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  if (a4)
  {
    if (*a3)
    {
LABEL_3:
      outlined init with copy of GroupSessionMessenger.MessageType(a1, (uint64_t)v15);
      if (v16 == 1)
      {
        outlined destroy of GroupSessionMessenger.MessageType((uint64_t)v15);
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, GroupSessionMessenger.MessageContext));
        return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a5, 1, 1, v7);
      }
      else
      {
        uint64_t v11 = v15[0];
        uint64_t v12 = v15[1];
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, GroupSessionMessenger.MessageContext));
        uint64_t v14 = (uint64_t)a5 + *(int *)(v13 + 48);
        *a5 = v11;
        a5[1] = v12;
        _s15GroupActivities11ParticipantVWOcTm_0(a2, v14, (uint64_t (*)(void))type metadata accessor for GroupSessionMessenger.MessageContext);
        return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a5, 0, 1, v13);
      }
    }
  }
  else if ((*a3 & 1) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, GroupSessionMessenger.MessageContext));
  char v10 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);

  return v10(a5, 1, 1, v9);
}

void closure #2 in GroupSessionMessenger.receive(_:)(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, GroupSessionMessenger.MessageContext));
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v5 = (void *)((char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = MEMORY[0x1F4188790](v3);
  uint64_t v8 = (char *)v28 - v7;
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v11 = (void *)((char *)v28 - v10);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (void *)((char *)v28 - v12);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.default);
  uint64_t v15 = *(int *)(v2 + 48);
  uint64_t v16 = (uint64_t)a1 + v15;
  uint64_t v18 = *a1;
  unint64_t v17 = a1[1];
  *uint64_t v13 = v18;
  v13[1] = v17;
  _s15GroupActivities11ParticipantVWOcTm_0(v16, (uint64_t)v13 + v15, (uint64_t (*)(void))type metadata accessor for GroupSessionMessenger.MessageContext);
  outlined init with copy of URL?((uint64_t)v13, (uint64_t)v11, &demangling cache variable for type metadata for (Data, GroupSessionMessenger.MessageContext));
  outlined init with take of (Data, GroupSessionMessenger.MessageContext)((uint64_t)v13, (uint64_t)v8);
  outlined copy of Data._Representation(v18, v17);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 134217984;
    uint64_t v22 = *(int *)(v2 + 48);
    uint64_t v23 = (uint64_t)v5 + v22;
    uint64_t v24 = *v11;
    unint64_t v25 = v11[1];
    *uint64_t v5 = *v11;
    v5[1] = v25;
    _s15GroupActivities11ParticipantVWOcTm_0((uint64_t)v11 + v22, (uint64_t)v5 + v22, (uint64_t (*)(void))type metadata accessor for GroupSessionMessenger.MessageContext);
    switch(v25 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v24), v24))
        {
          __break(1u);
          JUMPOUT(0x1A3842EA0);
        }
        unint64_t v25 = HIDWORD(v24) - (int)v24;
        break;
      case 2uLL:
        uint64_t v27 = *(void *)(v24 + 16);
        uint64_t v26 = *(void *)(v24 + 24);
        unint64_t v25 = v26 - v27;
        if (__OFSUB__(v26, v27))
        {
          __break(1u);
          goto LABEL_12;
        }
        break;
      case 3uLL:
LABEL_12:
        outlined consume of Data._Representation(v24, v25);
        unint64_t v25 = 0;
        break;
      default:
        outlined consume of Data._Representation(v24, v25);
        unint64_t v25 = BYTE6(v25);
        break;
    }
    outlined destroy of GroupSessionMessenger.MessageContext(v23);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v11, &demangling cache variable for type metadata for (Data, GroupSessionMessenger.MessageContext));
    v28[1] = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for (Data, GroupSessionMessenger.MessageContext));
    _os_log_impl(&dword_1A375F000, v19, v20, "Receiving raw data of length: %ld", v21, 0xCu);
    MEMORY[0x1A624F870](v21, -1, -1);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v11, &demangling cache variable for type metadata for (Data, GroupSessionMessenger.MessageContext));
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for (Data, GroupSessionMessenger.MessageContext));
  }
}

void *one-time initialization function for contents()
{
  uint64_t result = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  static GroupSessionMessenger.MessageStreamStore.contents = result;
  return result;
}

uint64_t static GroupSessionMessenger.MessageStreamStore.contentsCount.getter()
{
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  Lock.withLock<A>(_:)();
  return v1;
}

uint64_t *GroupSessionMessenger.MessageStreamStore.lock.unsafeMutableAddressor()
{
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  return &static GroupSessionMessenger.MessageStreamStore.lock;
}

uint64_t closure #1 in static GroupSessionMessenger.MessageStreamStore.contentsCount.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for contents != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  *a1 = *((void *)static GroupSessionMessenger.MessageStreamStore.contents + 2);
  return result;
}

uint64_t one-time initialization function for lock()
{
  type metadata accessor for Lock();
  swift_allocObject();
  uint64_t result = Lock.init()();
  static GroupSessionMessenger.MessageStreamStore.lock = result;
  return result;
}

uint64_t static GroupSessionMessenger.MessageStreamStore.lock.getter()
{
  if (one-time initialization token for lock != -1) {
    swift_once();
  }

  return swift_retain();
}

unint64_t PropertyListDecoder.messageDecodersByMessageIdentifier.getter()
{
  uint64_t v0 = type metadata accessor for CodingUserInfoKey();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for typedPayloadDecoderMap != -1) {
    swift_once();
  }
  uint64_t v4 = __swift_project_value_buffer(v0, (uint64_t)static CodingUserInfoKey.typedPayloadDecoderMap);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  uint64_t v5 = dispatch thunk of PropertyListDecoder.userInfo.getter();
  if (*(void *)(v5 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v3), (v7 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v6, (uint64_t)&v10);
  }
  else
  {
    long long v10 = 0u;
    long long v11 = 0u;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (*((void *)&v11 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : TypedPayloadDecoding]);
    if (swift_dynamicCast()) {
      return v9[1];
    }
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v10, &demangling cache variable for type metadata for Any?);
  }
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
}

uint64_t PropertyListDecoder.messageDecodersByMessageIdentifier.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v24 = v2;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v23 = v5;
    uint64_t v12 = (uint8_t *)v11;
    uint64_t v13 = swift_slowAlloc();
    v26[0] = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    v22[1] = v12 + 4;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TypedPayloadDecoding);
    uint64_t v14 = Dictionary.description.getter();
    uint64_t v15 = v7;
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();
    v25[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v17, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    char v7 = v15;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v9, v10, "Registering new typed payload decoding map: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v13, -1, -1);
    uint64_t v18 = v12;
    uint64_t v5 = v23;
    MEMORY[0x1A624F870](v18, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (one-time initialization token for typedPayloadDecoderMap != -1) {
    swift_once();
  }
  uint64_t v19 = __swift_project_value_buffer(v4, (uint64_t)static CodingUserInfoKey.typedPayloadDecoderMap);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v19, v4);
  void v26[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : TypedPayloadDecoding]);
  v26[0] = a1;
  os_log_type_t v20 = (uint64_t (*)(uint64_t *, void))dispatch thunk of PropertyListDecoder.userInfo.modify();
  specialized Dictionary.subscript.setter((uint64_t)v26, (uint64_t)v7);
  return v20(v25, 0);
}

uint64_t receiveCompletionOrCancel #1 <A>() in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(uint64_t a1)
{
  if (one-time initialization token for lock != -1) {
    a1 = swift_once();
  }
  MEMORY[0x1F4188790](a1);
  return Lock.withLock<A>(_:)();
}

uint64_t closure #1 in receiveCompletionOrCancel #1 <A>() in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(uint64_t a1)
{
  if (one-time initialization token for contents != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v3 = specialized Dictionary.subscript.modify(v23, a1);
  if (v2[1])
  {
    if (__OFSUB__(*v2, 1))
    {
      __break(1u);
LABEL_20:
      swift_once();
LABEL_11:
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Log.default);
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        uint64_t v15 = swift_slowAlloc();
        v23[0] = v15;
        *(_DWORD *)uint64_t v14 = 136315138;
        unint64_t v25 = v14 + 4;
        uint64_t v24 = (void *)a1;
        uint64_t v16 = String.init<A>(reflecting:)();
        uint64_t v24 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A375F000, v12, v13, "Removing stored message stream for session %s", v14, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v15, -1, -1);
        MEMORY[0x1A624F870](v14, -1, -1);
      }

      swift_beginAccess();
      unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if (v19)
      {
        unint64_t v20 = v18;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v22 = static GroupSessionMessenger.MessageStreamStore.contents;
        uint64_t v24 = static GroupSessionMessenger.MessageStreamStore.contents;
        static GroupSessionMessenger.MessageStreamStore.contents = (_UNKNOWN *)0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v22 = v24;
        }
        specialized _NativeDictionary._delete(at:)(v20, (uint64_t)v22);
        static GroupSessionMessenger.MessageStreamStore.contents = v22;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
      return swift_endAccess();
    }
    --*v2;
    ((void (*)(uint64_t *, void))v3)(v23, 0);
  }
  else
  {
    ((void (*)(uint64_t *, void))v3)(v23, 0);
  }
  swift_endAccess();
  swift_beginAccess();
  uint64_t v4 = static GroupSessionMessenger.MessageStreamStore.contents;
  if (*((void *)static GroupSessionMessenger.MessageStreamStore.contents + 2))
  {
    unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v6)
    {
      char v7 = (uint64_t *)(v4[7] + 24 * v5);
      uint64_t v8 = *v7;
      uint64_t v9 = v7[1];
      swift_endAccess();
      swift_retain();
      swift_retain();
      uint64_t result = outlined consume of GroupSessionMessenger.MessageStreamStore.Storage?(v8, v9);
      if (v8) {
        return result;
      }
      if (one-time initialization token for default == -1) {
        goto LABEL_11;
      }
      goto LABEL_20;
    }
  }
  return swift_endAccess();
}

uint64_t closure #1 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)@<X0>(uint64_t a1@<X8>)
{
  tryLog<A>(_:_:function:line:)();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF15GroupActivities0C16SessionMessengerC14MessageWrapper33_7F6FED5A36F2E7FBC6D91B446E55DE7FLLV_s5NeverOAI_AF0G7ContextVAD15SendReliabilityOtTg5((void (*)(_OWORD *))partial apply for closure #1 in closure #1 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:), a1);
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v3, &demangling cache variable for type metadata for GroupSessionMessenger.MessageWrapper?);
}

uint64_t closure #2 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(uint64_t a1)
{
  if (one-time initialization token for lock != -1) {
    a1 = swift_once();
  }
  MEMORY[0x1F4188790](a1);
  return Lock.withLock<A>(_:)();
}

void (*closure #1 in closure #2 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(uint64_t a1))(void *a1)
{
  if (one-time initialization token for contents != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = specialized Dictionary.subscript.modify(v4, a1);
  if (!v3[1])
  {
    ((void (*)(void *, void))result)(v4, 0);
    return (void (*)(void *))swift_endAccess();
  }
  if (!__OFADD__(*v3, 1))
  {
    ++*v3;
    ((void (*)(void *, void))result)(v4, 0);
    return (void (*)(void *))swift_endAccess();
  }
  __break(1u);
  return result;
}

uint64_t closure #3 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(uint64_t a1)
{
  if (one-time initialization token for lock != -1) {
    a1 = swift_once();
  }
  MEMORY[0x1F4188790](a1);
  return Lock.withLock<A>(_:)();
}

uint64_t outlined assign with take of Participant(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Participant();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Participant(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Participant();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A3843DD4()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t partial apply for closure #1 in GroupSessionMessenger.receive(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, void *a4@<X8>)
{
  return closure #1 in GroupSessionMessenger.receive(_:)(a1, a2, a3, *(unsigned char *)(v4 + 16), a4);
}

uint64_t sub_1A3843DEC()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in static GroupSessionMessenger.MessageStreamStore.contentsCount.getter@<X0>(void *a1@<X8>)
{
  return closure #1 in static GroupSessionMessenger.MessageStreamStore.contentsCount.getter(a1);
}

unint64_t lazy protocol witness table accessor for type GroupSessionMessenger.DeliveryMode and conformance GroupSessionMessenger.DeliveryMode()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupSessionMessenger.DeliveryMode and conformance GroupSessionMessenger.DeliveryMode;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.DeliveryMode and conformance GroupSessionMessenger.DeliveryMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.DeliveryMode and conformance GroupSessionMessenger.DeliveryMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GroupSessionMessenger.MessageReliability and conformance GroupSessionMessenger.MessageReliability()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageReliability and conformance GroupSessionMessenger.MessageReliability;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageReliability and conformance GroupSessionMessenger.MessageReliability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageReliability and conformance GroupSessionMessenger.MessageReliability);
  }
  return result;
}

uint64_t type metadata accessor for GroupSessionMessenger()
{
  return self;
}

uint64_t method lookup function for GroupSessionMessenger(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for GroupSessionMessenger);
}

uint64_t dispatch thunk of GroupSessionMessenger.__allocating_init<A>(session:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of GroupSessionMessenger.__allocating_init<A>(session:deliveryMode:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of GroupSessionMessenger.__allocating_init(transportSession:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

ValueMetadata *type metadata accessor for GroupSessionMessenger.DeliveryMode()
{
  return &type metadata for GroupSessionMessenger.DeliveryMode;
}

ValueMetadata *type metadata accessor for GroupSessionMessenger.MessageReliability()
{
  return &type metadata for GroupSessionMessenger.MessageReliability;
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupSessionMessenger.MessageContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Participant();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(v6 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    os_log_type_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    *(uint64_t *)((char *)a1 + *(int *)(v6 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for GroupSessionMessenger.MessageContext(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  type metadata accessor for Participant();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GroupSessionMessenger.MessageContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for Participant();
  uint64_t v6 = *(int *)(v5 + 20);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (uint64_t *)(a2 + v6);
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  *uint64_t v7 = v10;
  v7[1] = v9;
  *(void *)(a1 + *(int *)(v5 + 24)) = *(void *)(a2 + *(int *)(v5 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GroupSessionMessenger.MessageContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for Participant();
  uint64_t v6 = *(int *)(v5 + 20);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(v5 + 24)) = *(void *)(a2 + *(int *)(v5 + 24));
  return a1;
}

uint64_t initializeWithTake for GroupSessionMessenger.MessageContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for Participant();
  *(_OWORD *)(a1 + *(int *)(v5 + 20)) = *(_OWORD *)(a2 + *(int *)(v5 + 20));
  *(void *)(a1 + *(int *)(v5 + 24)) = *(void *)(a2 + *(int *)(v5 + 24));
  return a1;
}

uint64_t assignWithTake for GroupSessionMessenger.MessageContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for Participant();
  uint64_t v6 = *(int *)(v5 + 20);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (uint64_t *)(a2 + v6);
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  *uint64_t v7 = v10;
  v7[1] = v9;
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(v5 + 24)) = *(void *)(a2 + *(int *)(v5 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionMessenger.MessageContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1A384436C);
}

uint64_t sub_1A384436C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Participant();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for GroupSessionMessenger.MessageContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1A38443EC);
}

uint64_t sub_1A38443EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Participant();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for GroupSessionMessenger.MessageContext()
{
  uint64_t result = type metadata accessor for Participant();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for GroupSessionMessenger.MessageStream()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for GroupSessionMessenger.MessageStreamStore()
{
  return &type metadata for GroupSessionMessenger.MessageStreamStore;
}

uint64_t destroy for GroupSessionMessenger.MessageWrapper(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)a1;

  return outlined consume of Data._Representation(v3, v2);
}

uint64_t initializeWithCopy for GroupSessionMessenger.MessageWrapper(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 48);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 40);
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    *(void *)(a1 + 40) = v4;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
  }
  else
  {
    uint64_t v6 = *(void *)a2;
    unint64_t v7 = *(void *)(a2 + 8);
    outlined copy of Data._Representation(*(void *)a2, v7);
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v7;
  }
  *(unsigned char *)(a1 + 48) = v3;
  return a1;
}

uint64_t assignWithCopy for GroupSessionMessenger.MessageWrapper(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of GroupSessionMessenger.MessageType(a1);
    char v4 = *(unsigned char *)(a2 + 48);
    if (v4)
    {
      uint64_t v5 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v5;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    }
    else
    {
      uint64_t v7 = *(void *)a2;
      unint64_t v6 = *(void *)(a2 + 8);
      outlined copy of Data._Representation(v7, v6);
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v6;
    }
    *(unsigned char *)(a1 + 48) = v4;
  }
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GroupSessionMessenger.MessageWrapper(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of GroupSessionMessenger.MessageType(a1);
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionMessenger.MessageWrapper(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupSessionMessenger.MessageWrapper(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionMessenger.MessageWrapper()
{
  return &type metadata for GroupSessionMessenger.MessageWrapper;
}

uint64_t destroy for GroupSessionMessenger.MessageType(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 48);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 == 1) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)a1;

  return outlined consume of Data._Representation(v4, v3);
}

uint64_t initializeWithCopy for GroupSessionMessenger.MessageType(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 48);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    uint64_t v4 = a2[5];
    long long v5 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v5;
    *(void *)(a1 + 40) = v4;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    char v6 = 1;
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    outlined copy of Data._Representation(*a2, v8);
    char v6 = 0;
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
  }
  *(unsigned char *)(a1 + 48) = v6;
  return a1;
}

uint64_t assignWithCopy for GroupSessionMessenger.MessageType(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 48);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
    }
    else {
      outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 48);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v6;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      char v7 = 1;
    }
    else
    {
      uint64_t v9 = *(void *)a2;
      unint64_t v8 = *(void *)(a2 + 8);
      outlined copy of Data._Representation(v9, v8);
      char v7 = 0;
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v8;
    }
    *(unsigned char *)(a1 + 48) = v7;
  }
  return a1;
}

uint64_t assignWithTake for GroupSessionMessenger.MessageType(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 48);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
    }
    else {
      outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 48);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    }
    else
    {
      LOBYTE(v5) = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    *(unsigned char *)(a1 + 48) = v5;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionMessenger.MessageType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for GroupSessionMessenger.MessageType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for GroupSessionMessenger.MessageType(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 48);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for GroupSessionMessenger.MessageType(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionMessenger.MessageType()
{
  return &type metadata for GroupSessionMessenger.MessageType;
}

unint64_t lazy protocol witness table accessor for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType.CodingKeys and conformance GroupSessionMessenger.MessageType.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TypedPayloadBox and conformance TypedPayloadBox()
{
  unint64_t result = lazy protocol witness table cache variable for type TypedPayloadBox and conformance TypedPayloadBox;
  if (!lazy protocol witness table cache variable for type TypedPayloadBox and conformance TypedPayloadBox)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypedPayloadBox and conformance TypedPayloadBox);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TypedPayloadBox and conformance TypedPayloadBox;
  if (!lazy protocol witness table cache variable for type TypedPayloadBox and conformance TypedPayloadBox)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypedPayloadBox and conformance TypedPayloadBox);
  }
  return result;
}

uint64_t outlined init with take of GroupSessionMessenger.MessageType(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  long long v4 = a1[2];
  *(unsigned char *)(a2 + 48) = *((unsigned char *)a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v2;
  return a2;
}

unint64_t lazy protocol witness table accessor for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper.CodingKeys and conformance GroupSessionMessenger.MessageWrapper.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GroupSessionMessenger.MessageType and conformance GroupSessionMessenger.MessageType()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType and conformance GroupSessionMessenger.MessageType;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType and conformance GroupSessionMessenger.MessageType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType and conformance GroupSessionMessenger.MessageType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType and conformance GroupSessionMessenger.MessageType;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType and conformance GroupSessionMessenger.MessageType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageType and conformance GroupSessionMessenger.MessageType);
  }
  return result;
}

void (*specialized Dictionary._Variant.subscript.modify(void *a1, uint64_t a2))(uint64_t a1)
{
  long long v4 = malloc(0x68uLL);
  *a1 = v4;
  uint64_t v5 = type metadata accessor for UUID();
  v4[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  v4[9] = v6;
  unint64_t v8 = malloc(*(void *)(v6 + 64));
  v4[10] = v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v8, a2, v5);
  v4[11] = specialized Dictionary._Variant.asNative.modify(v4);
  v4[12] = specialized _NativeDictionary.subscript.modify(v4 + 4, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

{
  void *v4;
  char isUniquelyReferenced_nonNull_native;

  long long v4 = malloc(0x50uLL);
  *a1 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = specialized Dictionary._Variant.asNative.modify(v4);
  v4[9] = specialized _NativeDictionary.subscript.modify(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void Dictionary._Variant.subscript.modifyspecialized (uint64_t a1)
{
  unsigned int v1 = *(void **)a1;
  long long v2 = *(void (**)(void *, void))(*(void *)a1 + 88);
  uint64_t v4 = *(void *)(*(void *)a1 + 72);
  long long v3 = *(void **)(*(void *)a1 + 80);
  uint64_t v5 = *(void *)(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 96))();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  v2(v1, 0);
  free(v3);

  free(v1);
}

{
  void *v1;
  void (*v2)(void *, void);
  uint64_t vars8;

  unsigned int v1 = *(void **)a1;
  long long v2 = *(void (**)(void *, void))(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 72))();
  v2(v1, 0);

  free(v1);
}

void (*specialized _NativeDictionary.subscript.modify(void *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t v4 = v3;
  unint64_t v8 = malloc(0x30uLL);
  *a1 = v8;
  _OWORD v8[2] = a2;
  v8[3] = v3;
  uint64_t v9 = *v3;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  *((unsigned char *)v8 + 40) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[4] = v11;
      if (v15)
      {
LABEL_8:
        unint64_t v17 = (uint64_t *)(*(void *)(*v4 + 56) + 16 * v11);
        uint64_t v18 = *v17;
        uint64_t v19 = v17[1];
LABEL_12:
        *unint64_t v8 = v18;
        v8[1] = v19;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
    unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v21 & 1))
    {
      unint64_t v11 = v20;
      v8[4] = v20;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  type metadata accessor for UUID();
  unint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  void *v3;
  void *v4;
  char *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  unint64_t v20;
  char v21;
  void (*result)(uint64_t **);

  uint64_t v4 = v3;
  unint64_t v8 = (char *)malloc(0x38uLL);
  *a1 = v8;
  *((void *)v8 + 3) = a2;
  *((void *)v8 + 4) = v3;
  uint64_t v9 = *v3;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v8[48] = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      *((void *)v8 + 5) = v11;
      if (v15)
      {
LABEL_8:
        unint64_t v17 = *(void *)(*v4 + 56) + 24 * v11;
        uint64_t v18 = *(void *)v17;
        uint64_t v19 = *(_OWORD *)(v17 + 8);
LABEL_12:
        *(void *)unint64_t v8 = v18;
        *(_OWORD *)(v8 + 8) = v19;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      uint64_t v18 = 0;
      uint64_t v19 = 0uLL;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
    unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v21 & 1))
    {
      unint64_t v11 = v20;
      *((void *)v8 + 5) = v20;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  unint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t **a1)
{
  unsigned int v1 = *a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *((unsigned char *)*a1 + 40), (uint64_t *)(*a1)[3], (*a1)[4], (*a1)[2]);
  outlined consume of SystemCoordinatorTable.Storage?(*v1, v1[1]);

  free(v1);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t vars8;

  unsigned int v1 = *a1;
  long long v2 = **a1;
  long long v3 = (*a1)[1];
  uint64_t v4 = (*a1)[2];
  uint64_t v5 = *((unsigned char *)*a1 + 48);
  if (v3)
  {
    uint64_t v6 = v1[5];
    uint64_t v7 = *(void **)v1[4];
    if (v5)
    {
      unint64_t v8 = (uint64_t *)(v7[7] + 24 * v6);
      *unint64_t v8 = v2;
      v8[1] = v3;
      _OWORD v8[2] = v4;
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(v6, v1[3], v2, v3, v4, v7);
    }
  }
  else if ((*a1)[6])
  {
    specialized _NativeDictionary._delete(at:)(v1[5], *(void *)v1[4]);
  }
  uint64_t v9 = *v1;
  char v10 = v1[1];
  outlined copy of GroupSessionMessenger.MessageStreamStore.Storage?(v2, v3);
  outlined consume of GroupSessionMessenger.MessageStreamStore.Storage?(v9, v10);

  free(v1);
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *unsigned int v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t Dictionary._Variant.asNative.modifyspecialized (uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(void *a1))()
{
  *a1 = *v1;
  a1[1] = v1;
  *unsigned int v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  MEMORY[0x1F4188790](v10);
  BOOL v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *a1;
  uint64_t v14 = a1[1];
  if (v14)
  {
    uint64_t v16 = (void *)*a3;
    if (a2)
    {
      unint64_t v17 = (uint64_t *)(v16[7] + 16 * a4);
      *unint64_t v17 = v15;
      v17[1] = v14;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 16))(v13, a5);
      specialized _NativeDictionary._insert(at:key:value:)(a4, (uint64_t)v13, v15, v14, v16);
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }
  return outlined copy of SystemCoordinatorTable.Storage?(v15, v14);
}

uint64_t _s15GroupActivities11ParticipantVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of (Data, GroupSessionMessenger.MessageContext)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, GroupSessionMessenger.MessageContext));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of GroupSessionMessenger.MessageContext(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for GroupSessionMessenger.MessageContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(a1);
}

uint64_t sub_1A3845650()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #2 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(uint64_t a1)
{
  return closure #2 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(a1);
}

uint64_t sub_1A3845668()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #3 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(uint64_t a1)
{
  return closure #3 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(a1);
}

uint64_t sub_1A3845680()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for receiveCompletionOrCancel #1 <A>() in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)()
{
  return receiveCompletionOrCancel #1 <A>() in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(*(void *)(v0 + 16));
}

uint64_t partial apply for closure #1 in receiveCompletionOrCancel #1 <A>() in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)()
{
  return closure #1 in receiveCompletionOrCancel #1 <A>() in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(*(void *)(v0 + 16));
}

uint64_t outlined consume of GroupSessionMessenger.MessageStreamStore.Storage?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined copy of GroupSessionMessenger.MessageStreamStore.Storage?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

void (*partial apply for closure #1 in closure #2 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)())(void *a1)
{
  return closure #1 in closure #2 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)(*(void *)(v0 + 16));
}

uint64_t partial apply for implicit closure #1 in closure #1 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)()
{
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
}

uint64_t partial apply for closure #1 in closure #1 in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  char v6 = *(unsigned char *)(v2 + 24);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability));
  uint64_t v8 = a2 + *(int *)(v7 + 48);
  uint64_t v9 = *(int *)(v7 + 64);
  outlined init with copy of GroupSessionMessenger.MessageWrapper(a1, a2);
  uint64_t result = _s15GroupActivities11ParticipantVWOcTm_0(v5, v8, (uint64_t (*)(void))type metadata accessor for Participant);
  *(unsigned char *)(a2 + v9) = v6;
  return result;
}

uint64_t outlined init with copy of GroupSessionMessenger.MessageWrapper(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type GroupSessionMessenger.MessageWrapper and conformance GroupSessionMessenger.MessageWrapper()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper and conformance GroupSessionMessenger.MessageWrapper;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper and conformance GroupSessionMessenger.MessageWrapper)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper and conformance GroupSessionMessenger.MessageWrapper);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper and conformance GroupSessionMessenger.MessageWrapper;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper and conformance GroupSessionMessenger.MessageWrapper)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageWrapper and conformance GroupSessionMessenger.MessageWrapper);
  }
  return result;
}

uint64_t outlined copy of SystemCoordinatorTable.Storage?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in GroupSessionMessenger.send(messageWrapper:to:deliveryMode:completion:)@<X0>(uint64_t *a1@<X8>)
{
  return implicit closure #1 in GroupSessionMessenger.send(messageWrapper:to:deliveryMode:completion:)(a1);
}

uint64_t partial apply for closure #1 in closure #1 in GroupSessionMessenger.receive<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in GroupSessionMessenger.receive<A>(_:)(a1, *(void *)(v2 + 40), *(void *)(v2 + 16), a2);
}

uint64_t sub_1A38459B8()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1A38459C8()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1A38459D8()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Data, @in_guaranteed Participant, @in_guaranteed SendReliability) -> (@out (GroupSessionMessenger.MessageWrapper, GroupSessionMessenger.MessageContext, SendReliability)?)(char *a1)
{
  long long v3 = *(uint64_t (**)(uint64_t, uint64_t, char *, char *))(v1 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, Participant, SendReliability));
  return v3(v4, v5, &a1[*(int *)(v6 + 48)], &a1[*(int *)(v6 + 64)]);
}

uint64_t sub_1A3845A54()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1A3845A64()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1A3845A74()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t destroy for GroupSessionMessenger.MessageStreamStore.Storage()
{
  swift_release();

  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for GroupSessionMessenger.MessageStreamStore.Storage(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for GroupSessionMessenger.MessageStreamStore.Storage(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for GroupSessionMessenger.MessageStreamStore.Storage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionMessenger.MessageStreamStore.Storage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupSessionMessenger.MessageStreamStore.Storage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for GroupSessionMessenger.MessageStreamStore.Storage()
{
  return &unk_1EF7193B8;
}

unsigned char *storeEnumTagSinglePayload for GroupSessionMessenger.MessageWrapper.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1A3845CE8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for GroupSessionMessenger.MessageWrapper.CodingKeys()
{
  return &unk_1EF719218;
}

unsigned char *storeEnumTagSinglePayload for GroupSessionMessenger.DeliveryMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A3845DECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for GroupSessionMessenger.MessageType.CodingKeys()
{
  return &unk_1EF719068;
}

uint64_t closure #1 in receiveCompletionOrCancel #1 <A>() in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)partial apply()
{
  return partial apply for closure #1 in receiveCompletionOrCancel #1 <A>() in static GroupSessionMessenger.MessageStreamStore.messageStream<A>(for:messageType:)();
}

void specialized closure #1 in _PublisherElements.Iterator.Inner.next()(uint64_t a1, void *a2)
{
}

void specialized closure #1 in _PublisherElements.Iterator.Inner.next()(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = (os_unfair_lock_s *)a2[2];
  os_unfair_lock_lock(v10);
  swift_beginAccess();
  outlined init with copy of URL?((uint64_t)(a2 + 4), (uint64_t)&v24, a3);
  if (!v25)
  {
    uint64_t v11 = a2 + 3;
    swift_beginAccess();
    uint64_t v12 = (void *)a2[3];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    a2[3] = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12, a5);
      *uint64_t v11 = v12;
    }
    unint64_t v15 = v12[2];
    unint64_t v14 = v12[3];
    if (v15 >= v14 >> 1)
    {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v12, a5);
      *uint64_t v11 = v12;
    }
    v12[2] = v15 + 1;
    v12[v15 + 4] = a1;
    swift_endAccess();
    swift_beginAccess();
    uint64_t v16 = a2[9];
    static Subscribers.Demand.unlimited.getter();
    if (static Subscribers.Demand.== infix(_:_:)()) {
      goto LABEL_12;
    }
    if (v16 < 0)
    {
      __break(1u);
      return;
    }
    uint64_t v17 = v16 + 1;
    if (__OFADD__(v16, 1)) {
LABEL_12:
    }
      uint64_t v17 = static Subscribers.Demand.unlimited.getter();
    a2[9] = v17;
    swift_endAccess();
    os_unfair_lock_unlock(v10);
    return;
  }
  if (v25 == 1)
  {
    os_unfair_lock_unlock(v10);
    v23[0] = 0;
    outlined init with take of Date?((uint64_t)v23, *(void *)(*(void *)(a1 + 64) + 40), a4);
    swift_continuation_resume();
  }
  else
  {
    outlined init with take of TypedPayloadDecoding(&v24, (uint64_t)v23);
    uint64_t v18 = a2 + 3;
    swift_beginAccess();
    uint64_t v19 = (void *)a2[3];
    char v20 = swift_isUniquelyReferenced_nonNull_native();
    a2[3] = v19;
    if ((v20 & 1) == 0)
    {
      uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19, a5);
      void *v18 = v19;
    }
    unint64_t v22 = v19[2];
    unint64_t v21 = v19[3];
    if (v22 >= v21 >> 1)
    {
      uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v19, a5);
      void *v18 = v19;
    }
    v19[2] = v22 + 1;
    v19[v22 + 4] = a1;
    swift_endAccess();
    os_unfair_lock_unlock(v10);
    __swift_project_boxed_opaque_existential_1(v23, v23[3]);
    dispatch thunk of Subscription.request(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed UUID, @in_guaranteed URL, @in_guaranteed Participant) -> ()(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, URL, Participant));
  return a2(a1, a1 + *(int *)(v4 + 48), a1 + *(int *)(v4 + 64));
}

uint64_t GroupSessionAttachmentManager.session.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t GroupSessionAttachmentManager.attachments.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>.Publisher);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v1 + 32))
  {
    uint64_t v8 = *(void *)(v1 + 32);
  }
  else
  {
    swift_beginAccess();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>);
    Published.projectedValue.getter();
    swift_endAccess();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<[GroupSessionAttachmentManager.Attachment]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>.Publisher);
    uint64_t v8 = Publisher.eraseToAnyPublisher()();
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(void *)(v2 + 32) = v8;
    swift_retain();
    swift_release();
  }
  *a1 = v8;
  return swift_retain();
}

uint64_t GroupSessionAttachmentManager.attachments.setter(void *a1)
{
  *(void *)(v1 + 32) = *a1;
  return swift_release();
}

uint64_t GroupSessionAttachmentManager.Attachments.init(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>);
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<[GroupSessionAttachmentManager.Attachment]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>.Publisher);
  uint64_t v6 = Publisher.eraseToAnyPublisher()();
  swift_release();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *a1 = v6;
  return result;
}

uint64_t (*GroupSessionAttachmentManager.attachments.modify(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  GroupSessionAttachmentManager.attachments.getter(a1);
  return GroupSessionJournal.attachments.modify;
}

uint64_t GroupSessionAttachmentManager._attachments.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t GroupSessionAttachmentManager.cancellables.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t GroupSessionAttachmentManager.cancellables.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC15GroupActivities29GroupSessionAttachmentManager_cancellables);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*GroupSessionAttachmentManager.cancellables.modify())()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t GroupSessionAttachmentManager.upload<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[56] = a4;
  v5[57] = v4;
  v5[54] = a2;
  v5[55] = a3;
  v5[53] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v5[58] = swift_task_alloc();
  v5[59] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URL();
  v5[60] = v7;
  v5[61] = *(void *)(v7 - 8);
  v5[62] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for GroupSessionAttachmentManager.Attachment(0);
  v5[63] = v8;
  v5[64] = *(void *)(v8 - 8);
  v5[65] = swift_task_alloc();
  v5[66] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResolvedTransferRepresentation?);
  v5[67] = swift_task_alloc();
  v5[68] = swift_task_alloc();
  v5[69] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ResolvedTransferRepresentation();
  v5[70] = v9;
  v5[71] = *(void *)(v9 - 8);
  v5[72] = swift_task_alloc();
  v5[73] = swift_task_alloc();
  v5[74] = swift_task_alloc();
  v5[75] = swift_task_alloc();
  v5[76] = swift_task_alloc();
  v5[77] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for _TransferRepresentationInputs();
  v5[78] = v10;
  v5[79] = *(void *)(v10 - 8);
  v5[80] = swift_task_alloc();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[81] = AssociatedTypeWitness;
  uint64_t v12 = type metadata accessor for _TransferRepresentationValue();
  v5[82] = v12;
  v5[83] = *(void *)(v12 - 8);
  v5[84] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for _TransferRepresentationOutputs();
  v5[85] = v13;
  v5[86] = *(void *)(v13 - 8);
  v5[87] = swift_task_alloc();
  v5[88] = *(void *)(AssociatedTypeWitness - 8);
  v5[89] = swift_task_alloc();
  v5[90] = swift_task_alloc();
  v5[91] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for Optional();
  v5[92] = v14;
  v5[93] = *(void *)(v14 - 8);
  v5[94] = swift_task_alloc();
  v5[95] = *(void *)(a3 - 8);
  v5[96] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for UUID();
  v5[97] = v15;
  v5[98] = *(void *)(v15 - 8);
  v5[99] = swift_task_alloc();
  v5[100] = swift_task_alloc();
  v5[101] = swift_task_alloc();
  return MEMORY[0x1F4188298](GroupSessionAttachmentManager.upload<A>(_:), 0, 0);
}

uint64_t GroupSessionAttachmentManager.upload<A>(_:)()
{
  v138 = v0;
  UUID.init()();
  if (one-time initialization token for ledger != -1) {
    goto LABEL_38;
  }
  while (1)
  {
    Class isa = v0[101].isa;
    Class v1 = v0[100].isa;
    Class v2 = v0[98].isa;
    Class v3 = v0[97].isa;
    Class v4 = v0[96].isa;
    Class v5 = v0[95].isa;
    os_log_t log = v0 + 55;
    Class v7 = v0[54].isa;
    Class v6 = v0[55].isa;
    uint64_t v8 = type metadata accessor for Logger();
    v0[102].Class isa = (Class)v8;
    v0[103].Class isa = (Class)__swift_project_value_buffer(v8, (uint64_t)static Log.ledger);
    uint64_t v9 = (void (*)(Class, Class, Class))*((void *)v5 + 2);
    v9(v4, v7, v6);
    uint64_t v10 = (objc_class *)*((void *)v2 + 2);
    v0[104].Class isa = v10;
    v0[105].Class isa = (Class)(((unint64_t)v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000);
    ((void (*)(Class, Class, Class))v10)(v1, isa, v3);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    Class v14 = v0[100].isa;
    Class v15 = v0[98].isa;
    Class v16 = v0[97].isa;
    Class v17 = v0[95].isa;
    uint64_t v111 = v9;
    if (v13)
    {
      uint64_t v18 = (uint64_t)v0[94].isa;
      Class v125 = v0[97].isa;
      Class v19 = v0[93].isa;
      Class v108 = v0[92].isa;
      v133 = v11;
      uint64_t v20 = (uint64_t)v0[55].isa;
      Class v114 = v0[98].isa;
      Class v21 = v0[96].isa;
      Class v117 = v0[100].isa;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v129 = swift_slowAlloc();
      v137[0] = v129;
      *(_DWORD *)uint64_t v22 = 136315394;
      v9((Class)v18, v21, (Class)v20);
      (*((void (**)(uint64_t, void, uint64_t, uint64_t))v17 + 7))(v18, 0, 1, v20);
      uint64_t v23 = >> prefix<A>(_:)(v18, v20);
      os_log_type_t typea = v12;
      unint64_t v25 = v24;
      (*((void (**)(uint64_t, Class))v19 + 1))(v18, v108);
      v0[51].Class isa = (Class)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*((void (**)(Class, uint64_t))v17 + 1))(v21, v20);
      *(_WORD *)(v22 + 12) = 2080;
      _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[52].Class isa = (Class)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v28 = (void (*)(Class, Class))*((void *)v114 + 1);
      v28(v117, v125);
      _os_log_impl(&dword_1A375F000, v133, typea, "Received upload request for item: %s, using ID: %s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v129, -1, -1);
      MEMORY[0x1A624F870](v22, -1, -1);
    }
    else
    {
      (*((void (**)(Class, Class))v17 + 1))(v0[96].isa, log->isa);
      uint64_t v28 = (void (*)(Class, Class))*((void *)v15 + 1);
      v28(v14, v16);
    }
    uint64_t v109 = v28;
    v0[106].Class isa = (Class)v28;
    Class v29 = v0[91].isa;
    Class v30 = v0[90].isa;
    Class v31 = v0[88].isa;
    Class v115 = v0[87].isa;
    Class v130 = v0[86].isa;
    Class v134 = v0[85].isa;
    Class v32 = v0[84].isa;
    *typeb = v0[83];
    Class v126 = v0[82].isa;
    Class v33 = v0[81].isa;
    Class v34 = v0[80].isa;
    Class v35 = v0[79].isa;
    Class v118 = v0[78].isa;
    dispatch thunk of static Transferable.transferRepresentation.getter();
    swift_getDynamicType();
    v107 = (void (*)(Class, Class, Class))*((void *)v31 + 2);
    v107(v30, v29, v33);
    _TransferRepresentationValue.init(_:)();
    _TransferRepresentationInputs.init()();
    swift_getAssociatedConformanceWitness();
    dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)();
    (*((void (**)(Class, Class))v35 + 1))(v34, v118);
    (*(void (**)(Class, Class))(*(void *)typeb + 8))(v32, v126);
    uint64_t v36 = _TransferRepresentationOutputs.storage.getter();
    (*((void (**)(Class, Class))v130 + 1))(v115, v134);
    uint64_t v127 = *(void *)(v36 + 16);
    v131 = v0;
    if (!v127) {
      break;
    }
    unint64_t v37 = 0;
    Class v38 = v0[71].isa;
    uint64_t v39 = MEMORY[0x1E4FBC860];
    uint64_t v40 = v0;
    while (v37 < *(void *)(v36 + 16))
    {
      Class v41 = v40[77].isa;
      Class v42 = v40[75].isa;
      Class v43 = v40[70].isa;
      uint64_t v0 = ((*((unsigned __int8 *)v38 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v38 + 80));
      uint64_t v44 = *((void *)v38 + 9);
      uint64_t v45 = v36;
      (*((void (**)(Class, char *, Class))v38 + 2))(v41, (char *)v0 + v36 + v44 * v37, v43);
      uint64_t v46 = (void (*)(Class, Class, Class))*((void *)v38 + 4);
      v46(v42, v41, v43);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v137[0] = v39;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v39 + 16) + 1, 1);
        uint64_t v39 = v137[0];
      }
      unint64_t v49 = *(void *)(v39 + 16);
      unint64_t v48 = *(void *)(v39 + 24);
      uint64_t v40 = v131;
      if (v49 >= v48 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
        uint64_t v39 = v137[0];
      }
      ++v37;
      Class v50 = v131[75].isa;
      Class v51 = v131[70].isa;
      *(void *)(v39 + 16) = v49 + 1;
      v46((Class)((char *)v0 + v39 + v49 * v44), v50, v51);
      uint64_t v36 = v45;
      if (v127 == v37) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_38:
    swift_once();
  }
  uint64_t v39 = MEMORY[0x1E4FBC860];
  uint64_t v40 = v0;
LABEL_15:
  swift_bridgeObjectRelease();
  Class v52 = v40[71].isa;
  Class v53 = v40[70].isa;
  Class v54 = v40[69].isa;
  if (*(void *)(v39 + 16))
  {
    (*((void (**)(Class, unint64_t, Class))v52 + 2))(v40[69].isa, v39 + ((*((unsigned __int8 *)v52 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v52 + 80)), v40[70].isa);
    id v55 = (void (*)(Class, uint64_t, uint64_t, Class))*((void *)v52 + 7);
    v55(v54, 0, 1, v53);
  }
  else
  {
    id v55 = (void (*)(Class, uint64_t, uint64_t, Class))*((void *)v52 + 7);
    v55(v54, 1, 1, v53);
  }
  uint64_t v56 = v131;
  Class v57 = v131[71].isa;
  Class v58 = v131[70].isa;
  Class v59 = v131[69].isa;
  swift_release();
  uint64_t v60 = (unsigned int (*)(Class, uint64_t, Class))*((void *)v57 + 6);
  if (v60(v59, 1, v58) == 1)
  {
    Class v61 = v131[91].isa;
    Class v62 = v131[89].isa;
    Class v63 = v131[81].isa;
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v131[69].isa, &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
    v107(v62, v61, v63);
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.error.getter();
    BOOL v66 = os_log_type_enabled(v64, v65);
    Class v67 = v131[89].isa;
    Class v68 = v131[88].isa;
    Class v69 = v131[81].isa;
    if (v66)
    {
      uint64_t v70 = (uint8_t *)swift_slowAlloc();
      uint64_t v71 = swift_slowAlloc();
      v137[0] = v71;
      *(_DWORD *)uint64_t v70 = 136315138;
      swift_getDynamicType();
      uint64_t v72 = _typeName(_:qualified:)();
      v131[49].Class isa = (Class)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v56 = v131;
      swift_bridgeObjectRelease();
      (*((void (**)(Class, Class))v68 + 1))(v67, v69);
      _os_log_impl(&dword_1A375F000, v64, v65, "Failed to find supported representation for strategy: %s", v70, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v71, -1, -1);
      MEMORY[0x1A624F870](v70, -1, -1);
    }
    else
    {
      (*((void (**)(Class, Class))v68 + 1))(v131[89].isa, v131[81].isa);
    }

    Class v82 = v56[101].isa;
    Class v83 = v56[97].isa;
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *uint64_t v84 = 0;
    swift_willThrow();
    v109(v82, v83);
LABEL_34:
    (*((void (**)(Class, Class))v56[88].isa + 1))(v56[91].isa, v56[81].isa);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v106 = (uint64_t (*)(void))v56[1].isa;
    return v106();
  }
  uint64_t v74 = (void (*)(Class, Class, Class))*((void *)v131[71].isa + 4);
  v74(v131[76].isa, v131[69].isa, v131[70].isa);
  uint64_t v75 = ResolvedTransferRepresentation.exporting.getter();
  v131[107].Class isa = (Class)v75;
  v131[108].Class isa = v76;
  if (!v75)
  {
    uint64_t v128 = (void (*)(Class, Class, Class))*((void *)v131[71].isa + 2);
    v128(v131[74].isa, v131[76].isa, v131[70].isa);
    uint64_t v85 = Logger.logObject.getter();
    os_log_type_t type = static os_log_type_t.error.getter();
    BOOL v86 = os_log_type_enabled(v85, type);
    Class v87 = v131[70].isa;
    if (v86)
    {
      loga = v85;
      uint64_t v112 = (uint64_t)v131[68].isa;
      uint64_t v113 = (uint64_t)v131[67].isa;
      Class v110 = v131[74].isa;
      uint64_t v88 = (uint8_t *)swift_slowAlloc();
      uint64_t v116 = swift_slowAlloc();
      v137[0] = v116;
      uint64_t v119 = v88;
      *(_DWORD *)uint64_t v88 = 136315138;
      v128((Class)v112, v110, v87);
      v55((Class)v112, 0, 1, v87);
      outlined init with copy of URL?(v112, v113, &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      if (v60((Class)v113, 1, v87) == 1)
      {
        unint64_t v89 = 0xE300000000000000;
        uint64_t v90 = 7104878;
      }
      else
      {
        Class v93 = v131[73].isa;
        Class v94 = v131[72].isa;
        Class v95 = v131[71].isa;
        Class v96 = v131[70].isa;
        v74(v93, v131[67].isa, v96);
        v128(v94, v93, v96);
        uint64_t v90 = String.init<A>(reflecting:)();
        unint64_t v89 = v97;
        (*((void (**)(Class, Class))v95 + 1))(v93, v96);
      }
      unint64_t v92 = v131;
      Class v98 = v131[74].isa;
      Class v99 = v131[71].isa;
      Class v100 = v131[70].isa;
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v131[68].isa, &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      v131[50].Class isa = (Class)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v89, v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v91 = (void (*)(Class, Class))*((void *)v99 + 1);
      v91(v98, v100);
      _os_log_impl(&dword_1A375F000, loga, type, "Failed to find exporting closure from representation: %s", v119, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v116, -1, -1);
      MEMORY[0x1A624F870](v119, -1, -1);
    }
    else
    {
      uint64_t v91 = (void (*)(Class, Class))*((void *)v131[71].isa + 1);
      v91(v131[74].isa, v131[70].isa);

      unint64_t v92 = v131;
    }
    Class v101 = v92[101].isa;
    Class v102 = v92[97].isa;
    Class v103 = v131[76].isa;
    Class v104 = v131[70].isa;
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *uint64_t v105 = 0;
    swift_willThrow();
    uint64_t v56 = v131;
    v91(v103, v104);
    v109(v101, v102);
    goto LABEL_34;
  }
  uint64_t v77 = (int *)v75;
  Class v78 = v131[54].isa;
  long long v135 = *(_OWORD *)&log->isa;
  *(_OWORD *)&v131[20].Class isa = *(_OWORD *)&log->isa;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v131[17]);
  v111((Class)boxed_opaque_existential_1, v78, (Class)v135);
  uint64_t v136 = (uint64_t (*)(NSObject *, NSObject *))((char *)v77 + *v77);
  uint64_t v80 = (objc_class *)swift_task_alloc();
  v131[109].Class isa = v80;
  *(void *)uint64_t v80 = v131;
  *((void *)v80 + 1) = GroupSessionAttachmentManager.upload<A>(_:);
  return v136(v131 + 12, v131 + 17);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  Class v2 = *v1;
  *(void *)(*v1 + 880) = v0;
  swift_task_dealloc();
  if (v0)
  {
    Class v3 = GroupSessionAttachmentManager.upload<A>(_:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v2 + 136);
    Class v3 = GroupSessionAttachmentManager.upload<A>(_:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned char *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned char *v47;
  uint64_t (*v48)(void);
  uint64_t v50;
  uint64_t ObjectType;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t, void, unint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  Class v68 = v0;
  outlined init with copy of AudioSessionAssertionManager(v0 + 96, v0 + 176);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TransferableCurrency);
  BOOL v66 = v0 + 96;
  if (!swift_dynamicCast())
  {
    outlined init with copy of AudioSessionAssertionManager(v0 + 96, v0 + 256);
    unint64_t v24 = Logger.logObject.getter();
    unint64_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      unint64_t v27 = swift_slowAlloc();
      Class v67 = v27;
      *(_DWORD *)uint64_t v26 = 136315138;
      outlined init with copy of AudioSessionAssertionManager(v0 + 256, v0 + 16);
      outlined init with copy of URL?(v0 + 16, v0 + 56, &demangling cache variable for type metadata for TransferableCurrency?);
      if (*(void *)(v0 + 80))
      {
        outlined init with take of TypedPayloadDecoding((long long *)(v0 + 56), v0 + 216);
        outlined init with copy of AudioSessionAssertionManager(v0 + 216, v0 + 296);
        uint64_t v28 = String.init<A>(reflecting:)();
        Class v30 = v29;
        __swift_destroy_boxed_opaque_existential_1Tm(v0 + 216);
      }
      else
      {
        Class v30 = 0xE300000000000000;
        uint64_t v28 = 7104878;
      }
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + 16, &demangling cache variable for type metadata for TransferableCurrency?);
      *(void *)(v0 + 384) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 256);
      _os_log_impl(&dword_1A375F000, v24, v25, "Failed to convert %s to Data", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v27, -1, -1);
      MEMORY[0x1A624F870](v26, -1, -1);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 256);
    }

    Class v41 = *(void *)(v0 + 856);
    Class v63 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
    Class v42 = *(void *)(v0 + 808);
    Class v43 = *(void *)(v0 + 776);
    uint64_t v44 = *(void *)(v0 + 608);
    uint64_t v45 = *(void *)(v0 + 568);
    uint64_t v46 = *(void *)(v0 + 560);
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *uint64_t v47 = 1;
    swift_willThrow();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v41);
    __swift_destroy_boxed_opaque_existential_1Tm(v66);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
    v63(v42, v43);
    goto LABEL_17;
  }
  Class v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 832);
  Class v2 = *(void *)(v0 + 808);
  Class v3 = *(void *)(v0 + 792);
  Class v4 = *(void *)(v0 + 784);
  Class v5 = *(void *)(v0 + 776);
  Class v6 = *(void *)(v0 + 528);
  Class v7 = *(void *)(v0 + 504);
  uint64_t v8 = *(void *)(v0 + 488);
  Class v59 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
  Class v62 = *(void *)(v0 + 480);
  uint64_t v9 = *(void *)(v0 + 464);
  uint64_t v64 = *(void *)(v0 + 472);
  uint64_t v11 = *(void *)(v0 + 368);
  uint64_t v10 = *(void *)(v0 + 376);
  *(void *)(v0 + 888) = v11;
  *(void *)(v0 + 896) = v10;
  v1(v6, v2, v5);
  swift_weakInit();
  os_log_type_t v12 = (uint64_t *)(v6 + *(int *)(v7 + 24));
  *os_log_type_t v12 = v11;
  v12[1] = v10;
  outlined copy of Data._Representation(v11, v10);
  UUID.init()();
  UUID.uuidString.getter();
  *(void *)(v0 + 904) = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v59(v3, v5);
  static URL.temporaryDirectory.getter();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v9, 0, 1, v62);
  URL.init(string:relativeTo:)();
  swift_bridgeObjectRelease();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v9, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v64, 1, v62) == 1)
  {
    Class v57 = v10;
    uint64_t v60 = v11;
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(void *)(v0 + 472), &demangling cache variable for type metadata for URL?);
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    __swift_project_value_buffer(*(void *)(v0 + 816), (uint64_t)static Log.default);
    BOOL v13 = Logger.logObject.getter();
    Class v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      Class v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Class v15 = 0;
      _os_log_impl(&dword_1A375F000, v13, v14, "Failed to convert TemporaryDirectory to URL", v15, 2u);
      MEMORY[0x1A624F870](v15, -1, -1);
    }
    Class v16 = *(void *)(v0 + 856);
    Class v17 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
    id v55 = *(void *)(v0 + 808);
    uint64_t v18 = *(void *)(v0 + 776);
    Class v19 = *(void *)(v0 + 608);
    uint64_t v20 = *(void *)(v0 + 568);
    Class v21 = *(void *)(v0 + 560);
    uint64_t v22 = *(void *)(v0 + 528);

    lazy protocol witness table accessor for type GroupSessionErrors and conformance GroupSessionErrors();
    swift_allocError();
    *uint64_t v23 = 2;
    swift_willThrow();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v16);
    outlined consume of Data._Representation(v60, v57);
    outlined destroy of GroupSessionAttachmentManager.Attachment(v22, type metadata accessor for GroupSessionAttachmentManager.Attachment);
    __swift_destroy_boxed_opaque_existential_1Tm(v66);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    v17(v55, v18);
    goto LABEL_17;
  }
  Class v31 = *(void *)(v0 + 880);
  (*(void (**)(void, void, void))(*(void *)(v0 + 488) + 32))(*(void *)(v0 + 496), *(void *)(v0 + 472), *(void *)(v0 + 480));
  Data.write(to:options:)();
  if (v31)
  {
    Class v58 = *(void *)(v0 + 808);
    Class v61 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
    uint64_t v56 = *(void *)(v0 + 776);
    Class v32 = *(void *)(v0 + 608);
    Class v33 = v11;
    Class v34 = v10;
    Class v35 = *(void *)(v0 + 568);
    uint64_t v36 = *(void *)(v0 + 560);
    unint64_t v37 = *(void *)(v0 + 528);
    Class v38 = *(void *)(v0 + 488);
    uint64_t v39 = *(void *)(v0 + 496);
    uint64_t v40 = *(void *)(v0 + 480);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(void *)(v0 + 856));
    outlined consume of Data._Representation(v33, v34);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v40);
    outlined destroy of GroupSessionAttachmentManager.Attachment(v37, type metadata accessor for GroupSessionAttachmentManager.Attachment);
    __swift_destroy_boxed_opaque_existential_1Tm(v66);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v32, v36);
    v61(v58, v56);
LABEL_17:
    (*(void (**)(void, void))(*(void *)(v0 + 704) + 8))(*(void *)(v0 + 728), *(void *)(v0 + 648));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v48 = *(uint64_t (**)(void))(v0 + 8);
    return v48();
  }
  Class v50 = *(void *)(*(void *)(v0 + 456) + 24);
  uint64_t ObjectType = swift_getObjectType();
  os_log_type_t v65 = (uint64_t (*)(uint64_t, uint64_t, void, unint64_t, uint64_t, uint64_t))(*(void *)(v50 + 40)
                                                                                             + **(int **)(v50 + 40));
  Class v52 = (void *)swift_task_alloc();
  *(void *)(v0 + 912) = v52;
  char *v52 = v0;
  v52[1] = GroupSessionAttachmentManager.upload<A>(_:);
  Class v53 = *(void *)(v0 + 808);
  Class v54 = *(void *)(v0 + 496);
  return v65(v53, v54, 0, 0xF000000000000000, ObjectType, v50);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 920) = v0;
  swift_task_dealloc();
  if (v0) {
    Class v2 = GroupSessionAttachmentManager.upload<A>(_:);
  }
  else {
    Class v2 = GroupSessionAttachmentManager.upload<A>(_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  id v1;
  unsigned __int8 v2;
  void (*v3)(void *, void);
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;

  Class v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F5B140]), sel_init);
  Class v2 = objc_msgSend(v1, sel_sharePlayAttachmentLedgerEnabled);

  if ((v2 & 1) == 0)
  {
    outlined init with copy of GroupSessionAttachmentManager.Attachment(v0[66], v0[65], type metadata accessor for GroupSessionAttachmentManager.Attachment);
    swift_getKeyPath();
    swift_getKeyPath();
    Class v3 = (void (*)(void *, void))static Published.subscript.modify();
    Class v5 = v4;
    Class v6 = *v4;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *Class v5 = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      Class v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1, v6, &demangling cache variable for type metadata for _ContiguousArrayStorage<GroupSessionAttachmentManager.Attachment>, type metadata accessor for GroupSessionAttachmentManager.Attachment, type metadata accessor for GroupSessionAttachmentManager.Attachment);
      *Class v5 = v6;
    }
    uint64_t v9 = *(void *)(v6 + 16);
    uint64_t v8 = *(void *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      Class v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1, v6, &demangling cache variable for type metadata for _ContiguousArrayStorage<GroupSessionAttachmentManager.Attachment>, type metadata accessor for GroupSessionAttachmentManager.Attachment, type metadata accessor for GroupSessionAttachmentManager.Attachment);
      *Class v5 = v6;
    }
    uint64_t v10 = v0[65];
    uint64_t v11 = v0[64];
    *(void *)(v6 + 16) = v9 + 1;
    outlined init with take of GroupSessionAttachmentManager.Attachment(v10, v6+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v9);
    v3(v0 + 42, 0);
    swift_release();
    swift_release();
  }
  unint64_t v24 = v0[112];
  uint64_t v23 = v0[111];
  unint64_t v25 = v0[97];
  uint64_t v26 = v0[101];
  uint64_t v28 = (void (*)(uint64_t, uint64_t))v0[106];
  Class v29 = v0[91];
  os_log_type_t v12 = v0[88];
  unint64_t v27 = v0[81];
  BOOL v13 = v0[76];
  Class v14 = v0[71];
  Class v15 = v0[70];
  Class v16 = v0[66];
  uint64_t v18 = v0[61];
  Class v17 = v0[62];
  Class v19 = v0[60];
  uint64_t v20 = v0[53];
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v0[107]);
  outlined consume of Data._Representation(v23, v24);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 12));
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  v28(v26, v25);
  outlined init with take of GroupSessionAttachmentManager.Attachment(v16, v20);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v29, v27);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Class v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  Class v1 = (void (*)(uint64_t, uint64_t))v0[106];
  Class v2 = v0[101];
  Class v3 = v0[97];
  Class v4 = v0[76];
  Class v5 = v0[71];
  Class v6 = v0[70];
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v0[107]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v1(v2, v3);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 17));
  (*(void (**)(void, void))(v0[88] + 8))(v0[91], v0[81]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Class v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;

  Class v1 = v0[112];
  Class v2 = v0[111];
  BOOL v13 = v0[101];
  Class v14 = (void (*)(uint64_t, uint64_t))v0[106];
  os_log_type_t v12 = v0[97];
  Class v3 = v0[76];
  Class v4 = v0[71];
  Class v5 = v0[70];
  Class v6 = v0[66];
  Class v7 = v0[61];
  uint64_t v8 = v0[62];
  uint64_t v9 = v0[60];
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v0[107]);
  outlined consume of Data._Representation(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  outlined destroy of GroupSessionAttachmentManager.Attachment(v6, type metadata accessor for GroupSessionAttachmentManager.Attachment);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 12));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v14(v13, v12);
  (*(void (**)(void, void))(v0[88] + 8))(v0[91], v0[81]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t GroupSessionAttachmentManager.Attachment.init(id:ledger:source:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t v9 = type metadata accessor for GroupSessionAttachmentManager.Attachment(0);
  swift_weakInit();
  uint64_t result = swift_release();
  uint64_t v11 = (void *)(a4 + *(int *)(v9 + 24));
  *uint64_t v11 = a2;
  v11[1] = a3;
  return result;
}

void *GroupSessionAttachmentManager.__allocating_init<A>(session:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for GroupSession();
  Class v3 = (void *)swift_allocObject();

  return specialized GroupSessionAttachmentManager.init(transportSession:)(a1, v3, v2, (uint64_t)&protocol witness table for GroupSession<A>);
}

void *GroupSessionAttachmentManager.__allocating_init(transportSession:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();

  return specialized GroupSessionAttachmentManager.__allocating_init(transportSession:)(a1, v2, ObjectType, a2);
}

void *GroupSessionAttachmentManager.init(transportSession:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();

  return specialized GroupSessionAttachmentManager.init(transportSession:)(a1, v2, ObjectType, a2);
}

uint64_t closure #1 in GroupSessionAttachmentManager.init(transportSession:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  swift_retain();
  unint64_t v6 = specialized Sequence.compactMap<A>(_:)(v5, a2);
  uint64_t result = swift_release();
  *a3 = v6;
  return result;
}

uint64_t closure #1 in closure #1 in GroupSessionAttachmentManager.init(transportSession:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  Class v41 = a3;
  uint64_t v39 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  Class v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v34 - v8;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  unint64_t v37 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  Class v16 = (char *)&v34 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  if (one-time initialization token for ledger != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Log.ledger);
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  uint64_t v40 = a1;
  Class v21 = a1;
  uint64_t v22 = v20;
  v20(v18, v21, v10);
  uint64_t v23 = Logger.logObject.getter();
  int v38 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, (os_log_type_t)v38))
  {
    os_log_t v35 = v23;
    unint64_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    v42[0] = v34;
    *(_DWORD *)unint64_t v24 = 136315138;
    v22(v9, v18, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    outlined init with copy of URL?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for UUID?);
    int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10);
    uint64_t v36 = v22;
    if (v25 == 1)
    {
      unint64_t v26 = 0xE300000000000000;
      uint64_t v27 = 7104878;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v7, v10);
      v22(v37, v16, v10);
      uint64_t v27 = String.init<A>(reflecting:)();
      unint64_t v26 = v28;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v9, &demangling cache variable for type metadata for UUID?);
    v42[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
    os_log_t v29 = v35;
    _os_log_impl(&dword_1A375F000, v35, (os_log_type_t)v38, "Received new attachment: %s", v24, 0xCu);
    uint64_t v30 = v34;
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v30, -1, -1);
    MEMORY[0x1A624F870](v24, -1, -1);

    uint64_t v22 = v36;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
  }
  swift_beginAccess();
  swift_weakLoadStrong();
  Class v31 = v41;
  v22(v41, v40, v10);
  uint64_t v32 = type metadata accessor for GroupSessionAttachmentManager.Attachment(0);
  swift_weakInit();
  swift_release();
  *(_OWORD *)&v31[*(int *)(v32 + 24)] = xmmword_1A38F9EA0;
  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 0, 1, v32);
}

uint64_t closure #2 in GroupSessionAttachmentManager.init(transportSession:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v84 = a3;
  uint64_t v81 = a2;
  uint64_t v73 = type metadata accessor for GroupSessionAttachmentManager.Attachment(0);
  uint64_t v75 = *(void *)(v73 - 8);
  MEMORY[0x1F4188790](v73);
  uint64_t v74 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v72 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v80 = (char *)&v67 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v67 - v13;
  MEMORY[0x1F4188790](v12);
  Class v16 = (char *)&v67 - v15;
  uint64_t v17 = type metadata accessor for Participant();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  BOOL v86 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v85 = (char *)&v67 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v76 = (char *)&v67 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v77 = (char *)&v67 - v29;
  MEMORY[0x1F4188790](v28);
  Class v31 = (char *)&v67 - v30;
  uint64_t v83 = a4 + 16;
  if (one-time initialization token for ledger != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  uint64_t v33 = __swift_project_value_buffer(v32, (uint64_t)static Log.ledger);
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v34(v31, a1, v20);
  outlined init with copy of GroupSessionAttachmentManager.Attachment(v84, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for Participant);
  uint64_t v79 = v33;
  uint64_t v35 = a1;
  uint64_t v36 = (uint64_t)v19;
  unint64_t v37 = Logger.logObject.getter();
  LODWORD(v84) = static os_log_type_t.default.getter();
  BOOL v38 = os_log_type_enabled(v37, (os_log_type_t)v84);
  uint64_t v82 = v21 + 16;
  if (v38)
  {
    uint64_t v69 = v36;
    os_log_t v68 = v37;
    uint64_t v71 = v35;
    uint64_t v39 = (void (*)(char *, char *, uint64_t))v34;
    uint64_t v40 = swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    v87[0] = v41;
    *(_DWORD *)uint64_t v40 = 136315394;
    v39(v16, v31, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v16, 0, 1, v20);
    outlined init with copy of URL?((uint64_t)v16, (uint64_t)v14, &demangling cache variable for type metadata for UUID?);
    int v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v14, 1, v20);
    uint64_t v70 = (void (*)(char *, uint64_t, uint64_t))v39;
    if (v42 == 1)
    {
      uint64_t v43 = 7104878;
      unint64_t v44 = 0xE300000000000000;
    }
    else
    {
      uint64_t v46 = v77;
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v77, v14, v20);
      v39(v76, v46, v20);
      uint64_t v43 = String.init<A>(reflecting:)();
      unint64_t v44 = v47;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v46, v20);
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
    uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v45 = v21;
    Class v78 = *(void (**)(char *, uint64_t))(v21 + 8);
    v78(v31, v20);
    *(_WORD *)(v40 + 12) = 2080;
    uint64_t v48 = v69;
    unint64_t v49 = Participant.description.getter();
    uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of GroupSessionAttachmentManager.Attachment(v48, (uint64_t (*)(void))type metadata accessor for Participant);
    os_log_t v51 = v68;
    _os_log_impl(&dword_1A375F000, v68, (os_log_type_t)v84, "Received new attachment: %s from: %s", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v41, -1, -1);
    MEMORY[0x1A624F870](v40, -1, -1);

    uint64_t v35 = v71;
    uint64_t v34 = v70;
  }
  else
  {
    uint64_t v45 = v21;
    Class v78 = *(void (**)(char *, uint64_t))(v21 + 8);
    v78(v31, v20);
    outlined destroy of GroupSessionAttachmentManager.Attachment(v36, (uint64_t (*)(void))type metadata accessor for Participant);
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  Class v53 = v85;
  uint64_t v84 = result;
  if (result)
  {
    v34(v85, v35, v20);
    uint64_t v54 = Data.init(contentsOf:options:)();
    uint64_t v56 = v55 | 0x1000000000000000;
    uint64_t v57 = (uint64_t)v74;
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v74, v53, v20);
    uint64_t v58 = v73;
    swift_weakInit();
    Class v59 = (uint64_t *)(v57 + *(int *)(v58 + 24));
    *Class v59 = v54;
    v59[1] = v56;
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v60 = (void (*)(uint64_t *, void))static Published.subscript.modify();
    Class v62 = v61;
    unint64_t v63 = *v61;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *Class v62 = v63;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v63 + 16) + 1, 1, v63, &demangling cache variable for type metadata for _ContiguousArrayStorage<GroupSessionAttachmentManager.Attachment>, type metadata accessor for GroupSessionAttachmentManager.Attachment, type metadata accessor for GroupSessionAttachmentManager.Attachment);
      *Class v62 = v63;
    }
    unint64_t v66 = *(void *)(v63 + 16);
    unint64_t v65 = *(void *)(v63 + 24);
    if (v66 >= v65 >> 1)
    {
      unint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v65 > 1, v66 + 1, 1, v63, &demangling cache variable for type metadata for _ContiguousArrayStorage<GroupSessionAttachmentManager.Attachment>, type metadata accessor for GroupSessionAttachmentManager.Attachment, type metadata accessor for GroupSessionAttachmentManager.Attachment);
      *Class v62 = v63;
    }
    *(void *)(v63 + 16) = v66 + 1;
    outlined init with take of GroupSessionAttachmentManager.Attachment(v57, v63+ ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80))+ *(void *)(v75 + 72) * v66);
    v60(v87, 0);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t GroupSessionAttachmentManager.deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15GroupActivities29GroupSessionAttachmentManager___attachments;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t GroupSessionAttachmentManager.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15GroupActivities29GroupSessionAttachmentManager___attachments;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t GroupSessionAttachmentManager.Attachment.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t GroupSessionAttachmentManager.Attachment.id.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*GroupSessionAttachmentManager.Attachment.id.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t key path getter for GroupSessionAttachmentManager.Attachment.ledger : GroupSessionAttachmentManager.Attachment@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for GroupSessionAttachmentManager.Attachment(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of GroupSessionAttachmentManager.Attachment(a1, (uint64_t)v6, type metadata accessor for GroupSessionAttachmentManager.Attachment);
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t result = outlined destroy of GroupSessionAttachmentManager.Attachment((uint64_t)v6, type metadata accessor for GroupSessionAttachmentManager.Attachment);
  *a2 = Strong;
  return result;
}

uint64_t GroupSessionAttachmentManager.Attachment.ledger.getter()
{
  type metadata accessor for GroupSessionAttachmentManager.Attachment(0);

  return swift_weakLoadStrong();
}

uint64_t GroupSessionAttachmentManager.Attachment.ledger.setter()
{
  type metadata accessor for GroupSessionAttachmentManager.Attachment(0);
  swift_weakAssign();

  return swift_release();
}

uint64_t (*GroupSessionAttachmentManager.Attachment.ledger.modify(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(type metadata accessor for GroupSessionAttachmentManager.Attachment(0) + 20);
  *(void *)a1 = swift_weakLoadStrong();
  return GroupSessionJournal.Attachment.ledger.modify;
}

uint64_t GroupSessionAttachmentManager.Attachment.source.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for GroupSessionAttachmentManager.Attachment(0) + 24);
  uint64_t v2 = *(void *)v1;
  outlined copy of GroupSessionAttachmentManager.Attachment.AttachmentSource(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t GroupSessionAttachmentManager.Attachment.source.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for GroupSessionAttachmentManager.Attachment(0) + 24);
  uint64_t result = outlined consume of GroupSessionAttachmentManager.Attachment.AttachmentSource(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*GroupSessionAttachmentManager.Attachment.source.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t GroupSessionAttachmentManager.Attachment.load<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[49] = a4;
  v5[50] = v4;
  v5[47] = a1;
  v5[48] = a3;
  uint64_t v6 = type metadata accessor for Optional();
  v5[51] = v6;
  v5[52] = *(void *)(v6 - 8);
  v5[53] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResolvedTransferRepresentation?);
  v5[54] = swift_task_alloc();
  v5[55] = swift_task_alloc();
  v5[56] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ResolvedTransferRepresentation();
  v5[57] = v7;
  v5[58] = *(void *)(v7 - 8);
  v5[59] = swift_task_alloc();
  v5[60] = swift_task_alloc();
  v5[61] = swift_task_alloc();
  v5[62] = swift_task_alloc();
  v5[63] = swift_task_alloc();
  v5[64] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for _TransferRepresentationInputs();
  v5[65] = v8;
  v5[66] = *(void *)(v8 - 8);
  v5[67] = swift_task_alloc();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[68] = AssociatedTypeWitness;
  uint64_t v10 = type metadata accessor for _TransferRepresentationValue();
  v5[69] = v10;
  v5[70] = *(void *)(v10 - 8);
  v5[71] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for _TransferRepresentationOutputs();
  v5[72] = v11;
  v5[73] = *(void *)(v11 - 8);
  v5[74] = swift_task_alloc();
  v5[75] = *(void *)(AssociatedTypeWitness - 8);
  v5[76] = swift_task_alloc();
  v5[77] = swift_task_alloc();
  v5[78] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for URL();
  v5[79] = v12;
  v5[80] = *(void *)(v12 - 8);
  v5[81] = swift_task_alloc();
  return MEMORY[0x1F4188298](GroupSessionAttachmentManager.Attachment.load<A>(_:), 0, 0);
}

uint64_t GroupSessionAttachmentManager.Attachment.load<A>(_:)()
{
  uint64_t v122 = v0;
  uint64_t v1 = v0[50];
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for GroupSessionAttachmentManager.Attachment(0) + 24));
  uint64_t v3 = *v2;
  v0[82] = *v2;
  unint64_t v4 = v2[1];
  v0[83] = v4;
  uint64_t v5 = (v4 >> 60) & 3;
  unint64_t v6 = v4;
  if (v5)
  {
    if (v5 != 1)
    {
      uint64_t Strong = swift_weakLoadStrong();
      v0[84] = Strong;
      if (!Strong)
      {
        lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
        swift_allocError();
        unsigned char *v69 = 2;
        swift_willThrow();
LABEL_41:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        Class v99 = (uint64_t (*)(void))v0[1];
        return v99();
      }
      v0[85] = *(void *)(Strong + 16);
      uint64_t v30 = *(void *)(Strong + 24);
      uint64_t ObjectType = swift_getObjectType();
      Class v118 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 + 48) + **(int **)(v30 + 48));
      swift_unknownObjectRetain();
      uint64_t v32 = (void *)swift_task_alloc();
      v0[86] = v32;
      *uint64_t v32 = v0;
      v32[1] = GroupSessionAttachmentManager.Attachment.load<A>(_:);
      uint64_t v33 = v0[81];
      uint64_t v34 = v0[50];
      return v118(v33, v34, ObjectType, v30);
    }
    unint64_t v6 = v4 & 0xCFFFFFFFFFFFFFFFLL;
  }
  unint64_t v104 = v6;
  v0[89] = v6;
  v0[88] = v3;
  uint64_t v7 = v0[78];
  uint64_t v8 = v0[77];
  uint64_t v9 = v0[75];
  uint64_t v116 = v0[73];
  uint64_t v119 = v0[72];
  uint64_t v10 = v0[71];
  os_log_t loga = (os_log_t)v0[70];
  uint64_t v113 = v0[69];
  uint64_t v11 = v0[68];
  uint64_t v12 = v0[67];
  uint64_t v13 = v0[66];
  os_log_t v107 = (os_log_t)v0[74];
  uint64_t v109 = v0[65];
  uint64_t v105 = v3;
  outlined copy of GroupSessionAttachmentManager.Attachment.AttachmentSource(v3, v4);
  dispatch thunk of static Transferable.transferRepresentation.getter();
  swift_getDynamicType();
  Class v101 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v101(v8, v7, v11);
  _TransferRepresentationValue.init(_:)();
  _TransferRepresentationInputs.init()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v109);
  ((void (*)(uint64_t, uint64_t))loga[1].isa)(v10, v113);
  uint64_t v14 = _TransferRepresentationOutputs.storage.getter();
  (*(void (**)(os_log_t, uint64_t))(v116 + 8))(v107, v119);
  uint64_t v114 = *(void *)(v14 + 16);
  Class v117 = v0;
  if (v114)
  {
    unint64_t v15 = 0;
    uint64_t v16 = v0[58];
    uint64_t v17 = MEMORY[0x1E4FBC860];
    uint64_t v18 = v0;
    while (v15 < *(void *)(v14 + 16))
    {
      uint64_t v19 = v18[64];
      uint64_t v20 = (char *)v18[62];
      uint64_t v21 = v18[57];
      uint64_t v0 = (void *)((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
      uint64_t v22 = *(void *)(v16 + 72);
      uint64_t v23 = v14;
      (*(void (**)(uint64_t, char *, uint64_t))(v16 + 16))(v19, (char *)v0 + v14 + v22 * v15, v21);
      uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 32);
      v24(v20, v19, v21);
      v121[0] = v17;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1);
        uint64_t v17 = v121[0];
      }
      unint64_t v26 = *(void *)(v17 + 16);
      unint64_t v25 = *(void *)(v17 + 24);
      uint64_t v18 = v117;
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        uint64_t v17 = v121[0];
      }
      ++v15;
      uint64_t v27 = v117[62];
      uint64_t v28 = v117[57];
      *(void *)(v17 + 16) = v26 + 1;
      v24((char *)v0 + v17 + v26 * v22, v27, v28);
      uint64_t v14 = v23;
      if (v114 == v15) {
        goto LABEL_18;
      }
    }
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v17 = MEMORY[0x1E4FBC860];
  uint64_t v18 = v0;
LABEL_18:
  swift_bridgeObjectRelease();
  uint64_t v36 = v18;
  uint64_t v39 = v18 + 57;
  uint64_t v38 = v18[57];
  uint64_t v37 = v39[1];
  uint64_t v40 = v36[56];
  if (*(void *)(v17 + 16))
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v37 + 16))(v40, v17 + ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80)), v38);
    uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
    v41(v40, 0, 1, v38);
  }
  else
  {
    uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
    v41(v36[56], 1, 1, v38);
  }
  uint64_t v0 = v117;
  uint64_t v42 = v117[57];
  uint64_t v43 = v117[58];
  uint64_t v44 = v117[56];
  swift_release();
  uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
  if (v45(v44, 1, v42) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v117[56], &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
    if (one-time initialization token for ledger == -1)
    {
LABEL_23:
      uint64_t v46 = v0[78];
      uint64_t v47 = v0[76];
      uint64_t v48 = v0[68];
      uint64_t v49 = type metadata accessor for Logger();
      __swift_project_value_buffer(v49, (uint64_t)static Log.ledger);
      v101(v47, v46, v48);
      unint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.error.getter();
      BOOL v52 = os_log_type_enabled(v50, v51);
      uint64_t v53 = v0[76];
      uint64_t v54 = v0[75];
      uint64_t v55 = v0[68];
      if (v52)
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v115 = swift_slowAlloc();
        v121[0] = v115;
        *(_DWORD *)uint64_t v56 = 136315138;
        swift_getDynamicType();
        uint64_t v57 = _typeName(_:qualified:)();
        v0[46] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, v121);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        Class v59 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
        v59(v53, v55);
        _os_log_impl(&dword_1A375F000, v50, v51, "Failed to find supported representation for strategy: %s", v56, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v115, -1, -1);
        MEMORY[0x1A624F870](v56, -1, -1);
      }
      else
      {
        Class v59 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
        v59(v0[76], v0[68]);
      }

      uint64_t v66 = v0[78];
      uint64_t v67 = v0[68];
      lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
      swift_allocError();
      unsigned char *v68 = 0;
      swift_willThrow();
      outlined consume of Data._Representation(v105, v104);
      v59(v66, v67);
      goto LABEL_41;
    }
LABEL_45:
    swift_once();
    goto LABEL_23;
  }
  uint64_t v60 = *(void (**)(uint64_t, void, uint64_t))(v117[58] + 32);
  v60(v117[63], v117[56], v117[57]);
  uint64_t v61 = ResolvedTransferRepresentation.importing.getter();
  v117[90] = v61;
  v117[91] = v62;
  if (!v61)
  {
    Class v110 = v60;
    if (one-time initialization token for ledger != -1) {
      swift_once();
    }
    uint64_t v70 = v117[63];
    uint64_t v71 = v117[61];
    uint64_t v73 = v117[57];
    uint64_t v72 = v117[58];
    uint64_t v74 = type metadata accessor for Logger();
    __swift_project_value_buffer(v74, (uint64_t)static Log.ledger);
    os_log_t log = *(os_log_t *)(v72 + 16);
    ((void (*)(uint64_t, uint64_t, uint64_t))log)(v71, v70, v73);
    uint64_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.error.getter();
    BOOL v77 = os_log_type_enabled(v75, v76);
    uint64_t v78 = v117[61];
    uint64_t v79 = v117[57];
    if (v77)
    {
      os_log_type_t v106 = v76;
      Class v108 = v75;
      uint64_t v80 = v117[55];
      uint64_t v100 = v117[54];
      uint64_t v81 = (uint8_t *)swift_slowAlloc();
      uint64_t v102 = swift_slowAlloc();
      v121[0] = v102;
      Class v103 = v81;
      *(_DWORD *)uint64_t v81 = 136315138;
      ((void (*)(uint64_t, uint64_t, uint64_t))log)(v80, v78, v79);
      v41(v80, 0, 1, v79);
      outlined init with copy of URL?(v80, v100, &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      if (v45(v100, 1, v79) == 1)
      {
        unint64_t v82 = 0xE300000000000000;
        uint64_t v83 = 7104878;
      }
      else
      {
        uint64_t v86 = v117[59];
        uint64_t v85 = v117[60];
        uint64_t v88 = v117[57];
        uint64_t v87 = v117[58];
        v110(v85, v117[54], v88);
        ((void (*)(uint64_t, uint64_t, uint64_t))log)(v86, v85, v88);
        uint64_t v83 = String.init<A>(reflecting:)();
        unint64_t v82 = v89;
        (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v85, v88);
      }
      uint64_t v90 = v117[61];
      uint64_t v92 = v117[57];
      uint64_t v91 = v117[58];
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v117[55], &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      v117[45] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v82, v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v84 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
      v84(v90, v92);
      _os_log_impl(&dword_1A375F000, v108, v106, "Failed to find importing closure from representation %s", v103, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v102, -1, -1);
      MEMORY[0x1A624F870](v103, -1, -1);
    }
    else
    {
      uint64_t v84 = *(void (**)(uint64_t, uint64_t))(v117[58] + 8);
      v84(v117[61], v117[57]);
    }
    uint64_t v93 = v117[78];
    uint64_t v94 = v117[75];
    uint64_t v95 = v117[68];
    uint64_t v96 = v117[63];
    uint64_t v97 = v117[57];
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *Class v98 = 0;
    swift_willThrow();
    outlined consume of Data._Representation(v105, v104);
    v84(v96, v97);
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v93, v95);
    uint64_t v0 = v117;
    goto LABEL_41;
  }
  unint64_t v63 = (int *)v61;
  uint64_t v64 = MEMORY[0x1E4F248B8];
  v117[20] = MEMORY[0x1E4F277C0];
  v117[21] = v64;
  v117[17] = v105;
  v117[18] = v104;
  outlined copy of Data._Representation(v105, v104);
  unint64_t v120 = (int *)((char *)v63 + *v63);
  unint64_t v65 = (void *)swift_task_alloc();
  v117[92] = v65;
  void *v65 = v117;
  v65[1] = GroupSessionAttachmentManager.Attachment.load<A>(_:);
  return ((uint64_t (*)(void *, void *))v120)(v117 + 12, v117 + 17);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 696) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = GroupSessionAttachmentManager.Attachment.load<A>(_:);
  }
  else {
    uint64_t v2 = GroupSessionAttachmentManager.Attachment.load<A>(_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  unint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  void (*v53)(uint64_t, void, uint64_t);
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  void *v58;
  uint64_t v60;
  uint64_t v61;
  unsigned char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  NSObject *v70;
  os_log_type_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint8_t *v78;
  unint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned char *v95;
  uint64_t (*v96)(void);
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint8_t *v102;
  os_log_type_t v103;
  os_log_t v104;
  NSObject *v105;
  uint64_t v106;
  void (*v107)(uint64_t, void, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t, uint64_t);
  os_log_t loga;
  os_log_t log;
  uint64_t v114;
  uint64_t v115;
  int *v116;
  void *v117;
  uint64_t v118[2];
  void *v119;
  uint64_t v120;

  uint64_t v119 = v0;
  uint64_t v1 = v0[87];
  swift_unknownObjectRelease();
  uint64_t v2 = Data.init(contentsOf:options:)();
  unint64_t v4 = v3;
  uint64_t v5 = v0[81];
  unint64_t v6 = v0[80];
  uint64_t v7 = v0[79];
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    swift_release();
LABEL_35:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v96 = (uint64_t (*)(void))v0[1];
    return v96();
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_release();
  uint64_t v100 = v2;
  Class v101 = v4;
  v0[89] = v4;
  v0[88] = v2;
  uint64_t v8 = v0[78];
  uint64_t v9 = v0[77];
  uint64_t v10 = v0[75];
  os_log_t loga = (os_log_t)v0[73];
  uint64_t v114 = v0[72];
  uint64_t v11 = v0[71];
  Class v108 = v0[70];
  uint64_t v109 = v0[69];
  uint64_t v12 = v0[68];
  uint64_t v13 = v0[67];
  uint64_t v14 = v0[66];
  unint64_t v104 = (os_log_t)v0[74];
  os_log_type_t v106 = v0[65];
  outlined copy of GroupSessionAttachmentManager.Attachment.AttachmentSource(v0[82], v0[83]);
  dispatch thunk of static Transferable.transferRepresentation.getter();
  swift_getDynamicType();
  Class v98 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  v98(v9, v8, v12);
  _TransferRepresentationValue.init(_:)();
  _TransferRepresentationInputs.init()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of static TransferRepresentation._decomposedTransferRepresentation(_:inputs:)();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v106);
  (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v11, v109);
  unint64_t v15 = _TransferRepresentationOutputs.storage.getter();
  ((void (*)(os_log_t, uint64_t))loga[1].isa)(v104, v114);
  uint64_t v16 = v15;
  os_log_t log = *(os_log_t *)(v15 + 16);
  if (log)
  {
    uint64_t v17 = 0;
    uint64_t v18 = v0[58];
    uint64_t v19 = MEMORY[0x1E4FBC860];
    uint64_t v20 = v0;
    Class v110 = v16;
    while ((unint64_t)v17 < *(void *)(v16 + 16))
    {
      uint64_t v21 = v20[64];
      uint64_t v22 = v20[62];
      uint64_t v23 = v20;
      uint64_t v24 = v20[57];
      unint64_t v25 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
      unint64_t v26 = *(void *)(v18 + 72);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v18 + 16))(v21, v16 + v25 + v26 * (void)v17, v24);
      uint64_t v0 = *(void **)(v18 + 32);
      ((void (*)(uint64_t, uint64_t, uint64_t))v0)(v22, v21, v24);
      v118[0] = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1);
        uint64_t v19 = v118[0];
      }
      uint64_t v28 = *(void *)(v19 + 16);
      uint64_t v27 = *(void *)(v19 + 24);
      uint64_t v20 = v23;
      if (v28 >= v27 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
        uint64_t v19 = v118[0];
      }
      uint64_t v17 = (os_log_t)((char *)v17 + 1);
      uint64_t v29 = v23[62];
      uint64_t v30 = v23[57];
      *(void *)(v19 + 16) = v28 + 1;
      ((void (*)(unint64_t, uint64_t, uint64_t))v0)(v19 + v25 + v28 * v26, v29, v30);
      uint64_t v16 = v110;
      if (log == v17) {
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v19 = MEMORY[0x1E4FBC860];
  uint64_t v20 = v0;
LABEL_13:
  swift_bridgeObjectRelease();
  Class v31 = v20[57];
  uint64_t v32 = v20[58];
  uint64_t v33 = v20[56];
  if (*(void *)(v19 + 16))
  {
    (*(void (**)(void, unint64_t, void))(v32 + 16))(v20[56], v19 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80)), v20[57]);
    uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
    v34(v33, 0, 1, v31);
  }
  else
  {
    uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
    v34(v20[56], 1, 1, v31);
  }
  uint64_t v35 = v20[57];
  uint64_t v36 = v20[58];
  uint64_t v0 = v20;
  uint64_t v37 = v20[56];
  swift_release();
  uint64_t v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
  if (v38(v37, 1, v35) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0[56], &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
    if (one-time initialization token for ledger == -1)
    {
LABEL_18:
      uint64_t v39 = v0[78];
      uint64_t v40 = v0[76];
      uint64_t v41 = v0[68];
      uint64_t v42 = type metadata accessor for Logger();
      __swift_project_value_buffer(v42, (uint64_t)static Log.ledger);
      v98(v40, v39, v41);
      uint64_t v43 = Logger.logObject.getter();
      uint64_t v44 = static os_log_type_t.error.getter();
      uint64_t v45 = os_log_type_enabled(v43, v44);
      uint64_t v46 = v0[76];
      uint64_t v47 = v0[75];
      uint64_t v48 = v0[68];
      if (v45)
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        uint64_t v115 = swift_slowAlloc();
        v118[0] = v115;
        *(_DWORD *)uint64_t v49 = 136315138;
        swift_getDynamicType();
        unint64_t v50 = _typeName(_:qualified:)();
        v0[46] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v118);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        BOOL v52 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
        v52(v46, v48);
        _os_log_impl(&dword_1A375F000, v43, v44, "Failed to find supported representation for strategy: %s", v49, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v115, -1, -1);
        MEMORY[0x1A624F870](v49, -1, -1);
      }
      else
      {
        BOOL v52 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
        v52(v0[76], v0[68]);
      }
      uint64_t v60 = v0[78];
      uint64_t v61 = v0[68];
      lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
      swift_allocError();
      *uint64_t v62 = 0;
      swift_willThrow();
      outlined consume of Data._Representation(v100, v101);
      v52(v60, v61);
      goto LABEL_35;
    }
LABEL_39:
    swift_once();
    goto LABEL_18;
  }
  uint64_t v53 = *(void (**)(uint64_t, void, uint64_t))(v0[58] + 32);
  v53(v0[63], v0[56], v0[57]);
  uint64_t v54 = ResolvedTransferRepresentation.importing.getter();
  v0[90] = v54;
  v0[91] = v55;
  if (!v54)
  {
    os_log_t v107 = v53;
    if (one-time initialization token for ledger != -1) {
      swift_once();
    }
    unint64_t v63 = v0[63];
    uint64_t v64 = v0[61];
    unint64_t v65 = v0[58];
    Class v117 = v0;
    uint64_t v66 = v0[57];
    uint64_t v67 = type metadata accessor for Logger();
    __swift_project_value_buffer(v67, (uint64_t)static Log.ledger);
    os_log_t v68 = v66;
    uint64_t v69 = v0;
    uint64_t v111 = *(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16);
    v111(v64, v63, v68);
    uint64_t v70 = Logger.logObject.getter();
    uint64_t v71 = static os_log_type_t.error.getter();
    uint64_t v72 = os_log_type_enabled(v70, v71);
    uint64_t v73 = v0[61];
    uint64_t v75 = v0[57];
    uint64_t v74 = v0[58];
    if (v72)
    {
      Class v103 = v71;
      uint64_t v105 = v70;
      os_log_type_t v76 = v69;
      BOOL v77 = v69[55];
      uint64_t v97 = v76[54];
      uint64_t v78 = (uint8_t *)swift_slowAlloc();
      Class v99 = swift_slowAlloc();
      v118[0] = v99;
      uint64_t v102 = v78;
      *(_DWORD *)uint64_t v78 = 136315138;
      v111(v77, v73, v75);
      v34(v77, 0, 1, v75);
      outlined init with copy of URL?(v77, v97, &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      if (v38(v97, 1, v75) == 1)
      {
        uint64_t v79 = 0xE300000000000000;
        uint64_t v80 = 7104878;
      }
      else
      {
        unint64_t v82 = v76[59];
        uint64_t v83 = v76[60];
        uint64_t v85 = v76[57];
        uint64_t v84 = v76[58];
        v107(v83, v76[54], v85);
        v111(v82, v83, v85);
        uint64_t v80 = String.init<A>(reflecting:)();
        uint64_t v79 = v86;
        (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v83, v85);
      }
      uint64_t v87 = v76[61];
      unint64_t v89 = v76[57];
      uint64_t v88 = v76[58];
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v76[55], &demangling cache variable for type metadata for ResolvedTransferRepresentation?);
      v76[45] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v79, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v81 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
      v81(v87, v89);
      _os_log_impl(&dword_1A375F000, v105, v103, "Failed to find importing closure from representation %s", v102, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v99, -1, -1);
      MEMORY[0x1A624F870](v102, -1, -1);

      uint64_t v69 = v76;
    }
    else
    {
      uint64_t v81 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
      v81(v69[61], v69[57]);
    }
    uint64_t v90 = v69[78];
    uint64_t v91 = v69[75];
    uint64_t v92 = v117[68];
    uint64_t v93 = v117[63];
    uint64_t v94 = v117[57];
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *uint64_t v95 = 0;
    swift_willThrow();
    outlined consume of Data._Representation(v100, v101);
    v81(v93, v94);
    uint64_t v0 = v117;
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v90, v92);
    goto LABEL_35;
  }
  uint64_t v56 = (int *)v54;
  uint64_t v57 = MEMORY[0x1E4F248B8];
  v0[20] = MEMORY[0x1E4F277C0];
  v0[21] = v57;
  v0[17] = v100;
  v0[18] = v101;
  outlined copy of Data._Representation(v100, v101);
  uint64_t v116 = (int *)((char *)v56 + *v56);
  unint64_t v58 = (void *)swift_task_alloc();
  v0[92] = v58;
  *unint64_t v58 = v0;
  v58[1] = GroupSessionAttachmentManager.Attachment.load<A>(_:);
  return ((uint64_t (*)(void *, void *))v116)(v0 + 12, v0 + 17);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 744) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = GroupSessionAttachmentManager.Attachment.load<A>(_:);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v2 + 136);
    uint64_t v3 = GroupSessionAttachmentManager.Attachment.load<A>(_:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  int v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t MetatypeMetadata;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned char *v35;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[2];
  uint64_t v46;
  uint64_t v47;

  uint64_t v46 = v0;
  uint64_t v1 = *(void *)(v0 + 384);
  outlined init with copy of AudioSessionAssertionManager(v0 + 96, v0 + 176);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transferable);
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 56);
  uint64_t v44 = v0 + 96;
  if (v2)
  {
    unint64_t v4 = *(void *)(v1 - 8);
    uint64_t v5 = *(void *)(v0 + 720);
    uint64_t v38 = *(void *)(v0 + 712);
    uint64_t v37 = *(void *)(v0 + 704);
    uint64_t v40 = *(void *)(v0 + 624);
    unint64_t v6 = *(void *)(v0 + 600);
    uint64_t v39 = *(void *)(v0 + 544);
    uint64_t v7 = *(void *)(v0 + 504);
    uint64_t v8 = *(void *)(v0 + 464);
    uint64_t v9 = *(void *)(v0 + 456);
    uint64_t v10 = *(void *)(v0 + 424);
    uint64_t v11 = *(void *)(v0 + 376);
    uint64_t v12 = *(void *)(v0 + 384);
    v3(v10, 0, 1, v12);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v5);
    outlined consume of Data._Representation(v37, v38);
    __swift_destroy_boxed_opaque_existential_1Tm(v44);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v11, v10, v12);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v40, v39);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    unint64_t v15 = *(void *)(v0 + 416);
    uint64_t v14 = *(void *)(v0 + 424);
    uint64_t v16 = *(void *)(v0 + 408);
    v3(v14, 1, 1, *(void *)(v0 + 384));
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    if (one-time initialization token for ledger != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Log.ledger);
    outlined init with copy of AudioSessionAssertionManager(v0 + 96, v0 + 216);
    uint64_t v18 = Logger.logObject.getter();
    uint64_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      v45[0] = v43;
      *(_DWORD *)uint64_t v20 = 136315394;
      outlined init with copy of AudioSessionAssertionManager(v0 + 216, v0 + 16);
      outlined init with copy of URL?(v0 + 16, v0 + 296, &demangling cache variable for type metadata for Transferable?);
      if (*(void *)(v0 + 320))
      {
        outlined init with take of TypedPayloadDecoding((long long *)(v0 + 296), v0 + 56);
        outlined init with copy of AudioSessionAssertionManager(v0 + 56, v0 + 256);
        uint64_t v21 = String.init<A>(reflecting:)();
        uint64_t v23 = v22;
        __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
      }
      else
      {
        uint64_t v23 = 0xE300000000000000;
        uint64_t v21 = 7104878;
      }
      uint64_t v24 = *(void *)(v0 + 384);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + 16, &demangling cache variable for type metadata for Transferable?);
      *(void *)(v0 + 336) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 216);
      *(_WORD *)(v20 + 12) = 2080;
      *(void *)(v0 + 344) = v24;
      MetatypeMetadata = swift_getMetatypeMetadata();
      unint64_t v26 = >> prefix<A>(_:)(v0 + 344, MetatypeMetadata);
      *(void *)(v0 + 352) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v18, v19, "Failed to convert %s to %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v43, -1, -1);
      MEMORY[0x1A624F870](v20, -1, -1);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 216);
    }

    uint64_t v28 = *(void *)(v0 + 720);
    uint64_t v29 = *(void *)(v0 + 712);
    uint64_t v30 = *(void *)(v0 + 704);
    Class v31 = *(void *)(v0 + 600);
    uint64_t v41 = *(void *)(v0 + 544);
    uint64_t v42 = *(void *)(v0 + 624);
    uint64_t v32 = *(void *)(v0 + 504);
    uint64_t v33 = *(void *)(v0 + 456);
    uint64_t v34 = *(void *)(v0 + 464);
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *uint64_t v35 = 1;
    swift_willThrow();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v28);
    outlined consume of Data._Representation(v30, v29);
    __swift_destroy_boxed_opaque_existential_1Tm(v44);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v42, v41);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v13();
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = v0[89];
  uint64_t v2 = v0[88];
  uint64_t v3 = v0[78];
  unint64_t v4 = v0[75];
  uint64_t v5 = v0[68];
  unint64_t v6 = v0[63];
  uint64_t v7 = v0[57];
  uint64_t v8 = v0[58];
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v0[90]);
  outlined consume of Data._Representation(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 17));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t GroupSessionAttachmentManager.Attachment.loadDataFromAttachment(attachmentID:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for URL();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  void v2[6] = swift_task_alloc();
  return MEMORY[0x1F4188298](GroupSessionAttachmentManager.Attachment.loadDataFromAttachment(attachmentID:), 0, 0);
}

uint64_t GroupSessionAttachmentManager.Attachment.loadDataFromAttachment(attachmentID:)()
{
  type metadata accessor for GroupSessionAttachmentManager.Attachment(0);
  uint64_t Strong = swift_weakLoadStrong();
  v0[7] = Strong;
  if (Strong)
  {
    v0[8] = *(void *)(Strong + 16);
    uint64_t v2 = *(void *)(Strong + 24);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 48) + **(int **)(v2 + 48));
    swift_unknownObjectRetain();
    unint64_t v4 = (void *)swift_task_alloc();
    v0[9] = v4;
    void *v4 = v0;
    v4[1] = GroupSessionAttachmentManager.Attachment.loadDataFromAttachment(attachmentID:);
    uint64_t v5 = v0[6];
    uint64_t v6 = v0[2];
    return v10(v5, v6, ObjectType, v2);
  }
  else
  {
    lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
    swift_allocError();
    *uint64_t v8 = 2;
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = GroupSessionAttachmentManager.Attachment.loadDataFromAttachment(attachmentID:);
  }
  else {
    uint64_t v2 = GroupSessionAttachmentManager.Attachment.loadDataFromAttachment(attachmentID:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  uint64_t v1 = v0[10];
  swift_unknownObjectRelease();
  uint64_t v2 = Data.init(contentsOf:options:)();
  unint64_t v4 = v3;
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  if (v1)
  {
    (*(void (**)(void, uint64_t))(v6 + 8))(v0[6], v5);
    swift_release();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  else
  {
    uint64_t v9 = v2;
    (*(void (**)(void, uint64_t))(v6 + 8))(v0[6], v5);
    swift_release();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v10(v9, v4);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t GroupSessionAttachmentManager.Attachment.loadMetadata<A>(of:)()
{
  return MEMORY[0x1F4188298](GroupSessionAttachmentManager.Attachment.loadMetadata<A>(of:), 0, 0);
}

{
  uint64_t v0;
  unsigned char *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  lazy protocol witness table accessor for type GroupSessionJournal.Errors and conformance GroupSessionJournal.Errors();
  swift_allocError();
  *uint64_t v1 = 0;
  swift_willThrow();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t GroupSessionAttachmentManager.Attachments.base.getter()
{
  return swift_retain();
}

uint64_t GroupSessionAttachmentManager.Attachments.makeAsyncIterator()@<X0>(uint64_t *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PublisherElements<AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never>>.Iterator.Inner);
  uint64_t v2 = swift_allocObject();
  swift_retain();
  uint64_t v3 = (_DWORD *)swift_slowAlloc();
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)(v2 + 16) = v3;
  *(void *)(v2 + 24) = v4;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = static Subscribers.Demand.none.getter();
  _DWORD *v3 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type _PublisherElements<AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never>>.Iterator.Inner and conformance _PublisherElements<A>.Iterator.Inner, &demangling cache variable for type metadata for _PublisherElements<AnyPublisher<[GroupSessionAttachmentManager.Attachment], Never>>.Iterator.Inner);
  Publisher.subscribe<A>(_:)();
  uint64_t result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t GroupSessionAttachmentManager.Attachments.Iterator.init(baseIterator:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t GroupSessionAttachmentManager.Attachments.Iterator.baseIterator.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*GroupSessionAttachmentManager.Attachments.Iterator.baseIterator.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t GroupSessionAttachmentManager.Attachments.Iterator.next()()
{
  *(void *)(v1 + 24) = v0;
  return MEMORY[0x1F4188298](GroupSessionAttachmentManager.Attachments.Iterator.next(), 0, 0);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = (uint64_t *)v0[3];
  uint64_t v2 = *v1;
  v0[4] = *v1;
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v1;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GroupSessionAttachmentManager.Attachment]?);
  void *v4 = v0;
  v4[1] = GroupSessionJournal.Attachments.Iterator.next();
  return MEMORY[0x1F4188148](v0 + 2, &async function pointer to partial apply for specialized closure #2 in _PublisherElements.Iterator.next(), v3, partial apply for specialized closure #1 in _PublisherElements.Iterator.next(), v2, 0, 0, v5);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance GroupSessionAttachmentManager.Attachments.Iterator(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return MEMORY[0x1F4188298](protocol witness for AsyncIteratorProtocol.next() in conformance GroupSessionAttachmentManager.Attachments.Iterator, 0, 0);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance GroupSessionAttachmentManager.Attachments.Iterator()
{
  uint64_t v1 = (uint64_t *)v0[4];
  uint64_t v2 = *v1;
  v0[5] = *v1;
  uint64_t v3 = swift_task_alloc();
  v0[6] = v3;
  *(void *)(v3 + 16) = v1;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[7] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GroupSessionAttachmentManager.Attachment]?);
  void *v4 = v0;
  v4[1] = protocol witness for AsyncIteratorProtocol.next() in conformance GroupSessionJournal.Attachments.Iterator;
  return MEMORY[0x1F4188148](v0 + 2, &closure #2 in _PublisherElements.Iterator.next()specialized partial apply, v3, partial apply for specialized closure #1 in _PublisherElements.Iterator.next(), v2, 0, 0, v5);
}

uint64_t _s15GroupActivities0A24SessionAttachmentManagerC11AttachmentsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  void v4[4] = a2;
  return MEMORY[0x1F4188298](_s15GroupActivities0A24SessionAttachmentManagerC11AttachmentsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY0_, 0, 0);
}

uint64_t _s15GroupActivities0A24SessionAttachmentManagerC11AttachmentsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY0_()
{
  uint64_t v1 = (uint64_t *)v0[6];
  uint64_t v2 = *v1;
  v0[7] = *v1;
  uint64_t v3 = swift_task_alloc();
  v0[8] = v3;
  *(void *)(v3 + 16) = v1;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[9] = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GroupSessionAttachmentManager.Attachment]?);
  void *v4 = v0;
  v4[1] = _s15GroupActivities0A14SessionJournalC11AttachmentsV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ1_;
  return MEMORY[0x1F4188148](v0 + 2, &closure #2 in _PublisherElements.Iterator.next()specialized partial apply, v3, partial apply for specialized closure #1 in _PublisherElements.Iterator.next(), v2, 0, 0, v5);
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance GroupSessionAttachmentManager.Attachments@<X0>(uint64_t *a1@<X8>)
{
  GroupSessionAttachmentManager.Attachments.makeAsyncIterator()(a1);

  return swift_release();
}

uint64_t key path getter for GroupSessionAttachmentManager._attachments : GroupSessionAttachmentManager@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for GroupSessionAttachmentManager._attachments : GroupSessionAttachmentManager()
{
  return static Published.subscript.setter();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Participant>, (uint64_t (*)(void))type metadata accessor for Participant, (uint64_t (*)(void))type metadata accessor for Participant);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<LinkManager.Attachment>, type metadata accessor for LinkManager.Attachment, type metadata accessor for LinkManager.Attachment);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, MEMORY[0x1E4F27990], MEMORY[0x1E4F27990]);
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if (a3)
  {
    uint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AsyncThrowingStream<CKShare, Error>.Continuation>);
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Continuation)
                  - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  uint64_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (unint64_t v15 = v11 == -1) : (unint64_t v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  _OWORD v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Continuation)
                  - 8);
  uint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBCEA8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<GroupSessionJournal.Attachment>, type metadata accessor for GroupSessionJournal.Attachment, type metadata accessor for GroupSessionJournal.Attachment);
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3, void *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      void v11[2] = v9;
      long long v11[3] = 2 * (v13 >> 3);
      uint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v14 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4]) {
          memmove(v14, a4 + 4, 8 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  void v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Topic.PendingMessage>);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for GroupSessionAttachmentManager.Attachment(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for GroupSessionAttachmentManager.Attachment);
}

uint64_t outlined init with take of GroupSessionAttachmentManager.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GroupSessionAttachmentManager.Attachment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *specialized GroupSessionAttachmentManager.__allocating_init(transportSession:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)swift_allocObject();

  return specialized GroupSessionAttachmentManager.init(transportSession:)(a1, v7, a3, a4);
}

void *specialized GroupSessionAttachmentManager.init(transportSession:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a3;
  uint64_t v34 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>.Publisher);
  uint64_t v32 = *(void *)(v6 - 8);
  uint64_t v33 = v6;
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  Class v31 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[UUID], Never>, [GroupSessionAttachmentManager.Attachment]>);
  uint64_t v11 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2[4] = 0;
  uint64_t v18 = (char *)a2 + OBJC_IVAR____TtC15GroupActivities29GroupSessionAttachmentManager___attachments;
  uint64_t v35 = MEMORY[0x1E4FBC860];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GroupSessionAttachmentManager.Attachment]);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v17, v14);
  *(void *)((char *)a2 + OBJC_IVAR____TtC15GroupActivities29GroupSessionAttachmentManager_cancellables) = MEMORY[0x1E4FBC870];
  a2[2] = v34;
  a2[3] = a4;
  size_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 24);
  swift_unknownObjectRetain();
  uint64_t v35 = v19(v29, a4);
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[UUID], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<[UUID], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[UUID], Never>);
  Publisher.map<A>(_:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<AnyPublisher<[UUID], Never>, [GroupSessionAttachmentManager.Attachment]> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<AnyPublisher<[UUID], Never>, [GroupSessionAttachmentManager.Attachment]>);
  uint64_t v20 = v30;
  Publisher<>.assign(to:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v20);
  uint64_t v21 = v32;
  uint64_t v22 = v33;
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v31, v10, v33);
  swift_beginAccess();
  Published.projectedValue.setter();
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v22);
  uint64_t v23 = a2[3];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 32))(ObjectType, v23);
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = partial apply for closure #2 in GroupSessionAttachmentManager.init(transportSession:);
  *(void *)(v26 + 24) = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<(UUID, URL, Participant), Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<(UUID, URL, Participant), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(UUID, URL, Participant), Never>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_unknownObjectRelease();
  return a2;
}

uint64_t outlined copy of GroupSessionAttachmentManager.Attachment.AttachmentSource(uint64_t result, unint64_t a2)
{
  uint64_t v2 = (a2 >> 60) & 3;
  if (v2)
  {
    if (v2 != 1) {
      return result;
    }
    a2 &= 0xCFFFFFFFFFFFFFFFLL;
  }
  return outlined copy of Data._Representation(result, a2);
}

uint64_t outlined consume of GroupSessionAttachmentManager.Attachment.AttachmentSource(uint64_t result, unint64_t a2)
{
  uint64_t v2 = (a2 >> 60) & 3;
  if (v2)
  {
    if (v2 != 1) {
      return result;
    }
    a2 &= 0xCFFFFFFFFFFFFFFFLL;
  }
  return outlined consume of Data._Representation(result, a2);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in GroupSessionAttachmentManager.Attachment()
{
  return _s10Foundation4UUIDVACSHAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
}

unint64_t lazy protocol witness table accessor for type GroupSessionAttachmentManager.Attachments.Iterator and conformance GroupSessionAttachmentManager.Attachments.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupSessionAttachmentManager.Attachments.Iterator and conformance GroupSessionAttachmentManager.Attachments.Iterator;
  if (!lazy protocol witness table cache variable for type GroupSessionAttachmentManager.Attachments.Iterator and conformance GroupSessionAttachmentManager.Attachments.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionAttachmentManager.Attachments.Iterator and conformance GroupSessionAttachmentManager.Attachments.Iterator);
  }
  return result;
}

uint64_t sub_1A384EDAC@<X0>(void *a1@<X8>)
{
  uint64_t result = GroupSessionAttachmentManager.attachments.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_1A384EDE8(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 32) = *a1;
  swift_retain();

  return swift_release();
}

uint64_t sub_1A384EE30()
{
  type metadata accessor for GroupSessionAttachmentManager.Attachment(0);

  return swift_weakAssign();
}

uint64_t ObjC metadata update function for GroupSessionAttachmentManager()
{
  return type metadata accessor for GroupSessionAttachmentManager(0);
}

uint64_t type metadata accessor for GroupSessionAttachmentManager(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for GroupSessionAttachmentManager);
}

void type metadata completion function for GroupSessionAttachmentManager()
{
  type metadata accessor for Published<[GroupSessionAttachmentManager.Attachment]>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for GroupSessionAttachmentManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for GroupSessionAttachmentManager);
}

uint64_t dispatch thunk of GroupSessionAttachmentManager.__allocating_init(transportSession:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

void type metadata accessor for Published<[GroupSessionAttachmentManager.Attachment]>()
{
  if (!lazy cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GroupSessionAttachmentManager.Attachment]);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<[GroupSessionAttachmentManager.Attachment]>);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupSessionAttachmentManager.Attachment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_weakCopyInit();
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    outlined copy of GroupSessionAttachmentManager.Attachment.AttachmentSource(*v10, v12);
    *uint64_t v9 = v11;
    v9[1] = v12;
  }
  return a1;
}

uint64_t destroy for GroupSessionAttachmentManager.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_weakDestroy();
  int v5 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];

  return outlined consume of GroupSessionAttachmentManager.Attachment.AttachmentSource(v6, v7);
}

uint64_t initializeWithCopy for GroupSessionAttachmentManager.Attachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  swift_weakCopyInit();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  outlined copy of GroupSessionAttachmentManager.Attachment.AttachmentSource(*v9, v11);
  *uint64_t v8 = v10;
  v8[1] = v11;
  return a1;
}

uint64_t assignWithCopy for GroupSessionAttachmentManager.Attachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  swift_weakCopyAssign();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  outlined copy of GroupSessionAttachmentManager.Attachment.AttachmentSource(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  *uint64_t v8 = v10;
  v8[1] = v11;
  outlined consume of GroupSessionAttachmentManager.Attachment.AttachmentSource(v12, v13);
  return a1;
}

uint64_t initializeWithTake for GroupSessionAttachmentManager.Attachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  swift_weakTakeInit();
  *(_OWORD *)(a1 + *(int *)(a3 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for GroupSessionAttachmentManager.Attachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  swift_weakTakeAssign();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  outlined consume of GroupSessionAttachmentManager.Attachment.AttachmentSource(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionAttachmentManager.Attachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1A384F3CC);
}

uint64_t sub_1A384F3CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) != a2) {
    return (~*(void *)(a1 + *(int *)(a3 + 24) + 8) & 0x3000000000000000) == 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);

  return v8(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for GroupSessionAttachmentManager.Attachment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1A384F4A0);
}

uint64_t sub_1A384F4A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    unint64_t v11 = (void *)(a1 + *(int *)(a4 + 24));
    *unint64_t v11 = 0;
    v11[1] = (-(int)a2 & 3) << 60;
  }
  return result;
}

uint64_t type metadata completion function for GroupSessionAttachmentManager.Attachment()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupSessionAttachmentManager.Attachment.AttachmentSource(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of GroupSessionAttachmentManager.Attachment.AttachmentSource(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for GroupSessionAttachmentManager.Attachment.AttachmentSource(uint64_t a1)
{
  return outlined consume of GroupSessionAttachmentManager.Attachment.AttachmentSource(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for GroupSessionAttachmentManager.Attachment.AttachmentSource(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of GroupSessionAttachmentManager.Attachment.AttachmentSource(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of GroupSessionAttachmentManager.Attachment.AttachmentSource(v5, v6);
  return a1;
}

uint64_t *assignWithTake for GroupSessionAttachmentManager.Attachment.AttachmentSource(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of GroupSessionAttachmentManager.Attachment.AttachmentSource(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionAttachmentManager.Attachment.AttachmentSource(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2);
  }
  if ((~*(void *)(a1 + 8) & 0x3000000000000000) != 0) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupSessionAttachmentManager.Attachment.AttachmentSource(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(_OWORD *)uint64_t result = xmmword_1A38F9EB0;
    }
  }
  return result;
}

uint64_t getEnumTag for GroupSessionAttachmentManager.Attachment.AttachmentSource(uint64_t a1)
{
  if (((*(void *)(a1 + 8) >> 60) & 2) != 0) {
    return (*(_DWORD *)a1 + 2);
  }
  else {
    return (*(void *)(a1 + 8) >> 60) & 3;
  }
}

uint64_t destructiveProjectEnumData for GroupSessionAttachmentManager.Attachment.AttachmentSource(uint64_t result)
{
  *(void *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  return result;
}

void *destructiveInjectEnumTag for GroupSessionAttachmentManager.Attachment.AttachmentSource(void *result, uint64_t a2)
{
  if (a2 < 2)
  {
    result[1] = result[1] & 0xCFFFFFFFFFFFFFFFLL | (a2 << 60);
  }
  else
  {
    *uint64_t result = (a2 - 2);
    result[1] = 0x2000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionAttachmentManager.Attachment.AttachmentSource()
{
  return &type metadata for GroupSessionAttachmentManager.Attachment.AttachmentSource;
}

ValueMetadata *type metadata accessor for GroupSessionAttachmentManager.Attachments()
{
  return &type metadata for GroupSessionAttachmentManager.Attachments;
}

ValueMetadata *type metadata accessor for GroupSessionAttachmentManager.Attachments.Iterator()
{
  return &type metadata for GroupSessionAttachmentManager.Attachments.Iterator;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CKShare, Error>.Continuation)
                   - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = a4 + 56 * a1 + 32;
    size_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1A3850288()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in GroupSessionAttachmentManager.init(transportSession:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return closure #1 in GroupSessionAttachmentManager.init(transportSession:)(a1, v2, a2);
}

uint64_t partial apply for closure #2 in GroupSessionAttachmentManager.init(transportSession:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #2 in GroupSessionAttachmentManager.init(transportSession:)(a1, a2, a3, v3);
}

uint64_t sub_1A38502D0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _s10Foundation4UUIDVAA3URLV15GroupActivities11ParticipantVIegnnn_AC_AeHtIegn_TRTA_0(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, URL, Participant));
  return v3(a1, a1 + *(int *)(v4 + 48), a1 + *(int *)(v4 + 64));
}

uint64_t outlined init with copy of GroupSessionAttachmentManager.Attachment(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of GroupSessionAttachmentManager.Attachment(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t dispatch thunk of static CustomMessageIdentifiable.messageIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t Participant.init(handle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  UUID.init()();
  uint64_t result = type metadata accessor for Participant();
  uint64_t v7 = (void *)(a3 + *(int *)(result + 20));
  *uint64_t v7 = a1;
  v7[1] = a2;
  *(void *)(a3 + *(int *)(result + 24)) = 0;
  return result;
}

uint64_t Participant.init(serverIdentifier:handle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  UUID.init(_:)();
  uint64_t result = type metadata accessor for Participant();
  *(void *)(a4 + *(int *)(result + 24)) = a1;
  uint64_t v9 = (void *)(a4 + *(int *)(result + 20));
  *uint64_t v9 = a2;
  v9[1] = a3;
  return result;
}

id Participant.cpParticipant.getter()
{
  uint64_t v1 = type metadata accessor for Participant();
  uint64_t v2 = (uint64_t *)(v0 + *(int *)(v1 + 20));
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  id v5 = objc_allocWithZone(MEMORY[0x1E4F5B148]);
  swift_bridgeObjectRetain();
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v7 = (void *)MEMORY[0x1A624DFA0](v3, v4);
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v5, sel_initWithUUID_accountIdentifier_, isa, v7);

  objc_msgSend(v8, sel__setParticipantIdentifier_, *(void *)(v0 + *(int *)(v1 + 24)));
  return v8;
}

uint64_t Participant.init(id:handle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a4, a1, v8);
  unint64_t v10 = UUID.uint64Value.getter();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  uint64_t result = type metadata accessor for Participant();
  *(void *)(a4 + *(int *)(result + 24)) = v10;
  unint64_t v12 = (void *)(a4 + *(int *)(result + 20));
  *unint64_t v12 = a2;
  v12[1] = a3;
  return result;
}

uint64_t Participant.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t Participant.handle.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Participant() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Participant.serverIdentifier.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Participant() + 24));
}

uint64_t Participant.init(cpParticipant:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = objc_msgSend(a1, sel_participantIdentifier);
  id v5 = objc_msgSend(a1, sel_accountIdentifier);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  UUID.init(_:)();
  uint64_t result = type metadata accessor for Participant();
  *(void *)(a2 + *(int *)(result + 24)) = v4;
  unint64_t v10 = (uint64_t *)(a2 + *(int *)(result + 20));
  *unint64_t v10 = v6;
  v10[1] = v8;
  return result;
}

void Participant.hash(into:)()
{
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = type metadata accessor for Participant();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v0 + *(int *)(v1 + 24)));
}

Swift::Int Participant.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = type metadata accessor for Participant();
  String.hash(into:)();
  Hasher._combine(_:)(*(void *)(v0 + *(int *)(v1 + 24)));
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Participant(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  dispatch thunk of Hashable.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(*(void *)(v1 + *(int *)(a1 + 24)));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Participant(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  dispatch thunk of Hashable.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(*(void *)(v2 + *(int *)(a2 + 24)));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Participant(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  dispatch thunk of Hashable.hash(into:)();
  String.hash(into:)();
  Hasher._combine(_:)(*(void *)(v2 + *(int *)(a2 + 24)));
  return Hasher._finalize()();
}

unint64_t Participant.description.getter()
{
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  uint64_t v2 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Participant() + 20));
  uint64_t v4 = *v2;
  unint64_t v3 = v2[1];
  uint64_t v5 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    swift_bridgeObjectRetain();
    v6._countAndFlagsBits = v4;
    v6._object = (void *)v3;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 0x656C646E6168202CLL;
    v7._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
  }
  v8._countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 0xD000000000000010;
}

BOOL specialized static Participant.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for Participant();
  uint64_t v5 = *(int *)(v4 + 20);
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  Swift::String v8 = (void *)(a2 + v5);
  if (v6 == *v8 && v7 == v8[1]) {
    return *(void *)(a1 + *(int *)(v4 + 24)) == *(void *)(a2 + *(int *)(v4 + 24));
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v10) {
    return *(void *)(a1 + *(int *)(v4 + 24)) == *(void *)(a2 + *(int *)(v4 + 24));
  }
  return result;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in Participant()
{
  return _s10Foundation4UUIDVACSHAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
}

uint64_t *initializeBufferWithCopyOfBuffer for Participant(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    char v10 = (uint64_t *)((char *)a1 + v8);
    unint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *char v10 = *v11;
    v10[1] = v12;
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t initializeWithCopy for Participant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  char v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Participant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for Participant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for Participant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for Participant(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1A3851110);
}

uint64_t sub_1A3851110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for Participant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1A38511E8);
}

uint64_t sub_1A38511E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t static BinaryEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1A38F6410;
  uint64_t v7 = a1;
  (*(void (**)(void))(a3 + 8))();
  if (!v3)
  {
    swift_beginAccess();
    uint64_t v7 = *(void *)(v6 + 16);
    outlined copy of Data._Representation(v7, *(void *)(v6 + 24));
  }
  swift_release();
  return v7;
}

double BinaryEncoder.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 16) = xmmword_1A38F6410;
  return result;
}

uint64_t BinaryEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in BinaryEncoder.encode<A>(_:), 0, a2, MEMORY[0x1E4FBC248], MEMORY[0x1E4F277C0], MEMORY[0x1E4FBC278], a8);
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  return outlined consume of Data._Representation(v9, v10);
}

uint64_t closure #1 in BinaryEncoder.encode<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v14[3] = MEMORY[0x1E4FBB2B8];
  v14[4] = MEMORY[0x1E4F27EF0];
  v14[0] = a1;
  v14[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v14, MEMORY[0x1E4FBB2B8]);
  int v5 = (unsigned char *)*v4;
  if (*v4 && (v6 = (unsigned char *)v4[1], uint64_t v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      uint64_t v8 = specialized Data.InlineData.init(_:)(v5, v6);
      unint64_t v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      uint64_t v8 = specialized Data.LargeSlice.init(_:)((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v13 | 0x8000000000000000;
    }
    else
    {
      uint64_t v8 = specialized Data.InlineSlice.init(_:)((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0xC000000000000000;
  }
  uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  v8[3] = MEMORY[0x1E4FBB2B8];
  v8[4] = MEMORY[0x1E4F27EF0];
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x1E4FBB2B8]);
  uint64_t v3 = (unsigned char *)*v2;
  if (*v2 && (v4 = (unsigned char *)v2[1], uint64_t v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = specialized Data.InlineData.init(_:)(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = specialized Data.LargeSlice.init(_:)((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      uint64_t v6 = specialized Data.InlineSlice.init(_:)((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
  return v6;
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x1F4188790]();
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v16(v12, v12 + *(void *)(*(void *)(v15 - 8) + 64), v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t BinaryEncoder.encode(_:)()
{
  v21[1] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = UUID.uuid.getter();
  char v13 = v0;
  char v14 = v1;
  char v15 = v2;
  char v16 = v3;
  char v17 = v4;
  char v18 = v5;
  char v19 = v6;
  char v20 = v7;
  uint64_t v8 = specialized Data.init<A>(_:)((uint64_t)&v12, (uint64_t)v21);
  unint64_t v10 = v9;
  swift_beginAccess();
  Data.append(_:)();
  swift_endAccess();
  return outlined consume of Data._Representation(v8, v10);
}

{
  swift_beginAccess();
  Data.append(_:)();
  return swift_endAccess();
}

uint64_t BinaryEncoder.encode<A>(_:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v3 = (char *)&v11 - v2;
  dispatch thunk of RawRepresentable.rawValue.getter();
  BinaryEncoder.encode<A>(_:)((uint64_t)v3, AssociatedTypeWitness, v4, v5, v6, v7, v8, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
}

uint64_t BinaryEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(a3 + 8))(v3);
}

uint64_t BinaryEncoder.deinit()
{
  outlined consume of Data._Representation(*(void *)(v0 + 16), *(void *)(v0 + 24));
  return v0;
}

uint64_t BinaryEncoder.__deallocating_deinit()
{
  outlined consume of Data._Representation(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return swift_deallocClassInstance();
}

double BinaryEncoder.init()()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 16) = xmmword_1A38F6410;
  return result;
}

uint64_t type metadata accessor for BinaryEncoder()
{
  return self;
}

uint64_t method lookup function for BinaryEncoder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for BinaryEncoder);
}

uint64_t dispatch thunk of BinaryEncoder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  unint64_t v10 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
  v8[0] = a1;
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  uint64_t v3 = (unsigned char *)(*v2 + 32);
  uint64_t v4 = &v3[*(void *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  closure #1 in Data.init<A>(_:)(v3, v4, &v7);
  uint64_t v5 = v7;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
  return v5;
}

unint64_t lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A]);
  }
  return result;
}

uint64_t IdentifiableGroupActivity.uuid.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  v16[7] = *(void *)(v7 - 8);
  v16[8] = v7;
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  v16[5] = (char *)v16 - v9;
  v16[9] = *(void *)(a1 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v10);
  char v13 = (char *)v16 - v12;
  v16[6] = v5;
  dispatch thunk of Identifiable.id.getter();
  uint64_t v14 = type metadata accessor for UUID();
  swift_getAssociatedConformanceWitness();
  default argument 0 of static SharableObjectIdentifier.identifier<A, B>(ofType:with:)(AssociatedTypeWitness, v14);
  v16[10] = a3;
  static SharableObjectIdentifier.identifier<A, B>(ofType:with:)();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

id XPCWrapper.__allocating_init(_:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = specialized XPCWrapper.init(_:)(a1);
  (*(void (**)(uint64_t))(*(void *)(*((void *)v1 + 10) - 8) + 8))(a1);
  return v4;
}

uint64_t @objc static XPCWrapper.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t static XPCWrapper.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t XPCWrapper.wrapped.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)(*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v1)
                                                                            + 0x50)
                                                                - 8)
                                                    + 16))(a1, &v1[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v1) + 0x68)]);
}

id XPCWrapper.init(_:)(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  id v4 = specialized XPCWrapper.init(_:)(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8))(a1);
  return v4;
}

Swift::Void __swiftcall XPCWrapper.encode(with:)(NSCoder with)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v3 = (id)MEMORY[0x1A624DFA0](1635017060, 0xE400000000000000);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v3];
}

void @objc XPCWrapper.encode(with:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  XPCWrapper.encode(with:)((NSCoder)v4);
}

id XPCWrapper.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return XPCWrapper.init(coder:)(a1);
}

id XPCWrapper.init(coder:)(void *a1)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v4 = *(void *)(v3 + 0x50);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v26 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v23 - v7;
  uint64_t v27 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v23 - v9;
  type metadata accessor for NSData();
  uint64_t v11 = v1;
  uint64_t v12 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v12
    && (char v13 = (void *)v12,
        long long v29 = xmmword_1A38FA250,
        static Data._conditionallyBridgeFromObjectiveC(_:result:)(),
        v13,
        uint64_t v14 = *((void *)&v29 + 1),
        *((void *)&v29 + 1) >> 60 != 15))
  {
    id v25 = a1;
    uint64_t v15 = v29;
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    uint64_t v23 = *(void *)(v3 + 88);
    uint64_t v24 = v15;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    uint64_t v18 = v27;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v8, 0, 1, v4);
    char v19 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v19(v10, v8, v4);
    char v20 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v21 = &v11[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v11) + 0x70)];
    *(void *)uint64_t v21 = v24;
    *((void *)v21 + 1) = v14;
    v19(&v11[*(void *)((*v20 & *(void *)v11) + 0x68)], v10, v4);

    uint64_t v22 = (objc_class *)type metadata accessor for XPCWrapper();
    v28.receiver = v11;
    v28.super_class = v22;
    id v16 = objc_msgSendSuper2(&v28, sel_init);
  }
  else
  {

    type metadata accessor for XPCWrapper();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v16;
}

id @objc XPCWrapper.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return XPCWrapper.init(coder:)(a3);
}

uint64_t XPCWrapper.subscript.getter(uint64_t a1)
{
  return MEMORY[0x1F4186550]((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x68), a1);
}

id XPCWrapper.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void XPCWrapper.init()()
{
}

void @objc XPCWrapper.init()()
{
}

id XPCWrapper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for XPCWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc XPCWrapper.__ivar_destroyer(char *a1)
{
  objc_super v2 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(char *))(*(void *)(*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)a1) + 0x50) - 8) + 8))(&a1[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)a1) + 0x68)]);
  uint64_t v3 = (uint64_t *)&a1[*(void *)((*v2 & *(void *)a1) + 0x70)];
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];

  return outlined consume of Data._Representation(v4, v5);
}

unint64_t type metadata accessor for NSData()
{
  unint64_t result = lazy cache variable for type metadata for NSData;
  if (!lazy cache variable for type metadata for NSData)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSData);
  }
  return result;
}

uint64_t type metadata accessor for XPCWrapper()
{
  return __swift_instantiateGenericMetadata();
}

void specialized XPCWrapper.init()()
{
}

uint64_t type metadata completion function for XPCWrapper()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for XPCWrapper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for XPCWrapper);
}

uint64_t dispatch thunk of XPCWrapper.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of XPCWrapper.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of XPCWrapper.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of XPCWrapper.subscript.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t static BinaryDecoder.decode<A>(_:from:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = a2;
  _OWORD v9[3] = a3;
  v9[4] = 0;
  uint64_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(a5 + 8);
  outlined copy of Data._Representation(a2, a3);
  return v10(v9, a4, a5);
}

BOOL BinaryDecoder.isAtEnd.getter()
{
  uint64_t v1 = v0[4];
  swift_beginAccess();
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  uint64_t v4 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(v2) - v2;
      if (__OFSUB__(HIDWORD(v2), v2))
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x1A3852F08);
      }
      uint64_t v4 = (int)v4;
      return v1 >= v4;
    case 2uLL:
      uint64_t v7 = v2 + 16;
      uint64_t v6 = *(void *)(v2 + 16);
      uint64_t v5 = *(void *)(v7 + 8);
      BOOL v8 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v8) {
        return v1 >= v4;
      }
      goto LABEL_8;
    case 3uLL:
      return v1 >= v4;
    default:
      uint64_t v4 = BYTE6(v3);
      return v1 >= v4;
  }
}

uint64_t BinaryDecoder.decode<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v3 = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  uint64_t v46 = a2;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v7 = dispatch thunk of static FixedWidthInteger.bitWidth.getter() / 8;
  uint64_t v8 = *(void *)(a1 - 8);
  if (v7 == *(void *)(v8 + 64))
  {
    uint64_t v9 = v2[4];
    if (__OFADD__(v9, v7))
    {
      __break(1u);
LABEL_22:
      __break(1u);
    }
    else
    {
      uint64_t v10 = swift_beginAccess();
      uint64_t v11 = v3[2];
      unint64_t v12 = v3[3];
      uint64_t v13 = 0;
      switch(v12 >> 62)
      {
        case 1uLL:
          LODWORD(v13) = HIDWORD(v11) - v11;
          if (__OFSUB__(HIDWORD(v11), v11)) {
            goto LABEL_25;
          }
          uint64_t v13 = (int)v13;
LABEL_9:
          BOOL v23 = __OFSUB__(v13, v9);
          uint64_t v24 = v13 - v9;
          if (v23) {
            goto LABEL_22;
          }
          if (v24 < v7)
          {
            uint64_t v25 = type metadata accessor for DecodingError();
            swift_allocError();
            uint64_t v45 = v26;
            uint64_t v47 = 0;
            unint64_t v48 = 0xE000000000000000;
            _StringGuts.grow(_:)(98);
            v27._countAndFlagsBits = 0xD00000000000002ALL;
            v27._object = (void *)0x80000001A3901E80;
            String.append(_:)(v27);
            v28._countAndFlagsBits = _typeName(_:qualified:)();
            String.append(_:)(v28);
            swift_bridgeObjectRelease();
            v29._countAndFlagsBits = 0x766168206557202ELL;
            v29._object = (void *)0xEA00000000002065;
            String.append(_:)(v29);
            uint64_t v30 = v3[2];
            unint64_t v31 = v3[3];
            uint64_t v32 = 0;
            switch(v31 >> 62)
            {
              case 1uLL:
                LODWORD(v32) = HIDWORD(v30) - v30;
                if (__OFSUB__(HIDWORD(v30), v30)) {
                  goto LABEL_27;
                }
                uint64_t v32 = (int)v32;
LABEL_18:
                if (__OFSUB__(v32, v3[4])) {
                  goto LABEL_24;
                }
                v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v40);
                swift_bridgeObjectRelease();
                v41._countAndFlagsBits = 0xD000000000000021;
                v41._object = (void *)0x80000001A3901EB0;
                String.append(_:)(v41);
                uint64_t v51 = v7;
                v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v42);
                swift_bridgeObjectRelease();
                v43._countAndFlagsBits = 0x2E736574796220;
                v43._object = (void *)0xE700000000000000;
                String.append(_:)(v43);
                DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
                (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v25 - 8) + 104))(v45, *MEMORY[0x1E4FBBA78], v25);
                break;
              case 2uLL:
                uint64_t v39 = v30 + 16;
                uint64_t v38 = *(void *)(v30 + 16);
                uint64_t v37 = *(void *)(v39 + 8);
                BOOL v23 = __OFSUB__(v37, v38);
                uint64_t v32 = v37 - v38;
                if (!v23) {
                  goto LABEL_18;
                }
                goto LABEL_28;
              case 3uLL:
                goto LABEL_18;
              default:
                uint64_t v32 = BYTE6(v31);
                goto LABEL_18;
            }
            goto LABEL_20;
          }
          MEMORY[0x1F4188790](v10);
          *(&v44 - 4) = v7;
          *(&v44 - 3) = (uint64_t)v3;
          *(&v44 - 2) = v9;
          *(&v44 - 1) = v9 + v7;
          uint64_t result = _ss22withUnsafeMutableBytes2of_q0_xz_q0_Swq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v46, (uint64_t)partial apply for closure #1 in BinaryDecoder.decode<A>(_:), (uint64_t)(&v44 - 6), a1, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v33);
          uint64_t v35 = v3[4];
          BOOL v23 = __OFADD__(v35, v7);
          uint64_t v36 = v35 + v7;
          if (!v23)
          {
            v3[4] = v36;
            return result;
          }
          break;
        case 2uLL:
          uint64_t v22 = v11 + 16;
          uint64_t v21 = *(void *)(v11 + 16);
          uint64_t v20 = *(void *)(v22 + 8);
          BOOL v23 = __OFSUB__(v20, v21);
          uint64_t v13 = v20 - v21;
          if (!v23) {
            goto LABEL_9;
          }
          goto LABEL_26;
        case 3uLL:
          goto LABEL_9;
        default:
          uint64_t v13 = BYTE6(v12);
          goto LABEL_9;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    JUMPOUT(0x1A38534CCLL);
  }
  uint64_t v14 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v16 = v15;
  uint64_t v49 = 0;
  unint64_t v50 = 0xE000000000000000;
  _StringGuts.grow(_:)(89);
  v17._object = (void *)0x80000001A3901E20;
  v17._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v17);
  v18._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0xD00000000000003FLL;
  v19._object = (void *)0x80000001A3901E40;
  String.append(_:)(v19);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, *MEMORY[0x1E4FBBA78], v14);
LABEL_20:
  swift_willThrow();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v46, a1);
}

uint64_t closure #1 in BinaryDecoder.decode<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a2 - result;
  if (!result) {
    uint64_t v6 = 0;
  }
  if (v6 == a3)
  {
    uint64_t result = swift_beginAccess();
    if (a6 >= a5)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      lazy protocol witness table accessor for type Data and conformance Data();
      lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
      return DataProtocol.copyBytes<A>(to:from:)();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in BinaryDecoder.decode<A>(_:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in BinaryDecoder.decode<A>(_:)(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

uint64_t _ss22withUnsafeMutableBytes2of_q0_xz_q0_Swq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x1F4188790]();
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v16(v12, v12 + *(void *)(*(void *)(v15 - 8) + 64), v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t BinaryDecoder.decode(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[4];
  if (__OFADD__(v2, 16))
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  swift_beginAccess();
  uint64_t v3 = v1[2];
  unint64_t v4 = v1[3];
  uint64_t v5 = 0;
  switch(v4 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(v3) - v3;
      if (__OFSUB__(HIDWORD(v3), v3)) {
        goto LABEL_24;
      }
      uint64_t v5 = (int)v5;
LABEL_7:
      BOOL v8 = __OFSUB__(v5, v2);
      uint64_t v9 = v5 - v2;
      if (v8) {
        goto LABEL_20;
      }
      if (v9 >= 16)
      {
        if (v2 + 16 >= v2)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
          lazy protocol witness table accessor for type Data and conformance Data();
          lazy protocol witness table accessor for type Range<Int> and conformance Range<A>();
          DataProtocol.copyBytes<A>(to:from:)();
          uint64_t v17 = v1[4];
          BOOL v8 = __OFADD__(v17, 16);
          uint64_t v18 = v17 + 16;
          if (!v8)
          {
            v1[4] = v18;
            return UUID.init(uuid:)();
          }
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
        }
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      uint64_t v10 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v12 = v11;
      _StringGuts.grow(_:)(102);
      v13._countAndFlagsBits = 0xD00000000000003ALL;
      v13._object = (void *)0x80000001A3901EE0;
      String.append(_:)(v13);
      uint64_t v14 = v1[2];
      unint64_t v15 = v1[3];
      uint64_t v16 = 0;
      switch(v15 >> 62)
      {
        case 1uLL:
          LODWORD(v16) = HIDWORD(v14) - v14;
          if (__OFSUB__(HIDWORD(v14), v14)) {
            goto LABEL_26;
          }
          uint64_t v16 = (int)v16;
LABEL_17:
          if (__OFSUB__(v16, v1[4])) {
            goto LABEL_22;
          }
          v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v23);
          swift_bridgeObjectRelease();
          v24._object = (void *)0x80000001A3901EB0;
          v24._countAndFlagsBits = 0xD000000000000021;
          String.append(_:)(v24);
          v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v25);
          swift_bridgeObjectRelease();
          v26._countAndFlagsBits = 0x2E736574796220;
          v26._object = (void *)0xE700000000000000;
          String.append(_:)(v26);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 104))(v12, *MEMORY[0x1E4FBBA78], v10);
          uint64_t result = swift_willThrow();
          break;
        case 2uLL:
          uint64_t v22 = v14 + 16;
          uint64_t v21 = *(void *)(v14 + 16);
          uint64_t v20 = *(void *)(v22 + 8);
          BOOL v8 = __OFSUB__(v20, v21);
          uint64_t v16 = v20 - v21;
          if (!v8) {
            goto LABEL_17;
          }
          goto LABEL_27;
        case 3uLL:
          goto LABEL_17;
        default:
          uint64_t v16 = BYTE6(v15);
          goto LABEL_17;
      }
      return result;
    case 2uLL:
      uint64_t v7 = *(void *)(v3 + 16);
      uint64_t v6 = *(void *)(v3 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_7;
      }
      goto LABEL_25;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v5 = BYTE6(v4);
      goto LABEL_7;
  }
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance Range<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Range<Int> and conformance Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance Range<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance Range<A>);
  }
  return result;
}

char *BinaryDecoder.decode(_:encoding:delimiter:)(uint64_t a1, char a2)
{
  uint64_t v50 = a1;
  uint64_t v5 = type metadata accessor for String.Encoding();
  uint64_t v46 = *(void *)(v5 - 8);
  uint64_t v47 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v8 = v2[2];
  unint64_t v9 = v2[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1A38F5A70;
  *(unsigned char *)(v10 + 32) = a2;
  outlined copy of Data._Representation(v8, v9);
  uint64_t v11 = specialized Data.init<A>(_:)(v10);
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();
  unint64_t v14 = v2[3];
  uint64_t v15 = v2[2];
  uint64_t v16 = 0;
  switch(v14 >> 62)
  {
    case 1uLL:
      BOOL v17 = __OFSUB__(HIDWORD(v15), v15);
      int v18 = HIDWORD(v15) - v15;
      if (v17) {
        goto LABEL_26;
      }
      uint64_t v16 = v18;
LABEL_6:
      if (v16 < v2[4])
      {
        __break(1u);
        goto LABEL_24;
      }
      v45[1] = v3;
      uint64_t v22 = Data.range(of:options:in:)();
      char v24 = v23;
      outlined consume of Data._Representation(v11, v13);
      outlined consume of Data._Representation(v8, v9);
      if (v24)
      {
        uint64_t v32 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v34 = v33;
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v32 - 8) + 104))(v34, *MEMORY[0x1E4FBBA78], v32);
        swift_willThrow();
        return v7;
      }
      uint64_t v25 = v2[4];
      if (v22 < v25)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      swift_beginAccess();
      uint64_t v26 = specialized Data.subscript.getter(v25, v22, v2[2], v2[3]);
      unint64_t v28 = v27;
      swift_endAccess();
      uint64_t v48 = v26;
      unint64_t v49 = v28;
      (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v7, v50, v47);
      lazy protocol witness table accessor for type Data and conformance Data();
      uint64_t v29 = String.init<A>(bytes:encoding:)();
      if (v30)
      {
        uint64_t v7 = (char *)v29;
        switch(v28 >> 62)
        {
          case 1uLL:
            outlined consume of Data._Representation(v26, v28);
            LODWORD(v31) = HIDWORD(v26) - v26;
            if (__OFSUB__(HIDWORD(v26), v26)) {
              goto LABEL_28;
            }
            uint64_t v31 = (int)v31;
            break;
          case 2uLL:
            uint64_t v41 = *(void *)(v26 + 16);
            uint64_t v40 = *(void *)(v26 + 24);
            outlined consume of Data._Representation(v26, v28);
            uint64_t v31 = v40 - v41;
            if (!__OFSUB__(v40, v41)) {
              break;
            }
            __break(1u);
LABEL_19:
            outlined consume of Data._Representation(v26, v28);
            uint64_t v31 = 0;
            break;
          case 3uLL:
            goto LABEL_19;
          default:
            outlined consume of Data._Representation(v26, v28);
            uint64_t v31 = BYTE6(v28);
            break;
        }
        uint64_t v42 = v2[4];
        BOOL v17 = __OFADD__(v42, v31);
        uint64_t v43 = v42 + v31;
        if (!v17)
        {
          v2[4] = v43;
          return v7;
        }
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        JUMPOUT(0x1A3854004);
      }
      uint64_t v7 = (char *)type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v36 = v35;
      uint64_t v48 = 0;
      unint64_t v49 = 0xE000000000000000;
      _StringGuts.grow(_:)(51);
      v37._object = (void *)0x80000001A3901F50;
      v37._countAndFlagsBits = 0xD000000000000027;
      String.append(_:)(v37);
      lazy protocol witness table accessor for type String.Encoding and conformance String.Encoding();
      v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      v39._countAndFlagsBits = 0x6E69646F636E6520;
      v39._object = (void *)0xEA00000000002E67;
      String.append(_:)(v39);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, char *))(*((void *)v7 - 1) + 104))(v36, *MEMORY[0x1E4FBBA78], v7);
      swift_willThrow();
      outlined consume of Data._Representation(v26, v28);
      return v7;
    case 2uLL:
      uint64_t v21 = v15 + 16;
      uint64_t v19 = *(void *)(v15 + 16);
      uint64_t v20 = *(void *)(v21 + 8);
      uint64_t v16 = v20 - v19;
      if (!__OFSUB__(v20, v19)) {
        goto LABEL_6;
      }
      goto LABEL_27;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v16 = BYTE6(v14);
      goto LABEL_6;
  }
}

uint64_t specialized Data.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)a3;
      uint64_t v4 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a3 + 16);
      uint64_t v4 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v4 = BYTE6(a4);
      break;
  }
  if (v5 > a2)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v4 <= a2)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a2 + 1 < a1)
  {
LABEL_11:
    __break(1u);
    JUMPOUT(0x1A3854098);
  }
  return Data._Representation.subscript.getter();
}

uint64_t BinaryDecoder.decode(_:length:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = v1[4];
  uint64_t v4 = v3 + a1;
  if (__OFADD__(v3, a1))
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  swift_beginAccess();
  uint64_t v6 = v2[2];
  unint64_t v7 = v2[3];
  uint64_t v8 = 0;
  switch(v7 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(v6) - v6;
      if (__OFSUB__(HIDWORD(v6), v6)) {
        goto LABEL_24;
      }
      uint64_t v8 = (int)v8;
LABEL_7:
      BOOL v11 = __OFSUB__(v8, v3);
      uint64_t v12 = v8 - v3;
      if (v11) {
        goto LABEL_20;
      }
      if (v12 >= a1)
      {
        uint64_t v20 = v2[4];
        BOOL v11 = __OFADD__(v20, a1);
        uint64_t v21 = v20 + a1;
        if (!v11)
        {
          v2[4] = v21;
          if (v4 >= v3) {
            return Data._Representation.subscript.getter();
          }
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
LABEL_24:
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
          JUMPOUT(0x1A3854384);
        }
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      uint64_t v13 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v15 = v14;
      _StringGuts.grow(_:)(100);
      v16._countAndFlagsBits = 0xD000000000000038;
      v16._object = (void *)0x80000001A3901F80;
      String.append(_:)(v16);
      uint64_t v17 = v2[2];
      unint64_t v18 = v2[3];
      uint64_t v19 = 0;
      switch(v18 >> 62)
      {
        case 1uLL:
          LODWORD(v19) = HIDWORD(v17) - v17;
          if (__OFSUB__(HIDWORD(v17), v17)) {
            goto LABEL_26;
          }
          uint64_t v19 = (int)v19;
LABEL_17:
          if (__OFSUB__(v19, v2[4])) {
            goto LABEL_23;
          }
          v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v26);
          swift_bridgeObjectRelease();
          v27._object = (void *)0x80000001A3901EB0;
          v27._countAndFlagsBits = 0xD000000000000021;
          String.append(_:)(v27);
          v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v28);
          swift_bridgeObjectRelease();
          v29._countAndFlagsBits = 0x2E736574796220;
          v29._object = (void *)0xE700000000000000;
          String.append(_:)(v29);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v13 - 8) + 104))(v15, *MEMORY[0x1E4FBBA78], v13);
          uint64_t result = swift_willThrow();
          break;
        case 2uLL:
          uint64_t v25 = v17 + 16;
          uint64_t v24 = *(void *)(v17 + 16);
          uint64_t v23 = *(void *)(v25 + 8);
          BOOL v11 = __OFSUB__(v23, v24);
          uint64_t v19 = v23 - v24;
          if (!v11) {
            goto LABEL_17;
          }
          goto LABEL_27;
        case 3uLL:
          goto LABEL_17;
        default:
          uint64_t v19 = BYTE6(v18);
          goto LABEL_17;
      }
      return result;
    case 2uLL:
      uint64_t v10 = *(void *)(v6 + 16);
      uint64_t v9 = *(void *)(v6 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_7;
      }
      goto LABEL_25;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v8 = BYTE6(v7);
      goto LABEL_7;
  }
}

uint64_t BinaryDecoder.decodeRemainder()()
{
  uint64_t v1 = v0[4];
  swift_beginAccess();
  uint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  unint64_t v4 = v3 >> 62;
  switch(v3 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(v2) - v2;
      if (__OFSUB__(HIDWORD(v2), v2)) {
        goto LABEL_23;
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v1 >= v5) {
        return 0;
      }
      if (v4)
      {
        if (v4 == 1)
        {
          uint64_t v9 = (int)v2;
          uint64_t v10 = v2 >> 32;
        }
        else
        {
          uint64_t v9 = *(void *)(v2 + 16);
          uint64_t v10 = *(void *)(v2 + 24);
        }
      }
      else
      {
        uint64_t v9 = 0;
        uint64_t v10 = BYTE6(v3);
      }
LABEL_16:
      if (v10 < v1 || v10 < v9)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        JUMPOUT(0x1A38544B4);
      }
      return Data._Representation.subscript.getter();
    case 2uLL:
      uint64_t v7 = *(void *)(v2 + 16);
      uint64_t v6 = *(void *)(v2 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_24;
    case 3uLL:
      uint64_t v10 = 0;
      if ((v1 & 0x8000000000000000) == 0) {
        return v10;
      }
      uint64_t v9 = 0;
      goto LABEL_16;
    default:
      uint64_t v5 = BYTE6(v3);
      goto LABEL_6;
  }
}

uint64_t BinaryDecoder.deinit()
{
  outlined consume of Data._Representation(*(void *)(v0 + 16), *(void *)(v0 + 24));
  return v0;
}

uint64_t BinaryDecoder.__deallocating_deinit()
{
  outlined consume of Data._Representation(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return swift_deallocClassInstance();
}

uint64_t BinaryDecoder.decode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 8);
  uint64_t v6 = swift_retain();
  return v5(v6, a2, a3);
}

uint64_t BinaryDecoder.decode<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v20[0] = a3;
  v20[1] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v6 = (char *)v20 - v5;
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v20 - v9;
  uint64_t v11 = v20[5];
  uint64_t result = BinaryDecoder.decode<A>(_:)(AssociatedTypeWitness, (uint64_t)v6);
  if (!v11)
  {
    dispatch thunk of RawRepresentable.init(rawValue:)();
    uint64_t v13 = *(void *)(a2 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, a2) == 1)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      uint64_t v14 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v16 = v15;
      void v20[2] = 0;
      v20[3] = 0xE000000000000000;
      _StringGuts.grow(_:)(81);
      v17._countAndFlagsBits = 0xD000000000000034;
      v17._object = (void *)0x80000001A3901FC0;
      String.append(_:)(v17);
      v18._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19._object = (void *)0x80000001A3902000;
      v19._countAndFlagsBits = 0xD00000000000001BLL;
      String.append(_:)(v19);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, *MEMORY[0x1E4FBBA78], v14);
      return swift_willThrow();
    }
    else
    {
      return (*(uint64_t (**)(void, char *, uint64_t))(v13 + 32))(v20[0], v10, a2);
    }
  }
  return result;
}

uint64_t BinaryDecoder.decode<A>(_:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t result = BinaryDecoder.decode<A>(_:)(v2, (uint64_t)&v5 - v3);
  if (!v0) {
    return dispatch thunk of OptionSet.init(rawValue:)();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.Encoding and conformance String.Encoding()
{
  unint64_t result = lazy protocol witness table cache variable for type String.Encoding and conformance String.Encoding;
  if (!lazy protocol witness table cache variable for type String.Encoding and conformance String.Encoding)
  {
    type metadata accessor for String.Encoding();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.Encoding and conformance String.Encoding);
  }
  return result;
}

uint64_t type metadata accessor for BinaryDecoder()
{
  return self;
}

uint64_t method lookup function for BinaryDecoder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for BinaryDecoder);
}

uint64_t SystemCoordinator.ParticipantState.isSpatial.getter()
{
  return *v0;
}

uint64_t SystemCoordinator.ParticipantState.seat.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of URL?(v1 + 16, a1, &demangling cache variable for type metadata for SystemCoordinator.ParticipantState.Seat?);
}

uint64_t SystemCoordinator.ParticipantState.role.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of URL?(v1 + 120, a1, &demangling cache variable for type metadata for SpatialTemplateRole?);
}

uint64_t SystemCoordinator.ParticipantState.init(isSpatial:seat:role:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  *a4 = a1;
  uint64_t v5 = (uint64_t)(a4 + 120);
  outlined init with take of Date?(a2, (uint64_t)(a4 + 16), &demangling cache variable for type metadata for SystemCoordinator.ParticipantState.Seat?);
  return outlined init with take of Date?(a3, v5, &demangling cache variable for type metadata for SpatialTemplateRole?);
}

__n128 SystemCoordinator.ParticipantState.Seat.pose.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)v1;
  long long v3 = *(_OWORD *)(v1 + 16);
  long long v4 = *(_OWORD *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t v6 = *(void *)(v1 + 56);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 32) = v4;
  return result;
}

uint64_t SystemCoordinator.ParticipantState.Seat.role.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of URL?(v1 + 64, a1, &demangling cache variable for type metadata for SpatialTemplateRole?);
}

uint64_t SystemCoordinator.ParticipantState.Seat.hash(into:)()
{
  long long v1 = v0[1];
  long long v12 = *v0;
  long long v13 = v1;
  long long v2 = v0[3];
  long long v14 = v0[2];
  long long v15 = v2;
  SPPose3D.hash(into:)();
  outlined init with copy of URL?((uint64_t)(v0 + 4), (uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((void *)&v8 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v7, (uint64_t)v10);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v10, 0, sizeof(v10));
    uint64_t v11 = 0;
  }
  outlined init with copy of URL?((uint64_t)v10, (uint64_t)&v7, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((void *)&v8 + 1))
  {
    long long v4 = v7;
    long long v5 = v8;
    uint64_t v6 = v9;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v4, *((uint64_t *)&v5 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v10, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
}

Swift::Int SystemCoordinator.ParticipantState.Seat.hashValue.getter()
{
  Hasher.init(_seed:)();
  long long v1 = v0[1];
  long long v12 = *v0;
  long long v13 = v1;
  long long v2 = v0[3];
  long long v14 = v0[2];
  long long v15 = v2;
  SPPose3D.hash(into:)();
  outlined init with copy of URL?((uint64_t)(v0 + 4), (uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((void *)&v8 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v7, (uint64_t)v10);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v10, 0, sizeof(v10));
    uint64_t v11 = 0;
  }
  outlined init with copy of URL?((uint64_t)v10, (uint64_t)&v7, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((void *)&v8 + 1))
  {
    long long v4 = v7;
    long long v5 = v8;
    uint64_t v6 = v9;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v4, *((uint64_t *)&v5 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v10, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  return Hasher._finalize()();
}

uint64_t SystemCoordinator.ParticipantState.Seat.init(pose:role:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  long long v3 = a1[1];
  *a3 = *a1;
  a3[1] = v3;
  long long v4 = a1[3];
  a3[2] = a1[2];
  a3[3] = v4;
  return outlined init with take of Date?(a2, (uint64_t)(a3 + 4), &demangling cache variable for type metadata for SpatialTemplateRole?);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SystemCoordinator.ParticipantState.Seat()
{
  long long v1 = v0[1];
  long long v12 = *v0;
  long long v13 = v1;
  long long v2 = v0[3];
  long long v14 = v0[2];
  long long v15 = v2;
  SPPose3D.hash(into:)();
  outlined init with copy of URL?((uint64_t)(v0 + 4), (uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((void *)&v8 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v7, (uint64_t)v10);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v10, 0, sizeof(v10));
    uint64_t v11 = 0;
  }
  outlined init with copy of URL?((uint64_t)v10, (uint64_t)&v7, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((void *)&v8 + 1))
  {
    long long v4 = v7;
    long long v5 = v8;
    uint64_t v6 = v9;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v4, *((uint64_t *)&v5 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v10, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SystemCoordinator.ParticipantState.Seat()
{
  Hasher.init(_seed:)();
  long long v1 = v0[1];
  long long v12 = *v0;
  long long v13 = v1;
  long long v2 = v0[3];
  long long v14 = v0[2];
  long long v15 = v2;
  SPPose3D.hash(into:)();
  outlined init with copy of URL?((uint64_t)(v0 + 4), (uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((void *)&v8 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v7, (uint64_t)v10);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v10, 0, sizeof(v10));
    uint64_t v11 = 0;
  }
  outlined init with copy of URL?((uint64_t)v10, (uint64_t)&v7, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((void *)&v8 + 1))
  {
    long long v4 = v7;
    long long v5 = v8;
    uint64_t v6 = v9;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v4, *((uint64_t *)&v5 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v10, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  return Hasher._finalize()();
}

uint64_t SystemCoordinator.ParticipantState.init(_:spatialTemplatePreference:)@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  long long v3 = a1;
  uint64_t v5 = *a2;
  int v6 = *((unsigned __int8 *)a2 + 8);
  int v41 = *((unsigned __int8 *)a2 + 9);
  *(unsigned char *)a3 = a1[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial];
  (*(void (**)(long long *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *(void *)a1) + 0x70))(&v45);
  uint64_t v7 = v52;
  if (v52 == 1)
  {
    long long v45 = 0u;
    long long v46 = 0u;
    uint64_t v47 = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(void *)(a3 + 96) = 0;
    *(_OWORD *)(a3 + 104) = xmmword_1A38F7C50;
    goto LABEL_11;
  }
  Swift::String v38 = v3;
  int v39 = v6;
  uint64_t v40 = v5;
  uint64_t v37 = v45;
  uint64_t v8 = v46;
  uint64_t v36 = *((void *)&v45 + 1);
  uint64_t v9 = *((void *)&v46 + 1);
  uint64_t v10 = v47;
  uint64_t v11 = v48;
  uint64_t v12 = v49;
  uint64_t v13 = v50;
  uint64_t v14 = v51;
  uint64_t v15 = v53;
  if (v52)
  {
    swift_bridgeObjectRetain();
    role #1 (for:inSeatNumber:) in SystemCoordinator.ParticipantState.init(_:spatialTemplatePreference:)(v14, v7, &v42);
    uint64_t v16 = v7;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v44 = 0;
    long long v42 = 0u;
    long long v43 = 0u;
  }
  uint64_t v34 = v15;
  uint64_t v35 = v14;
  uint64_t v33 = v14;
  uint64_t v17 = v37;
  uint64_t v18 = v36;
  outlined consume of SystemCoordinatorState.ParticipantState.Seat?(v37, v36, v8, v9, v10, v11, v12, v13, v33, v16);
  outlined init with take of Date?((uint64_t)&v42, (uint64_t)&v45, &demangling cache variable for type metadata for SpatialTemplateRole?);
  outlined consume of SystemCoordinatorState.ParticipantState.Seat?(v37, v36, v8, v9, v10, v11, v12, v13, v35, v7);
  outlined init with copy of URL?((uint64_t)&v45, a3 + 80, &demangling cache variable for type metadata for SpatialTemplateRole?);
  *(void *)(a3 + 32) = v8;
  *(void *)(a3 + 40) = v9;
  *(void *)(a3 + 16) = v17;
  *(void *)(a3 + 24) = v18;
  *(void *)(a3 + 64) = v12;
  *(void *)(a3 + 72) = v13;
  *(void *)(a3 + 48) = v10;
  *(void *)(a3 + 56) = v11;
  uint64_t v19 = *((void *)&v46 + 1);
  long long v3 = v38;
  if (!*((void *)&v46 + 1))
  {
LABEL_11:
    if (!*(void *)&v3[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier + 8]) {
      goto LABEL_12;
    }
    goto LABEL_16;
  }
  uint64_t v20 = v47;
  uint64_t v21 = __swift_project_boxed_opaque_existential_1(&v45, *((uint64_t *)&v46 + 1));
  uint64_t v22 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v34 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v22 + 16))(v24);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 16))(v19, v20);
  uint64_t v27 = v26;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v19);
  uint64_t v28 = *(void *)&v3[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier + 8];
  if (v28)
  {
    if (v25 == *(void *)&v3[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier] && v28 == v27)
    {

      swift_bridgeObjectRelease();
LABEL_13:
      outlined init with copy of URL?((uint64_t)&v45, a3 + 120, &demangling cache variable for type metadata for SpatialTemplateRole?);
      return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v45, &demangling cache variable for type metadata for SpatialTemplateRole?);
    }
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v29)
    {
LABEL_12:

      goto LABEL_13;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
LABEL_16:
  uint64_t v30 = *(void *)&v3[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier + 8];
  if (v30)
  {
    uint64_t v31 = *(void *)&v3[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier];
    swift_bridgeObjectRetain();
    role #1 (for:inSeatNumber:) in SystemCoordinator.ParticipantState.init(_:spatialTemplatePreference:)(v31, v30, &v42);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v44 = 0;
    long long v42 = 0u;
    long long v43 = 0u;
  }

  outlined init with take of Date?((uint64_t)&v42, a3 + 120, &demangling cache variable for type metadata for SpatialTemplateRole?);
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v45, &demangling cache variable for type metadata for SpatialTemplateRole?);
}

uint64_t role #1 (for:inSeatNumber:) in SystemCoordinator.ParticipantState.init(_:spatialTemplatePreference:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (one-time initialization token for systemCoordinator != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.systemCoordinator);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v12 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x80000001A3902060, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1A375F000, v7, v8, "%s: The provided role identifier does not match a role in the current template.", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v10, -1, -1);
    MEMORY[0x1A624F870](v9, -1, -1);
  }

  a3[3] = &type metadata for GenericSpatialTemplateRole;
  a3[4] = lazy protocol witness table accessor for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole();
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain();
}

uint64_t GenericSpatialTemplateRole.roleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t GenericSpatialTemplateRole.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t static GenericSpatialTemplateRole.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

Swift::Int GenericSpatialTemplateRole.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for SpatialTemplateRole.roleIdentifier.getter in conformance GenericSpatialTemplateRole()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SystemCoordinator.ParticipantStates.base.getter@<X0>(uint64_t a1@<X8>)
{
  return SystemCoordinator.ParticipantStates.base.getter(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>, a1);
}

uint64_t SystemCoordinator.ParticipantStates.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = Publisher.eraseToAnyPublisher()();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<SystemCoordinator.ParticipantState, Never>);
  unint64_t v11 = lazy protocol witness table accessor for type AnyPublisher<SystemCoordinator.ParticipantState, Never> and conformance AnyPublisher<A, B>();
  MEMORY[0x1A624DA40](&v14, v10, v11);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v9, v6);
}

uint64_t SystemCoordinator.ParticipantStates.makeAsyncIterator()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>);

  return AsyncPublisher.makeAsyncIterator()();
}

uint64_t SystemCoordinator.ParticipantStates.Iterator.init(baseIterator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t SystemCoordinator.ParticipantStates.Iterator.baseIterator.getter@<X0>(uint64_t a1@<X8>)
{
  return SystemCoordinator.ParticipantStates.base.getter(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator, a1);
}

uint64_t SystemCoordinator.ParticipantStates.base.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, v2, v4);
}

uint64_t SystemCoordinator.ParticipantStates.Iterator.baseIterator.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*SystemCoordinator.ParticipantStates.Iterator.baseIterator.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t SystemCoordinator.ParticipantStates.Iterator.next()(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
  void *v3 = v1;
  v3[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return MEMORY[0x1F40D6998](a1, v4);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance SystemCoordinator.ParticipantStates.Iterator(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
  void *v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return MEMORY[0x1F40D6998](a1, v4);
}

uint64_t _s15GroupActivities17SystemCoordinatorC17ParticipantStatesV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
  void *v3 = v1;
  v3[1] = _s15GroupActivities17SystemCoordinatorC17ParticipantStatesV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return MEMORY[0x1F40D6998](a1, v4);
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance SystemCoordinator.ParticipantStates()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>);
  AsyncPublisher.makeAsyncIterator()();

  return outlined destroy of SystemCoordinator.ParticipantStates(v0);
}

uint64_t specialized static SystemCoordinator.ParticipantState.Seat.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v5 = *(_OWORD *)(a1 + 32);
  double v6 = *(double *)(a1 + 48);
  double v7 = *(double *)(a1 + 56);
  long long v8 = *(_OWORD *)a2;
  long long v9 = *(_OWORD *)(a2 + 16);
  long long v10 = *(_OWORD *)(a2 + 32);
  double v11 = *(double *)(a2 + 48);
  double v12 = *(double *)(a2 + 56);
  *(_OWORD *)&v31.position.x = *(_OWORD *)a1;
  *(_OWORD *)&v31.position.vector.f64[2] = v4;
  v31.rotation.vector.f64[2] = v6;
  v31.rotation.vector.f64[3] = v7;
  *(_OWORD *)v31.rotation.vector.f64 = v5;
  *(_OWORD *)&v29.position.x = v8;
  *(_OWORD *)&v29.position.vector.f64[2] = v9;
  v29.rotation.vector.f64[2] = v11;
  v29.rotation.vector.f64[3] = v12;
  *(_OWORD *)v29.rotation.vector.f64 = v10;
  int v13 = SPPose3DEqualToPose(&v31, &v29);
  outlined init with copy of SystemCoordinator.ParticipantState.Seat((long long *)a1, (uint64_t)&v31);
  outlined init with copy of SystemCoordinator.ParticipantState.Seat((long long *)a2, (uint64_t)&v29);
  if (v13)
  {
    outlined init with copy of URL?((uint64_t)&v32, (uint64_t)&v20, &demangling cache variable for type metadata for SpatialTemplateRole?);
    if (v21)
    {
      outlined init with take of TypedPayloadDecoding(&v20, (uint64_t)v27);
    }
    else
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v20, &demangling cache variable for type metadata for SpatialTemplateRole?);
      memset(v27, 0, sizeof(v27));
      uint64_t v28 = 0;
    }
    outlined init with copy of URL?((uint64_t)&v30, (uint64_t)&v20, &demangling cache variable for type metadata for SpatialTemplateRole?);
    if (v21)
    {
      outlined init with take of TypedPayloadDecoding(&v20, (uint64_t)v25);
    }
    else
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v20, &demangling cache variable for type metadata for SpatialTemplateRole?);
      memset(v25, 0, sizeof(v25));
      uint64_t v26 = 0;
    }
    outlined init with copy of URL?((uint64_t)v27, (uint64_t)&v20, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    outlined init with copy of URL?((uint64_t)v25, (uint64_t)&v22, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    if (v21)
    {
      outlined init with copy of URL?((uint64_t)&v20, (uint64_t)v19, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      if (*((void *)&v23 + 1))
      {
        v17[0] = v22;
        v17[1] = v23;
        uint64_t v18 = v24;
        char v14 = specialized static AnySpatialTemplateRole.== infix(_:_:)((uint64_t)v19, (uint64_t)v17);
        outlined destroy of AnySpatialTemplateRole((uint64_t)v17);
        uint64_t v15 = &demangling cache variable for type metadata for AnySpatialTemplateRole?;
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v25, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v27, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
        outlined destroy of SystemCoordinator.ParticipantState.Seat((uint64_t)&v29);
        outlined destroy of SystemCoordinator.ParticipantState.Seat((uint64_t)&v31);
        outlined destroy of AnySpatialTemplateRole((uint64_t)v19);
      }
      else
      {
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v25, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
        outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v27, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
        outlined destroy of SystemCoordinator.ParticipantState.Seat((uint64_t)&v29);
        outlined destroy of SystemCoordinator.ParticipantState.Seat((uint64_t)&v31);
        outlined destroy of AnySpatialTemplateRole((uint64_t)v19);
        char v14 = 0;
        uint64_t v15 = (uint64_t *)&demangling cache variable for type metadata for (AnySpatialTemplateRole?, AnySpatialTemplateRole?);
      }
    }
    else
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v25, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v27, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      outlined destroy of SystemCoordinator.ParticipantState.Seat((uint64_t)&v29);
      outlined destroy of SystemCoordinator.ParticipantState.Seat((uint64_t)&v31);
      if (*((void *)&v23 + 1)) {
        uint64_t v15 = (uint64_t *)&demangling cache variable for type metadata for (AnySpatialTemplateRole?, AnySpatialTemplateRole?);
      }
      else {
        uint64_t v15 = &demangling cache variable for type metadata for AnySpatialTemplateRole?;
      }
      if (*((void *)&v23 + 1)) {
        char v14 = 0;
      }
      else {
        char v14 = -1;
      }
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v20, v15);
  }
  else
  {
    outlined destroy of SystemCoordinator.ParticipantState.Seat((uint64_t)&v29);
    outlined destroy of SystemCoordinator.ParticipantState.Seat((uint64_t)&v31);
    char v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static SystemCoordinator.ParticipantState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v4 = *a1;
  int v5 = *a2;
  outlined init with copy of SystemCoordinator.ParticipantState((uint64_t)a1, (uint64_t)v34);
  outlined init with copy of SystemCoordinator.ParticipantState((uint64_t)a2, (uint64_t)v32);
  if (v4 != v5)
  {
    outlined destroy of SystemCoordinator.ParticipantState((uint64_t)v32);
    outlined destroy of SystemCoordinator.ParticipantState((uint64_t)v34);
LABEL_20:
    outlined init with copy of SystemCoordinator.ParticipantState((uint64_t)a1, (uint64_t)&v29);
    outlined init with copy of SystemCoordinator.ParticipantState((uint64_t)a2, (uint64_t)&v26);
LABEL_21:
    outlined destroy of SystemCoordinator.ParticipantState((uint64_t)&v26);
    outlined destroy of SystemCoordinator.ParticipantState((uint64_t)&v29);
LABEL_22:
    char v7 = 0;
    return v7 & 1;
  }
  outlined init with copy of URL?((uint64_t)&v35, (uint64_t)&v17, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (v18)
  {
    outlined init with take of TypedPayloadDecoding(&v17, (uint64_t)&v29);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v17, &demangling cache variable for type metadata for SpatialTemplateRole?);
    long long v29 = 0u;
    long long v30 = 0u;
    uint64_t v31 = 0;
  }
  outlined init with copy of URL?((uint64_t)&v33, (uint64_t)&v17, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (v18)
  {
    outlined init with take of TypedPayloadDecoding(&v17, (uint64_t)&v26);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v17, &demangling cache variable for type metadata for SpatialTemplateRole?);
    long long v26 = 0u;
    long long v27 = 0u;
    uint64_t v28 = 0;
  }
  outlined init with copy of URL?((uint64_t)&v29, (uint64_t)&v17, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  outlined init with copy of URL?((uint64_t)&v26, (uint64_t)&v19, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (!v18)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v26, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v29, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    outlined destroy of SystemCoordinator.ParticipantState((uint64_t)v32);
    outlined destroy of SystemCoordinator.ParticipantState((uint64_t)v34);
    if (!*((void *)&v20 + 1))
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v17, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      outlined init with copy of SystemCoordinator.ParticipantState((uint64_t)a1, (uint64_t)&v29);
      outlined init with copy of SystemCoordinator.ParticipantState((uint64_t)a2, (uint64_t)&v26);
      goto LABEL_15;
    }
LABEL_19:
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v17, &demangling cache variable for type metadata for (AnySpatialTemplateRole?, AnySpatialTemplateRole?));
    goto LABEL_20;
  }
  outlined init with copy of URL?((uint64_t)&v17, (uint64_t)v16, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (!*((void *)&v20 + 1))
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v26, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v29, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    outlined destroy of SystemCoordinator.ParticipantState((uint64_t)v32);
    outlined destroy of SystemCoordinator.ParticipantState((uint64_t)v34);
    outlined destroy of AnySpatialTemplateRole((uint64_t)v16);
    goto LABEL_19;
  }
  long long v9 = v19;
  long long v10 = v20;
  *(void *)&long long v11 = v21;
  char v6 = specialized static AnySpatialTemplateRole.== infix(_:_:)((uint64_t)v16, (uint64_t)&v9);
  outlined destroy of AnySpatialTemplateRole((uint64_t)&v9);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v26, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v29, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  outlined destroy of SystemCoordinator.ParticipantState((uint64_t)v32);
  outlined destroy of SystemCoordinator.ParticipantState((uint64_t)v34);
  outlined destroy of AnySpatialTemplateRole((uint64_t)v16);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v17, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  outlined init with copy of SystemCoordinator.ParticipantState((uint64_t)a1, (uint64_t)&v29);
  outlined init with copy of SystemCoordinator.ParticipantState((uint64_t)a2, (uint64_t)&v26);
  if ((v6 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_15:
  outlined init with copy of URL?((uint64_t)&v30, (uint64_t)&v17, &demangling cache variable for type metadata for SystemCoordinator.ParticipantState.Seat?);
  outlined init with copy of URL?((uint64_t)&v27, (uint64_t)v23, &demangling cache variable for type metadata for SystemCoordinator.ParticipantState.Seat?);
  if (v22 != 1)
  {
    outlined init with copy of URL?((uint64_t)&v17, (uint64_t)v16, &demangling cache variable for type metadata for SystemCoordinator.ParticipantState.Seat?);
    if (*((void *)&v24 + 1) != 1)
    {
      long long v13 = v23[4];
      long long v14 = v24;
      uint64_t v15 = v25;
      long long v9 = v23[0];
      long long v10 = v23[1];
      long long v11 = v23[2];
      long long v12 = v23[3];
      char v7 = specialized static SystemCoordinator.ParticipantState.Seat.== infix(_:_:)((uint64_t)v16, (uint64_t)&v9);
      outlined destroy of SystemCoordinator.ParticipantState.Seat((uint64_t)&v9);
      outlined destroy of SystemCoordinator.ParticipantState((uint64_t)&v26);
      outlined destroy of SystemCoordinator.ParticipantState((uint64_t)&v29);
      outlined destroy of SystemCoordinator.ParticipantState.Seat((uint64_t)v16);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v17, &demangling cache variable for type metadata for SystemCoordinator.ParticipantState.Seat?);
      return v7 & 1;
    }
    outlined destroy of SystemCoordinator.ParticipantState((uint64_t)&v26);
    outlined destroy of SystemCoordinator.ParticipantState((uint64_t)&v29);
    outlined destroy of SystemCoordinator.ParticipantState.Seat((uint64_t)v16);
    goto LABEL_26;
  }
  outlined destroy of SystemCoordinator.ParticipantState((uint64_t)&v26);
  outlined destroy of SystemCoordinator.ParticipantState((uint64_t)&v29);
  if (*((void *)&v24 + 1) != 1)
  {
LABEL_26:
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v17, &demangling cache variable for type metadata for (SystemCoordinator.ParticipantState.Seat?, SystemCoordinator.ParticipantState.Seat?));
    goto LABEL_22;
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v17, &demangling cache variable for type metadata for SystemCoordinator.ParticipantState.Seat?);
  char v7 = 1;
  return v7 & 1;
}

uint64_t outlined consume of SystemCoordinatorState.ParticipantState.Seat?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = a10;
  if (a10 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyPublisher<SystemCoordinator.ParticipantState, Never> and conformance AnyPublisher<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyPublisher<SystemCoordinator.ParticipantState, Never> and conformance AnyPublisher<A, B>;
  if (!lazy protocol witness table cache variable for type AnyPublisher<SystemCoordinator.ParticipantState, Never> and conformance AnyPublisher<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyPublisher<SystemCoordinator.ParticipantState, Never>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<SystemCoordinator.ParticipantState, Never> and conformance AnyPublisher<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemCoordinator.ParticipantState.Seat and conformance SystemCoordinator.ParticipantState.Seat()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemCoordinator.ParticipantState.Seat and conformance SystemCoordinator.ParticipantState.Seat;
  if (!lazy protocol witness table cache variable for type SystemCoordinator.ParticipantState.Seat and conformance SystemCoordinator.ParticipantState.Seat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinator.ParticipantState.Seat and conformance SystemCoordinator.ParticipantState.Seat);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for GenericSpatialTemplateRole(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole()
{
  unint64_t result = lazy protocol witness table cache variable for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole;
  if (!lazy protocol witness table cache variable for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole;
  if (!lazy protocol witness table cache variable for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole;
  if (!lazy protocol witness table cache variable for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenericSpatialTemplateRole and conformance GenericSpatialTemplateRole);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemCoordinator.ParticipantStates.Iterator and conformance SystemCoordinator.ParticipantStates.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemCoordinator.ParticipantStates.Iterator and conformance SystemCoordinator.ParticipantStates.Iterator;
  if (!lazy protocol witness table cache variable for type SystemCoordinator.ParticipantStates.Iterator and conformance SystemCoordinator.ParticipantStates.Iterator)
  {
    type metadata accessor for SystemCoordinator.ParticipantStates.Iterator(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinator.ParticipantStates.Iterator and conformance SystemCoordinator.ParticipantStates.Iterator);
  }
  return result;
}

uint64_t type metadata accessor for SystemCoordinator.ParticipantStates.Iterator(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for SystemCoordinator.ParticipantStates.Iterator);
}

uint64_t destroy for SystemCoordinator.ParticipantState(uint64_t result)
{
  uint64_t v1 = result;
  if (*(void *)(result + 104) >= 2uLL) {
    unint64_t result = __swift_destroy_boxed_opaque_existential_1Tm(result + 80);
  }
  if (*(void *)(v1 + 144))
  {
    return __swift_destroy_boxed_opaque_existential_1Tm(v1 + 120);
  }
  return result;
}

uint64_t initializeWithCopy for SystemCoordinator.ParticipantState(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  int v4 = (_OWORD *)(a1 + 16);
  int v5 = (_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 104);
  if (v6 == 1)
  {
    long long v7 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v7;
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    long long v8 = *(_OWORD *)(a2 + 32);
    _OWORD *v4 = *v5;
    *(_OWORD *)(a1 + 32) = v8;
    long long v9 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v9;
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 32);
    _OWORD *v4 = *v5;
    *(_OWORD *)(a1 + 32) = v10;
    long long v11 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v11;
    long long v12 = (_OWORD *)(a1 + 80);
    long long v13 = (_OWORD *)(a2 + 80);
    if (v6)
    {
      uint64_t v14 = *(void *)(a2 + 112);
      *(void *)(a1 + 104) = v6;
      *(void *)(a1 + 112) = v14;
      (**(void (***)(_OWORD *, _OWORD *))(v6 - 8))(v12, v13);
    }
    else
    {
      long long v15 = *(_OWORD *)(a2 + 96);
      *long long v12 = *v13;
      *(_OWORD *)(a1 + 96) = v15;
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
    }
  }
  uint64_t v16 = (_OWORD *)(a1 + 120);
  long long v17 = (_OWORD *)(a2 + 120);
  uint64_t v18 = *(void *)(a2 + 144);
  if (v18)
  {
    uint64_t v19 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = v18;
    *(void *)(a1 + 152) = v19;
    (**(void (***)(_OWORD *, _OWORD *))(v18 - 8))(v16, v17);
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 136);
    *uint64_t v16 = *v17;
    *(_OWORD *)(a1 + 136) = v20;
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
  }
  return a1;
}

uint64_t assignWithCopy for SystemCoordinator.ParticipantState(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = a1 + 16;
  int v5 = (long long *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 104);
  uint64_t v7 = *(void *)(a2 + 104);
  if (v6 == 1)
  {
    if (v7 == 1)
    {
      long long v8 = *v5;
      long long v9 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v9;
      *(_OWORD *)uint64_t v4 = v8;
      long long v10 = *(_OWORD *)(a2 + 64);
      long long v11 = *(_OWORD *)(a2 + 80);
      long long v12 = *(_OWORD *)(a2 + 96);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(_OWORD *)(a1 + 80) = v11;
      *(_OWORD *)(a1 + 96) = v12;
      *(_OWORD *)(a1 + 64) = v10;
    }
    else
    {
      long long v18 = *v5;
      long long v19 = *(_OWORD *)(a2 + 32);
      long long v20 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v20;
      *(_OWORD *)uint64_t v4 = v18;
      *(_OWORD *)(a1 + 32) = v19;
      uint64_t v21 = (_OWORD *)(a1 + 80);
      uint64_t v22 = (long long *)(a2 + 80);
      uint64_t v23 = *(void *)(a2 + 104);
      if (v23)
      {
        *(void *)(a1 + 104) = v23;
        *(void *)(a1 + 112) = *(void *)(a2 + 112);
        (**(void (***)(_OWORD *, long long *))(v23 - 8))(v21, v22);
      }
      else
      {
        long long v33 = *v22;
        long long v34 = *(_OWORD *)(a2 + 96);
        *(void *)(a1 + 112) = *(void *)(a2 + 112);
        *uint64_t v21 = v33;
        *(_OWORD *)(a1 + 96) = v34;
      }
    }
  }
  else
  {
    if (v7 == 1)
    {
      outlined destroy of SystemCoordinator.ParticipantState.Seat(a1 + 16);
      long long v14 = v5[1];
      long long v13 = v5[2];
      *(_OWORD *)uint64_t v4 = *v5;
      *(_OWORD *)(v4 + 16) = v14;
      *(_OWORD *)(v4 + 32) = v13;
      long long v16 = v5[4];
      long long v15 = v5[5];
      long long v17 = v5[3];
      *(void *)(v4 + 96) = *((void *)v5 + 12);
      *(_OWORD *)(v4 + 64) = v16;
      *(_OWORD *)(v4 + 80) = v15;
      *(_OWORD *)(v4 + 48) = v17;
      goto LABEL_16;
    }
    uint64_t v24 = *(void *)(a2 + 16);
    uint64_t v25 = *(void *)(a2 + 24);
    uint64_t v26 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v26;
    *(void *)(a1 + 16) = v24;
    *(void *)(a1 + 24) = v25;
    uint64_t v28 = *(void *)(a2 + 48);
    uint64_t v27 = *(void *)(a2 + 56);
    uint64_t v29 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v29;
    *(void *)(a1 + 48) = v28;
    *(void *)(a1 + 56) = v27;
    long long v30 = (_OWORD *)(a1 + 80);
    uint64_t v31 = (long long *)(a2 + 80);
    uint64_t v32 = *(void *)(a2 + 104);
    if (v6)
    {
      if (v32)
      {
        __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 80), (uint64_t *)(a2 + 80));
        goto LABEL_16;
      }
      __swift_destroy_boxed_opaque_existential_1Tm(a1 + 80);
    }
    else if (v32)
    {
      *(void *)(a1 + 104) = v32;
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      (**(void (***)(uint64_t, uint64_t))(v32 - 8))(a1 + 80, a2 + 80);
      goto LABEL_16;
    }
    long long v35 = *v31;
    long long v36 = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *long long v30 = v35;
    *(_OWORD *)(a1 + 96) = v36;
  }
LABEL_16:
  uint64_t v37 = *(void *)(a2 + 144);
  if (!*(void *)(a1 + 144))
  {
    if (v37)
    {
      *(void *)(a1 + 144) = v37;
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      (**(void (***)(uint64_t, uint64_t))(v37 - 8))(a1 + 120, a2 + 120);
      return a1;
    }
LABEL_22:
    long long v38 = *(_OWORD *)(a2 + 120);
    long long v39 = *(_OWORD *)(a2 + 136);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(_OWORD *)(a1 + 120) = v38;
    *(_OWORD *)(a1 + 136) = v39;
    return a1;
  }
  if (!v37)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 120);
    goto LABEL_22;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 120), (uint64_t *)(a2 + 120));
  return a1;
}

uint64_t outlined destroy of SystemCoordinator.ParticipantState.Seat(uint64_t a1)
{
  if (*(void *)(a1 + 88)) {
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 64);
  }
  return a1;
}

__n128 __swift_memcpy160_16(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for SystemCoordinator.ParticipantState(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = a2 + 16;
  uint64_t v6 = *(void *)(a1 + 104);
  if (v6 == 1) {
    goto LABEL_4;
  }
  if (*(void *)(a2 + 104) == 1)
  {
    outlined destroy of SystemCoordinator.ParticipantState.Seat(a1 + 16);
LABEL_4:
    long long v7 = *(_OWORD *)(v5 + 80);
    *(_OWORD *)(v4 + 64) = *(_OWORD *)(v5 + 64);
    *(_OWORD *)(v4 + 80) = v7;
    *(void *)(v4 + 96) = *(void *)(v5 + 96);
    long long v8 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
    *(_OWORD *)(v4 + 16) = v8;
    long long v9 = *(_OWORD *)(v5 + 48);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)(v5 + 32);
    *(_OWORD *)(v4 + 48) = v9;
    goto LABEL_8;
  }
  long long v10 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v10;
  long long v11 = *(_OWORD *)(a2 + 48);
  uint64_t v12 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v12;
  *(_OWORD *)(a1 + 48) = v11;
  long long v13 = (_OWORD *)(a1 + 80);
  long long v14 = (_OWORD *)(a2 + 80);
  if (v6) {
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 80);
  }
  long long v15 = *(_OWORD *)(a2 + 96);
  *long long v13 = *v14;
  *(_OWORD *)(a1 + 96) = v15;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
LABEL_8:
  if (*(void *)(a1 + 144)) {
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 120);
  }
  long long v16 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v16;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemCoordinator.ParticipantState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 160)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 144);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemCoordinator.ParticipantState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 160) = 0;
    }
    if (a2) {
      *(void *)(result + 144) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemCoordinator.ParticipantState()
{
  return &type metadata for SystemCoordinator.ParticipantState;
}

uint64_t destroy for SystemCoordinator.ParticipantState.Seat(uint64_t result)
{
  if (*(void *)(result + 88)) {
    return __swift_destroy_boxed_opaque_existential_1Tm(result + 64);
  }
  return result;
}

uint64_t initializeWithCopy for SystemCoordinator.ParticipantState.Seat(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  uint64_t v6 = a1 + 64;
  uint64_t v7 = a2 + 64;
  uint64_t v8 = *(void *)(a2 + 88);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 96);
    *(void *)(a1 + 88) = v8;
    *(void *)(a1 + 96) = v9;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(v6, v7);
  }
  else
  {
    long long v10 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
    *(_OWORD *)(v6 + 16) = v10;
    *(void *)(v6 + 32) = *(void *)(v7 + 32);
  }
  return a1;
}

void *assignWithCopy for SystemCoordinator.ParticipantState.Seat(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  *a1 = v3;
  a1[1] = v4;
  uint64_t v7 = a2[4];
  uint64_t v6 = a2[5];
  uint64_t v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  a1[4] = v7;
  a1[5] = v6;
  uint64_t v9 = a1 + 8;
  long long v10 = a2 + 8;
  uint64_t v11 = a2[11];
  if (!a1[11])
  {
    if (v11)
    {
      a1[11] = v11;
      a1[12] = a2[12];
      (**(void (***)(uint64_t, uint64_t))(v11 - 8))((uint64_t)(a1 + 8), (uint64_t)(a2 + 8));
      return a1;
    }
LABEL_7:
    long long v12 = *(_OWORD *)v10;
    long long v13 = *((_OWORD *)v10 + 1);
    v9[4] = v10[4];
    *(_OWORD *)uint64_t v9 = v12;
    *((_OWORD *)v9 + 1) = v13;
    return a1;
  }
  if (!v11)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(a1 + 8));
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1(a1 + 8, a2 + 8);
  return a1;
}

__n128 __swift_memcpy104_16(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for SystemCoordinator.ParticipantState.Seat(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v7 = a1 + 64;
  if (*(void *)(a1 + 88)) {
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 64);
  }
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v7 + 16) = v8;
  *(void *)(v7 + 32) = *(void *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemCoordinator.ParticipantState.Seat(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 88);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemCoordinator.ParticipantState.Seat(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 0;
    }
    if (a2) {
      *(void *)(result + 88) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemCoordinator.ParticipantState.Seat()
{
  return &type metadata for SystemCoordinator.ParticipantState.Seat;
}

ValueMetadata *type metadata accessor for GenericSpatialTemplateRole()
{
  return &type metadata for GenericSpatialTemplateRole;
}

uint64_t initializeBufferWithCopyOfBuffer for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for SystemCoordinator.ParticipantStates(a1, a2, a3, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>);
}

uint64_t destroy for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2)
{
  return destroy for SystemCoordinator.ParticipantStates(a1, a2, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>);
}

uint64_t initializeWithCopy for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for SystemCoordinator.ParticipantStates(a1, a2, a3, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>);
}

uint64_t assignWithCopy for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for SystemCoordinator.ParticipantStates(a1, a2, a3, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>);
}

uint64_t initializeWithTake for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for SystemCoordinator.ParticipantStates(a1, a2, a3, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>);
}

uint64_t assignWithTake for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for SystemCoordinator.ParticipantStates(a1, a2, a3, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>);
}

uint64_t getEnumTagSinglePayload for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1A3856EB8);
}

uint64_t sub_1A3856EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>);
}

uint64_t storeEnumTagSinglePayload for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1A3856ED8);
}

uint64_t sub_1A3856ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>);
}

uint64_t type metadata accessor for SystemCoordinator.ParticipantStates(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for SystemCoordinator.ParticipantStates);
}

void type metadata completion function for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t initializeBufferWithCopyOfBuffer for SystemCoordinator.ParticipantStates.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for SystemCoordinator.ParticipantStates(a1, a2, a3, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
}

uint64_t initializeBufferWithCopyOfBuffer for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v7 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);

  return v7(a1, a2, v6);
}

uint64_t destroy for SystemCoordinator.ParticipantStates.Iterator(uint64_t a1, uint64_t a2)
{
  return destroy for SystemCoordinator.ParticipantStates(a1, a2, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
}

uint64_t destroy for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(a3);
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(a1, v4);
}

uint64_t initializeWithCopy for SystemCoordinator.ParticipantStates.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for SystemCoordinator.ParticipantStates(a1, a2, a3, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
}

uint64_t initializeWithCopy for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  return a1;
}

uint64_t assignWithCopy for SystemCoordinator.ParticipantStates.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for SystemCoordinator.ParticipantStates(a1, a2, a3, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
}

uint64_t assignWithCopy for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  return a1;
}

uint64_t initializeWithTake for SystemCoordinator.ParticipantStates.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for SystemCoordinator.ParticipantStates(a1, a2, a3, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
}

uint64_t initializeWithTake for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  return a1;
}

uint64_t assignWithTake for SystemCoordinator.ParticipantStates.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for SystemCoordinator.ParticipantStates(a1, a2, a3, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
}

uint64_t assignWithTake for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemCoordinator.ParticipantStates.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1A38571E0);
}

uint64_t sub_1A38571E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);

  return v7(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for SystemCoordinator.ParticipantStates.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1A385726C);
}

uint64_t sub_1A385726C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &demangling cache variable for type metadata for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>.Iterator);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a5);
  long long v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(a1, a2, a2, v7);
}

void type metadata completion function for SystemCoordinator.ParticipantStates.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void type metadata completion function for SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, unint64_t))
{
  type metadata accessor for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>(319, a4, a5);
  if (v5 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for AsyncPublisher<AnyPublisher<SystemCoordinator.ParticipantState, Never>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyPublisher<SystemCoordinator.ParticipantState, Never>);
    unint64_t v7 = lazy protocol witness table accessor for type AnyPublisher<SystemCoordinator.ParticipantState, Never> and conformance AnyPublisher<A, B>();
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined destroy of SystemCoordinator.ParticipantStates(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SystemCoordinator.ParticipantStates(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t SPPose3DEqualToPose(SPPose3D *a1, SPPose3D *a2)
{
  int64x2_t v2 = vceqq_f64(*(float64x2_t *)&a1->position.x, *(float64x2_t *)&a2->position.x);
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v2, 1), vandq_s8((int8x16_t)vceqq_f64(*(float64x2_t *)&a1->position.vector.f64[2], *(float64x2_t *)&a2->position.vector.f64[2]), (int8x16_t)v2)).u64[0] & 0x8000000000000000) == 0)return 0; {
  float64x2_t v4 = *(float64x2_t *)a1->rotation.vector.f64;
  }
  float64x2_t v5 = *(float64x2_t *)&a1->rotation.quaternion.vector.f64[2];
  float64x2_t v6 = *(float64x2_t *)a2->rotation.vector.f64;
  float64x2_t v7 = *(float64x2_t *)&a2->rotation.quaternion.vector.f64[2];
  int64x2_t v8 = (int64x2_t)vandq_s8((int8x16_t)vceqq_f64(v4, v6), (int8x16_t)vceqq_f64(v5, v7));
  if ((vandq_s8((int8x16_t)v8, (int8x16_t)vdupq_laneq_s64(v8, 1)).u64[0] & 0x8000000000000000) != 0) {
    return 1;
  }
  int64x2_t v9 = (int64x2_t)vandq_s8((int8x16_t)vceqq_f64(v4, vnegq_f64(v6)), (int8x16_t)vceqq_f64(v5, vnegq_f64(v7)));
  return vandq_s8((int8x16_t)v9, (int8x16_t)vdupq_laneq_s64(v9, 1)).u64[0] >> 63;
}

uint64_t outlined init with copy of SystemCoordinator.ParticipantState.Seat(long long *a1, uint64_t a2)
{
  long long v4 = *a1;
  long long v5 = a1[1];
  long long v6 = a1[3];
  *(_OWORD *)(a2 + 32) = a1[2];
  *(_OWORD *)(a2 + 48) = v6;
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  uint64_t v7 = a2 + 64;
  int64x2_t v8 = a1 + 4;
  uint64_t v9 = *((void *)a1 + 11);
  if (v9)
  {
    uint64_t v10 = *((void *)a1 + 12);
    *(void *)(a2 + 88) = v9;
    *(void *)(a2 + 96) = v10;
    (**(void (***)(uint64_t, long long *))(v9 - 8))(v7, v8);
  }
  else
  {
    long long v11 = *v8;
    long long v12 = a1[5];
    *(void *)(v7 + 32) = *((void *)a1 + 12);
    *(_OWORD *)uint64_t v7 = v11;
    *(_OWORD *)(v7 + 16) = v12;
  }
  return a2;
}

uint64_t outlined init with copy of SystemCoordinator.ParticipantState(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of SystemCoordinator.ParticipantState(uint64_t a1)
{
  return a1;
}

uint64_t AttachmentLedgerTopic.attachmentsPublisher.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<CurrentValueSubject<[Attachment], Never>, [DownloadAttachment]>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  long long v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[1] = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 392))(v3);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<[Attachment], Never>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DownloadAttachment]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<[Attachment], Never> and conformance CurrentValueSubject<A, B>, (uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<[Attachment], Never>);
  Publisher.map<A>(_:)();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<CurrentValueSubject<[Attachment], Never>, [DownloadAttachment]> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<CurrentValueSubject<[Attachment], Never>, [DownloadAttachment]>);
  uint64_t v6 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v6;
}

uint64_t closure #1 in AttachmentLedgerTopic.attachmentsPublisher.getter@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized _arrayForceCast<A, B>(_:)(*a1);
  *a2 = result;
  return result;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (!v2) {
    return v3;
  }
  uint64_t v16 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = v16;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = MEMORY[0x1A624E900](v5, a1);
        uint64_t v16 = v3;
        unint64_t v8 = *(void *)(v3 + 16);
        unint64_t v7 = *(void *)(v3 + 24);
        if (v8 >= v7 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
          uint64_t v3 = v16;
        }
        ++v5;
        uint64_t v14 = type metadata accessor for Attachment();
        long long v15 = &protocol witness table for Attachment;
        *(void *)&long long v13 = v6;
        *(void *)(v3 + 16) = v8 + 1;
        outlined init with take of TypedPayloadDecoding(&v13, v3 + 40 * v8 + 32);
      }
      while (v2 != v5);
    }
    else
    {
      uint64_t v9 = (uint64_t *)(a1 + 32);
      do
      {
        uint64_t v10 = *v9;
        uint64_t v16 = v3;
        unint64_t v11 = *(void *)(v3 + 16);
        unint64_t v12 = *(void *)(v3 + 24);
        swift_retain();
        if (v11 >= v12 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v11 + 1, 1);
          uint64_t v3 = v16;
        }
        uint64_t v14 = type metadata accessor for Attachment();
        long long v15 = &protocol witness table for Attachment;
        *(void *)&long long v13 = v10;
        *(void *)(v3 + 16) = v11 + 1;
        outlined init with take of TypedPayloadDecoding(&v13, v3 + 40 * v11 + 32);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for DownloadAttachmentTopic.attachmentsPublisher.getter in conformance AttachmentLedgerTopic()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<CurrentValueSubject<[Attachment], Never>, [DownloadAttachment]>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[1] = (*(uint64_t (**)(uint64_t))(**(void **)v0 + 392))(v3);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<[Attachment], Never>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DownloadAttachment]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<[Attachment], Never> and conformance CurrentValueSubject<A, B>, (uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<[Attachment], Never>);
  Publisher.map<A>(_:)();
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<CurrentValueSubject<[Attachment], Never>, [DownloadAttachment]> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<CurrentValueSubject<[Attachment], Never>, [DownloadAttachment]>);
  uint64_t v6 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v6;
}

uint64_t Attachment.assetSkeleton.getter(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for Attachment.MMCSMetadata();
  v2[5] = v3;
  void v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Attachment.MMCSMetadata?);
  v2[8] = swift_task_alloc();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>);
  v2[9] = v4;
  v2[10] = *(void *)(v4 - 8);
  v2[11] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>.Iterator);
  v2[12] = v5;
  v2[13] = *(void *)(v5 - 8);
  v2[14] = swift_task_alloc();
  return MEMORY[0x1F4188298](Attachment.assetSkeleton.getter, 0, 0);
}

uint64_t Attachment.assetSkeleton.getter()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  Attachment.mmcsMetadata.getter();
  MEMORY[0x1A624E3D0](v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[15] = v4;
  void *v4 = v0;
  v4[1] = Attachment.assetSkeleton.getter;
  uint64_t v5 = v0[12];
  uint64_t v6 = v0[8];
  return MEMORY[0x1F4187ED8](v6, 0, 0, v5, v0 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = Attachment.assetSkeleton.getter;
  }
  else {
    uint64_t v2 = Attachment.assetSkeleton.getter;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
    lazy protocol witness table accessor for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors();
    swift_allocError();
    void *v4 = 0;
    swift_willThrow();
LABEL_5:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(void))v0[1];
    goto LABEL_7;
  }
  uint64_t v5 = v0[16];
  (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[7], v1, v2);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  type metadata accessor for AssetSkeleton();
  uint64_t v6 = Attachment.MMCSMetadata.assetSkeleton.getter();
  uint64_t v8 = v7;
  lazy protocol witness table accessor for type AssetSkeleton and conformance AssetSkeleton(&lazy protocol witness table cache variable for type AssetSkeleton and conformance AssetSkeleton, MEMORY[0x1E4F591C0]);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v9 = v5;
  unint64_t v11 = v0[13];
  uint64_t v10 = v0[14];
  unint64_t v12 = v0[12];
  if (v9)
  {
    uint64_t v21 = v0[12];
    long long v13 = v0[6];
    uint64_t v14 = v0[7];
    long long v15 = v0[5];
    outlined consume of Data._Representation(v6, v8);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v21);
    goto LABEL_5;
  }
  long long v17 = v0[7];
  long long v19 = v0[5];
  long long v18 = v0[6];
  outlined consume of Data._Representation(v6, v8);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
LABEL_7:
  return v16();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

unint64_t lazy protocol witness table accessor for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors;
  if (!lazy protocol witness table cache variable for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors;
  if (!lazy protocol witness table cache variable for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors);
  }
  return result;
}

uint64_t Attachment.signal.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>.Continuation.BufferingPolicy);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Signal();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4FBD120], v0);
  return AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
}

uint64_t closure #1 in Attachment.signal.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>.Continuation);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v12 = (char *)swift_allocObject();
  *((void *)v12 + 2) = 0;
  *((void *)v12 + 3) = 0;
  *((void *)v12 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v12[v11], (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in Attachment.signal.getter, (uint64_t)v12);
  return swift_release();
}

uint64_t partial apply for closure #1 in Attachment.signal.getter(uint64_t a1)
{
  return closure #1 in Attachment.signal.getter(a1, v1);
}

uint64_t closure #1 in closure #1 in Attachment.signal.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Attachment.MMCSMetadata.UploadStatus?);
  v5[8] = swift_task_alloc();
  v5[9] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>.Continuation.YieldResult);
  v5[10] = v6;
  v5[11] = *(void *)(v6 - 8);
  v5[12] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Signal();
  v5[13] = v7;
  v5[14] = *(void *)(v7 - 8);
  v5[15] = swift_task_alloc();
  v5[16] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Attachment.MMCSMetadata.UploadStatus();
  v5[17] = v8;
  v5[18] = *(void *)(v8 - 8);
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Attachment.UpdatingBlob();
  v5[22] = v9;
  v5[23] = *(void *)(v9 - 8);
  v5[24] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Attachment.MMCSMetadata();
  v5[25] = v10;
  v5[26] = *(void *)(v10 - 8);
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Attachment.MMCSMetadata?);
  v5[29] = swift_task_alloc();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>);
  v5[30] = v11;
  v5[31] = *(void *)(v11 - 8);
  v5[32] = swift_task_alloc();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>.Iterator);
  v5[33] = v12;
  v5[34] = *(void *)(v12 - 8);
  v5[35] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in Attachment.signal.getter, 0, 0);
}

uint64_t closure #1 in closure #1 in Attachment.signal.getter()
{
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v3 = *(void *)(v0 + 240);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  *(void *)(v0 + 288) = JSONDecoder.init()();
  Attachment.mmcsMetadata.getter();
  MEMORY[0x1A624E3D0](v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  *(_DWORD *)(v0 + 312) = *MEMORY[0x1E4F5AF18];
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v4;
  void *v4 = v0;
  v4[1] = closure #1 in closure #1 in Attachment.signal.getter;
  uint64_t v5 = *(void *)(v0 + 264);
  uint64_t v6 = *(void *)(v0 + 232);
  return MEMORY[0x1F4187ED8](v6, 0, 0, v5, v0 + 16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 304) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in closure #1 in Attachment.signal.getter;
  }
  else {
    uint64_t v2 = closure #1 in closure #1 in Attachment.signal.getter;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t (*v23)(void);
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  void *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 208);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 272) + 8))(*(void *)(v0 + 280), *(void *)(v0 + 264));
    swift_release();
LABEL_6:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
  uint64_t v4 = *(_DWORD *)(v0 + 312);
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 136);
  uint64_t v7 = *(void *)(v0 + 144);
  (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(*(void *)(v0 + 224), v1, v2);
  Attachment.MMCSMetadata.status.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v7 + 88))(v5, v6) == v4)
  {
    uint64_t v8 = *(void **)(v0 + 304);
    uint64_t v10 = *(void *)(v0 + 184);
    uint64_t v9 = *(void *)(v0 + 192);
    uint64_t v12 = *(void *)(v0 + 168);
    uint64_t v11 = *(void *)(v0 + 176);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 144) + 96))(v12, *(void *)(v0 + 136));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v9, v12, v11);
    long long v13 = Attachment.UpdatingBlob.data.getter();
    long long v15 = v14;
    lazy protocol witness table accessor for type AssetSkeleton and conformance AssetSkeleton(&lazy protocol witness table cache variable for type Signal and conformance Signal, MEMORY[0x1E4F591D8]);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    if (v8)
    {
      uint64_t v16 = *(void *)(v0 + 272);
      BOOL v77 = *(void *)(v0 + 280);
      uint64_t v72 = *(void *)(v0 + 224);
      uint64_t v74 = *(void *)(v0 + 264);
      long long v18 = *(void *)(v0 + 200);
      long long v17 = *(void *)(v0 + 208);
      long long v19 = *(void *)(v0 + 184);
      long long v20 = *(void *)(v0 + 192);
      uint64_t v21 = *(void *)(v0 + 176);
      outlined consume of Data._Representation(v13, v15);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v72, v18);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v77, v74);
      *(void *)(v0 + 24) = v8;
      uint64_t v22 = v8;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>.Continuation);
      AsyncThrowingStream.Continuation.finish(throwing:)();
      swift_release();

      goto LABEL_6;
    }
    uint64_t v79 = *(void *)(v0 + 200);
    uint64_t v80 = *(void *)(v0 + 224);
    uint64_t v47 = *(void *)(v0 + 184);
    os_log_type_t v76 = *(void *)(v0 + 192);
    uint64_t v71 = *(void *)(v0 + 208);
    uint64_t v73 = *(void *)(v0 + 176);
    uint64_t v48 = *(void *)(v0 + 120);
    uint64_t v49 = *(void *)(v0 + 128);
    uint64_t v51 = *(void *)(v0 + 104);
    uint64_t v50 = *(void *)(v0 + 112);
    uint64_t v53 = *(void *)(v0 + 88);
    uint64_t v52 = *(void *)(v0 + 96);
    uint64_t v69 = *(void *)(v0 + 80);
    outlined consume of Data._Representation(v13, v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v48, v49, v51);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>.Continuation);
    AsyncThrowingStream.Continuation.yield(_:)();
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v69);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v76, v73);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v80, v79);
  }
  else
  {
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 144) + 8);
    v25(*(void *)(v0 + 168), *(void *)(v0 + 136));
    if (one-time initialization token for attachmentLedgerTopic != -1) {
      swift_once();
    }
    uint64_t v26 = *(void *)(v0 + 216);
    uint64_t v27 = *(void *)(v0 + 224);
    uint64_t v28 = *(void *)(v0 + 200);
    uint64_t v29 = *(void *)(v0 + 208);
    long long v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Log.attachmentLedgerTopic);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v26, v27, v28);
    swift_retain_n();
    uint64_t v31 = Logger.logObject.getter();
    uint64_t v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v78 = v32;
      uint64_t v67 = v25;
      long long v33 = *(void *)(v0 + 144);
      long long v34 = *(void *)(v0 + 72);
      os_log_t v68 = *(void *)(v0 + 136);
      uint64_t v70 = *(void *)(v0 + 64);
      long long v35 = *(void *)(v0 + 48);
      long long v36 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)long long v36 = 136315394;
      uint64_t v75 = v37;
      *(void *)(v0 + 32) = v37;
      *(void *)(v0 + 40) = v35;
      type metadata accessor for Attachment();
      swift_retain();
      long long v38 = String.init<A>(reflecting:)();
      *(void *)(v36 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, (uint64_t *)(v0 + 32));
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v36 + 12) = 2080;
      Attachment.MMCSMetadata.status.getter();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v34, 0, 1, v68);
      outlined init with copy of URL?(v34, v70, &demangling cache variable for type metadata for Attachment.MMCSMetadata.UploadStatus?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v70, 1, v68) == 1)
      {
        uint64_t v40 = 0xE300000000000000;
        int v41 = 7104878;
      }
      else
      {
        uint64_t v55 = *(void *)(v0 + 152);
        uint64_t v54 = *(void *)(v0 + 160);
        uint64_t v57 = *(void *)(v0 + 136);
        uint64_t v56 = *(void *)(v0 + 144);
        (*(void (**)(uint64_t, void, uint64_t))(v56 + 32))(v54, *(void *)(v0 + 64), v57);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v55, v54, v57);
        int v41 = String.init<A>(reflecting:)();
        uint64_t v40 = v58;
        v67(v54, v57);
      }
      uint64_t v60 = *(void *)(v0 + 216);
      Class v59 = *(void *)(v0 + 224);
      uint64_t v62 = *(void *)(v0 + 200);
      uint64_t v61 = *(void *)(v0 + 208);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(void *)(v0 + 72), &demangling cache variable for type metadata for Attachment.MMCSMetadata.UploadStatus?);
      *(void *)(v36 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v40, (uint64_t *)(v0 + 32));
      swift_bridgeObjectRelease();
      unint64_t v63 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
      v63(v60, v62);
      _os_log_impl(&dword_1A375F000, v31, v78, "%s's status doesn't have a signal blob, status: %s", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v75, -1, -1);
      MEMORY[0x1A624F870](v36, -1, -1);

      v63(v59, v62);
    }
    else
    {
      long long v43 = *(void *)(v0 + 216);
      long long v42 = *(void *)(v0 + 224);
      long long v45 = *(void *)(v0 + 200);
      uint64_t v44 = *(void *)(v0 + 208);

      long long v46 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
      v46(v43, v45);
      swift_release_n();
      v46(v42, v45);
    }
  }
  uint64_t v64 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v64;
  *uint64_t v64 = v0;
  v64[1] = closure #1 in closure #1 in Attachment.signal.getter;
  unint64_t v65 = *(void *)(v0 + 264);
  uint64_t v66 = *(void *)(v0 + 232);
  return MEMORY[0x1F4187ED8](v66, 0, 0, v65, v0 + 16);
}

{
  void *v0;
  void *v1;
  id v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  (*(void (**)(void, void))(v0[34] + 8))(v0[35], v0[33]);
  uint64_t v1 = (void *)v0[2];
  v0[3] = v1;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>.Continuation);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t Attachment.waitForUploadFinished()()
{
  v1[5] = v0;
  void v1[6] = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Attachment.MMCSMetadata.UploadStatus?);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for Attachment.MMCSMetadata.UploadStatus();
  v1[9] = v2;
  v1[10] = *(void *)(v2 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Attachment.MMCSMetadata();
  v1[14] = v3;
  v1[15] = *(void *)(v3 - 8);
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Attachment.MMCSMetadata?);
  v1[18] = swift_task_alloc();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>);
  v1[19] = v4;
  v1[20] = *(void *)(v4 - 8);
  v1[21] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Attachment.MMCSMetadata, Error>.Iterator);
  v1[22] = v5;
  v1[23] = *(void *)(v5 - 8);
  v1[24] = swift_task_alloc();
  return MEMORY[0x1F4188298](Attachment.waitForUploadFinished(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 152);
  Attachment.mmcsMetadata.getter();
  MEMORY[0x1A624E3D0](v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  *(_DWORD *)(v0 + 208) = *MEMORY[0x1E4F5AF20];
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v4;
  void *v4 = v0;
  v4[1] = Attachment.waitForUploadFinished();
  uint64_t v5 = *(void *)(v0 + 176);
  uint64_t v6 = *(void *)(v0 + 144);
  return MEMORY[0x1F4187ED8](v6, 0, 0, v5, v0 + 16);
}

{
  uint64_t v0;
  uint64_t (*v1)();
  uint64_t v3;

  swift_task_dealloc();
  if (v0) {
    uint64_t v1 = Attachment.waitForUploadFinished();
  }
  else {
    uint64_t v1 = Attachment.waitForUploadFinished();
  }
  return MEMORY[0x1F4188298](v1, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned char *v4;
  uint64_t (*v5)(void);
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  os_log_type_t v56;
  uint64_t v57;

  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 184) + 8))(*(void *)(v0 + 192), *(void *)(v0 + 176));
    lazy protocol witness table accessor for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors();
    swift_allocError();
    void *v4 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
LABEL_5:
    return v5();
  }
  uint64_t v6 = *(_DWORD *)(v0 + 208);
  uint64_t v7 = *(void *)(v0 + 104);
  uint64_t v8 = *(void *)(v0 + 72);
  uint64_t v9 = *(void *)(v0 + 80);
  (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(*(void *)(v0 + 136), v1, v2);
  Attachment.MMCSMetadata.status.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v9 + 88))(v7, v8) == v6)
  {
    uint64_t v11 = *(void *)(v0 + 184);
    uint64_t v10 = *(void *)(v0 + 192);
    uint64_t v12 = *(void *)(v0 + 176);
    long long v13 = *(void *)(v0 + 104);
    uint64_t v14 = *(void *)(v0 + 80);
    long long v15 = *(void *)(v0 + 72);
    (*(void (**)(void, void))(*(void *)(v0 + 120) + 8))(*(void *)(v0 + 136), *(void *)(v0 + 112));
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_5;
  }
  long long v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 80) + 8);
  v17(*(void *)(v0 + 104), *(void *)(v0 + 72));
  if (one-time initialization token for attachmentLedgerTopic != -1) {
    swift_once();
  }
  long long v18 = *(void *)(v0 + 128);
  long long v19 = *(void *)(v0 + 136);
  long long v20 = *(void *)(v0 + 112);
  uint64_t v21 = *(void *)(v0 + 120);
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Log.attachmentLedgerTopic);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v18, v19, v20);
  swift_retain_n();
  uint64_t v23 = Logger.logObject.getter();
  uint64_t v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v56 = v24;
    uint64_t v52 = v17;
    uint64_t v25 = *(void *)(v0 + 80);
    uint64_t v26 = *(void *)(v0 + 64);
    uint64_t v53 = *(void *)(v0 + 72);
    uint64_t v54 = *(void *)(v0 + 56);
    uint64_t v27 = *(void *)(v0 + 40);
    uint64_t v28 = swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136315394;
    uint64_t v55 = v29;
    *(void *)(v0 + 24) = v29;
    *(void *)(v0 + 32) = v27;
    swift_retain();
    long long v30 = String.init<A>(reflecting:)();
    *(void *)(v28 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, (uint64_t *)(v0 + 24));
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v28 + 12) = 2080;
    Attachment.MMCSMetadata.status.getter();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v26, 0, 1, v53);
    outlined init with copy of URL?(v26, v54, &demangling cache variable for type metadata for Attachment.MMCSMetadata.UploadStatus?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v54, 1, v53) == 1)
    {
      uint64_t v32 = 0xE300000000000000;
      long long v33 = 7104878;
    }
    else
    {
      uint64_t v40 = *(void *)(v0 + 88);
      long long v39 = *(void *)(v0 + 96);
      long long v42 = *(void *)(v0 + 72);
      int v41 = *(void *)(v0 + 80);
      (*(void (**)(uint64_t, void, uint64_t))(v41 + 32))(v39, *(void *)(v0 + 56), v42);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v40, v39, v42);
      long long v33 = String.init<A>(reflecting:)();
      uint64_t v32 = v43;
      v52(v39, v42);
    }
    long long v45 = *(void *)(v0 + 128);
    uint64_t v44 = *(void *)(v0 + 136);
    uint64_t v47 = *(void *)(v0 + 112);
    long long v46 = *(void *)(v0 + 120);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(void *)(v0 + 64), &demangling cache variable for type metadata for Attachment.MMCSMetadata.UploadStatus?);
    *(void *)(v28 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v32, (uint64_t *)(v0 + 24));
    swift_bridgeObjectRelease();
    uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
    v48(v45, v47);
    _os_log_impl(&dword_1A375F000, v23, v56, "%s's status is currently: %s, not finished.", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v55, -1, -1);
    MEMORY[0x1A624F870](v28, -1, -1);

    v48(v44, v47);
  }
  else
  {
    long long v35 = *(void *)(v0 + 128);
    long long v34 = *(void *)(v0 + 136);
    uint64_t v37 = *(void *)(v0 + 112);
    long long v36 = *(void *)(v0 + 120);

    long long v38 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v38(v35, v37);
    swift_release_n();
    v38(v34, v37);
  }
  uint64_t v49 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v49;
  *uint64_t v49 = v0;
  v49[1] = Attachment.waitForUploadFinished();
  uint64_t v50 = *(void *)(v0 + 176);
  uint64_t v51 = *(void *)(v0 + 144);
  return MEMORY[0x1F4187ED8](v51, 0, 0, v50, v0 + 16);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[23] + 8))(v0[24], v0[22]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t protocol witness for DownloadAttachment.id.getter in conformance Attachment()
{
  return Attachment.id.getter();
}

uint64_t protocol witness for DownloadAttachment.assetSkeleton.getter in conformance Attachment(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return Attachment.assetSkeleton.getter(a1);
}

uint64_t protocol witness for DownloadAttachment.signal.getter in conformance Attachment()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>.Continuation.BufferingPolicy);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Signal();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4FBD120], v0);
  return AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
}

uint64_t protocol witness for DownloadAttachment.waitForUploadFinished() in conformance Attachment()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return Attachment.waitForUploadFinished()();
}

uint64_t AttachmentDownloadTask.topic.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AudioSessionAssertionManager(v1 + 112, a1);
}

uint64_t AttachmentDownloadTask.attachment.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AudioSessionAssertionManager(v1 + 152, a1);
}

uint64_t AttachmentDownloadTask.file.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_file;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t key path setter for AttachmentDownloadTask.signalHandler : AttachmentDownloadTask(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a2 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_signalHandler);
  swift_beginAccess();
  void *v3 = v2;
  swift_retain();
  return swift_release();
}

uint64_t AttachmentDownloadTask.signalHandler.getter()
{
  return swift_retain();
}

uint64_t AttachmentDownloadTask.signalHandler.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_signalHandler);
  swift_beginAccess();
  void *v3 = a1;
  return swift_release();
}

uint64_t (*AttachmentDownloadTask.signalHandler.modify())()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

BOOL static AttachmentDownloadTask.Errors.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void AttachmentDownloadTask.Errors.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int AttachmentDownloadTask.Errors.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t AttachmentDownloadTask.__allocating_init(topic:attachment:file:manager:)(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v10 = __swift_mutable_project_boxed_opaque_existential_1(a1, v9);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v13 + 16))(v12);
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v14 = *(void *)(a2 + 32);
  uint64_t v16 = __swift_mutable_project_boxed_opaque_existential_1(a2, v15);
  MEMORY[0x1F4188790](v16);
  long long v18 = (char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v19 + 16))(v18);
  uint64_t v20 = specialized AttachmentDownloadTask.__allocating_init(topic:attachment:file:manager:)((uint64_t)v12, (uint64_t)v18, a3, a4, v22[1], v9, v15, v8, v14);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v20;
}

uint64_t AttachmentDownloadTask.init(topic:attachment:file:manager:)(long long *a1, long long *a2, uint64_t a3, long long *a4)
{
  swift_defaultActor_initialize();
  *(void *)(v4 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_signalHandler) = 0;
  outlined init with take of TypedPayloadDecoding(a1, v4 + 112);
  outlined init with take of TypedPayloadDecoding(a2, v4 + 152);
  uint64_t v9 = v4 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_file;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9, a3, v10);
  outlined init with take of TypedPayloadDecoding(a4, v4 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_manager);
  return v4;
}

uint64_t AttachmentDownloadTask.start()()
{
  v1[8] = v0;
  uint64_t v2 = type metadata accessor for Asset();
  v1[9] = v2;
  v1[10] = *(void *)(v2 - 8);
  v1[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetSkeleton?);
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for AssetSkeleton();
  v1[14] = v3;
  v1[15] = *(void *)(v3 - 8);
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TaskPriority();
  v1[20] = v4;
  v1[21] = *(void *)(v4 - 8);
  v1[22] = swift_task_alloc();
  return MEMORY[0x1F4188298](AttachmentDownloadTask.start(), v0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  os_log_type_t type;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  uint64_t v23 = v0;
  if (one-time initialization token for downloadTask != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[23] = __swift_project_value_buffer(v1, (uint64_t)static Log.downloadTask);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[21];
    uint64_t v5 = v0[22];
    long long v18 = v0[20];
    os_log_type_t type = v3;
    uint64_t v6 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v22 = v19;
    *(_DWORD *)uint64_t v6 = 136315394;
    uint64_t v7 = AttachmentDownloadTask.description.getter();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    static Task<>.currentPriority.getter();
    lazy protocol witness table accessor for type AssetSkeleton and conformance AssetSkeleton(&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority, MEMORY[0x1E4FBCFE8]);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v11 = v10;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v18);
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v2, type, "%s received download request with priority: %s.", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v19, -1, -1);
    MEMORY[0x1A624F870](v6, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v12 = (void *)v0[8];
  uint64_t v13 = v12[22];
  uint64_t v14 = v12[23];
  __swift_project_boxed_opaque_existential_1(v12 + 19, v13);
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 + 16) + **(int **)(v14 + 16));
  uint64_t v15 = (void *)swift_task_alloc();
  v0[24] = v15;
  *uint64_t v15 = v0;
  v15[1] = AttachmentDownloadTask.start();
  uint64_t v16 = v0[19];
  return v20(v16, v13, v14);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 200) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v4 = AttachmentDownloadTask.start();
  }
  else {
    uint64_t v4 = AttachmentDownloadTask.start();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;

  uint64_t v28 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[15] + 16);
  v1(v0[18], v0[19], v0[14]);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.info.getter();
  uint64_t v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[18];
  uint64_t v7 = v0[14];
  uint64_t v6 = v0[15];
  if (v4)
  {
    uint64_t v26 = v3;
    uint64_t v9 = v0[12];
    uint64_t v8 = v0[13];
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v27 = v25;
    *(_DWORD *)uint64_t v10 = 136315138;
    v1(v8, v5, v7);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, v7);
    outlined init with copy of URL?(v8, v9, &demangling cache variable for type metadata for AssetSkeleton?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v9, 1, v7) == 1)
    {
      uint64_t v11 = 0xE300000000000000;
      uint64_t v12 = 7104878;
    }
    else
    {
      uint64_t v14 = v0[16];
      uint64_t v15 = v0[17];
      uint64_t v17 = v0[14];
      uint64_t v16 = v0[15];
      (*(void (**)(uint64_t, void, uint64_t))(v16 + 32))(v15, v0[12], v17);
      v1(v14, v15, v17);
      uint64_t v12 = String.init<A>(reflecting:)();
      uint64_t v11 = v18;
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    }
    uint64_t v19 = v0[18];
    uint64_t v21 = v0[14];
    uint64_t v20 = v0[15];
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0[13], &demangling cache variable for type metadata for AssetSkeleton?);
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v13(v19, v21);
    _os_log_impl(&dword_1A375F000, v2, v26, "Unpacked skeleton: %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v25, -1, -1);
    MEMORY[0x1A624F870](v10, -1, -1);
  }
  else
  {
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v13(v0[18], v0[14]);
  }

  v0[26] = v13;
  uint64_t v22 = (void *)swift_task_alloc();
  v0[27] = v22;
  *uint64_t v22 = v0;
  v22[1] = AttachmentDownloadTask.start();
  uint64_t v23 = v0[19];
  return AttachmentDownloadTask.start(asset:)(v23);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 224) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v4 = AttachmentDownloadTask.start();
  }
  else {
    uint64_t v4 = AttachmentDownloadTask.start();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0 + 208))(*(void *)(v0 + 152), *(void *)(v0 + 112));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;
  uint64_t v20;

  uint64_t v19 = v0;
  uint64_t v1 = (void *)v0[28];
  swift_retain();
  uint64_t v2 = v1;
  swift_retain();
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (void *)v0[28];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    long long v18 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v9 = AttachmentDownloadTask.description.getter();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    v0[3] = v6;
    uint64_t v11 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(reflecting:)();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v4, v5, "%s Failed to download asset through skeleton %s, attempting directly through the asset.", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v8, -1, -1);
    MEMORY[0x1A624F870](v7, -1, -1);
  }
  else
  {
    uint64_t v14 = (void *)v0[28];
    swift_release_n();
  }
  AssetSkeleton.asset.getter();
  uint64_t v15 = (void *)swift_task_alloc();
  v0[29] = v15;
  *uint64_t v15 = v0;
  v15[1] = AttachmentDownloadTask.start();
  uint64_t v16 = v0[11];
  return AttachmentDownloadTask.start(asset:)(v16);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v5 = *(void *)(*v1 + 72);
  *(void *)(*v1 + 240) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v7 = AttachmentDownloadTask.start();
  }
  else {
    uint64_t v7 = AttachmentDownloadTask.start();
  }
  return MEMORY[0x1F4188298](v7, v6, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0 + 208))(*(void *)(v0 + 152), *(void *)(v0 + 112));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 112);

  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t AttachmentDownloadTask.description.getter()
{
  _StringGuts.grow(_:)(68);
  v0._object = (void *)0x80000001A3902080;
  v0._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x3A6369706F74202CLL;
  v1._object = (void *)0xE900000000000020;
  String.append(_:)(v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DownloadAttachmentTopic);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 0x203A656C6966202CLL;
  v2._object = (void *)0xE800000000000000;
  String.append(_:)(v2);
  type metadata accessor for URL();
  lazy protocol witness table accessor for type AssetSkeleton and conformance AssetSkeleton((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x686361747461202CLL;
  v4._object = (void *)0xEE00203A746E656DLL;
  String.append(_:)(v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DownloadAttachment);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t AttachmentDownloadTask.start(asset:)(uint64_t a1)
{
  v2[36] = a1;
  v2[37] = v1;
  uint64_t v3 = type metadata accessor for SimultaneousTransferError();
  v2[38] = v3;
  v2[39] = *(void *)(v3 - 8);
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Asset();
  v2[42] = v4;
  v2[43] = *(void *)(v4 - 8);
  v2[44] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[45] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v2[46] = v5;
  v2[47] = *(void *)(v5 - 8);
  v2[48] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for AssetDownloadRequest();
  v2[49] = v6;
  v2[50] = *(void *)(v6 - 8);
  v2[51] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetSkeleton?);
  v2[52] = swift_task_alloc();
  v2[53] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for AssetSkeleton();
  v2[54] = v7;
  v2[55] = *(void *)(v7 - 8);
  v2[56] = swift_task_alloc();
  v2[57] = swift_task_alloc();
  v2[58] = swift_task_alloc();
  return MEMORY[0x1F4188298](AttachmentDownloadTask.start(asset:), v1, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2[17] = a1;
  v2[18] = v1;
  uint64_t v3 = type metadata accessor for SimultaneousTransferError();
  v2[19] = v3;
  v2[20] = *(void *)(v3 - 8);
  v2[21] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v2[22] = v4;
  v2[23] = *(void *)(v4 - 8);
  v2[24] = swift_task_alloc();
  type metadata accessor for Credential();
  v2[25] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v2[26] = v5;
  v2[27] = *(void *)(v5 - 8);
  v2[28] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for AssetDownloadRequest();
  v2[29] = v6;
  v2[30] = *(void *)(v6 - 8);
  v2[31] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v2[32] = v7;
  v2[33] = *(void *)(v7 - 8);
  v2[34] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DownloadToken();
  v2[35] = v8;
  v2[36] = *(void *)(v8 - 8);
  v2[37] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[38] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Asset?);
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Asset();
  v2[41] = v9;
  v2[42] = *(void *)(v9 - 8);
  v2[43] = swift_task_alloc();
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  v2[46] = swift_task_alloc();
  return MEMORY[0x1F4188298](AttachmentDownloadTask.start(asset:), v1, 0);
}

uint64_t AttachmentDownloadTask.start(asset:)()
{
  long long v46 = v0;
  if (one-time initialization token for downloadTask != -1) {
    swift_once();
  }
  uint64_t v1 = v0[58];
  uint64_t v2 = v0[54];
  uint64_t v3 = v0[55];
  uint64_t v4 = v0[36];
  uint64_t v5 = type metadata accessor for Logger();
  v0[59] = __swift_project_value_buffer(v5, (uint64_t)static Log.downloadTask);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v6(v1, v4, v2);
  swift_retain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[58];
  uint64_t v12 = v0[54];
  uint64_t v11 = v0[55];
  long long v43 = v6;
  if (v9)
  {
    os_log_type_t v40 = v8;
    os_log_t log = v7;
    uint64_t v37 = v0[53];
    uint64_t v38 = v0[52];
    uint64_t v13 = swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    uint64_t v45 = v39;
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v14 = AttachmentDownloadTask.description.getter();
    v0[34] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    v6(v37, v10, v12);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v37, 0, 1, v12);
    outlined init with copy of URL?(v37, v38, &demangling cache variable for type metadata for AssetSkeleton?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v38, 1, v12) == 1)
    {
      unint64_t v16 = 0xE300000000000000;
      uint64_t v17 = 7104878;
    }
    else
    {
      uint64_t v19 = v0[56];
      uint64_t v18 = v0[57];
      uint64_t v20 = v0[54];
      uint64_t v21 = v0[55];
      (*(void (**)(uint64_t, void, uint64_t))(v21 + 32))(v18, v0[52], v20);
      v6(v19, v18, v20);
      uint64_t v17 = String.init<A>(reflecting:)();
      unint64_t v16 = v22;
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v18, v20);
    }
    uint64_t v23 = v0[58];
    uint64_t v24 = v0[54];
    uint64_t v25 = v0[55];
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0[53], &demangling cache variable for type metadata for AssetSkeleton?);
    v0[35] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v16, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
    uint64_t v7 = log;
    _os_log_impl(&dword_1A375F000, log, v40, "%s Starting to attempt to download attachment through AssetSkeleton %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v39, -1, -1);
    MEMORY[0x1A624F870](v13, -1, -1);
  }
  else
  {
    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }

  uint64_t v26 = v0[57];
  uint64_t v27 = v0[54];
  uint64_t v28 = v0[47];
  uint64_t v29 = v0[48];
  uint64_t v30 = v0[46];
  uint64_t v32 = v0[36];
  uint64_t v31 = v0[37];
  uint64_t v33 = *(void *)(v31 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_manager + 32);
  uint64_t v41 = *(void *)(v31 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_manager + 24);
  __swift_project_boxed_opaque_existential_1((void *)(v31 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_manager), v41);
  v43(v26, v32, v27);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v29, v31 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_file, v30);
  AssetDownloadRequest.init(skeleton:fileURL:)();
  uint64_t v44 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 + 32) + **(int **)(v33 + 32));
  long long v34 = (void *)swift_task_alloc();
  v0[60] = v34;
  *long long v34 = v0;
  v34[1] = AttachmentDownloadTask.start(asset:);
  uint64_t v35 = v0[51];
  return v44(v0 + 7, v35, v41, v33);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 488) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[51];
  uint64_t v4 = v2[50];
  uint64_t v5 = v2[49];
  uint64_t v6 = v2[37];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v7 = AttachmentDownloadTask.start(asset:);
  }
  else {
    uint64_t v7 = AttachmentDownloadTask.start(asset:);
  }
  return MEMORY[0x1F4188298](v7, v6, 0);
}

{
  uint64_t v0;
  void *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  unint64_t v22 = v0;
  uint64_t v1 = (void *)(v0 + 16);
  outlined init with take of TypedPayloadDecoding((long long *)(v0 + 56), v0 + 16);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v21 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v6 = AttachmentDownloadTask.description.getter();
    *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v21);
    uint64_t v1 = (void *)(v0 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v2, v3, "%s Fetched AssetDownloadCoordinator", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v5, -1, -1);
    MEMORY[0x1A624F870](v4, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  os_log_type_t v8 = *(void *)(v0 + 360);
  BOOL v9 = *(void *)(v0 + 296);
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 1, 1, v10);
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  outlined init with copy of AudioSessionAssertionManager(v9 + 152, v0 + 136);
  outlined init with copy of AudioSessionAssertionManager((uint64_t)v1, v0 + 96);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = 0;
  _OWORD v12[3] = 0;
  outlined init with take of TypedPayloadDecoding((long long *)(v0 + 136), (uint64_t)(v12 + 4));
  v12[9] = v11;
  outlined init with take of TypedPayloadDecoding((long long *)(v0 + 96), (uint64_t)(v12 + 10));
  uint64_t v13 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v8, (uint64_t)&async function pointer to partial apply for closure #1 in AttachmentDownloadTask.start(asset:), (uint64_t)v12);
  uint64_t v14 = (uint64_t *)(v9 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_signalHandler);
  swift_beginAccess();
  *uint64_t v14 = v13;
  swift_release();
  unint64_t v15 = *(void *)(v0 + 40);
  unint64_t v16 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1(v1, v15);
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 + 8) + **(int **)(v16 + 8));
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 496) = v17;
  *uint64_t v17 = v0;
  v17[1] = AttachmentDownloadTask.start(asset:);
  uint64_t v18 = *(void *)(v0 + 352);
  return v20(v18, v15, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 504) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[37];
    uint64_t v4 = AttachmentDownloadTask.start(asset:);
  }
  else
  {
    uint64_t v5 = v2[37];
    (*(void (**)(void, void))(v2[43] + 8))(v2[44], v2[42]);
    uint64_t v4 = AttachmentDownloadTask.start(asset:);
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  void *v10;
  uint64_t v11;

  uint64_t v10 = v0;
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    BOOL v9 = v4;
    *(_DWORD *)uint64_t v3 = 136315138;
    uint64_t v5 = AttachmentDownloadTask.description.getter();
    v0[32] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A375F000, v1, v2, "%s finished download", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v4, -1, -1);
    MEMORY[0x1A624F870](v3, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  $defer #1 () in AttachmentDownloadTask.start(asset:)(v0[37]);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  void *v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  unsigned char *v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  void *v14;
  uint64_t v15;

  uint64_t v14 = v0;
  uint64_t v1 = (void *)v0[61];
  v0[26] = v1;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[39] + 8))(v0[41], v0[38]);
    swift_retain_n();
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      uint64_t v13 = v6;
      *(_DWORD *)uint64_t v5 = 136315138;
      uint64_t v7 = AttachmentDownloadTask.description.getter();
      v0[25] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v3, v4, "%s caught SimultaneousTransferError", v5, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v6, -1, -1);
      MEMORY[0x1A624F870](v5, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    BOOL v9 = (void *)v0[61];
    lazy protocol witness table accessor for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors();
    swift_allocError();
    *uint64_t v10 = 1;
    swift_willThrow();
  }
  else
  {
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unsigned char *v26;
  uint64_t (*v27)(void);
  uint64_t v29;
  uint64_t v30[2];
  void *v31;
  uint64_t v32;

  uint64_t v31 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  uint64_t v2 = (void *)v0[63];
  swift_retain();
  uint64_t v3 = v2;
  swift_retain();
  uint64_t v4 = v2;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (void *)v0[63];
    os_log_type_t v8 = swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    v30[0] = v29;
    *(_DWORD *)os_log_type_t v8 = 136315394;
    BOOL v9 = AttachmentDownloadTask.description.getter();
    v0[29] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    v0[30] = v7;
    uint64_t v11 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(reflecting:)();
    v0[31] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v5, v6, "%s Failed to finish downloading, error: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    uint64_t v1 = (uint64_t)(v0 + 2);
    MEMORY[0x1A624F870](v29, -1, -1);
    MEMORY[0x1A624F870](v8, -1, -1);
  }
  else
  {
    uint64_t v14 = (void *)v0[63];
    swift_release_n();
  }
  unint64_t v15 = (void *)v0[63];
  v0[27] = v15;
  unint64_t v16 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[39] + 8))(v0[40], v0[38]);
    swift_retain_n();
    uint64_t v17 = Logger.logObject.getter();
    uint64_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      v30[0] = v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      uint64_t v21 = AttachmentDownloadTask.description.getter();
      v0[28] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v17, v18, "%s caught SimultaneousTransferError", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v20, -1, -1);
      MEMORY[0x1A624F870](v19, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t v24 = (void *)v0[63];
    uint64_t v25 = v0[37];
    lazy protocol witness table accessor for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors();
    swift_allocError();
    *uint64_t v26 = 1;
    swift_willThrow();

    $defer #1 () in AttachmentDownloadTask.start(asset:)(v25);
    __swift_destroy_boxed_opaque_existential_1Tm(v1);
  }
  else
  {
    uint64_t v23 = v0[37];
    swift_willThrow();
    $defer #1 () in AttachmentDownloadTask.start(asset:)(v23);
    __swift_destroy_boxed_opaque_existential_1Tm(v1);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = (uint64_t (*)(void))v0[1];
  return v27();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_type_t v42;
  NSObject *log;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  uint64_t v45 = v0;
  if (one-time initialization token for downloadTask != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 368);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v4 = *(void *)(v0 + 336);
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v0 + 376) = __swift_project_value_buffer(v5, (uint64_t)static Log.downloadTask);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 384) = v6;
  *(void *)(v0 + 392) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v1, v3);
  swift_retain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 368);
  uint64_t v12 = *(void *)(v0 + 328);
  uint64_t v11 = *(void *)(v0 + 336);
  if (v9)
  {
    long long v42 = v8;
    os_log_t log = v7;
    uint64_t v39 = *(void *)(v0 + 320);
    os_log_type_t v40 = *(void *)(v0 + 312);
    uint64_t v13 = swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    uint64_t v44 = v41;
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v14 = AttachmentDownloadTask.description.getter();
    *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    v6(v39, v10, v12);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v39, 0, 1, v12);
    outlined init with copy of URL?(v39, v40, &demangling cache variable for type metadata for Asset?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v40, 1, v12) == 1)
    {
      unint64_t v16 = 0xE300000000000000;
      uint64_t v17 = 7104878;
    }
    else
    {
      uint64_t v20 = *(void *)(v0 + 352);
      uint64_t v19 = *(void *)(v0 + 360);
      uint64_t v21 = *(void *)(v0 + 328);
      unint64_t v22 = *(void *)(v0 + 336);
      (*(void (**)(uint64_t, void, uint64_t))(v22 + 32))(v19, *(void *)(v0 + 312), v21);
      v6(v20, v19, v21);
      uint64_t v17 = String.init<A>(reflecting:)();
      unint64_t v16 = v23;
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v19, v21);
    }
    uint64_t v24 = *(void *)(v0 + 368);
    uint64_t v25 = *(void *)(v0 + 328);
    uint64_t v26 = *(void *)(v0 + 336);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(void *)(v0 + 320), &demangling cache variable for type metadata for Asset?);
    *(void *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v16, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v18(v24, v25);
    uint64_t v7 = log;
    _os_log_impl(&dword_1A375F000, log, v42, "%s Starting to attempt to download attachment directly from Asset %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v41, -1, -1);
    MEMORY[0x1A624F870](v13, -1, -1);
  }
  else
  {
    swift_release_n();
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v18(v10, v12);
  }

  *(void *)(v0 + 400) = v18;
  uint64_t v27 = *(void *)(v0 + 304);
  uint64_t v28 = *(void *)(v0 + 144);
  uint64_t v29 = type metadata accessor for TaskPriority();
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56);
  v30(v27, 1, 1, v29);
  outlined init with copy of AudioSessionAssertionManager(v28 + 152, v0 + 16);
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = 0;
  *(void *)(v31 + 24) = 0;
  outlined init with take of TypedPayloadDecoding((long long *)(v0 + 16), v31 + 32);
  uint64_t v32 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v27, (uint64_t)&async function pointer to partial apply for closure #1 in AttachmentDownloadTask.start(asset:), v31);
  *(void *)(v0 + 408) = v32;
  v30(v27, 1, 1, v29);
  uint64_t v33 = (void *)swift_allocObject();
  void v33[2] = 0;
  v33[3] = 0;
  v33[4] = v32;
  swift_retain();
  *(void *)(v0 + 416) = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v27, (uint64_t)&async function pointer to partial apply for closure #2 in AttachmentDownloadTask.start(asset:), (uint64_t)v33);
  long long v34 = (void *)swift_task_alloc();
  *(void *)(v0 + 424) = v34;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *(void *)(v0 + 432) = v35;
  *long long v34 = v0;
  v34[1] = AttachmentDownloadTask.start(asset:);
  long long v36 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v37 = MEMORY[0x1E4FBC0F0];
  return MEMORY[0x1F4187D90](v35, v32, v36, v35, v37);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 440) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 144);
  if (v0) {
    uint64_t v4 = AttachmentDownloadTask.start(asset:);
  }
  else {
    uint64_t v4 = AttachmentDownloadTask.start(asset:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  void *v19;
  uint64_t v20;

  uint64_t v19 = v0;
  MEMORY[0x1A624E310](v0[52], MEMORY[0x1E4FBC848] + 8, v0[54], MEMORY[0x1E4FBC0F0]);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v18 = v4;
    *(_DWORD *)uint64_t v3 = 136315138;
    uint64_t v5 = AttachmentDownloadTask.description.getter();
    v0[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v1, v2, "%s Requesting downloadToken", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v4, -1, -1);
    MEMORY[0x1A624F870](v3, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v7 = (void *)v0[18];
  os_log_type_t v8 = v7 + 19;
  BOOL v9 = v7[17];
  uint64_t v10 = v7[18];
  __swift_project_boxed_opaque_existential_1(v7 + 14, v9);
  uint64_t v11 = v7[22];
  uint64_t v12 = v7[23];
  __swift_project_boxed_opaque_existential_1(v8, v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 + 16) + **(int **)(v10 + 16));
  uint64_t v13 = (void *)swift_task_alloc();
  v0[56] = v13;
  *uint64_t v13 = v0;
  v13[1] = AttachmentDownloadTask.start(asset:);
  uint64_t v14 = v0[37];
  unint64_t v15 = v0[34];
  return v17(v14, v15, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 456) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[34];
  uint64_t v4 = v2[33];
  uint64_t v5 = v2[32];
  uint64_t v6 = v2[18];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v7 = AttachmentDownloadTask.start(asset:);
  }
  else {
    uint64_t v7 = AttachmentDownloadTask.start(asset:);
  }
  return MEMORY[0x1F4188298](v7, v6, 0);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;

  uint64_t v26 = v0;
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v25 = v4;
    *(_DWORD *)uint64_t v3 = 136315138;
    uint64_t v5 = AttachmentDownloadTask.description.getter();
    v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v1, v2, "%s Received downloadToken, fetching Asset", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v4, -1, -1);
    MEMORY[0x1A624F870](v3, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v7 = (void (*)(uint64_t, uint64_t, uint64_t))v0[48];
  os_log_type_t v8 = v0[45];
  BOOL v9 = v0[41];
  uint64_t v11 = v0[27];
  uint64_t v10 = v0[28];
  uint64_t v18 = v0[26];
  uint64_t v19 = v0[24];
  uint64_t v20 = v0[23];
  uint64_t v21 = v0[22];
  uint64_t v12 = v0[17];
  uint64_t v13 = v0[18];
  uint64_t v24 = *(void *)(v13 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_manager + 24);
  uint64_t v23 = *(void *)(v13 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_manager + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v13 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_manager), v24);
  v7(v8, v12, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v13 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_file, v18);
  dispatch thunk of Token.accountID.getter();
  dispatch thunk of Token.token.getter();
  type metadata accessor for Credential.Builder();
  swift_allocObject();
  Credential.Builder.init(tenantName:requestorID:accessToken:)();
  dispatch thunk of Token.expirationDate.getter();
  Credential.Builder.setExpirationDate(_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  Credential.Builder.build()();
  swift_release();
  AssetDownloadRequest.init(asset:fileURL:credential:)();
  unint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 + 24) + **(int **)(v23 + 24));
  uint64_t v14 = (void *)swift_task_alloc();
  v0[58] = v14;
  *uint64_t v14 = v0;
  v14[1] = AttachmentDownloadTask.start(asset:);
  unint64_t v15 = v0[43];
  unint64_t v16 = v0[31];
  return v22(v15, v16, v24, v23);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 472) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[31];
  uint64_t v4 = v2[30];
  uint64_t v5 = v2[29];
  uint64_t v6 = v2[18];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v7 = AttachmentDownloadTask.start(asset:);
  }
  else {
    uint64_t v7 = AttachmentDownloadTask.start(asset:);
  }
  return MEMORY[0x1F4188298](v7, v6, 0);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  unint64_t v16 = v0;
  (*(void (**)(void, void))(v0 + 400))(*(void *)(v0 + 344), *(void *)(v0 + 328));
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 288);
    uint64_t v13 = *(void *)(v0 + 280);
    uint64_t v14 = *(void *)(v0 + 296);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    unint64_t v15 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v6 = AttachmentDownloadTask.description.getter();
    *(void *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A375F000, v1, v2, "%s finished download", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v5, -1, -1);
    MEMORY[0x1A624F870](v4, -1, -1);
    swift_release();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v14, v13);
  }
  else
  {
    BOOL v9 = *(void *)(v0 + 288);
    os_log_type_t v8 = *(void *)(v0 + 296);
    uint64_t v10 = *(void *)(v0 + 280);
    swift_release();

    swift_release_n();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned char *v30;
  uint64_t (*v31)(void);
  uint64_t v33[2];
  void *v34;
  uint64_t v35;

  long long v34 = v0;
  uint64_t v1 = (void *)v0[59];
  swift_retain();
  uint64_t v2 = v1;
  swift_retain();
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (void *)v0[59];
    uint64_t v7 = swift_slowAlloc();
    v33[0] = swift_slowAlloc();
    os_log_type_t v8 = v33[0];
    *(_DWORD *)uint64_t v7 = 136315394;
    BOOL v9 = AttachmentDownloadTask.description.getter();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    v0[10] = v6;
    uint64_t v11 = v6;
    uint64_t v12 = String.init<A>(reflecting:)();
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v4, v5, "%s Failed to finish downloading, error: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v8, -1, -1);
    MEMORY[0x1A624F870](v7, -1, -1);
  }
  else
  {
    uint64_t v14 = (void *)v0[59];
    swift_release_n();
  }
  unint64_t v15 = (void *)v0[59];
  v0[7] = v15;
  unint64_t v16 = v15;
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[20] + 8))(v0[21], v0[19]);
    swift_retain_n();
    uint64_t v17 = Logger.logObject.getter();
    uint64_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      v33[0] = v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      uint64_t v21 = AttachmentDownloadTask.description.getter();
      v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v17, v18, "%s caught SimultaneousTransferError", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v20, -1, -1);
      MEMORY[0x1A624F870](v19, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t v26 = (void *)v0[59];
    uint64_t v27 = v0[36];
    uint64_t v28 = v0[37];
    uint64_t v29 = v0[35];
    lazy protocol witness table accessor for type AttachmentDownloadTask.Errors and conformance AttachmentDownloadTask.Errors();
    swift_allocError();
    *uint64_t v30 = 1;
    swift_willThrow();
    swift_release();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v29);
  }
  else
  {
    uint64_t v24 = v0[36];
    uint64_t v23 = v0[37];
    uint64_t v25 = v0[35];
    swift_willThrow();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = (uint64_t (*)(void))v0[1];
  return v31();
}

uint64_t closure #1 in AttachmentDownloadTask.start(asset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[15] = a5;
  v6[16] = a6;
  v6[14] = a4;
  uint64_t v7 = type metadata accessor for Signal();
  v6[17] = v7;
  v6[18] = *(void *)(v7 - 8);
  v6[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Signal?);
  v6[20] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>);
  v6[21] = v8;
  v6[22] = *(void *)(v8 - 8);
  v6[23] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>.Iterator);
  v6[24] = v9;
  v6[25] = *(void *)(v9 - 8);
  v6[26] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in AttachmentDownloadTask.start(asset:), 0, 0);
}

uint64_t closure #1 in AttachmentDownloadTask.start(asset:)()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[21];
  uint64_t v4 = (void *)v0[14];
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  v0[27] = JSONDecoder.init()();
  uint64_t v6 = v4[3];
  uint64_t v5 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v6, v5);
  MEMORY[0x1A624E3D0](v3);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_beginAccess();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[28] = v7;
  *uint64_t v7 = v0;
  v7[1] = closure #1 in AttachmentDownloadTask.start(asset:);
  uint64_t v8 = v0[24];
  uint64_t v9 = v0[20];
  return MEMORY[0x1F4187ED8](v9, 0, 0, v8, v0 + 12);
}

{
  uint64_t v0;
  uint64_t (*v1)();
  uint64_t v3;

  swift_task_dealloc();
  if (v0) {
    uint64_t v1 = closure #1 in AttachmentDownloadTask.start(asset:);
  }
  else {
    uint64_t v1 = closure #1 in AttachmentDownloadTask.start(asset:);
  }
  return MEMORY[0x1F4188298](v1, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  void *v32;
  uint64_t v33;

  uint64_t v32 = v0;
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[18];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[25] + 8))(v0[26], v0[24]);
    swift_release();
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = (uint64_t (*)(void))v0[1];
    return v23();
  }
  (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[19], v1, v2);
  uint64_t Strong = swift_weakLoadStrong();
  v0[29] = Strong;
  if (!Strong)
  {
    uint64_t v17 = v0[26];
    uint64_t v18 = v0[24];
    uint64_t v19 = v0[25];
    uint64_t v21 = v0[18];
    uint64_t v20 = v0[19];
    unint64_t v22 = v0[17];
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
    goto LABEL_9;
  }
  uint64_t v5 = Strong;
  if (one-time initialization token for downloadTask != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  v0[30] = __swift_project_value_buffer(v6, (uint64_t)static Log.downloadTask);
  swift_retain_n();
  uint64_t v7 = Logger.logObject.getter();
  uint64_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v31 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    v0[5] = 0;
    v0[6] = 0xE000000000000000;
    _StringGuts.grow(_:)(68);
    uint64_t v11 = v0[6];
    v0[7] = v0[5];
    v0[8] = v11;
    v12._object = (void *)0x80000001A3902080;
    v12._countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v12);
    v0[13] = v5;
    _print_unlocked<A, B>(_:_:)();
    v13._countAndFlagsBits = 0x3A6369706F74202CLL;
    v13._object = (void *)0xE900000000000020;
    String.append(_:)(v13);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DownloadAttachmentTopic);
    _print_unlocked<A, B>(_:_:)();
    v14._countAndFlagsBits = 0x203A656C6966202CLL;
    v14._object = (void *)0xE800000000000000;
    String.append(_:)(v14);
    type metadata accessor for URL();
    lazy protocol witness table accessor for type AssetSkeleton and conformance AssetSkeleton((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 0x686361747461202CLL;
    v16._object = (void *)0xEE00203A746E656DLL;
    String.append(_:)(v16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DownloadAttachment);
    _print_unlocked<A, B>(_:_:)();
    *(void *)(v9 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0[7], v0[8], &v31);
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A375F000, v7, v8, "%s Received signal blob, sending over to coordinator.", (uint8_t *)v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v10, -1, -1);
    MEMORY[0x1A624F870](v9, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v25 = (void *)v0[16];
  uint64_t v26 = v25[3];
  uint64_t v27 = v25[4];
  __swift_project_boxed_opaque_existential_1(v25, v26);
  uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 + 16) + **(int **)(v27 + 16));
  uint64_t v28 = (void *)swift_task_alloc();
  v0[31] = v28;
  *uint64_t v28 = v0;
  v28[1] = closure #1 in AttachmentDownloadTask.start(asset:);
  uint64_t v29 = v0[19];
  return v30(v29, v26, v27);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 256) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in AttachmentDownloadTask.start(asset:);
  }
  else {
    uint64_t v2 = closure #1 in AttachmentDownloadTask.start(asset:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v3 = v0[17];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[28] = v4;
  void *v4 = v0;
  v4[1] = closure #1 in AttachmentDownloadTask.start(asset:);
  uint64_t v5 = v0[24];
  uint64_t v6 = v0[20];
  return MEMORY[0x1F4187ED8](v6, 0, 0, v5, v0 + 12);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  void *v15;
  uint64_t v16;

  unint64_t v15 = v0;
  (*(void (**)(void, void))(v0[25] + 8))(v0[26], v0[24]);
  uint64_t v1 = (void *)v0[12];
  if (one-time initialization token for downloadTask != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.downloadTask);
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v14 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    v0[11] = v1;
    uint64_t v9 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v10 = String.init<A>(reflecting:)();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v5, v6, "Signal listener failed for: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v8, -1, -1);
    MEMORY[0x1A624F870](v7, -1, -1);
  }
  else
  {
  }
  swift_willThrow();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  uint64_t v24 = v0;
  uint64_t v1 = (void *)v0[32];
  uint64_t v2 = v1;
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (void *)v0[32];
    uint64_t v7 = v0[18];
    unint64_t v22 = v0[19];
    uint64_t v8 = v0[17];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v23 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    v0[10] = v6;
    uint64_t v11 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(reflecting:)();
    *(void *)(v9 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v23);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v4, v5, "Failed to handle updated attachment, reason: %s", (uint8_t *)v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v10, -1, -1);
    MEMORY[0x1A624F870](v9, -1, -1);

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v22, v8);
  }
  else
  {
    uint64_t v14 = (void *)v0[32];
    unint64_t v16 = v0[18];
    unint64_t v15 = v0[19];
    uint64_t v17 = v0[17];

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }
  uint64_t v18 = (void *)swift_task_alloc();
  v0[28] = v18;
  char *v18 = v0;
  v18[1] = closure #1 in AttachmentDownloadTask.start(asset:);
  uint64_t v19 = v0[24];
  uint64_t v20 = v0[20];
  return MEMORY[0x1F4187ED8](v20, 0, 0, v19, v0 + 12);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 32) + **(int **)(v3 + 32));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v4;
  void *v4 = v0;
  v4[1] = closure #1 in AttachmentDownloadTask.start(asset:);
  return v6(v2, v3);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t $defer #1 () in AttachmentDownloadTask.start(asset:)(uint64_t a1)
{
  if (one-time initialization token for downloadTask != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.downloadTask);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    v13[0] = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v7 = AttachmentDownloadTask.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v3, v4, "%s Cleaning up signalHandler", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v6, -1, -1);
    MEMORY[0x1A624F870](v5, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v9 = (uint64_t *)(a1 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_signalHandler);
  swift_beginAccess();
  uint64_t v10 = *v9;
  if (*v9)
  {
    swift_retain();
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    MEMORY[0x1A624E310](v10, MEMORY[0x1E4FBC848] + 8, v11, MEMORY[0x1E4FBC0F0]);
    swift_release();
  }
  *uint64_t v9 = 0;
  return swift_release();
}

uint64_t closure #1 in AttachmentDownloadTask.start(asset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x1F4188298](closure #1 in AttachmentDownloadTask.start(asset:), 0, 0);
}

uint64_t closure #2 in AttachmentDownloadTask.start(asset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v4[2] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock();
  v4[3] = v5;
  void v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #2 in AttachmentDownloadTask.start(asset:), 0, 0);
}

uint64_t closure #2 in AttachmentDownloadTask.start(asset:)()
{
  ContinuousClock.init()();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                        + async function pointer to specialized Clock.sleep(for:tolerance:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #2 in AttachmentDownloadTask.start(asset:);
  return v3(5000000000000000000, 0, 0, 0, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *(void *)(*(void *)v1 + 40);
  uint64_t v3 = *(void *)(*(void *)v1 + 32);
  uint64_t v4 = *(void *)(*(void *)v1 + 24);
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = closure #2 in AttachmentDownloadTask.start(asset:);
  }
  else {
    uint64_t v5 = closure #2 in AttachmentDownloadTask.start(asset:);
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  MEMORY[0x1A624E310](v1, MEMORY[0x1E4FBC848] + 8, v2, MEMORY[0x1E4FBC0F0]);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t AttachmentDownloadTask.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 112);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 152);
  uint64_t v1 = v0 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_file;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_manager);
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t AttachmentDownloadTask.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 112);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 152);
  uint64_t v1 = v0 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_file;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_manager);
  swift_release();
  swift_defaultActor_destroy();

  return MEMORY[0x1F4188210](v0);
}

uint64_t AttachmentDownloadTask.unownedExecutor.getter()
{
  return v0;
}

uint64_t specialized AttachmentDownloadTask.__allocating_init(topic:attachment:file:manager:)(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v25 = a6;
  uint64_t v26 = a8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v24);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(boxed_opaque_existential_1, a1, a6);
  uint64_t v22 = a7;
  uint64_t v23 = a9;
  unint64_t v16 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v21);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(v16, a2, a7);
  type metadata accessor for AttachmentDownloadTask();
  uint64_t v17 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v17 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_signalHandler) = 0;
  outlined init with take of TypedPayloadDecoding(&v24, v17 + 112);
  outlined init with take of TypedPayloadDecoding(&v21, v17 + 152);
  uint64_t v18 = v17 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_file;
  uint64_t v19 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v18, a3, v19);
  outlined init with take of TypedPayloadDecoding(a4, v17 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_manager);
  return v17;
}

uint64_t sub_1A3860DE4()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1A3860E1C()
{
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 80);

  return MEMORY[0x1F4186498](v0, 120, 7);
}

uint64_t partial apply for closure #1 in AttachmentDownloadTask.start(asset:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[9];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in AttachmentDownloadTask.start(asset:)(a1, v4, v5, (uint64_t)(v1 + 4), v6, (uint64_t)(v1 + 10));
}

uint64_t sub_1A3860F38()
{
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t partial apply for closure #1 in AttachmentDownloadTask.start(asset:)()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  v2[2] = v0 + 32;
  return MEMORY[0x1F4188298](closure #1 in AttachmentDownloadTask.start(asset:), 0, 0);
}

uint64_t sub_1A3861020()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #2 in AttachmentDownloadTask.start(asset:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #2 in AttachmentDownloadTask.start(asset:)(a1, v4, v5, v6);
}

uint64_t sub_1A386116C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(*a1 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_signalHandler);
  swift_beginAccess();
  *a2 = *v3;
  return swift_retain();
}

uint64_t dispatch thunk of DownloadAttachment.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DownloadAttachment.assetSkeleton.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 16) + **(int **)(a3 + 16));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of DownloadAttachment.signal.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of DownloadAttachment.waitForUploadFinished()(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 32) + **(int **)(a2 + 32));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v7(a1, a2);
}

uint64_t dispatch thunk of DownloadAttachmentTopic.attachmentsPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DownloadAttachmentTopic.requestDownloadToken(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 16) + **(int **)(a4 + 16));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v11(a1, a2, a3, a4);
}

uint64_t ObjC metadata update function for AttachmentDownloadTask()
{
  return type metadata accessor for AttachmentDownloadTask();
}

uint64_t type metadata accessor for AttachmentDownloadTask()
{
  uint64_t result = type metadata singleton initialization cache for AttachmentDownloadTask;
  if (!type metadata singleton initialization cache for AttachmentDownloadTask) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for AttachmentDownloadTask()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for AttachmentDownloadTask(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AttachmentDownloadTask);
}

uint64_t dispatch thunk of AttachmentDownloadTask.signalHandler.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of AttachmentDownloadTask.signalHandler.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of AttachmentDownloadTask.signalHandler.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of AttachmentDownloadTask.__allocating_init(topic:attachment:file:manager:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of AttachmentDownloadTask.start()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 160) + **(int **)(*(void *)v0 + 160));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v4();
}

uint64_t dispatch thunk of AttachmentDownloadTask.start(asset:)(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 168) + **(int **)(*(void *)v1 + 168));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v6(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;

  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 176) + **(int **)(*(void *)v1 + 176));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v6(a1);
}

unsigned char *storeEnumTagSinglePayload for AttachmentDownloadTask.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A3861A74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttachmentDownloadTask.Errors()
{
  return &type metadata for AttachmentDownloadTask.Errors;
}

uint64_t sub_1A3861AAC()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>.Continuation);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in Attachment.signal.getter(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>.Continuation)
                 - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return closure #1 in closure #1 in Attachment.signal.getter(a1, v5, v6, v7, v8);
}

uint64_t lazy protocol witness table accessor for type AssetSkeleton and conformance AssetSkeleton(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _SpatialTemplateElementOutput.output.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  long long v3 = *(_OWORD *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 48);
  char v7 = *(unsigned char *)(v1 + 96);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 48) = v6;
  long long v8 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  *(unsigned char *)(a1 + 96) = v7;
  return swift_bridgeObjectRetain();
}

__n128 _SpatialTemplateElementOutput.init(output:)@<Q0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)a1 + 5);
  uint64_t v3 = *((void *)a1 + 6);
  char v4 = *((unsigned char *)a1 + 96);
  long long v6 = *a1;
  long long v5 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(void *)(a2 + 40) = v2;
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 48) = v3;
  __n128 result = (__n128)a1[4];
  long long v8 = a1[5];
  *(__n128 *)(a2 + 64) = result;
  *(_OWORD *)(a2 + 80) = v8;
  *(unsigned char *)(a2 + 96) = v4;
  return result;
}

__n128 SpatialTemplateSeatElement.position.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  unint64_t v3 = v1[1].n128_u64[1];
  a1[1].n128_u64[0] = v1[1].n128_u64[0];
  a1[1].n128_u64[1] = v3;
  *a1 = result;
  return result;
}

__n128 SpatialTemplateSeatElement.direction.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 80);
  *(void *)a1 = *(void *)(v1 + 32);
  __n128 result = *(__n128 *)(v1 + 48);
  long long v4 = *(_OWORD *)(v1 + 64);
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 48) = v2;
  return result;
}

uint64_t SpatialTemplateSeatElement.role.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of URL?(v1 + 88, a1, &demangling cache variable for type metadata for SpatialTemplateRole?);
}

__n128 SpatialTemplateSeatElement._output.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  outlined init with copy of URL?((uint64_t)v1 + 88, (uint64_t)v15, &demangling cache variable for type metadata for SpatialTemplateRole?);
  uint64_t v4 = v16;
  if (v16)
  {
    uint64_t v5 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    SpatialTemplateRole.output.getter(v5, v14);
    uint64_t v4 = v14[0];
    uint64_t v6 = v14[1];
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v15, &demangling cache variable for type metadata for SpatialTemplateRole?);
    uint64_t v6 = 0;
  }
  long long v7 = *v2;
  uint64_t v8 = *((void *)v2 + 2);
  uint64_t v9 = *((void *)v2 + 3);
  uint64_t v10 = *((void *)v2 + 4);
  char v11 = *((unsigned char *)v2 + 80);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 16) = v7;
  *(void *)(a1 + 48) = v10;
  __n128 result = (__n128)v2[3];
  long long v13 = v2[4];
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v13;
  *(unsigned char *)(a1 + 96) = v11;
  return result;
}

double static SpatialTemplateElementPosition.app.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

__n128 static SpatialTemplateElementDirection.lookingAt(_:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v3 = a1[1].n128_u64[0];
  unint64_t v2 = a1[1].n128_u64[1];
  __n128 result = *a1;
  a2->n128_u64[0] = 0;
  a2[1] = result;
  a2[2].n128_u64[0] = v3;
  a2[2].n128_u64[1] = v2;
  a2[3].n128_u8[0] = 0;
  return result;
}

uint64_t SpatialTemplateSeatElement.init(position:direction:role:)@<X0>(long long *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v4 = *a1;
  uint64_t v5 = *((void *)a1 + 3);
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 48);
  *(void *)(a4 + 16) = *((void *)a1 + 2);
  *(void *)(a4 + 24) = v5;
  *(_OWORD *)a4 = v4;
  *(void *)(a4 + 32) = v6;
  long long v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a4 + 48) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a4 + 64) = v8;
  *(unsigned char *)(a4 + 80) = v7;
  return outlined init with take of SpatialTemplateRole?(a3, a4 + 88);
}

BOOL static SpatialTemplateElementPosition.== infix(_:_:)(double *a1, double *a2)
{
  BOOL v2 = *a1 == *a2;
  if (a1[1] != a2[1]) {
    BOOL v2 = 0;
  }
  return a1[2] == a2[2] && v2;
}

uint64_t SpatialTemplateSeatElement.hash(into:)()
{
  Hasher._combine(_:)(0);
  SPVector3D.hash(into:)();
  uint64_t v1 = *(void *)(v0 + 48);
  char v2 = *(unsigned char *)(v0 + 80);
  SPAngle.hash(into:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  outlined init with copy of URL?(v0 + 88, (uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((void *)&v8 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v7, (uint64_t)v10);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v10, 0, sizeof(v10));
    uint64_t v11 = 0;
  }
  outlined init with copy of URL?((uint64_t)v10, (uint64_t)&v7, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((void *)&v8 + 1))
  {
    long long v4 = v7;
    long long v5 = v8;
    uint64_t v6 = v9;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v4, *((uint64_t *)&v5 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v10, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
}

Swift::Int SpatialTemplateSeatElement.hashValue.getter()
{
  uint64_t v1 = v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  SPVector3D.hash(into:)();
  uint64_t v2 = *(void *)(v0 + 48);
  char v3 = *(unsigned char *)(v0 + 80);
  SPAngle.hash(into:)();
  if (v3)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  outlined init with copy of URL?(v1 + 88, (uint64_t)&v8, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((void *)&v9 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v8, (uint64_t)v11);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v8, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v11, 0, sizeof(v11));
    uint64_t v12 = 0;
  }
  outlined init with copy of URL?((uint64_t)v11, (uint64_t)&v8, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((void *)&v9 + 1))
  {
    long long v5 = v8;
    long long v6 = v9;
    uint64_t v7 = v10;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v5, *((uint64_t *)&v6 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v5);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v11, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  return Hasher._finalize()();
}

__n128 protocol witness for SpatialTemplateElement.position.getter in conformance SpatialTemplateSeatElement@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  unint64_t v3 = v1[1].n128_u64[1];
  a1[1].n128_u64[0] = v1[1].n128_u64[0];
  a1[1].n128_u64[1] = v3;
  *a1 = result;
  return result;
}

__n128 protocol witness for SpatialTemplateElement.direction.getter in conformance SpatialTemplateSeatElement@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 80);
  *(void *)a1 = *(void *)(v1 + 32);
  __n128 result = *(__n128 *)(v1 + 48);
  long long v4 = *(_OWORD *)(v1 + 64);
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 48) = v2;
  return result;
}

uint64_t protocol witness for SpatialTemplateElement.role.getter in conformance SpatialTemplateSeatElement@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of URL?(v1 + 88, a1, &demangling cache variable for type metadata for SpatialTemplateRole?);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SpatialTemplateSeatElement()
{
  Hasher._combine(_:)(0);
  SPVector3D.hash(into:)();
  uint64_t v1 = *(void *)(v0 + 48);
  char v2 = *(unsigned char *)(v0 + 80);
  SPAngle.hash(into:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  outlined init with copy of URL?(v0 + 88, (uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((void *)&v8 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v7, (uint64_t)v10);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v7, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v10, 0, sizeof(v10));
    uint64_t v11 = 0;
  }
  outlined init with copy of URL?((uint64_t)v10, (uint64_t)&v7, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((void *)&v8 + 1))
  {
    long long v4 = v7;
    long long v5 = v8;
    uint64_t v6 = v9;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v4, *((uint64_t *)&v5 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v10, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SpatialTemplateSeatElement()
{
  uint64_t v1 = v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  SPVector3D.hash(into:)();
  uint64_t v2 = *(void *)(v0 + 48);
  char v3 = *(unsigned char *)(v0 + 80);
  SPAngle.hash(into:)();
  if (v3)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  outlined init with copy of URL?(v1 + 88, (uint64_t)&v8, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (*((void *)&v9 + 1))
  {
    outlined init with take of TypedPayloadDecoding(&v8, (uint64_t)v11);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v8, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v11, 0, sizeof(v11));
    uint64_t v12 = 0;
  }
  outlined init with copy of URL?((uint64_t)v11, (uint64_t)&v8, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (*((void *)&v9 + 1))
  {
    long long v5 = v8;
    long long v6 = v9;
    uint64_t v7 = v10;
    Hasher._combine(_:)(1u);
    __swift_project_boxed_opaque_existential_1(&v5, *((uint64_t *)&v6 + 1));
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of AnySpatialTemplateRole((uint64_t)&v5);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v11, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  return Hasher._finalize()();
}

__n128 static SpatialTemplateElement<>.seat(position:direction:role:)@<Q0>(long long *a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v6 = *((void *)a1 + 3);
  unint64_t v7 = a2->n128_u64[0];
  __n128 v12 = a2[1];
  long long v13 = *a1;
  unint64_t v8 = a2[2].n128_u64[0];
  unint64_t v9 = a2[2].n128_u64[1];
  unsigned __int8 v10 = a2[3].n128_u8[0];
  outlined init with copy of URL?(a3, a4 + 88, &demangling cache variable for type metadata for SpatialTemplateRole?);
  *(void *)(a4 + 16) = v5;
  *(void *)(a4 + 24) = v6;
  *(_OWORD *)a4 = v13;
  *(void *)(a4 + 32) = v7;
  __n128 result = v12;
  *(__n128 *)(a4 + 48) = v12;
  *(void *)(a4 + 64) = v8;
  *(void *)(a4 + 72) = v9;
  *(unsigned char *)(a4 + 80) = v10;
  return result;
}

__n128 SpatialTemplateElementDirection.output.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 48);
  *(void *)a1 = *(void *)v1;
  __n128 result = *(__n128 *)(v1 + 16);
  long long v4 = *(_OWORD *)(v1 + 32);
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 48) = v2;
  return result;
}

__n128 SpatialTemplateElementDirection.init(output:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 48);
  *(void *)a2 = *(void *)a1;
  __n128 result = *(__n128 *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v4;
  *(unsigned char *)(a2 + 48) = v2;
  return result;
}

__n128 static SpatialTemplateElementDirection.lookingAt(_:)@<Q0>(void *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  (*(void (**)(__n128 *__return_ptr, uint64_t, uint64_t))(v4 + 16))(&v8, v3, v4);
  unint64_t v6 = v9;
  unint64_t v5 = v10;
  __n128 result = v8;
  a2->n128_u64[0] = 0;
  a2[1] = result;
  a2[2].n128_u64[0] = v6;
  a2[2].n128_u64[1] = v5;
  a2[3].n128_u8[0] = 0;
  return result;
}

unsigned char *static SpatialTemplateElementDirection.alignedWith(appAxis:)@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result == 0;
  *(void *)a2 = 0;
  uint64_t v3 = 2;
  if (v2) {
    uint64_t v3 = 0;
  }
  *(void *)(a2 + 16) = v3;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 48) = 1;
  return result;
}

__n128 static SpatialTemplateElementDirection.+ infix(_:_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  char v3 = *(unsigned char *)(a1 + 48);
  *(double *)a2 = *(double *)a1 + a3;
  __n128 result = *(__n128 *)(a1 + 16);
  long long v5 = *(_OWORD *)(a1 + 32);
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v5;
  *(unsigned char *)(a2 + 48) = v3;
  return result;
}

double SpatialTemplateElementDirection.rotatedBy(_:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v3 = *(void *)(v2 + 16);
  char v4 = *(unsigned char *)(v2 + 48);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v3 = *(void *)(v2 + 16);
    long long v6 = 0uLL;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 40);
    long long v6 = *(_OWORD *)(v2 + 24);
  }
  double result = *(double *)v2 + a2;
  *(double *)a1 = result;
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = v6;
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = v4;
  return result;
}

void SpatialTemplateElementDirection.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 48);
  SPAngle.hash(into:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
}

Swift::Int SpatialTemplateElementDirection.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 48);
  Hasher.init(_seed:)();
  SPAngle.hash(into:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SpatialTemplateElementDirection()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 48);
  Hasher.init(_seed:)();
  SPAngle.hash(into:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SpatialTemplateElementDirection()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 48);
  SPAngle.hash(into:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SpatialTemplateElementDirection()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 48);
  Hasher.init(_seed:)();
  SPAngle.hash(into:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
    SPVector3D.hash(into:)();
  }
  return Hasher._finalize()();
}

uint64_t SpatialTemplateElementAxis.storage.getter()
{
  return *v0;
}

BOOL static SpatialTemplateElementAxis.Storage.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void SpatialTemplateElementAxis.Storage.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int SpatialTemplateElementAxis.Storage.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

GroupActivities::SpatialTemplateElementAxis __swiftcall SpatialTemplateElementAxis.init(storage:)(GroupActivities::SpatialTemplateElementAxis storage)
{
  *uint64_t v1 = storage.storage & 1;
  return storage;
}

void static SpatialTemplateElementAxis.x.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static SpatialTemplateElementAxis.z.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void SpatialTemplateElementAxis.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static SpatialTemplateElementAxis.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int SpatialTemplateElementAxis.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

__n128 SpatialTemplateElementPosition.output.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  unint64_t v3 = v1[1].n128_u64[1];
  a1[1].n128_u64[0] = v1[1].n128_u64[0];
  a1[1].n128_u64[1] = v3;
  *a1 = result;
  return result;
}

__n128 SpatialTemplateElementPosition.init(output:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  unint64_t v3 = a1[1].n128_u64[1];
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  a2[1].n128_u64[1] = v3;
  *a2 = result;
  return result;
}

void SpatialTemplateElementPosition.offsetBy(x:z:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  SPVector3DMake(*v3 + a2, v3[1], v3[2] + a3, a1);
}

void SpatialTemplateElementPosition.offsetBy(x:)(double *a1@<X8>, double a2@<D0>)
{
  SPVector3DMake(*v2 + a2, v2[1], v2[2] + 0.0, a1);
}

void SpatialTemplateElementPosition.offsetBy(z:)(double *a1@<X8>, double a2@<D0>)
{
  SPVector3DMake(*v2 + 0.0, v2[1], v2[2] + a2, a1);
}

uint64_t SpatialTemplateElementPosition.hash(into:)()
{
  return SPVector3D.hash(into:)();
}

Swift::Int SpatialTemplateElementPosition.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SpatialTemplateElementPosition()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SpatialTemplateElementPosition()
{
  return SPVector3D.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SpatialTemplateElementPosition()
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SpatialTemplateElementPosition(double *a1, double *a2)
{
  BOOL v2 = *a1 == *a2;
  if (a1[1] != a2[1]) {
    BOOL v2 = 0;
  }
  return a1[2] == a2[2] && v2;
}

uint64_t specialized static SpatialTemplateSeatElement.== infix(_:_:)(double *a1, double *a2)
{
  double v4 = *a1;
  double v5 = a1[1];
  double v6 = a1[2];
  double v7 = *a2;
  double v8 = a2[1];
  double v9 = a2[2];
  outlined init with copy of SpatialTemplateSeatElement((uint64_t)a1, (uint64_t)v49);
  outlined init with copy of SpatialTemplateSeatElement((uint64_t)a2, (uint64_t)v43);
  if (v4 != v7 || v5 != v8 || v6 != v9)
  {
    outlined destroy of SpatialTemplateSeatElement((uint64_t)v43);
    outlined destroy of SpatialTemplateSeatElement((uint64_t)v49);
LABEL_22:
    outlined init with copy of SpatialTemplateSeatElement((uint64_t)a1, (uint64_t)v41);
    outlined init with copy of SpatialTemplateSeatElement((uint64_t)a2, (uint64_t)v39);
    outlined destroy of SpatialTemplateSeatElement((uint64_t)v39);
    outlined destroy of SpatialTemplateSeatElement((uint64_t)v41);
    char v24 = 0;
    return v24 & 1;
  }
  double v12 = v50;
  double v13 = v51;
  double v14 = v52;
  double v15 = v53;
  char v16 = v54;
  outlined destroy of SpatialTemplateSeatElement((uint64_t)v49);
  double v17 = v44;
  double v18 = v45;
  double v19 = v46;
  double v20 = v47;
  char v21 = v48;
  outlined destroy of SpatialTemplateSeatElement((uint64_t)v43);
  if (v12 != v17) {
    goto LABEL_22;
  }
  if (v16)
  {
    if ((v21 & 1) == 0 || LOBYTE(v18) != LOBYTE(v13)) {
      goto LABEL_22;
    }
  }
  else
  {
    if (v21) {
      goto LABEL_22;
    }
    BOOL v22 = v13 == v18 && v14 == v19;
    if (!v22 || v15 != v20) {
      goto LABEL_22;
    }
  }
  outlined init with copy of SpatialTemplateSeatElement((uint64_t)a1, (uint64_t)v41);
  outlined init with copy of SpatialTemplateSeatElement((uint64_t)a2, (uint64_t)v39);
  outlined init with copy of URL?((uint64_t)&v42, (uint64_t)&v30, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (v31)
  {
    outlined init with take of TypedPayloadDecoding(&v30, (uint64_t)v37);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v30, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v37, 0, sizeof(v37));
    uint64_t v38 = 0;
  }
  outlined init with copy of URL?((uint64_t)&v40, (uint64_t)&v30, &demangling cache variable for type metadata for SpatialTemplateRole?);
  if (v31)
  {
    outlined init with take of TypedPayloadDecoding(&v30, (uint64_t)v35);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v30, &demangling cache variable for type metadata for SpatialTemplateRole?);
    memset(v35, 0, sizeof(v35));
    uint64_t v36 = 0;
  }
  outlined init with copy of URL?((uint64_t)v37, (uint64_t)&v30, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  outlined init with copy of URL?((uint64_t)v35, (uint64_t)&v32, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
  if (v31)
  {
    outlined init with copy of URL?((uint64_t)&v30, (uint64_t)v29, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    if (*((void *)&v33 + 1))
    {
      v27[0] = v32;
      v27[1] = v33;
      uint64_t v28 = v34;
      char v24 = specialized static AnySpatialTemplateRole.== infix(_:_:)((uint64_t)v29, (uint64_t)v27);
      outlined destroy of AnySpatialTemplateRole((uint64_t)v27);
      uint64_t v26 = &demangling cache variable for type metadata for AnySpatialTemplateRole?;
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v35, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v37, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      outlined destroy of SpatialTemplateSeatElement((uint64_t)v39);
      outlined destroy of SpatialTemplateSeatElement((uint64_t)v41);
      outlined destroy of AnySpatialTemplateRole((uint64_t)v29);
    }
    else
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v35, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v37, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
      outlined destroy of SpatialTemplateSeatElement((uint64_t)v39);
      outlined destroy of SpatialTemplateSeatElement((uint64_t)v41);
      outlined destroy of AnySpatialTemplateRole((uint64_t)v29);
      char v24 = 0;
      uint64_t v26 = &demangling cache variable for type metadata for (AnySpatialTemplateRole?, AnySpatialTemplateRole?);
    }
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v35, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v37, &demangling cache variable for type metadata for AnySpatialTemplateRole?);
    outlined destroy of SpatialTemplateSeatElement((uint64_t)v39);
    outlined destroy of SpatialTemplateSeatElement((uint64_t)v41);
    if (*((void *)&v33 + 1)) {
      uint64_t v26 = &demangling cache variable for type metadata for (AnySpatialTemplateRole?, AnySpatialTemplateRole?);
    }
    else {
      uint64_t v26 = &demangling cache variable for type metadata for AnySpatialTemplateRole?;
    }
    if (*((void *)&v33 + 1)) {
      char v24 = 0;
    }
    else {
      char v24 = -1;
    }
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v30, v26);
  return v24 & 1;
}

BOOL specialized static SpatialTemplateElementDirection.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2) {
    return 0;
  }
  double v2 = *(double *)(a1 + 16);
  double v3 = *(double *)(a2 + 16);
  if ((*(unsigned char *)(a1 + 48) & 1) == 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 1) == 0)
    {
      BOOL v4 = v2 == v3 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
      if (v4 && *(double *)(a1 + 32) == *(double *)(a2 + 32)) {
        return 1;
      }
    }
    return 0;
  }
  return (*(unsigned char *)(a2 + 48) & 1) != 0 && LOBYTE(v3) == LOBYTE(v2);
}

void SPVector3DMake(double a1@<D0>, double a2@<D1>, double a3@<D2>, double *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  a4[2] = a3;
}

unint64_t instantiation function for generic protocol witness table for SpatialTemplateSeatElement(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SpatialTemplateSeatElement and conformance SpatialTemplateSeatElement();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplateSeatElement and conformance SpatialTemplateSeatElement()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialTemplateSeatElement and conformance SpatialTemplateSeatElement;
  if (!lazy protocol witness table cache variable for type SpatialTemplateSeatElement and conformance SpatialTemplateSeatElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplateSeatElement and conformance SpatialTemplateSeatElement);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpatialTemplateSeatElement and conformance SpatialTemplateSeatElement;
  if (!lazy protocol witness table cache variable for type SpatialTemplateSeatElement and conformance SpatialTemplateSeatElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplateSeatElement and conformance SpatialTemplateSeatElement);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplateElementDirection and conformance SpatialTemplateElementDirection()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialTemplateElementDirection and conformance SpatialTemplateElementDirection;
  if (!lazy protocol witness table cache variable for type SpatialTemplateElementDirection and conformance SpatialTemplateElementDirection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplateElementDirection and conformance SpatialTemplateElementDirection);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplateElementAxis.Storage and conformance SpatialTemplateElementAxis.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialTemplateElementAxis.Storage and conformance SpatialTemplateElementAxis.Storage;
  if (!lazy protocol witness table cache variable for type SpatialTemplateElementAxis.Storage and conformance SpatialTemplateElementAxis.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplateElementAxis.Storage and conformance SpatialTemplateElementAxis.Storage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplateElementAxis and conformance SpatialTemplateElementAxis()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialTemplateElementAxis and conformance SpatialTemplateElementAxis;
  if (!lazy protocol witness table cache variable for type SpatialTemplateElementAxis and conformance SpatialTemplateElementAxis)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplateElementAxis and conformance SpatialTemplateElementAxis);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialTemplateElementPosition and conformance SpatialTemplateElementPosition()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialTemplateElementPosition and conformance SpatialTemplateElementPosition;
  if (!lazy protocol witness table cache variable for type SpatialTemplateElementPosition and conformance SpatialTemplateElementPosition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialTemplateElementPosition and conformance SpatialTemplateElementPosition);
  }
  return result;
}

uint64_t dispatch thunk of SpatialTemplateElement.position.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SpatialTemplateElement.direction.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SpatialTemplateElement.role.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SpatialTemplateElement._output.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t initializeWithCopy for _SpatialTemplateElementOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _SpatialTemplateElementOutput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 64);
  long long v8 = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  return a1;
}

__n128 __swift_memcpy97_16(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for _SpatialTemplateElementOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  long long v5 = *(_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SpatialTemplateElementOutput(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 97)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _SpatialTemplateElementOutput(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 96) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 97) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 97) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _SpatialTemplateElementOutput()
{
  return &type metadata for _SpatialTemplateElementOutput;
}

uint64_t destroy for SpatialTemplateSeatElement(uint64_t result)
{
  if (*(void *)(result + 112)) {
    return __swift_destroy_boxed_opaque_existential_1Tm(result + 88);
  }
  return result;
}

uint64_t initializeWithCopy for SpatialTemplateSeatElement(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v6 = a1 + 88;
  uint64_t v7 = a2 + 88;
  uint64_t v8 = *(void *)(a2 + 112);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = v8;
    *(void *)(a1 + 120) = v9;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(v6, v7);
  }
  else
  {
    long long v10 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
    *(_OWORD *)(v6 + 16) = v10;
    *(void *)(v6 + 32) = *(void *)(v7 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for SpatialTemplateSeatElement(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v5 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v5;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 32) = a2[4];
  long long v6 = *((_OWORD *)a2 + 3);
  long long v7 = *((_OWORD *)a2 + 4);
  *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  uint64_t v8 = a1 + 88;
  uint64_t v9 = (long long *)(a2 + 11);
  uint64_t v10 = a2[14];
  if (!*(void *)(a1 + 112))
  {
    if (v10)
    {
      *(void *)(a1 + 112) = v10;
      *(void *)(a1 + 120) = a2[15];
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 88, (uint64_t)(a2 + 11));
      return a1;
    }
LABEL_7:
    long long v11 = *v9;
    long long v12 = v9[1];
    *(void *)(v8 + 32) = *((void *)v9 + 4);
    *(_OWORD *)uint64_t v8 = v11;
    *(_OWORD *)(v8 + 16) = v12;
    return a1;
  }
  if (!v10)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 88);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 88), a2 + 11);
  return a1;
}

__n128 __swift_memcpy128_16(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for SpatialTemplateSeatElement(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  uint64_t v5 = *((void *)a2 + 3);
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(void *)(a1 + 24) = v5;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  long long v6 = a2[4];
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_OWORD *)(a1 + 64) = v6;
  *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
  uint64_t v7 = a1 + 88;
  if (*(void *)(a1 + 112)) {
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 88);
  }
  long long v8 = *(long long *)((char *)a2 + 104);
  *(_OWORD *)uint64_t v7 = *(long long *)((char *)a2 + 88);
  *(_OWORD *)(v7 + 16) = v8;
  *(void *)(v7 + 32) = *((void *)a2 + 15);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpatialTemplateSeatElement(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 112);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SpatialTemplateSeatElement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 128) = 0;
    }
    if (a2) {
      *(void *)(result + 112) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialTemplateSeatElement()
{
  return &type metadata for SpatialTemplateSeatElement;
}

__n128 __swift_memcpy49_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for SpatialTemplateElementDirection()
{
  return &type metadata for SpatialTemplateElementDirection;
}

ValueMetadata *type metadata accessor for SpatialTemplateElementAxis()
{
  return &type metadata for SpatialTemplateElementAxis;
}

unsigned char *storeEnumTagSinglePayload for SpatialTemplateElementAxis(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A3863AF0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialTemplateElementAxis.Storage()
{
  return &type metadata for SpatialTemplateElementAxis.Storage;
}

ValueMetadata *type metadata accessor for SpatialTemplateElementPosition()
{
  return &type metadata for SpatialTemplateElementPosition;
}

uint64_t outlined init with copy of SpatialTemplateSeatElement(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  long long v5 = *(_OWORD *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 48);
  long long v7 = *(_OWORD *)(a1 + 64);
  *(unsigned char *)(a2 + 80) = *(unsigned char *)(a1 + 80);
  *(_OWORD *)(a2 + 48) = v6;
  *(_OWORD *)(a2 + 64) = v7;
  *(_OWORD *)(a2 + 32) = v5;
  uint64_t v8 = a2 + 88;
  uint64_t v9 = (long long *)(a1 + 88);
  uint64_t v10 = *(void *)(a1 + 112);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 120);
    *(void *)(a2 + 112) = v10;
    *(void *)(a2 + 120) = v11;
    (**(void (***)(uint64_t, long long *))(v10 - 8))(v8, v9);
  }
  else
  {
    long long v12 = *v9;
    long long v13 = *(_OWORD *)(a1 + 104);
    *(void *)(v8 + 32) = *(void *)(a1 + 120);
    *(_OWORD *)uint64_t v8 = v12;
    *(_OWORD *)(v8 + 16) = v13;
  }
  return a2;
}

uint64_t outlined destroy of SpatialTemplateSeatElement(uint64_t a1)
{
  if (*(void *)(a1 + 112)) {
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 88);
  }
  return a1;
}

uint64_t GroupSession.showNotice(_:)(uint64_t a1)
{
  long long v2 = v1;
  uint64_t v48 = *v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  double v51 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for DispatchQoS();
  uint64_t v50 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52);
  uint64_t v49 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionEvent?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  long long v13 = (char *)&v41 - v12;
  uint64_t v14 = type metadata accessor for GroupSessionEvent();
  uint64_t v54 = *(void *)(v14 - 8);
  uint64_t v15 = *(void *)(v54 + 64);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v46 = (uint64_t)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v53 = (uint64_t)&v41 - v18;
  MEMORY[0x1F4188790](v17);
  double v20 = (char *)&v41 - v19;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Log.default);
  uint64_t v47 = a1;
  outlined init with copy of GroupSessionEvent(a1, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for GroupSessionEvent);
  swift_retain();
  BOOL v22 = Logger.logObject.getter();
  int v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, (os_log_type_t)v23))
  {
    int v43 = v23;
    uint64_t v44 = v5;
    uint64_t v45 = v4;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    aBlock[0] = v42;
    *(_DWORD *)uint64_t v24 = 136315394;
    uint64_t v25 = GroupSession.description.getter();
    uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, aBlock);
    uint64_t v41 = aBlock;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2080;
    outlined init with copy of GroupSessionEvent((uint64_t)v20, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for GroupSessionEvent);
    uint64_t v27 = v54;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v13, 0, 1, v14);
    outlined init with copy of URL?((uint64_t)v13, (uint64_t)v11, &demangling cache variable for type metadata for GroupSessionEvent?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v11, 1, v14) == 1)
    {
      unint64_t v28 = 0xE300000000000000;
      uint64_t v29 = 7104878;
    }
    else
    {
      uint64_t v30 = v53;
      outlined init with take of GroupSessionEvent((uint64_t)v11, v53, (uint64_t (*)(void))type metadata accessor for GroupSessionEvent);
      outlined init with copy of GroupSessionEvent(v30, v46, (uint64_t (*)(void))type metadata accessor for GroupSessionEvent);
      uint64_t v29 = String.init<A>(reflecting:)();
      unint64_t v28 = v31;
      outlined destroy of GroupSessionEvent(v30, (uint64_t (*)(void))type metadata accessor for GroupSessionEvent);
    }
    uint64_t v5 = v44;
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v13, &demangling cache variable for type metadata for GroupSessionEvent?);
    uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v28, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of GroupSessionEvent((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for GroupSessionEvent);
    _os_log_impl(&dword_1A375F000, v22, (os_log_type_t)v43, "Application posted event on %s event: %s", (uint8_t *)v24, 0x16u);
    uint64_t v32 = v42;
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v32, -1, -1);
    MEMORY[0x1A624F870](v24, -1, -1);

    uint64_t v4 = v45;
  }
  else
  {
    swift_release();
    outlined destroy of GroupSessionEvent((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for GroupSessionEvent);
  }
  uint64_t v33 = v53;
  outlined init with copy of GroupSessionEvent(v47, v53, (uint64_t (*)(void))type metadata accessor for GroupSessionEvent);
  unint64_t v34 = (*(unsigned __int8 *)(v54 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
  uint64_t v35 = (void *)swift_allocObject();
  uint64_t v36 = v48;
  _OWORD v35[2] = *(void *)(v48 + 80);
  uint64_t v35[3] = *(void *)(v36 + 88);
  v35[4] = v2;
  outlined init with take of GroupSessionEvent(v33, (uint64_t)v35 + v34, (uint64_t (*)(void))type metadata accessor for GroupSessionEvent);
  aBlock[4] = (uint64_t)partial apply for closure #1 in GroupSession.showNotice(_:);
  aBlock[5] = (uint64_t)v35;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_8;
  uint64_t v37 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v38 = v49;
  static DispatchQoS.unspecified.getter();
  uint64_t v55 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  uint64_t v39 = v51;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1A624E5F0](0, v38, v39, v37);
  _Block_release(v37);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v39, v4);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v38, v52);
  return swift_release();
}

uint64_t GroupSessionEvent.init(originator:avCommand:rate:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v10 == v11) {
    goto LABEL_14;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v13) {
    goto LABEL_15;
  }
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v16 == v17)
  {
LABEL_14:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v22 = v21;
      if (v20 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v22 == v23)
      {
        swift_bridgeObjectRelease_n();
LABEL_29:

        uint64_t v26 = 3;
        goto LABEL_19;
      }
      char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v38) {
        goto LABEL_29;
      }
      if (one-time initialization token for playback != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      __swift_project_value_buffer(v39, (uint64_t)static Logger.playback);
      id v40 = a2;
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        int v43 = (uint8_t *)swift_slowAlloc();
        uint64_t v44 = swift_slowAlloc();
        uint64_t v47 = v44;
        *(_DWORD *)int v43 = 136315138;
        type metadata accessor for AVPlaybackCoordinatorPlaybackObjectCommand(0);
        id v40 = v40;
        uint64_t v45 = String.init<A>(reflecting:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, &v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1A375F000, v41, v42, "Unknown avCommand %s", v43, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v44, -1, -1);
        MEMORY[0x1A624F870](v43, -1, -1);
      }
      else
      {
      }
LABEL_27:
      outlined destroy of GroupSessionEvent(a1, (uint64_t (*)(void))type metadata accessor for Participant);
      uint64_t v37 = type metadata accessor for GroupSessionEvent();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(a4, 1, 1, v37);
    }
  }
LABEL_15:
  if (!a3)
  {
    if (one-time initialization token for playback != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.playback);
    unint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl(&dword_1A375F000, v34, v35, "Failed to get rate for setRate command", v36, 2u);
      MEMORY[0x1A624F870](v36, -1, -1);
    }

    goto LABEL_27;
  }
  objc_msgSend(a3, sel_doubleValue);
  double v25 = v24;

  if (v25 > 0.0) {
    uint64_t v26 = 1;
  }
  else {
    uint64_t v26 = 2;
  }
LABEL_19:
  uint64_t v27 = type metadata accessor for GroupSessionEvent();
  uint64_t v28 = a4 + *(int *)(v27 + 24);
  uint64_t v29 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v28, 1, 1, v29);
  outlined init with take of GroupSessionEvent(a1, a4, (uint64_t (*)(void))type metadata accessor for Participant);
  uint64_t v30 = (uint64_t *)(a4 + *(int *)(v27 + 20));
  *uint64_t v30 = v26;
  v30[1] = 0;
  v30[2] = 0;
  _OWORD v30[3] = 0;
  unint64_t v31 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);

  return v31(a4, 0, 1, v27);
}

uint64_t GroupSessionEvent.originator.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of GroupSessionEvent(v1, a1, (uint64_t (*)(void))type metadata accessor for Participant);
}

uint64_t GroupSessionEvent.action.getter@<X0>(_OWORD *a1@<X8>)
{
  int v3 = (_OWORD *)(v1 + *(int *)(type metadata accessor for GroupSessionEvent() + 20));
  long long v4 = v3[1];
  *a1 = *v3;
  a1[1] = v4;

  return swift_bridgeObjectRetain();
}

uint64_t GroupSessionEvent.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for GroupSessionEvent();
  return outlined init with copy of URL?(v1 + *(int *)(v3 + 24), a1, &demangling cache variable for type metadata for URL?);
}

uint64_t GroupSessionEvent.init(originator:action:url:)@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v12 = *a2;
  uint64_t v6 = *((void *)a2 + 2);
  uint64_t v7 = *((void *)a2 + 3);
  outlined init with take of GroupSessionEvent(a1, a4, (uint64_t (*)(void))type metadata accessor for Participant);
  uint64_t v8 = type metadata accessor for GroupSessionEvent();
  uint64_t v9 = a4 + *(int *)(v8 + 20);
  *(_OWORD *)uint64_t v9 = v12;
  *(void *)(v9 + 16) = v6;
  *(void *)(v9 + 24) = v7;
  uint64_t v10 = a4 + *(int *)(v8 + 24);

  return outlined init with take of URL?(a3, v10);
}

uint64_t GroupSessionEvent.Action.init(eventType:item:queueItemType:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

void static GroupSessionEvent.Action.play.getter(void *a1@<X8>)
{
  *a1 = 1;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

void static GroupSessionEvent.Action.pause.getter(void *a1@<X8>)
{
  *a1 = 2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

void static GroupSessionEvent.Action.seek.getter(void *a1@<X8>)
{
  *a1 = 3;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t static GroupSessionEvent.Action.skip(item:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 4;
  a3[1] = a1;
  a3[2] = a2;
  a3[3] = 0;
  return swift_bridgeObjectRetain();
}

uint64_t GroupSessionEvent.Action.eventType.getter()
{
  return *(void *)v0;
}

uint64_t GroupSessionEvent.Action.item.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GroupSessionEvent.Action.queueItemType.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t static GroupSessionEvent.Action.QueueChange.Item.song(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  a3[2] = 1;
  return swift_bridgeObjectRetain();
}

uint64_t GroupSessionEvent.Action.QueueChange.Item.init(name:tuItemType:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t static GroupSessionEvent.Action.QueueChange.Item.container(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  a3[2] = 2;
  return swift_bridgeObjectRetain();
}

uint64_t GroupSessionEvent.Action.QueueChange.Item.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GroupSessionEvent.Action.QueueChange.Item.tuItemType.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t static GroupSessionEvent.Action.QueueChange.setUpNext(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return static GroupSessionEvent.Action.QueueChange.setUpNext(_:)(a1, 8, a2);
}

__n128 GroupSessionEvent.Action.QueueChange.init(action:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t static GroupSessionEvent.Action.QueueChange.added(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return static GroupSessionEvent.Action.QueueChange.setUpNext(_:)(a1, 10, a2);
}

uint64_t static GroupSessionEvent.Action.QueueChange.setUpNext(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  *a3 = a2;
  a3[1] = v4;
  a3[2] = v3;
  a3[3] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t GroupSessionEvent.Action.QueueChange.action.getter@<X0>(_OWORD *a1@<X8>)
{
  long long v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t static GroupSessionEvent.Action.updatedQueue(_:)@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return swift_bridgeObjectRetain();
}

void static GroupSessionEvent.Action.start.getter(void *a1@<X8>)
{
  *a1 = 12;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t static GroupSessionEvent.Action.react(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 7;
  a3[1] = a1;
  a3[2] = a2;
  a3[3] = 0;
  return swift_bridgeObjectRetain();
}

uint64_t static GroupSessionEvent.Action.custom(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 99;
  a3[1] = a1;
  a3[2] = a2;
  a3[3] = 0;
  return swift_bridgeObjectRetain();
}

void static GroupSessionEvent.Action.changeUpNext.getter(void *a1@<X8>)
{
  *a1 = 8;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t static GroupSessionEvent.Action.addQueueItem(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = 1;
  if (a1[2] != 1) {
    uint64_t v4 = 2;
  }
  *a2 = 10;
  a2[1] = v3;
  a2[2] = v2;
  a2[3] = v4;
  return swift_bridgeObjectRetain();
}

void static GroupSessionEvent.Action.updateQueue.getter(void *a1@<X8>)
{
  *a1 = 11;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

void closure #1 in GroupSession.showNotice(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionEvent?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v48 = &v42[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v6);
  uint64_t v47 = &v42[-v8];
  uint64_t v46 = type metadata accessor for GroupSessionEvent();
  unint64_t v9 = *(void *)(v46 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = MEMORY[0x1F4188790](v46);
  uint64_t v45 = &v42[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = &v42[-v13];
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = &v42[-v15];
  GroupSession.state.getter();
  uint64_t v17 = (void *)aBlock[0];
  uint64_t v51 = aBlock[0];
  uint64_t v52 = 1;
  uint64_t v18 = *(void *)(v4 + 80);
  uint64_t v19 = *(void *)(v4 + 88);
  char v20 = static GroupSession.State.== infix(_:_:)((id *)&v51, (void **)&v52);
  outlined consume of GroupSession<A>.State<A>(v17);
  if (v20)
  {
    LODWORD(v48) = GroupSession.hasPendingActivityUpdate.getter();
    uint64_t v21 = (id *)((char *)a1 + *(void *)(*a1 + 280));
    swift_beginAccess();
    id v22 = *v21;
    uint64_t v23 = XPCClient.queue.getter();

    outlined init with copy of GroupSessionEvent(a2, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for GroupSessionEvent);
    unint64_t v9 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v14 = (void *)swift_allocObject();
    uint64_t v14[2] = v18;
    v14[3] = v19;
    v14[4] = a1;
    outlined init with take of GroupSessionEvent((uint64_t)v16, (uint64_t)v14 + v9, (uint64_t (*)(void))type metadata accessor for GroupSessionEvent);
    *((unsigned char *)v14 + v9 + v10) = v48 & 1;
    uint64_t v16 = (unsigned char *)swift_allocObject();
    *((void *)v16 + 2) = partial apply for closure #1 in closure #1 in GroupSession.showNotice(_:);
    *((void *)v16 + 3) = v14;
    aBlock[4] = (uint64_t)_sIg_Ieg_TRTA_0;
    uint64_t v50 = v16;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_14;
    double v24 = _Block_copy(aBlock);
    a2 = (uint64_t)v50;
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v23, v24);

    _Block_release(v24);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return;
    }
    __break(1u);
  }
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Log.default);
  outlined init with copy of GroupSessionEvent(a2, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for GroupSessionEvent);
  swift_retain_n();
  uint64_t v27 = Logger.logObject.getter();
  int v28 = static os_log_type_t.error.getter();
  BOOL v29 = os_log_type_enabled(v27, (os_log_type_t)v28);
  uint64_t v30 = (uint64_t)v48;
  if (v29)
  {
    unint64_t v31 = v9;
    uint64_t v32 = swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    aBlock[0] = v44;
    *(_DWORD *)uint64_t v32 = 136315394;
    uint64_t v33 = v47;
    outlined init with copy of GroupSessionEvent((uint64_t)v14, (uint64_t)v47, (uint64_t (*)(void))type metadata accessor for GroupSessionEvent);
    uint64_t v34 = v46;
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v31 + 56))(v33, 0, 1, v46);
    outlined init with copy of URL?((uint64_t)v33, v30, &demangling cache variable for type metadata for GroupSessionEvent?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v30, 1, v34) == 1)
    {
      unint64_t v35 = 0xE300000000000000;
      uint64_t v36 = 7104878;
    }
    else
    {
      int v43 = v28;
      outlined init with take of GroupSessionEvent(v30, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for GroupSessionEvent);
      outlined init with copy of GroupSessionEvent((uint64_t)v16, (uint64_t)v45, (uint64_t (*)(void))type metadata accessor for GroupSessionEvent);
      uint64_t v36 = String.init<A>(reflecting:)();
      unint64_t v35 = v37;
      LOBYTE(v28) = v43;
      outlined destroy of GroupSessionEvent((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for GroupSessionEvent);
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v33, &demangling cache variable for type metadata for GroupSessionEvent?);
    uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v35, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of GroupSessionEvent((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for GroupSessionEvent);
    *(_WORD *)(v32 + 12) = 2080;
    uint64_t v38 = GroupSession.description.getter();
    unint64_t v40 = v39;
    swift_release();
    uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v27, (os_log_type_t)v28, "Dropping event %s because session isn't joined %s", (uint8_t *)v32, 0x16u);
    uint64_t v41 = v44;
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v41, -1, -1);
    MEMORY[0x1A624F870](v32, -1, -1);
  }
  else
  {
    swift_release();
    outlined destroy of GroupSessionEvent((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for GroupSessionEvent);

    swift_release();
  }
}

void closure #1 in closure #1 in GroupSession.showNotice(_:)(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + *(void *)(*(void *)a1 + 280));
  swift_beginAccess();
  id v2 = *v1;
  XPCClient.withHost(body:errorHandler:)();
}

void closure #1 in closure #1 in closure #1 in GroupSession.showNotice(_:)(void **a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a1;
  uint64_t v8 = type metadata accessor for GroupSessionEvent();
  type metadata accessor for Participant();
  outlined init with copy of URL?(a2 + *(int *)(v8 + 24), (uint64_t)v6, &demangling cache variable for type metadata for URL?);
  objc_allocWithZone((Class)type metadata accessor for ActivitySessionEvent());
  swift_bridgeObjectRetain();
  unint64_t v9 = (void *)ActivitySessionEvent.init(type:item:originatorID:queueItemType:url:)();
  objc_msgSend(v7, sel_postEventWithEvent_, v9);
}

uint64_t GroupSessionEvent.activitySessionEvent(hasPendingActivityUpdate:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for GroupSessionEvent();
  type metadata accessor for Participant();
  outlined init with copy of URL?(v0 + *(int *)(v4 + 24), (uint64_t)v3, &demangling cache variable for type metadata for URL?);
  id v5 = objc_allocWithZone((Class)type metadata accessor for ActivitySessionEvent());
  swift_bridgeObjectRetain();
  return ActivitySessionEvent.init(type:item:originatorID:queueItemType:url:)();
}

uint64_t GroupSession.Event.originator.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of GroupSessionEvent(v1, a1, (uint64_t (*)(void))type metadata accessor for Participant);
}

uint64_t GroupSession.Event.action.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(v2 + *(int *)(a1 + 36));
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  *a2 = *v3;
  a2[1] = v5;
  return outlined copy of GroupSession<A>.Event.Action<A>(v4, v5);
}

uint64_t GroupSession.Event.url.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of URL?(v2 + *(int *)(a1 + 40), a2, &demangling cache variable for type metadata for URL?);
}

uint64_t GroupSession.Event.init(originator:action:url:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  outlined init with take of GroupSessionEvent(a1, a4, (uint64_t (*)(void))type metadata accessor for Participant);
  uint64_t v8 = type metadata accessor for GroupSession.Event();
  unint64_t v9 = (void *)(a4 + *(int *)(v8 + 36));
  *unint64_t v9 = v6;
  v9[1] = v7;
  uint64_t v10 = a4 + *(int *)(v8 + 40);

  return outlined init with take of URL?(a3, v10);
}

uint64_t GroupSession.postEvent(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for GroupSessionEvent();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for GroupSession.Event();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v34 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  unint64_t v9 = (char *)v26 - v8;
  uint64_t v10 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)v26 - v11;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.default);
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v32(v12, a1, v5);
  swift_retain();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  int v33 = v15;
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v27 = v6;
    uint64_t v17 = v16;
    uint64_t v29 = swift_slowAlloc();
    uint64_t v36 = v29;
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v30 = v4;
    os_log_t v28 = v14;
    uint64_t v18 = GroupSession.description.getter();
    uint64_t v31 = a1;
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    v26[1] = v17 + 14;
    v32(v9, (uint64_t)v12, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v9, 0, 1, v5);
    uint64_t v20 = >> prefix<A>(_:)((uint64_t)v9, v5);
    unint64_t v22 = v21;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v27);
    uint64_t v23 = v20;
    uint64_t v4 = v30;
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v22, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v5);
    uint64_t v14 = v28;
    _os_log_impl(&dword_1A375F000, v28, (os_log_type_t)v33, "Application posted deprecated event on %s event: %s", (uint8_t *)v17, 0x16u);
    uint64_t v24 = v29;
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v24, -1, -1);
    MEMORY[0x1A624F870](v17, -1, -1);
  }
  else
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v5);
  }

  GroupSession.Event.groupSessionEvent.getter(v5, (uint64_t)v4);
  GroupSession.showNotice(_:)((uint64_t)v4);
  return outlined destroy of GroupSessionEvent((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for GroupSessionEvent);
}

uint64_t GroupSession.Event.groupSessionEvent.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of GroupSessionEvent(v2, a2, (uint64_t (*)(void))type metadata accessor for Participant);
  uint64_t v5 = (uint64_t *)(v2 + *(int *)(a1 + 36));
  unint64_t v6 = v5[1];
  if (v6 < 3) {
    uint64_t v7 = v6 + 1;
  }
  else {
    uint64_t v7 = 4;
  }
  if (v6 >= 3) {
    uint64_t v8 = v5[1];
  }
  else {
    uint64_t v8 = 0;
  }
  if (v6 >= 3) {
    uint64_t v9 = *v5;
  }
  else {
    uint64_t v9 = 0;
  }
  outlined copy of GroupSession<A>.Event.Action<A>(*v5, v6);
  uint64_t v10 = v2 + *(int *)(a1 + 40);
  uint64_t v11 = type metadata accessor for GroupSessionEvent();
  uint64_t result = outlined init with copy of URL?(v10, a2 + *(int *)(v11 + 24), &demangling cache variable for type metadata for URL?);
  uint64_t v13 = (uint64_t *)(a2 + *(int *)(v11 + 20));
  *uint64_t v13 = v7;
  v13[1] = v9;
  v13[2] = v8;
  uint64_t v13[3] = 0;
  return result;
}

uint64_t GroupSession.Event.Action.groupSessionEventAction.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  if (v3)
  {
    if (v3 == 1)
    {
      uint64_t v4 = 2;
    }
    else
    {
      if (v3 != 2)
      {
        *a1 = 4;
        a1[1] = v2;
        a1[2] = v3;
        a1[3] = 0;
        return outlined copy of GroupSession<A>.Event.Action<A>(v2, v3);
      }
      uint64_t v4 = 3;
    }
  }
  else
  {
    uint64_t v4 = 1;
  }
  *a1 = v4;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  return outlined copy of GroupSession<A>.Event.Action<A>(v2, v3);
}

uint64_t GroupSession.Event.localizedDescription.getter()
{
  return 0;
}

uint64_t GroupSession.Event.init(originator:localizedDescription:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v4 - 8);
  unint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for URL();
  v9[0] = 0;
  v9[1] = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  return GroupSession.Event.init(originator:action:url:)(a1, v9, (uint64_t)v6, a2);
}

uint64_t type metadata accessor for GroupSessionEvent()
{
  uint64_t result = type metadata singleton initialization cache for GroupSessionEvent;
  if (!type metadata singleton initialization cache for GroupSessionEvent) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1A3865D64()
{
  uint64_t v1 = (int *)(type metadata accessor for GroupSessionEvent() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_release();
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  type metadata accessor for Participant();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[8];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }

  return MEMORY[0x1F4186498](v0, v3 + v4, v2 | 7);
}

void partial apply for closure #1 in GroupSession.showNotice(_:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for GroupSessionEvent() - 8);
  uint64_t v2 = *(uint64_t **)(v0 + 32);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  closure #1 in GroupSession.showNotice(_:)(v2, v3);
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t outlined destroy of GroupSessionEvent(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of GroupSessionEvent(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of GroupSessionEvent(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of GroupSession<A>.Event.Action<A>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t type metadata accessor for GroupSession.Event()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for GroupSession.Event.Action()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupSessionEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = type metadata accessor for Participant();
    uint64_t v9 = *(int *)(v8 + 20);
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    *(uint64_t *)((char *)a1 + *(int *)(v8 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v8 + 24));
    uint64_t v13 = *(int *)(a3 + 20);
    uint64_t v14 = *(int *)(a3 + 24);
    os_log_type_t v15 = (char *)a1 + v13;
    uint64_t v16 = (char *)a2 + v13;
    *(_OWORD *)os_log_type_t v15 = *(_OWORD *)v16;
    uint64_t v18 = *((void *)v16 + 2);
    uint64_t v17 = *((void *)v16 + 3);
    *((void *)v15 + 2) = v18;
    *((void *)v15 + 3) = v17;
    unint64_t v19 = (char *)a1 + v14;
    uint64_t v20 = (char *)a2 + v14;
    uint64_t v21 = type metadata accessor for URL();
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v23(v20, 1, v21))
    {
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
  }
  return a1;
}

uint64_t destroy for GroupSessionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  type metadata accessor for Participant();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v5, 1, v6);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v5, v6);
  }
  return result;
}

uint64_t initializeWithCopy for GroupSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for Participant();
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  *(void *)(a1 + *(int *)(v7 + 24)) = *(void *)(a2 + *(int *)(v7 + 24));
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  uint64_t v17 = *(void *)(v15 + 16);
  uint64_t v16 = *(void *)(v15 + 24);
  *(void *)(v14 + 16) = v17;
  *(void *)(v14 + 24) = v16;
  uint64_t v18 = (void *)(a1 + v13);
  unint64_t v19 = (const void *)(a2 + v13);
  uint64_t v20 = type metadata accessor for URL();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v22(v19, 1, v20))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t assignWithCopy for GroupSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for Participant();
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(v7 + 24)) = *(void *)(a2 + *(int *)(v7 + 24));
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = a2 + v11;
  *uint64_t v12 = *(void *)(a2 + v11);
  v12[1] = *(void *)(a2 + v11 + 8);
  v12[2] = *(void *)(a2 + v11 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  _OWORD v12[3] = *(void *)(v13 + 24);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  unint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v12) = v19(v15, 1, v17);
  int v20 = v19(v16, 1, v17);
  if (!v12)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 24))(v15, v16, v17);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v15, v16, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 16))(v15, v16, v17);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t initializeWithTake for GroupSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for Participant();
  *(_OWORD *)(a1 + *(int *)(v7 + 20)) = *(_OWORD *)(a2 + *(int *)(v7 + 20));
  *(void *)(a1 + *(int *)(v7 + 24)) = *(void *)(a2 + *(int *)(v7 + 24));
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (_OWORD *)(a1 + v8);
  uint64_t v11 = (_OWORD *)(a2 + v8);
  long long v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  uint64_t v13 = (void *)(a1 + v9);
  uint64_t v14 = (const void *)(a2 + v9);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithTake for GroupSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for Participant();
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(v7 + 24)) = *(void *)(a2 + *(int *)(v7 + 24));
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(_OWORD *)uint64_t v14 = *(_OWORD *)(a2 + v13);
  *(void *)(v14 + 16) = *(void *)(a2 + v13 + 16);
  swift_bridgeObjectRelease();
  *(void *)(v14 + 24) = *(void *)(v15 + 24);
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = type metadata accessor for URL();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v15) = v21(v17, 1, v19);
  int v22 = v21(v18, 1, v19);
  if (!v15)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 40))(v17, v18, v19);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v17, v18, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1A3866C00);
}

uint64_t sub_1A3866C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Participant();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 2147483646)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 16);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 24);
    return v13(v15, a2, v14);
  }
}

uint64_t storeEnumTagSinglePayload for GroupSessionEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1A3866D54);
}

uint64_t sub_1A3866D54(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Participant();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 2147483646)
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 16) = a2;
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 24);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void type metadata completion function for GroupSessionEvent()
{
  type metadata accessor for Participant();
  if (v0 <= 0x3F)
  {
    type metadata accessor for URL?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

ValueMetadata *type metadata accessor for GroupSessionEvent.Action()
{
  return &type metadata for GroupSessionEvent.Action;
}

uint64_t destroy for GroupSessionEvent.Action.QueueChange()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GroupSessionEvent.Action(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for GroupSessionEvent.Action(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for GroupSessionEvent.Action(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionEvent.Action(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupSessionEvent.Action(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionEvent.Action.QueueChange()
{
  return &type metadata for GroupSessionEvent.Action.QueueChange;
}

ValueMetadata *type metadata accessor for GroupSessionEvent.Action.QueueChange.Item()
{
  return &type metadata for GroupSessionEvent.Action.QueueChange.Item;
}

void *initializeBufferWithCopyOfBuffer for GroupSessionEvent.Action.QueueChange.Item(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for GroupSessionEvent.Action.QueueChange.Item(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

void *assignWithTake for GroupSessionEvent.Action.QueueChange.Item(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

ValueMetadata *type metadata accessor for QueueItem()
{
  return &type metadata for QueueItem;
}

void type metadata completion function for GroupSession.Event()
{
  type metadata accessor for Participant();
  if (v0 <= 0x3F)
  {
    type metadata accessor for URL?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupSession.Event(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = type metadata accessor for Participant();
    uint64_t v9 = *(int *)(v8 + 20);
    unint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    *unint64_t v10 = v13;
    v10[1] = v12;
    *(uint64_t *)((char *)a1 + *(int *)(v8 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v8 + 24));
    uint64_t v14 = *(int *)(a3 + 36);
    uint64_t v15 = (uint64_t *)((char *)a1 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    unint64_t v17 = *(uint64_t *)((char *)a2 + v14 + 8);
    swift_bridgeObjectRetain();
    if (v17 >= 3)
    {
      *uint64_t v15 = *v16;
      v15[1] = v17;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    }
    uint64_t v19 = *(int *)(a3 + 40);
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = type metadata accessor for URL();
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
  }
  return a1;
}

uint64_t destroy for GroupSession.Event(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  type metadata accessor for Participant();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + *(int *)(a2 + 36) + 8) >= 3uLL) {
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = a1 + *(int *)(a2 + 40);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v5, 1, v6);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v5, v6);
  }
  return result;
}

uint64_t initializeWithCopy for GroupSession.Event(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for Participant();
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  unint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  *(void *)(a1 + *(int *)(v7 + 24)) = *(void *)(a2 + *(int *)(v7 + 24));
  uint64_t v13 = *(int *)(a3 + 36);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  unint64_t v16 = *(void *)(a2 + v13 + 8);
  swift_bridgeObjectRetain();
  if (v16 >= 3)
  {
    *uint64_t v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  }
  uint64_t v17 = *(int *)(a3 + 40);
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (const void *)(a2 + v17);
  uint64_t v20 = type metadata accessor for URL();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t assignWithCopy for GroupSession.Event(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for Participant();
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  unint64_t v10 = (void *)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(v7 + 24)) = *(void *)(a2 + *(int *)(v7 + 24));
  uint64_t v11 = *(int *)(a3 + 36);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  unint64_t v14 = *(void *)(a1 + v11 + 8);
  unint64_t v15 = *(void *)(a2 + v11 + 8);
  if (v14 < 3)
  {
    if (v15 >= 3)
    {
      *uint64_t v12 = *v13;
      v12[1] = v13[1];
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v15 < 3)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v12, &demangling cache variable for type metadata for (item: String));
LABEL_6:
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    goto LABEL_8;
  }
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v16 = *(int *)(a3 + 40);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = type metadata accessor for URL();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 24))(v17, v18, v19);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_13;
  }
  if (v23)
  {
LABEL_13:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t initializeWithTake for GroupSession.Event(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for Participant();
  *(_OWORD *)(a1 + *(int *)(v7 + 20)) = *(_OWORD *)(a2 + *(int *)(v7 + 20));
  *(void *)(a1 + *(int *)(v7 + 24)) = *(void *)(a2 + *(int *)(v7 + 24));
  uint64_t v8 = *(int *)(a3 + 40);
  *(_OWORD *)(a1 + *(int *)(a3 + 36)) = *(_OWORD *)(a2 + *(int *)(a3 + 36));
  uint64_t v9 = (void *)(a1 + v8);
  unint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for GroupSession.Event(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for Participant();
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  unint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(v7 + 24)) = *(void *)(a2 + *(int *)(v7 + 24));
  uint64_t v13 = *(int *)(a3 + 36);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  if (*(void *)(a1 + v13 + 8) < 3uLL) {
    goto LABEL_4;
  }
  unint64_t v16 = *(void *)(v15 + 8);
  if (v16 < 3)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v14, &demangling cache variable for type metadata for (item: String));
LABEL_4:
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    goto LABEL_6;
  }
  *(void *)uint64_t v14 = *(void *)v15;
  *(void *)(v14 + 8) = v16;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v17 = *(int *)(a3 + 40);
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v20 = type metadata accessor for URL();
  uint64_t v21 = *(void *)(v20 - 8);
  int v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v18, 1, v20);
  int v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 40))(v18, v19, v20);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_11;
  }
  if (v24)
  {
LABEL_11:
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v21 + 32))(v18, v19, v20);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSession.Event(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1A3867E78);
}

uint64_t sub_1A3867E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Participant();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 2147483644)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 36) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 3;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 40);
    return v13(v15, a2, v14);
  }
}

uint64_t storeEnumTagSinglePayload for GroupSession.Event(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1A3867FCC);
}

uint64_t sub_1A3867FCC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Participant();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 2147483644)
  {
    *(void *)(a1 + *(int *)(a4 + 36) + 8) = (a2 + 2);
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 40);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

unint64_t destroy for GroupSession.Event.Action(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for GroupSession.Event.Action(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for GroupSession.Event.Action(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for GroupSession.Event.Action(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSession.Event.Action(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for GroupSession.Event.Action(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 2;
    }
  }
  return result;
}

uint64_t getEnumTag for GroupSession.Event.Action(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for GroupSession.Event.Action(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

uint64_t sub_1A3868354()
{
  unint64_t v1 = (int *)(type metadata accessor for GroupSessionEvent() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_release();
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  type metadata accessor for Participant();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[8];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }

  return MEMORY[0x1F4186498](v0, v4 + v3 + 1, v2 | 7);
}

void partial apply for closure #1 in closure #1 in GroupSession.showNotice(_:)()
{
  type metadata accessor for GroupSessionEvent();
  uint64_t v1 = *(void *)(v0 + 32);

  closure #1 in closure #1 in GroupSession.showNotice(_:)(v1);
}

uint64_t sub_1A3868570()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in closure #1 in closure #1 in GroupSession.showNotice(_:)(void **a1)
{
  closure #1 in closure #1 in closure #1 in GroupSession.showNotice(_:)(a1, *(void *)(v1 + 16));
}

uint64_t key path getter for SystemCoordinatorClientConnection.serverDisconnectedCallback : SystemCoordinatorClientConnection@<X0>(void *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + direct field offset for SystemCoordinatorClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = _sIg_Ieg_TRTA_0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v4);
}

uint64_t key path setter for SystemCoordinatorClientConnection.serverDisconnectedCallback : SystemCoordinatorClientConnection(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = (uint64_t *)(*a2 + direct field offset for SystemCoordinatorClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *uint64_t v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v8);
}

uint64_t SystemCoordinatorClientConnection.serverDisconnectedCallback.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + direct field offset for SystemCoordinatorClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  uint64_t v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*v1);
  return v2;
}

uint64_t SystemCoordinatorClientConnection.serverDisconnectedCallback.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + direct field offset for SystemCoordinatorClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  uint64_t v6 = *v5;
  *uint64_t v5 = a1;
  v5[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v6);
}

uint64_t (*SystemCoordinatorClientConnection.serverDisconnectedCallback.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

Swift::Void __swiftcall SystemCoordinatorClientConnection.handleServerDisconnect()()
{
  uint64_t v1 = (void (**)(uint64_t))(v0
                                     + direct field offset for SystemCoordinatorClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  uint64_t v2 = *v1;
  if (*v1)
  {
    uint64_t v3 = swift_retain();
    v2(v3);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v2);
  }
}

uint64_t key path getter for SystemCoordinatorClientConnection.stateCallback : SystemCoordinatorClientConnection@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + direct field offset for SystemCoordinatorClientConnection.stateCallback);
  swift_beginAccess();
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed SystemCoordinatorState) -> ();
  a2[1] = v6;
  return swift_retain();
}

uint64_t key path setter for SystemCoordinatorClientConnection.stateCallback : SystemCoordinatorClientConnection(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  uint64_t v6 = (uint64_t (**)(uint64_t))(*a2 + direct field offset for SystemCoordinatorClientConnection.stateCallback);
  swift_beginAccess();
  char *v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Error?) -> (@out ());
  v6[1] = (uint64_t (*)(uint64_t))v5;
  swift_retain();
  return swift_release();
}

uint64_t SystemCoordinatorClientConnection.stateCallback.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + direct field offset for SystemCoordinatorClientConnection.stateCallback);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_retain();
  return v2;
}

uint64_t SystemCoordinatorClientConnection.stateCallback.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + direct field offset for SystemCoordinatorClientConnection.stateCallback);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_release();
}

uint64_t (*SystemCoordinatorClientConnection.stateCallback.modify())()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t SystemCoordinatorClientConnection.updateState(_:)(uint64_t a1)
{
  uint64_t v3 = (void (**)(uint64_t))(v1 + direct field offset for SystemCoordinatorClientConnection.stateCallback);
  swift_beginAccess();
  uint64_t v4 = *v3;
  swift_retain();
  v4(a1);
  return swift_release();
}

uint64_t @objc SystemCoordinatorClientConnection.updateState(_:)(char *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = &a1[direct field offset for SystemCoordinatorClientConnection.stateCallback];
  swift_beginAccess();
  uint64_t v6 = *(void (**)(id))v5;
  id v7 = a3;
  uint64_t v8 = a1;
  swift_retain();
  v6(v7);

  return swift_release();
}

id SystemCoordinatorClientConnection.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id SystemCoordinatorClientConnection.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = &v0[direct field offset for SystemCoordinatorClientConnection.serverDisconnectedCallback];
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v3 = &v0[direct field offset for SystemCoordinatorClientConnection.stateCallback];
  *(void *)uint64_t v3 = destructiveProjectEnumData for GroupSessionErrors;
  *((void *)v3 + 1) = 0;
  v5.receiver = v0;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

id @objc SystemCoordinatorClientConnection.init()(char *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = &a1[direct field offset for SystemCoordinatorClientConnection.serverDisconnectedCallback];
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v4 = &a1[direct field offset for SystemCoordinatorClientConnection.stateCallback];
  *(void *)uint64_t v4 = destructiveProjectEnumData for GroupSessionErrors;
  *((void *)v4 + 1) = 0;
  v6.receiver = a1;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t SystemCoordinatorClientConnection.__ivar_destroyer()
{
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(void *)(v0 + direct field offset for SystemCoordinatorClientConnection.serverDisconnectedCallback));

  return swift_release();
}

id SystemCoordinatorClientConnection.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SystemCoordinatorClientConnection()
{
  uint64_t result = type metadata singleton initialization cache for SystemCoordinatorClientConnection;
  if (!type metadata singleton initialization cache for SystemCoordinatorClientConnection) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for SystemCoordinatorClientConnection()
{
  return swift_initClassMetadata2();
}

uint64_t @objc SystemCoordinatorClientConnection.__ivar_destroyer(uint64_t a1)
{
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(void *)(a1 + direct field offset for SystemCoordinatorClientConnection.serverDisconnectedCallback));

  return swift_release();
}

uint64_t ObjC metadata update function for SystemCoordinatorClientConnection()
{
  return type metadata accessor for SystemCoordinatorClientConnection();
}

uint64_t sub_1A3868E9C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed SystemCoordinatorState) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out ())()
{
  return thunk for @escaping @callee_guaranteed () -> (@out ())(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t protocol witness for SystemCoordinatorClient.serverDisconnectedCallback.getter in conformance SystemCoordinatorClientConnection()
{
  uint64_t v1 = (uint64_t *)(v0 + direct field offset for SystemCoordinatorClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  uint64_t v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*v1);
  return v2;
}

uint64_t protocol witness for SystemCoordinatorClient.serverDisconnectedCallback.setter in conformance SystemCoordinatorClientConnection(uint64_t a1, uint64_t a2)
{
  objc_super v5 = (uint64_t *)(v2 + direct field offset for SystemCoordinatorClientConnection.serverDisconnectedCallback);
  swift_beginAccess();
  uint64_t v6 = *v5;
  *objc_super v5 = a1;
  v5[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v6);
}

uint64_t (*protocol witness for SystemCoordinatorClient.serverDisconnectedCallback.modify in conformance SystemCoordinatorClientConnection())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t protocol witness for SystemCoordinatorClient.stateCallback.getter in conformance SystemCoordinatorClientConnection()
{
  uint64_t v1 = (uint64_t *)(v0 + direct field offset for SystemCoordinatorClientConnection.stateCallback);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_retain();
  return v2;
}

uint64_t protocol witness for SystemCoordinatorClient.stateCallback.setter in conformance SystemCoordinatorClientConnection(uint64_t a1, uint64_t a2)
{
  objc_super v5 = (void *)(v2 + direct field offset for SystemCoordinatorClientConnection.stateCallback);
  swift_beginAccess();
  *objc_super v5 = a1;
  v5[1] = a2;
  return swift_release();
}

uint64_t (*protocol witness for SystemCoordinatorClient.stateCallback.modify in conformance SystemCoordinatorClientConnection())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t NSProcessInfo.stableAppIdentifier.getter()
{
  uint64_t v1 = type metadata accessor for Entitlement();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  SecTaskRef v5 = SecTaskCreateFromSelf(0);
  if (!v5)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.default);
    id v11 = v0;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 138412290;
      v22[0] = v11;
      id v16 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v15 = v11;

      _os_log_impl(&dword_1A375F000, v12, v13, "Could not create task info for process: %@", v14, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v15, -1, -1);
      MEMORY[0x1A624F870](v14, -1, -1);
    }
    else
    {
    }
    return 0;
  }
  SecTaskRef v6 = v5;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4F5AF30], v1);
  uint64_t v7 = specialized SecTaskRef.value<A>(_:forEntitlement:)((uint64_t)v4);
  uint64_t v9 = v8;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (v9)
  {

    return v7;
  }
  id v17 = objc_msgSend(self, sel_mainBundle);
  uint64_t v18 = (void *)MEMORY[0x1A624DFA0](0xD00000000000001BLL, 0x80000001A3902180);
  id v19 = objc_msgSend(v17, sel_objectForInfoDictionaryKey_, v18);

  if (v19)
  {
    _bridgeAnyObjectToAny(_:)();

    swift_unknownObjectRelease();
  }
  else
  {

    memset(v21, 0, sizeof(v21));
  }
  outlined init with take of Any?((uint64_t)v21, (uint64_t)v22);
  if (!v22[3])
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v22, &demangling cache variable for type metadata for Any?);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v22[4];
  }
  else {
    return 0;
  }
}

uint64_t specialized SecTaskRef.value<A>(_:forEntitlement:)(uint64_t a1)
{
  uint64_t v2 = v1;
  error[1] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entitlement?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v42 - v8;
  uint64_t v10 = type metadata accessor for Entitlement();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v48 = (char *)&v42 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v42 - v17;
  error[0] = 0;
  uint64_t v19 = Entitlement.rawValue.getter();
  uint64_t v20 = (__CFString *)MEMORY[0x1A624DFA0](v19);
  swift_bridgeObjectRelease();
  CFTypeRef v21 = SecTaskCopyValueForEntitlement(v2, v20, error);

  uint64_t v52 = (uint64_t)v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject?);
  if (swift_dynamicCast()) {
    return v50;
  }
  uint64_t v47 = v9;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Log.default);
  uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v46(v18, a1, v10);
  int v24 = v2;
  uint64_t v25 = Logger.logObject.getter();
  int v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, (os_log_type_t)v26))
  {
    int v44 = v26;
    os_log_t v45 = v25;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    uint64_t v52 = v43;
    *(_DWORD *)uint64_t v27 = 136315650;
    uint64_t v50 = (uint64_t)v24;
    type metadata accessor for SecTaskRef(0);
    os_log_t v28 = v24;
    uint64_t v29 = String.init<A>(reflecting:)();
    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v52);
    os_log_type_t v42 = &v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    uint64_t v32 = (void (*)(char *, char *, uint64_t))v46;
    uint64_t v31 = (uint64_t)v47;
    v46(v47, (uint64_t)v18, v10);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v31, 0, 1, v10);
    outlined init with copy of Entitlement?(v31, (uint64_t)v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10) == 1)
    {
      unint64_t v33 = 0xE300000000000000;
      uint64_t v34 = 7104878;
    }
    else
    {
      uint64_t v35 = v48;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v7, v10);
      v32(v14, v35, v10);
      uint64_t v34 = String.init<A>(reflecting:)();
      unint64_t v33 = v36;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v35, v10);
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v47, &demangling cache variable for type metadata for Entitlement?);
    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v33, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
    *(_WORD *)(v27 + 22) = 2080;
    swift_beginAccess();
    if (error[0])
    {
      CFErrorRef v49 = error[0];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unmanaged<CFErrorRef>);
      uint64_t v37 = String.init<A>(reflecting:)();
      unint64_t v39 = v38;
    }
    else
    {
      unint64_t v39 = 0xE300000000000000;
      uint64_t v37 = 7104878;
    }
    CFErrorRef v49 = (CFErrorRef)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v40 = v45;
    _os_log_impl(&dword_1A375F000, v45, (os_log_type_t)v44, "Task %s couldn't find entitlement %s error %s", (uint8_t *)v27, 0x20u);
    uint64_t v41 = v43;
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v41, -1, -1);
    MEMORY[0x1A624F870](v27, -1, -1);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
  }
  return 0;
}

{
  __SecTask *v1;
  __SecTask *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __CFString *v20;
  CFTypeRef v21;
  uint64_t v23;
  __SecTask *v24;
  NSObject *v25;
  int v26;
  uint64_t v27;
  __SecTask *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  unint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  os_log_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  os_log_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  char *v47;
  char *v48;
  CFErrorRef v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  CFErrorRef error[2];

  uint64_t v2 = v1;
  error[1] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entitlement?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v42 - v8;
  uint64_t v10 = type metadata accessor for Entitlement();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v48 = (char *)&v42 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v42 - v17;
  error[0] = 0;
  uint64_t v19 = Entitlement.rawValue.getter();
  uint64_t v20 = (__CFString *)MEMORY[0x1A624DFA0](v19);
  swift_bridgeObjectRelease();
  CFTypeRef v21 = SecTaskCopyValueForEntitlement(v2, v20, error);

  uint64_t v50 = (uint64_t)v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject?);
  if (swift_dynamicCast()) {
    return v52;
  }
  uint64_t v47 = v9;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Log.default);
  uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v46(v18, a1, v10);
  int v24 = v2;
  uint64_t v25 = Logger.logObject.getter();
  int v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, (os_log_type_t)v26))
  {
    int v44 = v26;
    os_log_t v45 = v25;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    uint64_t v52 = v43;
    *(_DWORD *)uint64_t v27 = 136315650;
    uint64_t v50 = (uint64_t)v24;
    type metadata accessor for SecTaskRef(0);
    os_log_t v28 = v24;
    uint64_t v29 = String.init<A>(reflecting:)();
    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v52);
    os_log_type_t v42 = &v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    uint64_t v32 = (void (*)(char *, char *, uint64_t))v46;
    uint64_t v31 = (uint64_t)v47;
    v46(v47, (uint64_t)v18, v10);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v31, 0, 1, v10);
    outlined init with copy of Entitlement?(v31, (uint64_t)v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10) == 1)
    {
      unint64_t v33 = 0xE300000000000000;
      uint64_t v34 = 7104878;
    }
    else
    {
      uint64_t v35 = v48;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v7, v10);
      v32(v14, v35, v10);
      uint64_t v34 = String.init<A>(reflecting:)();
      unint64_t v33 = v36;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v35, v10);
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v47, &demangling cache variable for type metadata for Entitlement?);
    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v33, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
    *(_WORD *)(v27 + 22) = 2080;
    swift_beginAccess();
    if (error[0])
    {
      CFErrorRef v49 = error[0];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Unmanaged<CFErrorRef>);
      uint64_t v37 = String.init<A>(reflecting:)();
      unint64_t v39 = v38;
    }
    else
    {
      unint64_t v39 = 0xE300000000000000;
      uint64_t v37 = 7104878;
    }
    CFErrorRef v49 = (CFErrorRef)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v40 = v45;
    _os_log_impl(&dword_1A375F000, v45, (os_log_type_t)v44, "Task %s couldn't find entitlement %s error %s", (uint8_t *)v27, 0x20u);
    uint64_t v41 = v43;
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v41, -1, -1);
    MEMORY[0x1A624F870](v27, -1, -1);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
  }
  return 2;
}

uint64_t static Participants.only(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Participant>);
  uint64_t v4 = *(void *)(type metadata accessor for Participant() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1A38F5A70;
  outlined init with copy of Participant(a1, v6 + v5);
  uint64_t v7 = specialized Set.init(_nonEmptyArrayLiteral:)(v6);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t result = swift_deallocClassInstance();
  *a2 = v7;
  return result;
}

uint64_t outlined init with copy of Participant(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Participant();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *initializeBufferWithCopyOfBuffer for Participants(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for Participants()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for Participants(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for Participants(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Participants()
{
  return &type metadata for Participants;
}

uint64_t getEnumTagSinglePayload for Participants(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Participants(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CPParticipants()
{
  return &type metadata for CPParticipants;
}

uint64_t GroupSessionMessenger.Messages.base.getter()
{
  return swift_retain();
}

uint64_t GroupSessionMessenger.Messages.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v25 = a2;
  int v26 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.BufferingStrategy<Never>);
  uint64_t v23 = *(void *)(v4 - 8);
  uint64_t v24 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Publishers.PrefetchStrategy();
  uint64_t v20 = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for GroupSessionMessenger.MessageStream();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for Publishers.Buffer();
  uint64_t v22 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v19 - v12;
  uint64_t v28 = *a1;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4F1A900], v7);
  uint64_t v14 = v23;
  uint64_t v15 = v24;
  (*(void (**)(char *, void, uint64_t))(v23 + 104))(v6, *MEMORY[0x1E4F1A918], v24);
  Publisher.buffer(size:prefetch:whenFull:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v15);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v20);
  swift_release();
  swift_getWitnessTable();
  uint64_t v16 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v11);
  uint64_t v27 = v16;
  type metadata accessor for GroupSessionMessenger.MessageContext();
  swift_getTupleTypeMetadata2();
  uint64_t v17 = type metadata accessor for AnyPublisher();
  swift_getWitnessTable();
  uint64_t result = _PublisherElements.init(_:)((uint64_t)&v27, v17, (uint64_t)&v28);
  *int v26 = v28;
  return result;
}

uint64_t GroupSessionMessenger.Messages.makeAsyncIterator()@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for GroupSessionMessenger.MessageContext();
  swift_getTupleTypeMetadata2();
  type metadata accessor for AnyPublisher();
  swift_getWitnessTable();
  type metadata accessor for _PublisherElements();
  uint64_t result = _PublisherElements.makeAsyncIterator()();
  *a1 = result;
  return result;
}

uint64_t GroupSessionMessenger.Messages.Iterator.init(baseIterator:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t GroupSessionMessenger.Messages.Iterator.baseIterator.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*GroupSessionMessenger.Messages.Iterator.baseIterator.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t GroupSessionMessenger.Messages.Iterator.next()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  type metadata accessor for GroupSessionMessenger.MessageContext();
  swift_getTupleTypeMetadata2();
  type metadata accessor for AnyPublisher();
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for _PublisherElements.Iterator();
  void *v4 = v2;
  v4[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return _PublisherElements.Iterator.next()(a1, v5);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance GroupSessionMessenger.Messages<A>.Iterator(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return GroupSessionMessenger.Messages.Iterator.next()(a1);
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance GroupSessionMessenger.Messages<A>@<X0>(uint64_t *a1@<X8>)
{
  GroupSessionMessenger.Messages.makeAsyncIterator()(a1);

  return swift_release();
}

uint64_t GroupSessionMessenger.send<A>(_:to:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v7 = *a2;
  *(void *)(v4 + 16) = v4;
  *(void *)(v4 + 24) = GroupSessionMessenger.send<A>(_:to:);
  uint64_t v8 = swift_continuation_init();
  closure #1 in GroupSessionMessenger.send<A>(_:to:)(v8, v3, a1, v7, a3);
  return MEMORY[0x1F41881E8](v4 + 16);
}

uint64_t closure #1 in GroupSessionMessenger.send<A>(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a4;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  GroupSessionMessenger.send<A>(_:to:completion:)(a3, (uint64_t)&v10, (uint64_t)partial apply for closure #1 in closure #1 in GroupSessionMessenger.send<A>(_:to:), v8, a5);

  return swift_release();
}

uint64_t GroupSessionMessenger.send(_:to:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v12 = v3;
  uint64_t v6 = v3 + 16;
  uint64_t v7 = *a3;
  *(void *)(v3 + 16) = v3;
  *(void *)(v3 + 24) = GroupSessionMessenger.send(_:to:);
  uint64_t v8 = swift_continuation_init();
  uint64_t v11 = v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  GroupSessionMessenger.send(_:to:completion:)(a1, a2, &v11, (uint64_t)partial apply for closure #1 in closure #1 in GroupSessionMessenger.send(_:to:), v9);
  swift_release();
  return MEMORY[0x1F41881E8](v6);
}

uint64_t GroupSessionMessenger.send(_:to:)()
{
  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 48)) {
    swift_willThrow();
  }
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
  return v2();
}

uint64_t closure #1 in closure #1 in GroupSessionMessenger.send<A>(_:to:)(void *a1, uint64_t a2)
{
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v4 = swift_allocError();
    *uint64_t v5 = a1;
    id v6 = a1;
    return MEMORY[0x1F4188208](a2, v4);
  }
  else
  {
    return MEMORY[0x1F4188200](a2);
  }
}

uint64_t sub_1A386ADDC()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in closure #1 in GroupSessionMessenger.send(_:to:)(void *a1)
{
  return closure #1 in closure #1 in GroupSessionMessenger.send<A>(_:to:)(a1, *(void *)(v1 + 16));
}

uint64_t GroupSessionMessenger.messages<A>(of:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  GroupSessionMessenger.receive<A>(_:)(a1, a2, a3, &v7);
  return GroupSessionMessenger.Messages.init(_:)(&v7, a1, a4);
}

uint64_t GroupSessionMessenger.messages(of:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.BufferingStrategy<Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Publishers.PrefetchStrategy();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Buffer<GroupSessionMessenger.MessageStream<Data>>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v17 = v9;
  uint64_t v18 = v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  GroupSessionMessenger.receive(_:)(&v21);
  uint64_t v20 = v21;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E4F1A900], v5);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4F1A918], v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.MessageStream<Data>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type GroupSessionMessenger.MessageStream<Data> and conformance GroupSessionMessenger.MessageStream<A>, &demangling cache variable for type metadata for GroupSessionMessenger.MessageStream<Data>);
  Publisher.buffer(size:prefetch:whenFull:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_release();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Buffer<GroupSessionMessenger.MessageStream<Data>> and conformance Publishers.Buffer<A>, &demangling cache variable for type metadata for Publishers.Buffer<GroupSessionMessenger.MessageStream<Data>>);
  uint64_t v13 = v17;
  uint64_t v14 = Publisher.eraseToAnyPublisher()();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v12, v13);
  *uint64_t v19 = v14;
  return result;
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in GroupSessionMessenger.Messages<A>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for GroupSessionMessenger.Messages()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for GroupSessionMessenger.Messages.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1A386B1C0()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void specialized Sequence.first(where:)(uint64_t a1, char a2)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
    lazy protocol witness table accessor for type TUConversationVirtualParticipant and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    uint64_t v2 = v27;
    uint64_t v25 = v28;
    uint64_t v3 = v29;
    uint64_t v4 = v30;
    unint64_t v5 = v31;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v25 = a1 + 56;
    uint64_t v7 = ~v6;
    uint64_t v8 = -v6;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = v7;
    uint64_t v4 = 0;
  }
  int64_t v24 = (unint64_t)(v3 + 64) >> 6;
  if ((v2 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (!__CocoaSet.Iterator.next()()) {
    goto LABEL_45;
  }
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v10 = v32;
  swift_unknownObjectRelease();
  uint64_t v11 = v4;
  uint64_t v12 = v5;
  if (!v32) {
    goto LABEL_45;
  }
  while (1)
  {
    id v17 = objc_msgSend(v10, sel_pluginName);
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    if (a2)
    {
      if (a2 == 1) {
        unint64_t v21 = 0xD000000000000013;
      }
      else {
        unint64_t v21 = 0xD000000000000010;
      }
      if (a2 == 1) {
        unint64_t v22 = 0x80000001A38FFB00;
      }
      else {
        unint64_t v22 = 0x80000001A38FFB20;
      }
      if (v18 != v21) {
        goto LABEL_41;
      }
    }
    else
    {
      unint64_t v22 = 0xE600000000000000;
      if (v18 != 0x627553627550) {
        goto LABEL_41;
      }
    }
    if (v20 == v22)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_45;
    }
LABEL_41:
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v23) {
      goto LABEL_45;
    }

    uint64_t v4 = v11;
    unint64_t v5 = v12;
    if (v2 < 0) {
      goto LABEL_8;
    }
LABEL_11:
    if (!v5) {
      break;
    }
    uint64_t v12 = (v5 - 1) & v5;
    unint64_t v13 = __clz(__rbit64(v5)) | (v4 << 6);
    uint64_t v11 = v4;
LABEL_29:
    id v10 = *(id *)(*(void *)(v2 + 48) + 8 * v13);
    if (!v10) {
      goto LABEL_45;
    }
  }
  int64_t v14 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    return;
  }
  if (v14 >= v24) {
    goto LABEL_45;
  }
  unint64_t v15 = *(void *)(v25 + 8 * v14);
  uint64_t v11 = v4 + 1;
  if (v15) {
    goto LABEL_28;
  }
  uint64_t v11 = v4 + 2;
  if (v4 + 2 >= v24) {
    goto LABEL_45;
  }
  unint64_t v15 = *(void *)(v25 + 8 * v11);
  if (v15) {
    goto LABEL_28;
  }
  uint64_t v11 = v4 + 3;
  if (v4 + 3 >= v24) {
    goto LABEL_45;
  }
  unint64_t v15 = *(void *)(v25 + 8 * v11);
  if (v15) {
    goto LABEL_28;
  }
  uint64_t v11 = v4 + 4;
  if (v4 + 4 >= v24) {
    goto LABEL_45;
  }
  unint64_t v15 = *(void *)(v25 + 8 * v11);
  if (v15) {
    goto LABEL_28;
  }
  uint64_t v11 = v4 + 5;
  if (v4 + 5 >= v24) {
    goto LABEL_45;
  }
  unint64_t v15 = *(void *)(v25 + 8 * v11);
  if (v15)
  {
LABEL_28:
    uint64_t v12 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
    goto LABEL_29;
  }
  uint64_t v16 = v4 + 6;
  while (v24 != v16)
  {
    unint64_t v15 = *(void *)(v25 + 8 * v16++);
    if (v15)
    {
      uint64_t v11 = v16 - 1;
      goto LABEL_28;
    }
  }
LABEL_45:
  outlined consume of [AnyHashable : Any].Iterator._Variant();
}

void specialized Sequence.first(where:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
    lazy protocol witness table accessor for type TUConversationVirtualParticipant and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v24;
    uint64_t v23 = v25;
    uint64_t v2 = v26;
    uint64_t v3 = v27;
    unint64_t v4 = v28;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v23 = a1 + 56;
    uint64_t v6 = ~v5;
    uint64_t v7 = -v5;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v4 = v8 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v2 = v6;
    uint64_t v3 = 0;
  }
  uint64_t v21 = v2;
  int64_t v22 = (unint64_t)(v2 + 64) >> 6;
  if ((v1 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (!__CocoaSet.Iterator.next()()) {
    goto LABEL_36;
  }
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v9 = v29;
  swift_unknownObjectRelease();
  uint64_t v10 = v3;
  uint64_t v11 = v4;
  if (!v29) {
    goto LABEL_36;
  }
  while (1)
  {
    id v16 = objc_msgSend(v9, sel_pluginName, v21);
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    if (v17 == 0x627553627550 && v19 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v20) {
      goto LABEL_36;
    }

    uint64_t v3 = v10;
    unint64_t v4 = v11;
    if (v1 < 0) {
      goto LABEL_8;
    }
LABEL_11:
    if (!v4) {
      break;
    }
    uint64_t v11 = (v4 - 1) & v4;
    unint64_t v12 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v10 = v3;
LABEL_29:
    id v9 = *(id *)(*(void *)(v1 + 48) + 8 * v12);
    if (!v9) {
      goto LABEL_36;
    }
  }
  int64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    return;
  }
  if (v13 >= v22) {
    goto LABEL_36;
  }
  unint64_t v14 = *(void *)(v23 + 8 * v13);
  uint64_t v10 = v3 + 1;
  if (v14) {
    goto LABEL_28;
  }
  uint64_t v10 = v3 + 2;
  if (v3 + 2 >= v22) {
    goto LABEL_36;
  }
  unint64_t v14 = *(void *)(v23 + 8 * v10);
  if (v14) {
    goto LABEL_28;
  }
  uint64_t v10 = v3 + 3;
  if (v3 + 3 >= v22) {
    goto LABEL_36;
  }
  unint64_t v14 = *(void *)(v23 + 8 * v10);
  if (v14) {
    goto LABEL_28;
  }
  uint64_t v10 = v3 + 4;
  if (v3 + 4 >= v22) {
    goto LABEL_36;
  }
  unint64_t v14 = *(void *)(v23 + 8 * v10);
  if (v14) {
    goto LABEL_28;
  }
  uint64_t v10 = v3 + 5;
  if (v3 + 5 >= v22) {
    goto LABEL_36;
  }
  unint64_t v14 = *(void *)(v23 + 8 * v10);
  if (v14)
  {
LABEL_28:
    uint64_t v11 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_29;
  }
  uint64_t v15 = v3 + 6;
  while (v22 != v15)
  {
    unint64_t v14 = *(void *)(v23 + 8 * v15++);
    if (v14)
    {
      uint64_t v10 = v15 - 1;
      goto LABEL_28;
    }
  }
LABEL_36:
  outlined consume of [AnyHashable : Any].Iterator._Variant();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;

  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
    lazy protocol witness table accessor for type TUConversationVirtualParticipant and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v24;
    uint64_t v23 = v25;
    uint64_t v2 = v26;
    uint64_t v3 = v27;
    unint64_t v4 = v28;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v23 = a1 + 56;
    uint64_t v6 = ~v5;
    uint64_t v7 = -v5;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v4 = v8 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v2 = v6;
    uint64_t v3 = 0;
  }
  uint64_t v21 = v2;
  int64_t v22 = (unint64_t)(v2 + 64) >> 6;
  if ((v1 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (!__CocoaSet.Iterator.next()()) {
    goto LABEL_36;
  }
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v9 = v29;
  swift_unknownObjectRelease();
  uint64_t v10 = v3;
  uint64_t v11 = v4;
  if (!v29) {
    goto LABEL_36;
  }
  while (1)
  {
    id v16 = objc_msgSend(v9, sel_pluginName, v21);
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    if (v17 == 0xD000000000000010 && v19 == 0x80000001A38FFB20)
    {
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v20) {
      goto LABEL_36;
    }

    uint64_t v3 = v10;
    unint64_t v4 = v11;
    if (v1 < 0) {
      goto LABEL_8;
    }
LABEL_11:
    if (!v4) {
      break;
    }
    uint64_t v11 = (v4 - 1) & v4;
    unint64_t v12 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v10 = v3;
LABEL_29:
    id v9 = *(id *)(*(void *)(v1 + 48) + 8 * v12);
    if (!v9) {
      goto LABEL_36;
    }
  }
  int64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    return;
  }
  if (v13 >= v22) {
    goto LABEL_36;
  }
  unint64_t v14 = *(void *)(v23 + 8 * v13);
  uint64_t v10 = v3 + 1;
  if (v14) {
    goto LABEL_28;
  }
  uint64_t v10 = v3 + 2;
  if (v3 + 2 >= v22) {
    goto LABEL_36;
  }
  unint64_t v14 = *(void *)(v23 + 8 * v10);
  if (v14) {
    goto LABEL_28;
  }
  uint64_t v10 = v3 + 3;
  if (v3 + 3 >= v22) {
    goto LABEL_36;
  }
  unint64_t v14 = *(void *)(v23 + 8 * v10);
  if (v14) {
    goto LABEL_28;
  }
  uint64_t v10 = v3 + 4;
  if (v3 + 4 >= v22) {
    goto LABEL_36;
  }
  unint64_t v14 = *(void *)(v23 + 8 * v10);
  if (v14) {
    goto LABEL_28;
  }
  uint64_t v10 = v3 + 5;
  if (v3 + 5 >= v22) {
    goto LABEL_36;
  }
  unint64_t v14 = *(void *)(v23 + 8 * v10);
  if (v14)
  {
LABEL_28:
    uint64_t v11 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_29;
  }
  uint64_t v15 = v3 + 6;
  while (v22 != v15)
  {
    unint64_t v14 = *(void *)(v23 + 8 * v15++);
    if (v14)
    {
      uint64_t v10 = v15 - 1;
      goto LABEL_28;
    }
  }
LABEL_36:
  outlined consume of [AnyHashable : Any].Iterator._Variant();
}

BOOL static TopicManager.Errors.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void TopicManager.Errors.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int TopicManager.Errors.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t TopicManager.ServiceName.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x627553627550;
  }
  if (a1 == 1) {
    return 0xD000000000000013;
  }
  return 0xD000000000000010;
}

uint64_t TopicManager.conversationClientsByGroupUUID.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TopicManager.ServiceName(unsigned char *a1, unsigned char *a2)
{
  unint64_t v2 = 0xD000000000000010;
  int v3 = *a1;
  if (v3 == 1) {
    unint64_t v4 = 0xD000000000000013;
  }
  else {
    unint64_t v4 = 0xD000000000000010;
  }
  if (v3 == 1) {
    unint64_t v5 = 0x80000001A38FFB00;
  }
  else {
    unint64_t v5 = 0x80000001A38FFB20;
  }
  if (*a1) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0x627553627550;
  }
  if (v3) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = 0xE600000000000000;
  }
  if (*a2 == 1)
  {
    unint64_t v2 = 0xD000000000000013;
    unint64_t v8 = 0x80000001A38FFB00;
  }
  else
  {
    unint64_t v8 = 0x80000001A38FFB20;
  }
  if (*a2) {
    uint64_t v9 = v2;
  }
  else {
    uint64_t v9 = 0x627553627550;
  }
  if (*a2) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = 0xE600000000000000;
  }
  if (v6 == v9 && v7 == v10) {
    char v11 = 1;
  }
  else {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TopicManager.ServiceName()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TopicManager.ServiceName()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TopicManager.ServiceName()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TopicManager.ServiceName@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized TopicManager.ServiceName.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TopicManager.ServiceName(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE600000000000000;
  unint64_t v4 = 0xD000000000000013;
  unint64_t v5 = 0x80000001A38FFB00;
  if (v2 != 1)
  {
    unint64_t v4 = 0xD000000000000010;
    unint64_t v5 = 0x80000001A38FFB20;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = 0x627553627550;
  }
  if (!v6) {
    unint64_t v3 = v5;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t TopicManager.lock.getter()
{
  return swift_retain();
}

uint64_t TopicManager.provider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15GroupActivities12TopicManager_provider;
  swift_beginAccess();
  return outlined init with copy of AudioSessionAssertionManager(v3, a1);
}

uint64_t TopicManager.provider.setter(long long *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15GroupActivities12TopicManager_provider;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  outlined init with take of TypedPayloadDecoding(a1, v3);
  return swift_endAccess();
}

uint64_t (*TopicManager.provider.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t TopicManager.featureFlags.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t TopicManager.__allocating_init(provider:featureFlags:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = specialized TopicManager.__allocating_init(provider:featureFlags:)(v7, a2, v2, v5, ObjectType, v6);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v9;
}

uint64_t TopicManager.init(provider:featureFlags:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = specialized TopicManager.init(provider:featureFlags:)((uint64_t)v9, a2, v2, v5, ObjectType, v6);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v12;
}

uint64_t closure #1 in TopicManager.init(provider:featureFlags:)()
{
  return Lock.withLock<A>(_:)();
}

uint64_t closure #1 in closure #1 in TopicManager.init(provider:featureFlags:)(uint64_t a1, uint64_t a2)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  v5[2] = a2;
  uint64_t v3 = specialized _NativeDictionary.filter(_:)(v6, (uint64_t (*)(char *, uint64_t))partial apply for closure #1 in closure #1 in closure #1 in TopicManager.init(provider:featureFlags:), (uint64_t)v5);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v6 = v3;
  swift_retain();
  return static Published.subscript.setter();
}

BOOL closure #1 in closure #1 in closure #1 in TopicManager.init(provider:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v6 & 1) == 0) {
    return 0;
  }
  id v7 = *(id *)(*(void *)(a3 + 56) + 8 * v5);
  id v8 = objc_msgSend(v7, sel_state);
  BOOL v9 = v8 == (id)3;
  if (v8 == (id)3) {
    (*(void (**)(id))(*(void *)a2 + 184))(v7);
  }

  return v9;
}

void *TopicManager.conversationClient(groupUUID:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v27 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  id v8 = (char *)&v23 - v7;
  uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC15GroupActivities12TopicManager_lock);
  Lock.assertOwned()();
  uint64_t v26 = v4;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v24 = a1;
  v10(v8, a1, v3);
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v25 = v1;
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v11 = v29[0];
  if (*(void *)(v29[0] + 16) && (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8), (v13 & 1) != 0))
  {
    uint64_t v14 = *(void **)(*(void *)(v11 + 56) + 8 * v12);
    swift_retain();
  }
  else
  {
    type metadata accessor for TopicManager.ConversationClient();
    uint64_t v14 = (void *)swift_allocObject();
    uint64_t v14[2] = MEMORY[0x1E4FBC868];
    uint64_t v15 = self;
    swift_retain();
    v14[3] = objc_msgSend(v15, sel_weakObjectsHashTable);
    v14[4] = v9;
  }
  swift_bridgeObjectRelease();
  id v16 = *(void (**)(char *, uint64_t))(v26 + 8);
  v16(v8, v3);
  uint64_t v17 = (uint64_t)v27;
  v10(v27, v24, v3);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  uint64_t v18 = (void (*)(void *, void))static Published.subscript.modify();
  char v20 = v19;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v28 = *v20;
  *char v20 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, v17, isUniquelyReferenced_nonNull_native);
  *char v20 = v28;
  swift_bridgeObjectRelease();
  v16((char *)v17, v3);
  v18(v29, 0);
  swift_release();
  swift_release();
  return v14;
}

void *TopicManager.ConversationClient.__allocating_init(lock:)(uint64_t a1)
{
  uint64_t v2 = (void *)swift_allocObject();
  v2[2] = MEMORY[0x1E4FBC868];
  v2[3] = objc_msgSend(self, sel_weakObjectsHashTable);
  v2[4] = a1;
  return v2;
}

uint64_t TopicManager.firstConversation(for:with:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  int v19 = a2;
  uint64_t v18 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer>);
  uint64_t v22 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  id v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.First<Publishers.CompactMap<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer>>);
  uint64_t v23 = *(void *)(v21 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v21);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v2 + 192))(v25, v9);
  __swift_project_boxed_opaque_existential_1(v25, v25[3]);
  uint64_t v24 = dispatch thunk of ActivitySessionContainerProvider.onActivitySessionsChanged.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v18, v4);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v13 + v12, (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  *(unsigned char *)(v13 + v12 + v6) = v19;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>);
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>);
  Publisher.compactMap<A>(_:)();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer>);
  uint64_t v14 = v20;
  Publisher.first()();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v14);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.First<Publishers.CompactMap<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer>> and conformance Publishers.First<A>, (uint64_t *)&demangling cache variable for type metadata for Publishers.First<Publishers.CompactMap<AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>, TUConversationActivitySessionContainer>>);
  uint64_t v15 = v21;
  uint64_t v16 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v15);
  return v16;
}

uint64_t closure #1 in TopicManager.firstConversation(for:with:)()
{
  return Lock.withLock<A>(_:)();
}

void closure #1 in closure #1 in TopicManager.firstConversation(for:with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  LODWORD(v70) = a3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  unint64_t v12 = &v65[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = &v65[-v14];
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = &v65[-v16];
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v72 = a4;
  if (!v18 || (unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v20 & 1) == 0))
  {
    if (one-time initialization token for topicManager != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Log.topicManager);
    uint64_t v23 = v9;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v17, a2, v8);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v71 = v4;
      uint64_t v27 = (uint8_t *)v26;
      uint64_t v28 = swift_slowAlloc();
      uint64_t v74 = v28;
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v70 = (uint64_t)(v27 + 4);
      lazy protocol witness table accessor for type PluginAttachmentLedgerTopic and conformance PluginAttachmentLedgerTopic((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v23 + 8))(v17, v8);
      _os_log_impl(&dword_1A375F000, v24, v25, "No conversation exists for group=%s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v28, -1, -1);
      MEMORY[0x1A624F870](v27, -1, -1);
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v23 + 8))(v17, v8);
    }

    id v21 = 0;
    goto LABEL_20;
  }
  id v21 = *(id *)(*(void *)(a1 + 56) + 8 * v19);
  if (objc_msgSend(v21, sel_state) != (id)3 || !objc_msgSend(v21, sel_localParticipantIdentifier))
  {
    uint64_t v71 = v4;
    if (one-time initialization token for topicManager != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Log.topicManager);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
    id v32 = v21;
    unint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      uint64_t v70 = swift_slowAlloc();
      uint64_t v74 = v70;
      *(_DWORD *)uint64_t v35 = 136315394;
      lazy protocol witness table accessor for type PluginAttachmentLedgerTopic and conformance PluginAttachmentLedgerTopic((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v74);
      os_log_t v68 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v12, v8);
      *(_WORD *)(v35 + 12) = 2112;
      uint64_t v73 = (uint64_t)v32;
      id v38 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v39 = v69;
      *(void *)uint64_t v69 = v32;

      os_log_t v40 = v68;
      _os_log_impl(&dword_1A375F000, v68, v34, "Conversation for group=%s is not yet established: %@", (uint8_t *)v35, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v39, -1, -1);
      uint64_t v41 = v70;
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v41, -1, -1);
      MEMORY[0x1A624F870](v35, -1, -1);
    }
    else
    {

      (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v12, v8);
    }
    id v21 = 0;
LABEL_20:
    a4 = v72;
    goto LABEL_21;
  }
  if ((_BYTE)v70)
  {
    if (v70 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    os_log_type_t v42 = a4;
    uint64_t v43 = v4;
  }
  else
  {
    os_log_type_t v42 = a4;
    uint64_t v43 = v4;
  }
  uint64_t v69 = (uint64_t)"supportsContinuationOnTV";
  char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v44)
  {
    a4 = v42;
  }
  else
  {
    id v45 = objc_msgSend(v21, sel_virtualParticipants);
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
    lazy protocol witness table accessor for type TUConversationVirtualParticipant and conformance NSObject();
    uint64_t v46 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    specialized Sequence.first(where:)(v46, v70);
    uint64_t v48 = v47;
    uint64_t v71 = v43;
    swift_bridgeObjectRelease();

    if (v48)
    {
      a4 = v42;
    }
    else
    {
      a4 = v42;
      if (one-time initialization token for topicManager != -1) {
        swift_once();
      }
      uint64_t v49 = type metadata accessor for Logger();
      __swift_project_value_buffer(v49, (uint64_t)static Log.topicManager);
      uint64_t v50 = v9;
      uint64_t v51 = v8;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v15, a2, v8);
      id v52 = v21;
      uint64_t v53 = Logger.logObject.getter();
      int v54 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v53, (os_log_type_t)v54))
      {
        int v66 = v54;
        os_log_t v68 = v53;
        uint64_t v55 = swift_slowAlloc();
        uint64_t v56 = (void *)swift_slowAlloc();
        uint64_t v67 = swift_slowAlloc();
        uint64_t v74 = v67;
        *(_DWORD *)uint64_t v55 = 136315650;
        lazy protocol witness table accessor for type PluginAttachmentLedgerTopic and conformance PluginAttachmentLedgerTopic((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, &v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(unsigned char *, uint64_t))(v50 + 8))(v15, v51);
        *(_WORD *)(v55 + 12) = 2080;
        Class v59 = a4;
        if ((_BYTE)v70)
        {
          if (v70 == 1) {
            uint64_t v60 = 0xD000000000000013;
          }
          else {
            uint64_t v60 = 0xD000000000000010;
          }
          if (v70 == 1) {
            unint64_t v61 = v69 | 0x8000000000000000;
          }
          else {
            unint64_t v61 = 0x80000001A38FFB20;
          }
        }
        else
        {
          unint64_t v61 = 0xE600000000000000;
          uint64_t v60 = 0x627553627550;
        }
        uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, &v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v55 + 22) = 2112;
        uint64_t v73 = (uint64_t)v52;
        id v62 = v52;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v56 = v52;

        os_log_t v63 = v68;
        _os_log_impl(&dword_1A375F000, v68, (os_log_type_t)v66, "Conversation for group=%s is not yet ready to establish a (%s) plugin connection: %@", (uint8_t *)v55, 0x20u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v56, -1, -1);
        uint64_t v64 = v67;
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v64, -1, -1);
        MEMORY[0x1A624F870](v55, -1, -1);

        id v21 = 0;
        a4 = v59;
      }
      else
      {

        (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v15, v51);
        id v21 = 0;
      }
    }
  }
LABEL_21:
  *a4 = v21;
}

uint64_t TopicManager.createAttachmentLedgerTopic(groupUUID:name:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return TopicManager.createAttachmentLedgerTopic(groupUUID:name:)(a1, a2, a3, MEMORY[0x1E4FBD390], "Creating AttachmentLedgerTopic, topic=%s", (void (*)(void))type metadata accessor for AttachmentLedgerTopic);
}

uint64_t closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v21 = a2;
  os_log_type_t v25 = a4;
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v23 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v23);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = TopicManager.conversationClient(groupUUID:)(a1);
  uint64_t v10 = swift_allocObject();
  uint64_t v22 = v10;
  swift_weakInit();
  uint64_t v11 = (void *)swift_allocObject();
  _OWORD v11[2] = v10;
  long long v11[3] = a2;
  v11[4] = a3;
  uint64_t v12 = a3;
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  uint64_t v14 = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v23);
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  uint64_t v17 = v21;
  *((void *)v16 + 2) = v13;
  *((void *)v16 + 3) = v17;
  *((void *)v16 + 4) = v12;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v16[v15], v9, v14);
  type metadata accessor for AttachmentLedgerTopic(0);
  swift_allocObject();
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_retain();
  uint64_t v18 = AttachmentLedgerTopic.init(name:retainRefOnStart:pluginGenerator:)(v17, v12, (uint64_t)partial apply for closure #1 in closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:), (uint64_t)v11, (uint64_t)partial apply for closure #2 in closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:), (uint64_t)v16);
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *os_log_type_t v25 = v18;
  return result;
}

uint64_t closure #1 in closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return 0;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)Strong + 216))(a2, a3);
  swift_release();
  return v6;
}

uint64_t closure #2 in closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v34 = a3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.Map<AnyPublisher<PluginAttachmentLedgerTopic, Error>, PluginAttachmentLedgerTopicProvider>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  unint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v17 = Strong;
    if (objc_msgSend(*(id *)(Strong + OBJC_IVAR____TtC15GroupActivities12TopicManager_featureFlags), sel_sharePlayAttachmentLedgerEnabled))
    {
      uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, void))(*(void *)v17 + 304))(a5, v34, a4, a1, *(void *)(a1 + 40));
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyPublisher<PluginAttachmentLedgerTopic, Error>);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<PluginAttachmentLedgerTopic, Error> and conformance AnyPublisher<A, B>, (uint64_t *)&demangling cache variable for type metadata for AnyPublisher<PluginAttachmentLedgerTopic, Error>);
      Publisher.map<A>(_:)();
      swift_release();
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<AnyPublisher<PluginAttachmentLedgerTopic, Error>, PluginAttachmentLedgerTopicProvider> and conformance Publishers.Map<A, B>, &demangling cache variable for type metadata for Publishers.Map<AnyPublisher<PluginAttachmentLedgerTopic, Error>, PluginAttachmentLedgerTopicProvider>);
      uint64_t v18 = Publisher.eraseToAnyPublisher()();
      swift_release();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
    else
    {
      if (one-time initialization token for topicManager != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Log.topicManager);
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl(&dword_1A375F000, v20, v21, "FeatureFlag is not enabled so we can't bootstrap a PluginAttachmentLedgerTopic", v22, 2u);
        MEMORY[0x1A624F870](v22, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<PluginAttachmentLedgerTopicProvider, Error>);
      swift_allocObject();
      uint64_t v23 = PassthroughSubject.init()();
      lazy protocol witness table accessor for type TopicManager.Errors and conformance TopicManager.Errors();
      uint64_t v24 = (void *)swift_allocError();
      *os_log_type_t v25 = 0;
      uint64_t v36 = (uint64_t)v24;
      PassthroughSubject.send(completion:)();

      uint64_t v36 = v23;
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type PassthroughSubject<PluginAttachmentLedgerTopicProvider, Error> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<PluginAttachmentLedgerTopicProvider, Error>);
      uint64_t v18 = Publisher.eraseToAnyPublisher()();
      swift_release();
      swift_release();
    }
    return v18;
  }
  else
  {
    if (one-time initialization token for topicManager != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Log.topicManager);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a5, v12);
    swift_bridgeObjectRetain_n();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v36 = v31;
      *(_DWORD *)uint64_t v30 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, a4, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v30 + 12) = 2080;
      lazy protocol witness table accessor for type PluginAttachmentLedgerTopic and conformance PluginAttachmentLedgerTopic((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      _os_log_impl(&dword_1A375F000, v28, v29, "TopicManager is no longer available, topic=%s, group=%s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v31, -1, -1);
      MEMORY[0x1A624F870](v30, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    }

    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in closure #2 in closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  a2[3] = type metadata accessor for PluginAttachmentLedgerTopic();
  a2[4] = lazy protocol witness table accessor for type PluginAttachmentLedgerTopic and conformance PluginAttachmentLedgerTopic(&lazy protocol witness table cache variable for type PluginAttachmentLedgerTopic and conformance PluginAttachmentLedgerTopic, MEMORY[0x1E4F5B0F0]);
  *a2 = v3;

  return swift_retain();
}

uint64_t TopicManager.createTopic(groupUUID:name:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return TopicManager.createAttachmentLedgerTopic(groupUUID:name:)(a1, a2, a3, MEMORY[0x1E4FBD370], "Creating Topic, topic=%s", (void (*)(void))type metadata accessor for Topic);
}

uint64_t TopicManager.createAttachmentLedgerTopic(groupUUID:name:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(void), const char *a5, void (*a6)(void))
{
  if (one-time initialization token for topicManager != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.topicManager);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = a4();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v18 = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A375F000, v11, v12, a5, v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v14, -1, -1);
    MEMORY[0x1A624F870](v13, -1, -1);
  }
  else
  {

    uint64_t v15 = swift_bridgeObjectRelease_n();
  }
  MEMORY[0x1F4188790](v15);
  a6(0);
  Lock.withLock<A>(_:)();
  return v18;
}

uint64_t closure #1 in TopicManager.createTopic(groupUUID:name:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v17 = a2;
  uint64_t v18 = a4;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = TopicManager.conversationClient(groupUUID:)(a1);
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  os_log_type_t v12 = (char *)swift_allocObject();
  *((void *)v12 + 2) = v10;
  uint64_t v13 = v17;
  *((void *)v12 + 3) = v17;
  *((void *)v12 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  type metadata accessor for Topic();
  uint64_t v14 = swift_allocObject();
  swift_bridgeObjectRetain_n();
  uint64_t v15 = specialized Topic.init(name:delegate:pubSubTopicGenerator:)(v13, a3, (uint64_t)v9, (uint64_t)partial apply for closure #1 in closure #1 in TopicManager.createTopic(groupUUID:name:), (uint64_t)v12, v14);
  uint64_t result = swift_release();
  uint64_t *v18 = v15;
  return result;
}

uint64_t closure #1 in closure #1 in TopicManager.createTopic(groupUUID:name:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v42 = a4;
  uint64_t v45 = a3;
  uint64_t v40 = a1;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.FlatMap<AnyPublisher<PubSubTopic, Error>, Publishers.SetFailureType<AnyPublisher<PubSubClient.TopicCategory, Never>, Error>>);
  uint64_t v44 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  uint64_t v43 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v41 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = MEMORY[0x1F4188790](v41);
  uint64_t v10 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  os_log_type_t v12 = (char *)&v39 - v11;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v14 = Strong;
    (*(void (**)(void *__return_ptr))(*(void *)Strong + 192))(v49);
    __swift_project_boxed_opaque_existential_1(v49, v49[3]);
    uint64_t v15 = v45;
    unint64_t v16 = v42;
    uint64_t v48 = dispatch thunk of ActivitySessionContainerProvider.topicCategory(groupUUID:name:)();
    uint64_t v17 = a5;
    uint64_t v18 = v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v17, v41);
    outlined init with copy of Topic.BootstrapPubSubTopicInfo(v40, (uint64_t)v47);
    unint64_t v19 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    unint64_t v20 = (v8 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v14;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v21 + v19, v10, v18);
    uint64_t v22 = (uint64_t *)(v21 + v20);
    *uint64_t v22 = v15;
    v22[1] = v16;
    uint64_t v23 = (_OWORD *)(v21 + ((v20 + 23) & 0xFFFFFFFFFFFFFFF8));
    long long v24 = v47[3];
    v23[2] = v47[2];
    void v23[3] = v24;
    long long v25 = v47[1];
    *uint64_t v23 = v47[0];
    v23[1] = v25;
    swift_bridgeObjectRetain();
    swift_retain();
    static Subscribers.Demand.unlimited.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyPublisher<PubSubClient.TopicCategory, Never>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<PubSubTopic, Error>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<PubSubClient.TopicCategory, Never> and conformance AnyPublisher<A, B>, (uint64_t *)&demangling cache variable for type metadata for AnyPublisher<PubSubClient.TopicCategory, Never>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<PubSubTopic, Error> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<PubSubTopic, Error>);
    uint64_t v26 = v43;
    Publisher<>.flatMap<A>(maxPublishers:_:)();
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v49);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.FlatMap<AnyPublisher<PubSubTopic, Error>, Publishers.SetFailureType<AnyPublisher<PubSubClient.TopicCategory, Never>, Error>> and conformance Publishers.FlatMap<A, B>, &demangling cache variable for type metadata for Publishers.FlatMap<AnyPublisher<PubSubTopic, Error>, Publishers.SetFailureType<AnyPublisher<PubSubClient.TopicCategory, Never>, Error>>);
    uint64_t v27 = v46;
    uint64_t v28 = Publisher.eraseToAnyPublisher()();
    swift_release();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v26, v27);
    return v28;
  }
  else
  {
    unint64_t v30 = v42;
    uint64_t v31 = v41;
    if (one-time initialization token for topicManager != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Log.topicManager);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, a5, v31);
    swift_bridgeObjectRetain_n();
    unint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(void *)&v47[0] = v36;
      *(_DWORD *)uint64_t v35 = 136315394;
      swift_bridgeObjectRetain();
      v49[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v30, (uint64_t *)v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v35 + 12) = 2080;
      lazy protocol witness table accessor for type PluginAttachmentLedgerTopic and conformance PluginAttachmentLedgerTopic((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      v49[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, (uint64_t *)v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v31);
      _os_log_impl(&dword_1A375F000, v33, v34, "TopicManager is no longer available, topic=%s group=%s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v36, -1, -1);
      MEMORY[0x1A624F870](v35, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v31);
    }

    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t TopicManager.createUnreliableMessenger(groupUUID:name:localParticipantID:unreliableMessengerConfig:delegate:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (one-time initialization token for topicManager != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.topicManager);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v12 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A375F000, v6, v7, "Creating UnreliableMessenger, topic=%s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v9, -1, -1);
    MEMORY[0x1A624F870](v8, -1, -1);
  }
  else
  {

    uint64_t v10 = swift_bridgeObjectRelease_n();
  }
  MEMORY[0x1F4188790](v10);
  type metadata accessor for UnreliableMessenger();
  Lock.withLock<A>(_:)();
  return v12;
}

uint64_t closure #1 in TopicManager.createUnreliableMessenger(groupUUID:name:localParticipantID:unreliableMessengerConfig:delegate:)@<X0>(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  uint64_t v48 = a8;
  uint64_t v46 = a5;
  uint64_t v47 = a7;
  uint64_t v45 = a6;
  uint64_t v40 = a3;
  uint64_t v41 = a4;
  uint64_t v35 = a1;
  uint64_t v44 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v44 - 8);
  uint64_t v43 = *(void *)(v42 + 64);
  MEMORY[0x1F4188790](v44);
  uint64_t v39 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for UnreliableMessenger.Configuration();
  uint64_t v38 = *(void *)(v52 - 8);
  uint64_t v11 = v38;
  uint64_t v12 = MEMORY[0x1F4188790](v52);
  uint64_t v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v34 = v14;
  MEMORY[0x1F4188790](v12);
  unint64_t v16 = (char *)v31 - v15;
  uint64_t v32 = TopicManager.conversationClient(groupUUID:)(a1);
  objc_msgSend(a2, sel_egressMessagePayloadMaxSizeBytes);
  objc_msgSend(a2, sel_channelStreamMaxQueueSize);
  objc_msgSend(a2, sel_channelStreamMaxTries);
  unint64_t v33 = a2;
  objc_msgSend(a2, sel_channelStreamRetryIntervalMillis);
  objc_msgSend(a2, sel_seqNumBufferSize);
  uint64_t v36 = v16;
  UnreliableMessenger.Configuration.init(datagramPayloadMaxSizeBytes:outgoingQueueMaxSize:channelStreamMaxTries:channelStreamRetryInterval:seqNumBufferSize:)();
  uint64_t v37 = type metadata accessor for UnreliableMessenger();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v52);
  uint64_t v51 = 0;
  long long v49 = 0u;
  long long v50 = 0u;
  uint64_t v17 = (void *)swift_allocObject();
  v31[1] = v17;
  uint64_t v19 = v40;
  uint64_t v18 = v41;
  _OWORD v17[2] = v32;
  long long v17[3] = v19;
  v17[4] = v18;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  uint64_t v21 = v42;
  uint64_t v22 = v39;
  uint64_t v23 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v39, v35, v44);
  unint64_t v24 = (*(unsigned __int8 *)(v21 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v25 = (v43 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = (char *)swift_allocObject();
  *((void *)v26 + 2) = v20;
  *((void *)v26 + 3) = v19;
  *((void *)v26 + 4) = v18;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(&v26[v24], v22, v23);
  uint64_t v27 = v33;
  *(void *)&v26[v25] = v33;
  swift_unknownObjectRetain();
  swift_retain();
  id v28 = v27;
  swift_bridgeObjectRetain_n();
  uint64_t v29 = UnreliableMessenger.__allocating_init(name:config:localParticipantID:delegate:dataCryptorProvider:retainRefOnStart:serviceProvider:)();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v36, v52);
  uint64_t result = swift_release();
  uint64_t *v48 = v29;
  return result;
}

uint64_t closure #3 in closure #1 in TopicManager.createUnreliableMessenger(groupUUID:name:localParticipantID:unreliableMessengerConfig:delegate:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)Strong + 264))(a4, a2, a3, a5);
    swift_release();
    return v14;
  }
  else
  {
    uint64_t v24 = a2;
    uint64_t v25 = v10;
    if (one-time initialization token for topicManager != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Log.topicManager);
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v12, a4, v9);
    swift_bridgeObjectRetain_n();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v27 = v20;
      *(_DWORD *)uint64_t v19 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, a3, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v19 + 12) = 2080;
      lazy protocol witness table accessor for type PluginAttachmentLedgerTopic and conformance PluginAttachmentLedgerTopic((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v9);
      _os_log_impl(&dword_1A375F000, v17, v18, "Topic manager is no longer available, topic=%s group=%s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v20, -1, -1);
      MEMORY[0x1A624F870](v19, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v9);
    }

    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v51 = a4;
  unint64_t v46 = a3;
  uint64_t v45 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, UnreliableMessengerServiceProvider>);
  uint64_t v54 = *(void *)(v7 - 8);
  uint64_t v55 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v52 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, UnreliableMessengerServiceProvider>>);
  uint64_t v56 = *(void *)(v9 - 8);
  uint64_t v57 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v53 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<UnreliableMessengerServiceProvider>);
  uint64_t v48 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  uint64_t v47 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  os_log_type_t v18 = (char *)&v44 - v17;
  uint64_t v58 = *(void *)(v4 + OBJC_IVAR____TtC15GroupActivities12TopicManager_lock);
  Lock.lock()();
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v50 = a1;
  v19(v18, a1, v12);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v20 = v59;
  if (!*(void *)(v59 + 16) || (unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v18), (v22 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    uint64_t v62 = 0;
    long long v60 = 0u;
    long long v61 = 0u;
    goto LABEL_9;
  }
  uint64_t v23 = *(void *)(*(void *)(v20 + 56) + 8 * v21);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v24 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v23 + 152))(&v60, v24);
  swift_release();
  if (!*((void *)&v61 + 1))
  {
LABEL_9:
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v60, &demangling cache variable for type metadata for UnreliableMessengerServiceProvider?);
    Lock.unlock()();
    uint64_t v31 = v50;
    v63[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 232))(v50, 1);
    v19(v16, v31, v12);
    unint64_t v32 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = v5;
    (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v33 + v32, v16, v12);
    os_log_type_t v34 = v51;
    *(void *)(v33 + ((v14 + v32 + 7) & 0xFFFFFFFFFFFFFFF8)) = v51;
    swift_retain();
    id v35 = v34;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<TUConversationActivitySessionContainer, Never>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnreliableMessengerServiceProvider);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<TUConversationActivitySessionContainer, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<TUConversationActivitySessionContainer, Never>);
    uint64_t v36 = v52;
    Publisher.compactMap<A>(_:)();
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, UnreliableMessengerServiceProvider> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, UnreliableMessengerServiceProvider>);
    uint64_t v37 = v53;
    uint64_t v38 = v55;
    Publisher.first()();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v38);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, UnreliableMessengerServiceProvider>> and conformance Publishers.First<A>, &demangling cache variable for type metadata for Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, UnreliableMessengerServiceProvider>>);
    uint64_t v39 = v57;
    uint64_t v40 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v37, v39);
    goto LABEL_10;
  }
  outlined init with take of TypedPayloadDecoding(&v60, (uint64_t)v63);
  if (one-time initialization token for topicManager != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Log.topicManager);
  unint64_t v26 = v46;
  swift_bridgeObjectRetain_n();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(void *)&long long v60 = v30;
    *(_DWORD *)uint64_t v29 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v26, (uint64_t *)&v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A375F000, v27, v28, "Re-using existing UnreliableMessengerServiceProvider for topic=%s", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v30, -1, -1);
    MEMORY[0x1A624F870](v29, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  Lock.unlock()();
  outlined init with copy of AudioSessionAssertionManager((uint64_t)v63, (uint64_t)&v60);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnreliableMessengerServiceProvider);
  uint64_t v42 = v47;
  Just.init(_:)();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Just<UnreliableMessengerServiceProvider> and conformance Just<A>, &demangling cache variable for type metadata for Just<UnreliableMessengerServiceProvider>);
  uint64_t v43 = v49;
  uint64_t v40 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v42, v43);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v63);
LABEL_10:
  Lock.assertNotOwned()();
  return v40;
}

uint64_t closure #1 in TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:)()
{
  return Lock.withLock<A>(_:)();
}

void closure #1 in closure #1 in TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v37 = a5;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v13 = v39;
  if (*(void *)(v39 + 16) && (unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12), (v15 & 1) != 0))
  {
    uint64_t v16 = *(void *)(*(void *)(v13 + 56) + 8 * v14);
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v17 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    MEMORY[0x1F4188790](v17);
    v36[-4] = a1;
    v36[-3] = a3;
    v36[-2] = a2;
    v36[-1] = a4;
    os_log_type_t v18 = (void *)v36[1];
    (*(void (**)(uint64_t (*)@<X0>(uint64_t@<X8>)))(*(void *)v16 + 200))(partial apply for closure #1 in closure #1 in closure #1 in TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:));
    if (!v18)
    {
      swift_release();
      return;
    }
    swift_release();
    uint64_t v19 = v18;
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    if (one-time initialization token for topicManager != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Log.topicManager);
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&dword_1A375F000, v21, v22, "Can't create UnreliableMessenger yet because there's no ConversationClient object", v23, 2u);
      MEMORY[0x1A624F870](v23, -1, -1);
    }

    lazy protocol witness table accessor for type TopicManager.Errors and conformance TopicManager.Errors();
    uint64_t v19 = (void *)swift_allocError();
    unsigned char *v24 = 1;
    swift_willThrow();
  }
  if (one-time initialization token for topicManager != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Log.topicManager);
  id v26 = v19;
  id v27 = v19;
  os_log_type_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v39 = v31;
    *(_DWORD *)uint64_t v30 = 136315138;
    uint64_t v38 = (uint64_t)v19;
    id v32 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v33 = String.init<A>(reflecting:)();
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v28, v29, "Failed to create UnreliableMessenger due to error: %s", v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v31, -1, -1);
    MEMORY[0x1A624F870](v30, -1, -1);
  }
  else
  {
  }
  id v35 = (_OWORD *)v37;
  *(void *)(v37 + 32) = 0;
  *id v35 = 0u;
  v35[1] = 0u;
}

uint64_t closure #1 in closure #1 in closure #1 in TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = objc_msgSend(a2, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)a1 + 296))(v13, a3, a4);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  *(unsigned char *)(a5 + 40) = 1;
  return result;
}

uint64_t TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v94 = a8;
  uint64_t v95 = a6;
  uint64_t v92 = a7;
  unint64_t v93 = a3;
  uint64_t v87 = a4;
  uint64_t v88 = a5;
  uint64_t v91 = a2;
  uint64_t v11 = type metadata accessor for PubSubClient.TopicCategory();
  uint64_t v89 = *(void *)(v11 - 8);
  uint64_t v90 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v79 = v12;
  uint64_t v80 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, PubSubClient>);
  uint64_t v77 = *(void *)(v78 - 8);
  MEMORY[0x1F4188790](v78);
  os_log_type_t v76 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, PubSubClient>>);
  uint64_t v83 = *(void *)(v14 - 8);
  uint64_t v84 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v81 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.FlatMap<Future<PubSubTopic, Error>, Publishers.SetFailureType<Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, PubSubClient>>, Error>>);
  uint64_t v85 = *(void *)(v16 - 8);
  uint64_t v86 = v16;
  MEMORY[0x1F4188790](v16);
  unint64_t v82 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PubSubClient.TopicCategory?);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v74 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PubSubTopic.Configuration?);
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v73 = (char *)&v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(void *)(v23 + 64);
  uint64_t v25 = MEMORY[0x1F4188790](v22);
  id v26 = (char *)&v72 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  os_log_type_t v28 = (char *)&v72 - v27;
  uint64_t v96 = *(void *)(v8 + OBJC_IVAR____TtC15GroupActivities12TopicManager_lock);
  Lock.lock()();
  os_log_type_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  uint64_t v75 = a1;
  v29(v28, a1, v22);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v30 = *(void *)&v98[0];
  if (!*(void *)(*(void *)&v98[0] + 16)
    || (unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v28), (v32 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v28, v22);
    goto LABEL_9;
  }
  uint64_t v33 = *(void *)(*(void *)(v30 + 56) + 8 * v31);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v34 = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v28, v22);
  uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 160))(v34);
  swift_release();
  if (!v35)
  {
LABEL_9:
    Lock.unlock()();
    uint64_t v44 = v75;
    *(void *)&v98[0] = (*(uint64_t (**)(uint64_t, void))(*(void *)v9 + 232))(v75, 0);
    v29(v26, v44, v22);
    unint64_t v45 = (*(unsigned __int8 *)(v23 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    uint64_t v46 = swift_allocObject();
    *(void *)(v46 + 16) = v9;
    (*(void (**)(unint64_t, char *, uint64_t))(v23 + 32))(v46 + v45, v26, v22);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<TUConversationActivitySessionContainer, Never>);
    type metadata accessor for PubSubClient();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<TUConversationActivitySessionContainer, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<TUConversationActivitySessionContainer, Never>);
    uint64_t v47 = v76;
    Publisher.compactMap<A>(_:)();
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, PubSubClient> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, PubSubClient>);
    uint64_t v48 = v81;
    uint64_t v49 = v78;
    Publisher.first()();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v47, v49);
    uint64_t v51 = v89;
    uint64_t v50 = v90;
    uint64_t v52 = v80;
    (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v80, v87, v90);
    outlined init with copy of AudioSessionAssertionManager(v88, (uint64_t)v98);
    unint64_t v53 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
    unint64_t v54 = (v79 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v55 = (v54 + 47) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v56 = swift_allocObject();
    unint64_t v57 = v93;
    *(void *)(v56 + 16) = v91;
    *(void *)(v56 + 24) = v57;
    (*(void (**)(unint64_t, char *, uint64_t))(v51 + 32))(v56 + v53, v52, v50);
    outlined init with take of TypedPayloadDecoding(v98, v56 + v54);
    uint64_t v58 = (void *)(v56 + v55);
    uint64_t v59 = v94;
    uint64_t v60 = v92;
    *uint64_t v58 = v95;
    v58[1] = v60;
    *(void *)(v56 + ((v55 + 23) & 0xFFFFFFFFFFFFFFF8)) = v59;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    static Subscribers.Demand.unlimited.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<PubSubTopic, Error>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, PubSubClient>> and conformance Publishers.First<A>, &demangling cache variable for type metadata for Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, PubSubClient>>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Future<PubSubTopic, Error> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<PubSubTopic, Error>);
    long long v61 = v82;
    uint64_t v62 = v84;
    Publisher<>.flatMap<A>(maxPublishers:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v83 + 8))(v48, v62);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.FlatMap<Future<PubSubTopic, Error>, Publishers.SetFailureType<Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, PubSubClient>>, Error>> and conformance Publishers.FlatMap<A, B>, &demangling cache variable for type metadata for Publishers.FlatMap<Future<PubSubTopic, Error>, Publishers.SetFailureType<Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, PubSubClient>>, Error>>);
    uint64_t v63 = v86;
    uint64_t v64 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v85 + 8))(v61, v63);
    goto LABEL_10;
  }
  unint64_t v36 = v93;
  if (one-time initialization token for topicManager != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  __swift_project_value_buffer(v37, (uint64_t)static Log.topicManager);
  swift_bridgeObjectRetain_n();
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  BOOL v40 = os_log_type_enabled(v38, v39);
  uint64_t v41 = v91;
  if (v40)
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(void *)&v98[0] = v43;
    *(_DWORD *)uint64_t v42 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v36, (uint64_t *)v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A375F000, v38, v39, "Creating PubSubTopic, topic=%s", v42, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v43, -1, -1);
    MEMORY[0x1A624F870](v42, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  Lock.unlock()();
  uint64_t v66 = type metadata accessor for PubSubTopic.Configuration();
  uint64_t v67 = (uint64_t)v73;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v73, 1, 1, v66);
  uint64_t v69 = v89;
  uint64_t v68 = v90;
  uint64_t v70 = (uint64_t)v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v74, v87, v90);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v69 + 56))(v70, 0, 1, v68);
  outlined init with copy of AudioSessionAssertionManager(v88, (uint64_t)v98);
  uint64_t v71 = dispatch thunk of PubSubClient.createTopic(name:topicConfig:category:dataCryptorProvider:delegate:seqNumWatermark:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v98, &demangling cache variable for type metadata for TopicCryptorProvider?);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v70, &demangling cache variable for type metadata for PubSubClient.TopicCategory?);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v67, &demangling cache variable for type metadata for PubSubTopic.Configuration?);
  *(void *)&v98[0] = v71;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<PubSubTopic, Error>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Future<PubSubTopic, Error> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<PubSubTopic, Error>);
  uint64_t v64 = Publisher.eraseToAnyPublisher()();
  swift_release();
  swift_release();
LABEL_10:
  Lock.assertNotOwned()();
  return v64;
}

void closure #1 in closure #1 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v35 = a4;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v12 = v37;
  if (*(void *)(v37 + 16) && (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11), (v14 & 1) != 0))
  {
    uint64_t v15 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v16 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    MEMORY[0x1F4188790](v16);
    *(&v35 - 2) = a1;
    *(&v35 - 1) = a3;
    uint64_t v17 = (*(uint64_t (**)(uint64_t (*)@<X0>(uint64_t@<X8>)))(*(void *)v15 + 192))(partial apply for closure #1 in closure #1 in closure #1 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:));
    if (!v4)
    {
      uint64_t v34 = v17;
      swift_release();
      goto LABEL_17;
    }
    swift_release();
    uint64_t v18 = v4;
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if (one-time initialization token for topicManager != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Log.topicManager);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_1A375F000, v20, v21, "Can't create PubSubClient yet because there's no ConversationClient object", v22, 2u);
      MEMORY[0x1A624F870](v22, -1, -1);
    }

    lazy protocol witness table accessor for type TopicManager.Errors and conformance TopicManager.Errors();
    uint64_t v18 = (void *)swift_allocError();
    *uint64_t v23 = 1;
    swift_willThrow();
  }
  if (one-time initialization token for topicManager != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Log.topicManager);
  id v25 = v18;
  id v26 = v18;
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v37 = v30;
    *(_DWORD *)os_log_type_t v29 = 136315138;
    uint64_t v36 = (uint64_t)v18;
    id v31 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v32 = String.init<A>(reflecting:)();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v27, v28, "Failed to create PubSubClient due to error: %s", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v30, -1, -1);
    MEMORY[0x1A624F870](v29, -1, -1);
  }
  else
  {
  }
  uint64_t v34 = 0;
LABEL_17:
  *uint64_t v35 = v34;
}

uint64_t closure #2 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v35 = a5;
  uint64_t v33 = a4;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PubSubClient.TopicCategory?);
  MEMORY[0x1F4188790](v12 - 8);
  char v14 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PubSubTopic.Configuration?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v34 = (char *)v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = *a1;
  if (one-time initialization token for topicManager != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Log.topicManager);
  swift_bridgeObjectRetain_n();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v30 = a7;
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v31 = a2;
    uint64_t v22 = v21;
    v37[0] = v21;
    v29[1] = a6;
    *(_DWORD *)uint64_t v20 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, a3, v37);
    a7 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A375F000, v18, v19, "Creating PubSubTopic, topic=%s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v22, -1, -1);
    MEMORY[0x1A624F870](v20, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v23 = type metadata accessor for PubSubTopic.Configuration();
  uint64_t v24 = (uint64_t)v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v34, 1, 1, v23);
  uint64_t v25 = type metadata accessor for PubSubClient.TopicCategory();
  uint64_t v26 = *(void *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v14, v33, v25);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v14, 0, 1, v25);
  outlined init with copy of AudioSessionAssertionManager(v35, (uint64_t)v37);
  uint64_t v27 = dispatch thunk of PubSubClient.createTopic(name:topicConfig:category:dataCryptorProvider:delegate:seqNumWatermark:)();
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v37, &demangling cache variable for type metadata for TopicCryptorProvider?);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v14, &demangling cache variable for type metadata for PubSubClient.TopicCategory?);
  uint64_t result = outlined destroy of OS_dispatch_queue.SchedulerOptions?(v24, &demangling cache variable for type metadata for PubSubTopic.Configuration?);
  *a7 = v27;
  return result;
}

uint64_t TopicManager.createPubSubClient(from:)(void *a1)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v31 - v9;
  id v11 = objc_msgSend(a1, sel_virtualParticipants);
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
  lazy protocol witness table accessor for type TUConversationVirtualParticipant and conformance NSObject();
  uint64_t v12 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Sequence.first(where:)(v12);
  char v14 = v13;
  swift_bridgeObjectRelease();
  if (v14)
  {
    id v15 = objc_msgSend(a1, sel_UUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    id v16 = objc_msgSend(a1, sel_groupUUID);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    id v17 = objc_msgSend(a1, sel_localParticipantIdentifier);
    id v18 = objc_msgSend(v14, sel_identifier);
    v31[1] = v2;
    uint64_t v19 = v4;
    id v20 = v18;
    id v21 = objc_msgSend(a1, sel_virtualParticipantConfig);
    (*(void (**)(char *, char *, id, id, id))(*(void *)v1 + 288))(v10, v8, v17, v20, v21);
    uint64_t v23 = v22;

    uint64_t v24 = *(void (**)(char *, uint64_t))(v5 + 8);
    v24(v8, v19);
    v24(v10, v19);
    swift_release();
  }
  else
  {
    if (one-time initialization token for topicManager != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Log.topicManager);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    uint64_t v23 = v27;
    if (os_log_type_enabled(v26, v27))
    {
      os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v28 = 0;
      _os_log_impl(&dword_1A375F000, v26, (os_log_type_t)v23, "Tried to create PubSubClient on container without virtualParticipant", v28, 2u);
      MEMORY[0x1A624F870](v28, -1, -1);
    }

    lazy protocol witness table accessor for type TopicManager.Errors and conformance TopicManager.Errors();
    swift_allocError();
    *os_log_type_t v29 = 0;
    swift_willThrow();
  }
  return v23;
}

uint64_t TopicManager.createPubSubClient(conversationUUID:groupUUID:localParticipantID:virtualParticipantID:virtualParticipantConfig:)(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  void (*v34)(uint64_t *__return_ptr, uint64_t);
  uint64_t v35;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[3];
  uint64_t v52;

  unint64_t v45 = a1;
  uint64_t v41 = a4;
  uint64_t v42 = a3;
  uint64_t v7 = type metadata accessor for PluginClient.Configuration();
  uint64_t v46 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v43 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v49 = (uint64_t)&v37 - v10;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  char v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for topicManager != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.topicManager);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  uint64_t v48 = a5;
  id v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v47 = v7;
  if (v18)
  {
    uint64_t v19 = swift_slowAlloc();
    BOOL v40 = a2;
    uint64_t v20 = v19;
    uint64_t v38 = (void *)swift_slowAlloc();
    os_log_type_t v39 = swift_slowAlloc();
    v51[0] = v39;
    *(_DWORD *)uint64_t v20 = 136315906;
    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic and conformance PluginAttachmentLedgerTopic((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    *(_WORD *)(v20 + 12) = 2048;
    uint64_t v23 = v42;
    uint64_t v50 = (uint64_t)v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 22) = 2048;
    uint64_t v24 = v41;
    uint64_t v50 = (uint64_t)v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 32) = 2112;
    id v25 = v48;
    uint64_t v50 = (uint64_t)v48;
    id v26 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_type_t v27 = v38;
    *uint64_t v38 = v25;

    _os_log_impl(&dword_1A375F000, v16, v17, "Creating PubSubClient for groupUUID=%s, localParticipantID=%llu, virtualParticipantID=%llu, virtualParticipantConfig=%@", (uint8_t *)v20, 0x2Au);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v27, -1, -1);
    uint64_t v28 = v39;
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v28, -1, -1);
    uint64_t v7 = v47;
    MEMORY[0x1A624F870](v20, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);

    os_log_type_t v29 = v48;
    uint64_t v24 = v41;
    uint64_t v23 = v42;
  }
  uint64_t v31 = v48;
  uint64_t v30 = v49;
  closure #1 in TopicManager.createPubSubClient(conversationUUID:groupUUID:localParticipantID:virtualParticipantID:virtualParticipantConfig:)(v24, v48, v23, v49);
  uint64_t v32 = v46;
  uint64_t v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 16))(v43, v30, v7);
  uint64_t v34 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v44 + 192);
  v34(v51, v33);
  __swift_project_boxed_opaque_existential_1(v51, v52);
  dispatch thunk of ActivitySessionContainerProvider.pluginClientReporter.getter();
  UUID.uuidString.getter();
  type metadata accessor for PluginClient();
  swift_allocObject();
  uint64_t v35 = PluginClient.init(config:queue:reporter:reporterTag:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v51);
  type metadata accessor for PubSubClient();
  swift_retain();
  objc_msgSend(v31, sel_rpcStreamMaxAttempts);
  objc_msgSend(v31, sel_rpcStreamRetryIntervalMillis);
  ((void (*)(uint64_t *__return_ptr))v34)(v51);
  __swift_project_boxed_opaque_existential_1(v51, v52);
  dispatch thunk of ActivitySessionContainerProvider.pubSubTopicReporter.getter();
  UUID.uuidString.getter();
  PubSubClient.__allocating_init(pluginClient:createTopicMaxAttempts:createTopicRpcRetryIntervalSeconds:topicReporter:topicReporterTag:)();
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v49, v47);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v51);
  return v35;
}

uint64_t closure #1 in TopicManager.createPubSubClient(conversationUUID:groupUUID:localParticipantID:virtualParticipantID:virtualParticipantConfig:)@<X0>(void *a1@<X1>, void *a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  id v27 = a1;
  id v28 = a3;
  uint64_t v29 = a4;
  uint64_t v5 = type metadata accessor for PluginEndpoint();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (uint64_t *)((char *)&v26 - v10);
  uint64_t v12 = UUID.uuidString.getter();
  uint64_t v14 = v13;
  id v15 = objc_msgSend(a2, sel_idsAliasingSalt);
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;
  }
  else
  {
    uint64_t v17 = 0;
    unint64_t v19 = 0xF000000000000000;
  }
  *uint64_t v11 = v12;
  v11[1] = v14;
  _OWORD v11[2] = (uint64_t)v27;
  long long v11[3] = v17;
  uint64_t v20 = (uint64_t)v28;
  v11[4] = v19;
  v11[5] = v20;
  (*(void (**)(uint64_t *, void, uint64_t))(v6 + 104))(v11, *MEMORY[0x1E4F5AF90], v5);
  id v28 = objc_msgSend(a2, sel_connectionRetryIntervalMillis);
  (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 16))(v9, v11, v5);
  id v27 = objc_msgSend(a2, sel_connectionMaxAttempts);
  objc_msgSend(a2, sel_serverCertValidationEnabled);
  id v21 = objc_msgSend(a2, sel_serverCertHostnameOverride);
  if (v21)
  {
    unint64_t v22 = v21;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v23 = objc_msgSend(a2, sel_serverCertLeafMarkerOIDOverride);
  if (v23)
  {
    uint64_t v24 = v23;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  PluginClient.Configuration.init(endpoint:connectionMaxAttempts:connectionRetryInterval:serverCertValidationEnabled:serverCertHostname:serverCertLeafMarkerOID:)();
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v6 + 8))(v11, v5);
}

uint64_t TopicManager.createUnreliableMessengerService(conversationUUID:groupUUID:unreliableMessengerConfig:)@<X0>(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for DatagramClient.Configuration();
  uint64_t v38 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v37 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v32 - v9;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for topicManager != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.topicManager);
  id v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v36 = a1;
  v16(v14, a1, v11);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v35 = a3;
    uint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v33 = a2;
    uint64_t v22 = v21;
    uint64_t v40 = v21;
    uint64_t v34 = v6;
    *(_DWORD *)uint64_t v20 = 136315138;
    v32[1] = v20 + 4;
    lazy protocol witness table accessor for type PluginAttachmentLedgerTopic and conformance PluginAttachmentLedgerTopic((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v40);
    uint64_t v6 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    _os_log_impl(&dword_1A375F000, v17, v18, "Creating DatagramClient for groupUUID=%s", v20, 0xCu);
    swift_arrayDestroy();
    uint64_t v25 = v22;
    a2 = v33;
    MEMORY[0x1A624F870](v25, -1, -1);
    uint64_t v26 = v20;
    a3 = v35;
    MEMORY[0x1A624F870](v26, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  closure #1 in TopicManager.createUnreliableMessengerService(conversationUUID:groupUUID:unreliableMessengerConfig:)(a2, (uint64_t)v10);
  uint64_t v27 = v38;
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v37, v10, v6);
  uint64_t v28 = type metadata accessor for DatagramClient();
  swift_allocObject();
  uint64_t v29 = DatagramClient.init(config:queue:)();
  uint64_t v30 = MEMORY[0x1E4F5AF88];
  a3[3] = v28;
  a3[4] = v30;
  *a3 = v29;
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v10, v6);
}

uint64_t closure #1 in TopicManager.createUnreliableMessengerService(conversationUUID:groupUUID:unreliableMessengerConfig:)@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  v19[1] = a2;
  uint64_t v3 = type metadata accessor for DatagramEndpoint();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (void *)((char *)v19 - v8);
  uint64_t v10 = UUID.uuidString.getter();
  uint64_t v12 = v11;
  id v13 = objc_msgSend(a1, sel_idsAliasingSalt);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;
  }
  else
  {
    uint64_t v15 = 0;
    unint64_t v17 = 0xF000000000000000;
  }
  *uint64_t v9 = v10;
  v9[1] = v12;
  uint64_t v9[2] = v15;
  _OWORD v9[3] = v17;
  (*(void (**)(uint64_t *, void, uint64_t))(v4 + 104))(v9, *MEMORY[0x1E4F5AFA0], v3);
  (*(void (**)(char *, uint64_t *, uint64_t))(v4 + 16))(v7, v9, v3);
  objc_msgSend(a1, sel_establishChannelMaxAttempts);
  objc_msgSend(a1, sel_establishChannelRetryIntervalMillis);
  objc_msgSend(a1, sel_egressMessagePayloadMaxSizeBytes);
  DatagramClient.Configuration.init(endpoint:establishChannelMaxAttempts:establishChannelRetryInterval:egressMessagePayloadMaxSizeBytes:)();
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 8))(v9, v3);
}

uint64_t TopicManager.pluginAttachmentTopicGenerator(groupUUID:name:dataCryptorProvider:initialAttachments:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  unint64_t v61 = a3;
  uint64_t v62 = a5;
  uint64_t v59 = a4;
  uint64_t v60 = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, AttachmentLedgerClient>);
  uint64_t v51 = *(void *)(v8 - 8);
  uint64_t v52 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v50 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, AttachmentLedgerClient>>);
  uint64_t v55 = *(void *)(v10 - 8);
  uint64_t v56 = v10;
  MEMORY[0x1F4188790](v10);
  unint64_t v53 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.FlatMap<Future<PluginAttachmentLedgerTopic, Error>, Publishers.SetFailureType<Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, AttachmentLedgerClient>>, Error>>);
  uint64_t v57 = *(void *)(v12 - 8);
  uint64_t v58 = v12;
  MEMORY[0x1F4188790](v12);
  unint64_t v54 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  os_log_type_t v18 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v49 - v19;
  uint64_t v63 = *(void *)(v5 + OBJC_IVAR____TtC15GroupActivities12TopicManager_lock);
  Lock.lock()();
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v49 = a1;
  v21(v20, a1, v14);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v22 = *(void *)&v65[0];
  if (!*(void *)(*(void *)&v65[0] + 16)
    || (unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v20), (v24 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
    goto LABEL_9;
  }
  uint64_t v25 = *(void *)(*(void *)(v22 + 56) + 8 * v23);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v26 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v20, v14);
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 168))(v26);
  swift_release();
  if (!v27)
  {
LABEL_9:
    Lock.unlock()();
    uint64_t v36 = v49;
    *(void *)&v65[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 232))(v49, 2);
    v21(v18, v36, v14);
    unint64_t v37 = (*(unsigned __int8 *)(v15 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = v6;
    (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v38 + v37, v18, v14);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<TUConversationActivitySessionContainer, Never>);
    type metadata accessor for AttachmentLedgerClient();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<TUConversationActivitySessionContainer, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<TUConversationActivitySessionContainer, Never>);
    uint64_t v39 = v50;
    Publisher.compactMap<A>(_:)();
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, AttachmentLedgerClient> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, AttachmentLedgerClient>);
    uint64_t v40 = v52;
    uint64_t v41 = v53;
    Publisher.first()();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v39, v40);
    outlined init with copy of AudioSessionAssertionManager(v59, (uint64_t)v65);
    uint64_t v42 = (void *)swift_allocObject();
    unint64_t v43 = v61;
    v42[2] = v60;
    v42[3] = v43;
    outlined init with take of TypedPayloadDecoding(v65, (uint64_t)(v42 + 4));
    v42[9] = v62;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static Subscribers.Demand.unlimited.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<PluginAttachmentLedgerTopic, Error>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, AttachmentLedgerClient>> and conformance Publishers.First<A>, &demangling cache variable for type metadata for Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, AttachmentLedgerClient>>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Future<PluginAttachmentLedgerTopic, Error> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<PluginAttachmentLedgerTopic, Error>);
    uint64_t v44 = v54;
    uint64_t v45 = v56;
    Publisher<>.flatMap<A>(maxPublishers:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v41, v45);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.FlatMap<Future<PluginAttachmentLedgerTopic, Error>, Publishers.SetFailureType<Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, AttachmentLedgerClient>>, Error>> and conformance Publishers.FlatMap<A, B>, &demangling cache variable for type metadata for Publishers.FlatMap<Future<PluginAttachmentLedgerTopic, Error>, Publishers.SetFailureType<Publishers.First<Publishers.CompactMap<AnyPublisher<TUConversationActivitySessionContainer, Never>, AttachmentLedgerClient>>, Error>>);
    uint64_t v46 = v58;
    uint64_t v47 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v44, v46);
    goto LABEL_10;
  }
  if (one-time initialization token for topicManager != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Log.topicManager);
  unint64_t v29 = v61;
  swift_bridgeObjectRetain_n();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  BOOL v32 = os_log_type_enabled(v30, v31);
  uint64_t v33 = v60;
  if (v32)
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(void *)&v65[0] = v35;
    *(_DWORD *)uint64_t v34 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v29, (uint64_t *)v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A375F000, v30, v31, "Creating PluginAttachmentLedgerTopic, topic=%s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v35, -1, -1);
    MEMORY[0x1A624F870](v34, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  Lock.unlock()();
  *(void *)&v65[0] = dispatch thunk of AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<PluginAttachmentLedgerTopic, Error>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Future<PluginAttachmentLedgerTopic, Error> and conformance Future<A, B>, &demangling cache variable for type metadata for Future<PluginAttachmentLedgerTopic, Error>);
  uint64_t v47 = Publisher.eraseToAnyPublisher()();
  swift_release();
  swift_release();
LABEL_10:
  Lock.assertNotOwned()();
  return v47;
}

uint64_t closure #1 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return Lock.withLock<A>(_:)();
}

void closure #1 in closure #1 in TopicManager.pluginAttachmentTopicGenerator(groupUUID:name:dataCryptorProvider:initialAttachments:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v35 = a4;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v12 = v37;
  if (*(void *)(v37 + 16) && (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11), (v14 & 1) != 0))
  {
    uint64_t v15 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v16 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    MEMORY[0x1F4188790](v16);
    *(&v35 - 2) = a1;
    *(&v35 - 1) = a3;
    uint64_t v17 = (*(uint64_t (**)(uint64_t (*)@<X0>(uint64_t@<X8>)))(*(void *)v15 + 208))(partial apply for closure #1 in closure #1 in closure #1 in TopicManager.pluginAttachmentTopicGenerator(groupUUID:name:dataCryptorProvider:initialAttachments:));
    if (!v4)
    {
      uint64_t v34 = v17;
      swift_release();
      goto LABEL_17;
    }
    swift_release();
    os_log_type_t v18 = v4;
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if (one-time initialization token for topicManager != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Log.topicManager);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_1A375F000, v20, v21, "Can't create AttachmentLedgerClient yet because there's no ConversationClient object", v22, 2u);
      MEMORY[0x1A624F870](v22, -1, -1);
    }

    lazy protocol witness table accessor for type TopicManager.Errors and conformance TopicManager.Errors();
    os_log_type_t v18 = (void *)swift_allocError();
    *unint64_t v23 = 1;
    swift_willThrow();
  }
  if (one-time initialization token for topicManager != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Log.topicManager);
  id v25 = v18;
  id v26 = v18;
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    unint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v37 = v30;
    *(_DWORD *)unint64_t v29 = 136315138;
    uint64_t v36 = (uint64_t)v18;
    id v31 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v32 = String.init<A>(reflecting:)();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v27, v28, "Failed to create AttachmentLedgerClient due to error: %s", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v30, -1, -1);
    MEMORY[0x1A624F870](v29, -1, -1);
  }
  else
  {
  }
  uint64_t v34 = 0;
LABEL_17:
  *uint64_t v35 = v34;
}

uint64_t closure #2 in TopicManager.pluginAttachmentTopicGenerator(groupUUID:name:dataCryptorProvider:initialAttachments:)@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  if (one-time initialization token for topicManager != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.topicManager);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v13 = a3;
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v14 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A375F000, v7, v8, "Creating PluginAttachmentLedgerTopic, topic=%s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v10, -1, -1);
    uint64_t v11 = v9;
    a3 = v13;
    MEMORY[0x1A624F870](v11, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t result = dispatch thunk of AttachmentLedgerClient.createTopic(name:dataCryptorProvider:initialAttachments:)();
  *a3 = result;
  return result;
}

uint64_t TopicManager.createAttachmentLedgerClient(from:)(void *a1)
{
  void (*v40)(void *__return_ptr, uint64_t);
  void *v41;
  id v42;
  char *v43;
  id v44;
  id v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  unsigned char *v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  unsigned char *v54;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void v67[4];
  unint64_t v68;

  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for AttachmentLedgerClient.Config();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v63 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  unint64_t v61 = *(void *)(v7 - 8);
  uint64_t v62 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v59 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PluginClient.Configuration();
  unint64_t v65 = *(void *)(v9 - 8);
  uint64_t v66 = v9;
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v60 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v64 = (uint64_t)&v56 - v12;
  uint64_t v13 = type metadata accessor for String.Encoding();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for topicManager != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)static Log.topicManager);
  id v18 = a1;
  uint64_t v68 = v17;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v56 = v15;
    uint64_t v22 = (uint8_t *)v21;
    unint64_t v23 = (void *)swift_slowAlloc();
    uint64_t v57 = v2;
    *(_DWORD *)uint64_t v22 = 138412290;
    v67[0] = v18;
    id v24 = v18;
    uint64_t v58 = v3;
    id v25 = v18;
    id v26 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v23 = v25;

    id v18 = v25;
    uint64_t v3 = v58;
    _os_log_impl(&dword_1A375F000, v19, v20, "Creating AttachmentLedgerClient for container: %@", v22, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v23, -1, -1);
    MEMORY[0x1A624F870](v22, -1, -1);
  }
  else
  {
  }
  id v27 = objc_msgSend(v18, sel_virtualParticipants);
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
  lazy protocol witness table accessor for type TUConversationVirtualParticipant and conformance NSObject();
  uint64_t v28 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Sequence.first(where:)(v28);
  uint64_t v30 = v29;
  swift_bridgeObjectRelease();
  if (v30)
  {
    id v31 = objc_msgSend(v18, sel_virtualParticipantConfig);
    id v32 = objc_msgSend(v31, sel_idsAliasingSalt);

    if (v32)
    {
      uint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v35 = v34;

      static String.Encoding.utf8.getter();
      uint64_t v36 = String.init(data:encoding:)();
      if (v37)
      {
        uint64_t v38 = v64;
        uint64_t v57 = v37;
        uint64_t v58 = v36;
        closure #2 in TopicManager.createAttachmentLedgerClient(from:)(v18, v30, v33, v35, v64);
        uint64_t v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 16))(v60, v38, v66);
        uint64_t v40 = *(void (**)(void *__return_ptr, uint64_t))(*(void *)v3 + 192);
        uint64_t v68 = v35;
        v40(v67, v39);
        uint64_t v41 = v18;
        __swift_project_boxed_opaque_existential_1(v67, v67[3]);
        dispatch thunk of ActivitySessionContainerProvider.pluginClientReporter.getter();
        uint64_t v42 = objc_msgSend(v18, sel_UUID);
        unint64_t v43 = v59;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        UUID.uuidString.getter();
        (*(void (**)(char *, uint64_t))(v61 + 8))(v43, v62);
        type metadata accessor for PluginClient();
        swift_allocObject();
        uint64_t v62 = PluginClient.init(config:queue:reporter:reporterTag:)();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v67);
        type metadata accessor for AttachmentLedgerClient();
        uint64_t v44 = objc_msgSend(v18, sel_virtualParticipantConfig);
        objc_msgSend(v44, sel_rpcStreamMaxAttempts);

        uint64_t v45 = objc_msgSend(v41, sel_virtualParticipantConfig);
        objc_msgSend(v45, sel_rpcStreamRetryIntervalMillis);

        AttachmentLedgerClient.Config.init(participantIDSalt:createTopicMaxAttempts:createTopicRpcRetryIntervalSeconds:)();
        objc_msgSend(v41, sel_localParticipantIdentifier);
        uint64_t v46 = AttachmentLedgerClient.__allocating_init(client:config:localParticipantID:)();
        outlined consume of Data._Representation(v33, v68);

        (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
        return v46;
      }
      outlined consume of Data._Representation(v33, v35);
    }
    uint64_t v51 = Logger.logObject.getter();
    uint64_t v52 = static os_log_type_t.fault.getter();
    uint64_t v46 = v52;
    if (os_log_type_enabled(v51, v52))
    {
      unint64_t v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v53 = 0;
      _os_log_impl(&dword_1A375F000, v51, (os_log_type_t)v46, "Failed to find aliasingSalt from virtualParticipantConfig. Can't create AttachmentLedgerClient without the salt.", v53, 2u);
      MEMORY[0x1A624F870](v53, -1, -1);
    }

    lazy protocol witness table accessor for type TopicManager.Errors and conformance TopicManager.Errors();
    swift_allocError();
    *unint64_t v54 = 2;
    swift_willThrow();
  }
  else
  {
    uint64_t v47 = Logger.logObject.getter();
    uint64_t v48 = static os_log_type_t.fault.getter();
    uint64_t v46 = v48;
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl(&dword_1A375F000, v47, (os_log_type_t)v46, "Tried to create AttachmentLedgerClient on container without a corresponding virtualParticipant", v49, 2u);
      MEMORY[0x1A624F870](v49, -1, -1);
    }

    lazy protocol witness table accessor for type TopicManager.Errors and conformance TopicManager.Errors();
    swift_allocError();
    *uint64_t v50 = 0;
    swift_willThrow();
  }
  return v46;
}

uint64_t closure #2 in TopicManager.createAttachmentLedgerClient(from:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v36 = a3;
  unint64_t v37 = a4;
  id v35 = a2;
  uint64_t v38 = a5;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for PluginEndpoint();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (void *)((char *)v34 - v15);
  id v17 = objc_msgSend(a1, sel_groupUUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v18 = UUID.uuidString.getter();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  id v21 = objc_msgSend(v35, sel_identifier);
  id v22 = objc_msgSend(a1, sel_localParticipantIdentifier);
  *uint64_t v16 = v18;
  v16[1] = v20;
  v16[2] = (uint64_t)v21;
  uint64_t v24 = v36;
  unint64_t v23 = v37;
  v16[3] = v36;
  v16[4] = v23;
  v16[5] = (uint64_t)v22;
  (*(void (**)(uint64_t *, void, uint64_t))(v11 + 104))(v16, *MEMORY[0x1E4F5AF90], v10);
  outlined copy of Data._Representation(v24, v23);
  id v25 = objc_msgSend(a1, sel_virtualParticipantConfig);
  v34[1] = objc_msgSend(v25, sel_connectionRetryIntervalMillis);

  id v35 = v14;
  uint64_t v36 = v11;
  id v26 = *(void (**)(char *, uint64_t *, uint64_t))(v11 + 16);
  unint64_t v37 = v10;
  v26(v14, v16, v10);
  id v27 = objc_msgSend(a1, sel_virtualParticipantConfig);
  objc_msgSend(v27, sel_connectionMaxAttempts);

  id v28 = objc_msgSend(a1, sel_virtualParticipantConfig);
  objc_msgSend(v28, sel_serverCertValidationEnabled);

  id v29 = objc_msgSend(a1, sel_virtualParticipantConfig);
  id v30 = objc_msgSend(v29, sel_serverCertHostnameOverride);

  if (v30)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v31 = objc_msgSend(a1, sel_virtualParticipantConfig);
  id v32 = objc_msgSend(v31, sel_serverCertLeafMarkerOIDOverride);

  if (v32)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  PluginClient.Configuration.init(endpoint:connectionMaxAttempts:connectionRetryInterval:serverCertValidationEnabled:serverCertHostname:serverCertLeafMarkerOID:)();
  return (*(uint64_t (**)(uint64_t *, unint64_t))(v36 + 8))(v16, v37);
}

uint64_t TopicManager.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15GroupActivities12TopicManager__conversationClientsByGroupUUID;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : TopicManager.ConversationClient]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC15GroupActivities12TopicManager_provider);
  swift_unknownObjectRelease();
  return v0;
}

uint64_t TopicManager.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15GroupActivities12TopicManager__conversationClientsByGroupUUID;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : TopicManager.ConversationClient]>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC15GroupActivities12TopicManager_provider);
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

id TopicManager.ConversationClient.activeSubscriptions.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 24);

  return v1;
}

void TopicManager.ConversationClient.activeSubscriptions.setter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 24);
  *(void *)(v1 + 24) = a1;
}

uint64_t (*TopicManager.ConversationClient.activeSubscriptions.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t TopicManager.ConversationClient.lock.getter()
{
  return swift_retain();
}

uint64_t TopicManager.ConversationClient.unreliableMessagingService.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  if (!*(void *)(v3 + 16))
  {
    uint64_t v9 = 0;
    long long v7 = 0u;
    long long v8 = 0u;
    unsigned __int8 v10 = -1;
LABEL_9:
    uint64_t result = outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v7, &demangling cache variable for type metadata for TopicManager.ConversationClient.Service?);
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(1u);
  if (v5)
  {
    outlined init with copy of TopicManager.ConversationClient.Service(*(void *)(v3 + 56) + 48 * v4, (uint64_t)&v7);
  }
  else
  {
    uint64_t v9 = 0;
    long long v7 = 0u;
    long long v8 = 0u;
    unsigned __int8 v10 = -1;
  }
  swift_bridgeObjectRelease();
  if (v10 == 255) {
    goto LABEL_9;
  }
  outlined init with take of TopicManager.ConversationClient.Service((uint64_t)&v7, (uint64_t)v11);
  outlined init with copy of TopicManager.ConversationClient.Service((uint64_t)v11, (uint64_t)&v7);
  if (v10 == 1)
  {
    outlined destroy of TopicManager.ConversationClient.Service((uint64_t)v11);
    return outlined init with take of TypedPayloadDecoding(&v7, a1);
  }
  else
  {
    outlined destroy of TopicManager.ConversationClient.Service((uint64_t)&v7);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t TopicManager.ConversationClient.pubSubClient.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  if (!*(void *)(v1 + 16))
  {
    uint64_t v7 = 0;
    long long v5 = 0u;
    long long v6 = 0u;
    unsigned __int8 v8 = -1;
LABEL_9:
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v5, &demangling cache variable for type metadata for TopicManager.ConversationClient.Service?);
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(0);
  if (v3)
  {
    outlined init with copy of TopicManager.ConversationClient.Service(*(void *)(v1 + 56) + 48 * v2, (uint64_t)&v5);
  }
  else
  {
    uint64_t v7 = 0;
    long long v5 = 0u;
    long long v6 = 0u;
    unsigned __int8 v8 = -1;
  }
  swift_bridgeObjectRelease();
  if (v8 == 255) {
    goto LABEL_9;
  }
  outlined init with take of TopicManager.ConversationClient.Service((uint64_t)&v5, (uint64_t)v9);
  outlined init with copy of TopicManager.ConversationClient.Service((uint64_t)v9, (uint64_t)&v5);
  if (v8)
  {
    outlined destroy of TopicManager.ConversationClient.Service((uint64_t)&v5);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    outlined destroy of TopicManager.ConversationClient.Service((uint64_t)v9);
    return v5;
  }
  return result;
}

uint64_t TopicManager.ConversationClient.attachmentLedgerClient.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  if (!*(void *)(v1 + 16))
  {
    uint64_t v7 = 0;
    long long v5 = 0u;
    long long v6 = 0u;
    unsigned __int8 v8 = -1;
LABEL_9:
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v5, &demangling cache variable for type metadata for TopicManager.ConversationClient.Service?);
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(2u);
  if (v3)
  {
    outlined init with copy of TopicManager.ConversationClient.Service(*(void *)(v1 + 56) + 48 * v2, (uint64_t)&v5);
  }
  else
  {
    uint64_t v7 = 0;
    long long v5 = 0u;
    long long v6 = 0u;
    unsigned __int8 v8 = -1;
  }
  swift_bridgeObjectRelease();
  if (v8 == 255) {
    goto LABEL_9;
  }
  outlined init with take of TopicManager.ConversationClient.Service((uint64_t)&v5, (uint64_t)v9);
  outlined init with copy of TopicManager.ConversationClient.Service((uint64_t)v9, (uint64_t)&v5);
  if (v8 == 2)
  {
    outlined destroy of TopicManager.ConversationClient.Service((uint64_t)v9);
    return v5;
  }
  else
  {
    outlined destroy of TopicManager.ConversationClient.Service((uint64_t)&v5);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void *TopicManager.ConversationClient.init(lock:)(uint64_t a1)
{
  v1[2] = MEMORY[0x1E4FBC868];
  v1[3] = objc_msgSend(self, sel_weakObjectsHashTable);
  v1[4] = a1;
  return v1;
}

id *TopicManager.ConversationClient.deinit()
{
  if ((*((uint64_t (**)(void))*v0 + 20))())
  {
    dispatch thunk of PubSubClient.close()();
    swift_release();
  }
  swift_bridgeObjectRelease();

  swift_release();
  return v0;
}

uint64_t TopicManager.ConversationClient.__deallocating_deinit()
{
  if ((*((uint64_t (**)(void))*v0 + 20))())
  {
    dispatch thunk of PubSubClient.close()();
    swift_release();
  }
  swift_bridgeObjectRelease();

  swift_release();

  return swift_deallocClassInstance();
}

void TopicManager.ConversationClient.update(with:)(void *a1)
{
  uint64_t v2 = v1;
  Lock.assertOwned()();
  id v4 = objc_msgSend(a1, sel_virtualParticipants);
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
  lazy protocol witness table accessor for type TUConversationVirtualParticipant and conformance NSObject();
  uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v5 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v44[1];
    uint64_t v6 = v44[2];
    uint64_t v7 = v44[3];
    uint64_t v8 = v44[4];
    unint64_t v9 = v44[5];
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v10 = -1 << *(unsigned char *)(v5 + 32);
    uint64_t v6 = v5 + 56;
    uint64_t v7 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v9 = v12 & *(void *)(v5 + 56);
  }
  int64_t v41 = (unint64_t)(v7 + 64) >> 6;
  while (v5 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_43;
    }
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v15 = (id)v44[0];
    swift_unknownObjectRelease();
    uint64_t v14 = v8;
    uint64_t v43 = v9;
    if (!v15) {
      goto LABEL_43;
    }
LABEL_34:
    uint64_t v42 = v14;
    id v19 = objc_msgSend(v15, sel_pluginName);
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v22 = v21;

    v23._countAndFlagsBits = v20;
    v23._object = v22;
    Swift::Int v24 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TopicManager.ConversationClient.update(with:), v23);
    uint64_t v25 = swift_bridgeObjectRelease();
    if (v24 == 2)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 168))(v25))
      {
        objc_msgSend(a1, sel_localParticipantIdentifier);
        dispatch thunk of AttachmentLedgerClient.updateVirtualParticipant(_:localParticipantID:)();
LABEL_10:
        swift_release();
      }
LABEL_11:

      goto LABEL_12;
    }
    if (!v24)
    {
      if ((*(uint64_t (**)(void))(*(void *)v2 + 160))())
      {
        objc_msgSend(a1, sel_localParticipantIdentifier);
        dispatch thunk of PubSubClient.updateVirtualParticipant(_:localParticipantID:)();
        goto LABEL_10;
      }
      goto LABEL_11;
    }
    if (one-time initialization token for topicManager != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Log.topicManager);
    id v27 = v15;
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v39 = swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      v44[0] = v40;
      *(_DWORD *)uint64_t v39 = 136315138;
      uint64_t v30 = v6;
      id v31 = objc_msgSend(v27, sel_pluginName);
      uint64_t v32 = v5;
      uint64_t v33 = a1;
      uint64_t v34 = v2;
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v37 = v36;

      uint64_t v6 = v30;
      uint64_t v38 = v35;
      uint64_t v2 = v34;
      a1 = v33;
      uint64_t v5 = v32;
      *(void *)(v39 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v37, v44);

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v28, v29, "Virtual participant pluginName: %s unknown", (uint8_t *)v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v40, -1, -1);
      MEMORY[0x1A624F870](v39, -1, -1);
    }
    else
    {
    }
LABEL_12:
    uint64_t v8 = v42;
    unint64_t v9 = v43;
  }
  if (v9)
  {
    uint64_t v43 = (v9 - 1) & v9;
    unint64_t v13 = __clz(__rbit64(v9)) | (v8 << 6);
    uint64_t v14 = v8;
LABEL_33:
    id v15 = *(id *)(*(void *)(v5 + 48) + 8 * v13);
    if (!v15) {
      goto LABEL_43;
    }
    goto LABEL_34;
  }
  int64_t v16 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v16 >= v41) {
      goto LABEL_43;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    uint64_t v14 = v8 + 1;
    if (!v17)
    {
      uint64_t v14 = v8 + 2;
      if (v8 + 2 >= v41) {
        goto LABEL_43;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v14);
      if (!v17)
      {
        uint64_t v14 = v8 + 3;
        if (v8 + 3 >= v41) {
          goto LABEL_43;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v14);
        if (!v17)
        {
          uint64_t v14 = v8 + 4;
          if (v8 + 4 >= v41) {
            goto LABEL_43;
          }
          unint64_t v17 = *(void *)(v6 + 8 * v14);
          if (!v17)
          {
            uint64_t v18 = v8 + 5;
            while (v41 != v18)
            {
              unint64_t v17 = *(void *)(v6 + 8 * v18++);
              if (v17)
              {
                uint64_t v14 = v18 - 1;
                goto LABEL_32;
              }
            }
LABEL_43:
            outlined consume of [AnyHashable : Any].Iterator._Variant();
            return;
          }
        }
      }
    }
LABEL_32:
    uint64_t v43 = (v17 - 1) & v17;
    unint64_t v13 = __clz(__rbit64(v17)) + (v14 << 6);
    goto LABEL_33;
  }
  __break(1u);
}

uint64_t TopicManager.ConversationClient.service(generator:)(void (*a1)(void *__return_ptr))
{
  Lock.assertOwned()();
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v1 + 160))();
  if (v5) {
    return v5;
  }
  a1(v10);
  if (!v2)
  {
    outlined init with copy of TopicManager.ConversationClient.Service((uint64_t)v10, (uint64_t)v8);
    if (v9)
    {
      outlined destroy of TopicManager.ConversationClient.Service((uint64_t)v8);
      lazy protocol witness table accessor for type TopicManager.Errors and conformance TopicManager.Errors();
      swift_allocError();
      unsigned char *v6 = 0;
      swift_willThrow();
    }
    else
    {
      uint64_t v3 = v8[0];
      outlined init with copy of TopicManager.ConversationClient.Service((uint64_t)v10, (uint64_t)v8);
      swift_beginAccess();
      specialized Dictionary.subscript.setter((uint64_t)v8, 0);
      swift_endAccess();
    }
    outlined destroy of TopicManager.ConversationClient.Service((uint64_t)v10);
  }
  return v3;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unsigned char *v6;
  void v8[5];
  char v9;
  void v10[6];

  Lock.assertOwned()();
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v1 + 168))();
  if (v5) {
    return v5;
  }
  a1(v10);
  if (!v2)
  {
    outlined init with copy of TopicManager.ConversationClient.Service((uint64_t)v10, (uint64_t)v8);
    if (v9 == 2)
    {
      uint64_t v3 = v8[0];
      outlined init with copy of TopicManager.ConversationClient.Service((uint64_t)v10, (uint64_t)v8);
      swift_beginAccess();
      specialized Dictionary.subscript.setter((uint64_t)v8, 2);
      swift_endAccess();
    }
    else
    {
      outlined destroy of TopicManager.ConversationClient.Service((uint64_t)v8);
      lazy protocol witness table accessor for type TopicManager.Errors and conformance TopicManager.Errors();
      swift_allocError();
      unsigned char *v6 = 0;
      swift_willThrow();
    }
    outlined destroy of TopicManager.ConversationClient.Service((uint64_t)v10);
  }
  return v3;
}

void *TopicManager.ConversationClient.service(generator:)@<X0>(void *(*a1)(long long *__return_ptr, uint64_t)@<X0>, uint64_t a2@<X8>)
{
  Lock.assertOwned()();
  (*(void (**)(long long *__return_ptr))(*(void *)v2 + 152))(&v11);
  if (v12) {
    return (void *)outlined init with take of TypedPayloadDecoding(&v11, a2);
  }
  uint64_t v7 = outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v11, &demangling cache variable for type metadata for UnreliableMessengerServiceProvider?);
  uint64_t result = a1(&v11, v7);
  if (!v3)
  {
    outlined init with copy of TopicManager.ConversationClient.Service((uint64_t)&v11, (uint64_t)v9);
    if (v10 == 1)
    {
      outlined init with take of TypedPayloadDecoding(v9, a2);
      outlined init with copy of TopicManager.ConversationClient.Service((uint64_t)&v11, (uint64_t)v9);
      swift_beginAccess();
      specialized Dictionary.subscript.setter((uint64_t)v9, 1);
      swift_endAccess();
    }
    else
    {
      outlined destroy of TopicManager.ConversationClient.Service((uint64_t)v9);
      lazy protocol witness table accessor for type TopicManager.Errors and conformance TopicManager.Errors();
      swift_allocError();
      *uint64_t v8 = 0;
      swift_willThrow();
    }
    return (void *)outlined destroy of TopicManager.ConversationClient.Service((uint64_t)&v11);
  }
  return result;
}

uint64_t TopicManager.ConversationClient.subscription(for:)()
{
  type metadata accessor for TopicManager.Subscription();
  Lock.withLock<A>(_:)();
  return v1;
}

void closure #1 in TopicManager.ConversationClient.subscription(for:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  type metadata accessor for TopicManager.Subscription();
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  swift_weakAssign();
  char v9 = *(uint64_t (**)(uint64_t))(*(void *)a3 + 128);
  uint64_t v10 = swift_bridgeObjectRetain();
  long long v11 = (void *)v9(v10);
  objc_msgSend(v11, sel_addObject_, v8);

  *a4 = v8;
}

Swift::Void __swiftcall TopicManager.ConversationClient.refreshActiveSubscriptions()()
{
}

uint64_t closure #1 in TopicManager.ConversationClient.refreshActiveSubscriptions()(void *a1)
{
  uint64_t v2 = (void *)(*(uint64_t (**)(void))(*a1 + 128))();
  id v3 = objc_msgSend(v2, sel_allObjects);

  type metadata accessor for TopicManager.Subscription();
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!v5)
  {
    if ((*(uint64_t (**)(uint64_t))(*a1 + 160))(result))
    {
      dispatch thunk of PubSubClient.close()();
      swift_release();
    }
    unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    swift_beginAccess();
    a1[2] = v7;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t protocol witness for TopicDelegate.subscription(for:) in conformance TopicManager.ConversationClient()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t TopicManager.Subscription.topicName.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TopicManager.Subscription.topicName.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*TopicManager.Subscription.topicName.modify())()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t TopicManager.Subscription.deinit()
{
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t))(*(void *)Strong + 224))(Strong);
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  return v0;
}

uint64_t TopicManager.Subscription.__deallocating_deinit()
{
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t))(*(void *)Strong + 224))(Strong);
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_weakDestroy();

  return swift_deallocClassInstance();
}

uint64_t key path getter for TopicManager.conversationClientsByGroupUUID : TopicManager@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for TopicManager.conversationClientsByGroupUUID : TopicManager()
{
  return static Published.subscript.setter();
}

uint64_t specialized TopicManager.init(provider:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UUID : TopicManager.ConversationClient]>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0) + 8;
  v22[3] = a4;
  v22[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1, a1, a4);
  uint64_t v16 = a3 + OBJC_IVAR____TtC15GroupActivities12TopicManager__conversationClientsByGroupUUID;
  uint64_t v17 = MEMORY[0x1E4FBC860];
  unint64_t v21 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UUID : TopicManager.ConversationClient]);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v16, v14, v11);
  if ((v17 & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v18 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
  }
  else {
    unint64_t v18 = MEMORY[0x1E4FBC870];
  }
  *(void *)(a3 + OBJC_IVAR____TtC15GroupActivities12TopicManager_cancellables) = v18;
  uint64_t v19 = OBJC_IVAR____TtC15GroupActivities12TopicManager_lock;
  type metadata accessor for Lock();
  swift_allocObject();
  *(void *)(a3 + v19) = Lock.init()();
  outlined init with copy of AudioSessionAssertionManager((uint64_t)v22, a3 + OBJC_IVAR____TtC15GroupActivities12TopicManager_provider);
  *(void *)(a3 + OBJC_IVAR____TtC15GroupActivities12TopicManager_featureFlags) = a2;
  swift_unknownObjectRetain();
  unint64_t v21 = dispatch thunk of ActivitySessionContainerProvider.onActivitySessionsChanged.getter();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<[UUID : TUConversationActivitySessionContainer], Never>);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v22);
  return a3;
}

uint64_t specialized TopicManager.__allocating_init(provider:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TopicManager();
  uint64_t v14 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a4);
  return specialized TopicManager.init(provider:featureFlags:)((uint64_t)v13, a2, v14, a4, a5, a6);
}

unint64_t specialized TopicManager.ServiceName.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TopicManager.ServiceName.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_1A38761E4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 1;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t partial apply for closure #1 in TopicManager.firstConversation(for:with:)()
{
  type metadata accessor for UUID();

  return closure #1 in TopicManager.firstConversation(for:with:)();
}

uint64_t partial apply for closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:)@<X0>(void *a1@<X8>)
{
  return closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:)(v1[3], v1[4], v1[5], a1);
}

uint64_t partial apply for closure #1 in TopicManager.createTopic(groupUUID:name:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in TopicManager.createTopic(groupUUID:name:)(v1[3], v1[4], v1[5], a1);
}

uint64_t partial apply for closure #1 in TopicManager.createUnreliableMessenger(groupUUID:name:localParticipantID:unreliableMessengerConfig:delegate:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in TopicManager.createUnreliableMessenger(groupUUID:name:localParticipantID:unreliableMessengerConfig:delegate:)(*(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), a1);
}

uint64_t sub_1A38763CC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #1 in TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:)()
{
  type metadata accessor for UUID();

  return closure #1 in TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:)();
}

uint64_t partial apply for closure #1 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)(uint64_t a1)
{
  return partial apply for closure #1 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)(a1, &demangling cache variable for type metadata for PubSubClient?);
}

uint64_t sub_1A3876588()
{
  uint64_t v1 = type metadata accessor for PubSubClient.TopicCategory();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + v6);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, ((((v6 + 47) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t partial apply for closure #2 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for PubSubClient.TopicCategory() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v2 + 16);
  unint64_t v9 = *(void *)(v2 + 24);
  uint64_t v10 = *(void *)(v2 + ((v7 + 47) & 0xFFFFFFFFFFFFFFF8));

  return closure #2 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)(a1, v8, v9, v2 + v6, v2 + v7, v10, a2);
}

unint64_t lazy protocol witness table accessor for type TUConversationVirtualParticipant and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type TUConversationVirtualParticipant and conformance NSObject;
  if (!lazy protocol witness table cache variable for type TUConversationVirtualParticipant and conformance NSObject)
  {
    type metadata accessor for OS_dispatch_queue(255, &lazy cache variable for type metadata for TUConversationVirtualParticipant);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TUConversationVirtualParticipant and conformance NSObject);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TopicManager.Errors and conformance TopicManager.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type TopicManager.Errors and conformance TopicManager.Errors;
  if (!lazy protocol witness table cache variable for type TopicManager.Errors and conformance TopicManager.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TopicManager.Errors and conformance TopicManager.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TopicManager.Errors and conformance TopicManager.Errors;
  if (!lazy protocol witness table cache variable for type TopicManager.Errors and conformance TopicManager.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TopicManager.Errors and conformance TopicManager.Errors);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type PluginAttachmentLedgerTopic and conformance PluginAttachmentLedgerTopic(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t objectdestroy_7Tm()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in TopicManager.pluginAttachmentTopicGenerator(groupUUID:name:dataCryptorProvider:initialAttachments:)(uint64_t a1)
{
  return partial apply for closure #1 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)(a1, (uint64_t *)&demangling cache variable for type metadata for AttachmentLedgerClient?);
}

uint64_t partial apply for closure #1 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  return closure #1 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)(a1, *(void *)(v2 + 16), v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a2);
}

uint64_t sub_1A38769E8()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t partial apply for closure #2 in TopicManager.pluginAttachmentTopicGenerator(groupUUID:name:dataCryptorProvider:initialAttachments:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in TopicManager.pluginAttachmentTopicGenerator(groupUUID:name:dataCryptorProvider:initialAttachments:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t outlined destroy of TopicManager.ConversationClient.Service(uint64_t a1)
{
  return a1;
}

void partial apply for closure #1 in TopicManager.ConversationClient.subscription(for:)(uint64_t *a1@<X8>)
{
  closure #1 in TopicManager.ConversationClient.subscription(for:)(v1[2], v1[3], v1[4], a1);
}

uint64_t type metadata accessor for TopicManager.Subscription()
{
  return self;
}

uint64_t partial apply for closure #1 in TopicManager.ConversationClient.refreshActiveSubscriptions()()
{
  return closure #1 in TopicManager.ConversationClient.refreshActiveSubscriptions()(v0);
}

unint64_t lazy protocol witness table accessor for type TopicManager.ServiceName and conformance TopicManager.ServiceName()
{
  unint64_t result = lazy protocol witness table cache variable for type TopicManager.ServiceName and conformance TopicManager.ServiceName;
  if (!lazy protocol witness table cache variable for type TopicManager.ServiceName and conformance TopicManager.ServiceName)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TopicManager.ServiceName and conformance TopicManager.ServiceName);
  }
  return result;
}

uint64_t sub_1A3876B80(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 192))();
}

uint64_t sub_1A3876BC4(uint64_t a1, uint64_t a2)
{
  outlined init with copy of AudioSessionAssertionManager(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 200))(v4);
}

uint64_t sub_1A3876C20@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result;
  return result;
}

uint64_t sub_1A3876C6C(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(void **)a2 + 136))(*a1);
}

uint64_t sub_1A3876CC0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1A3876D0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 104);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t dispatch thunk of TopicDelegate.subscription(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t ObjC metadata update function for TopicManager()
{
  return type metadata accessor for TopicManager();
}

uint64_t type metadata accessor for TopicManager()
{
  uint64_t result = type metadata singleton initialization cache for TopicManager;
  if (!type metadata singleton initialization cache for TopicManager) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for TopicManager()
{
  type metadata accessor for Published<[UUID : TopicManager.ConversationClient]>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for TopicManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TopicManager);
}

uint64_t dispatch thunk of TopicManager.provider.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of TopicManager.provider.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of TopicManager.provider.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of TopicManager.__allocating_init(provider:featureFlags:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of TopicManager.firstConversation(for:with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of TopicManager.createAttachmentLedgerTopic(groupUUID:name:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of TopicManager.createTopic(groupUUID:name:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of TopicManager.createUnreliableMessenger(groupUUID:name:localParticipantID:unreliableMessengerConfig:delegate:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of TopicManager.createPubSubClient(from:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of TopicManager.createPubSubClient(conversationUUID:groupUUID:localParticipantID:virtualParticipantID:virtualParticipantConfig:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of TopicManager.createUnreliableMessengerService(conversationUUID:groupUUID:unreliableMessengerConfig:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of TopicManager.pluginAttachmentTopicGenerator(groupUUID:name:dataCryptorProvider:initialAttachments:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of TopicManager.createAttachmentLedgerClient(from:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

ValueMetadata *type metadata accessor for TopicManager.Errors()
{
  return &type metadata for TopicManager.Errors;
}

unsigned char *storeEnumTagSinglePayload for TopicManager.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A3877268);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TopicManager.ServiceName()
{
  return &type metadata for TopicManager.ServiceName;
}

uint64_t type metadata accessor for TopicManager.ConversationClient()
{
  return self;
}

uint64_t method lookup function for TopicManager.ConversationClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TopicManager.ConversationClient);
}

uint64_t dispatch thunk of TopicManager.ConversationClient.activeSubscriptions.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of TopicManager.ConversationClient.activeSubscriptions.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of TopicManager.ConversationClient.activeSubscriptions.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of TopicManager.ConversationClient.unreliableMessagingService.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of TopicManager.ConversationClient.pubSubClient.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of TopicManager.ConversationClient.attachmentLedgerClient.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of TopicManager.ConversationClient.__allocating_init(lock:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of TopicManager.ConversationClient.update(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of TopicManager.ConversationClient.service(generator:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of TopicManager.ConversationClient.subscription(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of TopicManager.ConversationClient.refreshActiveSubscriptions()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t destroy for TopicManager.ConversationClient.Service(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 3) {
    unsigned int v1 = *(_DWORD *)a1 + 3;
  }
  if (v1 == 1) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  else {
    return swift_release();
  }
}

uint64_t initializeWithCopy for TopicManager.ConversationClient.Service(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 3) {
    unsigned int v3 = *(_DWORD *)a2 + 3;
  }
  if (v3 == 2)
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 40) = 2;
LABEL_8:
    swift_retain();
    return a1;
  }
  if (v3 != 1)
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 40) = 0;
    goto LABEL_8;
  }
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(uint64_t))(v4 - 8))(a1);
  *(unsigned char *)(a1 + 40) = 1;
  return a1;
}

uint64_t assignWithCopy for TopicManager.ConversationClient.Service(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (v4 == 1) {
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
    }
    else {
      swift_release();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 40) = 2;
    }
    else
    {
      if (v5 == 1)
      {
        uint64_t v6 = *(void *)(a2 + 24);
        *(void *)(a1 + 24) = v6;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
        *(unsigned char *)(a1 + 40) = 1;
        return a1;
      }
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 40) = 0;
    }
    swift_retain();
  }
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TopicManager.ConversationClient.Service(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (v4 == 1) {
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
    }
    else {
      swift_release();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      *(void *)a1 = *(void *)a2;
      char v7 = 2;
    }
    else if (v5 == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      char v7 = 1;
    }
    else
    {
      char v7 = 0;
      *(void *)a1 = *(void *)a2;
    }
    *(unsigned char *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TopicManager.ConversationClient.Service(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TopicManager.ConversationClient.Service(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for TopicManager.ConversationClient.Service(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 3) {
    return (*(_DWORD *)a1 + 3);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for TopicManager.ConversationClient.Service(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TopicManager.ConversationClient.Service()
{
  return &type metadata for TopicManager.ConversationClient.Service;
}

uint64_t method lookup function for TopicManager.Subscription(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TopicManager.Subscription);
}

uint64_t dispatch thunk of TopicManager.Subscription.topicName.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of TopicManager.Subscription.topicName.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of TopicManager.Subscription.topicName.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t partial apply for closure #1 in closure #1 in TopicManager.init(provider:featureFlags:)()
{
  return closure #1 in closure #1 in TopicManager.init(provider:featureFlags:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

BOOL partial apply for closure #1 in closure #1 in closure #1 in TopicManager.init(provider:featureFlags:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in closure #1 in closure #1 in TopicManager.init(provider:featureFlags:)(a1, a2, *(void *)(v2 + 16));
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, uint64_t))
{
  uint64_t v25 = a2;
  uint64_t v32 = a4;
  uint64_t v26 = a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = MEMORY[0x1F4188790](v5);
  unint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = 0;
  uint64_t v33 = (void *)a3;
  uint64_t v11 = *(void *)(a3 + 64);
  uint64_t v27 = 0;
  uint64_t v28 = a3 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  uint64_t v31 = v6 + 16;
  int64_t v29 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v30 = v6 + 8;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v20 >= v29) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v26, v25, v27, v33);
    }
    unint64_t v21 = *(void *)(v28 + 8 * v20);
    ++v10;
    if (!v21)
    {
      int64_t v10 = v20 + 1;
      if (v20 + 1 >= v29) {
        return specialized _NativeDictionary.extractDictionary(using:count:)(v26, v25, v27, v33);
      }
      unint64_t v21 = *(void *)(v28 + 8 * v10);
      if (!v21)
      {
        int64_t v10 = v20 + 2;
        if (v20 + 2 >= v29) {
          return specialized _NativeDictionary.extractDictionary(using:count:)(v26, v25, v27, v33);
        }
        unint64_t v21 = *(void *)(v28 + 8 * v10);
        if (!v21) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_5:
    uint64_t v17 = v33;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, v33[6] + *(void *)(v6 + 72) * v16, v5);
    uint64_t v18 = *(void *)(v17[7] + 8 * v16);
    swift_retain();
    char v19 = v32(v9, v18);
    swift_release();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    if (v19)
    {
      *(unint64_t *)((char *)v26 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      if (__OFADD__(v27++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v26, v25, v27, v33);
      }
    }
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v29) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v26, v25, v27, v33);
  }
  unint64_t v21 = *(void *)(v28 + 8 * v22);
  if (v21)
  {
    int64_t v10 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v10 >= v29) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v26, v25, v27, v33);
    }
    unint64_t v21 = *(void *)(v28 + 8 * v10);
    ++v22;
    if (v21) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, uint64_t), uint64_t a3)
{
  uint64_t v6 = isStackAllocationSafe;
  v13[1] = *MEMORY[0x1E4F143B8];
  char v7 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    uint64_t v10 = specialized closure #1 in _NativeDictionary.filter(_:)((void *)((char *)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, v6, a2);
    if (v3) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }
  else
  {
    uint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    a3 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v11, v8, v6, a2);
    MEMORY[0x1A624F870](v11, -1, -1);
  }
  return a3;
}

void partial apply for closure #1 in closure #1 in TopicManager.pluginAttachmentTopicGenerator(groupUUID:name:dataCryptorProvider:initialAttachments:)(uint64_t *a1@<X8>)
{
  closure #1 in closure #1 in TopicManager.pluginAttachmentTopicGenerator(groupUUID:name:dataCryptorProvider:initialAttachments:)(*(uint64_t **)(v1 + 16), *(void *)(v1 + 24), *(uint64_t **)(v1 + 32), a1);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in TopicManager.pluginAttachmentTopicGenerator(groupUUID:name:dataCryptorProvider:initialAttachments:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 16) + 312))(*(void *)(v1 + 24));
  if (!v2)
  {
    *(void *)a1 = result;
    *(unsigned char *)(a1 + 40) = 2;
  }
  return result;
}

void partial apply for closure #1 in closure #1 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)(uint64_t *a1@<X8>)
{
  closure #1 in closure #1 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)(*(uint64_t **)(v1 + 16), *(void *)(v1 + 24), *(uint64_t **)(v1 + 32), a1);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in TopicManager.pubSubTopicGenerator(groupUUID:name:category:dataCryptorProvider:delegate:seqNumWatermark:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 16) + 280))(*(void *)(v1 + 24));
  if (!v2)
  {
    *(void *)a1 = result;
    *(unsigned char *)(a1 + 40) = 0;
  }
  return result;
}

void partial apply for closure #1 in closure #1 in TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:)(uint64_t a1@<X8>)
{
  closure #1 in closure #1 in TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:)(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in closure #1 in TopicManager.unreliableServiceGenerator(groupUUID:name:unreliableMessengerConfig:)(*(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t partial apply for closure #2 in closure #1 in TopicManager.createUnreliableMessenger(groupUUID:name:localParticipantID:unreliableMessengerConfig:delegate:)()
{
  return (*(uint64_t (**)(void, void))(**(void **)(v0 + 16) + 216))(*(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1A3877ED4()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1A3877F0C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v6 + 8, v5);
}

uint64_t partial apply for closure #3 in closure #1 in TopicManager.createUnreliableMessenger(groupUUID:name:localParticipantID:unreliableMessengerConfig:delegate:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  unint64_t v5 = v0[4];
  uint64_t v6 = *(void *)((char *)v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #3 in closure #1 in TopicManager.createUnreliableMessenger(groupUUID:name:localParticipantID:unreliableMessengerConfig:delegate:)(v3, v4, v5, (uint64_t)v0 + v2, v6);
}

uint64_t partial apply for closure #1 in closure #1 in TopicManager.createTopic(groupUUID:name:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #1 in closure #1 in TopicManager.createTopic(groupUUID:name:)(a1, v4, v5, v6, v7);
}

uint64_t specialized Topic.init(name:delegate:pubSubTopicGenerator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  *(void *)(a6 + 16) = 0;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v29 = v14;
  uint64_t v30 = a1;
  uint64_t v27 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = v13;
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v16 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
  }
  else {
    unint64_t v16 = MEMORY[0x1E4FBC870];
  }
  *(void *)(a6 + 40) = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachine<Topic.State, Topic.Event>.Transition>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachine<Topic.State, Topic.Event>.Transition);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1A38FAC80;
  LOBYTE(v35) = 3;
  __int16 v36 = 0;
  lazy protocol witness table accessor for type Topic.State and conformance Topic.State();
  lazy protocol witness table accessor for type Topic.Event and conformance Topic.Event();
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v35) = 0;
  __int16 v36 = 258;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v35) = 0;
  __int16 v36 = 771;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v35) = 0;
  __int16 v36 = 769;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v35) = 1;
  __int16 v36 = 513;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v35) = 1;
  __int16 v36 = 771;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v35) = 2;
  __int16 v36 = 770;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v35) = 3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachine<Topic.State, Topic.Event>);
  swift_allocObject();
  *(void *)(a6 + 48) = StateMachine.init(initialState:transitions:)();
  *(void *)(a6 + 64) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(a6 + 72) = 0;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 128) = 0u;
  *(void *)(a6 + 144) = 0;
  uint64_t v17 = a6 + OBJC_IVAR____TtC15GroupActivities5Topic__subscribedParticipants;
  uint64_t v35 = MEMORY[0x1E4FBC868];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64 : PubSubTopic.Participant]);
  uint64_t v18 = v27;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v17, v18, v29);
  char v19 = (void *)(a6 + OBJC_IVAR____TtC15GroupActivities5Topic_invalidationHandler);
  *char v19 = 0;
  v19[1] = 0;
  int64_t v20 = (void *)(a6 + OBJC_IVAR____TtC15GroupActivities5Topic_requestEncryptionKeysHandler);
  *int64_t v20 = 0;
  v20[1] = 0;
  *(void *)(a6 + OBJC_IVAR____TtC15GroupActivities5Topic_seqNumWatermark) = 0;
  *(void *)(a6 + OBJC_IVAR____TtC15GroupActivities5Topic_pendingMessages) = MEMORY[0x1E4FBC860];
  uint64_t v21 = OBJC_IVAR____TtC15GroupActivities5Topic_pendingMessagesLock;
  type metadata accessor for Lock();
  swift_allocObject();
  *(void *)(a6 + v21) = Lock.init()();
  uint64_t v22 = v31;
  *(void *)(a6 + 80) = v30;
  *(void *)(a6 + 88) = v22;
  *(void *)(a6 + 64) = &protocol witness table for TopicManager.ConversationClient;
  swift_unknownObjectWeakAssign();
  uint64_t v23 = v34;
  *(void *)(a6 + 24) = v33;
  *(void *)(a6 + 32) = v23;
  return a6;
}

unint64_t lazy protocol witness table accessor for type Topic.State and conformance Topic.State()
{
  unint64_t result = lazy protocol witness table cache variable for type Topic.State and conformance Topic.State;
  if (!lazy protocol witness table cache variable for type Topic.State and conformance Topic.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Topic.State and conformance Topic.State);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Topic.State and conformance Topic.State;
  if (!lazy protocol witness table cache variable for type Topic.State and conformance Topic.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Topic.State and conformance Topic.State);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Topic.Event and conformance Topic.Event()
{
  unint64_t result = lazy protocol witness table cache variable for type Topic.Event and conformance Topic.Event;
  if (!lazy protocol witness table cache variable for type Topic.Event and conformance Topic.Event)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Topic.Event and conformance Topic.Event);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Topic.Event and conformance Topic.Event;
  if (!lazy protocol witness table cache variable for type Topic.Event and conformance Topic.Event)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Topic.Event and conformance Topic.Event);
  }
  return result;
}

uint64_t outlined init with copy of Topic.BootstrapPubSubTopicInfo(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1A38786B0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + v6);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, v6 + 64, v5);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in TopicManager.createTopic(groupUUID:name:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t result = (*(uint64_t (**)(unint64_t, void, void, uint64_t, unint64_t, void, void, void))(**(void **)(v2 + 16) + 272))(v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v7 + 8), a1, v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8), *(void *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 40), *(void *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 48), *(void *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 56));
  *a2 = result;
  return result;
}

uint64_t objectdestroy_62Tm()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:)()
{
  return closure #1 in closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:)(v0[2], v0[3], v0[4]);
}

uint64_t objectdestroy_72Tm()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #2 in closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #2 in closure #1 in TopicManager.createAttachmentLedgerTopic(groupUUID:name:)(a1, v4, v5, v6, v7);
}

void partial apply for closure #1 in closure #1 in TopicManager.firstConversation(for:with:)(void *a1@<X8>)
{
  closure #1 in closure #1 in TopicManager.firstConversation(for:with:)(*(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), a1);
}

uint64_t partial apply for closure #1 in TopicManager.init(provider:featureFlags:)()
{
  return Lock.withLock<A>(_:)();
}

id SystemCoordinatorState.__allocating_init(localParticipantState:groupImmersionStyle:activeSpatialParticipantCount:)(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v7 = objc_allocWithZone(v3);
  char v8 = *a2;
  *(void *)&v7[OBJC_IVAR___CPSystemCoordinatorState_localParticipantState] = a1;
  v7[OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle] = v8;
  *(void *)&v7[OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount] = a3;
  v10.receiver = v7;
  v10.super_class = v3;
  return objc_msgSendSuper2(&v10, sel_init);
}

id SystemCoordinatorState.localParticipantState.getter()
{
  return *(id *)(v0 + OBJC_IVAR___CPSystemCoordinatorState_localParticipantState);
}

void SystemCoordinatorState.groupImmersionStyle.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle);
}

uint64_t SystemCoordinatorState.activeSpatialParticipantCount.getter()
{
  return *(void *)(v0 + OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount);
}

id SystemCoordinatorState.ParticipantState.__allocating_init(isSpatial:isSpatialInitiator:)(char a1, char a2)
{
  uint64_t v5 = objc_allocWithZone(v2);
  v5[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial] = a1;
  v5[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator] = a2;
  unint64_t v6 = &v5[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier];
  void *v6 = 0;
  v6[1] = 0;
  *(void *)&v5[OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat] = 0;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, sel_init);
}

id SystemCoordinatorState.__allocating_init(localParticipantState:groupImmersionStyle:)(uint64_t a1, char *a2)
{
  uint64_t v5 = objc_allocWithZone(v2);
  char v6 = *a2;
  *(void *)&v5[OBJC_IVAR___CPSystemCoordinatorState_localParticipantState] = a1;
  v5[OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle] = v6;
  *(void *)&v5[OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount] = 0;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, sel_init);
}

id SystemCoordinatorState.init(localParticipantState:groupImmersionStyle:)(uint64_t a1, char *a2)
{
  char v3 = *a2;
  *(void *)&v2[OBJC_IVAR___CPSystemCoordinatorState_localParticipantState] = a1;
  v2[OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle] = v3;
  *(void *)&v2[OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount] = 0;
  v5.receiver = v2;
  v5.super_class = (Class)type metadata accessor for SystemCoordinatorState();
  return objc_msgSendSuper2(&v5, sel_init);
}

id SystemCoordinatorState.init(localParticipantState:groupImmersionStyle:activeSpatialParticipantCount:)(uint64_t a1, char *a2, uint64_t a3)
{
  char v4 = *a2;
  *(void *)&v3[OBJC_IVAR___CPSystemCoordinatorState_localParticipantState] = a1;
  v3[OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle] = v4;
  *(void *)&v3[OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount] = a3;
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for SystemCoordinatorState();
  return objc_msgSendSuper2(&v6, sel_init);
}

BOOL SystemCoordinatorState.isEqual(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  outlined init with copy of Any?(a1, (uint64_t)v11);
  if (v12)
  {
    type metadata accessor for SystemCoordinatorState();
    if (swift_dynamicCast())
    {
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      id v3 = *(id *)&v10[OBJC_IVAR___CPSystemCoordinatorState_localParticipantState];
      char v4 = static NSObject.== infix(_:_:)();

      if (v4)
      {
        int v5 = *(unsigned __int8 *)(v2 + OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle);
        int v6 = v10[OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle];
        if (v5 == 3)
        {
          if (v6 != 3) {
            goto LABEL_11;
          }
        }
        else if (v6 == 3 || v5 != v6)
        {
          goto LABEL_11;
        }
        uint64_t v7 = *(void *)(v2 + OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount);
        uint64_t v8 = *(void *)&v10[OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount];

        return v7 == v8;
      }
LABEL_11:
    }
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v11, &demangling cache variable for type metadata for Any?);
  }
  return 0;
}

Swift::Int SystemCoordinatorState.hash.getter()
{
  uint64_t v1 = v0;
  Hasher.init()();
  id v2 = *(id *)(v0 + OBJC_IVAR___CPSystemCoordinatorState_localParticipantState);
  NSObject.hash(into:)();

  uint64_t v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle);
  if (v3 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3 + 1);
  }
  Hasher._combine(_:)(*(void *)(v1 + OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount));
  return Hasher.finalize()();
}

uint64_t static SystemCoordinatorState.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall SystemCoordinatorState.encode(with:)(NSCoder with)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___CPSystemCoordinatorState_localParticipantState);
  char v4 = (void *)MEMORY[0x1A624DFA0](0xD000000000000015, 0x80000001A3900920);
  [(objc_class *)with.super.isa encodeObject:v3 forKey:v4];

  uint64_t v5 = *(unsigned __int8 *)(v1 + OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle);
  if (v5 != 3)
  {
    uint64_t v6 = v5 + 1;
    uint64_t v7 = (void *)MEMORY[0x1A624DFA0](0xD000000000000013, 0x80000001A39023B0);
    [(objc_class *)with.super.isa encodeInteger:v6 forKey:v7];
  }
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount);
  id v9 = (id)MEMORY[0x1A624DFA0](0xD00000000000001DLL, 0x80000001A3902390);
  [(objc_class *)with.super.isa encodeInteger:v8 forKey:v9];
}

uint64_t SystemCoordinatorState.GroupImmersionStyle.rawValue.getter()
{
  return *v0 + 1;
}

id SystemCoordinatorState.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return SystemCoordinatorState.init(coder:)(a1);
}

id SystemCoordinatorState.init(coder:)(void *a1)
{
  type metadata accessor for SystemCoordinatorState.ParticipantState();
  id v3 = v1;
  char v4 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v4)
  {
    *(void *)&v3[OBJC_IVAR___CPSystemCoordinatorState_localParticipantState] = v4;
    id v5 = v4;
    uint64_t v6 = (void *)MEMORY[0x1A624DFA0](0xD000000000000013, 0x80000001A39023B0);
    unint64_t v7 = (unint64_t)objc_msgSend(a1, sel_decodeIntegerForKey_, v6);

    unsigned int v8 = 0x2010003u >> (8 * v7);
    if (v7 >= 4) {
      LOBYTE(v8) = 3;
    }
    v3[OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle] = v8;
    id v9 = (void *)MEMORY[0x1A624DFA0](0xD00000000000001DLL, 0x80000001A3902390);
    id v10 = objc_msgSend(a1, sel_decodeIntegerForKey_, v9);

    *(void *)&v3[OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount] = v10;
    v13.receiver = v3;
    v13.super_class = (Class)type metadata accessor for SystemCoordinatorState();
    id v11 = objc_msgSendSuper2(&v13, sel_init);
  }
  else
  {

    type metadata accessor for SystemCoordinatorState();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v11;
}

GroupActivities::SystemCoordinatorState::GroupImmersionStyle_optional __swiftcall SystemCoordinatorState.GroupImmersionStyle.init(rawValue:)(Swift::Int rawValue)
{
  unsigned int v2 = 0x2010003u >> (8 * rawValue);
  if ((unint64_t)rawValue >= 4) {
    LOBYTE(v2) = 3;
  }
  *uint64_t v1 = v2;
  return (GroupActivities::SystemCoordinatorState::GroupImmersionStyle_optional)rawValue;
}

uint64_t specialized String.init<A>(describing:in:)(uint64_t a1, void *a2)
{
  swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SystemCoordinatorState.Type);
  uint64_t v3 = String.init<A>(describing:)();
  uint64_t v5 = v4;
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = v3;
  v6[3] = v5;
  v6[4] = a2;
  id v7 = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[PartialKeyPath<SystemCoordinatorState>], String>);
  lazy protocol witness table accessor for type LazyMapSequence<[PartialKeyPath<SystemCoordinatorState.ParticipantState>], String> and conformance <> LazyMapSequence<A, B>(&lazy protocol witness table cache variable for type LazyMapSequence<[PartialKeyPath<SystemCoordinatorState>], String> and conformance <> LazyMapSequence<A, B>, &demangling cache variable for type metadata for LazyMapSequence<[PartialKeyPath<SystemCoordinatorState>], String>, &lazy protocol witness table cache variable for type [PartialKeyPath<SystemCoordinatorState>] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [PartialKeyPath<SystemCoordinatorState>]);
  uint64_t v8 = BidirectionalCollection<>.joined(separator:)();
  id v10 = v9;
  swift_release();
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 40;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v8;
  v12._object = v10;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);

  return v3;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;

  swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SystemCoordinatorState.ParticipantState.Type);
  uint64_t v3 = String.init<A>(describing:)();
  uint64_t v5 = v4;
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = v3;
  v6[3] = v5;
  v6[4] = a2;
  id v7 = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<[PartialKeyPath<SystemCoordinatorState.ParticipantState>], String>);
  lazy protocol witness table accessor for type LazyMapSequence<[PartialKeyPath<SystemCoordinatorState.ParticipantState>], String> and conformance <> LazyMapSequence<A, B>(&lazy protocol witness table cache variable for type LazyMapSequence<[PartialKeyPath<SystemCoordinatorState.ParticipantState>], String> and conformance <> LazyMapSequence<A, B>, &demangling cache variable for type metadata for LazyMapSequence<[PartialKeyPath<SystemCoordinatorState.ParticipantState>], String>, &lazy protocol witness table cache variable for type [PartialKeyPath<SystemCoordinatorState.ParticipantState>] and conformance [A], &demangling cache variable for type metadata for [PartialKeyPath<SystemCoordinatorState.ParticipantState>]);
  uint64_t v8 = BidirectionalCollection<>.joined(separator:)();
  id v10 = v9;
  swift_release();
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 40;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v8;
  v12._object = v10;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);

  return v3;
}

void SystemCoordinatorState.init()()
{
}

id SystemCoordinatorState.__deallocating_deinit()
{
  return SystemCoordinatorState.__deallocating_deinit(type metadata accessor for SystemCoordinatorState);
}

uint64_t SystemCoordinatorState.ParticipantState.isSpatial.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial);
}

uint64_t SystemCoordinatorState.ParticipantState.isSpatialInitiator.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator);
}

uint64_t SystemCoordinatorState.ParticipantState.roleIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SystemCoordinatorState.ParticipantState.seat.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat);
  if (v3)
  {
    uint64_t v4 = (char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x68);
    long long v5 = *((_OWORD *)v4 + 1);
    uint64_t v6 = *((void *)v4 + 6);
    uint64_t v7 = *((void *)v4 + 7);
    long long v8 = *((_OWORD *)v4 + 2);
    uint64_t v9 = *((void *)v4 + 8);
    long long v12 = *(_OWORD *)(v4 + 72);
    *(_OWORD *)a1 = *(_OWORD *)v4;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = v8;
    *(void *)(a1 + 48) = v6;
    uint64_t result = swift_bridgeObjectRetain();
    long long v11 = v12;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
    *(void *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    long long v11 = xmmword_1A38F7C50;
  }
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = v9;
  *(_OWORD *)(a1 + 72) = v11;
  return result;
}

id SystemCoordinatorState.ParticipantState.init(isSpatial:isSpatialInitiator:)(char a1, char a2)
{
  v2[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial] = a1;
  v2[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator] = a2;
  uint64_t v3 = &v2[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier];
  void *v3 = 0;
  v3[1] = 0;
  *(void *)&v2[OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat] = 0;
  v5.receiver = v2;
  v5.super_class = (Class)type metadata accessor for SystemCoordinatorState.ParticipantState();
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t type metadata accessor for SystemCoordinatorState()
{
  return self;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id SystemCoordinatorState.ParticipantState.__allocating_init(isSpatial:isSpatialInitiator:roleIdentifier:seat:)(char a1, char a2, uint64_t a3, uint64_t a4, long long *a5)
{
  uint64_t v7 = v5;
  Swift::String v13 = objc_allocWithZone(v7);
  long long v14 = a5[3];
  v23[2] = a5[2];
  void v23[3] = v14;
  void v23[4] = a5[4];
  uint64_t v24 = *((void *)a5 + 10);
  v13[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial] = a1;
  long long v15 = *a5;
  long long v16 = a5[1];
  v13[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator] = a2;
  v23[0] = v15;
  v23[1] = v16;
  uint64_t v17 = &v13[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier];
  *uint64_t v17 = a3;
  v17[1] = a4;
  id v18 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCWrapper<SystemCoordinatorState.ParticipantState.Seat>));
  char v19 = v13;
  id v20 = specialized XPCWrapper.init(_:)((uint64_t)v23);
  if (v6)
  {

    swift_bridgeObjectRelease();
    return (id)swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)&v19[OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat] = v20;

    v22.receiver = v19;
    v22.super_class = v7;
    return objc_msgSendSuper2(&v22, sel_init);
  }
}

id SystemCoordinatorState.ParticipantState.init(isSpatial:isSpatialInitiator:roleIdentifier:seat:)(char a1, char a2, uint64_t a3, uint64_t a4, long long *a5)
{
  long long v7 = a5[3];
  v15[2] = a5[2];
  void v15[3] = v7;
  v15[4] = a5[4];
  uint64_t v16 = *((void *)a5 + 10);
  v5[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial] = a1;
  long long v8 = *a5;
  long long v9 = a5[1];
  v5[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator] = a2;
  v15[0] = v8;
  v15[1] = v9;
  id v10 = &v5[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier];
  *id v10 = a3;
  v10[1] = a4;
  objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCWrapper<SystemCoordinatorState.ParticipantState.Seat>));
  long long v11 = v5;
  id v12 = specialized XPCWrapper.init(_:)((uint64_t)v15);
  if (v6)
  {

    swift_bridgeObjectRelease();
    type metadata accessor for SystemCoordinatorState.ParticipantState();
    return (id)swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)&v11[OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat] = v12;

    v14.receiver = v11;
    v14.super_class = (Class)type metadata accessor for SystemCoordinatorState.ParticipantState();
    return objc_msgSendSuper2(&v14, sel_init);
  }
}

id SystemCoordinatorState.ParticipantState.__allocating_init(isSpatial:isSpatialInitiator:roleIdentifier:seat:)(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  id v11 = objc_allocWithZone(v5);
  return SystemCoordinatorState.ParticipantState.init(isSpatial:isSpatialInitiator:roleIdentifier:seat:)(a1, a2, a3, a4, a5);
}

id SystemCoordinatorState.ParticipantState.init(isSpatial:isSpatialInitiator:roleIdentifier:seat:)(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = *a5;
  uint64_t v8 = a5[1];
  uint64_t v9 = a5[2];
  uint64_t v10 = a5[3];
  uint64_t v11 = a5[4];
  uint64_t v12 = a5[5];
  uint64_t v13 = a5[6];
  uint64_t v14 = a5[7];
  v5[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial] = a1;
  uint64_t v15 = a5[8];
  long long v16 = *(_OWORD *)(a5 + 9);
  v5[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator] = a2;
  uint64_t v17 = &v5[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier];
  *uint64_t v17 = a3;
  v17[1] = a4;
  if ((void)v16 == 1)
  {
    *(void *)&v5[OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat] = 0;
  }
  else
  {
    v23[2] = v9;
    void v23[3] = v10;
    v23[0] = v7;
    v23[1] = v8;
    v23[6] = v13;
    v23[7] = v14;
    void v23[4] = v11;
    _OWORD v23[5] = v12;
    v23[8] = v15;
    long long v24 = v16;
    id v18 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCWrapper<SystemCoordinatorState.ParticipantState.Seat>));
    char v19 = v5;
    id v20 = specialized XPCWrapper.init(_:)((uint64_t)v23);
    if (v6)
    {

      swift_bridgeObjectRelease();
      type metadata accessor for SystemCoordinatorState.ParticipantState();
      return (id)swift_deallocPartialClassInstance();
    }
    *(void *)&v19[OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat] = v20;
  }
  v22.receiver = v5;
  v22.super_class = (Class)type metadata accessor for SystemCoordinatorState.ParticipantState();
  return objc_msgSendSuper2(&v22, sel_init);
}

__n128 SystemCoordinatorState.ParticipantState.Seat.pose.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)v1;
  long long v3 = *(_OWORD *)(v1 + 16);
  long long v4 = *(_OWORD *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t v6 = *(void *)(v1 + 56);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 32) = v4;
  return result;
}

uint64_t SystemCoordinatorState.ParticipantState.Seat.roleIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SystemCoordinatorState.ParticipantState.Seat.number.getter()
{
  return *(void *)(v0 + 80);
}

__n128 SystemCoordinatorState.ParticipantState.Seat.init(pose:roleIdentifier:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v6 = *(_OWORD *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v5;
  *(void *)(a4 + 48) = v7;
  *(void *)(a4 + 56) = v8;
  *(_OWORD *)(a4 + 32) = v6;
  *(void *)(a4 + 64) = a2;
  *(void *)(a4 + 72) = a3;
  *(void *)(a4 + 80) = -1;
  return result;
}

__n128 SystemCoordinatorState.ParticipantState.Seat.init(number:pose:roleIdentifier:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __n128 result = *(__n128 *)a2;
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v7 = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  *(_OWORD *)a5 = *(_OWORD *)a2;
  *(_OWORD *)(a5 + 16) = v6;
  *(void *)(a5 + 48) = v8;
  *(void *)(a5 + 56) = v9;
  *(_OWORD *)(a5 + 32) = v7;
  *(void *)(a5 + 64) = a3;
  *(void *)(a5 + 72) = a4;
  *(void *)(a5 + 80) = a1;
  return result;
}

void SystemCoordinatorState.ParticipantState.Seat.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 72);
  Swift::UInt v2 = *(void *)(v0 + 80);
  SPPose3D.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys()
{
  uint64_t v1 = 0x6E656449656C6F72;
  if (*v0 != 1) {
    uint64_t v1 = 0x7265626D756ELL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1702063984;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SystemCoordinatorState.ParticipantState.Seat.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t SystemCoordinatorState.ParticipantState.Seat.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SystemCoordinatorState.ParticipantState.Seat.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  long long v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v7 = *v1;
  long long v14 = v1[1];
  long long v15 = v7;
  long long v16 = v1[2];
  uint64_t v9 = *((void *)v1 + 6);
  uint64_t v8 = *((void *)v1 + 7);
  uint64_t v10 = *((void *)v1 + 8);
  void v13[2] = *((void *)v1 + 9);
  uint64_t v13[3] = v10;
  v13[1] = *((void *)v1 + 10);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v18 = v15;
  long long v19 = v14;
  uint64_t v21 = v9;
  uint64_t v22 = v8;
  long long v20 = v16;
  char v23 = 0;
  type metadata accessor for SPPose3D(0);
  lazy protocol witness table accessor for type SPPose3D and conformance SPPose3D(&lazy protocol witness table cache variable for type SPPose3D and conformance SPPose3D);
  uint64_t v11 = v17;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v11)
  {
    LOBYTE(v18) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v18) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int SystemCoordinatorState.ParticipantState.Seat.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  Swift::UInt v2 = *(void *)(v0 + 80);
  Hasher.init(_seed:)();
  SPPose3D.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t SystemCoordinatorState.ParticipantState.Seat.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SystemCoordinatorState.ParticipantState.Seat.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  type metadata accessor for SPPose3D(0);
  char v37 = 0;
  lazy protocol witness table accessor for type SPPose3D and conformance SPPose3D(&lazy protocol witness table cache variable for type SPPose3D and conformance SPPose3D);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v33;
  uint64_t v23 = v29;
  uint64_t v24 = v30;
  uint64_t v27 = v36;
  uint64_t v28 = v32;
  uint64_t v10 = v34;
  uint64_t v25 = v35;
  uint64_t v26 = v31;
  LOBYTE(v29) = 1;
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v21 = v9;
  uint64_t v22 = v10;
  LOBYTE(v29) = 2;
  uint64_t v12 = v11;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v14 = v24;
  *a2 = v23;
  a2[1] = v14;
  uint64_t v15 = v28;
  a2[2] = v26;
  a2[3] = v15;
  uint64_t v16 = v22;
  a2[4] = v21;
  a2[5] = v16;
  uint64_t v17 = v27;
  a2[6] = v25;
  a2[7] = v17;
  a2[8] = v20;
  a2[9] = v12;
  a2[10] = v13;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SystemCoordinatorState.ParticipantState.Seat@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return SystemCoordinatorState.ParticipantState.Seat.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SystemCoordinatorState.ParticipantState.Seat(void *a1)
{
  return SystemCoordinatorState.ParticipantState.Seat.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SystemCoordinatorState.ParticipantState.Seat()
{
  uint64_t v1 = *(void *)(v0 + 72);
  Swift::UInt v2 = *(void *)(v0 + 80);
  Hasher.init(_seed:)();
  SPPose3D.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SystemCoordinatorState.ParticipantState.Seat()
{
  uint64_t v1 = *(void *)(v0 + 72);
  Swift::UInt v2 = *(void *)(v0 + 80);
  SPPose3D.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SystemCoordinatorState.ParticipantState.Seat()
{
  uint64_t v1 = *(void *)(v0 + 72);
  Swift::UInt v2 = *(void *)(v0 + 80);
  Hasher.init(_seed:)();
  SPPose3D.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t SystemCoordinatorState.ParticipantState.isEqual(_:)(uint64_t a1)
{
  outlined init with copy of Any?(a1, (uint64_t)&v39);
  if (!*(void *)&v39.position.vector.f64[3])
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)&v39, &demangling cache variable for type metadata for Any?);
    return 0;
  }
  type metadata accessor for SystemCoordinatorState.ParticipantState();
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  Swift::UInt v2 = (void *)v58;
  if (*((unsigned __int8 *)v1 + OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial) != *(unsigned __int8 *)(v58 + OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial)
    || *((unsigned __int8 *)v1 + OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator) != *(unsigned __int8 *)(v58 + OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator))
  {
LABEL_5:

    return 0;
  }
  uint64_t v4 = *(void *)((char *)v1 + OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier + 8);
  uint64_t v5 = *(void *)(v58 + OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier + 8);
  if (v4)
  {
    if (!v5) {
      goto LABEL_5;
    }
    BOOL v6 = *(void *)((char *)v1 + OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier) == *(void *)(v58 + OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier)
      && v4 == v5;
    if (!v6 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_5;
    }
  }
  else if (v5)
  {
    goto LABEL_5;
  }
  uint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v8 = (*(void *(**)(long long *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70))(&v58);
  *(_OWORD *)char v37 = v58;
  *(void *)&v37[16] = v59;
  *(void *)&v37[24] = v60;
  *(_OWORD *)&v37[32] = v61;
  *(void *)&v37[48] = v62;
  *(void *)&v37[56] = v63;
  uint64_t v9 = v65;
  uint64_t v32 = v66;
  uint64_t v33 = v64;
  (*(void (**)(void *__return_ptr, void *))((*v7 & *v2) + 0x70))(v54, v8);
  double v10 = *(double *)&v54[1];
  uint64_t v11 = v54[3];
  uint64_t v13 = v54[4];
  uint64_t v12 = v54[5];
  uint64_t v14 = v54[6];
  uint64_t v16 = v55;
  uint64_t v15 = v56;
  uint64_t v31 = v57;
  double v35 = *(double *)&v54[2];
  uint64_t v36 = v54[7];
  double v34 = *(double *)v54;
  if (v9 == 1)
  {

    if (v15 == 1) {
      return 1;
    }
    goto LABEL_23;
  }
  if (v56 == 1)
  {

LABEL_23:
    SPPose3D v39 = *(SPPose3D *)v37;
    uint64_t v40 = v33;
    uint64_t v41 = v9;
    uint64_t v42 = v32;
    double v43 = v34;
    double v44 = v10;
    double v45 = v35;
    uint64_t v46 = v11;
    uint64_t v47 = v13;
    uint64_t v48 = v12;
    uint64_t v49 = v14;
    uint64_t v50 = v36;
    uint64_t v51 = v16;
    uint64_t v52 = v15;
    uint64_t v53 = v31;
    outlined release of (SystemCoordinatorState.ParticipantState.Seat?, SystemCoordinatorState.ParticipantState.Seat?)((uint64_t)&v39);
    return 0;
  }
  uint64_t v30 = v55;
  swift_bridgeObjectRetain();
  SPPose3D v39 = *(SPPose3D *)v37;
  v38.position.z = v35;
  *(void *)&v38.position.vector.f64[3] = v11;
  v38.position.x = v34;
  v38.position.y = v10;
  *(void *)&v38.rotation.vector.f64[2] = v14;
  *(void *)&v38.rotation.vector.f64[3] = v36;
  *(void *)&v38.rotation.vector.f64[0] = v13;
  *(void *)&v38.rotation.vector.f64[1] = v12;
  if ((SPPose3DEqualToPose(&v39, &v38) & 1) == 0)
  {

    outlined consume of SystemCoordinatorState.ParticipantState.Seat?(*(uint64_t *)&v34, *(uint64_t *)&v10, *(uint64_t *)&v35, v11, v13, v12, v14, v36, v30, v15);
LABEL_31:
    swift_bridgeObjectRelease();
    outlined consume of SystemCoordinatorState.ParticipantState.Seat?(*(uint64_t *)v37, *(uint64_t *)&v37[8], *(uint64_t *)&v37[16], *(uint64_t *)&v37[24], *(uint64_t *)&v37[32], *(uint64_t *)&v37[40], *(uint64_t *)&v37[48], *(uint64_t *)&v37[56], v33, v9);
    return 0;
  }
  if (!v9)
  {

    if (v15)
    {
      outlined consume of SystemCoordinatorState.ParticipantState.Seat?(*(uint64_t *)&v34, *(uint64_t *)&v10, *(uint64_t *)&v35, v11, v13, v12, v14, v36, v30, v15);
      outlined consume of SystemCoordinatorState.ParticipantState.Seat?(*(uint64_t *)v37, *(uint64_t *)&v37[8], *(uint64_t *)&v37[16], *(uint64_t *)&v37[24], *(uint64_t *)&v37[32], *(uint64_t *)&v37[40], *(uint64_t *)&v37[48], *(uint64_t *)&v37[56], v33, 0);
      return 0;
    }
    uint64_t v17 = v31;
    outlined consume of SystemCoordinatorState.ParticipantState.Seat?(*(uint64_t *)&v34, *(uint64_t *)&v10, *(uint64_t *)&v35, v11, v13, v12, v14, v36, v30, 0);
    uint64_t v9 = 0;
    uint64_t v20 = *(void *)&v37[56];
    uint64_t v19 = *(void *)&v37[48];
    uint64_t v22 = *(void *)&v37[40];
    uint64_t v21 = *(void *)&v37[32];
    uint64_t v24 = *(void *)&v37[24];
    uint64_t v23 = *(void *)&v37[16];
    uint64_t v26 = *(void *)&v37[8];
    uint64_t v25 = *(void *)v37;
    uint64_t v18 = v33;
    goto LABEL_39;
  }
  if (!v15)
  {

    outlined consume of SystemCoordinatorState.ParticipantState.Seat?(*(uint64_t *)&v34, *(uint64_t *)&v10, *(uint64_t *)&v35, v11, v13, v12, v14, v36, v30, 0);
    goto LABEL_31;
  }
  if (v33 == v30 && v9 == v15)
  {

    uint64_t v17 = v31;
    uint64_t v18 = v33;
    outlined consume of SystemCoordinatorState.ParticipantState.Seat?(*(uint64_t *)&v34, *(uint64_t *)&v10, *(uint64_t *)&v35, v11, v13, v12, v14, v36, v33, v9);
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void *)&v37[56];
    uint64_t v19 = *(void *)&v37[48];
    uint64_t v22 = *(void *)&v37[40];
    uint64_t v21 = *(void *)&v37[32];
    uint64_t v24 = *(void *)&v37[24];
    uint64_t v23 = *(void *)&v37[16];
    uint64_t v26 = *(void *)&v37[8];
    uint64_t v25 = *(void *)v37;
LABEL_39:
    uint64_t v27 = v32;
    outlined consume of SystemCoordinatorState.ParticipantState.Seat?(v25, v26, v23, v24, v21, v22, v19, v20, v18, v9);
    return v27 == v17;
  }
  char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();

  uint64_t v28 = v15;
  uint64_t v17 = v31;
  outlined consume of SystemCoordinatorState.ParticipantState.Seat?(*(uint64_t *)&v34, *(uint64_t *)&v10, *(uint64_t *)&v35, v11, v13, v12, v14, v36, v30, v28);
  swift_bridgeObjectRelease();
  uint64_t v27 = v32;
  outlined consume of SystemCoordinatorState.ParticipantState.Seat?(*(uint64_t *)v37, *(uint64_t *)&v37[8], *(uint64_t *)&v37[16], *(uint64_t *)&v37[24], *(uint64_t *)&v37[32], *(uint64_t *)&v37[40], *(uint64_t *)&v37[48], *(uint64_t *)&v37[56], v33, v9);
  uint64_t result = 0;
  if (v29) {
    return v27 == v17;
  }
  return result;
}

uint64_t @objc SystemCoordinatorState.isEqual(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  if (a3)
  {
    id v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    id v7 = a1;
  }
  char v8 = a4(v10);

  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v10, &demangling cache variable for type metadata for Any?);
  return v8 & 1;
}

Swift::Int SystemCoordinatorState.ParticipantState.hash.getter()
{
  Hasher.init()();
  Hasher._combine(_:)(*((unsigned char *)v0 + OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial));
  Hasher._combine(_:)(*((unsigned char *)v0 + OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator));
  if (*(void *)((char *)v0 + OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t v1 = swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  (*(void (**)(long long *__return_ptr, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))(&v11, v1);
  uint64_t v2 = v16;
  if (v16 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    long long v3 = v11;
    long long v4 = v12;
    long long v5 = v13;
    long long v6 = v14;
    uint64_t v9 = v15;
    Swift::UInt v10 = v17;
    Hasher._combine(_:)(1u);
    long long v24 = v4;
    long long v23 = v3;
    long long v26 = v6;
    long long v25 = v5;
    swift_bridgeObjectRetain();
    SPPose3D.hash(into:)();
    if (v2)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      uint64_t v7 = *((void *)&v4 + 1);
      outlined consume of SystemCoordinatorState.ParticipantState.Seat?(v3, *((uint64_t *)&v3 + 1), v4, *((uint64_t *)&v4 + 1), v5, *((uint64_t *)&v5 + 1), v6, *((uint64_t *)&v6 + 1), v9, v2);
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v7 = *((void *)&v4 + 1);
    }
    Hasher._combine(_:)(v10);
    outlined consume of SystemCoordinatorState.ParticipantState.Seat?(v3, v5, *((uint64_t *)&v3 + 1), v7, v5, *((uint64_t *)&v5 + 1), v6, *((uint64_t *)&v6 + 1), v9, v2);
    outlined consume of SystemCoordinatorState.ParticipantState.Seat?(v3, v5, *((uint64_t *)&v3 + 1), v7, v5, *((uint64_t *)&v5 + 1), v6, *((uint64_t *)&v6 + 1), v9, v2);
  }
  long long v13 = v20;
  long long v14 = v21;
  uint64_t v15 = v22;
  long long v11 = v18;
  long long v12 = v19;
  return Hasher.finalize()();
}

uint64_t static SystemCoordinatorState.ParticipantState.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall SystemCoordinatorState.ParticipantState.encode(with:)(NSCoder with)
{
  uint64_t v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial);
  long long v4 = (void *)MEMORY[0x1A624DFA0](0x6169746170537369, 0xE90000000000006CLL);
  [(objc_class *)with.super.isa encodeBool:v3 forKey:v4];

  uint64_t v5 = *(unsigned __int8 *)(v1 + OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator);
  long long v6 = (void *)MEMORY[0x1A624DFA0](0xD000000000000012, 0x80000001A3902400);
  [(objc_class *)with.super.isa encodeBool:v5 forKey:v6];

  if (*(void *)(v1 + OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier + 8)) {
    uint64_t v7 = MEMORY[0x1A624DFA0](*(void *)(v1 + OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier));
  }
  else {
    uint64_t v7 = 0;
  }
  char v8 = (void *)MEMORY[0x1A624DFA0](0x6E656449656C6F72, 0xEE00726569666974);
  [(objc_class *)with.super.isa encodeObject:v7 forKey:v8];
  swift_unknownObjectRelease();

  uint64_t v9 = *(void *)(v1 + OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat);
  id v10 = (id)MEMORY[0x1A624DFA0](1952540019, 0xE400000000000000);
  [(objc_class *)with.super.isa encodeObject:v9 forKey:v10];
}

id SystemCoordinatorState.ParticipantState.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = specialized SystemCoordinatorState.ParticipantState.init(coder:)(a1);

  return v4;
}

id SystemCoordinatorState.ParticipantState.init(coder:)(void *a1)
{
  id v2 = specialized SystemCoordinatorState.ParticipantState.init(coder:)(a1);

  return v2;
}

double key path getter for SystemCoordinatorState.ParticipantState.seat : SystemCoordinatorState.ParticipantState@<D0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x70))(v7);
  uint64_t v3 = v9;
  long long v4 = v7[1];
  *(_OWORD *)a2 = v7[0];
  *(_OWORD *)(a2 + 16) = v4;
  long long v5 = v7[3];
  *(_OWORD *)(a2 + 32) = v7[2];
  *(_OWORD *)(a2 + 48) = v5;
  double result = *(double *)&v8;
  *(_OWORD *)(a2 + 64) = v8;
  *(void *)(a2 + 80) = v3;
  return result;
}

id SystemCoordinatorState.ParticipantState.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void SystemCoordinatorState.ParticipantState.init()()
{
}

id SystemCoordinatorState.ParticipantState.__deallocating_deinit()
{
  return SystemCoordinatorState.__deallocating_deinit(type metadata accessor for SystemCoordinatorState.ParticipantState);
}

id SystemCoordinatorState.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t SystemCoordinatorState.GroupImmersionStyle.description.getter()
{
  uint64_t v1 = 1819047270;
  if (*v0 != 1) {
    uint64_t v1 = 0x73736572676F7270;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x646578696DLL;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SystemCoordinatorState.GroupImmersionStyle()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SystemCoordinatorState.GroupImmersionStyle()
{
  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SystemCoordinatorState.GroupImmersionStyle()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

GroupActivities::SystemCoordinatorState::GroupImmersionStyle_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SystemCoordinatorState.GroupImmersionStyle(Swift::Int *a1)
{
  return SystemCoordinatorState.GroupImmersionStyle.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SystemCoordinatorState.GroupImmersionStyle(void *a1@<X8>)
{
  *a1 = *v1 + 1;
}

uint64_t type metadata accessor for SystemCoordinatorState.ParticipantState()
{
  return self;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SystemCoordinatorState.GroupImmersionStyle()
{
  uint64_t v1 = 1819047270;
  if (*v0 != 1) {
    uint64_t v1 = 0x73736572676F7270;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x646578696DLL;
  }
}

uint64_t specialized closure #1 in String.init<A>(describing:in:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  v32[4] = a4;
  *(void *)&v24[0] = AnyKeyPath.debugDescription.getter();
  *((void *)&v24[0] + 1) = v6;
  uint64_t v27 = 92;
  unint64_t v28 = 0xE100000000000000;
  v7._countAndFlagsBits = a2;
  v7._object = a3;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 46;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v32[0] = 92;
  v32[1] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  Collection<>.trimmingPrefix<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v29;
  uint64_t v9 = v30;
  swift_getAtPartialKeyPath();
  outlined init with copy of Any((uint64_t)v32, (uint64_t)v26);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptionalProtocol);
  if (swift_dynamicCast())
  {
    outlined init with take of TypedPayloadDecoding(v24, (uint64_t)&v27);
    uint64_t v11 = v30;
    uint64_t v12 = v31;
    __swift_project_boxed_opaque_existential_1(&v27, v30);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
    uint64_t v15 = v14;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v27);
  }
  else
  {
    uint64_t v25 = 0;
    memset(v24, 0, sizeof(v24));
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v24, &demangling cache variable for type metadata for OptionalProtocol?);
    outlined init with copy of Any((uint64_t)v32, (uint64_t)&v27);
    uint64_t v13 = String.init<A>(describing:)();
    uint64_t v15 = v16;
  }
  uint64_t v17 = MEMORY[0x1A624E050](92, 0xE100000000000000, v10, v9);
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();
  uint64_t v27 = v17;
  unint64_t v28 = v19;
  v20._countAndFlagsBits = 8250;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v13;
  v21._object = v15;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  uint64_t v22 = v27;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v32);
  return v22;
}

unint64_t specialized static SystemCoordinatorState.ParticipantState.Seat.== infix(_:_:)(uint64_t a1, double *a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  long long v3 = *(_OWORD *)(a1 + 32);
  double v4 = *(double *)(a1 + 48);
  double v5 = *(double *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  long long v9 = *(_OWORD *)a2;
  long long v10 = *((_OWORD *)a2 + 1);
  long long v11 = *((_OWORD *)a2 + 2);
  double v12 = a2[6];
  double v13 = a2[7];
  uint64_t v15 = *((void *)a2 + 8);
  uint64_t v14 = *((void *)a2 + 9);
  uint64_t v16 = *((void *)a2 + 10);
  *(_OWORD *)&v20.position.x = *(_OWORD *)a1;
  *(_OWORD *)&v20.position.vector.f64[2] = v2;
  v20.rotation.vector.f64[2] = v4;
  v20.rotation.vector.f64[3] = v5;
  *(_OWORD *)v20.rotation.vector.f64 = v3;
  *(_OWORD *)&v19.position.x = v9;
  *(_OWORD *)&v19.position.vector.f64[2] = v10;
  v19.rotation.vector.f64[2] = v12;
  v19.rotation.vector.f64[3] = v13;
  *(_OWORD *)v19.rotation.vector.f64 = v11;
  unint64_t result = SPPose3DEqualToPose(&v20, &v19);
  if (!result) {
    return result;
  }
  if (!v6)
  {
    if (!v14) {
      return v8 == v16;
    }
    return 0;
  }
  if (!v14) {
    return 0;
  }
  if (v7 == v15 && v6 == v14) {
    return v8 == v16;
  }
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  unint64_t result = 0;
  if (v18) {
    return v8 == v16;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorState.ParticipantState.Seat.CodingKeys and conformance SystemCoordinatorState.ParticipantState.Seat.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type SPPose3D and conformance SPPose3D(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for SPPose3D(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined release of (SystemCoordinatorState.ParticipantState.Seat?, SystemCoordinatorState.ParticipantState.Seat?)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v5 = *(void *)(a1 + 120);
  uint64_t v6 = *(void *)(a1 + 128);
  uint64_t v7 = *(void *)(a1 + 136);
  uint64_t v8 = *(void *)(a1 + 144);
  uint64_t v9 = *(void *)(a1 + 152);
  long long v11 = *(_OWORD *)(a1 + 160);
  outlined consume of SystemCoordinatorState.ParticipantState.Seat?(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72));
  outlined consume of SystemCoordinatorState.ParticipantState.Seat?(v2, v3, v4, v5, v6, v7, v8, v9, v11, *((uint64_t *)&v11 + 1));
  return a1;
}

uint64_t specialized SystemCoordinatorState.ParticipantState.Seat.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1702063984 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E656449656C6F72 && a2 == 0xEE00726569666974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7265626D756ELL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

id specialized SystemCoordinatorState.ParticipantState.init(coder:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = (void *)MEMORY[0x1A624DFA0](0x6169746170537369, 0xE90000000000006CLL);
  unsigned __int8 v5 = objc_msgSend(a1, sel_decodeBoolForKey_, v4);

  v3[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatial] = v5;
  char v6 = (void *)MEMORY[0x1A624DFA0](0xD000000000000012, 0x80000001A3902400);
  unsigned __int8 v7 = objc_msgSend(a1, sel_decodeBoolForKey_, v6);

  v3[OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator] = v7;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSString);
  uint64_t v8 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v12 = 0;
  }
  double v13 = (uint64_t *)&v3[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier];
  *double v13 = v10;
  v13[1] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for XPCWrapper<SystemCoordinatorState.ParticipantState.Seat>);
  *(void *)&v3[OBJC_IVAR___CPSystemCoordinatorParticipantState_xpcWrappedSeat] = NSCoder.decodeObject<A>(of:forKey:)();

  v15.receiver = v3;
  v15.super_class = (Class)type metadata accessor for SystemCoordinatorState.ParticipantState();
  return objc_msgSendSuper2(&v15, sel_init);
}

unint64_t lazy protocol witness table accessor for type SystemCoordinatorState.GroupImmersionStyle and conformance SystemCoordinatorState.GroupImmersionStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemCoordinatorState.GroupImmersionStyle and conformance SystemCoordinatorState.GroupImmersionStyle;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorState.GroupImmersionStyle and conformance SystemCoordinatorState.GroupImmersionStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorState.GroupImmersionStyle and conformance SystemCoordinatorState.GroupImmersionStyle);
  }
  return result;
}

uint64_t method lookup function for SystemCoordinatorState(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemCoordinatorState);
}

uint64_t dispatch thunk of SystemCoordinatorState.__allocating_init(localParticipantState:groupImmersionStyle:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of SystemCoordinatorState.__allocating_init(localParticipantState:groupImmersionStyle:activeSpatialParticipantCount:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of SystemCoordinatorState.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SystemCoordinatorState.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t method lookup function for SystemCoordinatorState.ParticipantState(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemCoordinatorState.ParticipantState);
}

uint64_t dispatch thunk of SystemCoordinatorState.ParticipantState.seat.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SystemCoordinatorState.ParticipantState.__allocating_init(isSpatial:isSpatialInitiator:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of SystemCoordinatorState.ParticipantState.__allocating_init(isSpatial:isSpatialInitiator:roleIdentifier:seat:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of SystemCoordinatorState.ParticipantState.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of SystemCoordinatorState.ParticipantState.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t destroy for SystemCoordinatorState.ParticipantState.Seat()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SystemCoordinatorState.ParticipantState.Seat(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SystemCoordinatorState.ParticipantState.Seat(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  *a1 = v4;
  a1[1] = v5;
  uint64_t v8 = a2[4];
  uint64_t v7 = a2[5];
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  a1[4] = v8;
  a1[5] = v7;
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  return a1;
}

__n128 __swift_memcpy88_16(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SystemCoordinatorState.ParticipantState.Seat(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemCoordinatorState.ParticipantState.Seat(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 88)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 72);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemCoordinatorState.ParticipantState.Seat(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 88) = 0;
    }
    if (a2) {
      *(void *)(result + 72) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemCoordinatorState.ParticipantState.Seat()
{
  return &type metadata for SystemCoordinatorState.ParticipantState.Seat;
}

ValueMetadata *type metadata accessor for SystemCoordinatorState.GroupImmersionStyle()
{
  return &type metadata for SystemCoordinatorState.GroupImmersionStyle;
}

unsigned char *storeEnumTagSinglePayload for SystemCoordinatorState.GroupImmersionStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A387C354);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SystemCoordinatorState.ParticipantState.Seat.CodingKeys()
{
  return &unk_1EF715F90;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t objectdestroyTm_3()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for specialized closure #1 in String.init<A>(describing:in:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized closure #1 in String.init<A>(describing:in:)(*a1, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32));
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t lazy protocol witness table accessor for type LazyMapSequence<[PartialKeyPath<SystemCoordinatorState.ParticipantState>], String> and conformance <> LazyMapSequence<A, B>(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    lazy protocol witness table accessor for type [PartialKeyPath<SystemCoordinatorState.ParticipantState>] and conformance [A](a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [PartialKeyPath<SystemCoordinatorState.ParticipantState>] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

char **Signposts.MessengerEvents.messengerRecv.unsafeMutableAddressor()
{
  return &static Signposts.MessengerEvents.messengerRecv;
}

uint64_t Signposts.groupSession.unsafeMutableAddressor()
{
  if (one-time initialization token for groupSession != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for OSSignposter();

  return __swift_project_value_buffer(v0, (uint64_t)static Signposts.groupSession);
}

char **Signposts.GroupSessionEvents.groupSessionJoin.unsafeMutableAddressor()
{
  return &static Signposts.GroupSessionEvents.groupSessionJoin;
}

char **Signposts.MessengerEvents.messengerSend.unsafeMutableAddressor()
{
  return &static Signposts.MessengerEvents.messengerSend;
}

char **Signposts.GroupSessionEvents.groupSessionReceived.unsafeMutableAddressor()
{
  return &static Signposts.GroupSessionEvents.groupSessionReceived;
}

char **Signposts.GroupSessionEvents.groupSessionRequested.unsafeMutableAddressor()
{
  return &static Signposts.GroupSessionEvents.groupSessionRequested;
}

const char *static Signposts.MessengerEvents.messengerSend.getter()
{
  return "group-session-messenger-send";
}

const char *static Signposts.MessengerEvents.messengerRecv.getter()
{
  return "group-session-messenger-receive";
}

char **Signposts.GroupSessionEvents.groupSessionRequestDuration.unsafeMutableAddressor()
{
  return &static Signposts.GroupSessionEvents.groupSessionRequestDuration;
}

const char *static Signposts.GroupSessionEvents.groupSessionRequestDuration.getter()
{
  return "GroupSessionRequested";
}

const char *static Signposts.GroupSessionEvents.groupSessionRequested.getter()
{
  return "group-session-requested";
}

const char *static Signposts.GroupSessionEvents.groupSessionReceived.getter()
{
  return "group-session-received";
}

const char *static Signposts.GroupSessionEvents.groupSessionJoin.getter()
{
  return "group-session-join";
}

uint64_t one-time initialization function for groupSession()
{
  uint64_t v0 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v0, static Signposts.groupSession);
  __swift_project_value_buffer(v0, (uint64_t)static Signposts.groupSession);
  return OSSignposter.init(subsystem:category:)();
}

uint64_t static Signposts.groupSession.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for groupSession != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for OSSignposter();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Signposts.groupSession);
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

ValueMetadata *type metadata accessor for Signposts.GroupSessionEvents()
{
  return &type metadata for Signposts.GroupSessionEvents;
}

unint64_t UUID.uint64Value.getter()
{
  UUID.uuid.getter();
  unsigned __int8 v1 = v0;
  UUID.uuid.getter();
  uint64_t v3 = (v2 >> 40) & 0xFF00 | v1;
  UUID.uuid.getter();
  uint64_t v5 = (v4 >> 24) & 0xFF0000;
  UUID.uuid.getter();
  uint64_t v7 = v3 | v5 | (v6 >> 8) & 0xFF000000;
  UUID.uuid.getter();
  unint64_t v9 = v7 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v8 << 32);
  UUID.uuid.getter();
  unint64_t v11 = v9 & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)v10 << 40);
  UUID.uuid.getter();
  unint64_t v13 = v11 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v12 << 48);
  UUID.uuid.getter();
  return v13 | (v14 << 56);
}

uint64_t UUID.init(_:)()
{
  return UUID.init(uuid:)();
}

uint64_t AVAudioSessionAssertion.__allocating_init(id:manager:)(uint64_t a1, void *a2)
{
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = v4 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_id;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, a1, v6);
  outlined init with copy of AudioSessionAssertionManager((uint64_t)a2, v4 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager);
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8))(a1, v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a2);
  return v4;
}

uint64_t AVAudioSessionAssertionManager.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  type metadata accessor for Lock();
  swift_allocObject();
  uint64_t v1 = Lock.init()();
  uint64_t v2 = MEMORY[0x1E4FBC870];
  *(void *)(v0 + 16) = v1;
  *(void *)(v0 + 24) = v2;
  return v0;
}

uint64_t *AVAudioSessionAssertionManager.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static AVAudioSessionAssertionManager.shared;
}

uint64_t static AVAudioSessionAssertionManager.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t AVAudioSessionAssertionManager.lock.getter()
{
  return swift_retain();
}

id implicit closure #1 in AVAudioSessionAssertionManager.groupSessions.didset(void *a1)
{
  v4[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v1 = *MEMORY[0x1E4F14F98];
  v4[0] = 0;
  if (objc_msgSend(a1, sel_setCategory_error_, v1, v4)) {
    return v4[0];
  }
  id v3 = v4[0];
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

id implicit closure #2 in AVAudioSessionAssertionManager.groupSessions.didset(void *a1, char a2)
{
  v4[1] = *(id *)MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (objc_msgSend(a1, sel_setIsExpanseMediaSession_error_, a2 & 1, v4)) {
    return v4[0];
  }
  id v3 = v4[0];
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

uint64_t AVAudioSessionAssertionManager.groupSessions.getter()
{
  return swift_bridgeObjectRetain();
}

void AVAudioSessionAssertionManager.groupSessions.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(*(void *)(v1 + 24) + 16);
  id v4 = objc_msgSend(self, sel_sharedInstance);
  uint64_t v5 = v4;
  if (v3)
  {
    MEMORY[0x1F4188790](v4);
    id v4 = (id)tryLog<A>(_:_:function:line:)();
  }
  MEMORY[0x1F4188790](v4);
  tryLog<A>(_:_:function:line:)();
}

void (*AVAudioSessionAssertionManager.groupSessions.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return AVAudioSessionAssertionManager.groupSessions.modify;
}

void AVAudioSessionAssertionManager.groupSessions.modify(uint64_t a1, char a2)
{
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 24) + 24) + 16);
    id v5 = objc_msgSend(self, sel_sharedInstance);
    uint64_t v6 = v5;
    if (v4)
    {
      MEMORY[0x1F4188790](v5);
      id v5 = (id)tryLog<A>(_:_:function:line:)();
    }
    MEMORY[0x1F4188790](v5);
    tryLog<A>(_:_:function:line:)();
  }
}

uint64_t AVAudioSessionAssertionManager.addSession(id:)()
{
  return AVAudioSessionAssertionManager.addSession(id:)();
}

{
  return Lock.withLock<A>(_:)();
}

uint64_t closure #1 in AVAudioSessionAssertionManager.addSession(id:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v6);
  unsigned __int8 v10 = &v13[-v9];
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  unint64_t v11 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)a1 + 112))(v13);
  specialized Set._Variant.insert(_:)((uint64_t)v10, v8);
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v10, v4);
  return v11(v13, 0);
}

uint64_t AVAudioSessionAssertionManager.removeSession(id:)()
{
  return AVAudioSessionAssertionManager.addSession(id:)();
}

uint64_t closure #1 in AVAudioSessionAssertionManager.removeSession(id:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)a1 + 112))(v9);
  specialized Set._Variant.remove(_:)(a2, (uint64_t)v6);
  outlined destroy of UUID?((uint64_t)v6);
  return v7(v9, 0);
}

uint64_t AVAudioSessionAssertionManager.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AVAudioSessionAssertionManager.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t AVAudioSessionAssertionManager.init()()
{
  type metadata accessor for Lock();
  swift_allocObject();
  uint64_t v1 = Lock.init()();
  uint64_t v2 = MEMORY[0x1E4FBC870];
  *(void *)(v0 + 16) = v1;
  *(void *)(v0 + 24) = v2;
  return v0;
}

uint64_t protocol witness for AudioSessionAssertionManager.addSession(id:) in conformance AVAudioSessionAssertionManager()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t protocol witness for AudioSessionAssertionManager.removeSession(id:) in conformance AVAudioSessionAssertionManager()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t BackgroundAudioSessionAssertionManager.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t *BackgroundAudioSessionAssertionManager.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static BackgroundAudioSessionAssertionManager.shared;
}

uint64_t static BackgroundAudioSessionAssertionManager.shared.getter()
{
  type metadata accessor for BackgroundAudioSessionAssertionManager();

  return swift_initStaticObject();
}

uint64_t BackgroundAudioSessionAssertionManager.deinit()
{
  return v0;
}

uint64_t BackgroundAudioSessionAssertionManager.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t BackgroundAudioSessionAssertionManager.init()()
{
  return v0;
}

uint64_t protocol witness for AudioSessionAssertionManager.addSession(id:) in conformance BackgroundAudioSessionAssertionManager()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t protocol witness for AudioSessionAssertionManager.removeSession(id:) in conformance BackgroundAudioSessionAssertionManager()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t AVAudioSessionAssertion.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t AVAudioSessionAssertion.manager.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AudioSessionAssertionManager(v1 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager, a1);
}

uint64_t AVAudioSessionAssertion.init(id:manager:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = v2 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_id;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  outlined init with copy of AudioSessionAssertionManager((uint64_t)a2, v3 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager);
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 8))(a1, v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a2);
  return v3;
}

id partial apply for implicit closure #2 in AVAudioSessionAssertionManager.groupSessions.didset()
{
  return implicit closure #2 in AVAudioSessionAssertionManager.groupSessions.didset(*(void **)(v0 + 16), *(unsigned char *)(v0 + 24));
}

id partial apply for implicit closure #1 in AVAudioSessionAssertionManager.groupSessions.didset()
{
  return implicit closure #1 in AVAudioSessionAssertionManager.groupSessions.didset(*(void **)(v0 + 16));
}

uint64_t partial apply for closure #1 in AVAudioSessionAssertionManager.addSession(id:)()
{
  return closure #1 in AVAudioSessionAssertionManager.addSession(id:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for closure #1 in AVAudioSessionAssertionManager.removeSession(id:)()
{
  return closure #1 in AVAudioSessionAssertionManager.removeSession(id:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t type metadata accessor for BackgroundAudioSessionAssertionManager()
{
  return self;
}

uint64_t AVAudioSessionAssertion.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager + 24);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager), v2);
  uint64_t v4 = v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_id;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_id, v2, v3);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  return v0;
}

uint64_t AVAudioSessionAssertion.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager + 24);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_manager), v2);
  uint64_t v4 = v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_id;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0 + OBJC_IVAR____TtC15GroupActivities23AVAudioSessionAssertion_id, v2, v3);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  __swift_destroy_boxed_opaque_existential_1Tm(v1);

  return swift_deallocClassInstance();
}

uint64_t sub_1A387DA7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_1A387DAC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 104);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t dispatch thunk of AudioSessionAssertionManager.addSession(id:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of AudioSessionAssertionManager.removeSession(id:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t method lookup function for AVAudioSessionAssertionManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AVAudioSessionAssertionManager);
}

uint64_t dispatch thunk of AVAudioSessionAssertionManager.groupSessions.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of AVAudioSessionAssertionManager.groupSessions.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of AVAudioSessionAssertionManager.groupSessions.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of AVAudioSessionAssertionManager.addSession(id:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of AVAudioSessionAssertionManager.removeSession(id:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of AVAudioSessionAssertionManager.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t method lookup function for BackgroundAudioSessionAssertionManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for BackgroundAudioSessionAssertionManager);
}

uint64_t dispatch thunk of BackgroundAudioSessionAssertionManager.addSession(id:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of BackgroundAudioSessionAssertionManager.removeSession(id:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of BackgroundAudioSessionAssertionManager.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t ObjC metadata update function for AVAudioSessionAssertion()
{
  return type metadata accessor for AVAudioSessionAssertion();
}

uint64_t type metadata accessor for AVAudioSessionAssertion()
{
  uint64_t result = type metadata singleton initialization cache for AVAudioSessionAssertion;
  if (!type metadata singleton initialization cache for AVAudioSessionAssertion) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for AVAudioSessionAssertion()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for AVAudioSessionAssertion(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AVAudioSessionAssertion);
}

uint64_t dispatch thunk of AVAudioSessionAssertion.__allocating_init(id:manager:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

void *specialized _NativeSet.copy()()
{
  return specialized _NativeSet.copy()((uint64_t (*)(void))type metadata accessor for Participant, &demangling cache variable for type metadata for _SetStorage<Participant>, (uint64_t (*)(void))type metadata accessor for Participant);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt64>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v11 = -1;
  if (v10 < 64) {
    unint64_t v11 = ~(-1 << v10);
  }
  unsigned __int8 v12 = v11 & *(void *)(v2 + 56);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      objc_super v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      uint64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        uint64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unsigned __int8 v12 = (v17 - 1) & v17;
    objc_super v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  char v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v11 = -1;
  if (v10 < 64) {
    unint64_t v11 = ~(-1 << v10);
  }
  unsigned __int8 v12 = v11 & *(void *)(v2 + 56);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      objc_super v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      uint64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        uint64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unsigned __int8 v12 = (v17 - 1) & v17;
    objc_super v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = (void *)swift_retain();
  }
  char v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()(MEMORY[0x1E4F27990], &demangling cache variable for type metadata for _SetStorage<UUID>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  unint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AddressableMember>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v11 = -1;
  if (v10 < 64) {
    unint64_t v11 = ~(-1 << v10);
  }
  unsigned __int8 v12 = v11 & *(void *)(v2 + 56);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      objc_super v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    SPPose3D v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    Swift::String v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      uint64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      Swift::String v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        uint64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        Swift::String v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unsigned __int8 v12 = (v21 - 1) & v21;
    objc_super v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    char v18 = v17[1];
    SPPose3D v19 = (void *)(*(void *)(v4 + 48) + v16);
    *SPPose3D v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  Swift::String v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    Swift::String v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()(type metadata accessor for PresenceSessionInfo.Participant, &demangling cache variable for type metadata for _SetStorage<PresenceSessionInfo.Participant>, type metadata accessor for PresenceSessionInfo.Participant);
}

{
  return specialized _NativeSet.copy()(MEMORY[0x1E4FBCEA8], &demangling cache variable for type metadata for _SetStorage<UTType>);
}

id specialized _NativeSet.copy()()
{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<CPParticipant>);
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<TUHandle>);
}

id specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    char v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3;
  uint64_t v7 = a1(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7 - 8);
  int64_t v10 = (char *)&v29 - v9;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v11 = *v3;
  uint64_t v12 = static _SetStorage.copy(original:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16))
  {
    id result = (void *)swift_release();
LABEL_30:
    uint64_t *v6 = v13;
    return result;
  }
  uint64_t v30 = v6;
  id result = (void *)(v12 + 56);
  uint64_t v15 = v11 + 56;
  unint64_t v16 = (unint64_t)((1 << *(unsigned char *)(v13 + 32)) + 63) >> 6;
  if (v13 != v11 || (unint64_t)result >= v11 + 56 + 8 * v16) {
    id result = memmove(result, (const void *)(v11 + 56), 8 * v16);
  }
  int64_t v18 = 0;
  *(void *)(v13 + 16) = *(void *)(v11 + 16);
  uint64_t v19 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & *(void *)(v11 + 56);
  int64_t v22 = (unint64_t)(v19 + 63) >> 6;
  while (1)
  {
    if (v21)
    {
      unint64_t v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v24 = v23 | (v18 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v26 >= v22) {
      goto LABEL_28;
    }
    unint64_t v27 = *(void *)(v15 + 8 * v26);
    ++v18;
    if (!v27)
    {
      int64_t v18 = v26 + 1;
      if (v26 + 1 >= v22) {
        goto LABEL_28;
      }
      unint64_t v27 = *(void *)(v15 + 8 * v18);
      if (!v27)
      {
        int64_t v18 = v26 + 2;
        if (v26 + 2 >= v22) {
          goto LABEL_28;
        }
        unint64_t v27 = *(void *)(v15 + 8 * v18);
        if (!v27) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v21 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v18 << 6);
LABEL_12:
    unint64_t v25 = *(void *)(v8 + 72) * v24;
    outlined init with copy of PresenceSessionInfo.Participant(*(void *)(v11 + 48) + v25, (uint64_t)v10, a3);
    id result = (void *)outlined init with take of PresenceSessionInfo.Participant((uint64_t)v10, *(void *)(v13 + 48) + v25, a3);
  }
  int64_t v28 = v26 + 3;
  if (v28 >= v22)
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t v6 = v30;
    goto LABEL_30;
  }
  unint64_t v27 = *(void *)(v15 + 8 * v28);
  if (v27)
  {
    int64_t v18 = v28;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v18 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v18 >= v22) {
      goto LABEL_28;
    }
    unint64_t v27 = *(void *)(v15 + 8 * v18);
    ++v28;
    if (v27) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = a1(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v25 - v7;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _SetStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    id result = (void *)swift_release();
LABEL_30:
    uint64_t *v4 = v11;
    return result;
  }
  id result = (void *)(v10 + 56);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  int64_t v26 = v4;
  unint64_t v27 = (const void *)(v9 + 56);
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v13) {
    id result = memmove(result, v27, 8 * v13);
  }
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 56);
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v22);
    ++v15;
    if (!v23)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_28;
      }
      unint64_t v23 = *((void *)v27 + v15);
      if (!v23)
      {
        int64_t v15 = v22 + 2;
        if (v22 + 2 >= v28) {
          goto LABEL_28;
        }
        unint64_t v23 = *((void *)v27 + v15);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v21, v5);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v21, v8, v5);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v28)
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t v4 = v26;
    goto LABEL_30;
  }
  unint64_t v23 = *((void *)v27 + v24);
  if (v23)
  {
    int64_t v15 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v15);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = static Hasher._hash(seed:_:)();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(v4 + 48);
  if (*(void *)(v8 + 8 * v7) != a1)
  {
    uint64_t v9 = ~v6;
    do
    {
      unint64_t v7 = (v7 + 1) & v9;
      if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        return 0;
      }
    }
    while (*(void *)(v8 + 8 * v7) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v11 = v14;
  }
  uint64_t v12 = *(void *)(*(void *)(v11 + 48) + 8 * v7);
  specialized _NativeSet._delete(at:)(v7);
  *uint64_t v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  _s10Foundation4UUIDVACSHAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    int64_t v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    uint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    uint64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      _s10Foundation4UUIDVACSHAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    *unint64_t v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()(MEMORY[0x1E4F27990], &demangling cache variable for type metadata for _SetStorage<UUID>);
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    specialized _NativeSet._delete(at:)(v12, MEMORY[0x1E4F27990], (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990], MEMORY[0x1E4F279A0]);
    *unint64_t v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v5 = type metadata accessor for UTType();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  _s10Foundation4UUIDVACSHAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    int64_t v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    uint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    uint64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      _s10Foundation4UUIDVACSHAAWlTm_4(&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    *unint64_t v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()(MEMORY[0x1E4FBCEA8], &demangling cache variable for type metadata for _SetStorage<UTType>);
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    specialized _NativeSet._delete(at:)(v12, MEMORY[0x1E4FBCEA8], (unint64_t *)&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBCEB8]);
    *unint64_t v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(v3 + 48);
        uint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t v12 = static Hasher._hash(seed:_:)() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            uint64_t v15 = (void *)(v10 + 8 * v2);
            if (v2 != v6 || (int64_t v2 = v6, v15 >= v11 + 1))
            {
              *uint64_t v15 = *v11;
              int64_t v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    id result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFSUB__(v16, 1);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized _NativeSet._delete(at:)(int64_t a1)
{
  uint64_t v28 = type metadata accessor for Participant();
  uint64_t v3 = *(void *)(v28 - 8);
  uint64_t result = MEMORY[0x1F4188790](v28);
  unint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  uint64_t v8 = *v1 + 56;
  uint64_t v9 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    int64_t v26 = v1;
    uint64_t v11 = ~v9;
    swift_retain();
    uint64_t v12 = _HashTable.previousHole(before:)();
    uint64_t v27 = v8;
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v13 = (v12 + 1) & v11;
      uint64_t v14 = *(void *)(v3 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        outlined init with copy of PresenceSessionInfo.Participant(*(void *)(v7 + 48) + v14 * v10, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Participant);
        Hasher.init(_seed:)();
        type metadata accessor for UUID();
        _s10Foundation4UUIDVACSHAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v17 = v11;
        dispatch thunk of Hashable.hash(into:)();
        uint64_t v18 = v28;
        String.hash(into:)();
        Hasher._combine(_:)(*(void *)&v6[*(int *)(v18 + 24)]);
        Swift::Int v19 = Hasher._finalize()();
        outlined destroy of Participant((uint64_t)v6);
        Swift::Int v20 = v19 & v17;
        uint64_t v11 = v17;
        if (a1 >= (uint64_t)v13)
        {
          if (v20 < v13)
          {
            uint64_t v14 = v15;
            goto LABEL_6;
          }
          uint64_t v14 = v15;
          if (a1 < v20) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v14 = v15;
          if (v20 < v13 && a1 < v20) {
            goto LABEL_6;
          }
        }
        int64_t v21 = v14 * a1;
        if (v14 * a1 < v16 || *(void *)(v7 + 48) + v14 * a1 >= (unint64_t)(*(void *)(v7 + 48) + v16 + v14))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v10;
          if (v21 == v16) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v27 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    *(void *)(v27 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    unint64_t v1 = v26;
  }
  else
  {
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v22 = *v1;
  uint64_t v23 = *(void *)(*v1 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v22 + 16) = v25;
    ++*(_DWORD *)(v22 + 36);
  }
  return result;
}

uint64_t specialized _NativeSet._delete(at:)(int64_t a1, uint64_t (*a2)(void), unint64_t *a3, void (*a4)(uint64_t), uint64_t a5)
{
  double v43 = a4;
  uint64_t v44 = a5;
  uint64_t v42 = a3;
  uint64_t v7 = a2(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v38 - v10;
  uint64_t v12 = *v5;
  uint64_t v13 = *v5 + 56;
  uint64_t v14 = -1 << *(unsigned char *)(*v5 + 32);
  unint64_t v15 = (a1 + 1) & ~v14;
  if (((1 << v15) & *(void *)(v13 + 8 * (v15 >> 6))) != 0)
  {
    SPPose3D v38 = v5;
    uint64_t v16 = ~v14;
    swift_retain();
    uint64_t v17 = _HashTable.previousHole(before:)();
    uint64_t v18 = v12;
    if ((*(void *)(v13 + 8 * (v15 >> 6)) & (1 << v15)) != 0)
    {
      unint64_t v40 = (v17 + 1) & v16;
      Swift::Int v20 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      uint64_t v19 = v8 + 16;
      SPPose3D v39 = v20;
      uint64_t v45 = *(void *)(v19 + 56);
      uint64_t v41 = v19;
      int64_t v21 = (void (**)(char *, uint64_t))(v19 - 8);
      do
      {
        uint64_t v22 = v13;
        int64_t v23 = v45 * v15;
        v39(v11, *(void *)(v18 + 48) + v45 * v15, v7);
        uint64_t v24 = v18;
        _s10Foundation4UUIDVACSHAAWlTm_4(v42, v43);
        uint64_t v25 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v21)(v11, v7);
        unint64_t v26 = v25 & v16;
        if (a1 >= (uint64_t)v40)
        {
          if (v26 >= v40 && a1 >= (uint64_t)v26)
          {
LABEL_16:
            uint64_t v18 = v24;
            uint64_t v29 = *(void *)(v24 + 48);
            int64_t v30 = v45 * a1;
            unint64_t v31 = v29 + v45 * a1;
            unint64_t v32 = v29 + v23 + v45;
            if (v45 * a1 < v23 || v31 >= v32)
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v15;
            }
            else
            {
              a1 = v15;
              if (v30 != v23)
              {
                swift_arrayInitWithTakeBackToFront();
                a1 = v15;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v26 >= v40 || a1 >= (uint64_t)v26)
        {
          goto LABEL_16;
        }
        uint64_t v18 = v24;
LABEL_5:
        unint64_t v15 = (v15 + 1) & v16;
        uint64_t v13 = v22;
      }
      while (((*(void *)(v22 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) != 0);
    }
    *(void *)(v13 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    uint64_t v5 = v38;
  }
  else
  {
    *(void *)(v13 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v34 = *v5;
  uint64_t v35 = *(void *)(*v5 + 16);
  BOOL v36 = __OFSUB__(v35, 1);
  uint64_t v37 = v35 - 1;
  if (v36)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v34 + 16) = v37;
    ++*(_DWORD *)(v34 + 36);
  }
  return result;
}

uint64_t outlined destroy of Participant(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Participant();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id implicit closure #1 in AVAudioSessionAssertionManager.groupSessions.didsetpartial apply()
{
  return partial apply for implicit closure #1 in AVAudioSessionAssertionManager.groupSessions.didset();
}

id implicit closure #2 in AVAudioSessionAssertionManager.groupSessions.didsetpartial apply()
{
  return partial apply for implicit closure #2 in AVAudioSessionAssertionManager.groupSessions.didset();
}

__n128 GroupSession.Sessions.init(base:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 32);
  __n128 result = *(__n128 *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  *(void *)(a2 + 32) = v2;
  return result;
}

uint64_t GroupSession.Sessions.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  *(void *)a1 = *(void *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v4;
  id v5 = v2;
  swift_unknownObjectRetain();

  return swift_retain();
}

uint64_t GroupSession.Sessions.Iterator.init(baseIterator:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t GroupSession.Sessions.Iterator.baseIterator.getter()
{
  return swift_retain();
}

uint64_t GroupSession.Sessions.Iterator.baseIterator.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*GroupSession.Sessions.Iterator.baseIterator.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in GroupSession<A>.Sessions()
{
  return swift_getWitnessTable();
}

void protocol witness for AsyncSequence.makeAsyncIterator() in conformance GroupSession<A>.Sessions(uint64_t *a1@<X8>)
{
  GroupSession.Sessions.makeAsyncIterator()(a1);
  id v2 = *v1;
  swift_release();
  swift_unknownObjectRelease();
}

id LinkManager.__allocating_init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  unint64_t v15 = (char *)objc_allocWithZone(v7);
  swift_getObjectType();
  return specialized LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(a1, a2, a3, a4, a5, a6, a7, v15);
}

void LinkManager.sendData(_:to:reliability:completion:)(uint64_t a1, uint64_t a2, uint64_t *a3, char *a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v75 = a1;
  uint64_t v12 = type metadata accessor for Participant();
  uint64_t v80 = *(void *)(v12 - 8);
  uint64_t v81 = v12;
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v79 = (uint64_t)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v78 = (uint64_t)&v70 - v15;
  uint64_t v16 = *a3;
  char v17 = *a4;
  if (TUSimulatedModeEnabled())
  {
    ((void (*)(void))a5)(0);
    return;
  }
  if (v16)
  {
    uint64_t v77 = v16;
    if ((v17 & 1) == 0)
    {
      uint64_t v72 = a2;
      uint64_t v73 = v6;
      uint64_t v74 = a5;
      uint64_t v42 = *(void *)(v16 + 16);
      unint64_t v43 = MEMORY[0x1E4FBC860];
      if (v42)
      {
        uint64_t v71 = a6;
        unint64_t v83 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray.reserveCapacity(_:)();
        int64_t v44 = specialized Set.startIndex.getter(v16);
        int v46 = v45;
        int v48 = v47 & 1;
        uint64_t v76 = v16 + 56;
        uint64_t v49 = v81;
        while ((v44 & 0x8000000000000000) == 0 && v44 < 1 << *(unsigned char *)(v16 + 32))
        {
          if (((*(void *)(v76 + (((unint64_t)v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v44) & 1) == 0) {
            goto LABEL_38;
          }
          if (*(_DWORD *)(v16 + 36) != v46) {
            goto LABEL_39;
          }
          uint64_t v50 = *(void *)(v16 + 48) + *(void *)(v80 + 72) * v44;
          uint64_t v51 = v78;
          int v82 = v48;
          _s15GroupActivities11ParticipantVWOcTm_1(v50, v78, (uint64_t (*)(void))type metadata accessor for Participant);
          uint64_t v52 = v51;
          uint64_t v53 = v79;
          _s15GroupActivities11ParticipantVWObTm_0(v52, v79, (uint64_t (*)(void))type metadata accessor for Participant);
          unint64_t v54 = (uint64_t *)(v53 + *(int *)(v49 + 20));
          uint64_t v55 = *v54;
          uint64_t v56 = v54[1];
          id v57 = objc_allocWithZone(MEMORY[0x1E4F5B148]);
          swift_bridgeObjectRetain();
          Class isa = UUID._bridgeToObjectiveC()().super.isa;
          uint64_t v59 = (void *)MEMORY[0x1A624DFA0](v55, v56);
          swift_bridgeObjectRelease();
          a5 = (void (*)(void))objc_msgSend(v57, sel_initWithUUID_accountIdentifier_, isa, v59);

          objc_msgSend(a5, sel__setParticipantIdentifier_, *(void *)(v53 + *(int *)(v49 + 24)));
          _s15GroupActivities11ParticipantVWOhTm_0(v53, (uint64_t (*)(void))type metadata accessor for Participant);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          uint64_t v16 = v77;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          int64_t v60 = specialized _NativeSet.index(after:)(v44, v46, v82 & 1, v16);
          int64_t v44 = v60;
          int v46 = v61;
          int v48 = v62 & 1;
          if (!--v42)
          {
            outlined consume of Set<Participant>.Index._Variant(v60, v61, v48);
            unint64_t v43 = v83;
            goto LABEL_28;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
LABEL_28:
      uint64_t v63 = specialized Set.init<A>(_:)(v43, &lazy cache variable for type metadata for CPParticipant, 0x1E4F5B148, (unint64_t *)&lazy protocol witness table cache variable for type CPParticipant and conformance NSObject, (void (*)(id *, uint64_t))specialized Set._Variant.insert(_:));
      swift_bridgeObjectRelease();
      LinkManager.sendDataReliably(_:to:completion:)(v75, v72, v63, v74);
LABEL_29:
      swift_bridgeObjectRelease();
      return;
    }
    if (objc_msgSend(*(id *)(v6 + OBJC_IVAR____TtC15GroupActivities11LinkManager_featureFlags), sel_unreliableMessengerEnabled))
    {
      uint64_t v72 = a2;
      uint64_t v73 = v6;
      uint64_t v74 = a5;
      uint64_t v18 = *(void *)(v16 + 16);
      unint64_t v19 = MEMORY[0x1E4FBC860];
      if (v18)
      {
        uint64_t v71 = a6;
        unint64_t v83 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray.reserveCapacity(_:)();
        int64_t v20 = specialized Set.startIndex.getter(v16);
        int v22 = v21;
        int v24 = v23 & 1;
        uint64_t v76 = v16 + 56;
        uint64_t v25 = v81;
        while ((v20 & 0x8000000000000000) == 0 && v20 < 1 << *(unsigned char *)(v16 + 32))
        {
          if (((*(void *)(v76 + (((unint64_t)v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
            goto LABEL_41;
          }
          if (*(_DWORD *)(v16 + 36) != v22) {
            goto LABEL_42;
          }
          uint64_t v26 = *(void *)(v16 + 48) + *(void *)(v80 + 72) * v20;
          uint64_t v27 = v78;
          int v82 = v24;
          _s15GroupActivities11ParticipantVWOcTm_1(v26, v78, (uint64_t (*)(void))type metadata accessor for Participant);
          uint64_t v28 = v27;
          uint64_t v29 = v79;
          _s15GroupActivities11ParticipantVWObTm_0(v28, v79, (uint64_t (*)(void))type metadata accessor for Participant);
          int64_t v30 = (uint64_t *)(v29 + *(int *)(v25 + 20));
          uint64_t v31 = *v30;
          uint64_t v32 = v30[1];
          id v33 = objc_allocWithZone(MEMORY[0x1E4F5B148]);
          swift_bridgeObjectRetain();
          Class v34 = UUID._bridgeToObjectiveC()().super.isa;
          uint64_t v35 = (void *)MEMORY[0x1A624DFA0](v31, v32);
          swift_bridgeObjectRelease();
          id v36 = objc_msgSend(v33, sel_initWithUUID_accountIdentifier_, v34, v35);

          objc_msgSend(v36, sel__setParticipantIdentifier_, *(void *)(v29 + *(int *)(v25 + 24)));
          _s15GroupActivities11ParticipantVWOhTm_0(v29, (uint64_t (*)(void))type metadata accessor for Participant);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          a5 = *(void (**)(void))(v83 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          uint64_t v16 = v77;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          int64_t v37 = specialized _NativeSet.index(after:)(v20, v22, v82 & 1, v16);
          int64_t v20 = v37;
          int v22 = v38;
          int v24 = v39 & 1;
          if (!--v18)
          {
            outlined consume of Set<Participant>.Index._Variant(v37, v38, v24);
            unint64_t v19 = v83;
            goto LABEL_14;
          }
        }
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
LABEL_14:
      uint64_t v40 = specialized Set.init<A>(_:)(v19, &lazy cache variable for type metadata for CPParticipant, 0x1E4F5B148, (unint64_t *)&lazy protocol witness table cache variable for type CPParticipant and conformance NSObject, (void (*)(id *, uint64_t))specialized Set._Variant.insert(_:));
      swift_bridgeObjectRelease();
      LinkManager.sendDataUnreliably(_:to:completion:)(v75, v72, v40, v74);
      goto LABEL_29;
    }
LABEL_30:
    if (one-time initialization token for default == -1)
    {
LABEL_31:
      uint64_t v64 = type metadata accessor for Logger();
      __swift_project_value_buffer(v64, (uint64_t)static Log.default);
      uint64_t v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v65, v66))
      {
        uint64_t v67 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v67 = 0;
        _os_log_impl(&dword_1A375F000, v65, v66, "Dropping message since unreliable messaging is disabled", v67, 2u);
        MEMORY[0x1A624F870](v67, -1, -1);
      }

      lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError();
      uint64_t v68 = (void *)swift_allocError();
      unsigned char *v69 = 1;
      a5();

      return;
    }
LABEL_43:
    swift_once();
    goto LABEL_31;
  }
  if ((v17 & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, void, void (*)(void), uint64_t))(**(void **)(v6
                                                                                            + OBJC_IVAR____TtC15GroupActivities11LinkManager_topic)
                                                                              + 608))(v75, a2, 0, a5, a6);
    return;
  }
  if ((objc_msgSend(*(id *)(v6 + OBJC_IVAR____TtC15GroupActivities11LinkManager_featureFlags), sel_unreliableMessengerEnabled) & 1) == 0)goto LABEL_30; {
  uint64_t v41 = v75;
  }

  LinkManager.sendDataUnreliably(_:to:completion:)(v41, a2, 0, a5);
}

uint64_t LinkManager.removeAttachment(id:)(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[5] = v3;
  void v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return MEMORY[0x1F4188298](LinkManager.removeAttachment(id:), 0, 0);
}

uint64_t LinkManager.removeAttachment(id:)()
{
  uint64_t v23 = v0;
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 32)) + 0xF8))();
  *(void *)(v0 + 64) = v1;
  if (v1)
  {
    id v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v2;
    *id v2 = v0;
    v2[1] = LinkManager.removeAttachment(id:);
    uint64_t v3 = *(void *)(v0 + 24);
    return AttachmentLedgerTopic.remove(id:)(v3);
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v5 = *(void *)(v0 + 24);
    uint64_t v7 = *(void *)(v0 + 48);
    uint64_t v6 = *(void *)(v0 + 56);
    uint64_t v8 = *(void *)(v0 + 40);
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.default);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v5, v8);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v14 = *(void *)(v0 + 48);
    uint64_t v13 = *(void *)(v0 + 56);
    uint64_t v15 = *(void *)(v0 + 40);
    if (v12)
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v22 = v21;
      *(_DWORD *)uint64_t v16 = 136315138;
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
      _os_log_impl(&dword_1A375F000, v10, v11, "Dropping removal request %s due to not having a topic yet.", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v21, -1, -1);
      MEMORY[0x1A624F870](v16, -1, -1);
    }
    else
    {
      (*(void (**)(void, void))(v14 + 8))(*(void *)(v0 + 56), *(void *)(v0 + 40));
    }

    lazy protocol witness table accessor for type LinkManager.Errors and conformance LinkManager.Errors();
    swift_allocError();
    *unint64_t v19 = 0;
    swift_willThrow();
    swift_task_dealloc();
    int64_t v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = LinkManager.removeAttachment(id:);
  }
  else {
    id v2 = LinkManager.removeAttachment(id:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t LinkManager.uploadAttachment(id:file:developerMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[22] = a4;
  v5[23] = v4;
  v5[20] = a2;
  v5[21] = a3;
  v5[19] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
  v5[24] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for LinkManager.Attachment(0);
  v5[25] = v6;
  v5[26] = *(void *)(v6 - 8);
  v5[27] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  v5[28] = v7;
  v5[29] = *(void *)(v7 - 8);
  v5[30] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v5[31] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for TaskPriority();
  v5[32] = v8;
  v5[33] = *(void *)(v8 - 8);
  v5[34] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for URL();
  v5[35] = v9;
  v5[36] = *(void *)(v9 - 8);
  v5[37] = swift_task_alloc();
  v5[38] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  v5[39] = v10;
  v5[40] = *(void *)(v10 - 8);
  v5[41] = swift_task_alloc();
  v5[42] = swift_task_alloc();
  v5[43] = swift_task_alloc();
  v5[44] = swift_task_alloc();
  return MEMORY[0x1F4188298](LinkManager.uploadAttachment(id:file:developerMetadata:), 0, 0);
}

uint64_t LinkManager.uploadAttachment(id:file:developerMetadata:)()
{
  char v47 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[44];
  uint64_t v3 = v0[39];
  uint64_t v4 = v0[40];
  uint64_t v45 = v0[38];
  uint64_t v6 = v0[35];
  uint64_t v5 = v0[36];
  uint64_t v7 = v0[20];
  uint64_t v8 = type metadata accessor for Logger();
  v0[45] = __swift_project_value_buffer(v8, (uint64_t)static Log.default);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[46] = v9;
  v0[47] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v9(v2, v1, v3);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[48] = v10;
  v0[49] = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v10(v45, v7, v6);
  os_log_type_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v14 = v0[44];
  uint64_t v15 = v0[39];
  uint64_t v16 = v0[40];
  uint64_t v17 = v0[38];
  uint64_t v19 = v0[35];
  uint64_t v18 = v0[36];
  if (v13)
  {
    uint64_t v39 = v0[34];
    uint64_t v41 = v0[32];
    uint64_t v42 = v0[33];
    os_log_t log = v11;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    uint64_t v46 = v44;
    *(_DWORD *)uint64_t v20 = 136315650;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    os_log_type_t type = v12;
    v0[17] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v23(v14, v15);
    *(_WORD *)(v20 + 12) = 2080;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    *(_WORD *)(v20 + 22) = 2080;
    static Task<>.currentPriority.getter();
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3(&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority, MEMORY[0x1E4FBCFE8]);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v28 = v27;
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v39, v41);
    v0[15] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, log, type, "Received upload request: %s, file: %s. Waiting for topic with priority: %s", (uint8_t *)v20, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v44, -1, -1);
    MEMORY[0x1A624F870](v20, -1, -1);
  }
  else
  {
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v23(v0[44], v0[39]);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  }
  v0[50] = v23;
  uint64_t v29 = v0[31];
  int64_t v30 = (void *)v0[23];
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[33] + 56))(v29, 1, 1, v0[32]);
  uint64_t v31 = (void *)swift_allocObject();
  void v31[2] = 0;
  v31[3] = 0;
  v31[4] = v30;
  id v32 = v30;
  uint64_t v33 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC15GroupActivities21AttachmentLedgerTopicC_Tgm5(v29, (uint64_t)&async function pointer to partial apply for closure #1 in LinkManager.fetchAttachmentLedgerTopic(), (uint64_t)v31);
  v0[51] = v33;
  Class v34 = (void *)swift_task_alloc();
  v0[52] = v34;
  uint64_t v35 = type metadata accessor for AttachmentLedgerTopic(0);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v0[53] = v36;
  *Class v34 = v0;
  v34[1] = LinkManager.uploadAttachment(id:file:developerMetadata:);
  uint64_t v37 = MEMORY[0x1E4FBC0F0];
  return MEMORY[0x1F4187D90](v0 + 12, v33, v35, v36, v37);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 432) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = LinkManager.uploadAttachment(id:file:developerMetadata:);
  }
  else {
    uint64_t v2 = LinkManager.uploadAttachment(id:file:developerMetadata:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t (*v25)(void *);
  void (*v26)(void *, void);
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;

  unint64_t v43 = v0;
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[46];
  uint64_t v2 = v0[43];
  uint64_t v3 = v0[39];
  uint64_t v4 = v0[19];
  uint64_t v36 = v0[12];
  v0[55] = v36;
  v1(v2, v4, v3);
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v40 = (void (*)(uint64_t, uint64_t))v0[50];
    uint64_t v7 = v0[43];
    uint64_t v8 = v0[39];
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v42 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    os_log_type_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v40(v7, v8);
    _os_log_impl(&dword_1A375F000, v5, v6, "Got topic for upload request: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v10, -1, -1);
    MEMORY[0x1A624F870](v9, -1, -1);
  }
  else
  {
    ((void (*)(void, void))v0[50])(v0[43], v0[39]);
  }

  BOOL v13 = (void (*)(uint64_t, uint64_t, uint64_t))v0[48];
  uint64_t v14 = (void (*)(uint64_t, uint64_t, uint64_t))v0[46];
  uint64_t v31 = v0[42];
  uint64_t v15 = v0[39];
  uint64_t v35 = v0[37];
  uint64_t v16 = v0[35];
  Class v34 = v16;
  uint64_t v17 = v0[27];
  uint64_t v33 = v0[26];
  uint64_t v18 = (int *)v0[25];
  id v32 = v0[24];
  uint64_t v37 = (void *)v0[23];
  uint64_t v38 = v0[22];
  uint64_t v39 = v0[21];
  uint64_t v19 = v0[19];
  uint64_t v41 = v0[20];
  static Date.now.getter();
  v14(v17, v19, v15);
  Date.timeIntervalSince1970.getter();
  uint64_t v21 = v20;
  v13(v17 + v18[7], v41, v16);
  *(void *)(v17 + v18[5]) = v21;
  unint64_t v22 = v17 + v18[6];
  *(void *)unint64_t v22 = v39;
  *(void *)(v22 + 8) = v38;
  *(unsigned char *)(v22 + 16) = 1;
  *(void *)(v17 + v18[8]) = 2;
  uint64_t v23 = *(void **)((char *)v37 + OBJC_IVAR____TtC15GroupActivities11LinkManager_lock);
  v0[56] = v23;
  outlined copy of Data?(v39, v38);
  objc_msgSend(v23, sel_lock);
  v14(v31, v19, v15);
  _s15GroupActivities11ParticipantVWOcTm_1(v17, v32, type metadata accessor for LinkManager.Attachment);
  (*(void (**)(uint64_t, void, uint64_t, int *))(v33 + 56))(v32, 0, 1, v18);
  uint64_t v24 = *MEMORY[0x1E4FBC8C8] & *v37;
  unint64_t v25 = *(uint64_t (**)(void *))(v24 + 0x128);
  v0[57] = v25;
  v0[58] = (v24 + 296) & 0xFFFFFFFFFFFFLL | 0xF38D000000000000;
  uint64_t v26 = (void (*)(void *, void))v25(v0 + 6);
  specialized Dictionary.subscript.setter(v32, v31);
  v26(v0 + 6, 0);
  objc_msgSend(v23, sel_unlock);
  v13(v35, v41, v34);
  v14(v31, v19, v15);
  type metadata accessor for AssetManager();
  outlined copy of Data?(v39, v38);
  swift_retain();
  unint64_t v27 = static AssetManager.shared.getter();
  type metadata accessor for AttachmentUploadTask();
  unint64_t v28 = swift_allocObject();
  v0[59] = specialized AttachmentUploadTask.init(topic:file:developerMetadata:id:manager:)(v36, v35, v39, v38, v31, v27, v28);
  swift_release();
  uint64_t v29 = (void *)swift_task_alloc();
  v0[60] = v29;
  *uint64_t v29 = v0;
  v29[1] = LinkManager.uploadAttachment(id:file:developerMetadata:);
  return AttachmentUploadTask.start()();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 488) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = LinkManager.uploadAttachment(id:file:developerMetadata:);
  }
  else {
    uint64_t v2 = LinkManager.uploadAttachment(id:file:developerMetadata:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = v0[30];
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[29];
  uint64_t v4 = v0[27];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  _s15GroupActivities11ParticipantVWOhTm_0(v4, type metadata accessor for LinkManager.Attachment);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  void *v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  BOOL v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t (*v28)(uint64_t);
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, void);
  uint64_t (*v34)(void);
  os_log_type_t type;
  os_log_type_t typea[8];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];
  uint64_t v43;
  uint64_t v44;

  unint64_t v43 = v0;
  uint64_t v1 = *(void **)(v0 + 488);
  *(void *)(v0 + 80) = v1;
  uint64_t v2 = v1;
  if (swift_dynamicCast() && *(unsigned char *)(v0 + 496) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 232);
    uint64_t v4 = *(void *)(v0 + 240);
    uint64_t v6 = *(void *)(v0 + 216);
    uint64_t v5 = *(void *)(v0 + 224);

    lazy protocol witness table accessor for type LinkManager.Errors and conformance LinkManager.Errors();
    swift_allocError();
    *uint64_t v7 = 1;
    swift_willThrow();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
    _s15GroupActivities11ParticipantVWOhTm_0(v6, type metadata accessor for LinkManager.Attachment);
  }
  else
  {
    uint64_t v8 = *(void **)(v0 + 488);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 368);
    uint64_t v10 = *(void *)(v0 + 328);
    os_log_type_t v11 = *(void *)(v0 + 312);
    os_log_type_t v12 = *(void *)(v0 + 152);

    v9(v10, v12, v11);
    BOOL v13 = v8;
    uint64_t v14 = v8;
    uint64_t v15 = Logger.logObject.getter();
    uint64_t v16 = static os_log_type_t.error.getter();
    uint64_t v17 = os_log_type_enabled(v15, v16);
    uint64_t v18 = *(void **)(v0 + 488);
    uint64_t v41 = v0 + 16;
    if (v17)
    {
      os_log_type_t type = v16;
      uint64_t v19 = *(void *)(v0 + 320);
      uint64_t v20 = *(void *)(v0 + 328);
      uint64_t v21 = *(void *)(v0 + 312);
      unint64_t v22 = swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      v42[0] = v39;
      *(_DWORD *)unint64_t v22 = 136315394;
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
      *(_WORD *)(v22 + 12) = 2080;
      *(void *)(v0 + 112) = v18;
      unint64_t v25 = v18;
      uint64_t v26 = String.init<A>(reflecting:)();
      *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A375F000, v15, type, "Failed to upload attachment %s, error: %s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v39, -1, -1);
      MEMORY[0x1A624F870](v22, -1, -1);
    }
    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 320) + 8))(*(void *)(v0 + 328), *(void *)(v0 + 312));
    }
    uint64_t v29 = *(void **)(v0 + 448);
    unint64_t v28 = *(uint64_t (**)(uint64_t))(v0 + 456);
    int64_t v30 = *(void *)(v0 + 232);
    *(void *)os_log_type_t typea = *(void *)(v0 + 224);
    uint64_t v38 = *(void *)(v0 + 240);
    uint64_t v40 = *(void *)(v0 + 216);
    uint64_t v31 = *(void *)(v0 + 192);
    id v32 = *(void *)(v0 + 152);
    objc_msgSend(v29, sel_lock);
    uint64_t v33 = (void (*)(uint64_t, void))v28(v41);
    specialized Dictionary._Variant.removeValue(forKey:)(v32, v31);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v31, (uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
    v33(v41, 0);
    objc_msgSend(v29, sel_unlock);
    swift_willThrow();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, os_log_type_t *))(v30 + 8))(v38, *(os_log_type_t **)typea);
    _s15GroupActivities11ParticipantVWOhTm_0(v40, type metadata accessor for LinkManager.Attachment);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Class v34 = *(uint64_t (**)(void))(v0 + 8);
  return v34();
}

uint64_t LinkManager.fetchAttachment(attachmentID:)(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return MEMORY[0x1F4188298](LinkManager.fetchAttachment(attachmentID:), 0, 0);
}

uint64_t LinkManager.fetchAttachment(attachmentID:)()
{
  uint64_t v25 = v0;
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 40)) + 0xF8))();
  *(void *)(v0 + 72) = v1;
  if (v1)
  {
    uint64_t v2 = v1;
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v3;
    void *v3 = v0;
    v3[1] = LinkManager.fetchAttachment(attachmentID:);
    uint64_t v4 = *(void *)(v0 + 32);
    uint64_t v5 = *(void *)(v0 + 24);
    return LinkManager.fetchAttachment(attachmentID:generator:)(v5, v4, (uint64_t)&async function pointer to partial apply for closure #1 in LinkManager.fetchAttachment(attachmentID:), v2);
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v8 = *(void *)(v0 + 56);
    uint64_t v7 = *(void *)(v0 + 64);
    uint64_t v9 = *(void *)(v0 + 48);
    uint64_t v10 = *(void *)(v0 + 32);
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Log.default);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v10, v9);
    os_log_type_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v16 = *(void *)(v0 + 56);
    uint64_t v15 = *(void *)(v0 + 64);
    uint64_t v17 = *(void *)(v0 + 48);
    if (v14)
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v24 = v19;
      *(_DWORD *)uint64_t v18 = 136315138;
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
      _os_log_impl(&dword_1A375F000, v12, v13, "Dropping downloadRequest %s due to not having a topic yet.", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v19, -1, -1);
      MEMORY[0x1A624F870](v18, -1, -1);
    }
    else
    {
      (*(void (**)(void, void))(v16 + 8))(*(void *)(v0 + 64), *(void *)(v0 + 48));
    }

    lazy protocol witness table accessor for type LinkManager.Errors and conformance LinkManager.Errors();
    swift_allocError();
    *unint64_t v22 = 0;
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(__n128);
  __n128 v2;
  uint64_t v4;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(__n128))(v0 + 8);
  v2.n128_u64[0] = *(void *)(v0 + 96);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release_n();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t LinkManager.fetchAttachment(attachmentID:)(double a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 88) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = LinkManager.fetchAttachment(attachmentID:);
  }
  else
  {
    swift_release();
    *(double *)(v4 + 96) = a1;
    uint64_t v5 = LinkManager.fetchAttachment(attachmentID:);
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

uint64_t LinkManager.fetchAttachmentMetadata(attachmentID:)(uint64_t a1)
{
  void v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Attachment.Metadata();
  v2[13] = v4;
  v2[14] = *(void *)(v4 - 8);
  v2[15] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for LinkManager.Attachment(0);
  v2[16] = v5;
  v2[17] = *(void *)(v5 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return MEMORY[0x1F4188298](LinkManager.fetchAttachmentMetadata(attachmentID:), 0, 0);
}

uint64_t LinkManager.fetchAttachmentMetadata(attachmentID:)()
{
  uint64_t v55 = v0;
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 56)) + 0xF8))();
  *(void *)(v0 + 176) = v1;
  if (!v1)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v6 = *(void *)(v0 + 72);
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 64);
    uint64_t v9 = *(void *)(v0 + 48);
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.default);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v9, v8);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v14 = *(void *)(v0 + 80);
    uint64_t v16 = *(void *)(v0 + 64);
    if (v13)
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      v54[0] = v18;
      *(_DWORD *)uint64_t v17 = 136315138;
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      _os_log_impl(&dword_1A375F000, v11, v12, "Dropping downloadRequest %s due to not having a topic yet.", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v18, -1, -1);
      MEMORY[0x1A624F870](v17, -1, -1);
    }
    else
    {
      (*(void (**)(void, void))(v15 + 8))(*(void *)(v0 + 80), *(void *)(v0 + 64));
    }

    lazy protocol witness table accessor for type LinkManager.Errors and conformance LinkManager.Errors();
    swift_allocError();
    *uint64_t v40 = 0;
    swift_willThrow();
    goto LABEL_16;
  }
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v3 = *(void **)(v0 + 56);
  uint64_t v5 = *(void **)((char *)v3 + OBJC_IVAR____TtC15GroupActivities11LinkManager_lock);
  objc_msgSend(v5, sel_lock);
  closure #1 in LinkManager.fetchAttachmentMetadata(attachmentID:)(v4, v3, v2);
  uint64_t v21 = *(void *)(v0 + 168);
  uint64_t v22 = *(void *)(v0 + 128);
  objc_msgSend(v5, sel_unlock);
  uint64_t v23 = v21 + *(int *)(v22 + 24);
  uint64_t v24 = *(void *)v23;
  *(void *)(v0 + 184) = *(void *)v23;
  unint64_t v25 = *(void *)(v23 + 8);
  *(void *)(v0 + 192) = v25;
  if (*(unsigned char *)(v23 + 16))
  {
    if (v25 >> 60 == 15)
    {
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v27 = *(void *)(v0 + 160);
      uint64_t v26 = *(void *)(v0 + 168);
      uint64_t v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Log.default);
      _s15GroupActivities11ParticipantVWOcTm_1(v26, v27, type metadata accessor for LinkManager.Attachment);
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      BOOL v31 = os_log_type_enabled(v29, v30);
      uint64_t v32 = *(void *)(v0 + 160);
      if (v31)
      {
        uint64_t v34 = *(void *)(v0 + 128);
        uint64_t v33 = *(void *)(v0 + 136);
        uint64_t v35 = *(void *)(v0 + 88);
        uint64_t v36 = *(void *)(v0 + 96);
        uint64_t v37 = (uint8_t *)swift_slowAlloc();
        uint64_t v53 = swift_slowAlloc();
        v54[0] = v53;
        *(_DWORD *)uint64_t v37 = 136315138;
        _s15GroupActivities11ParticipantVWOcTm_1(v32, v36, type metadata accessor for LinkManager.Attachment);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v36, 0, 1, v34);
        outlined init with copy of LinkManager.Attachment?(v36, v35);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v35, 1, v34) == 1)
        {
          unint64_t v38 = 0xE300000000000000;
          uint64_t v39 = 7104878;
        }
        else
        {
          uint64_t v48 = *(void *)(v0 + 144);
          uint64_t v47 = *(void *)(v0 + 152);
          _s15GroupActivities11ParticipantVWObTm_0(*(void *)(v0 + 88), v47, type metadata accessor for LinkManager.Attachment);
          _s15GroupActivities11ParticipantVWOcTm_1(v47, v48, type metadata accessor for LinkManager.Attachment);
          uint64_t v39 = String.init<A>(reflecting:)();
          unint64_t v38 = v49;
          _s15GroupActivities11ParticipantVWOhTm_0(v47, type metadata accessor for LinkManager.Attachment);
        }
        uint64_t v50 = *(void *)(v0 + 160);
        outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(void *)(v0 + 96), (uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
        *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v38, v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s15GroupActivities11ParticipantVWOhTm_0(v50, type metadata accessor for LinkManager.Attachment);
        _os_log_impl(&dword_1A375F000, v29, v30, "Requested to fetch metadata but local attachment %s doesn't have any", v37, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v53, -1, -1);
        MEMORY[0x1A624F870](v37, -1, -1);
      }
      else
      {
        _s15GroupActivities11ParticipantVWOhTm_0(*(void *)(v0 + 160), type metadata accessor for LinkManager.Attachment);
      }

      uint64_t v51 = *(void *)(v0 + 168);
      lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError();
      swift_allocError();
      unsigned char *v52 = 3;
      swift_willThrow();
      swift_release();
      _s15GroupActivities11ParticipantVWOhTm_0(v51, type metadata accessor for LinkManager.Attachment);
LABEL_16:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v41 = *(uint64_t (**)(void))(v0 + 8);
      return v41();
    }
    uint64_t v45 = *(void *)(v0 + 168);
    outlined copy of Data?(v24, v25);
    outlined copy of Data._Representation(v24, v25);
    _s15GroupActivities11ParticipantVWOhTm_0(v45, type metadata accessor for LinkManager.Attachment);
    swift_release();
    outlined consume of LinkManager.Attachment.Source(v24, v25, 1);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v46 = *(uint64_t (**)(uint64_t, unint64_t))(v0 + 8);
    return v46(v24, v25);
  }
  else
  {
    swift_retain();
    unint64_t v43 = (void *)swift_task_alloc();
    *(void *)(v0 + 200) = v43;
    *unint64_t v43 = v0;
    v43[1] = LinkManager.fetchAttachmentMetadata(attachmentID:);
    uint64_t v44 = *(void *)(v0 + 120);
    return MEMORY[0x1F41131E0](v44);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = LinkManager.fetchAttachmentMetadata(attachmentID:);
  }
  else {
    uint64_t v2 = LinkManager.fetchAttachmentMetadata(attachmentID:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, unint64_t);
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned char *v24;
  uint64_t (*v25)(void);
  uint64_t v26;
  void *v27;
  uint64_t v28;

  uint64_t v27 = v0;
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[13];
  uint64_t v4 = Attachment.Metadata.developerMetadata.getter();
  uint64_t v6 = v5;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v6 >> 60 == 15)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.default);
    swift_retain_n();
    uint64_t v8 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.error.getter();
    uint64_t v10 = os_log_type_enabled(v8, v9);
    os_log_type_t v12 = v0[23];
    uint64_t v11 = v0[24];
    if (v10)
    {
      BOOL v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v26 = v14;
      *(_DWORD *)BOOL v13 = 136315138;
      v0[4] = v12;
      type metadata accessor for Attachment();
      swift_retain();
      uint64_t v15 = String.init<A>(reflecting:)();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of LinkManager.Attachment.Source(v12, v11, 0);
      outlined consume of LinkManager.Attachment.Source(v12, v11, 0);
      _os_log_impl(&dword_1A375F000, v8, v9, "Requested to fetch metadata but attachment %s doesn't have any", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v14, -1, -1);
      MEMORY[0x1A624F870](v13, -1, -1);
    }
    else
    {
      outlined consume of LinkManager.Attachment.Source(v0[23], v0[24], 0);
      outlined consume of LinkManager.Attachment.Source(v12, v11, 0);
    }

    uint64_t v22 = v0[23];
    uint64_t v21 = v0[24];
    uint64_t v23 = v0[21];
    lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError();
    swift_allocError();
    void *v24 = 3;
    swift_willThrow();
    swift_release();
    outlined consume of LinkManager.Attachment.Source(v22, v21, 0);
    _s15GroupActivities11ParticipantVWOhTm_0(v23, type metadata accessor for LinkManager.Attachment);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v25 = (uint64_t (*)(void))v0[1];
    return v25();
  }
  else
  {
    uint64_t v18 = v0[23];
    uint64_t v17 = v0[24];
    _s15GroupActivities11ParticipantVWOhTm_0(v0[21], type metadata accessor for LinkManager.Attachment);
    outlined consume of LinkManager.Attachment.Source(v18, v17, 0);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
    return v19(v4, v6);
  }
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[23];
  uint64_t v2 = v0[24];
  uint64_t v3 = v0[21];
  swift_release();
  outlined consume of LinkManager.Attachment.Source(v1, v2, 0);
  _s15GroupActivities11ParticipantVWOhTm_0(v3, type metadata accessor for LinkManager.Attachment);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC15GroupActivities21AttachmentLedgerTopicC_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  type metadata accessor for AttachmentLedgerTopic(0);
  return swift_task_create();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC15GroupActivities35PluginAttachmentLedgerTopicProvider_p_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAttachmentLedgerTopicProvider);
  return swift_task_create();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for LinkManager.Attachment(0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, (uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
  }
  else
  {
    _s15GroupActivities11ParticipantVWObTm_0(a1, (uint64_t)v11, type metadata accessor for LinkManager.Attachment);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];

  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v8;
    swift_bridgeObjectRelease();
    uint64_t v5 = type metadata accessor for CodingUserInfoKey();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, &demangling cache variable for type metadata for Any?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, v9);
    uint64_t v7 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a2, v7);
    return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v9, &demangling cache variable for type metadata for Any?);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;

  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, &demangling cache variable for type metadata for AsyncStream<Int>.Continuation?);
    uint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v14)
    {
      uint64_t v15 = v13;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v17 = *v3;
      uint64_t v21 = *v3;
      uint64_t *v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v17 = v21;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v8, *(void *)(v17 + 56) + *(void *)(v10 + 72) * v15, v9);
      specialized _NativeDictionary._delete(at:)(v15, v17);
      uint64_t *v3 = v17;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    }
    return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for AsyncStream<Int>.Continuation?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    uint64_t v18 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v12, a2, v18);
    uint64_t *v3 = v21;
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized Dictionary.subscript.setter(void *a1, uint64_t a2)
{
  if (*a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = a1[1] == 1;
  }
  if (v4)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)a1, &demangling cache variable for type metadata for GroupSessionTable.Storage?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v10);
    uint64_t v8 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a2, v8);
    return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v10, &demangling cache variable for type metadata for GroupSessionTable.Storage?);
  }
  else
  {
    outlined init with take of GroupSessionTable.Storage((uint64_t)a1, (uint64_t)v10);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v10, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v9;
    swift_bridgeObjectRelease();
    uint64_t v6 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a2, v6);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, char a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, &demangling cache variable for type metadata for TopicManager.ConversationClient.Service?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v7);
    return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v7, &demangling cache variable for type metadata for TopicManager.ConversationClient.Service?);
  }
  else
  {
    outlined init with take of TopicManager.ConversationClient.Service(a1, (uint64_t)v7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v7, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v6;
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of TypedPayloadDecoding((long long *)a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v9, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1, &demangling cache variable for type metadata for SpatialTemplateRole?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (void (*)(unint64_t, uint64_t))outlined init with take of TypedPayloadDecoding, (void (*)(unint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy(), (uint64_t)v9);
    swift_bridgeObjectRelease();
    return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v9, &demangling cache variable for type metadata for SpatialTemplateRole?);
  }
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@out ())(uint64_t (*a1)(void))
{
  return a1();
}

void LinkManager.attachmentLedgerTopic.willset(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<CurrentValueSubject<[Attachment], Never>, [LinkManager.Attachment]>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  BOOL v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Log.default);
  swift_retain_n();
  uint64_t v8 = v1;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v20 = v4;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    v23[0] = v12;
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v13 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v8) + 0xF8))();
    uint64_t v21 = v3;
    if (v13)
    {
      uint64_t v22 = v13;
      type metadata accessor for AttachmentLedgerTopic(0);
      uint64_t v14 = String.init<A>(reflecting:)();
      unint64_t v16 = v15;
    }
    else
    {
      unint64_t v16 = 0xE300000000000000;
      uint64_t v14 = 7104878;
    }
    uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v11 + 12) = 2080;
    if (a1)
    {
      uint64_t v22 = a1;
      type metadata accessor for AttachmentLedgerTopic(0);
      swift_retain();
      uint64_t v17 = String.init<A>(reflecting:)();
      unint64_t v19 = v18;
    }
    else
    {
      unint64_t v19 = 0xE300000000000000;
      uint64_t v17 = 7104878;
    }
    uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A375F000, v9, v10, "Updating AttachmentLedgerTopic from %s to: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v12, -1, -1);
    MEMORY[0x1A624F870](v11, -1, -1);

    uint64_t v4 = v20;
    uint64_t v3 = v21;
    if (a1) {
      goto LABEL_13;
    }
  }
  else
  {

    swift_release_n();
    if (a1)
    {
LABEL_13:
      v23[0] = (*(uint64_t (**)(void))(*(void *)a1 + 392))();
      swift_allocObject();
      swift_unknownObjectWeakInit();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<[Attachment], Never>);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LinkManager.Attachment]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<[Attachment], Never> and conformance CurrentValueSubject<A, B>, (uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<[Attachment], Never>);
      Publisher.compactMap<A>(_:)();
      swift_release();
      swift_release();
      swift_allocObject();
      swift_unknownObjectWeakInit();
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type Publishers.CompactMap<CurrentValueSubject<[Attachment], Never>, [LinkManager.Attachment]> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<CurrentValueSubject<[Attachment], Never>, [LinkManager.Attachment]>);
      Publisher<>.sink(receiveValue:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      swift_beginAccess();
      AnyCancellable.store(in:)();
      swift_endAccess();
      swift_release();
    }
  }
}

void closure #1 in LinkManager.attachmentLedgerTopic.willset(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *a1;
  uint64_t v5 = a2 + 16;
  swift_beginAccess();
  BOOL v6 = (void *)MEMORY[0x1A624F980](v5);
  if (v6)
  {
    uint64_t v7 = v6;
    unint64_t v8 = specialized Sequence.compactMap<A>(_:)(v4, v7);
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    os_log_type_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v19 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      uint64_t v14 = type metadata accessor for Attachment();
      uint64_t v15 = swift_bridgeObjectRetain();
      uint64_t v16 = MEMORY[0x1A624E120](v15, v14);
      unint64_t v18 = v17;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1A375F000, v10, v11, "Learned about new attachments: %s but lost reference to self. Can't indicate an update to clients", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v13, -1, -1);
      MEMORY[0x1A624F870](v12, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    unint64_t v8 = MEMORY[0x1E4FBC860];
  }
  *a3 = v8;
}

uint64_t closure #1 in closure #1 in LinkManager.attachmentLedgerTopic.willset@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v75 = a3;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v70 = *(void *)(v5 - 8);
  uint64_t v71 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v68 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v65 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for URL();
  uint64_t v67 = *(void *)(v69 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v69);
  uint64_t v64 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  os_log_type_t v66 = (char *)&v62 - v11;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v78 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v73 = (uint64_t)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v76 = (uint64_t *)((char *)&v62 - v18);
  uint64_t v79 = type metadata accessor for LinkManager.Attachment(0);
  uint64_t v77 = *(void *)(v79 - 8);
  uint64_t v81 = v77;
  uint64_t v19 = MEMORY[0x1F4188790](v79);
  uint64_t v63 = (uint64_t)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v62 - v22;
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  uint64_t v72 = (uint64_t)&v62 - v25;
  uint64_t v26 = *a1;
  uint64_t v27 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x130);
  uint64_t v74 = a2;
  uint64_t v80 = v27(v24);
  uint64_t v28 = *(void *)(v80 + 16);
  if (v28)
  {
    uint64_t v29 = v80 + ((*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80));
    os_log_type_t v30 = (void (**)(char *, uint64_t))(v78 + 8);
    uint64_t v31 = *(void *)(v81 + 72);
    while (1)
    {
      _s15GroupActivities11ParticipantVWOcTm_1(v29, (uint64_t)v23, type metadata accessor for LinkManager.Attachment);
      Attachment.id.getter();
      char v32 = static UUID.== infix(_:_:)();
      (*v30)(v14, v12);
      if (v32) {
        break;
      }
      _s15GroupActivities11ParticipantVWOhTm_0((uint64_t)v23, type metadata accessor for LinkManager.Attachment);
      v29 += v31;
      if (!--v28) {
        goto LABEL_5;
      }
    }
    uint64_t v35 = (void (*)(void, void))v76;
    _s15GroupActivities11ParticipantVWObTm_0((uint64_t)v23, (uint64_t)v76, type metadata accessor for LinkManager.Attachment);
    uint64_t v33 = v81;
    uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56);
    uint64_t v36 = v35;
    uint64_t v37 = 0;
  }
  else
  {
LABEL_5:
    uint64_t v33 = v81;
    uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56);
    uint64_t v35 = (void (*)(void, void))v76;
    uint64_t v36 = (void (*)(void, void))v76;
    uint64_t v37 = 1;
  }
  uint64_t v38 = v79;
  v34((uint64_t)v36, v37, 1, v79);
  swift_bridgeObjectRelease();
  uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  uint64_t v39 = v33 + 48;
  uint64_t v40 = v41;
  if (v41((uint64_t)v35, 1, v38) == 1)
  {
    uint64_t v80 = (uint64_t)v34;
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
    uint64_t v81 = v39;
    Attachment.id.getter();
    uint64_t v42 = v38;
    unint64_t v43 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & *v74)
                                                                                   + 0x128))(v82);
    uint64_t v44 = v73;
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v14, v73);
    uint64_t v76 = *(uint64_t **)(v78 + 8);
    ((void (*)(char *, uint64_t))v76)(v14, v12);
    v43(v82, 0);
    int v45 = v40(v44, 1, v42);
    uint64_t v46 = v75;
    if (v45 == 1)
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v44, (uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
      UUID.init()();
      uint64_t v81 = UUID.uuidString.getter();
      ((void (*)(char *, uint64_t))v76)(v14, v12);
      uint64_t v47 = (uint64_t)v65;
      static URL.temporaryDirectory.getter();
      uint64_t v48 = v67;
      uint64_t v49 = v69;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v67 + 56))(v47, 0, 1, v69);
      uint64_t v50 = v64;
      URL.init(fileURLWithPath:relativeTo:)();
      swift_bridgeObjectRelease();
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(v47, &demangling cache variable for type metadata for URL?);
      uint64_t v51 = v66;
      URL.absoluteURL.getter();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v49);
      uint64_t v52 = v68;
      static Date.now.getter();
      Attachment.id.getter();
      Date.timeIntervalSince1970.getter();
      uint64_t v54 = v53;
      (*(void (**)(char *, uint64_t))(v70 + 8))(v52, v71);
      (*(void (**)(uint64_t, char *, uint64_t))(v78 + 32))(v46, v14, v12);
      uint64_t v55 = (int *)v79;
      *(void *)(v46 + *(int *)(v79 + 20)) = v54;
      uint64_t v56 = v46 + v55[6];
      *(void *)uint64_t v56 = v26;
      *(void *)(v56 + 8) = 0;
      *(unsigned char *)(v56 + 16) = 0;
      (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v46 + v55[7], v51, v49);
      *(void *)(v46 + v55[8]) = 0;
      ((void (*)(uint64_t, void, uint64_t, int *))v80)(v46, 0, 1, v55);
      return swift_retain();
    }
    else
    {
      uint64_t v61 = v63;
      _s15GroupActivities11ParticipantVWObTm_0(v44, v63, type metadata accessor for LinkManager.Attachment);
      _s15GroupActivities11ParticipantVWObTm_0(v61, v46, type metadata accessor for LinkManager.Attachment);
      return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v80)(v46, 0, 1, v79);
    }
  }
  else
  {
    uint64_t v58 = v72;
    _s15GroupActivities11ParticipantVWObTm_0((uint64_t)v35, v72, type metadata accessor for LinkManager.Attachment);
    uint64_t v59 = v58;
    uint64_t v60 = v75;
    _s15GroupActivities11ParticipantVWObTm_0(v59, v75, type metadata accessor for LinkManager.Attachment);
    return v34(v60, 0, 1, v38);
  }
}

uint64_t LinkManager.Attachment.init(id:sentTime:source:file:state:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  uint64_t v16 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(a7, a1, v16);
  uint64_t v17 = (int *)type metadata accessor for LinkManager.Attachment(0);
  *(double *)(a7 + v17[5]) = a8;
  uint64_t v18 = a7 + v17[6];
  *(void *)uint64_t v18 = a2;
  *(void *)(v18 + 8) = a3;
  *(unsigned char *)(v18 + 16) = a4 & 1;
  uint64_t v19 = a7 + v17[7];
  uint64_t v20 = type metadata accessor for URL();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v19, a5, v20);
  *(void *)(a7 + v17[8]) = a6;
  return result;
}

void closure #2 in LinkManager.attachmentLedgerTopic.willset(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x1A624F980](v2);
  if (v3)
  {
    unint64_t v4 = (void *)v3;
    id v5 = *(id *)(v3 + OBJC_IVAR____TtC15GroupActivities11LinkManager_lock);
    objc_msgSend(v5, sel_lock);
    uint64_t v6 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x138);
    uint64_t v7 = swift_bridgeObjectRetain();
    v6(v7);
    objc_msgSend(v5, sel_unlock);
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Log.default);
    swift_bridgeObjectRetain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v18 = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v13 = type metadata accessor for LinkManager.Attachment(0);
      uint64_t v14 = swift_bridgeObjectRetain();
      uint64_t v15 = MEMORY[0x1A624E120](v14, v13);
      unint64_t v17 = v16;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1A375F000, v9, v10, "Learned about new attachments: %s but lost reference to self. Can't indicate an update to clients", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v12, -1, -1);
      MEMORY[0x1A624F870](v11, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t LinkManager.attachmentLedgerTopic.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<AttachmentLedgerTopic?>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  unint64_t v4 = (char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtC15GroupActivities11LinkManager__attachmentLedgerTopic, v1);
  CurrentSubject.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v6[1];
}

uint64_t LinkManager.attachmentLedgerTopic.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<AttachmentLedgerTopic?>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  LinkManager.attachmentLedgerTopic.willset(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC15GroupActivities11LinkManager__attachmentLedgerTopic, v3);
  v8[1] = a1;
  CurrentSubject.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void (*LinkManager.attachmentLedgerTopic.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<AttachmentLedgerTopic?>);
  v3[5] = v4;
  uint64_t v5 = *(void **)(v4 - 8);
  uint64_t v6 = malloc(v5[8]);
  uint64_t v7 = OBJC_IVAR____TtC15GroupActivities11LinkManager__attachmentLedgerTopic;
  v3[6] = v6;
  v3[7] = v7;
  uint64_t v8 = (void (*)(void))v5[2];
  v3[8] = v8;
  v3[9] = (unint64_t)(v5 + 2) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v8();
  CurrentSubject.wrappedValue.getter();
  uint64_t v9 = (void (*)(void *, uint64_t))v5[1];
  v3[10] = v9;
  v3[11] = (unint64_t)(v5 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v9(v6, v4);
  void *v3 = v3[1];
  return LinkManager.attachmentLedgerTopic.modify;
}

void LinkManager.attachmentLedgerTopic.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (void (*)(void *, uint64_t))(*a1)[10];
  uint64_t v5 = (void (*)(void *, uint64_t, uint64_t))(*a1)[8];
  uint64_t v6 = (void *)(*a1)[6];
  uint64_t v7 = (*a1)[5];
  uint64_t v8 = (*a1)[4] + (*a1)[7];
  if (a2)
  {
    uint64_t v9 = swift_retain();
    LinkManager.attachmentLedgerTopic.willset(v9);
    v5(v6, v8, v7);
    v2[2] = v3;
    CurrentSubject.wrappedValue.setter();
    v4(v6, v7);
    swift_release();
  }
  else
  {
    LinkManager.attachmentLedgerTopic.willset(v3);
    v5(v6, v8, v7);
    v2[3] = v3;
    CurrentSubject.wrappedValue.setter();
    v4(v6, v7);
  }
  free(v6);

  free(v2);
}

uint64_t LinkManager.$attachmentLedgerTopic.getter()
{
  return LinkManager.$attachmentLedgerTopic.getter(&demangling cache variable for type metadata for CurrentSubject<AttachmentLedgerTopic?>, &OBJC_IVAR____TtC15GroupActivities11LinkManager__attachmentLedgerTopic);
}

uint64_t LinkManager.pendingLocalAttachments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LinkManager.pendingLocalAttachments.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC15GroupActivities11LinkManager_pendingLocalAttachments);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*LinkManager.pendingLocalAttachments.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t LinkManager.attachments.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[LinkManager.Attachment]>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtC15GroupActivities11LinkManager__attachments, v1);
  CurrentSubject.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v6[1];
}

uint64_t LinkManager.attachments.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[LinkManager.Attachment]>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC15GroupActivities11LinkManager__attachments, v3);
  v8[1] = a1;
  CurrentSubject.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void (*LinkManager.attachments.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[LinkManager.Attachment]>);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[5] = v4;
  void v2[6] = malloc(*(void *)(v4 + 64));
  (*(void (**)(void))(v5 + 16))();
  v2[7] = CurrentSubject.wrappedValue.modify();
  return AttachmentLedgerTopic.attachments.modify;
}

uint64_t LinkManager.$attachments.getter()
{
  return LinkManager.$attachmentLedgerTopic.getter(&demangling cache variable for type metadata for CurrentSubject<[LinkManager.Attachment]>, &OBJC_IVAR____TtC15GroupActivities11LinkManager__attachments);
}

uint64_t LinkManager.$attachmentLedgerTopic.getter(uint64_t *a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *a2, v4);
  uint64_t v8 = CurrentSubject.projectedValue.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t LinkManager.topic.getter()
{
  return swift_retain();
}

uint64_t LinkManager.dataCryptor.getter()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC15GroupActivities11LinkManager_topic) + 392))();
}

uint64_t LinkManager.dataCryptor.setter(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(**(void **)((char *)v1
                                                       + OBJC_IVAR____TtC15GroupActivities11LinkManager_topic)
                                         + 400);
  uint64_t v4 = swift_unknownObjectRetain();
  uint64_t result = v3(v4);
  if (*(void *)((char *)v1 + OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessenger))
  {
    if (a1)
    {
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v12 = ObjectType;
      v11[0] = a1;
      swift_unknownObjectRetain_n();
      swift_retain();
      UnreliableMessenger.refreshDataCryptorProvider(with:)();
      uint64_t v7 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
      uint64_t v8 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xF8))(v7);
      if (v8)
      {
        (*(void (**)(void *__return_ptr))(*(void *)v8 + 344))(v11);
        swift_release();
        if (v12)
        {
          outlined init with copy of AudioSessionAssertionManager((uint64_t)v11, (uint64_t)v10);
          outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v11, &demangling cache variable for type metadata for TopicCryptorProvider?);
          __swift_project_boxed_opaque_existential_1(v10, v10[3]);
          _OWORD v9[3] = ObjectType;
          v9[0] = a1;
          dispatch thunk of TopicCryptorProvider.refresh(with:)();
          swift_unknownObjectRelease();
          swift_release();
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v9);
          return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
        }
        else
        {
          swift_release();
          swift_unknownObjectRelease_n();
          return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v11, &demangling cache variable for type metadata for TopicCryptorProvider?);
        }
      }
      else
      {
        swift_release();
        return swift_unknownObjectRelease_n();
      }
    }
  }
  else
  {
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t (*LinkManager.dataCryptor.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = (*(uint64_t (**)(void))(**(void **)(v1 + OBJC_IVAR____TtC15GroupActivities11LinkManager_topic) + 392))();
  return LinkManager.dataCryptor.modify;
}

uint64_t LinkManager.dataCryptor.modify(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return LinkManager.dataCryptor.setter(*a1);
  }
  uint64_t v2 = swift_unknownObjectRetain();
  LinkManager.dataCryptor.setter(v2);

  return swift_unknownObjectRelease();
}

uint64_t LinkManager.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  return GroupSession.GroupSessionPlaybackSyncerLink.sessionUUID.getter(&OBJC_IVAR____TtC15GroupActivities11LinkManager_identifier, a1);
}

uint64_t LinkManager.groupUUID.getter@<X0>(uint64_t a1@<X8>)
{
  return GroupSession.GroupSessionPlaybackSyncerLink.sessionUUID.getter(&OBJC_IVAR____TtC15GroupActivities11LinkManager_groupUUID, a1);
}

uint64_t LinkManager.localParticipant.getter@<X0>(uint64_t a1@<X8>)
{
  return _s15GroupActivities11ParticipantVWOcTm_1(v1 + OBJC_IVAR____TtC15GroupActivities11LinkManager_localParticipant, a1, (uint64_t (*)(void))type metadata accessor for Participant);
}

id LinkManager.unreliableMessengerConfig.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessengerConfig);
}

uint64_t LinkManager.hasConnectedOnce.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC15GroupActivities11LinkManager_hasConnectedOnce);
  swift_beginAccess();
  return *v1;
}

uint64_t LinkManager.hasConnectedOnce.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC15GroupActivities11LinkManager_hasConnectedOnce);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*LinkManager.hasConnectedOnce.modify())()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t key path getter for LinkManager.receivedDataHandler : LinkManager@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1B0))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64, @in_guaranteed SendReliability) -> ();
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

uint64_t key path setter for LinkManager.receivedDataHandler : LinkManager(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Data, @in_guaranteed UInt64, @in_guaranteed SendReliability) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1B8);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t LinkManager.receivedDataHandler.getter()
{
  return LinkManager.receivedDataHandler.getter(&OBJC_IVAR____TtC15GroupActivities11LinkManager_receivedDataHandler, (void (*)(void, void))outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?);
}

uint64_t LinkManager.receivedDataHandler.setter(uint64_t a1, uint64_t a2)
{
  return LinkManager.receivedDataHandler.setter(a1, a2, &OBJC_IVAR____TtC15GroupActivities11LinkManager_receivedDataHandler, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?);
}

uint64_t (*LinkManager.receivedDataHandler.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path getter for LinkManager.onFirstConnectedHandler : LinkManager@<X0>(void **a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1C8))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    uint64_t v7 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path setter for LinkManager.onFirstConnectedHandler : LinkManager(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = _sytIegr_Ieg_TRTA_0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t (*)(), uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1D0);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t LinkManager.onFirstConnectedHandler.getter()
{
  return LinkManager.receivedDataHandler.getter(&OBJC_IVAR____TtC15GroupActivities11LinkManager_onFirstConnectedHandler, (void (*)(void, void))outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?);
}

uint64_t LinkManager.onFirstConnectedHandler.setter(uint64_t a1, uint64_t a2)
{
  return LinkManager.receivedDataHandler.setter(a1, a2, &OBJC_IVAR____TtC15GroupActivities11LinkManager_onFirstConnectedHandler, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?);
}

uint64_t (*LinkManager.onFirstConnectedHandler.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path getter for LinkManager.invalidationHandler : LinkManager@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1E0))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

uint64_t key path setter for LinkManager.invalidationHandler : LinkManager(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed [UInt64]?) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1E8);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t LinkManager.invalidationHandler.getter()
{
  return LinkManager.receivedDataHandler.getter(&OBJC_IVAR____TtC15GroupActivities11LinkManager_invalidationHandler, (void (*)(void, void))outlined copy of (@escaping @callee_guaranteed (@guaranteed Error) -> ())?);
}

uint64_t LinkManager.invalidationHandler.setter(uint64_t a1, uint64_t a2)
{
  return LinkManager.receivedDataHandler.setter(a1, a2, &OBJC_IVAR____TtC15GroupActivities11LinkManager_invalidationHandler, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed Error) -> ())?);
}

uint64_t (*LinkManager.invalidationHandler.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path getter for LinkManager.catchupNeededHandler : LinkManager@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x1F8))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@unowned UInt64) -> ();
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

uint64_t key path setter for LinkManager.catchupNeededHandler : LinkManager(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed [UInt64]?) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x200);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t LinkManager.catchupNeededHandler.getter()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC15GroupActivities11LinkManager_topic) + 368))();
}

uint64_t LinkManager.catchupNeededHandler.setter()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC15GroupActivities11LinkManager_topic) + 376))();
}

uint64_t (*LinkManager.catchupNeededHandler.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC15GroupActivities11LinkManager_topic);
  a1[2] = v2;
  *a1 = (*(uint64_t (**)(void))(*(void *)v2 + 368))();
  a1[1] = v4;
  return LinkManager.catchupNeededHandler.modify;
}

uint64_t LinkManager.catchupNeededHandler.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *a1;
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1[2] + 376);
  if ((a2 & 1) == 0) {
    return v4(*a1, v2);
  }
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*a1);
  v4(v3, v2);

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
}

uint64_t key path getter for LinkManager.requestEncryptionKeysHandler : LinkManager@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x210))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    uint64_t v7 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed [UInt64]?) -> ();
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

uint64_t key path setter for LinkManager.requestEncryptionKeysHandler : LinkManager(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed [UInt64]?) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x218);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return v7(v6, v5);
}

uint64_t LinkManager.requestEncryptionKeysHandler.getter()
{
  return LinkManager.receivedDataHandler.getter(&OBJC_IVAR____TtC15GroupActivities11LinkManager_requestEncryptionKeysHandler, (void (*)(void, void))outlined copy of (@escaping @callee_guaranteed (@guaranteed Error) -> ())?);
}

uint64_t LinkManager.receivedDataHandler.getter(void *a1, void (*a2)(void, void))
{
  uint64_t v4 = (void *)(v2 + *a1);
  swift_beginAccess();
  uint64_t v5 = *v4;
  a2(*v4, v4[1]);
  return v5;
}

uint64_t LinkManager.requestEncryptionKeysHandler.setter(uint64_t a1, uint64_t a2)
{
  return LinkManager.receivedDataHandler.setter(a1, a2, &OBJC_IVAR____TtC15GroupActivities11LinkManager_requestEncryptionKeysHandler, (uint64_t (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed Error) -> ())?);
}

uint64_t LinkManager.receivedDataHandler.setter(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = (uint64_t *)(v4 + *a3);
  swift_beginAccess();
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  *uint64_t v8 = a1;
  v8[1] = a2;
  return a4(v9, v10);
}

uint64_t (*LinkManager.requestEncryptionKeysHandler.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

id LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  swift_getObjectType();
  return specialized LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(a1, a2, a3, a4, a5, a6, a7, v7);
}

void closure #1 in LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = a5 + 16;
  swift_beginAccess();
  uint64_t v12 = MEMORY[0x1A624F980](v11);
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    uint64_t v14 = type metadata accessor for Participant();
    if (a4 && (uint64_t v14 = specialized Sequence<>.contains(_:)(*(void *)(a6 + *(int *)(v14 + 24)), a4), (v14 & 1) == 0))
    {
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Log.default);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl(&dword_1A375F000, v18, v19, "Ignoring topic record due to not being in the destination list", v20, 2u);
        MEMORY[0x1A624F870](v20, -1, -1);
      }
    }
    else
    {
      uint64_t v15 = (void (*)(uint64_t, uint64_t, uint64_t, char *))(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v13) + 0x1B0))(v14);
      if (v15)
      {
        uint64_t v16 = (uint64_t)v15;
        char v21 = 0;
        v15(a1, a2, a3, &v21);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v16);
      }
    }
  }
}

uint64_t closure #2 in LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  int v45 = a2;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: PubSubTopic.Participant));
  uint64_t v3 = MEMORY[0x1F4188790](v54);
  uint64_t v53 = (uint64_t *)((char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v52 = (uint64_t *)((char *)&v43 - v6);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v51 = (uint64_t *)((char *)&v43 - v8);
  uint64_t result = MEMORY[0x1F4188790](v7);
  uint64_t v50 = (char *)&v43 - v10;
  uint64_t v11 = *a1;
  int64_t v12 = *(void *)(*a1 + 16);
  uint64_t v13 = MEMORY[0x1E4FBC860];
  if (!v12)
  {
LABEL_25:
    *int v45 = v13;
    return result;
  }
  uint64_t v58 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
  uint64_t result = specialized Dictionary.startIndex.getter(v11);
  uint64_t v15 = result;
  uint64_t v16 = 0;
  uint64_t v17 = v11 + 64;
  char v18 = *(unsigned char *)(v11 + 32);
  uint64_t v44 = v11 + 88;
  uint64_t v48 = v11 + 64;
  uint64_t v49 = v11;
  int64_t v46 = v12;
  uint64_t v47 = v14;
  while ((v15 & 0x8000000000000000) == 0 && v15 < 1 << v18)
  {
    if ((*(void *)(v17 + 8 * ((unint64_t)v15 >> 6)) & (1 << v15)) == 0) {
      goto LABEL_27;
    }
    if (*(_DWORD *)(v11 + 36) != v14) {
      goto LABEL_28;
    }
    uint64_t v56 = 1 << v15;
    unint64_t v57 = (unint64_t)v15 >> 6;
    uint64_t v55 = v16;
    uint64_t v21 = v54;
    uint64_t v22 = v50;
    uint64_t v23 = &v50[*(int *)(v54 + 48)];
    uint64_t v24 = *(void *)(v11 + 56);
    uint64_t v25 = *(void *)(*(void *)(v11 + 48) + 8 * v15);
    uint64_t v26 = type metadata accessor for PubSubTopic.Participant();
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
    v28(v23, v24 + *(void *)(v27 + 72) * v15, v26);
    *uint64_t v22 = v25;
    uint64_t v29 = (uint64_t)v51;
    *uint64_t v51 = v25;
    v28((char *)(v29 + *(int *)(v21 + 48)), (uint64_t)v23, v26);
    os_log_type_t v30 = v52;
    outlined init with take of (key: UInt64, value: PubSubTopic.Participant)(v29, (uint64_t)v52);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v22, &demangling cache variable for type metadata for (key: UInt64, value: PubSubTopic.Participant));
    uint64_t v31 = *(int *)(v21 + 48);
    char v32 = (char *)v53;
    uint64_t v33 = (char *)v53 + v31;
    uint64_t v34 = *v30;
    *uint64_t v53 = *v30;
    v28(&v32[v31], (uint64_t)v30 + v31, v26);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v33, v26);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v30, &demangling cache variable for type metadata for (key: UInt64, value: PubSubTopic.Participant));
    uint64_t v13 = v58;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1);
      uint64_t v13 = v58;
    }
    unint64_t v36 = *(void *)(v13 + 16);
    unint64_t v35 = *(void *)(v13 + 24);
    uint64_t v11 = v49;
    if (v36 >= v35 >> 1)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
      uint64_t v13 = v58;
    }
    *(void *)(v13 + 16) = v36 + 1;
    *(void *)(v13 + 8 * v36 + 32) = v34;
    char v18 = *(unsigned char *)(v11 + 32);
    unint64_t v19 = 1 << v18;
    if (v15 >= 1 << v18) {
      goto LABEL_29;
    }
    uint64_t v17 = v48;
    unint64_t v37 = v57;
    uint64_t v38 = *(void *)(v48 + 8 * v57);
    if ((v38 & v56) == 0) {
      goto LABEL_30;
    }
    LODWORD(v14) = v47;
    if (*(_DWORD *)(v11 + 36) != v47) {
      goto LABEL_31;
    }
    unint64_t v39 = v38 & (-2 << (v15 & 0x3F));
    if (v39)
    {
      unint64_t v19 = __clz(__rbit64(v39)) | v15 & 0xFFFFFFFFFFFFFFC0;
      int64_t v20 = v46;
    }
    else
    {
      unint64_t v40 = v57 + 1;
      unint64_t v41 = (v19 + 63) >> 6;
      int64_t v20 = v46;
      if (v57 + 1 < v41)
      {
        unint64_t v42 = *(void *)(v48 + 8 * v40);
        if (!v42)
        {
          unint64_t v40 = v57 + 2;
          if (v57 + 2 >= v41) {
            goto LABEL_4;
          }
          unint64_t v42 = *(void *)(v48 + 8 * v40);
          if (!v42)
          {
            while (v41 - 3 != v37)
            {
              unint64_t v42 = *(void *)(v44 + 8 * v37++);
              if (v42)
              {
                unint64_t v40 = v37 + 2;
                goto LABEL_19;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_19:
        unint64_t v19 = __clz(__rbit64(v42)) + (v40 << 6);
      }
    }
LABEL_4:
    uint64_t v16 = v55 + 1;
    uint64_t v15 = v19;
    if (v55 + 1 == v20) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

void closure #3 in LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for PubSubTopic.State();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x1A624F980](a3 + 16);
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4F5AF50], v4);
    char v10 = static PubSubTopic.State.== infix(_:_:)();
    uint64_t v11 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if ((v10 & 1) != 0
      && (int64_t v12 = (void *)MEMORY[0x1E4FBC8C8],
          ((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v9) + 0x198))(v11) & 1) == 0)
      && (uint64_t v13 = (*(uint64_t (**)(uint64_t))((*v12 & *v9) + 0x1A0))(1),
          (uint64_t v14 = (void (*)(void))(*(uint64_t (**)(uint64_t))((*v12 & *v9) + 0x1C8))(v13)) != 0))
    {
      uint64_t v15 = (uint64_t)v14;
      v14();

      outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v15);
    }
    else
    {
    }
  }
}

id LinkManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LinkManager(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

NSObject *LinkManager.resume()()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v41 - v6;
  uint64_t v8 = *(Class *)((char *)&v0->isa + OBJC_IVAR____TtC15GroupActivities11LinkManager_lock);
  id v9 = objc_msgSend(v8, sel_lock);
  uint64_t v10 = OBJC_IVAR____TtC15GroupActivities11LinkManager_state;
  if ((*((unsigned char *)&v0->isa + OBJC_IVAR____TtC15GroupActivities11LinkManager_state) & 1) == 0)
  {
    (*(void (**)(id))(**(void **)((char *)&v0->isa + OBJC_IVAR____TtC15GroupActivities11LinkManager_topic)
                               + 592))(v9);
    *((unsigned char *)&v0->isa + v10) = 1;
    if (objc_msgSend(*(id *)((char *)&v0->isa + OBJC_IVAR____TtC15GroupActivities11LinkManager_featureFlags), sel_unreliableMessengerEnabled))
    {
      if (!*(Class *)((char *)&v0->isa + OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessenger))
      {
        if (one-time initialization token for default != -1) {
          swift_once();
        }
        uint64_t v30 = type metadata accessor for Logger();
        __swift_project_value_buffer(v30, (uint64_t)static Log.default);
        uint64_t v0 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v0, v31))
        {
          char v32 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v32 = 0;
          _os_log_impl(&dword_1A375F000, v0, v31, "No UnreliableMessenger to start", v32, 2u);
          MEMORY[0x1A624F870](v32, -1, -1);
        }

        lazy protocol witness table accessor for type LinkManager.Errors and conformance LinkManager.Errors();
        swift_allocError();
        char v12 = 3;
        goto LABEL_3;
      }
      uint64_t v13 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & (uint64_t)v0->isa) + 0x168);
      uint64_t v47 = *(uint64_t *)((char *)&v0->isa + OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessenger);
      uint64_t v14 = swift_retain();
      uint64_t v15 = v13(v14);
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & (uint64_t)v0->isa) + 0x210))();
        if (v17)
        {
          uint64_t v42 = v2;
          uint64_t v19 = v17;
          uint64_t v46 = v18;
          uint64_t v20 = UUID.uuidString.getter();
          uint64_t v43 = v21;
          uint64_t v44 = v20;
          uint64_t v45 = type metadata accessor for GroupSessionDataCryptorProvider();
          uint64_t v41 = swift_allocObject();
          swift_unknownObjectRetain();
          outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v19);
          uint64_t v43 = v19;
          uint64_t v44 = v16;
          uint64_t v22 = GroupSessionDataCryptorProvider.init(topic:dataCryptor:refreshEncryptionKeysHandler:)();
          uint64_t v23 = static Date.now.getter();
          uint64_t v24 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & (uint64_t)v0->isa) + 0xF8))(v23);
          uint64_t v25 = MEMORY[0x1E4F5B108];
          if (v24)
          {
            uint64_t v49 = v45;
            uint64_t v50 = MEMORY[0x1E4F5B108];
            v48[0] = v22;
            uint64_t v26 = *(void (**)(void *, void))(*(void *)v24 + 432);
            swift_retain();
            v26(v48, MEMORY[0x1E4FBC860]);
            uint64_t v25 = MEMORY[0x1E4F5B108];
            swift_release();
            outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v48, &demangling cache variable for type metadata for TopicCryptorProvider?);
          }
          static Date.now.getter();
          Date.timeIntervalSince1970.getter();
          Date.timeIntervalSince1970.getter();
          uint64_t v49 = v45;
          uint64_t v50 = v25;
          v48[0] = v22;
          swift_retain();
          UnreliableMessenger.start(dataCryptorProvider:)();
          swift_release();
          swift_release();
          outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v43);
          swift_unknownObjectRelease();
          uint64_t v27 = *(void (**)(char *, uint64_t))(v42 + 8);
          v27(v5, v1);
          v27(v7, v1);
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
          goto LABEL_12;
        }
        if (one-time initialization token for default != -1) {
          swift_once();
        }
        uint64_t v37 = type metadata accessor for Logger();
        __swift_project_value_buffer(v37, (uint64_t)static Log.default);
        uint64_t v0 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v0, v38))
        {
          unint64_t v39 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v39 = 0;
          _os_log_impl(&dword_1A375F000, v0, v38, "Missing requestEncryptionKeysHandler for UnreliableMessenger", v39, 2u);
          MEMORY[0x1A624F870](v39, -1, -1);
        }

        lazy protocol witness table accessor for type LinkManager.Errors and conformance LinkManager.Errors();
        swift_allocError();
        *unint64_t v40 = 5;
        swift_willThrow();
        swift_unknownObjectRelease();
      }
      else
      {
        if (one-time initialization token for default != -1) {
          swift_once();
        }
        uint64_t v33 = type metadata accessor for Logger();
        __swift_project_value_buffer(v33, (uint64_t)static Log.default);
        uint64_t v0 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v0, v34))
        {
          unint64_t v35 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v35 = 0;
          _os_log_impl(&dword_1A375F000, v0, v34, "Missing dataCryptor, unable to start UnreliableMessenger", v35, 2u);
          MEMORY[0x1A624F870](v35, -1, -1);
        }

        lazy protocol witness table accessor for type LinkManager.Errors and conformance LinkManager.Errors();
        swift_allocError();
        *unint64_t v36 = 4;
        swift_willThrow();
      }
      swift_release();
      goto LABEL_4;
    }
LABEL_12:
    id v28 = objc_allocWithZone((Class)type metadata accessor for AttachmentDataReport());
    uint64_t v0 = AttachmentDataReport.init(isSubscribe:responseTime:)();
    objc_msgSend(v8, sel_unlock);
    return v0;
  }
  lazy protocol witness table accessor for type LinkManager.Errors and conformance LinkManager.Errors();
  swift_allocError();
  char v12 = 2;
LABEL_3:
  *uint64_t v11 = v12;
  swift_willThrow();
LABEL_4:
  objc_msgSend(v8, sel_unlock);
  return v0;
}

uint64_t LinkManager.close()()
{
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v21 - v9;
  uint64_t v11 = *(void **)((char *)v0 + OBJC_IVAR____TtC15GroupActivities11LinkManager_lock);
  id v12 = objc_msgSend(v11, sel_lock);
  uint64_t v13 = OBJC_IVAR____TtC15GroupActivities11LinkManager_state;
  if (*((unsigned char *)v3 + OBJC_IVAR____TtC15GroupActivities11LinkManager_state) == 1)
  {
    v21[0] = v11;
    v21[1] = v1;
    (*(void (**)(id))(**(void **)((char *)v3 + OBJC_IVAR____TtC15GroupActivities11LinkManager_topic) + 600))(v12);
    uint64_t v14 = static Date.now.getter();
    uint64_t v15 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v3) + 0xF8))(v14);
    if (v15)
    {
      (*(void (**)(uint64_t))(*(void *)v15 + 448))(v15);
      swift_release();
    }
    static Date.now.getter();
    Date.timeIntervalSince1970.getter();
    Date.timeIntervalSince1970.getter();
    id v16 = objc_allocWithZone((Class)type metadata accessor for AttachmentDataReport());
    uint64_t v2 = AttachmentDataReport.init(isSubscribe:responseTime:)();
    uint64_t v17 = OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessenger;
    if (*(void *)((char *)v3 + OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessenger))
    {
      swift_retain();
      UnreliableMessenger.close()();
      swift_release();
    }
    *(void *)((char *)v3 + v17) = 0;
    swift_release();
    uint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v10, v4);
    *((unsigned char *)v3 + v13) = 0;
    objc_msgSend(v21[0], sel_unlock);
  }
  else
  {
    lazy protocol witness table accessor for type LinkManager.Errors and conformance LinkManager.Errors();
    swift_allocError();
    unsigned char *v18 = 2;
    swift_willThrow();
    objc_msgSend(v11, sel_unlock);
  }
  return v2;
}

id LinkManager.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void LinkManager.init()()
{
}

void LinkManager.sendDataReliably(_:to:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (!a3)
  {
    uint64_t v7 = 0;
LABEL_35:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(**(void **)(v4
                                                                    + OBJC_IVAR____TtC15GroupActivities11LinkManager_topic)
                                                      + 608))(a1, a2, v7);
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  unint64_t v6 = a3 & 0xC000000000000001;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    if (__CocoaSet.count.getter())
    {
      uint64_t v7 = __CocoaSet.count.getter();
      if (!v7)
      {
        uint64_t v42 = v4;
        uint64_t v7 = MEMORY[0x1E4FBC860];
        uint64_t v8 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_27:
        swift_bridgeObjectRetain();
        if (v8 == __CocoaSet.count.getter())
        {
LABEL_28:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_34:
          a1 = v43;
          a2 = v44;
          uint64_t v4 = v42;
          goto LABEL_35;
        }
        goto LABEL_30;
      }
LABEL_8:
      uint64_t v42 = v4;
      uint64_t v51 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
      if (v6)
      {
        uint64_t v9 = __CocoaSet.startIndex.getter();
        char v11 = 1;
      }
      else
      {
        uint64_t v9 = specialized _NativeSet.startIndex.getter(a3);
        char v11 = v14 & 1;
      }
      uint64_t v48 = v9;
      uint64_t v49 = v10;
      char v50 = v11;
      if (v7 < 0)
      {
        __break(1u);
LABEL_37:
        swift_once();
LABEL_31:
        uint64_t v31 = type metadata accessor for Logger();
        __swift_project_value_buffer(v31, (uint64_t)static Log.default);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v32, v33))
        {
          uint64_t v34 = swift_slowAlloc();
          uint64_t v46 = swift_slowAlloc();
          v47[0] = v46;
          *(_DWORD *)uint64_t v34 = 136315394;
          uint64_t v35 = swift_bridgeObjectRetain();
          uint64_t v36 = MEMORY[0x1A624E120](v35, MEMORY[0x1E4FBC538]);
          unint64_t v38 = v37;
          swift_bridgeObjectRelease();
          uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, v47);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v34 + 12) = 2080;
          type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CPParticipant);
          lazy protocol witness table accessor for type CPParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CPParticipant and conformance NSObject, &lazy cache variable for type metadata for CPParticipant);
          swift_bridgeObjectRetain();
          uint64_t v39 = Set.description.getter();
          unint64_t v41 = v40;
          swift_bridgeObjectRelease();
          uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, v47);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1A375F000, v32, v33, "Not able to resolve all participants' identifiers, sending only to destinations %s instead of %s", (uint8_t *)v34, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1A624F870](v46, -1, -1);
          MEMORY[0x1A624F870](v34, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        goto LABEL_34;
      }
      do
      {
        while (1)
        {
          int64_t v21 = v48;
          uint64_t v20 = v49;
          char v22 = v50;
          specialized Set.subscript.getter(v48, v49, v50, a3);
          uint64_t v24 = v23;
          id v25 = objc_msgSend(v23, sel_participantIdentifier);

          uint64_t v26 = v51;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v26 + 16) + 1, 1);
            uint64_t v26 = v51;
          }
          unint64_t v28 = *(void *)(v26 + 16);
          unint64_t v27 = *(void *)(v26 + 24);
          if (v28 >= v27 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
            uint64_t v26 = v51;
          }
          *(void *)(v26 + 16) = v28 + 1;
          *(void *)(v26 + 8 * v28 + 32) = v25;
          if (v6) {
            break;
          }
          int64_t v15 = specialized _NativeSet.index(after:)(v21, v20, v22, a3);
          uint64_t v17 = v16;
          char v19 = v18;
          outlined consume of Set<Participant>.Index._Variant(v21, v20, v22);
          uint64_t v48 = v15;
          uint64_t v49 = v17;
          char v50 = v19 & 1;
          if (!--v7) {
            goto LABEL_26;
          }
        }
        if ((v22 & 1) == 0)
        {
          __break(1u);
          return;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<CPParticipant>.Index);
        uint64_t v29 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v29(v47, 0);
        --v7;
      }
      while (v7);
LABEL_26:
      outlined consume of Set<Participant>.Index._Variant(v48, v49, v50);
      uint64_t v7 = v51;
      uint64_t v8 = *(void *)(v51 + 16);
      if (v6) {
        goto LABEL_27;
      }
      uint64_t v30 = *(void *)(a3 + 16);
      swift_bridgeObjectRetain();
      if (v8 == v30) {
        goto LABEL_28;
      }
LABEL_30:
      if (one-time initialization token for default == -1) {
        goto LABEL_31;
      }
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a3 + 16);
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError();
  id v12 = (void *)swift_allocError();
  *uint64_t v13 = 0;
  a4();
}

void LinkManager.sendDataUnreliably(_:to:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (*(void *)(v4 + OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessenger))
  {
    if (!a3)
    {
      swift_retain();
LABEL_42:
      UnreliableMessenger.send(_:to:completion:)();
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    unint64_t v7 = a3 & 0xC000000000000001;
    if ((a3 & 0xC000000000000001) != 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      if (__CocoaSet.count.getter())
      {
        uint64_t v8 = __CocoaSet.count.getter();
        if (!v8)
        {
          uint64_t v9 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_34:
          swift_bridgeObjectRetain();
          uint64_t v36 = __CocoaSet.count.getter();
          goto LABEL_36;
        }
LABEL_14:
        uint64_t v54 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
        if (v7)
        {
          uint64_t v16 = __CocoaSet.startIndex.getter();
          char v18 = 1;
        }
        else
        {
          uint64_t v16 = specialized _NativeSet.startIndex.getter(a3);
          char v18 = v20 & 1;
        }
        uint64_t v51 = v16;
        uint64_t v52 = v17;
        char v53 = v18;
        if (v8 < 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        do
        {
          while (1)
          {
            int64_t v27 = v51;
            uint64_t v26 = v52;
            char v28 = v53;
            specialized Set.subscript.getter(v51, v52, v53, a3);
            uint64_t v30 = v29;
            id v31 = objc_msgSend(v29, sel_participantIdentifier);

            uint64_t v32 = v54;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v32 + 16) + 1, 1);
              uint64_t v32 = v54;
            }
            unint64_t v34 = *(void *)(v32 + 16);
            unint64_t v33 = *(void *)(v32 + 24);
            if (v34 >= v33 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
              uint64_t v32 = v54;
            }
            *(void *)(v32 + 16) = v34 + 1;
            *(void *)(v32 + 8 * v34 + 32) = v31;
            if (v7) {
              break;
            }
            int64_t v21 = specialized _NativeSet.index(after:)(v27, v26, v28, a3);
            uint64_t v23 = v22;
            char v25 = v24;
            outlined consume of Set<Participant>.Index._Variant(v27, v26, v28);
            uint64_t v51 = v21;
            uint64_t v52 = v23;
            char v53 = v25 & 1;
            if (!--v8) {
              goto LABEL_33;
            }
          }
          if ((v28 & 1) == 0)
          {
            __break(1u);
            return;
          }
          if (__CocoaSet.Index.handleBitPattern.getter()) {
            swift_isUniquelyReferenced_nonNull_native();
          }
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<CPParticipant>.Index);
          uint64_t v35 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
          __CocoaSet.formIndex(after:isUnique:)();
          v35(v50, 0);
          --v8;
        }
        while (v8);
LABEL_33:
        outlined consume of Set<Participant>.Index._Variant(v51, v52, v53);
        uint64_t v9 = *(void *)(v54 + 16);
        if (v7) {
          goto LABEL_34;
        }
        uint64_t v36 = *(void *)(a3 + 16);
        swift_bridgeObjectRetain();
LABEL_36:
        if (v9 == v36)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_42;
        }
        if (one-time initialization token for default == -1)
        {
LABEL_39:
          uint64_t v37 = type metadata accessor for Logger();
          __swift_project_value_buffer(v37, (uint64_t)static Log.default);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v38 = Logger.logObject.getter();
          os_log_type_t v39 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v38, v39))
          {
            uint64_t v40 = swift_slowAlloc();
            uint64_t v49 = swift_slowAlloc();
            v50[0] = v49;
            *(_DWORD *)uint64_t v40 = 136315394;
            uint64_t v41 = swift_bridgeObjectRetain();
            uint64_t v42 = MEMORY[0x1A624E120](v41, MEMORY[0x1E4FBC538]);
            unint64_t v44 = v43;
            swift_bridgeObjectRelease();
            uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, v50);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v40 + 12) = 2080;
            type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CPParticipant);
            lazy protocol witness table accessor for type CPParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CPParticipant and conformance NSObject, &lazy cache variable for type metadata for CPParticipant);
            swift_bridgeObjectRetain();
            uint64_t v45 = Set.description.getter();
            unint64_t v47 = v46;
            swift_bridgeObjectRelease();
            uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, v50);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1A375F000, v38, v39, "Not able to resolve all participants' identifiers, sending only to destinations %s instead of %s", (uint8_t *)v40, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x1A624F870](v49, -1, -1);
            MEMORY[0x1A624F870](v40, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          goto LABEL_42;
        }
LABEL_44:
        swift_once();
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v8 = *(void *)(a3 + 16);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v8) {
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError();
    char v14 = (void *)swift_allocError();
    *char v19 = 0;
    a4();
    swift_release();
  }
  else
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Log.default);
    char v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_1A375F000, v11, v12, "Unexpected, unreliableMessenger instance not found", v13, 2u);
      MEMORY[0x1A624F870](v13, -1, -1);
    }

    lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError();
    char v14 = (void *)swift_allocError();
    *int64_t v15 = 1;
    a4();
  }
}

uint64_t LinkManager.fetchAttachmentLedgerTopic()()
{
  *(void *)(v1 + 24) = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v1 + 32) = swift_task_alloc();
  return MEMORY[0x1F4188298](LinkManager.fetchAttachmentLedgerTopic(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v2 = (void *)v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 1, 1, v3);
  uint64_t v4 = (void *)swift_allocObject();
  id v4[2] = 0;
  v4[3] = 0;
  void v4[4] = v2;
  uint64_t v5 = v2;
  unint64_t v6 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC15GroupActivities21AttachmentLedgerTopicC_Tgm5(v1, (uint64_t)&closure #1 in LinkManager.fetchAttachmentLedgerTopic()partial apply, (uint64_t)v4);
  v0[5] = v6;
  unint64_t v7 = (void *)swift_task_alloc();
  v0[6] = v7;
  uint64_t v8 = type metadata accessor for AttachmentLedgerTopic(0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *unint64_t v7 = v0;
  v7[1] = LinkManager.fetchAttachmentLedgerTopic();
  uint64_t v10 = MEMORY[0x1E4FBC0F0];
  return MEMORY[0x1F4187D90](v0 + 2, v6, v8, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = LinkManager.fetchAttachmentLedgerTopic();
  }
  else {
    uint64_t v2 = LinkManager.fetchAttachmentLedgerTopic();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 16);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in LinkManager.fetchAttachmentLedgerTopic()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a1;
  v4[6] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<AttachmentLedgerTopic?, Never>>);
  v4[7] = v5;
  v4[8] = *(void *)(v5 - 8);
  v4[9] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<AttachmentLedgerTopic?, Never>>.Iterator);
  v4[10] = v6;
  v4[11] = *(void *)(v6 - 8);
  v4[12] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in LinkManager.fetchAttachmentLedgerTopic(), 0, 0);
}

uint64_t closure #1 in LinkManager.fetchAttachmentLedgerTopic()()
{
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 56);
  *(void *)(v0 + 16) = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 48)) + 0x110))();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<AttachmentLedgerTopic?, Never>);
  uint64_t v5 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<AttachmentLedgerTopic?, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<AttachmentLedgerTopic?, Never>);
  MEMORY[0x1A624DD30](v4, v5);
  swift_release();
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v6 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<AttachmentLedgerTopic?, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<AttachmentLedgerTopic?, Never>>.Iterator);
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v7;
  *unint64_t v7 = v0;
  v7[1] = closure #1 in LinkManager.fetchAttachmentLedgerTopic();
  uint64_t v8 = *(void *)(v0 + 80);
  return MEMORY[0x1F4187C78](v0 + 24, v8, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in LinkManager.fetchAttachmentLedgerTopic();
  }
  else {
    uint64_t v2 = closure #1 in LinkManager.fetchAttachmentLedgerTopic();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;

  *(void *)(v0 + 120) = *(void *)(v0 + 24);
  return MEMORY[0x1F4188298](closure #1 in LinkManager.fetchAttachmentLedgerTopic(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  void *v6;
  uint64_t v8;

  uint64_t v1 = v0[15];
  if (v1 == 1)
  {
    (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
    type metadata accessor for CancellationError();
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x1E4FBCF50]);
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    if (!v1)
    {
      uint64_t v2 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<AttachmentLedgerTopic?, Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<AttachmentLedgerTopic?, Never>>.Iterator);
      uint64_t v3 = (void *)swift_task_alloc();
      v0[13] = v3;
      void *v3 = v0;
      v3[1] = closure #1 in LinkManager.fetchAttachmentLedgerTopic();
      uint64_t v4 = v0[10];
      return MEMORY[0x1F4187C78](v0 + 3, v4, v2);
    }
    uint64_t v6 = (void *)v0[5];
    (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
    char *v6 = v1;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
  }
  return v5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v0 + 32) = *(void *)(v0 + 112);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

uint64_t closure #1 in LinkManager.fetchAttachment(attachmentID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[26] = a3;
  v4[27] = a4;
  v4[24] = a1;
  v4[25] = a2;
  uint64_t v5 = type metadata accessor for URL();
  v4[28] = v5;
  v4[29] = *(void *)(v5 - 8);
  v4[30] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for TaskPriority();
  v4[31] = v6;
  v4[32] = *(void *)(v6 - 8);
  v4[33] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v4[34] = v7;
  v4[35] = *(void *)(v7 - 8);
  v4[36] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in LinkManager.fetchAttachment(attachmentID:), 0, 0);
}

uint64_t closure #1 in LinkManager.fetchAttachment(attachmentID:)()
{
  uint64_t v33 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 296) = __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 280);
    uint64_t v5 = *(void *)(v0 + 288);
    uint64_t v6 = *(void *)(v0 + 264);
    uint64_t v7 = *(void *)(v0 + 272);
    uint64_t v28 = *(void *)(v0 + 248);
    uint64_t v29 = *(void *)(v0 + 256);
    uint64_t v8 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v32 = v31;
    *(_DWORD *)uint64_t v8 = 136315394;
    os_log_type_t type = v3;
    Attachment.id.getter();
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v11 = v10;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v7);
    *(void *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v8 + 12) = 2080;
    static Task<>.currentPriority.getter();
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3(&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority, MEMORY[0x1E4FBCFE8]);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v6, v28);
    *(void *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v2, type, "Received request to generate new AttachmentDownloadTask for attachment: %s with priority: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v31, -1, -1);
    MEMORY[0x1A624F870](v8, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v16 = *(void *)(v0 + 232);
  uint64_t v15 = *(void *)(v0 + 240);
  uint64_t v17 = *(void *)(v0 + 216);
  uint64_t v18 = *(void *)(v0 + 224);
  uint64_t v20 = *(void *)(v0 + 200);
  uint64_t v19 = *(void *)(v0 + 208);
  int64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  *(void *)(v0 + 304) = v21;
  *(void *)(v0 + 312) = (v16 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v21(v15, v19, v18);
  uint64_t v22 = type metadata accessor for AssetManager();
  swift_retain();
  swift_retain();
  uint64_t v23 = static AssetManager.shared.getter();
  *(void *)(v0 + 40) = v22;
  *(void *)(v0 + 48) = &protocol witness table for AssetManager;
  *(void *)(v0 + 16) = v23;
  *(void *)(v0 + 80) = type metadata accessor for AttachmentLedgerTopic(0);
  *(void *)(v0 + 88) = &protocol witness table for AttachmentLedgerTopic;
  *(void *)(v0 + 56) = v17;
  uint64_t v24 = type metadata accessor for Attachment();
  *(void *)(v0 + 320) = v24;
  *(void *)(v0 + 120) = v24;
  *(void *)(v0 + 128) = &protocol witness table for Attachment;
  *(void *)(v0 + 96) = v20;
  type metadata accessor for AttachmentDownloadTask();
  uint64_t v25 = swift_allocObject();
  *(void *)(v0 + 328) = v25;
  swift_retain();
  swift_retain();
  swift_defaultActor_initialize();
  *(void *)(v25 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_signalHandler) = 0;
  outlined init with take of TypedPayloadDecoding((long long *)(v0 + 56), v25 + 112);
  outlined init with take of TypedPayloadDecoding((long long *)(v0 + 96), v25 + 152);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v25 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_file, v15, v18);
  outlined init with take of TypedPayloadDecoding((long long *)(v0 + 16), v25 + OBJC_IVAR____TtC15GroupActivities22AttachmentDownloadTask_manager);
  swift_release();
  swift_release();
  uint64_t v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 336) = v26;
  *uint64_t v26 = v0;
  v26[1] = closure #1 in LinkManager.fetchAttachment(attachmentID:);
  return AttachmentDownloadTask.start()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 344) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in LinkManager.fetchAttachment(attachmentID:);
  }
  else {
    uint64_t v2 = closure #1 in LinkManager.fetchAttachment(attachmentID:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[38];
  uint64_t v2 = v0[28];
  os_log_type_t v3 = v0[26];
  uint64_t v4 = v0[24];
  swift_release();
  v1(v4, v3, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  unsigned char *v3;
  void *v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  uint64_t v21[2];
  uint64_t v22;
  uint64_t v23;

  uint64_t v22 = v0;
  uint64_t v1 = *(void **)(v0 + 344);
  *(void *)(v0 + 136) = v1;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast() && *(unsigned char *)(v0 + 352) == 1)
  {

    lazy protocol witness table accessor for type LinkManager.Errors and conformance LinkManager.Errors();
    swift_allocError();
    void *v3 = 1;
    swift_willThrow();
    swift_release();
  }
  else
  {
    uint64_t v4 = *(void **)(v0 + 344);

    swift_retain();
    uint64_t v5 = v4;
    swift_retain();
    uint64_t v6 = v4;
    uint64_t v7 = Logger.logObject.getter();
    uint64_t v8 = static os_log_type_t.error.getter();
    uint64_t v9 = os_log_type_enabled(v7, v8);
    unint64_t v10 = *(void **)(v0 + 344);
    if (v9)
    {
      unint64_t v11 = *(void *)(v0 + 200);
      uint64_t v12 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      v21[0] = v20;
      *(_DWORD *)uint64_t v12 = 136315394;
      *(void *)(v0 + 144) = v11;
      swift_retain();
      unint64_t v13 = String.init<A>(reflecting:)();
      *(void *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v12 + 12) = 2080;
      *(void *)(v0 + 160) = v10;
      uint64_t v15 = v10;
      uint64_t v16 = String.init<A>(reflecting:)();
      *(void *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A375F000, v7, v8, "Failed to download attachment %s, error: %s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v20, -1, -1);
      MEMORY[0x1A624F870](v12, -1, -1);
    }
    else
    {
      swift_release_n();
    }
    swift_willThrow();
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t LinkManager.fetchAttachment(attachmentID:generator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[12] = a4;
  v5[13] = v4;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v5[14] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for LinkManager.Attachment(0);
  v5[15] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[16] = v7;
  v5[17] = *(void *)(v7 + 64);
  v5[18] = swift_task_alloc();
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for TaskPriority();
  v5[21] = v8;
  v5[22] = *(void *)(v8 - 8);
  v5[23] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v5[24] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[25] = v10;
  v5[26] = *(void *)(v10 + 64);
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  v5[29] = swift_task_alloc();
  v5[30] = swift_task_alloc();
  return MEMORY[0x1F4188298](LinkManager.fetchAttachment(attachmentID:generator:), 0, 0);
}

uint64_t LinkManager.fetchAttachment(attachmentID:generator:)()
{
  unint64_t v93 = v0;
  uint64_t v1 = *(void **)(v0[13] + OBJC_IVAR____TtC15GroupActivities11LinkManager_lock);
  objc_msgSend(v1, sel_lock);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[24];
  uint64_t v4 = v0[25];
  uint64_t v5 = v0[10];
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.default);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v7(v2, v5, v3);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = v0[30];
  uint64_t v12 = v0[24];
  uint64_t v13 = v0[25];
  uint64_t v91 = v1;
  uint64_t v87 = v7;
  if (v10)
  {
    os_log_type_t type = v9;
    uint64_t v14 = v0[23];
    uint64_t v77 = v0[21];
    uint64_t v79 = v0[22];
    uint64_t v15 = swift_slowAlloc();
    uint64_t v81 = swift_slowAlloc();
    v92[0] = v81;
    *(_DWORD *)uint64_t v15 = 136315394;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v84 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v84(v11, v12);
    *(_WORD *)(v15 + 12) = 2080;
    static Task<>.currentPriority.getter();
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3(&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority, MEMORY[0x1E4FBCFE8]);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v14, v77);
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v8, type, "Received request to fetch attachment: %s with priority: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v81, -1, -1);
    MEMORY[0x1A624F870](v15, -1, -1);
  }
  else
  {
    uint64_t v84 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v84(v11, v12);
  }

  int64_t v21 = (void *)v0[13];
  uint64_t v22 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v21) + 0x130);
  uint64_t v23 = (*MEMORY[0x1E4FBC8C8] & *v21) + 304;
  unint64_t v24 = v22();
  uint64_t v25 = *(void *)(v24 + 16);
  if (!v25)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    v87(v0[27], v0[10], v0[24]);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    BOOL v33 = os_log_type_enabled(v31, v32);
    uint64_t v34 = v0[27];
    uint64_t v35 = v0[24];
    if (v33)
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      v92[0] = v37;
      *(_DWORD *)uint64_t v36 = 136315138;
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v84(v34, v35);
      _os_log_impl(&dword_1A375F000, v31, v32, "Failed to find attachment with attachmentID %s", v36, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v37, -1, -1);
      MEMORY[0x1A624F870](v36, -1, -1);
    }
    else
    {
      v84(v0[27], v0[24]);
    }

    objc_msgSend(v91, sel_unlock);
    lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError();
    swift_allocError();
    *uint64_t v40 = 3;
    swift_willThrow();
    goto LABEL_14;
  }
  unint64_t v26 = 0;
  uint64_t v27 = v0[16];
  uint64_t v28 = *(unsigned __int8 *)(v27 + 80);
  uint64_t v29 = (v28 + 32) & ~v28;
  uint64_t v30 = *(void **)(v27 + 72);
  while ((static UUID.== infix(_:_:)() & 1) == 0)
  {
    ++v26;
    v29 += (uint64_t)v30;
    if (v25 == v26) {
      goto LABEL_10;
    }
  }
  unint64_t v43 = (void (*)(void *, void))v0[13];
  uint64_t v44 = swift_bridgeObjectRelease();
  uint64_t v45 = ((uint64_t (*)(uint64_t))v22)(v44);
  if (v26 >= *(void *)(v45 + 16))
  {
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v46 = v0[20];
  uint64_t v47 = v0[15];
  _s15GroupActivities11ParticipantVWOcTm_1(v45 + v29, v46, type metadata accessor for LinkManager.Attachment);
  swift_bridgeObjectRelease();
  uint64_t v48 = *(int *)(v47 + 32);
  uint64_t v22 = *(uint64_t (**)(void))(v46 + v48);
  if ((unint64_t)v22 - 1 >= 2)
  {
    uint64_t v23 = *(void *)(v46 + v48);
    if (v22) {
      goto LABEL_27;
    }
    uint64_t v49 = v0[20];
    uint64_t v50 = v49 + *(int *)(v0[15] + 24);
    if (*(unsigned char *)(v50 + 16))
    {
      objc_msgSend(v91, sel_unlock);
      lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError();
      swift_allocError();
      *uint64_t v51 = 4;
      swift_willThrow();
      _s15GroupActivities11ParticipantVWOhTm_0(v49, type metadata accessor for LinkManager.Attachment);
LABEL_14:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v41 = (uint64_t (*)(void))v0[1];
      goto LABEL_15;
    }
    uint64_t v73 = *(void *)v50;
    unint64_t v74 = *(void *)(v50 + 8);
    uint64_t v76 = v0[29];
    uint64_t v85 = (char *)v0[28];
    uint64_t v52 = v0[24];
    uint64_t v90 = v0[25];
    uint64_t v75 = v52;
    uint64_t v70 = v0[17];
    uint64_t v78 = v0[18];
    uint64_t v80 = (void *)v0[13];
    uint64_t v86 = v0[12];
    uint64_t v71 = v0[11];
    uint64_t v72 = v0[14];
    uint64_t v68 = v0[19];
    uint64_t v69 = v0[10];
    (*(void (**)(void))(v0[22] + 56))();
    v87(v76, v69, v52);
    _s15GroupActivities11ParticipantVWOcTm_1(v49, v68, type metadata accessor for LinkManager.Attachment);
    uint64_t v89 = swift_allocObject();
    swift_unknownObjectWeakInit();
    _s15GroupActivities11ParticipantVWObTm_0(v68, v78, type metadata accessor for LinkManager.Attachment);
    uint64_t v88 = *(void (**)(char *, uint64_t, uint64_t))(v90 + 32);
    v88(v85, v76, v52);
    uint64_t v53 = (v28 + 56) & ~v28;
    unint64_t v82 = (v53 + v70 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v54 = (v82 + *(unsigned __int8 *)(v90 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80);
    uint64_t v55 = (char *)swift_allocObject();
    *((void *)v55 + 2) = 0;
    *((void *)v55 + 3) = 0;
    *((void *)v55 + 4) = v71;
    *((void *)v55 + 5) = v86;
    *((void *)v55 + 6) = v73;
    _s15GroupActivities11ParticipantVWObTm_0(v78, (uint64_t)&v55[v53], type metadata accessor for LinkManager.Attachment);
    *(void *)&v55[v82] = v89;
    v88(&v55[v54], (uint64_t)v85, v75);
    outlined copy of LinkManager.Attachment.Source(v73, v74, 0);
    outlined copy of LinkManager.Attachment.Source(v73, v74, 0);
    swift_retain();
    uint64_t v23 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v72, (uint64_t)&async function pointer to partial apply for closure #2 in LinkManager.fetchAttachment(attachmentID:generator:), (uint64_t)v55);
    unint64_t v56 = *(void *)(v46 + v48);
    swift_retain();
    outlined consume of LinkManager.Attachment.State(v56);
    *(void *)(v46 + v48) = v23;
    int64_t v21 = v0 + 2;
    unint64_t v43 = (void (*)(void *, void))(*(uint64_t (**)(void *))((*MEMORY[0x1E4FBC8C8] & *v80)
                                                                                     + 0x140))(v0 + 2);
    uint64_t v30 = v57;
    unint64_t v24 = *v57;
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v30 = v24;
    if (isUniquelyReferenced_nonNull_native)
    {
LABEL_25:
      if (v26 >= *(void *)(v24 + 16))
      {
        __break(1u);
        return MEMORY[0x1F4187D90](isUniquelyReferenced_nonNull_native, v59, v60, v61, v62);
      }
      outlined assign with copy of LinkManager.Attachment(v0[20], v24 + v29);
      v43(v21, 0);
      outlined consume of LinkManager.Attachment.Source(v73, v74, 0);
      goto LABEL_27;
    }
LABEL_33:
    uint64_t isUniquelyReferenced_nonNull_native = specialized _ArrayBuffer._consumeAndCreateNew()(v24);
    unint64_t v24 = isUniquelyReferenced_nonNull_native;
    *(void *)uint64_t v30 = isUniquelyReferenced_nonNull_native;
    goto LABEL_25;
  }
  uint64_t v23 = 0;
LABEL_27:
  v0[31] = v23;
  outlined copy of LinkManager.Attachment.State((unint64_t)v22);
  objc_msgSend(v91, sel_unlock);
  if (v23)
  {
    swift_retain();
    uint64_t v63 = (void *)swift_task_alloc();
    v0[32] = v63;
    uint64_t isUniquelyReferenced_nonNull_native = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    void *v63 = v0;
    v63[1] = LinkManager.fetchAttachment(attachmentID:generator:);
    uint64_t v60 = MEMORY[0x1E4FBC848] + 8;
    uint64_t v62 = MEMORY[0x1E4FBC0F0];
    uint64_t v59 = v23;
    uint64_t v61 = isUniquelyReferenced_nonNull_native;
    return MEMORY[0x1F4187D90](isUniquelyReferenced_nonNull_native, v59, v60, v61, v62);
  }
  uint64_t v64 = v0[20];
  uint64_t v65 = v0[9];
  uint64_t v66 = v64 + *(int *)(v0[15] + 28);
  uint64_t v67 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 16))(v65, v66, v67);
  _s15GroupActivities11ParticipantVWOhTm_0(v64, type metadata accessor for LinkManager.Attachment);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v41 = (uint64_t (*)(void))v0[1];
LABEL_15:
  return v41();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = LinkManager.fetchAttachment(attachmentID:generator:);
  }
  else {
    uint64_t v2 = LinkManager.fetchAttachment(attachmentID:generator:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t (*v7)(__n128);
  __n128 v8;
  uint64_t v10;

  swift_release_n();
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[9];
  uint64_t v4 = v1 + *(int *)(v2 + 28);
  uint64_t v5 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(v3, v4, v5);
  uint64_t v6 = *(void *)(v1 + *(int *)(v2 + 20));
  _s15GroupActivities11ParticipantVWOhTm_0(v1, type metadata accessor for LinkManager.Attachment);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(__n128))v0[1];
  v8.n128_u64[0] = v6;
  return v7(v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 160);
  swift_release_n();
  _s15GroupActivities11ParticipantVWOhTm_0(v1, type metadata accessor for LinkManager.Attachment);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t closure #2 in LinkManager.fetchAttachment(attachmentID:generator:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[10] = a8;
  v8[11] = v21;
  uint64_t v12 = type metadata accessor for LinkManager.Attachment(0);
  v8[12] = v12;
  v8[13] = *(void *)(v12 - 8);
  v8[14] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for UUID();
  v8[15] = v13;
  v8[16] = *(void *)(v13 - 8);
  v8[17] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for URL();
  v8[18] = v14;
  v8[19] = *(void *)(v14 - 8);
  uint64_t v15 = swift_task_alloc();
  v8[20] = v15;
  uint64_t v16 = a7 + *(int *)(v12 + 28);
  unint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)a4 + *a4);
  unint64_t v17 = (void *)swift_task_alloc();
  v8[21] = v17;
  *unint64_t v17 = v8;
  v17[1] = closure #2 in LinkManager.fetchAttachment(attachmentID:generator:);
  return v19(v15, a6, v16);
}

uint64_t closure #2 in LinkManager.fetchAttachment(attachmentID:generator:)()
{
  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #2 in LinkManager.fetchAttachment(attachmentID:generator:);
  }
  else {
    uint64_t v2 = closure #2 in LinkManager.fetchAttachment(attachmentID:generator:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t (*v6)(id);
  void *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(void *, void);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;

  uint64_t v42 = v0;
  uint64_t v1 = (unint64_t)(v0 + 10);
  uint64_t v2 = v0[10] + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x1A624F980](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    uint64_t v40 = OBJC_IVAR____TtC15GroupActivities11LinkManager_lock;
    uint64_t v5 = objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC15GroupActivities11LinkManager_lock), sel_lock);
    uint64_t v6 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x130);
    uint64_t v7 = *(void **)(v6(v5) + 16);
    if (!v7)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v13 = v0[16];
      uint64_t v12 = v0[17];
      uint64_t v14 = v0[15];
      uint64_t v15 = v0[11];
      uint64_t v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Log.default);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v15, v14);
      unint64_t v17 = Logger.logObject.getter();
      uint64_t v18 = static os_log_type_t.error.getter();
      unint64_t v19 = os_log_type_enabled(v17, v18);
      uint64_t v21 = v0[16];
      uint64_t v20 = v0[17];
      uint64_t v22 = v0[15];
      if (v19)
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        unint64_t v39 = swift_slowAlloc();
        uint64_t v41 = v39;
        *(_DWORD *)uint64_t v23 = 136315138;
        _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        unint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
        _os_log_impl(&dword_1A375F000, v17, v18, "Failed to find attachment with attachmentID %s when trying to update the state", v23, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v39, -1, -1);
        MEMORY[0x1A624F870](v23, -1, -1);
      }
      else
      {
        (*(void (**)(void, void))(v21 + 8))(v0[17], v0[15]);
      }

LABEL_17:
      uint64_t v36 = v0[19];
      uint64_t v35 = v0[20];
      uint64_t v37 = v0[18];
      objc_msgSend(*(id *)((char *)v4 + v40), sel_unlock);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);

      goto LABEL_18;
    }
    uint64_t v8 = 0;
    os_log_type_t v9 = v0[13];
    BOOL v10 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v11 = *(void **)(v9 + 72);
    while ((static UUID.== infix(_:_:)() & 1) == 0)
    {
      uint64_t v8 = (void *)((char *)v8 + 1);
      v10 += (unint64_t)v11;
      if (v7 == v8) {
        goto LABEL_6;
      }
    }
    unint64_t v26 = swift_bridgeObjectRelease();
    uint64_t v27 = (void (*)(void *, void))v4;
    uint64_t v28 = v6((id)v26);
    if ((unint64_t)v8 >= *(void *)(v28 + 16))
    {
      __break(1u);
    }
    else
    {
      uint64_t v29 = v0[14];
      uint64_t v30 = v0[12];
      _s15GroupActivities11ParticipantVWOcTm_1(v28 + v10, v29, type metadata accessor for LinkManager.Attachment);
      swift_bridgeObjectRelease();
      uint64_t v31 = *(int *)(v30 + 32);
      outlined consume of LinkManager.Attachment.State(*(void *)(v29 + v31));
      *(void *)(v29 + v31) = 2;
      uint64_t v11 = v0 + 2;
      uint64_t v27 = (void (*)(void *, void))(*(uint64_t (**)(void *))((*MEMORY[0x1E4FBC8C8] & *v4)
                                                                                       + 0x140))(v0 + 2);
      uint64_t v7 = v32;
      uint64_t v1 = *v32;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v7 = v1;
      if (result)
      {
LABEL_15:
        if ((unint64_t)v8 >= *(void *)(v1 + 16))
        {
          __break(1u);
          return result;
        }
        uint64_t v34 = v0[14];
        outlined assign with copy of LinkManager.Attachment(v34, v1 + v10);
        v27(v11, 0);
        _s15GroupActivities11ParticipantVWOhTm_0(v34, type metadata accessor for LinkManager.Attachment);
        goto LABEL_17;
      }
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    uint64_t v1 = result;
    *uint64_t v7 = result;
    goto LABEL_15;
  }
  (*(void (**)(void, void))(v0[19] + 8))(v0[20], v0[18]);
LABEL_18:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v38 = (uint64_t (*)(void))v0[1];
  return v38();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in LinkManager.fetchAttachmentMetadata(attachmentID:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for TaskPriority();
  uint64_t v52 = *(void *)(v7 - 8);
  uint64_t v53 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v51 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v59 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v46 - v13;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)static Log.default);
  unint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v57 = v10 + 16;
  v56(v14, a1, v9);
  uint64_t v58 = v16;
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  int v19 = v18;
  BOOL v20 = os_log_type_enabled(v17, v18);
  uint64_t v55 = v10;
  uint64_t v49 = a3;
  uint64_t v50 = v3;
  uint64_t v60 = a2;
  if (v20)
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    uint64_t v62 = v48;
    *(_DWORD *)uint64_t v21 = 136315394;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    int v47 = v19;
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v54 = *(void (**)(char *, uint64_t))(v10 + 8);
    v54(v14, v9);
    *(_WORD *)(v21 + 12) = 2080;
    uint64_t v46 = v21 + 14;
    unint64_t v24 = v51;
    static Task<>.currentPriority.getter();
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3(&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority, MEMORY[0x1E4FBCFE8]);
    uint64_t v25 = v53;
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v28 = v27;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v24, v25);
    uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, &v62);
    a2 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v17, (os_log_type_t)v47, "Received request to fetch attachmentMetadata: %s with priority: %s", (uint8_t *)v21, 0x16u);
    uint64_t v29 = v48;
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v29, -1, -1);
    MEMORY[0x1A624F870](v21, -1, -1);
  }
  else
  {
    unint64_t v54 = *(void (**)(char *, uint64_t))(v10 + 8);
    v54(v14, v9);
  }

  uint64_t v30 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *a2) + 0x130);
  uint64_t v31 = *(void *)(v30() + 16);
  if (v31)
  {
    unint64_t v32 = 0;
    uint64_t v33 = *(void *)(type metadata accessor for LinkManager.Attachment(0) - 8);
    unint64_t v34 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    uint64_t v35 = *(void *)(v33 + 72);
    while ((static UUID.== infix(_:_:)() & 1) == 0)
    {
      ++v32;
      v34 += v35;
      if (v31 == v32) {
        goto LABEL_10;
      }
    }
    uint64_t v45 = swift_bridgeObjectRelease();
    uint64_t result = ((uint64_t (*)(uint64_t))v30)(v45);
    if (v32 >= *(void *)(result + 16))
    {
      __break(1u);
    }
    else
    {
      _s15GroupActivities11ParticipantVWOcTm_1(result + v34, v49, type metadata accessor for LinkManager.Attachment);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRelease();
    uint64_t v36 = v59;
    v56(v59, a1, v9);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      unint64_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v62 = v40;
      *(_DWORD *)unint64_t v39 = 136315138;
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v54(v36, v9);
      _os_log_impl(&dword_1A375F000, v37, v38, "Failed to find attachment with attachmentID %s", v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v40, -1, -1);
      MEMORY[0x1A624F870](v39, -1, -1);
    }
    else
    {
      v54(v36, v9);
    }

    lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError();
    swift_allocError();
    *unint64_t v43 = 3;
    return swift_willThrow();
  }
  return result;
}

uint64_t LinkManager.Attachment.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t LinkManager.Attachment.id.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*LinkManager.Attachment.id.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

double LinkManager.Attachment.sentTime.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for LinkManager.Attachment(0) + 20));
}

uint64_t LinkManager.Attachment.sentTime.setter(double a1)
{
  uint64_t result = type metadata accessor for LinkManager.Attachment(0);
  *(double *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*LinkManager.Attachment.sentTime.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t LinkManager.Attachment.source.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for LinkManager.Attachment(0) + 24);
  uint64_t v2 = *(void *)v1;
  outlined copy of LinkManager.Attachment.Source(*(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
  return v2;
}

uint64_t LinkManager.Attachment.source.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = v3 + *(int *)(type metadata accessor for LinkManager.Attachment(0) + 24);
  uint64_t result = outlined consume of LinkManager.Attachment.Source(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));
  *(void *)uint64_t v7 = a1;
  *(void *)(v7 + 8) = a2;
  *(unsigned char *)(v7 + 16) = a3 & 1;
  return result;
}

uint64_t (*LinkManager.Attachment.source.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t LinkManager.Attachment.file.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for LinkManager.Attachment(0) + 28);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t LinkManager.Attachment.file.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for LinkManager.Attachment(0) + 28);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*LinkManager.Attachment.file.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

unint64_t LinkManager.Attachment.state.getter()
{
  unint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for LinkManager.Attachment(0) + 32));
  outlined copy of LinkManager.Attachment.State(v1);
  return v1;
}

unint64_t LinkManager.Attachment.state.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for LinkManager.Attachment(0) + 32);
  unint64_t result = outlined consume of LinkManager.Attachment.State(*(void *)(v1 + v3));
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*LinkManager.Attachment.state.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t LinkManager.messageReceived(messenger:message:)()
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B0))();
  if (result)
  {
    uint64_t v2 = (void (*)(uint64_t, unint64_t, uint64_t, char *))result;
    uint64_t v3 = UnreliableMessenger.Message.data.getter();
    unint64_t v5 = v4;
    uint64_t v6 = UnreliableMessenger.Message.fromParticipantID.getter();
    char v7 = 1;
    v2(v3, v5, v6, &v7);
    outlined consume of Data._Representation(v3, v5);
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v2);
  }
  return result;
}

void LinkManager.messengerClosed(_:reason:)()
{
  if ((static UnreliableMessenger.ClosedReason.== infix(_:_:)() & 1) != 0
    || (static UnreliableMessenger.ClosedReason.== infix(_:_:)() & 1) != 0)
  {
    uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1E0))();
    if (v1)
    {
      uint64_t v2 = (void (*)(void))v1;
      lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError();
      uint64_t v3 = (void *)swift_allocError();
      unsigned char *v4 = 2;
      v2();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v2);
    }
  }
}

uint64_t protocol witness for UnreliableMessengerDelegate.messageReceived(messenger:message:) in conformance LinkManager()
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B0))();
  if (result)
  {
    uint64_t v2 = (void (*)(uint64_t, unint64_t, uint64_t, char *))result;
    uint64_t v3 = UnreliableMessenger.Message.data.getter();
    unint64_t v5 = v4;
    uint64_t v6 = UnreliableMessenger.Message.fromParticipantID.getter();
    char v7 = 1;
    v2(v3, v5, v6, &v7);
    outlined consume of Data._Representation(v3, v5);
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v2);
  }
  return result;
}

void protocol witness for UnreliableMessengerDelegate.messengerClosed(_:reason:) in conformance LinkManager()
{
  if ((static UnreliableMessenger.ClosedReason.== infix(_:_:)() & 1) != 0
    || (static UnreliableMessenger.ClosedReason.== infix(_:_:)() & 1) != 0)
  {
    uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1E0))();
    if (v1)
    {
      uint64_t v2 = (void (*)(void))v1;
      lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError();
      uint64_t v3 = (void *)swift_allocError();
      unsigned char *v4 = 2;
      v2();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v2);
    }
  }
}

BOOL static LinkManager.LinkError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void LinkManager.LinkError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t LinkManager.isResumed.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC15GroupActivities11LinkManager_lock);
  objc_msgSend(v1, sel_lock);
  uint64_t v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC15GroupActivities11LinkManager_state);
  objc_msgSend(v1, sel_unlock);
  return v2;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, (void (*)(unint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy());
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, (void (*)(unint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy());
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, (void (*)(unint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy());
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, (void (*)(unint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy());
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  char v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    char v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 16 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for LinkManager.Attachment(0);
    uint64_t v20 = *(void *)(v13 - 8);
    _s15GroupActivities11ParticipantVWObTm_0(v12 + *(void *)(v20 + 72) * v6, a2, type metadata accessor for LinkManager.Attachment);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for LinkManager.Attachment(0);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    outlined init with take of Any((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, a2, (void (*)(unint64_t, uint64_t))outlined init with take of TypedPayloadDecoding, (void (*)(unint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy(), a3);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, void (*a2)(unint64_t, uint64_t), void (*a3)(void))
{
  unint64_t v6 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v9;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v6;
  uint64_t v16 = *v6;
  uint64_t *v6 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a3();
    uint64_t v11 = v16;
  }
  uint64_t v12 = *(void *)(v11 + 48);
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12 + *(void *)(*(void *)(v13 - 8) + 72) * v8, v13);
  uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 8 * v8);
  a2(v8, v11);
  uint64_t *v6 = v11;
  swift_bridgeObjectRelease();
  return v14;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    outlined init with take of GroupSessionTable.Storage(*(void *)(v9 + 56) + 24 * v6, a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = xmmword_1A38F6FA0;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if (v8)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = *v3;
    uint64_t v12 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v10 = v12;
    }
    outlined init with take of TopicManager.ConversationClient.Service(*(void *)(v10 + 56) + 48 * v6, a2);
    specialized _NativeDictionary._delete(at:)(v6, v10);
    uint64_t *v3 = v10;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(unsigned char *)(a2 + 40) = -1;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  uint64_t result = swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v4;
    uint64_t v16 = *v4;
    uint64_t *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v12 = v16;
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void *)(v12 + 56) + 16 * v8;
    uint64_t v14 = *(void *)v13;
    char v15 = *(unsigned char *)(v13 + 8);
    LOBYTE(v13) = *(unsigned char *)(v13 + 9);
    *(void *)a3 = v14;
    *(unsigned char *)(a3 + 8) = v15;
    *(unsigned char *)(a3 + 9) = v13;
    specialized _NativeDictionary._delete(at:)(v8, v12);
    uint64_t *v4 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)a3 = 0;
    *(_WORD *)(a3 + 8) = 1280;
  }
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t, uint64_t)@<X2>, void (*a4)(unint64_t, uint64_t)@<X3>, void (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10 = v6;
  swift_bridgeObjectRetain();
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v15;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v10;
    uint64_t v19 = *v10;
    *uint64_t v10 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a5();
      uint64_t v17 = v19;
    }
    swift_bridgeObjectRelease();
    a3(*(void *)(v17 + 56) + 40 * v14, a6);
    a4(v14, v17);
    *uint64_t v10 = v17;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a6 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

id specialized LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, char *a8)
{
  uint64_t v88 = a7;
  uint64_t v89 = a5;
  id v86 = a6;
  uint64_t v87 = a3;
  uint64_t v84 = a4;
  uint64_t v85 = a1;
  uint64_t v90 = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
  uint64_t v76 = *(void *)(v9 - 8);
  uint64_t v77 = v9;
  MEMORY[0x1F4188790](v9);
  unint64_t v74 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, [UInt64]>);
  uint64_t v78 = *(void *)(v11 - 8);
  uint64_t v79 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v75 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = type metadata accessor for Participant();
  uint64_t v80 = *(void *)(v73 - 8);
  MEMORY[0x1F4188790](v73);
  uint64_t v81 = v13;
  uint64_t v82 = (uint64_t)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<[LinkManager.Attachment]>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentSubject<AttachmentLedgerTopic?>);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = OBJC_IVAR____TtC15GroupActivities11LinkManager_lock;
  id v23 = objc_allocWithZone(MEMORY[0x1E4F28FD0]);
  unint64_t v24 = a8;
  *(void *)&a8[v22] = objc_msgSend(v23, sel_init);
  *(void *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessenger] = 0;
  uint64_t v25 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager__attachmentLedgerTopic];
  v91[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentLedgerTopic?);
  CurrentSubject.init(wrappedValue:)();
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v25, v21, v18);
  *(void *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_pendingLocalAttachments] = MEMORY[0x1E4FBC868];
  uint64_t v26 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager__attachments];
  uint64_t v27 = MEMORY[0x1E4FBC860];
  v91[0] = MEMORY[0x1E4FBC860];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LinkManager.Attachment]);
  CurrentSubject.init(wrappedValue:)();
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v26, v17, v14);
  if ((v27 & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    unint64_t v28 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
  }
  else {
    unint64_t v28 = MEMORY[0x1E4FBC870];
  }
  uint64_t v29 = v84;
  uint64_t v30 = v85;
  uint64_t v31 = v89;
  uint64_t v32 = v90;
  *(void *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_cancellables] = v28;
  v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_state] = 0;
  v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_hasConnectedOnce] = 0;
  uint64_t v33 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_receivedDataHandler];
  *(void *)uint64_t v33 = 0;
  *((void *)v33 + 1) = 0;
  unint64_t v34 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_onFirstConnectedHandler];
  *(void *)unint64_t v34 = 0;
  *((void *)v34 + 1) = 0;
  uint64_t v35 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_invalidationHandler];
  *(void *)uint64_t v35 = 0;
  *((void *)v35 + 1) = 0;
  uint64_t v36 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_requestEncryptionKeysHandler];
  *(void *)uint64_t v36 = 0;
  *((void *)v36 + 1) = 0;
  uint64_t v37 = &v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_identifier];
  uint64_t v38 = type metadata accessor for UUID();
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 16);
  v40(v37, v30, v38);
  uint64_t v83 = v38;
  v40(&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_groupUUID], v32, v38);
  *(void *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_topic] = v29;
  _s15GroupActivities11ParticipantVWOcTm_1(v31, (uint64_t)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_localParticipant], (uint64_t (*)(void))type metadata accessor for Participant);
  id v41 = v86;
  *(void *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessengerConfig] = v86;
  unint64_t v42 = v88;
  *(void *)&v24[OBJC_IVAR____TtC15GroupActivities11LinkManager_featureFlags] = v88;
  swift_retain();
  id v86 = v41;
  swift_unknownObjectRetain();

  unint64_t v43 = (objc_class *)type metadata accessor for LinkManager(0);
  v92.receiver = v24;
  v92.super_class = v43;
  id v44 = objc_msgSendSuper2(&v92, sel_init);
  uint64_t v45 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v46 = v82;
  _s15GroupActivities11ParticipantVWOcTm_1(v31, v82, (uint64_t (*)(void))type metadata accessor for Participant);
  unint64_t v47 = (*(unsigned __int8 *)(v80 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = v45;
  _s15GroupActivities11ParticipantVWObTm_0(v46, v48 + v47, (uint64_t (*)(void))type metadata accessor for Participant);
  uint64_t v49 = *(void (**)(void (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(*(void *)v29 + 328);
  id v50 = v44;
  v49(partial apply for closure #1 in LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:), v48);
  if (objc_msgSend(v42, sel_unreliableMessengerEnabled))
  {
    uint64_t v51 = UUID.uuidString.getter();
    uint64_t v53 = v52;
    uint64_t v54 = *(void *)(v89 + *(int *)(v73 + 24));
    uint64_t v55 = _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3(&lazy protocol witness table cache variable for type LinkManager and conformance LinkManager, (void (*)(uint64_t))type metadata accessor for LinkManager);
    unint64_t v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, id, id, uint64_t))(*(void *)v87 + 256);
    uint64_t v57 = (char *)v50;
    uint64_t v58 = v54;
    uint64_t v59 = v55;
    uint64_t v29 = v84;
    uint64_t v30 = v85;
    uint64_t v60 = v56(v90, v51, v53, v58, v86, v50, v59);

    uint64_t v61 = swift_bridgeObjectRelease();
    uint64_t v62 = v74;
    (*(void (**)(uint64_t))(*(void *)v29 + 440))(v61);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt64]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Published<[UInt64 : PubSubTopic.Participant]>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[UInt64 : PubSubTopic.Participant]>.Publisher);
    uint64_t v63 = v75;
    uint64_t v64 = v77;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v62, v64);
    uint64_t v65 = (void (*)(uint64_t *, void))UnreliableMessenger.$activeReliableSubscribers.modify();
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, [UInt64]> and conformance Publishers.Map<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.Map<Published<[UInt64 : PubSubTopic.Participant]>.Publisher, [UInt64]>);
    uint64_t v66 = v79;
    Publisher<>.assign(to:)();
    (*(void (**)(char *, uint64_t))(v78 + 8))(v63, v66);
    v65(v91, 0);
    *(void *)&v57[OBJC_IVAR____TtC15GroupActivities11LinkManager_unreliableMessenger] = v60;
    swift_release();
  }
  uint64_t v67 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v68 = *(void (**)(void, uint64_t))(*(void *)v29 + 352);
  swift_retain();
  v68(partial apply for closure #3 in LinkManager.init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:), v67);

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  _s15GroupActivities11ParticipantVWOhTm_0(v89, (uint64_t (*)(void))type metadata accessor for Participant);
  uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
  uint64_t v70 = v83;
  v69(v90, v83);
  v69(v30, v70);
  swift_release();
  return v50;
}

unint64_t lazy protocol witness table accessor for type LinkManager.LinkError and conformance LinkManager.LinkError()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkManager.LinkError and conformance LinkManager.LinkError;
  if (!lazy protocol witness table cache variable for type LinkManager.LinkError and conformance LinkManager.LinkError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkManager.LinkError and conformance LinkManager.LinkError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkManager.LinkError and conformance LinkManager.LinkError;
  if (!lazy protocol witness table cache variable for type LinkManager.LinkError and conformance LinkManager.LinkError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkManager.LinkError and conformance LinkManager.LinkError);
  }
  return result;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (unint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Participant();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  unsigned int v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v4);
  uint64_t v28 = (uint64_t)&v27 - v8;
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type Participant and conformance Participant, (void (*)(uint64_t))type metadata accessor for Participant);
  uint64_t v12 = Set.init(minimumCapacity:)();
  uint64_t v30 = v11;
  if (v11)
  {
    uint64_t v13 = 0;
    uint64_t v29 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v14 = *(void *)(v3 + 72);
    do
    {
      _s15GroupActivities11ParticipantVWOcTm_1(v29 + v14 * v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Participant);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      swift_bridgeObjectRetain();
      dispatch thunk of Hashable.hash(into:)();
      uint64_t v17 = &v10[*(int *)(v2 + 20)];
      String.hash(into:)();
      uint64_t v18 = *(int *)(v2 + 24);
      Hasher._combine(_:)(*(void *)&v10[v18]);
      Swift::Int v19 = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v12 + 32);
      unint64_t v21 = v19 & ~v20;
      uint64_t v22 = *(void *)(v12 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21;
      uint64_t v31 = v13;
      if (v22)
      {
        uint64_t v23 = ~v20;
        while (1)
        {
          _s15GroupActivities11ParticipantVWOcTm_1(*(void *)(v12 + 48) + v21 * v14, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Participant);
          if (static UUID.== infix(_:_:)())
          {
            unint64_t v24 = &v6[*(int *)(v2 + 20)];
            BOOL v25 = *(void *)v24 == *(void *)v17 && *((void *)v24 + 1) == *((void *)v17 + 1);
            if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)())
              && *(void *)&v6[*(int *)(v2 + 24)] == *(void *)&v10[v18])
            {
              break;
            }
          }
          _s15GroupActivities11ParticipantVWOhTm_0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Participant);
          unint64_t v21 = (v21 + 1) & v23;
          if (((*(void *)(v12 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
            goto LABEL_3;
          }
        }
        _s15GroupActivities11ParticipantVWOhTm_0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Participant);
      }
      else
      {
LABEL_3:
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v16 = v28;
        _s15GroupActivities11ParticipantVWOcTm_1((uint64_t)v10, v28, (uint64_t (*)(void))type metadata accessor for Participant);
        uint64_t v32 = v12;
        specialized _NativeSet.insertNew(_:at:isUnique:)(v16, v21, isUniquelyReferenced_nonNull_native);
        uint64_t v12 = v32;
      }
      swift_bridgeObjectRelease();
      uint64_t v13 = v31 + 1;
      _s15GroupActivities11ParticipantVWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Participant);
    }
    while (v13 != v30);
  }
  return v12;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (**v16)(uint64_t, uint64_t);
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  void v21[2];
  void (**v22)(char *, char *, uint64_t);
  uint64_t v23;
  unsigned int (**v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v28 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v27 = (char *)v21 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(a1 + 16);
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  uint64_t v29 = Set.init(minimumCapacity:)();
  if (v10)
  {
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = v11 + 40;
    unint64_t v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    BOOL v25 = v12;
    uint64_t v22 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v23 = v14;
    uint64_t v26 = v11;
    uint64_t v16 = (void (**)(uint64_t, uint64_t))(v11 - 8);
    v21[1] = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v18 = (uint64_t)v27;
    uint64_t v17 = v28;
    while (1)
    {
      v25(v9, v13, v2);
      Swift::Int v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v9, 0, 1, v2);
      if ((*v24)(v9, 1, v2) == 1) {
        break;
      }
      (*v22)(v17, v9, v2);
      specialized Set._Variant.insert(_:)(v18, v17);
      (*v16)(v18, v2);
      v13 += v23;
      if (!--v10) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    Swift::Int v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v19(v9, 1, 1, v2);
  }
  return v29;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;

  uint64_t v2 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember();
  unint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      unsigned int v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v2 = type metadata accessor for PresenceSessionInfo.Participant(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  unsigned int v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v4);
  uint64_t v28 = (uint64_t)&v27 - v8;
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3(&lazy protocol witness table cache variable for type PresenceSessionInfo.Participant and conformance PresenceSessionInfo.Participant, (void (*)(uint64_t))type metadata accessor for PresenceSessionInfo.Participant);
  uint64_t v12 = Set.init(minimumCapacity:)();
  uint64_t v30 = v11;
  if (v11)
  {
    uint64_t v13 = 0;
    uint64_t v29 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v14 = *(void *)(v3 + 72);
    do
    {
      _s15GroupActivities11ParticipantVWOcTm_1(v29 + v14 * v13, (uint64_t)v10, type metadata accessor for PresenceSessionInfo.Participant);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      swift_bridgeObjectRetain();
      dispatch thunk of Hashable.hash(into:)();
      uint64_t v17 = &v10[*(int *)(v2 + 20)];
      String.hash(into:)();
      uint64_t v18 = *(int *)(v2 + 24);
      Hasher._combine(_:)(v10[v18]);
      Swift::Int v19 = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v12 + 32);
      unint64_t v21 = v19 & ~v20;
      uint64_t v22 = *(void *)(v12 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21;
      uint64_t v31 = v13;
      if (v22)
      {
        uint64_t v23 = ~v20;
        while (1)
        {
          _s15GroupActivities11ParticipantVWOcTm_1(*(void *)(v12 + 48) + v21 * v14, (uint64_t)v6, type metadata accessor for PresenceSessionInfo.Participant);
          if (static UUID.== infix(_:_:)())
          {
            unint64_t v24 = &v6[*(int *)(v2 + 20)];
            BOOL v25 = *(void *)v24 == *(void *)v17 && *((void *)v24 + 1) == *((void *)v17 + 1);
            if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && v6[*(int *)(v2 + 24)] == v10[v18]) {
              break;
            }
          }
          _s15GroupActivities11ParticipantVWOhTm_0((uint64_t)v6, type metadata accessor for PresenceSessionInfo.Participant);
          unint64_t v21 = (v21 + 1) & v23;
          if (((*(void *)(v12 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
            goto LABEL_3;
          }
        }
        _s15GroupActivities11ParticipantVWOhTm_0((uint64_t)v6, type metadata accessor for PresenceSessionInfo.Participant);
      }
      else
      {
LABEL_3:
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v16 = v28;
        _s15GroupActivities11ParticipantVWOcTm_1((uint64_t)v10, v28, type metadata accessor for PresenceSessionInfo.Participant);
        uint64_t v32 = v12;
        specialized _NativeSet.insertNew(_:at:isUnique:)(v16, v21, isUniquelyReferenced_nonNull_native);
        uint64_t v12 = v32;
      }
      swift_bridgeObjectRelease();
      uint64_t v13 = v31 + 1;
      _s15GroupActivities11ParticipantVWOhTm_0((uint64_t)v10, type metadata accessor for PresenceSessionInfo.Participant);
    }
    while (v13 != v30);
  }
  return v12;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v2 = type metadata accessor for UTType();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  unsigned int v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
  unint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v9)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v6, v14, v2);
      specialized Set._Variant.insert(_:)((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v8, v2);
      v14 += v15;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LinkManager.Errors and conformance LinkManager.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkManager.Errors and conformance LinkManager.Errors;
  if (!lazy protocol witness table cache variable for type LinkManager.Errors and conformance LinkManager.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkManager.Errors and conformance LinkManager.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkManager.Errors and conformance LinkManager.Errors;
  if (!lazy protocol witness table cache variable for type LinkManager.Errors and conformance LinkManager.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkManager.Errors and conformance LinkManager.Errors);
  }
  return result;
}

uint64_t type metadata accessor for LinkManager.Attachment(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, type metadata singleton initialization cache for LinkManager.Attachment);
}

uint64_t partial apply for closure #1 in LinkManager.fetchAttachmentLedgerTopic()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in LinkManager.fetchAttachmentLedgerTopic()(a1, v4, v5, v6);
}

uint64_t _s15GroupActivities11ParticipantVWOcTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  return specialized Set.init<A>(_:)(a1, (unint64_t *)&lazy cache variable for type metadata for TUHandle, 0x1E4FADBD8, (unint64_t *)&lazy protocol witness table cache variable for type TUHandle and conformance NSObject, (void (*)(id *, uint64_t))specialized Set._Variant.insert(_:));
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, void (*a5)(id *, uint64_t))
{
  unint64_t v9 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for OS_dispatch_queue(0, a2);
  lazy protocol witness table accessor for type CPParticipant and conformance NSObject(a4, a2);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v9)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v11) {
      return v17;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v11) {
      return v17;
    }
  }
  if (v11 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        uint64_t v13 = MEMORY[0x1A624E900](i, a1);
        a5(&v16, v13);
      }
    }
    else
    {
      uint64_t v14 = (void **)(a1 + 32);
      do
      {
        uint64_t v15 = *v14++;
        a5(&v16, (uint64_t)v15);

        --v11;
      }
      while (v11);
    }
    return v17;
  }
  __break(1u);
  return result;
}

unint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1, void *a2)
{
  uint64_t v27 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for LinkManager.Attachment(0);
  uint64_t v22 = *(void *)(v26 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v26);
  uint64_t v25 = (uint64_t)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v21 = (uint64_t)&v20 - v9;
  if (a1 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    if (v10) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10)
    {
LABEL_3:
      unint64_t v24 = a1 & 0xC000000000000001;
      uint64_t v11 = (unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
      unint64_t v12 = MEMORY[0x1E4FBC860];
      uint64_t v13 = 4;
      unint64_t v23 = a1;
      while (1)
      {
        uint64_t v14 = v13 - 4;
        if (v24)
        {
          a1 = MEMORY[0x1A624E900](v13 - 4, a1);
          uint64_t v15 = v13 - 3;
          if (__OFADD__(v14, 1)) {
            goto LABEL_20;
          }
        }
        else
        {
          a1 = *(void *)(a1 + 8 * v13);
          swift_retain();
          uint64_t v15 = v13 - 3;
          if (__OFADD__(v14, 1))
          {
LABEL_20:
            __break(1u);
            goto LABEL_21;
          }
        }
        unint64_t v28 = a1;
        closure #1 in closure #1 in LinkManager.attachmentLedgerTopic.willset((uint64_t *)&v28, v27, (uint64_t)v6);
        if (v2)
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v12;
        }
        swift_release();
        if ((*v11)(v6, 1, v26) == 1)
        {
          outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
        }
        else
        {
          uint64_t v16 = v21;
          _s15GroupActivities11ParticipantVWObTm_0((uint64_t)v6, v21, type metadata accessor for LinkManager.Attachment);
          _s15GroupActivities11ParticipantVWObTm_0(v16, v25, type metadata accessor for LinkManager.Attachment);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1, v12);
          }
          unint64_t v18 = *(void *)(v12 + 16);
          unint64_t v17 = *(void *)(v12 + 24);
          if (v18 >= v17 >> 1) {
            unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1, v12);
          }
          *(void *)(v12 + 16) = v18 + 1;
          _s15GroupActivities11ParticipantVWObTm_0(v25, v12+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(void *)(v22 + 72) * v18, type metadata accessor for LinkManager.Attachment);
        }
        a1 = v23;
        ++v13;
        if (v15 == v10)
        {
          swift_bridgeObjectRelease();
          return v12;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E4FBC860];
}

uint64_t specialized AttachmentUploadTask.init(topic:file:developerMetadata:id:manager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v45 = a4;
  uint64_t v46 = a5;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v39 = a1;
  uint64_t v9 = type metadata accessor for Asset.Protector();
  uint64_t v41 = *(void *)(v9 - 8);
  uint64_t v42 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v40 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SymmetricKeySize();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v36 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SymmetricKey();
  uint64_t v37 = *(void *)(v13 - 8);
  uint64_t v38 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v35 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AttachmentUploadTask.State>);
  uint64_t v33 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34);
  uint64_t v32 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for AssetManager();
  uint64_t v53 = &protocol witness table for AssetManager;
  *(void *)&long long v51 = a6;
  swift_defaultActor_initialize();
  uint64_t v31 = OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_stateMachine;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachine<AttachmentUploadTask.State, AttachmentUploadTask.Event>.Transition>);
  uint64_t v29 = 8
      * *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachine<AttachmentUploadTask.State, AttachmentUploadTask.Event>.Transition)
                              - 8)
                  + 72);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1A38FB5A0;
  LOBYTE(v47) = 0;
  char v50 = 1;
  char v49 = 0;
  lazy protocol witness table accessor for type AttachmentUploadTask.State and conformance AttachmentUploadTask.State();
  lazy protocol witness table accessor for type AttachmentUploadTask.Event and conformance AttachmentUploadTask.Event();
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v47) = 1;
  char v50 = 2;
  char v49 = 2;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v47) = 2;
  char v50 = 5;
  char v49 = 3;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v47) = 2;
  char v50 = 2;
  char v49 = 6;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v47) = 2;
  char v50 = 2;
  char v49 = 7;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v47) = 2;
  char v50 = 5;
  char v49 = 5;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v47) = 3;
  char v50 = 3;
  char v49 = 6;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v47) = 2;
  char v50 = 3;
  char v49 = 4;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v47) = 1;
  char v50 = 5;
  char v49 = 1;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v47) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachine<AttachmentUploadTask.State, AttachmentUploadTask.Event>);
  swift_allocObject();
  *(void *)(a7 + v31) = StateMachine.init(initialState:transitions:)();
  *(void *)(a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_topicUploadTask) = 0;
  *(void *)(a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler) = 0;
  uint64_t v16 = a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask__state;
  LOBYTE(v47) = 0;
  unint64_t v17 = v32;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v16, v17, v34);
  *(void *)(a7 + 112) = v39;
  swift_retain();
  static SymmetricKeySize.bits256.getter();
  unint64_t v18 = v35;
  SymmetricKey.init(size:)();
  uint64_t v20 = v37;
  uint64_t v19 = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 16))(a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_key, v18, v38);
  SymmetricKey.withUnsafeBytes<A>(_:)();
  outlined copy of Data._Representation(v47, v48);
  uint64_t v21 = v40;
  Asset.Protector.init(securityKey:privacyKey:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v19);
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_protector, v21, v42);
  outlined init with take of TypedPayloadDecoding(&v51, a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_assetManager);
  uint64_t v22 = a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_file;
  uint64_t v23 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(v22, v43, v23);
  unint64_t v24 = (void *)(a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_developerMetadata);
  uint64_t v25 = v45;
  void *v24 = v44;
  v24[1] = v25;
  uint64_t v26 = a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_id;
  uint64_t v27 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(v26, v46, v27);
  return a7;
}

uint64_t _s15GroupActivities11ParticipantVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in LinkManager.fetchAttachment(attachmentID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return closure #1 in LinkManager.fetchAttachment(attachmentID:)(a1, a2, a3, v3);
}

uint64_t outlined init with copy of LinkManager.Attachment?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LinkManager.Attachment?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _s15GroupActivities11ParticipantVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined consume of LinkManager.Attachment.Source(uint64_t a1, unint64_t a2, char a3)
{
  if (a3) {
    return outlined consume of Data?(a1, a2);
  }
  else {
    return swift_release();
  }
}

uint64_t type metadata accessor for LinkManager(uint64_t a1)
{
  return type metadata accessor for AnyGroupActivity.MetadataProvider(a1, (uint64_t *)&type metadata singleton initialization cache for LinkManager);
}

uint64_t objectdestroyTm_4()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

unint64_t outlined copy of LinkManager.Attachment.State(unint64_t result)
{
  if (result >= 3) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1A3890A38()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1A3890A70()
{
  unint64_t v1 = (int *)(type metadata accessor for LinkManager.Attachment(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v13 = *(void *)(*(void *)v1 + 64);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = *(void *)(v5 + 64);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v7(v0 + v3, v4);
  outlined consume of LinkManager.Attachment.Source(*(void *)(v0 + v3 + v1[8]), *(void *)(v0 + v3 + v1[8] + 8), *(unsigned char *)(v0 + v3 + v1[8] + 16));
  uint64_t v8 = v0 + v3 + v1[9];
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  if (*(void *)(v0 + v3 + v1[10]) >= 3uLL) {
    swift_release();
  }
  unint64_t v10 = (((v13 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6;
  swift_release();
  v7(v0 + v10, v4);

  return MEMORY[0x1F4186498](v0, v10 + v12, v2 | v6 | 7);
}

uint64_t partial apply for closure #2 in LinkManager.fetchAttachment(attachmentID:generator:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for LinkManager.Attachment(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for UUID();
  uint64_t v8 = v1[2];
  uint64_t v9 = v1[3];
  unint64_t v10 = (int *)v1[4];
  uint64_t v11 = v1[5];
  uint64_t v12 = v1[6];
  uint64_t v13 = *(void *)((char *)v1 + v7);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v14;
  *uint64_t v14 = v3;
  v14[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #2 in LinkManager.fetchAttachment(attachmentID:generator:)(a1, v8, v9, v10, v11, v12, (uint64_t)v1 + v6, v13);
}

uint64_t outlined copy of LinkManager.Attachment.Source(uint64_t a1, unint64_t a2, char a3)
{
  if (a3) {
    return outlined copy of Data?(a1, a2);
  }
  else {
    return swift_retain();
  }
}

unint64_t outlined consume of LinkManager.Attachment.State(unint64_t result)
{
  if (result >= 3) {
    return swift_release();
  }
  return result;
}

uint64_t outlined assign with copy of LinkManager.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LinkManager.Attachment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1A3890F2C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xF8))();
  *a2 = result;
  return result;
}

uint64_t sub_1A3890F88(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x100);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1A3890FF4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x118))();
  *a2 = result;
  return result;
}

uint64_t sub_1A3891058(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x120);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A38910C4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x130))();
  *a2 = result;
  return result;
}

uint64_t sub_1A3891128(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x138);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1A3891194@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x168))();
  *a2 = result;
  return result;
}

uint64_t sub_1A38911F8(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x170);
  uint64_t v3 = swift_unknownObjectRetain();
  return v2(v3);
}

uint64_t sub_1A3891264@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x198))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1A38912CC(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x1A0))(*a1);
}

uint64_t ObjC metadata update function for LinkManager()
{
  return type metadata accessor for LinkManager(0);
}

void type metadata completion function for LinkManager()
{
  type metadata accessor for CurrentSubject<PluginAttachmentLedgerTopicProvider?>(319, (unint64_t *)&lazy cache variable for type metadata for CurrentSubject<AttachmentLedgerTopic?>, &demangling cache variable for type metadata for AttachmentLedgerTopic?);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CurrentSubject<PluginAttachmentLedgerTopicProvider?>(319, (unint64_t *)&lazy cache variable for type metadata for CurrentSubject<[LinkManager.Attachment]>, &demangling cache variable for type metadata for [LinkManager.Attachment]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for UUID();
      if (v2 <= 0x3F)
      {
        type metadata accessor for Participant();
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

uint64_t method lookup function for LinkManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LinkManager);
}

uint64_t dispatch thunk of LinkManager.attachmentLedgerTopic.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of LinkManager.attachmentLedgerTopic.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of LinkManager.attachmentLedgerTopic.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of LinkManager.$attachmentLedgerTopic.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of LinkManager.pendingLocalAttachments.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of LinkManager.pendingLocalAttachments.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of LinkManager.pendingLocalAttachments.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of LinkManager.attachments.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of LinkManager.attachments.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of LinkManager.attachments.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of LinkManager.$attachments.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of LinkManager.dataCryptor.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of LinkManager.dataCryptor.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of LinkManager.dataCryptor.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of LinkManager.hasConnectedOnce.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of LinkManager.hasConnectedOnce.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of LinkManager.hasConnectedOnce.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of LinkManager.receivedDataHandler.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of LinkManager.receivedDataHandler.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of LinkManager.receivedDataHandler.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of LinkManager.onFirstConnectedHandler.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of LinkManager.onFirstConnectedHandler.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of LinkManager.onFirstConnectedHandler.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of LinkManager.invalidationHandler.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of LinkManager.invalidationHandler.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of LinkManager.invalidationHandler.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of LinkManager.catchupNeededHandler.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of LinkManager.catchupNeededHandler.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x200))();
}

uint64_t dispatch thunk of LinkManager.catchupNeededHandler.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x208))();
}

uint64_t dispatch thunk of LinkManager.requestEncryptionKeysHandler.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x210))();
}

uint64_t dispatch thunk of LinkManager.requestEncryptionKeysHandler.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x218))();
}

uint64_t dispatch thunk of LinkManager.requestEncryptionKeysHandler.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x220))();
}

uint64_t dispatch thunk of LinkManager.__allocating_init(identifier:groupUUID:topicManager:topic:localParticipant:unreliableMessengerConfig:featureFlags:)()
{
  return (*(uint64_t (**)(void))(v0 + 552))();
}

uint64_t dispatch thunk of LinkManager.resume()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x230))();
}

uint64_t dispatch thunk of LinkManager.close()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x238))();
}

uint64_t getEnumTagSinglePayload for LinkManager.Errors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for LinkManager.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A3891EC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LinkManager.Errors()
{
  return &type metadata for LinkManager.Errors;
}

void *initializeBufferWithCopyOfBuffer for LinkManager.Attachment(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
LABEL_6:
    swift_retain();
    return a1;
  }
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
  uint64_t v8 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = *(void *)((char *)a2 + v8);
  unint64_t v11 = *(void *)((char *)a2 + v8 + 8);
  char v12 = *((unsigned char *)a2 + v8 + 16);
  outlined copy of LinkManager.Attachment.Source(v10, v11, v12);
  *(void *)uint64_t v9 = v10;
  *((void *)v9 + 1) = v11;
  v9[16] = v12;
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  uint64_t v17 = a3[8];
  unint64_t v18 = *(void *)((char *)a2 + v17);
  if (v18 >= 3)
  {
    *(void *)((char *)a1 + v17) = v18;
    goto LABEL_6;
  }
  *(void *)((char *)a1 + v17) = v18;
  return a1;
}

unint64_t destroy for LinkManager.Attachment(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  outlined consume of LinkManager.Attachment.Source(*(void *)(a1 + a2[6]), *(void *)(a1 + a2[6] + 8), *(unsigned char *)(a1 + a2[6] + 16));
  uint64_t v5 = a1 + a2[7];
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  unint64_t result = *(void *)(a1 + a2[8]);
  if (result >= 3)
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for LinkManager.Attachment(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = *(void *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  char v11 = *(unsigned char *)(a2 + v7 + 16);
  outlined copy of LinkManager.Attachment.Source(v9, v10, v11);
  *(void *)uint64_t v8 = v9;
  *(void *)(v8 + 8) = v10;
  *(unsigned char *)(v8 + 16) = v11;
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = a3[8];
  unint64_t v17 = *(void *)(a2 + v16);
  if (v17 >= 3) {
    unint64_t v17 = swift_retain();
  }
  *(void *)(a1 + v16) = v17;
  return a1;
}

uint64_t assignWithCopy for LinkManager.Attachment(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)v9;
  unint64_t v11 = *(void *)(v9 + 8);
  char v12 = *(unsigned char *)(v9 + 16);
  outlined copy of LinkManager.Attachment.Source(*(void *)v9, v11, v12);
  uint64_t v13 = *(void *)v8;
  unint64_t v14 = *(void *)(v8 + 8);
  char v15 = *(unsigned char *)(v8 + 16);
  *(void *)uint64_t v8 = v10;
  *(void *)(v8 + 8) = v11;
  *(unsigned char *)(v8 + 16) = v12;
  outlined consume of LinkManager.Attachment.Source(v13, v14, v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  uint64_t v20 = a3[8];
  uint64_t v21 = (unint64_t *)(a1 + v20);
  unint64_t v22 = *(void *)(a2 + v20);
  if (*(void *)(a1 + v20) >= 3uLL)
  {
    if (v22 >= 3)
    {
      *uint64_t v21 = v22;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1 + v20, (uint64_t *)&demangling cache variable for type metadata for Task<(), Error>);
      *uint64_t v21 = *(void *)(a2 + v20);
    }
  }
  else
  {
    *uint64_t v21 = v22;
    if (v22 >= 3) {
      swift_retain();
    }
  }
  return a1;
}

uint64_t initializeWithTake for LinkManager.Attachment(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(unsigned char *)(v8 + 16) = *(unsigned char *)(v9 + 16);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for LinkManager.Attachment(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 16);
  uint64_t v11 = *(void *)v8;
  unint64_t v12 = *(void *)(v8 + 8);
  char v13 = *(unsigned char *)(v8 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(unsigned char *)(v8 + 16) = v10;
  outlined consume of LinkManager.Attachment.Source(v11, v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 40))(v15, v16, v17);
  uint64_t v18 = a3[8];
  uint64_t v19 = (unint64_t *)(a1 + v18);
  unint64_t v20 = *(void *)(a2 + v18);
  if (*(void *)(a1 + v18) >= 3uLL)
  {
    if (v20 >= 3)
    {
      *uint64_t v19 = v20;
      swift_release();
      return a1;
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(a1 + v18, (uint64_t *)&demangling cache variable for type metadata for Task<(), Error>);
    unint64_t v20 = *(void *)(a2 + v18);
  }
  *uint64_t v19 = v20;
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkManager.Attachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1A389260C);
}

uint64_t sub_1A389260C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 28);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 32));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  int v15 = v14 - 3;
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkManager.Attachment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1A3892740);
}

uint64_t sub_1A3892740(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for URL();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 32)) = (a2 + 2);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 28);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for LinkManager.Attachment()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t destroy for LinkManager.Attachment.Source(uint64_t a1)
{
  return outlined consume of LinkManager.Attachment.Source(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for LinkManager.Attachment.Source(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of LinkManager.Attachment.Source(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for LinkManager.Attachment.Source(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of LinkManager.Attachment.Source(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of LinkManager.Attachment.Source(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for LinkManager.Attachment.Source(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of LinkManager.Attachment.Source(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkManager.Attachment.Source(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkManager.Attachment.Source(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for LinkManager.Attachment.Source(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for LinkManager.Attachment.Source(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for LinkManager.Attachment.Source()
{
  return &type metadata for LinkManager.Attachment.Source;
}

uint64_t *initializeBufferWithCopyOfBuffer for LinkManager.Attachment.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_retain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for LinkManager.Attachment.State(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_release();
  }
  return result;
}

unint64_t *assignWithCopy for LinkManager.Attachment.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_retain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain();
    swift_release();
  }
  return a1;
}

unint64_t *assignWithTake for LinkManager.Attachment.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkManager.Attachment.State(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for LinkManager.Attachment.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LinkManager.Attachment.State()
{
  return &type metadata for LinkManager.Attachment.State;
}

unsigned char *storeEnumTagSinglePayload for LinkManager.LinkError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A3892DC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LinkManager.LinkError()
{
  return &type metadata for LinkManager.LinkError;
}

unsigned char *storeEnumTagSinglePayload for LinkManager.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A3892EC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for LinkManager.State()
{
  return &unk_1EF719BD8;
}

unint64_t lazy protocol witness table accessor for type LinkManager.State and conformance LinkManager.State()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkManager.State and conformance LinkManager.State;
  if (!lazy protocol witness table cache variable for type LinkManager.State and conformance LinkManager.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkManager.State and conformance LinkManager.State);
  }
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed [UInt64]?) -> (@out ())(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed Error) -> (@out ())(a1, *(uint64_t (**)(uint64_t *))(v1 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed [UInt64]?) -> ()(void *a1)
{
  return thunk for @escaping @callee_guaranteed (@guaranteed [UInt64]?) -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned UInt64) -> ()(void *a1)
{
  return thunk for @escaping @callee_guaranteed (@unowned UInt64) -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ()(void *a1)
{
  return thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t _sytIegr_Ieg_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Data, @in_guaranteed UInt64, @in_guaranteed SendReliability) -> (@out ())(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(uint64_t (**)(void *, uint64_t *, uint64_t))(v4 + 16);
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v7 = a3;
  return v5(v8, &v7, a4);
}

uint64_t sub_1A3892FE4()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64, @in_guaranteed SendReliability) -> ()(void *a1, void *a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, void, void, uint64_t))(v3 + 16))(*a1, a1[1], *a2, a3);
}

void partial apply for closure #1 in LinkManager.attachmentLedgerTopic.willset(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  closure #1 in LinkManager.attachmentLedgerTopic.willset(a1, v2, a2);
}

void partial apply for closure #2 in LinkManager.attachmentLedgerTopic.willset(uint64_t a1)
{
  closure #2 in LinkManager.attachmentLedgerTopic.willset(a1, v1);
}

uint64_t lazy protocol witness table accessor for type CPParticipant and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for OS_dispatch_queue(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttachmentUploadTask.State and conformance AttachmentUploadTask.State()
{
  unint64_t result = lazy protocol witness table cache variable for type AttachmentUploadTask.State and conformance AttachmentUploadTask.State;
  if (!lazy protocol witness table cache variable for type AttachmentUploadTask.State and conformance AttachmentUploadTask.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentUploadTask.State and conformance AttachmentUploadTask.State);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentUploadTask.State and conformance AttachmentUploadTask.State;
  if (!lazy protocol witness table cache variable for type AttachmentUploadTask.State and conformance AttachmentUploadTask.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentUploadTask.State and conformance AttachmentUploadTask.State);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttachmentUploadTask.Event and conformance AttachmentUploadTask.Event()
{
  unint64_t result = lazy protocol witness table cache variable for type AttachmentUploadTask.Event and conformance AttachmentUploadTask.Event;
  if (!lazy protocol witness table cache variable for type AttachmentUploadTask.Event and conformance AttachmentUploadTask.Event)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentUploadTask.Event and conformance AttachmentUploadTask.Event);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentUploadTask.Event and conformance AttachmentUploadTask.Event;
  if (!lazy protocol witness table cache variable for type AttachmentUploadTask.Event and conformance AttachmentUploadTask.Event)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentUploadTask.Event and conformance AttachmentUploadTask.Event);
  }
  return result;
}

uint64_t sub_1A3893160()
{
  uint64_t v1 = *(void *)(type metadata accessor for Participant() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, v4, v5);
}

uint64_t outlined init with take of (key: UInt64, value: PubSubTopic.Participant)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: PubSubTopic.Participant));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AttachmentUploadTask.__allocating_init(topic:file:developerMetadata:id:manager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = *(void *)(a6 + 24);
  uint64_t v14 = *(void *)(a6 + 32);
  uint64_t v15 = __swift_mutable_project_boxed_opaque_existential_1(a6, v13);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v17);
  uint64_t v19 = specialized AttachmentUploadTask.init(topic:file:developerMetadata:id:manager:)(a1, a2, a3, a4, a5, (uint64_t)v17, v12, v13, v14);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a6);
  return v19;
}

BOOL static AttachmentUploadTask.State.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void AttachmentUploadTask.State.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int AttachmentUploadTask.State.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL static AttachmentUploadTask.Errors.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void AttachmentUploadTask.Errors.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int AttachmentUploadTask.Errors.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t AttachmentUploadTask.topic.getter()
{
  return swift_retain();
}

uint64_t AttachmentUploadTask.file.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentUploadTask.file.getter(&OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_file, MEMORY[0x1E4F276F0], a1);
}

uint64_t AttachmentUploadTask.developerMetadata.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_developerMetadata);
  outlined copy of Data?(v1, *(void *)(v0 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_developerMetadata + 8));
  return v1;
}

uint64_t AttachmentUploadTask.id.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentUploadTask.file.getter(&OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_id, MEMORY[0x1E4F27990], a1);
}

uint64_t AttachmentUploadTask.key.getter@<X0>(uint64_t a1@<X8>)
{
  return AttachmentUploadTask.file.getter(&OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_key, MEMORY[0x1E4F25000], a1);
}

uint64_t AttachmentUploadTask.file.getter@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3 + *a1;
  uint64_t v6 = a2(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);

  return v7(a3, v5, v6);
}

uint64_t key path getter for AttachmentUploadTask.protector : AttachmentUploadTask@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_protector;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Asset.Protector();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t key path setter for AttachmentUploadTask.protector : AttachmentUploadTask(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Asset.Protector();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v8 = *a2 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_protector;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v8, v7, v4);
  return swift_endAccess();
}

uint64_t AttachmentUploadTask.protector.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_protector;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Asset.Protector();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AttachmentUploadTask.protector.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_protector;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Asset.Protector();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*AttachmentUploadTask.protector.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path setter for AttachmentUploadTask.assetManager : AttachmentUploadTask(uint64_t a1, void *a2)
{
  outlined init with copy of AudioSessionAssertionManager(a1, (uint64_t)v5);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_assetManager;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  outlined init with take of TypedPayloadDecoding(v5, v3);
  return swift_endAccess();
}

uint64_t AttachmentUploadTask.assetManager.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_assetManager;
  swift_beginAccess();
  return outlined init with copy of AudioSessionAssertionManager(v3, a1);
}

uint64_t AttachmentUploadTask.assetManager.setter(long long *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_assetManager;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  outlined init with take of TypedPayloadDecoding(a1, v3);
  return swift_endAccess();
}

uint64_t (*AttachmentUploadTask.assetManager.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t AttachmentUploadTask.topicUploadTask.getter()
{
  return GroupSession.playbackSyncerLink.getter();
}

uint64_t AttachmentUploadTask.topicUploadTask.setter(uint64_t a1)
{
  return AttachmentUploadTask.topicUploadTask.setter(a1, &OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_topicUploadTask);
}

uint64_t (*AttachmentUploadTask.topicUploadTask.modify())()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t key path setter for AttachmentUploadTask.topicUploadTask : AttachmentUploadTask(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (void *)(*a2 + *a5);
  swift_beginAccess();
  void *v6 = v5;
  swift_retain();
  return swift_release();
}

uint64_t AttachmentUploadTask.signalHandler.getter()
{
  return GroupSession.playbackSyncerLink.getter();
}

uint64_t AttachmentUploadTask.signalHandler.setter(uint64_t a1)
{
  return AttachmentUploadTask.topicUploadTask.setter(a1, &OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler);
}

uint64_t AttachmentUploadTask.topicUploadTask.setter(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  void *v4 = a1;
  return swift_release();
}

uint64_t (*AttachmentUploadTask.signalHandler.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t key path getter for AttachmentUploadTask.state : AttachmentUploadTask@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for AttachmentUploadTask.state : AttachmentUploadTask()
{
  return static Published.subscript.setter();
}

uint64_t AttachmentUploadTask.state.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t AttachmentUploadTask.state.setter()
{
  return static Published.subscript.setter();
}

void (*AttachmentUploadTask.state.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  void v2[6] = static Published.subscript.modify();
  return GroupSession.internalActiveParticipants.modify;
}

uint64_t key path getter for AttachmentUploadTask.$state : AttachmentUploadTask()
{
  return swift_endAccess();
}

uint64_t key path setter for AttachmentUploadTask.$state : AttachmentUploadTask(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AttachmentUploadTask.State>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AttachmentUploadTask.State>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t AttachmentUploadTask.$state.getter()
{
  return swift_endAccess();
}

uint64_t AttachmentUploadTask.$state.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AttachmentUploadTask.State>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AttachmentUploadTask.State>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*AttachmentUploadTask.$state.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AttachmentUploadTask.State>.Publisher);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask__state;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AttachmentUploadTask.State>);
  Published.projectedValue.getter();
  swift_endAccess();
  return SystemCoordinatorHostManager.$configurations.modify;
}

uint64_t AttachmentUploadTask.init(topic:file:developerMetadata:id:manager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = *(void *)(a6 + 24);
  uint64_t v14 = *(void *)(a6 + 32);
  uint64_t v15 = __swift_mutable_project_boxed_opaque_existential_1(a6, v13);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v17);
  uint64_t v19 = specialized AttachmentUploadTask.init(topic:file:developerMetadata:id:manager:)(a1, a2, a3, a4, a5, (uint64_t)v17, v6, v13, v14);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a6);
  return v19;
}

uint64_t AttachmentUploadTask.start()()
{
  v1[68] = v0;
  uint64_t v2 = type metadata accessor for SimultaneousTransferError();
  v1[69] = v2;
  v1[70] = *(void *)(v2 - 8);
  v1[71] = swift_task_alloc();
  v1[72] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Attachment.MMCSMetadata.UploadStatus();
  v1[73] = v3;
  v1[74] = *(void *)(v3 - 8);
  v1[75] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Asset();
  v1[76] = v4;
  v1[77] = *(void *)(v4 - 8);
  v1[78] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v1[79] = swift_task_alloc();
  uint64_t v5 = *(void *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) - 8);
  v1[80] = v5;
  v1[81] = *(void *)(v5 + 64);
  v1[82] = swift_task_alloc();
  v1[83] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetSkeleton?);
  v1[84] = swift_task_alloc();
  v1[85] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for AssetSkeleton();
  v1[86] = v6;
  v1[87] = *(void *)(v6 - 8);
  v1[88] = swift_task_alloc();
  v1[89] = swift_task_alloc();
  v1[90] = swift_task_alloc();
  v1[91] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UploadToken();
  v1[92] = v7;
  v1[93] = *(void *)(v7 - 8);
  v1[94] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for TaskPriority();
  v1[95] = v8;
  v1[96] = *(void *)(v8 - 8);
  v1[97] = swift_task_alloc();
  return MEMORY[0x1F4188298](AttachmentUploadTask.start(), v0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  uint64_t v18 = v0;
  if (one-time initialization token for uploadTask != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[98] = __swift_project_value_buffer(v1, (uint64_t)static Log.uploadTask);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[97];
    uint64_t v5 = v0[96];
    uint64_t v6 = v0[95];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = v16;
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v8 = AttachmentUploadTask.description.getter();
    v0[64] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    static Task<>.currentPriority.getter();
    lazy protocol witness table accessor for type AttachmentUploadTask and conformance AttachmentUploadTask(&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority, MEMORY[0x1E4FBCFE8]);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v12 = v11;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v0[56] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v2, v3, "%s Received request to start with priority: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v16, -1, -1);
    MEMORY[0x1A624F870](v7, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v13 = (void *)swift_task_alloc();
  v0[99] = v13;
  *uint64_t v13 = v0;
  v13[1] = AttachmentUploadTask.start();
  uint64_t v14 = v0[94];
  return AttachmentUploadTask.requestUploadToken()(v14);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = (void *)*v1;
  v2[100] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[68];
    return MEMORY[0x1F4188298](AttachmentUploadTask.start(), v3, 0);
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v2[101] = v4;
    void *v4 = v2;
    v4[1] = AttachmentUploadTask.start();
    uint64_t v5 = v2[94];
    return AttachmentUploadTask.createAssetUploadCoordinator(_:)((uint64_t)(v2 + 7), v5);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 816) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 544);
  if (v0) {
    uint64_t v4 = AttachmentUploadTask.start();
  }
  else {
    uint64_t v4 = AttachmentUploadTask.start();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v18 = v0;
  outlined init with take of TypedPayloadDecoding((long long *)(v0 + 56), v0 + 16);
  outlined init with copy of AudioSessionAssertionManager(v0 + 16, v0 + 176);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = v2;
    uint64_t v3 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v17 = v14;
    *(_DWORD *)uint64_t v3 = 136315394;
    uint64_t v4 = AttachmentUploadTask.description.getter();
    *(void *)(v0 + 496) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 2080;
    outlined init with copy of AudioSessionAssertionManager(v0 + 176, v0 + 256);
    outlined init with copy of URL?(v0 + 256, v0 + 296, &demangling cache variable for type metadata for AssetUploadCoordinator?);
    if (*(void *)(v0 + 320))
    {
      outlined init with take of TypedPayloadDecoding((long long *)(v0 + 296), v0 + 136);
      outlined init with copy of AudioSessionAssertionManager(v0 + 136, v0 + 96);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetUploadCoordinator);
      uint64_t v6 = String.init<A>(reflecting:)();
      uint64_t v8 = v7;
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 136);
    }
    else
    {
      uint64_t v8 = 0xE300000000000000;
      uint64_t v6 = 7104878;
    }
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + 256, &demangling cache variable for type metadata for AssetUploadCoordinator?);
    *(void *)(v0 + 520) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
    _os_log_impl(&dword_1A375F000, v1, v16, "%s Attempting to fetch skeleton from coordinator %s", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v14, -1, -1);
    MEMORY[0x1A624F870](v3, -1, -1);
  }
  else
  {
    swift_release_n();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
  }

  uint64_t v9 = *(void *)(v0 + 40);
  uint64_t v10 = *(void *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v9);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 + 8) + **(int **)(v10 + 8));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 824) = v11;
  *uint64_t v11 = v0;
  v11[1] = AttachmentUploadTask.start();
  uint64_t v12 = *(void *)(v0 + 728);
  return v15(v12, v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 544);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](AttachmentUploadTask.start(), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void);
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  os_log_type_t v56;
  NSObject *log;
  os_log_t loga;
  uint64_t v59[2];
  uint64_t v60;
  uint64_t v61;

  uint64_t v60 = v0;
  uint64_t v1 = v0 + 16;
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 696) + 16);
  v2(*(void *)(v0 + 720), *(void *)(v0 + 728), *(void *)(v0 + 688));
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v56 = v4;
    os_log_t log = v3;
    uint64_t v54 = v2;
    uint64_t v5 = *(void *)(v0 + 696);
    uint64_t v6 = *(void *)(v0 + 688);
    uint64_t v7 = *(void *)(v0 + 680);
    uint64_t v52 = *(void *)(v0 + 720);
    uint64_t v53 = *(void *)(v0 + 672);
    uint64_t v8 = swift_slowAlloc();
    uint64_t v55 = swift_slowAlloc();
    v59[0] = v55;
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v9 = AttachmentUploadTask.description.getter();
    *(void *)(v0 + 480) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    v54(v7, v52, v6);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v6);
    outlined init with copy of URL?(v7, v53, &demangling cache variable for type metadata for AssetSkeleton?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v53, 1, v6) == 1)
    {
      uint64_t v11 = 0xE300000000000000;
      uint64_t v12 = 7104878;
    }
    else
    {
      uint64_t v17 = *(void *)(v0 + 712);
      uint64_t v18 = *(void *)(v0 + 704);
      uint64_t v19 = *(void *)(v0 + 696);
      unint64_t v20 = *(void *)(v0 + 688);
      (*(void (**)(uint64_t, void, uint64_t))(v19 + 32))(v17, *(void *)(v0 + 672), v20);
      v54(v18, v17, v20);
      uint64_t v12 = String.init<A>(reflecting:)();
      uint64_t v11 = v21;
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v20);
    }
    unint64_t v22 = *(void *)(v0 + 720);
    uint64_t v23 = *(void *)(v0 + 696);
    unint64_t v24 = *(void *)(v0 + 688);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(void *)(v0 + 680), &demangling cache variable for type metadata for AssetSkeleton?);
    *(void *)(v0 + 488) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v16(v22, v24);
    _os_log_impl(&dword_1A375F000, log, v56, "%s Fetched skeleton: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v55, -1, -1);
    MEMORY[0x1A624F870](v8, -1, -1);

    uint64_t v1 = v0 + 16;
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 720);
    uint64_t v14 = *(void *)(v0 + 696);
    uint64_t v15 = *(void *)(v0 + 688);
    swift_release_n();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v16(v13, v15);
  }
  uint64_t v25 = *(void *)(v0 + 816);
  uint64_t v26 = *(void *)(v0 + 664);
  uint64_t v27 = *(void *)(v0 + 544);
  unint64_t v28 = OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_id;
  *(void *)(v0 + 832) = OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_id;
  AssetSkeleton.uploadRequest(id:key:developerMetadata:)((char *)(v27 + v28), v27 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_key, *(void *)(v27 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_developerMetadata), *(void *)(v27 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_developerMetadata + 8), v26);
  if (v25)
  {
    uint64_t v29 = *(void *)(v0 + 752);
    uint64_t v30 = *(void *)(v0 + 744);
    uint64_t v31 = *(void *)(v0 + 736);
    v16(*(void *)(v0 + 728), *(void *)(v0 + 688));
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    __swift_destroy_boxed_opaque_existential_1Tm(v1);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
    return v32();
  }
  else
  {
    uint64_t v34 = *(void *)(v0 + 664);
    uint64_t v35 = (void *)v1;
    uint64_t v36 = *(void *)(v0 + 656);
    uint64_t v37 = *(void *)(v0 + 648);
    uint64_t v38 = *(void *)(v0 + 640);
    uint64_t v39 = *(void *)(v0 + 632);
    uint64_t v40 = *(void *)(v0 + 544);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 768) + 56))(v39, 1, 1, *(void *)(v0 + 760));
    outlined init with copy of AttachmentLedgerTopic.UploadRequest(v34, v36);
    outlined init with copy of AudioSessionAssertionManager((uint64_t)v35, v0 + 216);
    uint64_t v41 = lazy protocol witness table accessor for type AttachmentUploadTask and conformance AttachmentUploadTask(&lazy protocol witness table cache variable for type AttachmentUploadTask and conformance AttachmentUploadTask, (void (*)(uint64_t))type metadata accessor for AttachmentUploadTask);
    uint64_t v42 = (*(unsigned __int8 *)(v38 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
    uint64_t v43 = (v37 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v44 = (void *)swift_allocObject();
    v44[2] = v40;
    v44[3] = v41;
    v44[4] = v40;
    outlined init with take of AttachmentLedgerTopic.UploadRequest(v36, (uint64_t)v44 + v42);
    outlined init with take of TypedPayloadDecoding((long long *)(v0 + 216), (uint64_t)v44 + v43);
    swift_retain_n();
    uint64_t v45 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v39, (uint64_t)&async function pointer to partial apply for closure #1 in AttachmentUploadTask.start(), (uint64_t)v44);
    uint64_t v46 = OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_topicUploadTask;
    *(void *)(v0 + 840) = OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_topicUploadTask;
    uint64_t v47 = (uint64_t *)(v40 + v46);
    swift_beginAccess();
    *uint64_t v47 = v45;
    swift_release();
    unint64_t v48 = *(void *)(v0 + 40);
    char v49 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1(v35, v48);
    os_log_t loga = (os_log_t)(*(void *)(v49 + 24) + **(int **)(v49 + 24));
    char v50 = (void *)swift_task_alloc();
    *(void *)(v0 + 848) = v50;
    *char v50 = v0;
    v50[1] = AttachmentUploadTask.start();
    long long v51 = *(void *)(v0 + 624);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))loga)(v51, v48, v49);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 856) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[68];
    uint64_t v4 = AttachmentUploadTask.start();
  }
  else
  {
    uint64_t v5 = v2[68];
    (*(void (**)(void, void))(v2[77] + 8))(v2[78], v2[76]);
    uint64_t v4 = AttachmentUploadTask.start();
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned char *v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned char *v41;
  uint64_t (*v42)(void);
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v57[2];
  uint64_t v58;
  uint64_t v59;

  uint64_t v58 = v0;
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    v57[0] = v4;
    *(_DWORD *)uint64_t v3 = 136315138;
    uint64_t v5 = AttachmentUploadTask.description.getter();
    *(void *)(v0 + 472) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v1, v2, "%s finished upload", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v4, -1, -1);
    MEMORY[0x1A624F870](v3, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  *(unsigned char *)(v0 + 953) = 4;
  if (dispatch thunk of StateMachine.execute(_:)())
  {
    uint64_t v7 = *(void *)(v0 + 544);
    uint64_t v8 = *(void *)(v7 + *(void *)(v0 + 840));
    *(void *)(v0 + 864) = v8;
    if (v8)
    {
      swift_retain();
      uint64_t v9 = (void *)swift_task_alloc();
      *(void *)(v0 + 872) = v9;
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      *uint64_t v9 = v0;
      v9[1] = AttachmentUploadTask.start();
      uint64_t v11 = MEMORY[0x1E4FBC848] + 8;
      uint64_t v12 = MEMORY[0x1E4FBC0F0];
      uint64_t v13 = v8;
LABEL_14:
      return MEMORY[0x1F4187D90](v10, v13, v11, v10, v12);
    }
    uint64_t v43 = (uint64_t *)(v7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler);
    swift_beginAccess();
    uint64_t v44 = *v43;
    if (v44)
    {
      swift_retain();
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      MEMORY[0x1A624E310](v44, MEMORY[0x1E4FBC848] + 8, v45, MEMORY[0x1E4FBC0F0]);
      swift_release();
    }
    uint64_t v46 = *(void *)(v0 + 832);
    uint64_t v47 = *(void *)(v0 + 544);
    (*(void (**)(void, void, void))(*(void *)(v0 + 592) + 104))(*(void *)(v0 + 600), *MEMORY[0x1E4F5AF20], *(void *)(v0 + 584));
    unint64_t v48 = (void *)swift_task_alloc();
    *(void *)(v0 + 888) = v48;
    char *v48 = v0;
    v48[1] = AttachmentUploadTask.start();
    char v49 = *(void *)(v0 + 600);
    return AttachmentLedgerTopic.updateProgress(on:with:)(v47 + v46, v49);
  }
  else
  {
    lazy protocol witness table accessor for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors();
    uint64_t v14 = (void *)swift_allocError();
    *uint64_t v15 = 0;
    swift_willThrow();
    *(void *)(v0 + 904) = v14;
    swift_retain();
    uint64_t v16 = v14;
    swift_retain();
    uint64_t v17 = v14;
    uint64_t v18 = Logger.logObject.getter();
    uint64_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      v57[0] = v21;
      *(_DWORD *)unint64_t v20 = 136315394;
      unint64_t v22 = AttachmentUploadTask.description.getter();
      *(void *)(v0 + 424) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2080;
      *(void *)(v0 + 432) = v14;
      unint64_t v24 = v14;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v25 = String.init<A>(reflecting:)();
      *(void *)(v0 + 440) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A375F000, v18, v19, "%s Failed to upload, reason: %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v21, -1, -1);
      MEMORY[0x1A624F870](v20, -1, -1);
    }
    else
    {
      swift_release_n();
    }
    *(unsigned char *)(v0 + 952) = 5;
    if (dispatch thunk of StateMachine.execute(_:)())
    {
      uint64_t v27 = *(void *)(v0 + 840);
      unint64_t v28 = *(void *)(v0 + 544);
      uint64_t v29 = *(void *)(v28 + v27);
      if (v29)
      {
        swift_retain();
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v31 = MEMORY[0x1E4FBC848] + 8;
        MEMORY[0x1A624E310](v29, MEMORY[0x1E4FBC848] + 8, v30, MEMORY[0x1E4FBC0F0]);
        swift_release();
        uint64_t v32 = *(void *)(v28 + v27);
        *(void *)(v0 + 912) = v32;
        if (v32)
        {
          swift_retain();
          uint64_t v33 = (void *)swift_task_alloc();
          *(void *)(v0 + 920) = v33;
          uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
          *uint64_t v33 = v0;
          v33[1] = AttachmentUploadTask.start();
          uint64_t v12 = MEMORY[0x1E4FBC0F0];
          uint64_t v13 = v32;
          uint64_t v11 = v31;
          goto LABEL_14;
        }
        unint64_t v28 = *(void *)(v0 + 544);
      }
      char v50 = (uint64_t *)(v28 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler);
      swift_beginAccess();
      long long v51 = *v50;
      if (v51)
      {
        swift_retain();
        uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        MEMORY[0x1A624E310](v51, MEMORY[0x1E4FBC848] + 8, v52, MEMORY[0x1E4FBC0F0]);
        swift_release();
      }
      uint64_t v53 = *(void *)(v0 + 832);
      uint64_t v54 = *(void *)(v0 + 544);
      uint64_t v55 = (void *)swift_task_alloc();
      *(void *)(v0 + 936) = v55;
      char *v55 = v0;
      v55[1] = AttachmentUploadTask.start();
      return AttachmentLedgerTopic.remove(id:)(v54 + v53);
    }
    else
    {
      uint64_t v34 = *(void *)(v0 + 752);
      uint64_t v35 = *(void *)(v0 + 744);
      uint64_t v36 = *(void *)(v0 + 736);
      uint64_t v37 = *(void *)(v0 + 728);
      uint64_t v38 = *(void *)(v0 + 696);
      uint64_t v39 = *(void *)(v0 + 688);
      uint64_t v40 = *(void *)(v0 + 664);
      swift_allocError();
      *uint64_t v41 = 0;
      swift_willThrow();

      outlined destroy of AttachmentLedgerTopic.UploadRequest(v40);
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v42 = *(uint64_t (**)(void))(v0 + 8);
      return v42();
    }
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 880) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 544);
    swift_release();
    uint64_t v4 = AttachmentUploadTask.start();
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 544);
    uint64_t v4 = AttachmentUploadTask.start();
  }
  return MEMORY[0x1F4188298](v4, v5, 0);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  swift_release();
  uint64_t v1 = (uint64_t *)(v0[68] + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler);
  swift_beginAccess();
  uint64_t v2 = *v1;
  if (*v1)
  {
    swift_retain();
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    MEMORY[0x1A624E310](v2, MEMORY[0x1E4FBC848] + 8, v3, MEMORY[0x1E4FBC0F0]);
    swift_release();
  }
  uint64_t v4 = v0[104];
  uint64_t v5 = v0[68];
  (*(void (**)(void, void, void))(v0[74] + 104))(v0[75], *MEMORY[0x1E4F5AF20], v0[73]);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[111] = v6;
  char *v6 = v0;
  v6[1] = AttachmentUploadTask.start();
  uint64_t v7 = v0[75];
  return AttachmentLedgerTopic.updateProgress(on:with:)(v5 + v4, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 896) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[75];
  uint64_t v4 = v2[74];
  uint64_t v5 = v2[73];
  uint64_t v6 = v2[68];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v7 = AttachmentUploadTask.start();
  }
  else {
    uint64_t v7 = AttachmentUploadTask.start();
  }
  return MEMORY[0x1F4188298](v7, v6, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = v0[94];
  uint64_t v2 = v0[93];
  uint64_t v3 = v0[92];
  uint64_t v4 = v0[91];
  uint64_t v5 = v0[87];
  uint64_t v6 = v0[86];
  outlined destroy of AttachmentLedgerTopic.UploadRequest(v0[83]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned char *v16;
  uint64_t (*v17)(void);
  uint64_t v19;
  void *v20;
  uint64_t v21;

  unint64_t v20 = v0;
  uint64_t v1 = (void *)v0[102];
  v0[67] = v1;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[70] + 8))(v0[72], v0[69]);
    swift_retain_n();
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      uint64_t v19 = v6;
      *(_DWORD *)uint64_t v5 = 136315138;
      uint64_t v7 = AttachmentUploadTask.description.getter();
      v0[66] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v3, v4, "%s caught SimultaneousTransferError", v5, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v6, -1, -1);
      MEMORY[0x1A624F870](v5, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t v12 = (void *)v0[102];
    uint64_t v13 = v0[94];
    uint64_t v14 = v0[93];
    uint64_t v15 = v0[92];
    lazy protocol witness table accessor for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors();
    swift_allocError();
    *uint64_t v16 = 1;
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }
  else
  {
    uint64_t v9 = v0[94];
    uint64_t v10 = v0[93];
    uint64_t v11 = v0[92];
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 928) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 544);
    swift_release();
    uint64_t v4 = AttachmentUploadTask.start();
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 544);
    uint64_t v4 = AttachmentUploadTask.start();
  }
  return MEMORY[0x1F4188298](v4, v5, 0);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  swift_release();
  uint64_t v1 = (uint64_t *)(v0[68] + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler);
  swift_beginAccess();
  uint64_t v2 = *v1;
  if (*v1)
  {
    swift_retain();
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    MEMORY[0x1A624E310](v2, MEMORY[0x1E4FBC848] + 8, v3, MEMORY[0x1E4FBC0F0]);
    swift_release();
  }
  uint64_t v4 = v0[104];
  uint64_t v5 = v0[68];
  uint64_t v6 = (void *)swift_task_alloc();
  v0[117] = v6;
  char *v6 = v0;
  v6[1] = AttachmentUploadTask.start();
  return AttachmentLedgerTopic.remove(id:)(v5 + v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 944) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 544);
  if (v0) {
    uint64_t v4 = AttachmentUploadTask.start();
  }
  else {
    uint64_t v4 = AttachmentUploadTask.start();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned char *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  uint64_t v29 = v0;
  uint64_t v1 = *(void **)(v0 + 904);
  *(void *)(v0 + 504) = v1;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v27 = v0 + 16;
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(*(void *)(v0 + 560) + 8))(*(void *)(v0 + 568), *(void *)(v0 + 552));
    swift_retain_n();
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      unint64_t v28 = v6;
      *(_DWORD *)uint64_t v5 = 136315138;
      uint64_t v7 = AttachmentUploadTask.description.getter();
      *(void *)(v0 + 456) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v3, v4, "%s caught SimultaneousTransferError", v5, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v6, -1, -1);
      MEMORY[0x1A624F870](v5, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t v17 = *(void **)(v0 + 904);
    uint64_t v18 = *(void *)(v0 + 752);
    uint64_t v19 = *(void *)(v0 + 744);
    unint64_t v20 = *(void *)(v0 + 736);
    uint64_t v21 = *(void *)(v0 + 728);
    unint64_t v22 = *(void *)(v0 + 696);
    uint64_t v23 = *(void *)(v0 + 688);
    unint64_t v24 = *(void *)(v0 + 664);
    lazy protocol witness table accessor for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors();
    swift_allocError();
    *uint64_t v25 = 1;
    swift_willThrow();

    outlined destroy of AttachmentLedgerTopic.UploadRequest(v24);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    __swift_destroy_boxed_opaque_existential_1Tm(v27);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 752);
    uint64_t v10 = *(void *)(v0 + 744);
    uint64_t v11 = *(void *)(v0 + 736);
    uint64_t v12 = *(void *)(v0 + 728);
    uint64_t v13 = *(void *)(v0 + 696);
    uint64_t v14 = *(void *)(v0 + 688);
    uint64_t v15 = *(void *)(v0 + 664);

    outlined destroy of AttachmentLedgerTopic.UploadRequest(v15);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    __swift_destroy_boxed_opaque_existential_1Tm(v27);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v16();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned char *v28;
  uint64_t (*v29)(void);
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v37;
  uint64_t v38[2];
  uint64_t v39;
  uint64_t v40;

  uint64_t v39 = v0;
  uint64_t v1 = *(void **)(v0 + 856);
  *(void *)(v0 + 904) = v1;
  swift_retain();
  uint64_t v2 = v1;
  swift_retain();
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    v38[0] = v37;
    *(_DWORD *)uint64_t v6 = 136315394;
    uint64_t v7 = AttachmentUploadTask.description.getter();
    *(void *)(v0 + 424) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    *(void *)(v0 + 432) = v1;
    uint64_t v9 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v10 = String.init<A>(reflecting:)();
    *(void *)(v0 + 440) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v4, v5, "%s Failed to upload, reason: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v37, -1, -1);
    MEMORY[0x1A624F870](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  *(unsigned char *)(v0 + 952) = 5;
  if (dispatch thunk of StateMachine.execute(_:)())
  {
    uint64_t v12 = *(void *)(v0 + 840);
    uint64_t v13 = *(void *)(v0 + 544);
    uint64_t v14 = *(void *)(v13 + v12);
    if (v14)
    {
      swift_retain();
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v16 = MEMORY[0x1E4FBC848] + 8;
      MEMORY[0x1A624E310](v14, MEMORY[0x1E4FBC848] + 8, v15, MEMORY[0x1E4FBC0F0]);
      swift_release();
      uint64_t v17 = *(void *)(v13 + v12);
      *(void *)(v0 + 912) = v17;
      if (v17)
      {
        swift_retain();
        uint64_t v18 = (void *)swift_task_alloc();
        *(void *)(v0 + 920) = v18;
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        char *v18 = v0;
        v18[1] = AttachmentUploadTask.start();
        unint64_t v20 = MEMORY[0x1E4FBC0F0];
        return MEMORY[0x1F4187D90](v19, v17, v16, v19, v20);
      }
      uint64_t v13 = *(void *)(v0 + 544);
    }
    uint64_t v30 = (uint64_t *)(v13 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler);
    swift_beginAccess();
    uint64_t v31 = *v30;
    if (v31)
    {
      swift_retain();
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      MEMORY[0x1A624E310](v31, MEMORY[0x1E4FBC848] + 8, v32, MEMORY[0x1E4FBC0F0]);
      swift_release();
    }
    uint64_t v33 = *(void *)(v0 + 832);
    uint64_t v34 = *(void *)(v0 + 544);
    uint64_t v35 = (void *)swift_task_alloc();
    *(void *)(v0 + 936) = v35;
    *uint64_t v35 = v0;
    v35[1] = AttachmentUploadTask.start();
    return AttachmentLedgerTopic.remove(id:)(v34 + v33);
  }
  else
  {
    uint64_t v21 = *(void *)(v0 + 752);
    unint64_t v22 = *(void *)(v0 + 744);
    uint64_t v23 = *(void *)(v0 + 736);
    unint64_t v24 = *(void *)(v0 + 728);
    uint64_t v25 = *(void *)(v0 + 696);
    uint64_t v26 = *(void *)(v0 + 688);
    uint64_t v27 = *(void *)(v0 + 664);
    lazy protocol witness table accessor for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors();
    swift_allocError();
    *unint64_t v28 = 0;
    swift_willThrow();

    outlined destroy of AttachmentLedgerTopic.UploadRequest(v27);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
    return v29();
  }
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned char *v28;
  uint64_t (*v29)(void);
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v37;
  uint64_t v38[2];
  uint64_t v39;
  uint64_t v40;

  uint64_t v39 = v0;
  uint64_t v1 = *(void **)(v0 + 880);
  *(void *)(v0 + 904) = v1;
  swift_retain();
  uint64_t v2 = v1;
  swift_retain();
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    v38[0] = v37;
    *(_DWORD *)uint64_t v6 = 136315394;
    uint64_t v7 = AttachmentUploadTask.description.getter();
    *(void *)(v0 + 424) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    *(void *)(v0 + 432) = v1;
    uint64_t v9 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v10 = String.init<A>(reflecting:)();
    *(void *)(v0 + 440) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v4, v5, "%s Failed to upload, reason: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v37, -1, -1);
    MEMORY[0x1A624F870](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  *(unsigned char *)(v0 + 952) = 5;
  if (dispatch thunk of StateMachine.execute(_:)())
  {
    uint64_t v12 = *(void *)(v0 + 840);
    uint64_t v13 = *(void *)(v0 + 544);
    uint64_t v14 = *(void *)(v13 + v12);
    if (v14)
    {
      swift_retain();
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v16 = MEMORY[0x1E4FBC848] + 8;
      MEMORY[0x1A624E310](v14, MEMORY[0x1E4FBC848] + 8, v15, MEMORY[0x1E4FBC0F0]);
      swift_release();
      uint64_t v17 = *(void *)(v13 + v12);
      *(void *)(v0 + 912) = v17;
      if (v17)
      {
        swift_retain();
        uint64_t v18 = (void *)swift_task_alloc();
        *(void *)(v0 + 920) = v18;
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        char *v18 = v0;
        v18[1] = AttachmentUploadTask.start();
        unint64_t v20 = MEMORY[0x1E4FBC0F0];
        return MEMORY[0x1F4187D90](v19, v17, v16, v19, v20);
      }
      uint64_t v13 = *(void *)(v0 + 544);
    }
    uint64_t v30 = (uint64_t *)(v13 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler);
    swift_beginAccess();
    uint64_t v31 = *v30;
    if (v31)
    {
      swift_retain();
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      MEMORY[0x1A624E310](v31, MEMORY[0x1E4FBC848] + 8, v32, MEMORY[0x1E4FBC0F0]);
      swift_release();
    }
    uint64_t v33 = *(void *)(v0 + 832);
    uint64_t v34 = *(void *)(v0 + 544);
    uint64_t v35 = (void *)swift_task_alloc();
    *(void *)(v0 + 936) = v35;
    *uint64_t v35 = v0;
    v35[1] = AttachmentUploadTask.start();
    return AttachmentLedgerTopic.remove(id:)(v34 + v33);
  }
  else
  {
    uint64_t v21 = *(void *)(v0 + 752);
    unint64_t v22 = *(void *)(v0 + 744);
    uint64_t v23 = *(void *)(v0 + 736);
    unint64_t v24 = *(void *)(v0 + 728);
    uint64_t v25 = *(void *)(v0 + 696);
    uint64_t v26 = *(void *)(v0 + 688);
    uint64_t v27 = *(void *)(v0 + 664);
    lazy protocol witness table accessor for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors();
    swift_allocError();
    *unint64_t v28 = 0;
    swift_willThrow();

    outlined destroy of AttachmentLedgerTopic.UploadRequest(v27);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
    return v29();
  }
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v25 = v0;
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v17 = *(id *)(v0 + 896);
    unint64_t v22 = *(void *)(v0 + 736);
    uint64_t v23 = *(void *)(v0 + 752);
    unint64_t v20 = *(void *)(v0 + 728);
    uint64_t v21 = *(void *)(v0 + 744);
    uint64_t v3 = *(void *)(v0 + 696);
    uint64_t v18 = *(void *)(v0 + 664);
    uint64_t v19 = *(void *)(v0 + 688);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    unint64_t v24 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v6 = AttachmentUploadTask.description.getter();
    *(void *)(v0 + 464) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v5, -1, -1);
    MEMORY[0x1A624F870](v4, -1, -1);

    outlined destroy of AttachmentLedgerTopic.UploadRequest(v18);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v20, v19);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v22);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 752);
    uint64_t v9 = *(void *)(v0 + 744);
    uint64_t v10 = *(void *)(v0 + 736);
    uint64_t v11 = *(void *)(v0 + 728);
    uint64_t v12 = *(void *)(v0 + 696);
    uint64_t v13 = *(void *)(v0 + 688);
    uint64_t v14 = *(void *)(v0 + 664);

    swift_release_n();
    outlined destroy of AttachmentLedgerTopic.UploadRequest(v14);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = *(void *)(v0 + 752);
  uint64_t v2 = *(void *)(v0 + 744);
  uint64_t v3 = *(void *)(v0 + 736);
  uint64_t v4 = *(void *)(v0 + 728);
  uint64_t v5 = *(void *)(v0 + 696);
  uint64_t v6 = *(void *)(v0 + 688);
  uint64_t v7 = *(void *)(v0 + 664);

  outlined destroy of AttachmentLedgerTopic.UploadRequest(v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned char *v35;
  void *v37;
  uint64_t v38;
  uint64_t v39[2];
  uint64_t v40;
  uint64_t v41;

  uint64_t v40 = v0;
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.fault.getter();
  uint64_t v38 = v0 + 16;
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v37 = *(void **)(v0 + 944);
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    v39[0] = v4;
    *(_DWORD *)uint64_t v3 = 136315394;
    uint64_t v5 = AttachmentUploadTask.description.getter();
    *(void *)(v0 + 408) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 2080;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type AttachmentUploadTask and conformance AttachmentUploadTask((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 416) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v1, v2, "%s Failed to remove attachment %s", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v4, -1, -1);
    MEMORY[0x1A624F870](v3, -1, -1);
    uint64_t v9 = v37;
  }
  else
  {
    uint64_t v10 = *(void **)(v0 + 944);
    swift_release_n();
    uint64_t v9 = v10;
  }

  uint64_t v11 = *(void **)(v0 + 904);
  *(void *)(v0 + 504) = v11;
  uint64_t v12 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(*(void *)(v0 + 560) + 8))(*(void *)(v0 + 568), *(void *)(v0 + 552));
    swift_retain_n();
    uint64_t v13 = Logger.logObject.getter();
    uint64_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      v39[0] = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      uint64_t v17 = AttachmentUploadTask.description.getter();
      *(void *)(v0 + 456) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v13, v14, "%s caught SimultaneousTransferError", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v16, -1, -1);
      MEMORY[0x1A624F870](v15, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t v27 = *(void **)(v0 + 904);
    unint64_t v28 = *(void *)(v0 + 752);
    uint64_t v29 = *(void *)(v0 + 744);
    uint64_t v30 = *(void *)(v0 + 736);
    uint64_t v31 = *(void *)(v0 + 728);
    uint64_t v32 = *(void *)(v0 + 696);
    uint64_t v33 = *(void *)(v0 + 688);
    uint64_t v34 = *(void *)(v0 + 664);
    lazy protocol witness table accessor for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors();
    swift_allocError();
    *uint64_t v35 = 1;
    swift_willThrow();

    outlined destroy of AttachmentLedgerTopic.UploadRequest(v34);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    __swift_destroy_boxed_opaque_existential_1Tm(v38);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    uint64_t v19 = *(void *)(v0 + 752);
    unint64_t v20 = *(void *)(v0 + 744);
    uint64_t v21 = *(void *)(v0 + 736);
    unint64_t v22 = *(void *)(v0 + 728);
    uint64_t v23 = *(void *)(v0 + 696);
    unint64_t v24 = *(void *)(v0 + 688);
    uint64_t v25 = *(void *)(v0 + 664);

    outlined destroy of AttachmentLedgerTopic.UploadRequest(v25);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    __swift_destroy_boxed_opaque_existential_1Tm(v38);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v26();
}

uint64_t AttachmentUploadTask.description.getter()
{
  _StringGuts.grow(_:)(69);
  v0._object = (void *)0x80000001A39027F0;
  v0._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x3A6369706F74202CLL;
  v1._object = (void *)0xE900000000000020;
  String.append(_:)(v1);
  swift_retain();
  v2._countAndFlagsBits = AttachmentLedgerTopic.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_release();
  v3._countAndFlagsBits = 0x203A656C6966202CLL;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  type metadata accessor for URL();
  lazy protocol witness table accessor for type AttachmentUploadTask and conformance AttachmentUploadTask((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x203A6469202CLL;
  v5._object = (void *)0xE600000000000000;
  String.append(_:)(v5);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type AttachmentUploadTask and conformance AttachmentUploadTask((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x3A6574617473202CLL;
  v7._object = (void *)0xE900000000000020;
  String.append(_:)(v7);
  dispatch thunk of StateMachine.currentState.getter();
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t AssetSkeleton.uploadRequest(id:key:developerMetadata:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v60 = a3;
  unint64_t v61 = a4;
  uint64_t v66 = a2;
  uint64_t v65 = a1;
  uint64_t v58 = a5;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v56 = *(void *)(v5 - 8);
  uint64_t v57 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v59 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Asset.ID();
  uint64_t v54 = *(void *)(v7 - 8);
  uint64_t v55 = v7;
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v53 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v52 = (char *)&v48 - v11;
  MEMORY[0x1F4188790](v10);
  long long v51 = (char *)&v48 - v12;
  uint64_t v13 = type metadata accessor for SymmetricKey();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  unint64_t v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  uint64_t v62 = v20;
  uint64_t v64 = v17;
  v21(v20, v65, v17);
  unint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v65 = v16;
  uint64_t v23 = v66;
  uint64_t v66 = v13;
  v22(v16, v23, v13);
  type metadata accessor for AssetSkeleton();
  lazy protocol witness table accessor for type AttachmentUploadTask and conformance AttachmentUploadTask(&lazy protocol witness table cache variable for type AssetSkeleton and conformance AssetSkeleton, MEMORY[0x1E4F591C0]);
  uint64_t v24 = v63;
  uint64_t v25 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v24)
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v65, v66);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v62, v64);
  }
  else
  {
    uint64_t v49 = v26;
    uint64_t v50 = v25;
    outlined copy of Data?(v60, v61);
    unint64_t v28 = v51;
    AssetSkeleton.assetID.getter();
    Asset.ID.storageLocation.getter();
    uint64_t v29 = *(void (**)(char *, uint64_t))(v54 + 8);
    uint64_t v30 = v28;
    uint64_t v31 = v53;
    uint64_t v48 = v14;
    uint64_t v32 = v55;
    v29(v30, v55);
    uint64_t v63 = 0;
    uint64_t v33 = v52;
    AssetSkeleton.assetID.getter();
    uint64_t v54 = Asset.ID.signature.getter();
    long long v51 = v34;
    v29(v33, v32);
    AssetSkeleton.assetID.getter();
    uint64_t v35 = Asset.ID.referenceSignature.getter();
    uint64_t v37 = v36;
    swift_release();
    v29(v31, v32);
    uint64_t v38 = v58;
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v58, v62, v64);
    uint64_t v39 = (int *)type metadata accessor for AttachmentLedgerTopic.UploadRequest(0);
    (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v38 + v39[5], v65, v66);
    uint64_t v40 = (uint64_t *)(v38 + v39[6]);
    uint64_t v41 = v49;
    *uint64_t v40 = v50;
    v40[1] = v41;
    uint64_t v42 = (void *)(v38 + v39[7]);
    uint64_t v43 = v59;
    unint64_t v44 = v61;
    *uint64_t v42 = v60;
    v42[1] = v44;
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v56 + 32))(v38 + v39[8], v43, v57);
    uint64_t v45 = (uint64_t *)(v38 + v39[9]);
    uint64_t v46 = v51;
    *uint64_t v45 = v54;
    v45[1] = (uint64_t)v46;
    uint64_t v47 = (uint64_t *)(v38 + v39[10]);
    *uint64_t v47 = v35;
    v47[1] = v37;
  }
  return result;
}

uint64_t closure #1 in AttachmentUploadTask.start()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[11] = a5;
  v6[12] = a6;
  v6[10] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v6[13] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in AttachmentUploadTask.start(), a4, 0);
}

uint64_t closure #1 in AttachmentUploadTask.start()()
{
  Swift::String v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v1;
  *Swift::String v1 = v0;
  v1[1] = closure #1 in AttachmentUploadTask.start();
  uint64_t v2 = *(void *)(v0 + 88);
  return AttachmentLedgerTopic.upload(request:)(v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;

  uint64_t v2 = *v1;
  Swift::String v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 80);
    return MEMORY[0x1F4188298](closure #1 in AttachmentUploadTask.start(), v6, 0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t (*v13)(void);
  uint64_t v15;

  if (static Task<>.isCancelled.getter())
  {
    if (one-time initialization token for uploadTask != -1) {
      swift_once();
    }
    Swift::String v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Log.uploadTask);
    uint64_t v2 = Logger.logObject.getter();
    Swift::String v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1A375F000, v2, v3, "UploadTask was cancelled after upload was successful.", v4, 2u);
      MEMORY[0x1A624F870](v4, -1, -1);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 96);
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v8 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v5, 1, 1, v8);
    uint64_t v9 = swift_allocObject();
    swift_weakInit();
    outlined init with copy of AudioSessionAssertionManager(v6, v0 + 16);
    uint64_t v10 = (void *)swift_allocObject();
    _OWORD v10[2] = 0;
    v10[3] = 0;
    outlined init with take of TypedPayloadDecoding((long long *)(v0 + 16), (uint64_t)(v10 + 4));
    v10[9] = v9;
    uint64_t v11 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v5, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in AttachmentUploadTask.start(), (uint64_t)v10);
    uint64_t v12 = (uint64_t *)(v7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler);
    swift_beginAccess();
    *uint64_t v12 = v11;
    swift_release();
  }
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t closure #1 in closure #1 in AttachmentUploadTask.start()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[8] = a4;
  v5[9] = a5;
  uint64_t v6 = type metadata accessor for Attachment.MMCSMetadata.UploadStatus();
  v5[10] = v6;
  v5[11] = *(void *)(v6 - 8);
  v5[12] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v5[13] = v7;
  v5[14] = *(void *)(v7 - 8);
  v5[15] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Signal();
  v5[16] = v8;
  v5[17] = *(void *)(v8 - 8);
  v5[18] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Signal?);
  v5[19] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>);
  v5[20] = v9;
  v5[21] = *(void *)(v9 - 8);
  v5[22] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<Signal, Error>.Iterator);
  v5[23] = v10;
  v5[24] = *(void *)(v10 - 8);
  v5[25] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in AttachmentUploadTask.start(), 0, 0);
}

uint64_t closure #1 in closure #1 in AttachmentUploadTask.start()()
{
  Swift::String v1 = (void *)v0[8];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  v0[26] = JSONEncoder.init()();
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 16) + **(int **)(v3 + 16));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[27] = v4;
  void *v4 = v0;
  v4[1] = closure #1 in closure #1 in AttachmentUploadTask.start();
  uint64_t v5 = v0[22];
  return v7(v5, v2, v3);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in AttachmentUploadTask.start(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v2 = *(void *)(v0 + 168);
  Swift::String v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 160);
  MEMORY[0x1A624E3D0](v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_beginAccess();
  *(_DWORD *)(v0 + 296) = *MEMORY[0x1E4F5AF18];
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v4;
  void *v4 = v0;
  v4[1] = closure #1 in closure #1 in AttachmentUploadTask.start();
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 152);
  return MEMORY[0x1F4187ED8](v6, 0, 0, v5, v0 + 40);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in closure #1 in AttachmentUploadTask.start();
  }
  else {
    uint64_t v2 = closure #1 in closure #1 in AttachmentUploadTask.start();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  Swift::String v1 = v0[19];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[17];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
    swift_release();
LABEL_7:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    goto LABEL_8;
  }
  (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(v0[18], v1, v2);
  uint64_t Strong = swift_weakLoadStrong();
  v0[30] = Strong;
  if (!Strong)
  {
    uint64_t v14 = v0[25];
    uint64_t v15 = v0[23];
    uint64_t v16 = v0[24];
    uint64_t v18 = v0[17];
    uint64_t v17 = v0[18];
    uint64_t v19 = v0[16];
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    goto LABEL_7;
  }
  uint64_t v5 = Strong;
  uint64_t v6 = v0[29];
  static Task<>.checkCancellation()();
  v0[31] = v6;
  if (v6)
  {
    uint64_t v7 = v0[25];
    uint64_t v8 = v0[23];
    uint64_t v9 = v0[24];
    uint64_t v11 = v0[17];
    uint64_t v10 = v0[18];
    uint64_t v12 = v0[16];
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
LABEL_8:
    return v13();
  }
  v0[32] = OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_stateMachine;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in AttachmentUploadTask.start(), v5, 0);
}

{
  void *v0;

  v0[33] = *(void *)(v0[30] + v0[32]);
  return MEMORY[0x1F4188298](closure #1 in closure #1 in AttachmentUploadTask.start(), 0, 0);
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  *(unsigned char *)(v0 + 300) = 7;
  Swift::String v1 = dispatch thunk of StateMachine.execute(_:)();
  uint64_t v2 = *(void *)(v0 + 240);
  if (v1)
  {
    return MEMORY[0x1F4188298](closure #1 in closure #1 in AttachmentUploadTask.start(), v2, 0);
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 200);
    uint64_t v4 = *(void *)(v0 + 184);
    uint64_t v5 = *(void *)(v0 + 192);
    uint64_t v7 = *(void *)(v0 + 136);
    uint64_t v6 = *(void *)(v0 + 144);
    uint64_t v8 = *(void *)(v0 + 128);
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

{
  uint64_t v0;

  *(void *)(v0 + 272) = *(void *)(*(void *)(v0 + 240) + 112);
  return MEMORY[0x1F4188298](closure #1 in closure #1 in AttachmentUploadTask.start(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[2];
  uint64_t v32;
  uint64_t v33;

  uint64_t v32 = v0;
  Swift::String v1 = *(void **)(v0 + 248);
  (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 112) + 16))(*(void *)(v0 + 120), *(void *)(v0 + 240) + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_id, *(void *)(v0 + 104));
  lazy protocol witness table accessor for type AttachmentUploadTask and conformance AttachmentUploadTask(&lazy protocol witness table cache variable for type Signal and conformance Signal, MEMORY[0x1E4F591D8]);
  dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 112) + 8))(*(void *)(v0 + 120), *(void *)(v0 + 104));
    if (one-time initialization token for uploadTask != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Log.uploadTask);
    swift_retain();
    uint64_t v3 = v1;
    swift_retain();
    uint64_t v4 = v1;
    uint64_t v5 = Logger.logObject.getter();
    uint64_t v6 = static os_log_type_t.error.getter();
    uint64_t v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = *(void *)(v0 + 240);
    uint64_t v10 = *(void *)(v0 + 136);
    uint64_t v9 = *(void *)(v0 + 144);
    uint64_t v11 = *(void *)(v0 + 128);
    if (v7)
    {
      uint64_t v30 = *(void *)(v0 + 144);
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      v31[0] = v13;
      *(_DWORD *)uint64_t v12 = 136315394;
      *(void *)(v0 + 48) = v8;
      type metadata accessor for AttachmentUploadTask();
      swift_retain();
      uint64_t v14 = String.init<A>(reflecting:)();
      *(void *)(v12 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v31);
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2080;
      *(void *)(v0 + 56) = v1;
      uint64_t v16 = v1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v17 = String.init<A>(reflecting:)();
      *(void *)(v12 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v31);
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A375F000, v5, v6, "%s failed to update progress blob, error: %s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v13, -1, -1);
      MEMORY[0x1A624F870](v12, -1, -1);

      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v30, v11);
    }
    else
    {

      swift_release_n();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    }
    uint64_t v27 = (void *)swift_task_alloc();
    *(void *)(v0 + 224) = v27;
    *uint64_t v27 = v0;
    v27[1] = closure #1 in closure #1 in AttachmentUploadTask.start();
    unint64_t v28 = *(void *)(v0 + 184);
    uint64_t v29 = *(void *)(v0 + 152);
    return MEMORY[0x1F4187ED8](v29, 0, 0, v28, v0 + 40);
  }
  else
  {
    uint64_t v19 = *(unsigned int *)(v0 + 296);
    uint64_t v21 = *(void *)(v0 + 88);
    unint64_t v20 = *(void *)(v0 + 96);
    unint64_t v22 = *(void *)(v0 + 80);
    Attachment.UpdatingBlob.init(data:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 104))(v20, v19, v22);
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 280) = v23;
    *uint64_t v23 = v0;
    v23[1] = closure #1 in closure #1 in AttachmentUploadTask.start();
    uint64_t v24 = *(void *)(v0 + 120);
    uint64_t v25 = *(void *)(v0 + 96);
    return AttachmentLedgerTopic.updateProgress(on:with:)(v24, v25);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 288) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[15];
  uint64_t v4 = v2[14];
  uint64_t v5 = v2[13];
  (*(void (**)(void, void))(v2[11] + 8))(v2[12], v2[10]);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v6 = closure #1 in closure #1 in AttachmentUploadTask.start();
  }
  else {
    uint64_t v6 = closure #1 in closure #1 in AttachmentUploadTask.start();
  }
  return MEMORY[0x1F4188298](v6, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v2 = v0[17];
  Swift::String v1 = v0[18];
  uint64_t v3 = v0[16];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[28] = v4;
  void *v4 = v0;
  v4[1] = closure #1 in closure #1 in AttachmentUploadTask.start();
  uint64_t v5 = v0[23];
  uint64_t v6 = v0[19];
  return MEMORY[0x1F4187ED8](v6, 0, 0, v5, v0 + 5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  Swift::String v1 = v0[25];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[24];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;

  uint64_t v25 = v0;
  Swift::String v1 = (void *)v0[36];
  if (one-time initialization token for uploadTask != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.uploadTask);
  swift_retain();
  uint64_t v3 = v1;
  swift_retain();
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = v0[30];
  uint64_t v10 = v0[17];
  uint64_t v9 = v0[18];
  uint64_t v11 = v0[16];
  if (v7)
  {
    uint64_t v23 = v0[18];
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v24 = v13;
    *(_DWORD *)uint64_t v12 = 136315394;
    v0[6] = v8;
    type metadata accessor for AttachmentUploadTask();
    swift_retain();
    uint64_t v14 = String.init<A>(reflecting:)();
    *(void *)(v12 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v24);
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    v0[7] = v1;
    uint64_t v16 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v17 = String.init<A>(reflecting:)();
    *(void *)(v12 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v24);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v5, v6, "%s failed to update progress blob, error: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v13, -1, -1);
    MEMORY[0x1A624F870](v12, -1, -1);

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v23, v11);
  }
  else
  {

    swift_release_n();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  uint64_t v19 = (void *)swift_task_alloc();
  v0[28] = v19;
  *uint64_t v19 = v0;
  v19[1] = closure #1 in closure #1 in AttachmentUploadTask.start();
  unint64_t v20 = v0[23];
  uint64_t v21 = v0[19];
  return MEMORY[0x1F4187ED8](v21, 0, 0, v20, v0 + 5);
}

uint64_t AttachmentUploadTask.requestUploadToken()(uint64_t a1)
{
  void v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = type metadata accessor for TaskPriority();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  return MEMORY[0x1F4188298](AttachmentUploadTask.requestUploadToken(), v1, 0);
}

uint64_t AttachmentUploadTask.requestUploadToken()()
{
  uint64_t v26 = v0;
  if (one-time initialization token for uploadTask != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 88) = __swift_project_value_buffer(v1, (uint64_t)static Log.uploadTask);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 72);
    uint64_t v5 = *(void *)(v0 + 80);
    uint64_t v23 = *(void *)(v0 + 64);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    v25[0] = v24;
    uint64_t v7 = AttachmentUploadTask.description.getter();
    *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    static Task<>.currentPriority.getter();
    lazy protocol witness table accessor for type AttachmentUploadTask and conformance AttachmentUploadTask(&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority, MEMORY[0x1E4FBCFE8]);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v11 = v10;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v23);
    *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v2, v3, "%s Requesting upload token with priority: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v24, -1, -1);
    MEMORY[0x1A624F870](v6, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  *(void *)(v0 + 96) = *(void *)(*(void *)(v0 + 56)
                                   + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_stateMachine);
  *(unsigned char *)(v0 + 120) = 0;
  if (dispatch thunk of StateMachine.execute(_:)())
  {
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v12;
    *uint64_t v12 = v0;
    v12[1] = AttachmentUploadTask.requestUploadToken();
    uint64_t v13 = *(void *)(v0 + 48);
    return AttachmentLedgerTopic.requestUploadToken()(v13);
  }
  else
  {
    swift_retain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      v25[0] = v18;
      *(_DWORD *)uint64_t v17 = 136315138;
      uint64_t v19 = AttachmentUploadTask.description.getter();
      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v15, v16, "%s Can't execute state change for .fetchToken event", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v18, -1, -1);
      MEMORY[0x1A624F870](v17, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    lazy protocol witness table accessor for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors();
    swift_allocError();
    *uint64_t v21 = 0;
    swift_willThrow();
    swift_task_dealloc();
    unint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = (void *)*v1;
  v2[14] = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v3 = v2[7];
    return MEMORY[0x1F4188298](AttachmentUploadTask.requestUploadToken(), v3, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t (*v15)(void);
  uint64_t v17;

  uint64_t v1 = *(void **)(v0 + 112);
  uint64_t v2 = v1;
  os_log_type_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 112);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    unint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    uint64_t v9 = v6;
    unint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v8 = v10;

    _os_log_impl(&dword_1A375F000, v4, v5, "Failed to fetch uploadToken for reason: %@", v7, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v8, -1, -1);
    MEMORY[0x1A624F870](v7, -1, -1);
  }
  else
  {
    unint64_t v11 = *(void **)(v0 + 112);
  }
  *(unsigned char *)(v0 + 121) = 1;
  if ((dispatch thunk of StateMachine.execute(_:)() & 1) == 0)
  {
    uint64_t v12 = Logger.logObject.getter();
    uint64_t v13 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_1A375F000, v12, v13, "Failed to transition to a failure state from fetchTokenFailure", v14, 2u);
      MEMORY[0x1A624F870](v14, -1, -1);
    }
  }
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t AttachmentUploadTask.createAssetUploadCoordinator(_:)(uint64_t a1, uint64_t a2)
{
  v3[19] = a2;
  v3[20] = v2;
  v3[18] = a1;
  uint64_t v4 = type metadata accessor for Date();
  v3[21] = v4;
  v3[22] = *(void *)(v4 - 8);
  v3[23] = swift_task_alloc();
  type metadata accessor for Credential();
  v3[24] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Asset.Protector();
  v3[25] = v5;
  v3[26] = *(void *)(v5 - 8);
  v3[27] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v3[28] = v6;
  v3[29] = *(void *)(v6 - 8);
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for AssetUploadRequest();
  v3[32] = v7;
  v3[33] = *(void *)(v7 - 8);
  v3[34] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for TaskPriority();
  v3[35] = v8;
  v3[36] = *(void *)(v8 - 8);
  v3[37] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UploadToken?);
  v3[38] = swift_task_alloc();
  v3[39] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UploadToken();
  v3[40] = v9;
  v3[41] = *(void *)(v9 - 8);
  v3[42] = swift_task_alloc();
  v3[43] = swift_task_alloc();
  v3[44] = swift_task_alloc();
  return MEMORY[0x1F4188298](AttachmentUploadTask.createAssetUploadCoordinator(_:), v2, 0);
}

uint64_t AttachmentUploadTask.createAssetUploadCoordinator(_:)()
{
  uint64_t v81 = v0;
  if (one-time initialization token for uploadTask != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 352);
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v0 + 360) = __swift_project_value_buffer(v5, (uint64_t)static Log.uploadTask);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v6(v1, v4, v2);
  swift_retain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 352);
  uint64_t v11 = *(void *)(v0 + 320);
  uint64_t v12 = *(void *)(v0 + 328);
  if (v9)
  {
    os_log_type_t v76 = v8;
    os_log_t log = v7;
    uint64_t v65 = *(void *)(v0 + 312);
    uint64_t v68 = *(void *)(v0 + 304);
    uint64_t v69 = v6;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v74 = swift_slowAlloc();
    v80[0] = v74;
    *(_DWORD *)uint64_t v13 = 136315650;
    uint64_t v14 = AttachmentUploadTask.description.getter();
    *(void *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    v69(v65, v10, v11);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v65, 0, 1, v11);
    outlined init with copy of URL?(v65, v68, &demangling cache variable for type metadata for UploadToken?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v68, 1, v11) == 1)
    {
      unint64_t v16 = 0xE300000000000000;
      uint64_t v70 = 7104878;
    }
    else
    {
      uint64_t v17 = *(void *)(v0 + 336);
      uint64_t v18 = *(void *)(v0 + 344);
      uint64_t v19 = *(void *)(v0 + 320);
      uint64_t v20 = *(void *)(v0 + 328);
      (*(void (**)(uint64_t, void, uint64_t))(v20 + 32))(v18, *(void *)(v0 + 304), v19);
      v69(v17, v18, v19);
      uint64_t v70 = String.init<A>(reflecting:)();
      unint64_t v16 = v21;
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    }
    uint64_t v22 = *(void *)(v0 + 352);
    uint64_t v23 = *(void *)(v0 + 320);
    uint64_t v24 = *(void *)(v0 + 328);
    uint64_t v26 = *(void *)(v0 + 288);
    uint64_t v25 = *(void *)(v0 + 296);
    uint64_t v27 = *(void *)(v0 + 280);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(*(void *)(v0 + 312), &demangling cache variable for type metadata for UploadToken?);
    *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v16, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
    *(_WORD *)(v13 + 22) = 2080;
    static Task<>.currentPriority.getter();
    lazy protocol witness table accessor for type AttachmentUploadTask and conformance AttachmentUploadTask(&lazy protocol witness table cache variable for type TaskPriority and conformance TaskPriority, MEMORY[0x1E4FBCFE8]);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v30 = v29;
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, log, v76, "%s Creating AssetUploadCoordinator for uploadToken: %s with priority: %s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v74, -1, -1);
    MEMORY[0x1A624F870](v13, -1, -1);
  }
  else
  {
    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }
  *(void *)(v0 + 368) = *(void *)(*(void *)(v0 + 160)
                                    + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_stateMachine);
  *(unsigned char *)(v0 + 393) = 2;
  if (dispatch thunk of StateMachine.execute(_:)())
  {
    uint64_t v31 = *(void *)(v0 + 248);
    uint64_t v33 = *(void *)(v0 + 224);
    uint64_t v32 = *(void *)(v0 + 232);
    uint64_t v34 = *(void *)(v0 + 208);
    uint64_t v66 = *(void *)(v0 + 216);
    uint64_t v67 = *(void *)(v0 + 200);
    uint64_t v35 = *(void *)(v0 + 160);
    uint64_t v36 = v35 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_assetManager;
    uint64_t v71 = *(void *)(v0 + 184);
    uint64_t v72 = *(void *)(v0 + 176);
    uint64_t v73 = *(void *)(v0 + 168);
    swift_beginAccess();
    outlined init with copy of AudioSessionAssertionManager(v36, v0 + 16);
    uint64_t v79 = *(void *)(v0 + 40);
    uint64_t v75 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v79);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v31, v35 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_file, v33);
    UploadToken.storageLocation.getter();
    uint64_t v37 = v35 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_protector;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v66, v37, v67);
    dispatch thunk of Token.accountID.getter();
    dispatch thunk of Token.token.getter();
    type metadata accessor for Credential.Builder();
    swift_allocObject();
    Credential.Builder.init(tenantName:requestorID:accessToken:)();
    dispatch thunk of Token.expirationDate.getter();
    Credential.Builder.setExpirationDate(_:)();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v71, v73);
    Credential.Builder.build()();
    swift_release();
    AssetUploadRequest.init(fileURL:storageLocation:protector:credential:)();
    os_log_t loga = (os_log_t)(*(void *)(v75 + 16) + **(int **)(v75 + 16));
    uint64_t v38 = (void *)swift_task_alloc();
    *(void *)(v0 + 376) = v38;
    *uint64_t v38 = v0;
    v38[1] = AttachmentUploadTask.createAssetUploadCoordinator(_:);
    uint64_t v39 = *(void *)(v0 + 272);
    uint64_t v40 = *(void *)(v0 + 144);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))loga)(v40, v39, v79, v75);
  }
  else
  {
    uint64_t v42 = (uint64_t *)(v0 + 112);
    swift_retain_n();
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      v80[0] = v46;
      *(_DWORD *)uint64_t v45 = 136315138;
      uint64_t v47 = AttachmentUploadTask.description.getter();
      *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, v80);
      uint64_t v42 = (uint64_t *)(v0 + 112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v43, v44, "%s Can't execute state change for .creatingAsset event", v45, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v46, -1, -1);
      MEMORY[0x1A624F870](v45, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    lazy protocol witness table accessor for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors();
    uint64_t v49 = (void *)swift_allocError();
    *uint64_t v50 = 0;
    swift_willThrow();
    id v51 = v49;
    id v52 = v49;
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      uint64_t v56 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 138412290;
      id v57 = v49;
      uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v59 = v42;
      uint64_t v60 = v58;
      *uint64_t v59 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v56 = v60;

      _os_log_impl(&dword_1A375F000, v53, v54, "Failed to create assetUploadCoordinator for reason: %@", v55, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v56, -1, -1);
      MEMORY[0x1A624F870](v55, -1, -1);
    }
    else
    {
    }
    *(unsigned char *)(v0 + 392) = 3;
    if ((dispatch thunk of StateMachine.execute(_:)() & 1) == 0)
    {
      unint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v63 = 0;
        _os_log_impl(&dword_1A375F000, v61, v62, "Failed to transition to a failure state from createAssetFailure", v63, 2u);
        MEMORY[0x1A624F870](v63, -1, -1);
      }
    }
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v64 = *(uint64_t (**)(void))(v0 + 8);
    return v64();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 384) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[34];
  uint64_t v4 = v2[33];
  uint64_t v5 = v2[32];
  uint64_t v6 = v2[20];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v7 = AttachmentUploadTask.createAssetUploadCoordinator(_:);
  }
  else {
    uint64_t v7 = AttachmentUploadTask.createAssetUploadCoordinator(_:);
  }
  return MEMORY[0x1F4188298](v7, v6, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t (*v13)(void);
  uint64_t v15;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v1 = *(void **)(v0 + 384);
  uint64_t v2 = v1;
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    os_log_type_t v8 = v1;
    BOOL v9 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 112) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v9;

    _os_log_impl(&dword_1A375F000, v4, v5, "Failed to create assetUploadCoordinator for reason: %@", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v7, -1, -1);
    MEMORY[0x1A624F870](v6, -1, -1);
  }
  else
  {
  }
  *(unsigned char *)(v0 + 392) = 3;
  if ((dispatch thunk of StateMachine.execute(_:)() & 1) == 0)
  {
    uint64_t v10 = Logger.logObject.getter();
    uint64_t v11 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_1A375F000, v10, v11, "Failed to transition to a failure state from createAssetFailure", v12, 2u);
      MEMORY[0x1A624F870](v12, -1, -1);
    }
  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t AttachmentUploadTask.deinit()
{
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_file;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  outlined consume of Data?(*(void *)(v0 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_developerMetadata), *(void *)(v0 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_developerMetadata + 8));
  uint64_t v3 = v0 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_id;
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  uint64_t v5 = v0 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_key;
  uint64_t v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_protector;
  uint64_t v8 = type metadata accessor for Asset.Protector();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_assetManager);
  swift_release();
  swift_release();
  uint64_t v9 = v0 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask__state;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AttachmentUploadTask.State>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t AttachmentUploadTask.__deallocating_deinit()
{
  AttachmentUploadTask.deinit();

  return MEMORY[0x1F4188210](v0);
}

uint64_t AttachmentUploadTask.unownedExecutor.getter()
{
  return v0;
}

unsigned char *closure #1 in Data.init<A>(_:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = (unsigned char *)specialized Data.InlineData.init(_:)(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (unsigned char *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = (unsigned char *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t specialized Data.InlineData.init(_:)(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t specialized Data.InlineSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t specialized AttachmentUploadTask.init(topic:file:developerMetadata:id:manager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v49 = a4;
  uint64_t v50 = a5;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v43 = a1;
  uint64_t v12 = type metadata accessor for Asset.Protector();
  uint64_t v45 = *(void *)(v12 - 8);
  uint64_t v46 = v12;
  MEMORY[0x1F4188790](v12);
  os_log_type_t v44 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SymmetricKeySize();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v40 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for SymmetricKey();
  uint64_t v41 = *(void *)(v16 - 8);
  uint64_t v42 = v16;
  MEMORY[0x1F4188790](v16);
  uint64_t v39 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AttachmentUploadTask.State>);
  uint64_t v37 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  uint64_t v36 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = a8;
  uint64_t v57 = a9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v55);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(boxed_opaque_existential_1, a6, a8);
  swift_defaultActor_initialize();
  uint64_t v35 = OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_stateMachine;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachine<AttachmentUploadTask.State, AttachmentUploadTask.Event>.Transition>);
  uint64_t v33 = 8
      * *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachine<AttachmentUploadTask.State, AttachmentUploadTask.Event>.Transition)
                              - 8)
                  + 72);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1A38FB5A0;
  LOBYTE(v51) = 0;
  char v54 = 1;
  char v53 = 0;
  lazy protocol witness table accessor for type AttachmentUploadTask.State and conformance AttachmentUploadTask.State();
  lazy protocol witness table accessor for type AttachmentUploadTask.Event and conformance AttachmentUploadTask.Event();
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v51) = 1;
  char v54 = 2;
  char v53 = 2;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v51) = 2;
  char v54 = 5;
  char v53 = 3;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v51) = 2;
  char v54 = 2;
  char v53 = 6;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v51) = 2;
  char v54 = 2;
  char v53 = 7;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v51) = 2;
  char v54 = 5;
  char v53 = 5;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v51) = 3;
  char v54 = 3;
  char v53 = 6;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v51) = 2;
  char v54 = 3;
  char v53 = 4;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v51) = 1;
  char v54 = 5;
  char v53 = 1;
  StateMachine.Transition.init(from:to:event:)();
  LOBYTE(v51) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachine<AttachmentUploadTask.State, AttachmentUploadTask.Event>);
  swift_allocObject();
  *(void *)(a7 + v35) = StateMachine.init(initialState:transitions:)();
  *(void *)(a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_topicUploadTask) = 0;
  *(void *)(a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler) = 0;
  uint64_t v20 = a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask__state;
  LOBYTE(v51) = 0;
  unint64_t v21 = v36;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v20, v21, v38);
  *(void *)(a7 + 112) = v43;
  swift_retain();
  static SymmetricKeySize.bits256.getter();
  uint64_t v22 = v39;
  SymmetricKey.init(size:)();
  uint64_t v24 = v41;
  uint64_t v23 = v42;
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 16))(a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_key, v22, v42);
  SymmetricKey.withUnsafeBytes<A>(_:)();
  outlined copy of Data._Representation(v51, v52);
  uint64_t v25 = v44;
  Asset.Protector.init(securityKey:privacyKey:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v22, v23);
  (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_protector, v25, v46);
  outlined init with take of TypedPayloadDecoding(&v55, a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_assetManager);
  uint64_t v26 = a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_file;
  uint64_t v27 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(v26, v47, v27);
  uint64_t v28 = (void *)(a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_developerMetadata);
  uint64_t v29 = v49;
  *uint64_t v28 = v48;
  v28[1] = v29;
  uint64_t v30 = a7 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_id;
  uint64_t v31 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 32))(v30, v50, v31);
  return a7;
}

unint64_t lazy protocol witness table accessor for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors;
  if (!lazy protocol witness table cache variable for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors;
  if (!lazy protocol witness table cache variable for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentUploadTask.Errors and conformance AttachmentUploadTask.Errors);
  }
  return result;
}

uint64_t outlined init with copy of AttachmentLedgerTopic.UploadRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedgerTopic.UploadRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AttachmentUploadTask()
{
  uint64_t result = type metadata singleton initialization cache for AttachmentUploadTask;
  if (!type metadata singleton initialization cache for AttachmentUploadTask) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1A389D848()
{
  uint64_t v1 = (int *)type metadata accessor for AttachmentLedgerTopic.UploadRequest(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  uint64_t v7 = v0 + v3 + v1[5];
  uint64_t v8 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  outlined consume of Data._Representation(*(void *)(v5 + v1[6]), *(void *)(v5 + v1[6] + 8));
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[7]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    outlined consume of Data._Representation(*v9, v10);
  }
  unint64_t v11 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = v5 + v1[8];
  uint64_t v13 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  outlined consume of Data._Representation(*(void *)(v5 + v1[9]), *(void *)(v5 + v1[9] + 8));
  outlined consume of Data._Representation(*(void *)(v5 + v1[10]), *(void *)(v5 + v1[10] + 8));
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + v11);

  return MEMORY[0x1F4186498](v0, v11 + 40, v2 | 7);
}

uint64_t outlined init with take of AttachmentLedgerTopic.UploadRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachmentLedgerTopic.UploadRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in AttachmentUploadTask.start()(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AttachmentLedgerTopic.UploadRequest(0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = (uint64_t)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *unint64_t v11 = v2;
  v11[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in AttachmentUploadTask.start()(a1, v6, v7, v8, v9, v10);
}

uint64_t outlined destroy of AttachmentLedgerTopic.UploadRequest(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AttachmentLedgerTopic.UploadRequest(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1A389DCD0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_assetManager;
  swift_beginAccess();
  return outlined init with copy of AudioSessionAssertionManager(v3, a2);
}

uint64_t sub_1A389DD2C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_get_18Tm(a1, &OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_topicUploadTask, a2);
}

uint64_t sub_1A389DD38(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentUploadTask.topicUploadTask : AttachmentUploadTask(a1, a2, a3, a4, &OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_topicUploadTask);
}

uint64_t sub_1A389DD58@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_get_18Tm(a1, &OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler, a2);
}

uint64_t keypath_get_18Tm@<X0>(void *a1@<X0>, void *a2@<X3>, void *a3@<X8>)
{
  uint64_t v4 = (void *)(*a1 + *a2);
  swift_beginAccess();
  *a3 = *v4;
  return swift_retain();
}

uint64_t sub_1A389DDB8(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for AttachmentUploadTask.topicUploadTask : AttachmentUploadTask(a1, a2, a3, a4, &OBJC_IVAR____TtC15GroupActivities20AttachmentUploadTask_signalHandler);
}

uint64_t ObjC metadata update function for AttachmentUploadTask()
{
  return type metadata accessor for AttachmentUploadTask();
}

void type metadata completion function for AttachmentUploadTask()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID();
    if (v1 <= 0x3F)
    {
      type metadata accessor for SymmetricKey();
      if (v2 <= 0x3F)
      {
        type metadata accessor for Asset.Protector();
        if (v3 <= 0x3F)
        {
          type metadata accessor for Published<AttachmentUploadTask.State>();
          if (v4 <= 0x3F) {
            swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

uint64_t method lookup function for AttachmentUploadTask(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AttachmentUploadTask);
}

uint64_t dispatch thunk of AttachmentUploadTask.protector.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of AttachmentUploadTask.protector.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of AttachmentUploadTask.protector.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of AttachmentUploadTask.assetManager.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of AttachmentUploadTask.assetManager.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of AttachmentUploadTask.assetManager.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of AttachmentUploadTask.topicUploadTask.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of AttachmentUploadTask.topicUploadTask.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of AttachmentUploadTask.topicUploadTask.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of AttachmentUploadTask.signalHandler.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of AttachmentUploadTask.signalHandler.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of AttachmentUploadTask.signalHandler.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of AttachmentUploadTask.state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of AttachmentUploadTask.state.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of AttachmentUploadTask.state.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of AttachmentUploadTask.$state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of AttachmentUploadTask.$state.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of AttachmentUploadTask.$state.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of AttachmentUploadTask.__allocating_init(topic:file:developerMetadata:id:manager:)()
{
  return (*(uint64_t (**)(void))(v0 + 320))();
}

uint64_t dispatch thunk of AttachmentUploadTask.start()()
{
  unint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 328) + **(int **)(*(void *)v0 + 328));
  unint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *unint64_t v2 = v1;
  v2[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return v4();
}

void type metadata accessor for Published<AttachmentUploadTask.State>()
{
  if (!lazy cache variable for type metadata for Published<AttachmentUploadTask.State>)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<AttachmentUploadTask.State>);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for AttachmentUploadTask.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A389E4B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttachmentUploadTask.State()
{
  return &type metadata for AttachmentUploadTask.State;
}

unsigned char *storeEnumTagSinglePayload for AttachmentUploadTask.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A389E5B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttachmentUploadTask.Errors()
{
  return &type metadata for AttachmentUploadTask.Errors;
}

uint64_t getEnumTagSinglePayload for AttachmentUploadTask.Event(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AttachmentUploadTask.Event(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A389E748);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttachmentUploadTask.Event()
{
  return &type metadata for AttachmentUploadTask.Event;
}

uint64_t sub_1A389E7D8()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1A389E810()
{
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  swift_release();

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t partial apply for closure #1 in closure #1 in AttachmentUploadTask.start()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (uint64_t)(v1 + 4);
  uint64_t v7 = v1[9];
  int v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *int v8 = v2;
  v8[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return closure #1 in closure #1 in AttachmentUploadTask.start()(a1, v4, v5, v6, v7);
}

uint64_t lazy protocol witness table accessor for type AttachmentUploadTask and conformance AttachmentUploadTask(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t SceneAssociationBehavior.shouldAssociateScene.getter()
{
  return *v0;
}

uint64_t SceneAssociationBehavior.contentIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SceneAssociationBehavior.preferredSceneSessionRole.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SceneAssociationBehavior.preferredSceneSessionRole.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t (*SceneAssociationBehavior.preferredSceneSessionRole.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

void __swiftcall SceneAssociationBehavior.init(shouldAssociateScene:contentIdentifier:preferredSceneSessionRole:)(GroupActivities::SceneAssociationBehavior *__return_ptr retstr, Swift::Bool shouldAssociateScene, Swift::String_optional contentIdentifier, Swift::String_optional preferredSceneSessionRole)
{
  retstr->shouldAssociateScene = shouldAssociateScene;
  retstr->contentIdentifier = contentIdentifier;
  retstr->preferredSceneSessionRole = preferredSceneSessionRole;
}

double one-time initialization function for default()
{
  static SceneAssociationBehavior.default = 1;
  double result = 0.0;
  *(_OWORD *)&qword_1EB58E160 = 0u;
  *(long long *)((char *)&xmmword_1EB58E168 + 8) = 0u;
  return result;
}

uint64_t static SceneAssociationBehavior.default.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1EB58E160;
  uint64_t v3 = qword_1EB58E178;
  *(unsigned char *)a1 = static SceneAssociationBehavior.default;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_1EB58E168;
  *(void *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t static SceneAssociationBehavior.content(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 1;
  *(void *)(a3 + 8) = a1;
  *(void *)(a3 + 16) = a2;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  return swift_bridgeObjectRetain();
}

double one-time initialization function for none()
{
  static SceneAssociationBehavior.none = 0;
  double result = 0.0;
  *(_OWORD *)&qword_1E95D64F8 = 0u;
  *(long long *)((char *)&xmmword_1E95D6500 + 8) = 0u;
  return result;
}

uint64_t static SceneAssociationBehavior.none.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for none != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1E95D64F8;
  uint64_t v3 = qword_1E95D6510;
  *(unsigned char *)a1 = static SceneAssociationBehavior.none;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_1E95D6500;
  *(void *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

void SceneAssociationBehavior.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4 = objc_msgSend(a1, sel_shouldAssociateScene);
  id v5 = objc_msgSend(a1, sel_targetContentIdentifier);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  swift_bridgeObjectRetain();
  id v10 = objc_msgSend(a1, sel_preferredSceneSessionRole);
  if (v10)
  {
    unint64_t v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();

    uint64_t v12 = 0;
    uint64_t v14 = 0;
  }
  *(unsigned char *)a2 = v4;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v14;
}

id SceneAssociationBehavior.tuSceneAssociationBehavior.getter()
{
  uint64_t v1 = *(unsigned __int8 *)v0;
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v4 = v0[4];
  if (!v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    if (v4) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v7 = 0;
    goto LABEL_6;
  }
  uint64_t v5 = v0[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = (void *)MEMORY[0x1A624DFA0](v5, v3);
  swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v7 = (void *)MEMORY[0x1A624DFA0](v2, v4);
  swift_bridgeObjectRelease();
LABEL_6:
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FADB50]), sel_initWithTargetContentIdentifier_shouldAssociateScene_preferredSceneSessionRole_, v6, v1, v7);

  return v8;
}

BOOL specialized static SceneAssociationBehavior.== infix(_:_:)(void *a1, void *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  if (!v4)
  {
    if (v7) {
      return 0;
    }
    goto LABEL_13;
  }
  if (!v7) {
    return 0;
  }
  BOOL v10 = a1[1] == a2[1] && v4 == v7;
  if (v10 || (char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v11 & 1) != 0))
  {
LABEL_13:
    if (v6) {
      return v9 && (v5 == v8 && v6 == v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
    }
    return !v9;
  }
  return result;
}

uint64_t destroy for SceneAssociationBehavior()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SceneAssociationBehavior(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SceneAssociationBehavior(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SceneAssociationBehavior(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SceneAssociationBehavior(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SceneAssociationBehavior(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)BOOL result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneAssociationBehavior()
{
  return &type metadata for SceneAssociationBehavior;
}

BOOL static AuthorizationPromptOptions.PromptCondition.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void AuthorizationPromptOptions.PromptCondition.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int AuthorizationPromptOptions.PromptCondition.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t AuthorizationPromptOptions.title.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AuthorizationPromptOptions.message.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AuthorizationPromptOptions.startForEveryone.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AuthorizationPromptOptions.startForMe.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

void AuthorizationPromptOptions.promptCondition.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 64);
}

uint64_t AuthorizationPromptOptions.confirmReplacement.getter()
{
  return *(unsigned __int8 *)(v0 + 65);
}

void __swiftcall AuthorizationPromptOptions.init(title:message:startForEveryone:startForMe:promptCondition:confirmReplacement:)(GroupActivities::AuthorizationPromptOptions *__return_ptr retstr, Swift::String_optional title, Swift::String_optional message, Swift::String_optional startForEveryone, Swift::String_optional startForMe, GroupActivities::AuthorizationPromptOptions::PromptCondition promptCondition, Swift::Bool confirmReplacement)
{
  GroupActivities::AuthorizationPromptOptions::PromptCondition v7 = *(unsigned char *)promptCondition;
  retstr->title = title;
  retstr->message = message;
  retstr->startForEveryone = startForEveryone;
  retstr->startForMe = startForMe;
  retstr->promptCondition = v7;
  retstr->confirmReplacement = v8;
}

void __swiftcall AuthorizationPromptOptions.init(title:message:startForEveryone:startForMe:alwaysPrompt:confirmReplacement:)(GroupActivities::AuthorizationPromptOptions *__return_ptr retstr, Swift::String_optional title, Swift::String_optional message, Swift::String_optional startForEveryone, Swift::String_optional startForMe, Swift::Bool alwaysPrompt, Swift::Bool confirmReplacement)
{
  retstr->title = title;
  retstr->message = message;
  retstr->startForEveryone = startForEveryone;
  retstr->startForMe = startForMe;
  retstr->promptCondition = alwaysPrompt;
  retstr->confirmReplacement = confirmReplacement;
}

uint64_t AuthorizationPromptOptions.overrides.getter()
{
  uint64_t v1 = type metadata accessor for AuthorizationRequestOverrides.PromptCondition();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  GroupActivities::AuthorizationPromptOptions::PromptCondition v7 = (char *)v12 - v6;
  uint64_t v8 = *v0;
  v12[2] = v0[2];
  _OWORD v12[3] = v8;
  uint64_t v9 = v0[4];
  v12[0] = v0[6];
  v12[1] = v9;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v5, **((unsigned int **)&unk_1E5B120E0 + *((char *)v0 + 64)), v1);
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v7, v5, v1);
  id v10 = objc_allocWithZone((Class)type metadata accessor for AuthorizationRequestOverrides());
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return AuthorizationRequestOverrides.init(title:message:startForEveryone:startForMe:promptCondition:confirmReplacement:)();
}

unint64_t lazy protocol witness table accessor for type AuthorizationPromptOptions.PromptCondition and conformance AuthorizationPromptOptions.PromptCondition()
{
  unint64_t result = lazy protocol witness table cache variable for type AuthorizationPromptOptions.PromptCondition and conformance AuthorizationPromptOptions.PromptCondition;
  if (!lazy protocol witness table cache variable for type AuthorizationPromptOptions.PromptCondition and conformance AuthorizationPromptOptions.PromptCondition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AuthorizationPromptOptions.PromptCondition and conformance AuthorizationPromptOptions.PromptCondition);
  }
  return result;
}

uint64_t destroy for AuthorizationPromptOptions()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AuthorizationPromptOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AuthorizationPromptOptions(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  return a1;
}

__n128 __swift_memcpy66_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for AuthorizationPromptOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  return a1;
}

uint64_t getEnumTagSinglePayload for AuthorizationPromptOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 66)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthorizationPromptOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 64) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 66) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 66) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthorizationPromptOptions()
{
  return &type metadata for AuthorizationPromptOptions;
}

unsigned char *storeEnumTagSinglePayload for AuthorizationPromptOptions.PromptCondition(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1A389F7B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthorizationPromptOptions.PromptCondition()
{
  return &type metadata for AuthorizationPromptOptions.PromptCondition;
}

uint64_t SystemCoordinator.__allocating_init(clientProvider:)(uint64_t a1)
{
  swift_allocObject();
  int v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = SystemCoordinatorTable.systemCoordinator(for:);
  return SystemCoordinator.init(clientProvider:)(a1);
}

uint64_t specialized _Streamed.yield(_:)(uint64_t a1)
{
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation.YieldResult);
  uint64_t v3 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  id v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v37 = a1;
  uint64_t v13 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v35 = &v37;
  uint64_t v14 = (uint64_t)&v13[4];
  uint64_t v15 = v13 + 10;
  os_unfair_lock_lock(v13 + 10);
  partial apply for specialized closure #1 in _Streamed.yield(_:)(v14, &v36);
  os_unfair_lock_unlock(v15);
  uint64_t result = v36;
  if (!v36) {
    return result;
  }
  uint64_t v17 = *(void *)(v36 + 64);
  uint64_t v29 = v36 + 64;
  uint64_t v18 = 1 << *(unsigned char *)(v36 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  uint64_t v32 = v7 + 32;
  uint64_t v33 = v7 + 16;
  unint64_t v21 = (void (**)(char *, uint64_t))(v3 + 8);
  int64_t v30 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v31 = v7 + 8;
  uint64_t v22 = v36;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v23 = 0;
  while (1)
  {
    if (v20)
    {
      unint64_t v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v25 = v24 | (v23 << 6);
      goto LABEL_6;
    }
    int64_t v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v30) {
      goto LABEL_24;
    }
    unint64_t v27 = *(void *)(v29 + 8 * v26);
    ++v23;
    if (!v27)
    {
      int64_t v23 = v26 + 1;
      if (v26 + 1 >= v30) {
        goto LABEL_24;
      }
      unint64_t v27 = *(void *)(v29 + 8 * v23);
      if (!v27)
      {
        int64_t v23 = v26 + 2;
        if (v26 + 2 >= v30) {
          goto LABEL_24;
        }
        unint64_t v27 = *(void *)(v29 + 8 * v23);
        if (!v27)
        {
          int64_t v23 = v26 + 3;
          if (v26 + 3 >= v30) {
            goto LABEL_24;
          }
          unint64_t v27 = *(void *)(v29 + 8 * v23);
          if (!v27) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v20 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_6:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, *(void *)(v22 + 56) + *(void *)(v7 + 72) * v25, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    uint64_t v36 = v37;
    AsyncStream.Continuation.yield(_:)();
    (*v21)(v5, v34);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  int64_t v28 = v26 + 4;
  if (v28 >= v30)
  {
LABEL_24:
    swift_release();
    return swift_bridgeObjectRelease_n();
  }
  unint64_t v27 = *(void *)(v29 + 8 * v28);
  if (v27)
  {
    int64_t v23 = v28;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v23 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v23 >= v30) {
      goto LABEL_24;
    }
    unint64_t v27 = *(void *)(v29 + 8 * v23);
    ++v28;
    if (v27) {
      goto LABEL_23;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void specialized _Streamed.finish()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v6 = (uint64_t)&v5[4];
  uint64_t v7 = v5 + 10;
  os_unfair_lock_lock(v5 + 10);
  specialized closure #1 in _Streamed.finish()(v6, &v22);
  os_unfair_lock_unlock(v7);
  int64_t v8 = 0;
  uint64_t v9 = v22;
  uint64_t v10 = *(void *)(v22 + 64);
  uint64_t v21 = v22 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(v22 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v14) {
      goto LABEL_23;
    }
    unint64_t v18 = *(void *)(v21 + 8 * v17);
    ++v8;
    if (!v18)
    {
      int64_t v8 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v18 = *(void *)(v21 + 8 * v8);
      if (!v18)
      {
        int64_t v8 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_23;
        }
        unint64_t v18 = *(void *)(v21 + 8 * v8);
        if (!v18)
        {
          int64_t v8 = v17 + 3;
          if (v17 + 3 >= v14) {
            goto LABEL_23;
          }
          unint64_t v18 = *(void *)(v21 + 8 * v8);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v9 + 56) + *(void *)(v2 + 72) * v16, v1);
    AsyncStream.Continuation.finish()();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v14)
  {
LABEL_23:
    swift_release();
    return;
  }
  unint64_t v18 = *(void *)(v21 + 8 * v19);
  if (v18)
  {
    int64_t v8 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v8 >= v14) {
      goto LABEL_23;
    }
    unint64_t v18 = *(void *)(v21 + 8 * v8);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
}

uint64_t specialized _Streamed.projectedValue.getter()
{
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation.YieldResult);
  uint64_t v0 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v2 = (char *)&v22 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation.BufferingPolicy);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  unint64_t v13 = (char *)&v22 - v12;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBD028], v3);
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v11, v7);
  int64_t v14 = *(os_unfair_lock_s **)(v22 + 16);
  unint64_t v24 = v13;
  unint64_t v15 = (uint64_t *)&v14[4];
  unint64_t v16 = v14 + 10;
  os_unfair_lock_lock(v14 + 10);
  partial apply for specialized closure #1 in _Streamed.projectedValue.getter(v15, v25);
  os_unfair_lock_unlock(v16);
  uint64_t v17 = v25[0];
  uint64_t v18 = v25[1];
  uint64_t v19 = swift_allocObject();
  swift_weakInit();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v19;
  *(void *)(v20 + 24) = v17;
  AsyncStream.Continuation.onTermination.setter();
  v25[0] = v18;
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t specialized closure #2 in _Streamed.projectedValue.getter()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = *(os_unfair_lock_s **)(result + 16);
    swift_retain();
    uint64_t v2 = swift_release();
    MEMORY[0x1F4188790](v2);
    os_unfair_lock_lock(v1 + 10);
    partial apply for specialized closure #1 in closure #2 in _Streamed.projectedValue.getter((uint64_t)&v1[4]);
    os_unfair_lock_unlock(v1 + 10);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in closure #2 in _Streamed.projectedValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if (v8)
  {
    unint64_t v9 = v7;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v18 = v11;
    *(void *)(a1 + 8) = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v18;
    }
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation);
    uint64_t v14 = *(void *)(v13 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 32))(v6, v12 + *(void *)(v14 + 72) * v9, v13);
    specialized _NativeDictionary._delete(at:)(v9, v11);
    *(void *)(a1 + 8) = v11;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v6, 0, 1, v13);
  }
  else
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v6, 1, 1, v15);
  }
  return outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v6, &demangling cache variable for type metadata for AsyncStream<Int>.Continuation?);
}

uint64_t GroupSession.systemCoordinator.getter()
{
  v1[3] = v0;
  v1[4] = *v0;
  v1[5] = *v0;
  return MEMORY[0x1F4188298](GroupSession.systemCoordinator.getter, 0, 0);
}

{
  void *v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v7)(void);
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  uint64_t v12 = v0;
  GroupSession.state.getter();
  uint64_t v10 = v9;
  uint64_t v11 = 0;
  uint64_t v1 = static GroupSession.State.== infix(_:_:)(&v10, (void **)&v11);
  outlined consume of GroupSession<A>.State<A>(v9);
  if ((v1 & 1) != 0
    || (GroupSession.state.getter(),
        uint64_t v10 = v9,
        uint64_t v11 = 1,
        uint64_t v2 = static GroupSession.State.== infix(_:_:)(&v10, (void **)&v11),
        outlined consume of GroupSession<A>.State<A>(v9),
        (v2 & 1) != 0))
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v3 = v0[4];
    v0[2] = v0[3];
    uint64_t v4 = static SystemCoordinatorTable.shared;
    char v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized SystemCoordinatorTable.systemCoordinator(for:)
                                                                    + async function pointer to specialized SystemCoordinatorTable.systemCoordinator(for:));
    swift_retain();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[6] = v5;
    *uint64_t v5 = v0;
    v5[1] = GroupSession.systemCoordinator.getter;
    return v8((uint64_t)(v0 + 2), v4, v3, (uint64_t)&protocol witness table for GroupSession<A>);
  }
  else
  {
    unint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7(0);
  }
}

uint64_t GroupSession.systemCoordinator.getter(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t SystemCoordinator.lock.getter()
{
  return swift_retain();
}

void SystemCoordinator.localParticipantState.getter()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)();
  os_unfair_lock_unlock(v1);
}

uint64_t SystemCoordinator.localParticipantStates.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SystemCoordinator.ParticipantStates?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v4);
  char v8 = &v13[-v7];
  uint64_t v9 = v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator____lazy_storage___localParticipantStates;
  swift_beginAccess();
  outlined init with copy of SystemCoordinator.ParticipantStates?(v9, (uint64_t)v8);
  uint64_t v10 = type metadata accessor for SystemCoordinator.ParticipantStates(0);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1) {
    return outlined init with take of SystemCoordinator.ParticipantStates((uint64_t)v8, a1);
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v8, &demangling cache variable for type metadata for SystemCoordinator.ParticipantStates?);
  closure #1 in SystemCoordinator.localParticipantStates.getter(v1);
  outlined init with copy of SystemCoordinator.ParticipantStates(a1, (uint64_t)v6);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess();
  outlined assign with take of SystemCoordinator.ParticipantStates?((uint64_t)v6, v9);
  return swift_endAccess();
}

uint64_t key path setter for SystemCoordinator.localParticipantStates : SystemCoordinator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SystemCoordinator.ParticipantStates?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SystemCoordinator.ParticipantStates(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SystemCoordinator.ParticipantStates(a1, (uint64_t)v10);
  uint64_t v11 = *a2;
  outlined init with take of SystemCoordinator.ParticipantStates((uint64_t)v10, (uint64_t)v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  uint64_t v12 = v11 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator____lazy_storage___localParticipantStates;
  swift_beginAccess();
  outlined assign with take of SystemCoordinator.ParticipantStates?((uint64_t)v6, v12);
  return swift_endAccess();
}

uint64_t closure #1 in SystemCoordinator.localParticipantStates.getter(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(*(void *)(a1 + 16) + 16);
  os_unfair_lock_lock(v2);
  closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply();
  os_unfair_lock_unlock(v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<SystemCoordinator.ParticipantState, Never>);
  swift_allocObject();
  uint64_t v3 = CurrentValueSubject.init(_:)();
  *(void *)(a1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantStatePublisher) = v3;
  swift_retain();
  swift_release();
  v7[2] = v3;
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<SystemCoordinator.ParticipantState, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<SystemCoordinator.ParticipantState, Never>);
  swift_retain();
  v7[0] = Publisher.eraseToAnyPublisher()();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<SystemCoordinator.ParticipantState, Never>);
  uint64_t v5 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<SystemCoordinator.ParticipantState, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<SystemCoordinator.ParticipantState, Never>);
  MEMORY[0x1A624DA40](v7, v4, v5);
  return swift_release_n();
}

uint64_t SystemCoordinator.activeSpatialParticipantCount.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0
                                        + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__activeSpatialParticipantCount)
                            + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 10;
  swift_retain();
  os_unfair_lock_lock(v3);
  specialized closure #1 in _Streamed.wrappedValue.getter(v2, &v6);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = v6;
  swift_release();
  return v4;
}

uint64_t key path getter for SystemCoordinator.activeSpatialParticipantCount : SystemCoordinator@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)(*a1
                                        + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__activeSpatialParticipantCount)
                            + 16);
  uint64_t v4 = (uint64_t)&v3[4];
  uint64_t v5 = v3 + 10;
  swift_retain();
  os_unfair_lock_lock(v5);
  specialized closure #1 in _Streamed.wrappedValue.getter(v4, &v8);
  os_unfair_lock_unlock(v5);
  uint64_t v6 = v8;
  uint64_t result = swift_release();
  *a2 = v6;
  return result;
}

uint64_t key path setter for SystemCoordinator.activeSpatialParticipantCount : SystemCoordinator(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_retain();
  specialized _Streamed.yield(_:)(v1);

  return swift_release();
}

uint64_t SystemCoordinator.$activeSpatialParticipantCount.getter()
{
  swift_retain();
  specialized _Streamed.projectedValue.getter();

  return swift_release();
}

void SystemCoordinator.Configuration.spatialTemplatePreference.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 9);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 9) = v3;
}

uint64_t SystemCoordinator.Configuration.spatialTemplatePreference.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  char v3 = *(unsigned char *)(result + 9);
  *(void *)uint64_t v1 = *(void *)result;
  *(unsigned char *)(v1 + 8) = v2;
  *(unsigned char *)(v1 + 9) = v3;
  return result;
}

uint64_t (*SystemCoordinator.Configuration.spatialTemplatePreference.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t SystemCoordinator.Configuration.supportsGroupImmersiveSpace.getter()
{
  return *(unsigned __int8 *)(v0 + 10);
}

uint64_t SystemCoordinator.Configuration.supportsGroupImmersiveSpace.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 10) = result;
  return result;
}

uint64_t (*SystemCoordinator.Configuration.supportsGroupImmersiveSpace.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

uint64_t SystemCoordinator.Configuration.faceAppTowardsEachParticipant.getter()
{
  return *(unsigned __int8 *)(v0 + 11);
}

uint64_t SystemCoordinator.Configuration.faceAppTowardsEachParticipant.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 11) = result;
  return result;
}

uint64_t (*SystemCoordinator.Configuration.faceAppTowardsEachParticipant.modify())(void, void, void)
{
  return destructiveProjectEnumData for GroupSessionErrors;
}

void SystemCoordinator.Configuration.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(_WORD *)(a1 + 9) = 0;
  *(unsigned char *)(a1 + 11) = 0;
}

void SystemCoordinator.configuration.getter()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)();
  os_unfair_lock_unlock(v1);
}

void key path getter for SystemCoordinator.configuration : SystemCoordinator(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = (os_unfair_lock_s *)(*(void *)(*(void *)a1 + 16) + 16);
  os_unfair_lock_lock(v3);
  closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply();
  os_unfair_lock_unlock(v3);
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 9) = v6;
  *(unsigned char *)(a2 + 10) = v7;
  *(unsigned char *)(a2 + 11) = v8;
}

void SystemCoordinator.configuration.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  char v4 = *((unsigned char *)a1 + 9);
  char v5 = *((unsigned char *)a1 + 10);
  char v6 = *((unsigned char *)a1 + 11);
  char v7 = (os_unfair_lock_s *)(*(void *)(v1 + 16) + 16);
  os_unfair_lock_lock(v7);
  char v8 = (uint64_t *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration);
  double v9 = *(double *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration);
  char v10 = *(unsigned char *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 8);
  int v11 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 9);
  *char v8 = v2;
  *((unsigned char *)v8 + 8) = v3;
  *((unsigned char *)v8 + 9) = v4;
  *((unsigned char *)v8 + 10) = v5;
  *((unsigned char *)v8 + 11) = v6;
  SystemCoordinator.refreshConfiguration()();
  char v12 = *((unsigned char *)v8 + 8);
  int v13 = *((unsigned __int8 *)v8 + 9);
  if (v11 != v13) {
    goto LABEL_9;
  }
  if ((v10 & 1) == 0)
  {
    if (v9 == *(double *)v8) {
      char v14 = *((unsigned char *)v8 + 8);
    }
    else {
      char v14 = 1;
    }
    if ((v14 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if ((v8[1] & 1) == 0)
  {
LABEL_9:
    uint64_t v15 = *v8;
    char v16 = v12;
    char v17 = v13;
    SystemCoordinator.recomputeLocalParticipantState(withNewSpatialTemplatePreference:)((uint64_t)&v15);
  }
LABEL_10:

  os_unfair_lock_unlock(v7);
}

void SystemCoordinator.refreshConfiguration()()
{
  uint64_t v1 = v0;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(*(void *)(v0 + 16) + 16));
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_groupImmersionStyleAssertionManager);
  swift_beginAccess();
  uint64_t v3 = *v2;
  if (v3)
  {
    char v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 128);
    uint64_t v5 = swift_retain();
    uint64_t v6 = v4(v5);
    swift_release();
    if (one-time initialization token for systemCoordinator != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.systemCoordinator);
    swift_retain_n();
    char v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    char v10 = &lazy protocol witness table cache variable for type AnyPublisher<PubSubClient.TopicCategory, Never> and conformance AnyPublisher<A, B>;
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      v38[0] = v12;
      *(_DWORD *)uint64_t v11 = 136315650;
      char v13 = *(unsigned char *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 8);
      char v14 = *(unsigned char *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 9);
      char v15 = *(unsigned char *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 10);
      char v16 = *(unsigned char *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 11);
      uint64_t v39 = *(void *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration);
      LOBYTE(v40) = v13;
      BYTE1(v40) = v14;
      BYTE2(v40) = v15;
      BYTE3(v40) = v16;
      uint64_t v17 = String.init<A>(reflecting:)();
      uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2080;
      LOBYTE(v39) = v6 > 0;
      uint64_t v19 = String.init<A>(reflecting:)();
      uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 22) = 2080;
      unint64_t v21 = *(void *)(v1
                      + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest
                      + 8);
      uint64_t v39 = *(void *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest);
      unint64_t v40 = v21;
      outlined copy of SystemCoordinatorParticipantRoleRequest(v39, v21);
      uint64_t v22 = String.init<A>(reflecting:)();
      uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      char v10 = (void *)&lazy protocol witness table cache variable for type AnyPublisher<PubSubClient.TopicCategory, Never> and conformance AnyPublisher<A, B>;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1A375F000, v8, v9, "SystemCoordinator: Setting configuration %s, isObservingGroupImmersionStyle %s, localParticipantRoleAssignmentRequest: %s", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v12, -1, -1);
      MEMORY[0x1A624F870](v11, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    char v24 = v6 > 0;
    uint64_t v25 = v1 + v10[170];
    char v26 = *(unsigned char *)(v25 + 8);
    char v27 = *(unsigned char *)(v25 + 9);
    uint64_t v42 = *(void *)v25;
    char v43 = v26;
    char v44 = v27;
    char v28 = *(unsigned char *)(v25 + 10);
    unint64_t v30 = *(void *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest + 8);
    v41[0] = *(void *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest);
    uint64_t v29 = v41[0];
    v41[1] = v30;
    char v31 = *(unsigned char *)(v25 + 11);
    uint64_t v32 = (uint64_t *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_defaultSpatialTemplatePreferences);
    swift_beginAccess();
    uint64_t v33 = *v32;
    swift_beginAccess();
    outlined copy of SystemCoordinatorParticipantRoleRequest(v29, v30);
    swift_bridgeObjectRetain();
    uint64_t v34 = swift_bridgeObjectRetain();
    uint64_t v35 = specialized _NativeDictionary.mapValues<A>(_:)(v34);
    swift_bridgeObjectRelease();
    id v36 = objc_allocWithZone((Class)type metadata accessor for SystemCoordinatorConfiguration());
    id v37 = SystemCoordinatorConfiguration.init(spatialTemplatePreference:supportsGroupImmersiveSpace:isObservingGroupImmersionStyle:localParticipantRoleAssignmentRequest:faceAppTowardsEachParticipant:defaultSpatialTemplatePreferences:defaultSpatialTemplateRoles:)(&v42, v28, v24, v41, v31, v33, v35);
    objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_client), sel_setConfiguration_, v37);
  }
  else
  {
    __break(1u);
  }
}

void SystemCoordinator.recomputeLocalParticipantState(withNewSpatialTemplatePreference:)(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 9);
  uint64_t v5 = (const os_unfair_lock *)(*(void *)(v1 + 16) + 16);
  os_unfair_lock_assert_owner(v5);
  uint64_t v6 = *(char **)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_currentState);
  if (v6)
  {
    uint64_t v7 = *(char **)&v6[OBJC_IVAR___CPSystemCoordinatorState_localParticipantState];
    if (*(void *)&v7[OBJC_IVAR___CPSystemCoordinatorParticipantState_roleIdentifier + 8])
    {
      uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest);
      unint64_t v9 = *(void *)(v1
                     + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest
                     + 8);
      *(_OWORD *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest) = xmmword_1A38F6FA0;
      uint64_t v12 = v6;
      outlined consume of SystemCoordinatorParticipantRoleRequest(v8, v9);
      os_unfair_lock_assert_owner(v5);
      SystemCoordinator.refreshConfiguration()();
    }
    else
    {
      uint64_t v13 = v2;
      char v14 = v3;
      char v15 = v4;
      char v10 = v6;
      SystemCoordinator.ParticipantState.init(_:spatialTemplatePreference:)(v7, &v13, (uint64_t)v16);
      swift_beginAccess();
      outlined init with copy of SystemCoordinator.ParticipantState(v1 + 32, (uint64_t)&v13);
      char v11 = specialized static SystemCoordinator.ParticipantState.== infix(_:_:)((unsigned __int8 *)&v13, v16);
      outlined destroy of SystemCoordinator.ParticipantState((uint64_t)&v13);
      if (v11)
      {
        outlined destroy of SystemCoordinator.ParticipantState((uint64_t)v16);
      }
      else
      {
        outlined init with copy of SystemCoordinator.ParticipantState((uint64_t)v16, (uint64_t)&v13);
        if (*(void *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantStatePublisher))
        {
          swift_retain();
          CurrentValueSubject.send(_:)();
          swift_release();
        }
        swift_beginAccess();
        outlined assign with take of SystemCoordinator.ParticipantState((uint64_t)&v13, v1 + 32);
        swift_endAccess();

        outlined destroy of SystemCoordinator.ParticipantState((uint64_t)v16);
      }
    }
  }
}

void (*SystemCoordinator.configuration.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v2 = (os_unfair_lock_s *)(*(void *)(v1 + 16) + 16);
  os_unfair_lock_lock(v2);
  closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply();
  os_unfair_lock_unlock(v2);
  return SystemCoordinator.configuration.modify;
}

void SystemCoordinator.configuration.modify(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 8);
  char v2 = *(unsigned char *)(a1 + 9);
  char v3 = *(unsigned char *)(a1 + 10);
  char v4 = *(unsigned char *)(a1 + 11);
  uint64_t v5 = *(void *)a1;
  char v6 = v1;
  char v7 = v2;
  char v8 = v3;
  char v9 = v4;
  SystemCoordinator.configuration.setter(&v5);
}

void SystemCoordinator.assignRole<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  SystemCoordinator._roleAssignmentDiagnostic<A>(for:)(a1, a2, a3, (uint64_t)v15);
  if (v16 == 255)
  {
    uint64_t v10 = outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v15, &demangling cache variable for type metadata for SystemCoordinator.RoleAssignmentDiagnostic?);
  }
  else
  {
    outlined init with take of SystemCoordinator.RoleAssignmentDiagnostic(v15, v17);
    if (one-time initialization token for runtimeIssues != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.runtimeIssues);
    outlined init with copy of SystemCoordinator.RoleAssignmentDiagnostic((uint64_t)v17, (uint64_t)v15);
    char v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v4, v5))
    {
      char v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v14 = v7;
      *(_DWORD *)char v6 = 136315138;
      unint64_t v8 = SystemCoordinator.RoleAssignmentDiagnostic.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of SystemCoordinator.RoleAssignmentDiagnostic((uint64_t)v15);
      _os_log_impl(&dword_1A375F000, v4, v5, "%s", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v7, -1, -1);
      MEMORY[0x1A624F870](v6, -1, -1);
    }
    else
    {

      outlined destroy of SystemCoordinator.RoleAssignmentDiagnostic((uint64_t)v15);
    }
    uint64_t v10 = outlined destroy of SystemCoordinator.RoleAssignmentDiagnostic((uint64_t)v17);
  }
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = v12 + 4;
  os_unfair_lock_lock(v12 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)();
  os_unfair_lock_unlock(v13);
}

void SystemCoordinator._roleAssignmentDiagnostic<A>(for:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v9 = (os_unfair_lock_s *)(*(void *)(v4 + 16) + 16);
  os_unfair_lock_lock(v9);
  closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply();
  os_unfair_lock_unlock(v9);
  switch(v15)
  {
    case 1:
      uint64_t v11 = 0x2D79622D65646973;
      unint64_t v12 = 0xEC00000065646973;
      goto LABEL_6;
    case 2:
      uint64_t v11 = 0x61737265766E6F63;
      unint64_t v12 = 0xEE006C616E6F6974;
      goto LABEL_6;
    case 3:
      uint64_t v11 = 0x646E756F72727573;
      unint64_t v12 = 0xE800000000000000;
      goto LABEL_6;
    case 4:
      MEMORY[0x1F4188790](v10);
      os_unfair_lock_lock(v9);
      closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply();
      os_unfair_lock_unlock(v9);
      (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
      swift_bridgeObjectRelease();
      *(void *)(a4 + 24) = a2;
      *(void *)(a4 + 32) = a3;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a4);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
      char v13 = 0;
      goto LABEL_8;
    default:
      uint64_t v11 = 1701736302;
      unint64_t v12 = 0xE400000000000000;
LABEL_6:
      *(void *)a4 = v11;
      *(void *)(a4 + 8) = v12;
      char v13 = 1;
LABEL_8:
      *(unsigned char *)(a4 + 40) = v13;
      return;
  }
}

void closure #1 in SystemCoordinator.assignRole<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  char v6 = (uint64_t *)(a1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest);
  uint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest);
  unint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest + 8);
  uint64_t *v6 = v5;
  v6[1] = v9;
  outlined consume of SystemCoordinatorParticipantRoleRequest(v7, v8);
  os_unfair_lock_assert_owner((const os_unfair_lock *)(*(void *)(a1 + 16) + 16));
  SystemCoordinator.refreshConfiguration()();
}

unint64_t SystemCoordinator.RoleAssignmentDiagnostic.description.getter()
{
  outlined init with copy of SystemCoordinator.RoleAssignmentDiagnostic(v0, (uint64_t)v11);
  if (v12)
  {
    if (v12 == 1)
    {
      char v2 = (void *)*((void *)&v11[0] + 1);
      uint64_t v1 = *(void *)&v11[0];
      _StringGuts.grow(_:)(54);
      v3._countAndFlagsBits = 39;
      v3._object = (void *)0xE100000000000000;
      String.append(_:)(v3);
      v4._countAndFlagsBits = v1;
      v4._object = v2;
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      v5._object = (void *)0x80000001A39028F0;
      v5._countAndFlagsBits = 0xD000000000000033;
      String.append(_:)(v5);
      return 0;
    }
    else
    {
      return 0xD00000000000005CLL;
    }
  }
  else
  {
    outlined init with take of TypedPayloadDecoding(v11, (uint64_t)&v10);
    _StringGuts.grow(_:)(84);
    v7._countAndFlagsBits = 0xD000000000000051;
    v7._object = (void *)0x80000001A3902930;
    String.append(_:)(v7);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTemplateRole);
    _print_unlocked<A, B>(_:_:)();
    v8._countAndFlagsBits = 39;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    uint64_t v6 = 0;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v10);
  }
  return v6;
}

uint64_t SystemCoordinator._customTemplateDiagnostic<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v5 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 16);
  unint64_t v6 = *(void *)(v5(a2, a3) + 16);
  swift_bridgeObjectRelease();
  if (v6 > 4) {
    return 0;
  }
  uint64_t v7 = *(void *)(v5(a2, a3) + 16);
  swift_bridgeObjectRelease();
  swift_getDynamicType();
  return v7;
}

uint64_t SystemCoordinator.SpatialTemplateDiagnostic.description.getter(uint64_t a1)
{
  if (a1 >= 1)
  {
    if (a1 == 1)
    {
      unint64_t v2 = 0xD00000000000002CLL;
      Swift::String v3 = (void *)0x80000001A3902BD0;
    }
    else
    {
      _StringGuts.grow(_:)(42);
      unint64_t v2 = Int.spelledOut.getter();
      Swift::String v3 = v6;
      swift_bridgeObjectRelease();
      v7._countAndFlagsBits = 0xD000000000000028;
      v7._object = (void *)0x80000001A3902A90;
      String.append(_:)(v7);
      if (a1 == 4)
      {
        _StringGuts.grow(_:)(18);
        uint64_t v8 = Int.spelledOut.getter();
        uint64_t v10 = v9;
        swift_bridgeObjectRelease();
        v23._countAndFlagsBits = v8;
        v23._object = v10;
        unint64_t v11 = 0xD000000000000010;
        char v12 = " additional seat";
LABEL_8:
        unint64_t v16 = (unint64_t)(v12 - 32) | 0x8000000000000000;
        String.append(_:)(*(Swift::String *)&v11);
        _StringGuts.grow(_:)(222);
        v17._countAndFlagsBits = 0xD000000000000049;
        v17._object = (void *)0x80000001A3902AE0;
        String.append(_:)(v17);
        v18._countAndFlagsBits = v2;
        v18._object = v3;
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._countAndFlagsBits = 0xD000000000000071;
        v19._object = (void *)0x80000001A3902B30;
        String.append(_:)(v19);
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        unint64_t v4 = 0x27206F7420;
        unint64_t v5 = 0xE500000000000000;
        goto LABEL_9;
      }
    }
    _StringGuts.grow(_:)(19);
    uint64_t v13 = Int.spelledOut.getter();
    char v15 = v14;
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = v13;
    v23._object = v15;
    unint64_t v11 = 0xD000000000000011;
    char v12 = " additional seats";
    goto LABEL_8;
  }
  _StringGuts.grow(_:)(245);
  unint64_t v4 = 0xD0000000000000DALL;
  unint64_t v5 = 0x80000001A3902990;
LABEL_9:
  String.append(_:)(*(Swift::String *)&v4);
  v20._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._object = (void *)0x80000001A3902A70;
  v21._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v21);
  return 0;
}

uint64_t Int.spelledOut.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28EE0]), sel_init);
  objc_msgSend(v0, sel_setNumberStyle_, 5);
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  id v2 = objc_msgSend(v0, sel_stringFromNumber_, isa);

  if (v2)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v3 = BinaryInteger.description.getter();
  }
  return v3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SystemCoordinator.SpatialTemplateDiagnostic()
{
  return SystemCoordinator.SpatialTemplateDiagnostic.description.getter(*v0);
}

Swift::Void __swiftcall SystemCoordinator.resignRole()()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply();
  os_unfair_lock_unlock(v1);
}

void closure #1 in SystemCoordinator.resignRole()(uint64_t a1)
{
  uint64_t v2 = a1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest;
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest);
  unint64_t v4 = *(void *)(v2 + 8);
  *(_OWORD *)uint64_t v2 = xmmword_1A38F6FA0;
  outlined consume of SystemCoordinatorParticipantRoleRequest(v3, v4);
  os_unfair_lock_assert_owner((const os_unfair_lock *)(*(void *)(a1 + 16) + 16));
  SystemCoordinator.refreshConfiguration()();
}

uint64_t key path getter for SystemCoordinator.spatialCatchupNeededHandler : SystemCoordinator@<X0>(void *a1@<X0>, uint64_t (**a2)(unsigned __int8 *a1)@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_spatialCatchupNeededHandler);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    Swift::String v7 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  }
  else
  {
    Swift::String v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)(unsigned __int8 *))v6;
  return outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v4);
}

uint64_t key path setter for SystemCoordinator.spatialCatchupNeededHandler : SystemCoordinator(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  Swift::String v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_spatialCatchupNeededHandler);
  swift_beginAccess();
  uint64_t v8 = *v7;
  *Swift::String v7 = (uint64_t)v6;
  v7[1] = v5;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v8);
}

uint64_t SystemCoordinator.spatialCatchupNeededHandler.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_spatialCatchupNeededHandler);
  swift_beginAccess();
  uint64_t v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*v1);
  return v2;
}

uint64_t SystemCoordinator.spatialCatchupNeededHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_spatialCatchupNeededHandler);
  swift_beginAccess();
  uint64_t v6 = *v5;
  *uint64_t v5 = a1;
  v5[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(v6);
}

uint64_t (*SystemCoordinator.spatialCatchupNeededHandler.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t SystemCoordinator._groupImmersionStyle.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<SystemCoordinatorState.GroupImmersionStyle?, Never>>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[1] = *(void *)(v0 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_groupImmersionStyleSubject);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<SystemCoordinatorState.GroupImmersionStyle?, Never>);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<SystemCoordinatorState.GroupImmersionStyle?, Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<SystemCoordinatorState.GroupImmersionStyle?, Never>);
  lazy protocol witness table accessor for type SystemCoordinatorState.GroupImmersionStyle? and conformance <A> A?();
  Publisher<>.removeDuplicates()();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Publishers.RemoveDuplicates<CurrentValueSubject<SystemCoordinatorState.GroupImmersionStyle?, Never>> and conformance Publishers.RemoveDuplicates<A>, &demangling cache variable for type metadata for Publishers.RemoveDuplicates<CurrentValueSubject<SystemCoordinatorState.GroupImmersionStyle?, Never>>);
  uint64_t v5 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v5;
}

uint64_t SystemCoordinator.groupImmersionStyleAssertionManager.getter()
{
  return swift_retain();
}

uint64_t SystemCoordinator.groupImmersionStyleAssertionManager.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_groupImmersionStyleAssertionManager);
  swift_beginAccess();
  void *v3 = a1;
  return swift_release();
}

uint64_t (*SystemCoordinator.groupImmersionStyleAssertionManager.modify())()
{
  return GroupSession.attachmentDownloadBytes.modify;
}

uint64_t SystemCoordinator.client.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t SystemCoordinator.subscriptions.getter()
{
  return SystemCoordinator.subscriptions.getter();
}

{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t SystemCoordinator.subscriptions.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_subscriptions);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SystemCoordinator.subscriptions.modify())()
{
  return GroupSession.GroupSessionPlaybackSyncerLink.shouldRequestCatchup.modify;
}

uint64_t SystemCoordinator.defaultSpatialTemplatePreferences.getter()
{
  return SystemCoordinator.subscriptions.getter();
}

void SystemCoordinator.defaultSpatialTemplatePreferences.setter(uint64_t a1)
{
}

uint64_t (*SystemCoordinator.defaultSpatialTemplatePreferences.modify(uint64_t a1))()
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return SystemCoordinator.defaultSpatialTemplatePreferences.modify;
}

uint64_t SystemCoordinator.defaultSpatialTemplateRoles.getter()
{
  return SystemCoordinator.subscriptions.getter();
}

void key path setter for SystemCoordinator.defaultSpatialTemplatePreferences : SystemCoordinator(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *a2;
  Swift::String v7 = (void *)(*a2 + *a5);
  swift_beginAccess();
  *Swift::String v7 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(*(void *)(v6 + 16) + 16));
  SystemCoordinator.refreshConfiguration()();
}

void SystemCoordinator.defaultSpatialTemplateRoles.setter(uint64_t a1)
{
}

void SystemCoordinator.defaultSpatialTemplatePreferences.setter(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  void *v4 = a1;
  swift_bridgeObjectRelease();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(*(void *)(v2 + 16) + 16));
  SystemCoordinator.refreshConfiguration()();
}

uint64_t (*SystemCoordinator.defaultSpatialTemplateRoles.modify(uint64_t a1))()
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return SystemCoordinator.defaultSpatialTemplatePreferences.modify;
}

void SystemCoordinator.defaultSpatialTemplatePreferences.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(*(void *)(*(void *)(a1 + 24) + 16) + 16));
    SystemCoordinator.refreshConfiguration()();
  }
}

uint64_t SystemCoordinator.init(clientProvider:)(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  v2[14] = *v1;
  uint64_t v3 = type metadata accessor for SystemCoordinator.ParticipantStates(0);
  v2[15] = v3;
  v2[16] = *(void *)(v3 - 8);
  v2[17] = swift_task_alloc();
  return MEMORY[0x1F4188298](SystemCoordinator.init(clientProvider:), 0, 0);
}

uint64_t SystemCoordinator.init(clientProvider:)()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(void **)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 104);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(void *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(void *)(v4 + 128) = 0;
  *(void *)(v4 + 136) = 1;
  *(unsigned char *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  uint64_t v6 = OBJC_IVAR____TtC15GroupActivities17SystemCoordinator____lazy_storage___localParticipantStates;
  *(void *)(v0 + 144) = OBJC_IVAR____TtC15GroupActivities17SystemCoordinator____lazy_storage___localParticipantStates;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v4 + v6, 1, 1, v1);
  uint64_t v7 = OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__activeSpatialParticipantCount;
  *(void *)(v0 + 152) = OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__activeSpatialParticipantCount;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _Streamed<Int>);
  uint64_t v8 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<_Streamed<Int>.State, os_unfair_lock_s>);
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 40) = 0;
  uint64_t v10 = MEMORY[0x1E4FBC868];
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = v10;
  *(void *)(v9 + 32) = 0;
  *(void *)(v8 + 16) = v9;
  *(void *)(v4 + v7) = v8;
  uint64_t v11 = v4 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration;
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  *(_WORD *)(v11 + 9) = 0;
  *(unsigned char *)(v11 + 11) = 0;
  uint64_t v12 = OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_spatialCatchupNeededHandler;
  *(void *)(v0 + 160) = OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_spatialCatchupNeededHandler;
  uint64_t v13 = (void *)(v4 + v12);
  *uint64_t v13 = 0;
  v13[1] = 0;
  uint64_t v14 = OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_groupImmersionStyleSubject;
  *(void *)(v0 + 168) = OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_groupImmersionStyleSubject;
  *(unsigned char *)(v0 + 192) = 3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<SystemCoordinatorState.GroupImmersionStyle?, Never>);
  swift_allocObject();
  *(void *)(v4 + v14) = CurrentValueSubject.init(_:)();
  *(void *)(v4 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_groupImmersionStyleAssertionManager) = 0;
  *(void *)(v4 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_currentState) = 0;
  *(void *)(v4 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_subscriptions) = MEMORY[0x1E4FBC870];
  *(void *)(v4 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantStatePublisher) = 0;
  char v15 = (void *)(v4 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest);
  *char v15 = 0;
  v15[1] = 0;
  *(void *)(v4 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_defaultSpatialTemplatePreferences) = v10;
  *(void *)(v4 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_defaultSpatialTemplateRoles) = v10;
  uint64_t v16 = v3[3];
  uint64_t v17 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v16);
  Swift::String v20 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v17 + 8) + **(int **)(v17 + 8));
  Swift::String v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v18;
  void *v18 = v0;
  v18[1] = SystemCoordinator.init(clientProvider:);
  return v20(v16, v17);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  void (*v15)(uint64_t (*)(), uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t (*)(void *), uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v28;
  uint64_t v29;

  uint64_t v1 = v0[23];
  if (v1)
  {
    uint64_t v2 = v0[10];
    char v28 = v0[17];
    uint64_t v4 = (void *)v0[12];
    uint64_t v3 = v0[13];
    uint64_t v5 = v4[3];
    uint64_t v6 = v4[4];
    __swift_project_boxed_opaque_existential_1(v4, v5);
    *(unsigned char *)(v3 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_canBeInitialSpatialDriver) = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6) & 1;
    uint64_t v7 = (void *)(v3 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_client);
    *uint64_t v7 = v1;
    v7[1] = v2;
    uint64_t v8 = swift_allocObject();
    swift_weakInit();
    type metadata accessor for AssertionManager();
    uint64_t v9 = (void *)swift_allocObject();
    type metadata accessor for Lock();
    swift_allocObject();
    swift_unknownObjectRetain();
    void v9[4] = Lock.init()();
    v9[5] = 0;
    long long v9[2] = partial apply for closure #1 in SystemCoordinator.init(clientProvider:);
    _OWORD v9[3] = v8;
    uint64_t v10 = (void *)(v3 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_groupImmersionStyleAssertionManager);
    swift_beginAccess();
    *uint64_t v10 = v9;
    swift_release();
    uint64_t v11 = v3 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_client;
    uint64_t v12 = *(void *)(v3 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_client + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v14 = swift_allocObject();
    swift_weakInit();
    char v15 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v12 + 16);
    swift_unknownObjectRetain();
    swift_retain();
    v15(partial apply for closure #2 in SystemCoordinator.init(clientProvider:), v14, ObjectType, v12);
    swift_release();
    swift_unknownObjectRelease();
    uint64_t v16 = *(void *)(v11 + 8);
    uint64_t v17 = swift_getObjectType();
    Swift::String v18 = swift_allocObject();
    swift_weakInit();
    Swift::String v19 = *(void (**)(uint64_t (*)(void *), uint64_t, uint64_t, uint64_t))(v16 + 40);
    swift_unknownObjectRetain();
    swift_retain();
    v19(partial apply for closure #3 in SystemCoordinator.init(clientProvider:), v18, v17, v16);
    swift_release();
    swift_unknownObjectRelease();
    Swift::String v20 = v4[3];
    uint64_t v21 = v4[4];
    __swift_project_boxed_opaque_existential_1(v4, v20);
    v0[11] = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
    swift_allocObject();
    swift_weakInit();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AnyPublisher<Bool, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Bool, Never>);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    SystemCoordinator.localParticipantStates.getter(v28);
    swift_unknownObjectRelease();
    outlined destroy of SystemCoordinator.ParticipantStates(v28);
    uint64_t v22 = v0[13];
  }
  else
  {
    Swift::String v23 = v0[13];
    char v24 = (uint64_t *)(v23 + v0[20]);
    uint64_t v25 = v23 + v0[18];
    swift_release();
    outlined destroy of SystemCoordinator.ParticipantState(v23 + 32);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v25, &demangling cache variable for type metadata for SystemCoordinator.ParticipantStates?);
    swift_release();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*v24);
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of SystemCoordinatorParticipantRoleRequest(*(void *)(v23 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest), *(void *)(v23 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
    uint64_t v22 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v0[12]);
  swift_task_dealloc();
  char v26 = (uint64_t (*)(uint64_t))v0[1];
  return v26(v22);
}

uint64_t SystemCoordinator.init(clientProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  v3[8] = v2;
  v3[9] = a1;
  v3[10] = a2;
  v3[23] = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](SystemCoordinator.init(clientProvider:), 0, 0);
}

uint64_t closure #1 in SystemCoordinator.init(clientProvider:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = *(os_unfair_lock_s **)(result + 16);
    MEMORY[0x1F4188790](result);
    swift_retain();
    os_unfair_lock_lock(v1 + 4);
    closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply();
    os_unfair_lock_unlock(v1 + 4);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in SystemCoordinator.init(clientProvider:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (one-time initialization token for systemCoordinator != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Log.systemCoordinator);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1A375F000, v2, v3, "Server disconnected", v4, 2u);
      MEMORY[0x1A624F870](v4, -1, -1);
    }

    SystemCoordinator.resetPublishedProperties()();
    return swift_release();
  }
  return result;
}

uint64_t SystemCoordinator.resetPublishedProperties()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for systemCoordinator != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.systemCoordinator);
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1A375F000, v3, v4, "Resetting published properties", v5, 2u);
    MEMORY[0x1A624F870](v5, -1, -1);
  }

  MEMORY[0x1F4188790](v6);
  uint64_t v8 = v7 + 4;
  os_unfair_lock_lock(v7 + 4);
  closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply();
  os_unfair_lock_unlock(v8);
  CurrentValueSubject.send(_:)();
  uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_client + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 56))(ObjectType, v9);
}

uint64_t closure #3 in SystemCoordinator.init(clientProvider:)(void *a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    SystemCoordinator.update(with:isInitial:)(a1, 0);
    return swift_release();
  }
  return result;
}

uint64_t SystemCoordinator.update(with:isInitial:)(void *a1, char a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for systemCoordinator != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Log.systemCoordinator);
  id v7 = a1;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    v36[0] = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    type metadata accessor for SystemCoordinatorState();
    id v12 = v7;
    uint64_t v13 = String.init<A>(reflecting:)();
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v8, v9, "Updating with state=%s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v11, -1, -1);
    MEMORY[0x1A624F870](v10, -1, -1);
  }
  else
  {
  }
  char v15 = *(void **)(v3 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_currentState);
  *(void *)(v3 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_currentState) = v7;

  uint64_t v16 = (os_unfair_lock_s *)(*(void *)(v3 + 16) + 16);
  uint64_t v17 = v7;
  os_unfair_lock_lock(v16);
  Swift::String v18 = *(void **)&v17[OBJC_IVAR___CPSystemCoordinatorState_localParticipantState];
  char v19 = *(unsigned char *)(v3 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 8);
  char v20 = *(unsigned char *)(v3 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 9);
  uint64_t v33 = *(void *)(v3 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration);
  char v34 = v19;
  char v35 = v20;
  uint64_t v21 = v18;
  SystemCoordinator.ParticipantState.init(_:spatialTemplatePreference:)(v21, &v33, (uint64_t)v36);
  swift_beginAccess();
  outlined init with copy of SystemCoordinator.ParticipantState(v3 + 32, (uint64_t)&v33);
  char v22 = specialized static SystemCoordinator.ParticipantState.== infix(_:_:)((unsigned __int8 *)&v33, (unsigned __int8 *)v36);
  outlined destroy of SystemCoordinator.ParticipantState((uint64_t)&v33);
  if (v22)
  {
    os_unfair_lock_unlock(v16);
  }
  else
  {
    char v23 = *(unsigned char *)(v3 + 32);
    outlined init with copy of SystemCoordinator.ParticipantState((uint64_t)v36, (uint64_t)&v33);
    char v24 = (v23 ^ 1) & v33;
    outlined destroy of SystemCoordinator.ParticipantState((uint64_t)&v33);
    outlined init with copy of SystemCoordinator.ParticipantState((uint64_t)v36, (uint64_t)v32);
    if (*(void *)(v3 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantStatePublisher))
    {
      swift_retain();
      CurrentValueSubject.send(_:)();
      swift_release();
    }
    swift_beginAccess();
    outlined assign with take of SystemCoordinator.ParticipantState((uint64_t)v32, v3 + 32);
    swift_endAccess();
    os_unfair_lock_unlock(v16);
    if (v24)
    {
      uint64_t v25 = (void (**)(BOOL))(v3
                                       + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_spatialCatchupNeededHandler);
      swift_beginAccess();
      char v26 = *v25;
      if (*v25)
      {
        if (a2) {
          char v27 = (char *)v3;
        }
        else {
          char v27 = v21;
        }
        char v28 = &OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_canBeInitialSpatialDriver;
        if ((a2 & 1) == 0) {
          char v28 = &OBJC_IVAR___CPSystemCoordinatorParticipantState_isSpatialInitiator;
        }
        char v29 = v27[*v28];
        swift_retain();
        v26((v29 & 1) == 0);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?((uint64_t)v26);
      }
    }
  }
  uint64_t v30 = *(void *)&v17[OBJC_IVAR___CPSystemCoordinatorState_activeSpatialParticipantCount];
  swift_retain();
  specialized _Streamed.yield(_:)(v30);
  swift_release();
  LOBYTE(v33) = v17[OBJC_IVAR___CPSystemCoordinatorState_groupImmersionStyle];
  CurrentValueSubject.send(_:)();
  return outlined destroy of SystemCoordinator.ParticipantState((uint64_t)v36);
}

uint64_t closure #4 in SystemCoordinator.init(clientProvider:)(unsigned __int8 *a1)
{
  int v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (v1) {
      SystemCoordinator.fetchInitialState()();
    }
    else {
      SystemCoordinator.finishPublishedProperties()();
    }
    return swift_release();
  }
  return result;
}

void SystemCoordinator.fetchInitialState()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for systemCoordinator != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.systemCoordinator);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1A375F000, v3, v4, "Fetching initial state", v5, 2u);
    MEMORY[0x1A624F870](v5, -1, -1);
  }

  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_client);
  v8[4] = partial apply for closure #1 in SystemCoordinator.fetchInitialState();
  void v8[5] = v1;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1107296256;
  void v8[2] = thunk for @escaping @callee_guaranteed (@guaranteed SystemCoordinatorState) -> ();
  void v8[3] = &block_descriptor_9;
  id v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_requestCurrentState_, v7);
  _Block_release(v7);
}

uint64_t SystemCoordinator.finishPublishedProperties()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for systemCoordinator != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.systemCoordinator);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1A375F000, v3, v4, "Finishing published properties", v5, 2u);
    MEMORY[0x1A624F870](v5, -1, -1);
  }

  if (*(void *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantStatePublisher))
  {
    swift_retain();
    CurrentValueSubject.send(completion:)();
    swift_release();
  }
  CurrentValueSubject.send(completion:)();
  swift_retain();
  specialized _Streamed.finish()();
  swift_release();
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_client + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 56))(ObjectType, v6);
}

uint64_t closure #1 in SystemCoordinator.resetPublishedProperties()(uint64_t a1)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v4 = 0u;
  uint64_t v9 = 0;
  uint64_t v10 = 1;
  v3[0] = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  if (*(void *)(a1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantStatePublisher))
  {
    swift_retain();
    CurrentValueSubject.send(_:)();
    swift_release();
  }
  swift_beginAccess();
  outlined assign with take of SystemCoordinator.ParticipantState((uint64_t)v3, a1 + 32);
  return swift_endAccess();
}

uint64_t SystemCoordinator.deinit()
{
  swift_release();
  outlined destroy of SystemCoordinator.ParticipantState(v0 + 32);
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator____lazy_storage___localParticipantStates, &demangling cache variable for type metadata for SystemCoordinator.ParticipantStates?);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Data, @unowned UInt64) -> ())?(*(void *)(v0 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_spatialCatchupNeededHandler));
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of SystemCoordinatorParticipantRoleRequest(*(void *)(v0 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest), *(void *)(v0 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_localParticipantRoleAssignmentRequest + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SystemCoordinator.__deallocating_deinit()
{
  SystemCoordinator.deinit();

  return swift_deallocClassInstance();
}

uint64_t specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t partial apply for closure #1 in SystemCoordinator.localParticipantState.getter@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in SystemCoordinator.localParticipantState.getter(a1);
}

{
  uint64_t v1;

  swift_beginAccess();
  return outlined init with copy of SystemCoordinator.ParticipantState(v1 + 32, a1);
}

uint64_t partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t outlined init with copy of SystemCoordinator.ParticipantStates?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SystemCoordinator.ParticipantStates?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SystemCoordinator.ParticipantStates(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of SystemCoordinator.ParticipantStates?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SystemCoordinator.ParticipantStates?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of SystemCoordinator.ParticipantStates(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SystemCoordinator.ParticipantStates(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized closure #1 in _Streamed.wrappedValue.getter@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 16);
  return result;
}

void partial apply for closure #1 in SystemCoordinator.configuration.getter(uint64_t a1@<X8>)
{
}

{
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  char v5;

  uint64_t v2 = *(unsigned char *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 8);
  uint64_t v3 = *(unsigned char *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 9);
  uint64_t v4 = *(unsigned char *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 10);
  long long v5 = *(unsigned char *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration + 11);
  *(void *)a1 = *(void *)(v1 + OBJC_IVAR____TtC15GroupActivities17SystemCoordinator__configuration);
  *(unsigned char *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 9) = v3;
  *(unsigned char *)(a1 + 10) = v4;
  *(unsigned char *)(a1 + 11) = v5;
}

void partial apply for closure #1 in SystemCoordinator.assignRole<A>(_:)()
{
  closure #1 in SystemCoordinator.assignRole<A>(_:)(v0[4], v0[5], v0[2], v0[3]);
}

_OWORD *outlined init with take of SystemCoordinator.RoleAssignmentDiagnostic(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(long long *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t outlined init with copy of SystemCoordinator.RoleAssignmentDiagnostic(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of SystemCoordinator.RoleAssignmentDiagnostic(uint64_t a1)
{
  return a1;
}

void partial apply for closure #1 in SystemCoordinator.resignRole()()
{
  closure #1 in SystemCoordinator.resignRole()(v0);
}

unint64_t lazy protocol witness table accessor for type SystemCoordinatorState.GroupImmersionStyle? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemCoordinatorState.GroupImmersionStyle? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type SystemCoordinatorState.GroupImmersionStyle? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for SystemCoordinatorState.GroupImmersionStyle?);
    lazy protocol witness table accessor for type SystemCoordinatorState.GroupImmersionStyle and conformance SystemCoordinatorState.GroupImmersionStyle();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemCoordinatorState.GroupImmersionStyle? and conformance <A> A?);
  }
  return result;
}

uint64_t sub_1A38A49D8()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in SystemCoordinator.init(clientProvider:)()
{
  return closure #1 in SystemCoordinator.init(clientProvider:)();
}

uint64_t partial apply for closure #2 in SystemCoordinator.init(clientProvider:)()
{
  return closure #2 in SystemCoordinator.init(clientProvider:)();
}

uint64_t partial apply for closure #3 in SystemCoordinator.init(clientProvider:)(void *a1)
{
  return closure #3 in SystemCoordinator.init(clientProvider:)(a1);
}

uint64_t partial apply for closure #4 in SystemCoordinator.init(clientProvider:)(unsigned __int8 *a1)
{
  return closure #4 in SystemCoordinator.init(clientProvider:)(a1);
}

uint64_t sub_1A38A4A30@<X0>(uint64_t a1@<X8>)
{
  return SystemCoordinator.localParticipantStates.getter(a1);
}

void sub_1A38A4A64(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 8);
  char v2 = *(unsigned char *)(a1 + 9);
  char v3 = *(unsigned char *)(a1 + 10);
  char v4 = *(unsigned char *)(a1 + 11);
  uint64_t v5 = *(void *)a1;
  char v6 = v1;
  char v7 = v2;
  char v8 = v3;
  char v9 = v4;
  SystemCoordinator.configuration.setter(&v5);
}

uint64_t sub_1A38A4AC4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_get_21Tm(a1, &OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_defaultSpatialTemplatePreferences, a2);
}

void sub_1A38A4AD0(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1A38A4AF0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_get_21Tm(a1, &OBJC_IVAR____TtC15GroupActivities17SystemCoordinator_defaultSpatialTemplateRoles, a2);
}

uint64_t keypath_get_21Tm@<X0>(void *a1@<X0>, void *a2@<X3>, void *a3@<X8>)
{
  char v4 = (void *)(*a1 + *a2);
  swift_beginAccess();
  *a3 = *v4;
  return swift_bridgeObjectRetain();
}

void sub_1A38A4B50(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t ObjC metadata update function for SystemCoordinator()
{
  return type metadata accessor for SystemCoordinator();
}

uint64_t type metadata accessor for SystemCoordinator()
{
  uint64_t result = type metadata singleton initialization cache for SystemCoordinator;
  if (!type metadata singleton initialization cache for SystemCoordinator) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for SystemCoordinator()
{
  type metadata accessor for SystemCoordinator.ParticipantStates?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for SystemCoordinator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SystemCoordinator);
}

uint64_t dispatch thunk of SystemCoordinator.__allocating_init(clientProvider:)(uint64_t a1)
{
  char v6 = (uint64_t (*)(uint64_t))(*(void *)(v1 + 208) + **(int **)(v1 + 208));
  char v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = dispatch thunk of SystemCoordinatorTable.systemCoordinator(for:);
  return v6(a1);
}

void type metadata accessor for SystemCoordinator.ParticipantStates?()
{
  if (!lazy cache variable for type metadata for SystemCoordinator.ParticipantStates?)
  {
    type metadata accessor for SystemCoordinator.ParticipantStates(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SystemCoordinator.ParticipantStates?);
    }
  }
}

uint64_t __swift_memcpy12_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SystemCoordinator.Configuration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 10);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemCoordinator.Configuration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 12) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 12) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 10) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemCoordinator.Configuration()
{
  return &type metadata for SystemCoordinator.Configuration;
}

uint64_t destroy for SystemCoordinator.RoleAssignmentDiagnostic(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)result + 2;
  }
  if (v1 == 1) {
    return swift_bridgeObjectRelease();
  }
  if (!v1) {
    return __swift_destroy_boxed_opaque_existential_1Tm(result);
  }
  return result;
}

uint64_t initializeWithCopy for SystemCoordinator.RoleAssignmentDiagnostic(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 40) = 1;
    swift_bridgeObjectRetain();
  }
  else if (v3)
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for SystemCoordinator.RoleAssignmentDiagnostic(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(unsigned char *)(a1 + 40) = 1;
      swift_bridgeObjectRetain();
    }
    else if (v5)
    {
      long long v7 = *a2;
      long long v8 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v7;
      *(_OWORD *)(a1 + 16) = v8;
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for SystemCoordinator.RoleAssignmentDiagnostic(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = 0;
      }
    }
  }
  return a1;
}

uint64_t getEnumTag for SystemCoordinator.RoleAssignmentDiagnostic(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for SystemCoordinator.RoleAssignmentDiagnostic(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SystemCoordinator.RoleAssignmentDiagnostic()
{
  return &type metadata for SystemCoordinator.RoleAssignmentDiagnostic;
}

ValueMetadata *type metadata accessor for SystemCoordinator.SpatialTemplateDiagnostic()
{
  return &type metadata for SystemCoordinator.SpatialTemplateDiagnostic;
}

uint64_t sub_1A38A51CC()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())(char a1)
{
  uint64_t v2 = *(uint64_t (**)(char *))(v1 + 16);
  char v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t partial apply for specialized closure #1 in _Streamed.yield(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = **(void **)(v2 + 16);
  if (*(void *)(a1 + 16) == v4)
  {
    uint64_t result = 0;
  }
  else
  {
    *(void *)(a1 + 16) = v4;
    uint64_t result = swift_bridgeObjectRetain();
  }
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in SystemCoordinator.fetchInitialState()(void *a1)
{
  return SystemCoordinator.update(with:isInitial:)(a1, 1);
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t specialized closure #1 in _Streamed.projectedValue.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation?);
  uint64_t result = MEMORY[0x1F4188790](v6 - 8);
  char v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  if (__OFADD__(*a1, 1))
  {
    __break(1u);
  }
  else
  {
    ++*a1;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation);
    uint64_t v12 = *(void *)(v11 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v9, a2, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    uint64_t result = specialized Dictionary.subscript.setter((uint64_t)v9, v10);
    uint64_t v13 = a1[2];
    *a3 = v10;
    a3[1] = v13;
  }
  return result;
}

uint64_t specialized closure #1 in _Streamed.finish()@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)(result + 8) = MEMORY[0x1E4FBC868];
  *a2 = v2;
  return result;
}

uint64_t outlined assign with take of SystemCoordinator.ParticipantState(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for closure #1 in SystemCoordinator.resetPublishedProperties()()
{
  return closure #1 in SystemCoordinator.resetPublishedProperties()(v0);
}

void partial apply for closure #1 in closure #1 in SystemCoordinator.init(clientProvider:)()
{
}

uint64_t partial apply for specialized closure #1 in _Streamed.projectedValue.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized closure #1 in _Streamed.projectedValue.getter(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1A38A5584()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for specialized closure #2 in _Streamed.projectedValue.getter()
{
  return specialized closure #2 in _Streamed.projectedValue.getter();
}

uint64_t partial apply for specialized closure #1 in closure #2 in _Streamed.projectedValue.getter(uint64_t a1)
{
  return specialized closure #1 in closure #2 in _Streamed.projectedValue.getter(a1, *(void *)(v1 + 16));
}

uint64_t closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply()
{
  return partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)();
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned SystemCoordinatorState) -> ()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void thunk for @escaping @callee_guaranteed (@guaranteed SystemCoordinatorState) -> ()(uint64_t a1, void *a2)
{
  unsigned int v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t GroupSession.createClient()()
{
  v0[2] = 0xD00000000000002CLL;
  v0[3] = 0x80000001A3901780;
  uint64_t v1 = (void *)swift_task_alloc();
  v0[6] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = GroupSession.createClient();
  return GroupSession.requestEndpoint(with:)(v0 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  _UNKNOWN **v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t (*v7)(uint64_t, _UNKNOWN **);
  uint64_t v9;

  if (*(void *)(v0 + 56))
  {
    type metadata accessor for SystemCoordinatorClientConnection();
    uint64_t v1 = XPCClient.__allocating_init(listenerEndpoint:)();
    uint64_t v2 = &protocol witness table for SystemCoordinatorClientConnection;
  }
  else
  {
    if (one-time initialization token for systemCoordinator != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Log.systemCoordinator);
    id v4 = Logger.logObject.getter();
    unsigned int v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_1A375F000, v4, v5, "No available endpoint for coordinator", v6, 2u);
      MEMORY[0x1A624F870](v6, -1, -1);
    }

    uint64_t v1 = 0;
    uint64_t v2 = 0;
  }
  long long v7 = *(uint64_t (**)(uint64_t, _UNKNOWN **))(v0 + 8);
  return v7(v1, v2);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(void, void);
  uint64_t v16;
  void *v17;
  uint64_t v18;

  uint64_t v17 = v0;
  if (one-time initialization token for systemCoordinator != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[8];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.systemCoordinator);
  uint64_t v3 = v1;
  id v4 = v1;
  unsigned int v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  long long v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[8];
  if (v7)
  {
    char v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v16 = v10;
    *(_DWORD *)char v9 = 136315138;
    v0[4] = v8;
    uint64_t v11 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(reflecting:)();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v5, v6, "Failed getting endpoint for coordinator: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v10, -1, -1);
    MEMORY[0x1A624F870](v9, -1, -1);
  }
  else
  {
  }
  uint64_t v14 = (uint64_t (*)(void, void))v0[1];
  return v14(0, 0);
}

uint64_t GroupSession.createClient()(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 56) = a1;
  *(void *)(v3 + 64) = v1;
  swift_task_dealloc();
  if (v1) {
    id v4 = GroupSession.createClient();
  }
  else {
    id v4 = GroupSession.createClient();
  }
  return MEMORY[0x1F4188298](v4, 0, 0);
}

uint64_t GroupSession.isClientValidPublisher.getter()
{
  uint64_t v1 = *v0;
  uint64_t v19 = *(void *)(*v0 + 80);
  uint64_t v18 = *(void *)(v1 + 88);
  type metadata accessor for GroupSession.State();
  uint64_t v2 = type metadata accessor for Published.Publisher();
  uint64_t v20 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v4 = (char *)v17 - v3;
  _OWORD v17[2] = swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for Publishers.Map();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v17 - v7;
  v17[1] = swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for Publishers.RemoveDuplicates();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v17 - v11;
  GroupSession.$state.getter();
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = v18;
  *(void *)(v13 + 16) = v19;
  *(void *)(v13 + 24) = v14;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v2);
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_getWitnessTable();
  uint64_t v15 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v15;
}

uint64_t closure #1 in GroupSession.isClientValidPublisher.getter@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  char v4 = 1;
  uint64_t v6 = 1;
  id v7 = v3;
  uint64_t result = static GroupSession.State.== infix(_:_:)(&v7, (void **)&v6);
  if ((result & 1) == 0)
  {
    uint64_t v6 = 0;
    id v7 = v3;
    uint64_t result = static GroupSession.State.== infix(_:_:)(&v7, (void **)&v6);
    char v4 = result;
  }
  *a2 = v4 & 1;
  return result;
}

uint64_t GroupSession.canBeInitialSpatialDriver.getter()
{
  if (*(unsigned char *)(v0 + *(void *)(*(void *)v0 + 256)) != 1) {
    return 0;
  }
  uint64_t v1 = (unsigned __int8 *)(v0 + *(void *)(*(void *)v0 + 272));
  swift_beginAccess();
  return *v1;
}

uint64_t protocol witness for SystemCoordinatorClientProvider.createClient() in conformance GroupSession<A>()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for SystemCoordinatorClientProvider.createClient() in conformance GroupSession<A>;
  return GroupSession.createClient()();
}

uint64_t protocol witness for SystemCoordinatorClientProvider.createClient() in conformance GroupSession<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(a1, a2);
}

uint64_t protocol witness for SystemCoordinatorClientProvider.isClientValidPublisher.getter in conformance GroupSession<A>()
{
  return GroupSession.isClientValidPublisher.getter();
}

uint64_t protocol witness for SystemCoordinatorClientProvider.canBeInitialSpatialDriver.getter in conformance GroupSession<A>()
{
  return GroupSession.canBeInitialSpatialDriver.getter() & 1;
}

uint64_t SystemCoordinatorClientConnection.requestCurrentState(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = XPCClient.queue.getter();
  uint64_t v6 = (void *)swift_allocObject();
  void v6[2] = v2;
  v6[3] = a1;
  v6[4] = a2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for closure #1 in SystemCoordinatorClientConnection.requestCurrentState(_:);
  *(void *)(v7 + 24) = v6;
  void v12[4] = _sIg_Ieg_TRTA_0;
  v12[5] = v7;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed () -> ();
  _OWORD v12[3] = &block_descriptor_10;
  uint64_t v8 = _Block_copy(v12);
  id v9 = v2;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v5, v8);

  _Block_release(v8);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

void closure #1 in closure #1 in SystemCoordinatorClientConnection.requestCurrentState(_:)(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  void v5[4] = a2;
  v5[5] = a3;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1107296256;
  long long v5[2] = thunk for @escaping @callee_guaranteed (@guaranteed SystemCoordinatorState) -> ();
  v5[3] = &block_descriptor_25;
  char v4 = _Block_copy(v5);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_requestCurrentState_, v4);
  _Block_release(v4);
}

uint64_t @objc SystemCoordinatorClientConnection.requestCurrentState(_:)(void *a1, int a2, void *aBlock)
{
  char v4 = _Block_copy(aBlock);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  id v6 = a1;
  SystemCoordinatorClientConnection.requestCurrentState(_:)((uint64_t)_s15GroupActivities22SystemCoordinatorStateCIeyBy_ACIegg_TRTA_0, v5);

  return swift_release();
}

uint64_t SystemCoordinatorClientConnection.setConfiguration(_:)(void *a1)
{
  uint64_t v3 = XPCClient.queue.getter();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = a1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for closure #1 in SystemCoordinatorClientConnection.setConfiguration(_:);
  *(void *)(v5 + 24) = v4;
  v11[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v11[5] = v5;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  long long v11[2] = thunk for @escaping @callee_guaranteed () -> ();
  void v11[3] = &block_descriptor_17_0;
  id v6 = _Block_copy(v11);
  id v7 = v1;
  id v8 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v3, v6);

  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

void @objc SystemCoordinatorClientConnection.setConfiguration(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  SystemCoordinatorClientConnection.setConfiguration(_:)(v4);
}

uint64_t sub_1A38A66E4()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in GroupSession.isClientValidPublisher.getter@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in GroupSession.isClientValidPublisher.getter(a1, a2);
}

uint64_t sub_1A38A66FC()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in SystemCoordinatorClientConnection.requestCurrentState(_:)()
{
  return XPCClient.withSynchronousHost<A>(body:errorHandler:)();
}

uint64_t sub_1A38A67BC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t sub_1A38A67E4()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in SystemCoordinatorClientConnection.setConfiguration(_:)()
{
  return XPCClient.withSynchronousHost<A>(body:errorHandler:)();
}

uint64_t sub_1A38A68A0()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t dispatch thunk of SystemCoordinatorClientProvider.createClient()(uint64_t a1, uint64_t a2)
{
  id v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 8) + **(int **)(a2 + 8));
  id v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *id v5 = v2;
  v5[1] = dispatch thunk of SystemCoordinatorClientProvider.createClient();
  return v7(a1, a2);
}

uint64_t dispatch thunk of SystemCoordinatorClientProvider.isClientValidPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SystemCoordinatorClientProvider.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SystemCoordinatorClientProvider.canBeInitialSpatialDriver.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SystemCoordinatorClient.serverDisconnectedCallback.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SystemCoordinatorClient.serverDisconnectedCallback.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of SystemCoordinatorClient.serverDisconnectedCallback.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of SystemCoordinatorClient.stateCallback.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SystemCoordinatorClient.stateCallback.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of SystemCoordinatorClient.stateCallback.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of SystemCoordinatorClient.destroyConnection()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t sub_1A38A6A68()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t _s15GroupActivities22SystemCoordinatorStateCIeyBy_ACIegg_TRTA_0()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

id partial apply for closure #1 in closure #1 in SystemCoordinatorClientConnection.setConfiguration(_:)(id *a1)
{
  return objc_msgSend(*a1, sel_setConfiguration_, *(void *)(v1 + 16));
}

void partial apply for closure #1 in closure #1 in SystemCoordinatorClientConnection.requestCurrentState(_:)(void **a1)
{
  closure #1 in closure #1 in SystemCoordinatorClientConnection.requestCurrentState(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t *BackgroundGroupSessionManager.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static BackgroundGroupSessionManager.shared;
}

BOOL static BackgroundGroupSessionManagerError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void BackgroundGroupSessionManagerError.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int BackgroundGroupSessionManagerError.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void *one-time initialization function for shared()
{
  id v0 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BackgroundSessionManagerClient()), sel_init);
  type metadata accessor for BackgroundGroupSessionManager();
  Swift::UInt v1 = (void *)swift_allocObject();
  uint64_t result = specialized BackgroundGroupSessionManager.init(client:)(v0, v1);
  static BackgroundGroupSessionManager.shared = (uint64_t)result;
  return result;
}

void *BackgroundGroupSessionManager.__allocating_init(client:)(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)swift_allocObject();
  uint64_t ObjectType = swift_getObjectType();

  return specialized BackgroundGroupSessionManager.init(client:)(a1, v4, ObjectType, a2);
}

uint64_t static BackgroundGroupSessionManager.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t BackgroundGroupSessionManager.client.getter()
{
  return swift_unknownObjectRetain();
}

void key path setter for BackgroundGroupSessionManager.presenceProviderObservers : BackgroundGroupSessionManager(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 128) = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  BackgroundGroupSessionManager.presenceProviderObservers.didset();
}

void BackgroundGroupSessionManager.presenceProviderObservers.didset()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.default);
  swift_retain_n();
  Swift::UInt v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v7 = v4;
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : PresenceGroupSessionProviderObserver]);
    uint64_t v5 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v1, v2, "presenceSessions updated to: %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v4, -1, -1);
    MEMORY[0x1A624F870](v3, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t BackgroundGroupSessionManager.presenceProviderObservers.getter()
{
  return swift_bridgeObjectRetain();
}

void BackgroundGroupSessionManager.presenceProviderObservers.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 128) = a1;
  swift_bridgeObjectRelease();
  BackgroundGroupSessionManager.presenceProviderObservers.didset();
}

uint64_t (*BackgroundGroupSessionManager.presenceProviderObservers.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return BackgroundGroupSessionManager.presenceProviderObservers.modify;
}

uint64_t BackgroundGroupSessionManager.presenceProviderObservers.modify(uint64_t a1, char a2)
{
  return BackgroundGroupSessionManager.presenceProviderObservers.modify(a1, a2, (uint64_t (*)(uint64_t))BackgroundGroupSessionManager.presenceProviderObservers.didset);
}

void key path setter for BackgroundGroupSessionManager.providerObservers : BackgroundGroupSessionManager(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 136) = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  BackgroundGroupSessionManager.providerObservers.didset();
}

void BackgroundGroupSessionManager.providerObservers.didset()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.default);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v7 = v4;
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : GroupSessionProviderObserver]);
    uint64_t v5 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v1, v2, "providerObservers updated to %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v4, -1, -1);
    MEMORY[0x1A624F870](v3, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t BackgroundGroupSessionManager.providerObservers.getter()
{
  return swift_bridgeObjectRetain();
}

void BackgroundGroupSessionManager.providerObservers.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 136) = a1;
  swift_bridgeObjectRelease();
  BackgroundGroupSessionManager.providerObservers.didset();
}

uint64_t (*BackgroundGroupSessionManager.providerObservers.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return BackgroundGroupSessionManager.providerObservers.modify;
}

uint64_t BackgroundGroupSessionManager.providerObservers.modify(uint64_t a1, char a2)
{
  return BackgroundGroupSessionManager.presenceProviderObservers.modify(a1, a2, (uint64_t (*)(uint64_t))BackgroundGroupSessionManager.providerObservers.didset);
}

void key path setter for BackgroundGroupSessionManager.requestedGroupSessionSignpostStates : BackgroundGroupSessionManager(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 144) = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  BackgroundGroupSessionManager.requestedGroupSessionSignpostStates.didset();
}

void BackgroundGroupSessionManager.requestedGroupSessionSignpostStates.didset()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.default);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v7 = v4;
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : OSSignpostIntervalState]);
    uint64_t v5 = String.init<A>(reflecting:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v1, v2, "requestedGroupSessionSignpostStates updated to %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v4, -1, -1);
    MEMORY[0x1A624F870](v3, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t BackgroundGroupSessionManager.requestedGroupSessionSignpostStates.getter()
{
  return swift_bridgeObjectRetain();
}

void BackgroundGroupSessionManager.requestedGroupSessionSignpostStates.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 144) = a1;
  swift_bridgeObjectRelease();
  BackgroundGroupSessionManager.requestedGroupSessionSignpostStates.didset();
}

uint64_t (*BackgroundGroupSessionManager.requestedGroupSessionSignpostStates.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return BackgroundGroupSessionManager.requestedGroupSessionSignpostStates.modify;
}

uint64_t BackgroundGroupSessionManager.requestedGroupSessionSignpostStates.modify(uint64_t a1, char a2)
{
  return BackgroundGroupSessionManager.presenceProviderObservers.modify(a1, a2, (uint64_t (*)(uint64_t))BackgroundGroupSessionManager.requestedGroupSessionSignpostStates.didset);
}

uint64_t BackgroundGroupSessionManager.presenceProviderObservers.modify(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return a3(result);
  }
  return result;
}

void *BackgroundGroupSessionManager.init(client:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();

  return specialized BackgroundGroupSessionManager.init(client:)(a1, v2, ObjectType, a2);
}

uint64_t closure #1 in BackgroundGroupSessionManager.init(client:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[11] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>.Iterator);
  v4[12] = v5;
  v4[13] = *(void *)(v5 - 8);
  v4[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>?);
  v4[15] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>);
  v4[16] = v6;
  v4[17] = *(void *)(v6 - 8);
  v4[18] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in BackgroundGroupSessionManager.init(client:), 0, 0);
}

uint64_t closure #1 in BackgroundGroupSessionManager.init(client:)()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = v0[16];
    uint64_t v3 = v0[17];
    uint64_t v4 = v0[15];
    uint64_t v5 = *(void *)(Strong + 200);
    swift_retain();
    swift_release();
    v0[8] = v5;
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>);
    uint64_t v7 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never> and conformance CurrentValueSubject<A, B>, &demangling cache variable for type metadata for CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>);
    MEMORY[0x1A624DD30](v6, v7);
    swift_release();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v4, 0, 1, v2);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) != 1)
    {
      (*(void (**)(void, void, void))(v0[17] + 32))(v0[18], v0[15], v0[16]);
      AsyncPublisher.makeAsyncIterator()();
      swift_beginAccess();
      uint64_t v8 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>.Iterator);
      id v9 = (void *)swift_task_alloc();
      v0[19] = v9;
      *id v9 = v0;
      v9[1] = closure #1 in BackgroundGroupSessionManager.init(client:);
      uint64_t v10 = v0[12];
      return MEMORY[0x1F4187C78](v0 + 9, v10, v8);
    }
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0[17] + 56))(v0[15], 1, 1, v0[16]);
  }
  outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0[15], &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in BackgroundGroupSessionManager.init(client:);
  }
  else {
    uint64_t v2 = closure #1 in BackgroundGroupSessionManager.init(client:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;

  *(void *)(v0 + 168) = *(void *)(v0 + 72);
  return MEMORY[0x1F4188298](closure #1 in BackgroundGroupSessionManager.init(client:), 0, 0);
}

{
  void *v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;

  if (v0[21])
  {
    uint64_t Strong = swift_weakLoadStrong();
    v0[22] = Strong;
    if (Strong)
    {
      return MEMORY[0x1F4188298](closure #1 in BackgroundGroupSessionManager.init(client:), Strong, 0);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v6 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>.Iterator);
      uint64_t v7 = (void *)swift_task_alloc();
      v0[19] = v7;
      *uint64_t v7 = v0;
      v7[1] = closure #1 in BackgroundGroupSessionManager.init(client:);
      uint64_t v8 = v0[12];
      return MEMORY[0x1F4187C78](v0 + 9, v8, v6);
    }
  }
  else
  {
    uint64_t v3 = v0[17];
    uint64_t v2 = v0[18];
    uint64_t v4 = v0[16];
    (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v0 + 80) = *(void *)(v0 + 160);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

{
  Swift::OpaquePointer *v0;
  uint64_t v1;
  void *v2;
  void *rawValue;
  uint64_t v5;

  BackgroundGroupSessionManager.updateProviders(for:)(v0[21]);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type AsyncPublisher<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>.Iterator);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[19]._rawValue = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in BackgroundGroupSessionManager.init(client:);
  rawValue = v0[12]._rawValue;
  return MEMORY[0x1F4187C78](&v0[9], rawValue, v1);
}

uint64_t BackgroundGroupSessionManager.topicManager.getter()
{
  if (*(void *)(v0 + 152))
  {
    uint64_t v1 = *(void *)(v0 + 152);
  }
  else
  {
    id v2 = objc_allocWithZone(MEMORY[0x1E4F5B140]);
    swift_retain();
    id v3 = objc_msgSend(v2, sel_init);
    type metadata accessor for TopicManager();
    uint64_t v4 = swift_allocObject();
    uint64_t v1 = specialized TopicManager.init(provider:featureFlags:)(v0, v3, v4);
    *(void *)(v0 + 152) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t BackgroundGroupSessionManager.topicManager.setter(uint64_t a1)
{
  *(void *)(v1 + 152) = a1;
  return swift_release();
}

uint64_t (*BackgroundGroupSessionManager.topicManager.modify(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = BackgroundGroupSessionManager.topicManager.getter();
  return BackgroundGroupSessionManager.topicManager.modify;
}

uint64_t BackgroundGroupSessionManager.topicManager.modify(void *a1)
{
  *(void *)(a1[1] + 152) = *a1;
  return swift_release();
}

uint64_t BackgroundGroupSessionManager.audioSessionAssertionManager.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AudioSessionAssertionManager(v1 + 160, a1);
}

uint64_t BackgroundGroupSessionManager._activitySessions.getter()
{
  return swift_retain();
}

uint64_t BackgroundGroupSessionManager.onActivitySessionsChanged.getter()
{
  uint64_t v1 = *(void *)(v0 + 200);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  swift_retain();
  return v2;
}

uint64_t BackgroundGroupSessionManager.activitySessions.getter()
{
  CurrentValueSubject.value.getter();
  return v1;
}

uint64_t BackgroundGroupSessionManager.topicCategory(groupUUID:name:)()
{
  uint64_t v0 = type metadata accessor for PubSubClient.TopicCategory();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  id v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<PubSubClient.TopicCategory>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4F5AF68], v0);
  Just.init(_:)();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Just<PubSubClient.TopicCategory> and conformance Just<A>, &demangling cache variable for type metadata for Just<PubSubClient.TopicCategory>);
  uint64_t v8 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t BackgroundGroupSessionManager.pluginClientReporter.getter()
{
  return 0;
}

uint64_t BackgroundGroupSessionManager.pubSubTopicReporter.getter()
{
  return 0;
}

uint64_t BackgroundGroupSessionManager._groupSessions.getter()
{
  return swift_retain();
}

uint64_t BackgroundGroupSessionManager.groupSessions.getter()
{
  CurrentValueSubject.value.getter();
  return v1;
}

uint64_t BackgroundGroupSessionManager.groupSessionsPublisher.getter()
{
  uint64_t v1 = *(void *)(v0 + 208);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<CurrentValueSubject<[GroupSession<AnyGroupActivity>], Never>>);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  swift_retain();
  return v2;
}

uint64_t BackgroundGroupSessionManager.groupSessionTable.getter()
{
  if (*(void *)(v0 + 216))
  {
    uint64_t v1 = *(void *)(v0 + 216);
  }
  else
  {
    type metadata accessor for GroupSessionTable();
    uint64_t v1 = swift_allocObject();
    type metadata accessor for Lock();
    swift_allocObject();
    *(void *)(v1 + 16) = Lock.init()();
    *(void *)(v1 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    *(void *)(v0 + 216) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t BackgroundGroupSessionManager.groupSessionTable.setter(uint64_t a1)
{
  *(void *)(v1 + 216) = a1;
  return swift_release();
}

uint64_t (*BackgroundGroupSessionManager.groupSessionTable.modify(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = BackgroundGroupSessionManager.groupSessionTable.getter();
  return BackgroundGroupSessionManager.groupSessionTable.modify;
}

uint64_t BackgroundGroupSessionManager.groupSessionTable.modify(void *a1)
{
  *(void *)(a1[1] + 216) = *a1;
  return swift_release();
}

uint64_t BackgroundGroupSessionManager.prepareForActivation(options:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  return MEMORY[0x1F4188298](BackgroundGroupSessionManager.prepareForActivation(options:), v1, 0);
}

uint64_t BackgroundGroupSessionManager.prepareForActivation(options:)()
{
  **(unsigned char **)(v0 + 16) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BackgroundGroupSessionManager.start(presenceSession:)(uint64_t a1)
{
  v2[11] = a1;
  v2[12] = v1;
  type metadata accessor for UUID();
  v2[13] = swift_task_alloc();
  return MEMORY[0x1F4188298](BackgroundGroupSessionManager.start(presenceSession:), v1, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  id v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 136) = a1;
  *(void *)(v4 + 144) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 96);
  if (v1) {
    uint64_t v6 = BackgroundGroupSessionManager.start(presenceSession:);
  }
  else {
    uint64_t v6 = BackgroundGroupSessionManager.start(presenceSession:);
  }
  return MEMORY[0x1F4188298](v6, v5, 0);
}

{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  id v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  id v4[2] = v2;
  v4[3] = a1;
  void v4[4] = v1;
  v4[21] = v1;
  swift_task_dealloc();
  uint64_t v5 = v3[12];
  if (v1) {
    uint64_t v6 = BackgroundGroupSessionManager.start(presenceSession:);
  }
  else {
    uint64_t v6 = BackgroundGroupSessionManager.start(presenceSession:);
  }
  return MEMORY[0x1F4188298](v6, v5, 0);
}

uint64_t BackgroundGroupSessionManager.start(presenceSession:)()
{
  uint64_t v42 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[14] = __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    unint64_t v40 = v0;
    v41[0] = swift_slowAlloc();
    uint64_t v5 = v41[0];
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_retain();
    uint64_t v6 = v0 + 10;
    uint64_t v7 = PresenceSession.description.getter();
    unint64_t v9 = v8;
    swift_release();
    uint64_t *v6 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A375F000, v2, v3, "Start request for presence session: %s", v4, 0xCu);
    swift_arrayDestroy();
    uint64_t v0 = v40;
    MEMORY[0x1A624F870](v5, -1, -1);
    MEMORY[0x1A624F870](v4, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)v0[11] + 304))();
  v0[15] = v10;
  if (v10)
  {
    uint64_t v12 = v11;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v14 = (void *)swift_task_alloc();
    v0[16] = v14;
    uint64_t v15 = *(void *)(v12 + 8);
    *uint64_t v14 = v0;
    v14[1] = BackgroundGroupSessionManager.start(presenceSession:);
    return GroupSessionProvider.backgroundSessionCreationRequest.getter(ObjectType, v15);
  }
  else
  {
    swift_retain_n();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      v41[0] = v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      swift_retain();
      uint64_t v21 = PresenceSession.description.getter();
      unint64_t v23 = v22;
      swift_release();
      v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1A375F000, v17, v18, "Failed to find provider on presenceSession: %s", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v20, -1, -1);
      MEMORY[0x1A624F870](v19, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    lazy protocol witness table accessor for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError();
    char v24 = (void *)swift_allocError();
    *uint64_t v25 = 8;
    swift_willThrow();
    swift_retain();
    id v26 = v24;
    swift_retain();
    id v27 = v24;
    char v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = v0;
      uint64_t v31 = swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      v41[0] = v32;
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_retain();
      uint64_t v33 = PresenceSession.description.getter();
      unint64_t v35 = v34;
      swift_release();
      v30[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v31 + 12) = 2080;
      v30[6] = v24;
      id v36 = v24;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v0 = v30;
      uint64_t v37 = String.init<A>(reflecting:)();
      v30[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1A375F000, v28, v29, "Failed to issue creation of presence session for presenceSession: %s, error: %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v32, -1, -1);
      MEMORY[0x1A624F870](v31, -1, -1);
    }
    else
    {
      swift_release_n();
    }
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v39 = (uint64_t (*)(void))v0[1];
    return v39();
  }
}

{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t ObjectType;
  void *v4;
  uint64_t v6;

  swift_unknownObjectRelease();
  BackgroundSessionCreationRequest.id.getter();
  BackgroundSessionCreationRequest.isCrossAccount.getter();
  uint64_t v1 = objc_allocWithZone((Class)type metadata accessor for PresenceSessionCreationRequest());
  uint64_t v2 = PresenceSessionCreationRequest.init(id:isCrossAccount:)();
  *(void *)(v0 + 152) = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v4;
  uint8_t *v4 = v0;
  v4[1] = BackgroundGroupSessionManager.start(presenceSession:);
  return MEMORY[0x1F4113740](v2, ObjectType);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  uint64_t v16 = v0;
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v13 = (void *)v0[19];
    uint64_t v14 = (void *)v0[17];
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v15 = v4;
    *(_DWORD *)os_log_type_t v3 = 136315138;
    swift_retain();
    uint64_t v5 = PresenceSession.description.getter();
    uint64_t v7 = v6;
    swift_release();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A375F000, v1, v2, "Successfully created remote session for presenceSession: %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v4, -1, -1);
    MEMORY[0x1A624F870](v3, -1, -1);
  }
  else
  {
    unint64_t v8 = (void *)v0[19];
    unint64_t v9 = (void *)v0[17];
    swift_release_n();
  }
  uint64_t v10 = v0[3];
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(uint64_t))v0[1];
  return v11(v10);
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16[2];
  void *v17;
  uint64_t v18;

  uint64_t v17 = v0;
  swift_unknownObjectRelease();
  uint64_t v1 = (void *)v0[18];
  swift_retain();
  uint64_t v2 = v1;
  swift_retain();
  os_log_type_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    v16[0] = v15;
    *(_DWORD *)uint64_t v6 = 136315394;
    swift_retain();
    uint64_t v7 = PresenceSession.description.getter();
    unint64_t v9 = v8;
    swift_release();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v6 + 12) = 2080;
    v0[6] = v1;
    uint64_t v10 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v11 = String.init<A>(reflecting:)();
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v4, v5, "Failed to issue creation of presence session for presenceSession: %s, error: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v15, -1, -1);
    MEMORY[0x1A624F870](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;
  uint64_t v17[2];
  uint64_t v18;
  uint64_t v19;

  os_log_type_t v18 = v0;
  uint64_t v1 = *(void **)(v0 + 136);

  uint64_t v2 = *(void **)(v0 + 168);
  swift_retain();
  os_log_type_t v3 = v2;
  swift_retain();
  uint64_t v4 = v2;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    v17[0] = v16;
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_retain();
    unint64_t v8 = PresenceSession.description.getter();
    uint64_t v10 = v9;
    swift_release();
    *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v7 + 12) = 2080;
    *(void *)(v0 + 48) = v2;
    uint64_t v11 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(reflecting:)();
    *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v5, v6, "Failed to issue creation of presence session for presenceSession: %s, error: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v16, -1, -1);
    MEMORY[0x1A624F870](v7, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t BackgroundGroupSessionManager.start(presenceProvider:)(uint64_t a1, uint64_t a2)
{
  v3[32] = a2;
  v3[33] = v2;
  v3[31] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[34] = v4;
  v3[35] = *(void *)(v4 - 8);
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  v3[38] = swift_task_alloc();
  return MEMORY[0x1F4188298](BackgroundGroupSessionManager.start(presenceProvider:), v2, 0);
}

uint64_t BackgroundGroupSessionManager.start(presenceProvider:)()
{
  uint64_t v67 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 312) = __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_unknownObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 272);
    uint64_t v55 = *(void *)(v0 + 304);
    uint64_t v56 = *(void *)(v0 + 280);
    uint64_t v5 = *(void *)(v0 + 248);
    uint64_t v6 = *(void *)(v0 + 256);
    uint64_t v7 = swift_slowAlloc();
    uint64_t v61 = swift_slowAlloc();
    v66[0] = v61;
    *(_DWORD *)uint64_t v7 = 136315394;
    os_log_type_t typea = v3;
    *(void *)(v0 + 160) = v5;
    *(void *)(v0 + 168) = v6;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PresenceGroupSessionProvider);
    uint64_t v8 = String.init<A>(reflecting:)();
    *(void *)(v0 + 232) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v11 = *(void *)(v6 + 8);
    GroupSessionProvider.uuid.getter(ObjectType, v11, v55);
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v4);
    *(void *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v15 = v11;
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v2, typea, "Start request for presenceProvider: %s, id: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v61, -1, -1);
    MEMORY[0x1A624F870](v7, -1, -1);
  }
  else
  {
    uint64_t v16 = *(void *)(v0 + 256);

    swift_unknownObjectRelease_n();
    uint64_t v15 = *(void *)(v16 + 8);
  }
  *(void *)(v0 + 320) = v15;
  uint64_t v17 = *(void *)(v0 + 296);
  uint64_t v18 = *(void *)(v0 + 264);
  uint64_t v19 = swift_getObjectType();
  *(void *)(v0 + 328) = v19;
  GroupSessionProvider.uuid.getter(v19, v15, v17);
  uint64_t v20 = (uint64_t *)(v18 + 128);
  swift_beginAccess();
  uint64_t v62 = v19;
  uint64_t v63 = v15;
  if (*(void *)(*(void *)(v18 + 128) + 16))
  {
    uint64_t v21 = *(void *)(v0 + 296);
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(v21);
    if (v22)
    {
      uint64_t v23 = *(void *)(v0 + 296);
      uint64_t v24 = *(void *)(v0 + 272);
      uint64_t v25 = *(void *)(v0 + 280);
      swift_retain();
      swift_bridgeObjectRelease();
      id v26 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
      v26(v23, v24);
      swift_release();
      swift_unknownObjectRetain_n();
      swift_retain_n();
      id v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v27, v28))
      {

        swift_unknownObjectRelease_n();
        swift_release_n();
LABEL_20:
        lazy protocol witness table accessor for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError();
        swift_allocError();
        *char v53 = 7;
        swift_willThrow();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        char v54 = *(uint64_t (**)(void))(v0 + 8);
        return v54();
      }
      uint64_t v29 = *(void *)(v0 + 288);
      uint64_t v30 = swift_slowAlloc();
      uint64_t type = swift_slowAlloc();
      v66[0] = type;
      *(_DWORD *)uint64_t v30 = 136315394;
      GroupSessionProvider.uuid.getter(v62, v63, v29);
      uint64_t v31 = *v20;
      if (*(void *)(*v20 + 16))
      {
        uint64_t v32 = *(void *)(v0 + 288);
        swift_bridgeObjectRetain();
        unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
        if (v34)
        {
          uint64_t v64 = *(void *)(v0 + 288);
          uint64_t v35 = *(void *)(v0 + 272);
          uint64_t v36 = *(void *)(*(void *)(v31 + 56) + 8 * v33);
          swift_retain();
          swift_bridgeObjectRelease();
          v26(v64, v35);
          *(void *)(v0 + 224) = v36;
          type metadata accessor for PresenceGroupSessionProviderObserver();
          uint64_t v37 = String.init<A>(reflecting:)();
          unint64_t v39 = v38;
LABEL_19:
          long long v65 = *(_OWORD *)(v0 + 248);
          *(void *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, v66);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_unknownObjectRelease_n();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v30 + 12) = 2080;
          *(_OWORD *)(v0 + 144) = v65;
          swift_unknownObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PresenceGroupSessionProvider);
          uint64_t v51 = String.init<A>(reflecting:)();
          *(void *)(v0 + 216) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v66);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1A375F000, v27, v28, "Tried to start PresenceGroupSessionProvider with the same identifier as one that is already tracked. Existing: %s new: %s", (uint8_t *)v30, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1A624F870](type, -1, -1);
          MEMORY[0x1A624F870](v30, -1, -1);

          goto LABEL_20;
        }
        swift_bridgeObjectRelease();
      }
      v26(*(void *)(v0 + 288), *(void *)(v0 + 272));
      unint64_t v39 = 0xE300000000000000;
      uint64_t v37 = 7104878;
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v40 = *(void *)(v0 + 296);
  uint64_t v57 = *(void *)(v0 + 304);
  uint64_t v41 = *(void *)(v0 + 280);
  uint64_t v60 = *(void *)(v0 + 272);
  uint64_t v42 = *(void *)(v0 + 256);
  uint64_t v43 = *(void *)(v0 + 264);
  uint64_t v44 = *(void *)(v0 + 248);
  uint64_t v45 = *(void (**)(uint64_t))(v41 + 8);
  *(void *)(v0 + 336) = v45;
  *(void *)(v0 + 344) = (v41 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v45(v40);
  type metadata accessor for PresenceGroupSessionProviderObserver();
  uint64_t v46 = (void *)swift_allocObject();
  *(void *)(v0 + 352) = v46;
  v46[3] = 0;
  swift_unknownObjectWeakInit();
  v46[7] = MEMORY[0x1E4FBC870];
  v46[4] = v44;
  v46[5] = v42;
  swift_beginAccess();
  v46[3] = &protocol witness table for BackgroundGroupSessionManager;
  swift_unknownObjectWeakAssign();
  type metadata accessor for PresenceSession(0);
  uint64_t v47 = swift_allocObject();
  swift_unknownObjectRetain_n();
  swift_retain();
  v46[6] = specialized PresenceSession.init(provider:serviceProvider:)(v44, v42, v43, v47);
  GroupSessionProvider.uuid.getter(v62, v63, v57);
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v66[0] = *v20;
  *uint64_t v20 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v46, v57, isUniquelyReferenced_nonNull_native);
  *uint64_t v20 = v66[0];
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t))v45)(v57, v60);
  swift_endAccess();
  BackgroundGroupSessionManager.presenceProviderObservers.didset();
  uint64_t v49 = (void *)swift_task_alloc();
  *(void *)(v0 + 360) = v49;
  *uint64_t v49 = v0;
  v49[1] = BackgroundGroupSessionManager.start(presenceProvider:);
  return PresenceGroupSessionProviderObserver.join()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 368) = v0;
  swift_task_dealloc();
  os_log_type_t v3 = *(void *)(v2 + 264);
  if (v0) {
    uint64_t v4 = BackgroundGroupSessionManager.start(presenceProvider:);
  }
  else {
    uint64_t v4 = BackgroundGroupSessionManager.start(presenceProvider:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t (*v7)(void);
  long long v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v11 = v0;
  swift_unknownObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v9 = *(_OWORD *)(v0 + 248);
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v3 = 136315138;
    uint64_t v10 = v4;
    *(_OWORD *)(v0 + 128) = v9;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PresenceGroupSessionProvider);
    uint64_t v5 = String.init<A>(reflecting:)();
    *(void *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    _os_log_impl(&dword_1A375F000, v1, v2, "Successfully started PresenceSession for provider: %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v4, -1, -1);
    MEMORY[0x1A624F870](v3, -1, -1);

    swift_release();
  }
  else
  {
    swift_release();
    swift_unknownObjectRelease_n();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  long long v20;
  uint64_t v21[2];
  uint64_t v22;
  uint64_t v23;

  char v22 = v0;
  uint64_t v1 = *(void **)(v0 + 368);
  swift_unknownObjectRetain();
  uint64_t v2 = v1;
  swift_unknownObjectRetain();
  os_log_type_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 368);
    uint64_t v20 = *(_OWORD *)(v0 + 248);
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    v21[0] = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    *(_OWORD *)(v0 + 112) = v20;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PresenceGroupSessionProvider);
    unint64_t v9 = String.init<A>(reflecting:)();
    *(void *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2080;
    *(void *)(v0 + 184) = v6;
    uint64_t v11 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(reflecting:)();
    *(void *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v4, v5, "Failed to join PresenceSession for provider: %s, error: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v8, -1, -1);
    MEMORY[0x1A624F870](v7, -1, -1);
  }
  else
  {
    unint64_t v14 = *(void **)(v0 + 368);
    swift_unknownObjectRelease_n();
  }
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
  uint64_t v16 = *(void *)(v0 + 304);
  uint64_t v17 = *(void *)(v0 + 272);
  GroupSessionProvider.uuid.getter(*(void *)(v0 + 328), *(void *)(v0 + 320), v16);
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(v16);
  v15(v16, v17);
  swift_endAccess();
  swift_release();
  BackgroundGroupSessionManager.providerObservers.didset();
  swift_willThrow();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t BackgroundGroupSessionManager.start(provider:)(uint64_t a1, uint64_t a2)
{
  v3[39] = a2;
  v3[40] = v2;
  v3[38] = a1;
  uint64_t v4 = type metadata accessor for OSSignpostID();
  v3[41] = v4;
  v3[42] = *(void *)(v4 - 8);
  v3[43] = swift_task_alloc();
  v3[44] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OSSignposter();
  v3[45] = v5;
  v3[46] = *(void *)(v5 - 8);
  v3[47] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v3[48] = v6;
  v3[49] = *(void *)(v6 - 8);
  v3[50] = swift_task_alloc();
  v3[51] = swift_task_alloc();
  v3[52] = swift_task_alloc();
  v3[53] = swift_task_alloc();
  return MEMORY[0x1F4188298](BackgroundGroupSessionManager.start(provider:), v2, 0);
}

uint64_t BackgroundGroupSessionManager.start(provider:)()
{
  uint64_t v65 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 432) = __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_unknownObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 424);
    uint64_t v5 = *(void *)(v0 + 392);
    uint64_t v57 = *(void *)(v0 + 384);
    os_log_type_t type = v3;
    uint64_t v7 = *(void *)(v0 + 304);
    uint64_t v6 = *(void *)(v0 + 312);
    uint64_t v8 = swift_slowAlloc();
    uint64_t v60 = swift_slowAlloc();
    v64[0] = v60;
    *(_DWORD *)uint64_t v8 = 136315394;
    *(void *)(v0 + 152) = v7;
    *(void *)(v0 + 160) = v6;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionProvider);
    uint64_t v9 = String.init<A>(reflecting:)();
    *(void *)(v0 + 288) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    uint64_t ObjectType = swift_getObjectType();
    GroupSessionProvider.uuid.getter(ObjectType, v6, v4);
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v57);
    *(void *)(v0 + 296) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v2, type, "Start request for provider: %s id: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v60, -1, -1);
    MEMORY[0x1A624F870](v8, -1, -1);
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  uint64_t v15 = *(void *)(v0 + 416);
  uint64_t v17 = *(void *)(v0 + 312);
  uint64_t v16 = *(void *)(v0 + 320);
  uint64_t v18 = *(void *)(v0 + 304);
  type metadata accessor for GroupSessionProviderObserver();
  uint64_t v19 = (void *)swift_allocObject();
  *(void *)(v0 + 440) = v19;
  long long v19[3] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v20 = MEMORY[0x1E4FBC870];
  v19[6] = 0;
  v19[7] = v20;
  v19[4] = v18;
  v19[5] = v17;
  swift_beginAccess();
  long long v19[3] = &protocol witness table for BackgroundGroupSessionManager;
  swift_unknownObjectWeakAssign();
  uint64_t v21 = swift_getObjectType();
  *(void *)(v0 + 448) = v21;
  swift_unknownObjectRetain();
  GroupSessionProvider.uuid.getter(v21, v17, v15);
  char v22 = (uint64_t *)(v16 + 136);
  swift_beginAccess();
  if (*(void *)(*(void *)(v16 + 136) + 16))
  {
    uint64_t v23 = *(void *)(v0 + 416);
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(v23);
    if (v24)
    {
      uint64_t v25 = *(void *)(v0 + 416);
      uint64_t v26 = *(void *)(v0 + 384);
      uint64_t v27 = *(void *)(v0 + 392);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v61 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
      v61(v25, v26);
      swift_release();
      swift_unknownObjectRetain_n();
      swift_retain_n();
      os_log_type_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v28, v29))
      {

        swift_unknownObjectRelease_n();
        swift_release_n();
LABEL_20:
        lazy protocol witness table accessor for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError();
        swift_allocError();
        unsigned char *v55 = 7;
        swift_willThrow();
        swift_release();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v56 = *(uint64_t (**)(void))(v0 + 8);
        return v56();
      }
      uint64_t v30 = *(void *)(v0 + 400);
      uint64_t v31 = *(void *)(v0 + 312);
      uint64_t v32 = swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      v64[0] = v58;
      *(_DWORD *)uint64_t v32 = 136315394;
      GroupSessionProvider.uuid.getter(v21, v31, v30);
      uint64_t v33 = *v22;
      if (*(void *)(*v22 + 16))
      {
        uint64_t v34 = *(void *)(v0 + 400);
        swift_bridgeObjectRetain();
        unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v34);
        if (v36)
        {
          uint64_t v37 = *(void *)(v0 + 400);
          uint64_t v38 = *(void *)(v0 + 384);
          uint64_t v39 = *(void *)(*(void *)(v33 + 56) + 8 * v35);
          swift_retain();
          swift_bridgeObjectRelease();
          v61(v37, v38);
          *(void *)(v0 + 272) = v39;
          uint64_t v40 = String.init<A>(reflecting:)();
          unint64_t v42 = v41;
LABEL_19:
          long long v63 = *(_OWORD *)(v0 + 304);
          *(void *)(v0 + 248) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_unknownObjectRelease_n();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v32 + 12) = 2080;
          *(_OWORD *)(v0 + 136) = v63;
          swift_unknownObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionProvider);
          uint64_t v53 = String.init<A>(reflecting:)();
          *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1A375F000, v28, v29, "Tried to start provider with same identifier as already tracked item. Existing: %s new: %s", (uint8_t *)v32, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1A624F870](v58, -1, -1);
          MEMORY[0x1A624F870](v32, -1, -1);

          goto LABEL_20;
        }
        swift_bridgeObjectRelease();
      }
      v61(*(void *)(v0 + 400), *(void *)(v0 + 384));
      unint64_t v42 = 0xE300000000000000;
      uint64_t v40 = 7104878;
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v43 = *(void *)(v0 + 416);
  uint64_t v44 = *(void *)(v0 + 424);
  uint64_t v45 = *(void *)(v0 + 392);
  uint64_t v46 = *(void *)(v0 + 312);
  uint64_t v62 = *(void *)(v0 + 384);
  uint64_t v47 = (uint64_t)v19;
  uint64_t v48 = *(void (**)(uint64_t))(v45 + 8);
  *(void *)(v0 + 456) = v48;
  *(void *)(v0 + 464) = (v45 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v48(v43);
  GroupSessionProvider.uuid.getter(v21, v46, v44);
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v64[0] = *v22;
  *char v22 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v47, v44, isUniquelyReferenced_nonNull_native);
  *char v22 = v64[0];
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t))v48)(v44, v62);
  swift_endAccess();
  BackgroundGroupSessionManager.providerObservers.didset();
  uint64_t v50 = (void *)swift_task_alloc();
  *(void *)(v0 + 472) = v50;
  *uint64_t v50 = v0;
  v50[1] = BackgroundGroupSessionManager.start(provider:);
  uint64_t v51 = *(void *)(v0 + 312);
  return GroupSessionProvider.backgroundSessionCreationRequest.getter(v21, v51);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  NSObject *v18;
  os_signpost_type_t v19;
  char v20;
  void *v21;
  uint8_t *v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  os_signpost_id_t v29;
  void (*v30)(void);
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  unsigned char *v44;
  uint64_t (*v45)(void);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char isUniquelyReferenced_nonNull_native;
  uint64_t ObjectType;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  os_signpost_type_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  void (*v70)(void);
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73[2];
  void *v74;
  uint64_t v75;

  uint64_t v74 = v0;
  uint64_t v1 = v0[40];
  GroupSessionProvider.uuid.getter(v0[56], v0[39], v0[51]);
  if (*(void *)(*(void *)(v1 + 136) + 16))
  {
    uint64_t v2 = v0[51];
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(v2);
    if (v3)
    {
      uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[57];
      uint64_t v5 = v0[51];
      uint64_t v6 = v0[48];
      swift_retain();
      swift_bridgeObjectRelease();
      v4(v5, v6);
      swift_release();
      if (one-time initialization token for groupSession != -1) {
        swift_once();
      }
      uint64_t v7 = (void *)v0[60];
      uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[57];
      uint64_t v9 = v0[53];
      unint64_t v10 = v0[47];
      uint64_t v11 = v0[48];
      uint64_t v12 = v0[45];
      unint64_t v13 = v0[46];
      unint64_t v14 = __swift_project_value_buffer(v12, (uint64_t)static Signposts.groupSession);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v10, v14, v12);
      uint64_t v15 = (void *)BackgroundSessionCreationRequest.activitySessionRequest.getter();
      uint64_t v16 = objc_msgSend(v15, sel_UUID);

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      UUID.uint64Value.getter();
      v8(v9, v11);
      OSSignpostID.init(_:)();
      uint64_t v17 = v7;
      uint64_t v18 = OSSignposter.logHandle.getter();
      uint64_t v19 = static os_signpost_type_t.begin.getter();
      uint64_t v20 = OS_os_log.signpostsEnabled.getter();
      uint64_t v21 = (void *)v0[60];
      if (v20)
      {
        uint64_t v62 = v0[43];
        uint64_t v72 = v0[42];
        uint64_t v67 = v0[41];
        uint64_t v70 = *(void (**)(void))(v72 + 16);
        v70();
        uint64_t v65 = v19;
        char v22 = (uint8_t *)swift_slowAlloc();
        uint64_t v23 = swift_slowAlloc();
        v73[0] = v23;
        *(_DWORD *)char v22 = 136315138;
        char v24 = (void *)BackgroundSessionCreationRequest.activitySessionRequest.getter();
        uint64_t v25 = objc_msgSend(v24, sel_activityIdentifier);

        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        os_log_type_t v28 = v27;

        v0[30] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        os_log_type_t v29 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_1A375F000, v18, v65, v29, "GroupSessionRequested", "%s enableTelemetry=YES", v22, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1A624F870](v23, -1, -1);
        MEMORY[0x1A624F870](v22, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v62, v67);
        uint64_t v30 = v70;
      }
      else
      {
        uint64_t v47 = v0[42];

        uint64_t v30 = *(void (**)(void))(v47 + 16);
      }
      uint64_t v71 = (void (*)(uint64_t, uint64_t))v0[57];
      uint64_t v64 = v0[56];
      uint64_t v48 = v0[53];
      uint64_t v69 = v0[48];
      uint64_t v49 = v0[46];
      uint64_t v51 = v0[44];
      uint64_t v50 = v0[45];
      unint64_t v52 = v0[42];
      uint64_t v53 = v0[40];
      unint64_t v54 = v0[41];
      uint64_t v60 = v0[39];
      uint64_t v61 = v0[47];
      ((void (*)(void, uint64_t, uint64_t))v30)(v0[43], v51, v54);
      type metadata accessor for OSSignpostIntervalState();
      swift_allocObject();
      uint64_t v55 = OSSignpostIntervalState.init(id:isOpen:)();
      v0[62] = v55;
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v54);
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v61, v50);
      GroupSessionProvider.uuid.getter(v64, v60, v48);
      swift_beginAccess();
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v73[0] = *(void *)(v53 + 144);
      *(void *)(v53 + 144) = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v55, v48, isUniquelyReferenced_nonNull_native);
      *(void *)(v53 + 144) = v73[0];
      swift_bridgeObjectRelease();
      v71(v48, v69);
      swift_endAccess();
      BackgroundGroupSessionManager.requestedGroupSessionSignpostStates.didset();
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v58 = (void *)swift_task_alloc();
      v0[63] = v58;
      *uint64_t v58 = v0;
      v58[1] = BackgroundGroupSessionManager.start(provider:);
      uint64_t v59 = v0[60];
      return MEMORY[0x1F4113750](v59, ObjectType);
    }
    swift_bridgeObjectRelease();
  }
  ((void (*)(void, void))v0[57])(v0[51], v0[48]);
  swift_unknownObjectRetain_n();
  uint64_t v31 = Logger.logObject.getter();
  uint64_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v68 = (void (*)(uint64_t, uint64_t))v0[57];
    long long v63 = v0[56];
    uint64_t v33 = v0[53];
    uint64_t v34 = v0[48];
    unint64_t v35 = v0[38];
    char v36 = v0[39];
    uint64_t v37 = swift_slowAlloc();
    uint64_t v66 = swift_slowAlloc();
    v73[0] = v66;
    *(_DWORD *)uint64_t v37 = 136315394;
    v0[21] = v35;
    v0[22] = v36;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionProvider);
    uint64_t v38 = String.init<A>(reflecting:)();
    v0[35] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    *(_WORD *)(v37 + 12) = 2080;
    GroupSessionProvider.uuid.getter(v63, v36, v33);
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v42 = v41;
    v68(v33, v34);
    v0[32] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    _os_log_impl(&dword_1A375F000, v31, v32, "provider: %s id: %s was cancelled while fetching the creationRequest object.", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v66, -1, -1);
    MEMORY[0x1A624F870](v37, -1, -1);
  }
  else
  {
    swift_unknownObjectRelease_n();
  }

  uint64_t v43 = (void *)v0[60];
  lazy protocol witness table accessor for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError();
  swift_allocError();
  *uint64_t v44 = 9;
  swift_willThrow();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v45 = (uint64_t (*)(void))v0[1];
  return v45();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 512) = v0;
  swift_task_dealloc();
  os_log_type_t v3 = *(void *)(v2 + 320);
  if (v0) {
    uint64_t v4 = BackgroundGroupSessionManager.start(provider:);
  }
  else {
    uint64_t v4 = BackgroundGroupSessionManager.start(provider:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  id v1;
  NSObject *v2;
  os_log_type_t v3;
  void *v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v15 = v0;
  uint64_t v1 = *(id *)(v0 + 480);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void **)(v0 + 480);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    unint64_t v14 = v6;
    *(void *)(v0 + 224) = v4;
    type metadata accessor for BackgroundSessionCreationRequest();
    uint64_t v7 = v4;
    uint64_t v8 = String.init<A>(reflecting:)();
    *(void *)(v0 + 232) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v2, v3, "Successfully started provider for request: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v6, -1, -1);
    MEMORY[0x1A624F870](v5, -1, -1);
  }
  else
  {
    unint64_t v10 = *(void **)(v0 + 480);
  }
  uint64_t v11 = *(void **)(v0 + 480);
  GroupSessionProviderObserver.start()();
  swift_release();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  long long v20;
  void *v21;
  uint64_t v22[2];
  uint64_t v23;
  uint64_t v24;

  uint64_t v23 = v0;
  uint64_t v1 = *(void **)(v0 + 512);
  swift_unknownObjectRetain();
  uint64_t v2 = v1;
  swift_unknownObjectRetain();
  os_log_type_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 512);
    uint64_t v20 = *(_OWORD *)(v0 + 304);
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    v22[0] = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    *(_OWORD *)(v0 + 184) = v20;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionProvider);
    uint64_t v9 = String.init<A>(reflecting:)();
    *(void *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2080;
    *(void *)(v0 + 208) = v6;
    uint64_t v11 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(reflecting:)();
    *(void *)(v0 + 216) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v4, v5, "Failed to issue begin request for provider: %s error: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v8, -1, -1);
    MEMORY[0x1A624F870](v7, -1, -1);
  }
  else
  {
    unint64_t v14 = *(void **)(v0 + 512);
    swift_unknownObjectRelease_n();
  }
  uint64_t v21 = *(void **)(v0 + 480);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0 + 456);
  uint64_t v16 = *(void *)(v0 + 424);
  uint64_t v17 = *(void *)(v0 + 384);
  GroupSessionProvider.uuid.getter(*(void *)(v0 + 448), *(void *)(v0 + 312), v16);
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(v16);
  v15(v16, v17);
  swift_endAccess();
  swift_release();
  BackgroundGroupSessionManager.providerObservers.didset();
  swift_willThrow();
  swift_release();

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t BackgroundGroupSessionManager.start(provider:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 480) = a1;
  *(void *)(v4 + 488) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 320);
  if (v1) {
    uint64_t v6 = BackgroundGroupSessionManager.start(provider:);
  }
  else {
    uint64_t v6 = BackgroundGroupSessionManager.start(provider:);
  }
  return MEMORY[0x1F4188298](v6, v5, 0);
}

uint64_t BackgroundGroupSessionManager.leave(identifier:)(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  return MEMORY[0x1F4188298](BackgroundGroupSessionManager.leave(identifier:), v1, 0);
}

uint64_t BackgroundGroupSessionManager.leave(identifier:)()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v4 = v0[11];
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Log.default);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[12];
  uint64_t v9 = v0[13];
  uint64_t v11 = v0[11];
  if (v8)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v25 = v23;
    *(_DWORD *)uint64_t v12 = 136315138;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl(&dword_1A375F000, v6, v7, "Leave request for providerID: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v23, -1, -1);
    MEMORY[0x1A624F870](v12, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[13], v0[11]);
  }

  uint64_t v16 = v0[9];
  uint64_t v15 = v0[10];
  swift_beginAccess();
  uint64_t v17 = specialized Dictionary._Variant.removeValue(forKey:)(v16);
  v0[14] = v17;
  swift_endAccess();
  BackgroundGroupSessionManager.presenceProviderObservers.didset();
  swift_beginAccess();
  uint64_t v18 = specialized Dictionary._Variant.removeValue(forKey:)(v16);
  v0[15] = v18;
  swift_endAccess();
  BackgroundGroupSessionManager.providerObservers.didset();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_4(&lazy protocol witness table cache variable for type BackgroundGroupSessionManager and conformance BackgroundGroupSessionManager, v19, (void (*)(uint64_t))type metadata accessor for BackgroundGroupSessionManager);
  uint64_t v20 = (void *)swift_task_alloc();
  v0[16] = v20;
  void v20[2] = v17;
  v20[3] = v18;
  void v20[4] = v15;
  void v20[5] = v16;
  uint64_t v21 = (void *)swift_task_alloc();
  v0[17] = v21;
  *uint64_t v21 = v0;
  v21[1] = BackgroundGroupSessionManager.leave(identifier:);
  return MEMORY[0x1F4188080]();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 80);
    uint64_t v4 = BackgroundGroupSessionManager.leave(identifier:);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 80);
    swift_task_dealloc();
    uint64_t v4 = BackgroundGroupSessionManager.leave(identifier:);
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in BackgroundGroupSessionManager.leave(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[5] = a5;
  v6[6] = a6;
  v6[3] = a3;
  v6[4] = a4;
  void v6[2] = a2;
  uint64_t v8 = type metadata accessor for UUID();
  v6[7] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v6[8] = v9;
  v6[9] = *(void *)(v9 + 64);
  v6[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v6[11] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in BackgroundGroupSessionManager.leave(identifier:), a5, 0);
}

uint64_t closure #1 in BackgroundGroupSessionManager.leave(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[3];
  if (v3)
  {
    uint64_t v4 = v2[11];
    uint64_t v5 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
    uint64_t v6 = (void *)swift_allocObject();
    void v6[2] = 0;
    v6[3] = 0;
    v6[4] = v3;
    swift_retain();
    _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(v4, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in BackgroundGroupSessionManager.leave(identifier:), (uint64_t)v6);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v4, &demangling cache variable for type metadata for TaskPriority?);
  }
  uint64_t v7 = v2[4];
  if (v7)
  {
    uint64_t v9 = v2[10];
    uint64_t v8 = v2[11];
    uint64_t v10 = v2[8];
    uint64_t v12 = v2[6];
    uint64_t v11 = v2[7];
    uint64_t v13 = v2[5];
    uint64_t v14 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v8, 1, 1, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v12, v11);
    unint64_t v15 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v16 = (char *)swift_allocObject();
    *((void *)v16 + 2) = 0;
    *((void *)v16 + 3) = 0;
    *((void *)v16 + 4) = v7;
    *((void *)v16 + 5) = v13;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(&v16[v15], v9, v11);
    swift_retain();
    swift_retain();
    _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(v8, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in BackgroundGroupSessionManager.leave(identifier:), (uint64_t)v16);
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v8, &demangling cache variable for type metadata for TaskPriority?);
  }
  uint64_t v17 = v2[5];
  v2[12] = _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_4(&lazy protocol witness table cache variable for type BackgroundGroupSessionManager and conformance BackgroundGroupSessionManager, a2, (void (*)(uint64_t))type metadata accessor for BackgroundGroupSessionManager);
  if (v17)
  {
    swift_getObjectType();
    uint64_t v18 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v20 = v19;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v20 = 0;
  }
  v2[13] = v18;
  v2[14] = v20;
  return MEMORY[0x1F4188298](closure #1 in BackgroundGroupSessionManager.leave(identifier:), v18, v20);
}

uint64_t closure #1 in BackgroundGroupSessionManager.leave(identifier:)()
{
  uint64_t v1 = **(void **)(v0 + 16);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *(void *)(v0 + 120) = v2;
  if (MEMORY[0x1A624E380](v1, MEMORY[0x1E4FBC848] + 8, v2, MEMORY[0x1E4FBC0F0]))
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    *(void *)(v0 + 128) = 0;
    uint64_t v5 = *(void *)(v0 + 96);
    uint64_t v6 = *(void *)(v0 + 40);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v7;
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<(), Error>);
    *uint64_t v7 = v0;
    v7[1] = closure #1 in BackgroundGroupSessionManager.leave(identifier:);
    return MEMORY[0x1F4187E30](v0 + 152, v6, v5, v8);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 104);
    uint64_t v4 = *(void *)(v2 + 112);
    uint64_t v5 = closure #1 in BackgroundGroupSessionManager.leave(identifier:);
  }
  else
  {
    *(unsigned char *)(v2 + 153) = *(unsigned char *)(v2 + 152);
    uint64_t v3 = *(void *)(v2 + 104);
    uint64_t v4 = *(void *)(v2 + 112);
    uint64_t v5 = closure #1 in BackgroundGroupSessionManager.leave(identifier:);
  }
  return MEMORY[0x1F4188298](v5, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(unsigned char *)(v0 + 153))
  {
    uint64_t v1 = *(void *)(v0 + 128);
    if (MEMORY[0x1A624E380](**(void **)(v0 + 16), MEMORY[0x1E4FBC848] + 8, *(void *)(v0 + 120), MEMORY[0x1E4FBC0F0]))
    {
      if (v1) {
        swift_willThrow();
      }
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
      return v2();
    }
    *(void *)(v0 + 128) = v1;
  }
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<(), Error>);
  void *v6 = v0;
  v6[1] = closure #1 in BackgroundGroupSessionManager.leave(identifier:);
  return MEMORY[0x1F4187E30](v0 + 152, v5, v4, v7);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v1 = *(void **)(v0 + 144);
  if (*(void *)(v0 + 128))
  {

    uint64_t v1 = *(void **)(v0 + 128);
  }
  if (MEMORY[0x1A624E380](**(void **)(v0 + 16), MEMORY[0x1E4FBC848] + 8, *(void *)(v0 + 120), MEMORY[0x1E4FBC0F0]))
  {
    if (v1) {
      swift_willThrow();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    *(void *)(v0 + 128) = v1;
    uint64_t v4 = *(void *)(v0 + 96);
    uint64_t v5 = *(void *)(v0 + 40);
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v6;
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<(), Error>);
    void *v6 = v0;
    v6[1] = closure #1 in BackgroundGroupSessionManager.leave(identifier:);
    return MEMORY[0x1F4187E30](v0 + 152, v5, v4, v7);
  }
}

uint64_t closure #1 in closure #1 in BackgroundGroupSessionManager.leave(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 32) = a4;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in BackgroundGroupSessionManager.leave(identifier:), 0, 0);
}

uint64_t closure #1 in closure #1 in BackgroundGroupSessionManager.leave(identifier:)()
{
  uint64_t v14 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[5] = __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[4];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v13 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    v0[2] = v5;
    type metadata accessor for PresenceGroupSessionProviderObserver();
    swift_retain();
    uint64_t v8 = String.init<A>(reflecting:)();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A375F000, v2, v3, "Leaving presence providerObserver %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v7, -1, -1);
    MEMORY[0x1A624F870](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v12 = (uint64_t (*)(void))(*(void *)(*(void *)v0[4] + 176) + **(int **)(*(void *)v0[4] + 176));
  uint64_t v10 = (void *)swift_task_alloc();
  v0[6] = v10;
  *uint64_t v10 = v0;
  v10[1] = closure #1 in closure #1 in BackgroundGroupSessionManager.leave(identifier:);
  return v12();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in closure #1 in BackgroundGroupSessionManager.leave(identifier:), 0, 0);
  }
  else
  {
    os_log_type_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl(&dword_1A375F000, v1, v2, "Failed to leave the PresenceSession.", v3, 2u);
    MEMORY[0x1A624F870](v3, -1, -1);
  }

  BOOL v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v4 = v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8);
  unint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v9);
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of OS_dispatch_queue.SchedulerOptions?((uint64_t)v9, &demangling cache variable for type metadata for TaskPriority?);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
LABEL_6:
  uint64_t v15 = *v4;
  uint64_t v16 = (void *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v16 = v19;
    void v19[2] = v12;
    long long v19[3] = v14;
  }
  v18[1] = 1;
  void v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t closure #2 in closure #1 in BackgroundGroupSessionManager.leave(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = a5;
  v6[9] = a6;
  v6[7] = a4;
  uint64_t v7 = type metadata accessor for UUID();
  v6[10] = v7;
  v6[11] = *(void *)(v7 - 8);
  v6[12] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #2 in closure #1 in BackgroundGroupSessionManager.leave(identifier:), 0, 0);
}

uint64_t closure #2 in closure #1 in BackgroundGroupSessionManager.leave(identifier:)()
{
  uint64_t v13 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[13] = __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[7];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v12 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    v0[5] = v5;
    type metadata accessor for GroupSessionProviderObserver();
    swift_retain();
    uint64_t v8 = String.init<A>(reflecting:)();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1A375F000, v2, v3, "Leaving providerObserver: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v7, -1, -1);
    MEMORY[0x1A624F870](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v10 = v0[8];
  return MEMORY[0x1F4188298](closure #2 in closure #1 in BackgroundGroupSessionManager.leave(identifier:), v10, 0);
}

{
  uint64_t v0;
  uint64_t ObjectType;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #2 in closure #1 in BackgroundGroupSessionManager.leave(identifier:);
  os_log_type_t v3 = *(void *)(v0 + 72);
  return MEMORY[0x1F4113758](v3, ObjectType);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #2 in closure #1 in BackgroundGroupSessionManager.leave(identifier:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    os_log_type_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t (*v17)(void);
  os_log_type_t type;
  uint64_t v20;
  uint64_t v21[2];
  void *v22;
  uint64_t v23;

  uint64_t v22 = v0;
  uint64_t v1 = (void *)v0[15];
  (*(void (**)(void, void, void))(v0[11] + 16))(v0[12], v0[9], v0[10]);
  uint64_t v2 = v1;
  os_log_type_t v3 = v1;
  BOOL v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (void *)v0[15];
    os_log_type_t type = v5;
    uint64_t v8 = v0[11];
    uint64_t v7 = v0[12];
    unint64_t v9 = v0[10];
    uint64_t v10 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    v21[0] = v20;
    *(_DWORD *)uint64_t v10 = 136315394;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    *(_WORD *)(v10 + 12) = 2080;
    v0[3] = v6;
    uint64_t v13 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v14 = String.init<A>(reflecting:)();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v4, type, "Failed to leave identifier: %s error: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v20, -1, -1);
    MEMORY[0x1A624F870](v10, -1, -1);
  }
  else
  {
    uint64_t v16 = (void *)v0[15];
    (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
  }
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t BackgroundGroupSessionManager.updateMembers(identifier:members:)(uint64_t a1, uint64_t a2)
{
  unsigned char v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[18] = v4;
  v3[19] = *(void *)(v4 - 8);
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  return MEMORY[0x1F4188298](BackgroundGroupSessionManager.updateMembers(identifier:members:), v2, 0);
}

uint64_t BackgroundGroupSessionManager.updateMembers(identifier:members:)()
{
  uint64_t v59 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[19];
  uint64_t v5 = type metadata accessor for Logger();
  v0[23] = __swift_project_value_buffer(v5, (uint64_t)static Log.default);
  uint64_t v6 = *(void (**)(void, void, void))(v4 + 16);
  v0[24] = v6;
  v0[25] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v55 = v6;
  v6(v2, v1, v3);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  os_log_t log = v7;
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[22];
  uint64_t v11 = v0[18];
  uint64_t v12 = v0[19];
  uint64_t v13 = v0[16];
  if (v9)
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    v58[0] = v54;
    *(_DWORD *)uint64_t v14 = 136315394;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    os_log_type_t type = v8;
    v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v17 = *(NSObject **)(v12 + 8);
    ((void (*)(uint64_t, uint64_t))v17)(v10, v11);
    uint64_t v18 = v17;
    *(_WORD *)(v14 + 12) = 2080;
    v0[13] = v13;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<AddressableMember>);
    uint64_t v19 = String.init<A>(reflecting:)();
    v0[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A375F000, log, type, "Update member request for identifier: %s with members: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v54, -1, -1);
    MEMORY[0x1A624F870](v14, -1, -1);
  }
  else
  {
    uint64_t v21 = *(NSObject **)(v12 + 8);
    ((void (*)(void, void))v21)(v0[22], v0[18]);
    uint64_t v18 = v21;
    swift_bridgeObjectRelease_n();
  }
  v0[26] = v18;
  uint64_t v22 = v0[17];
  swift_beginAccess();
  if (*(void *)(*(void *)(v22 + 136) + 16)
    && (uint64_t v23 = v0[15],
        swift_bridgeObjectRetain(),
        specialized __RawDictionaryStorage.find<A>(_:)(v23),
        LOBYTE(v23) = v24,
        swift_bridgeObjectRelease(),
        (v23 & 1) != 0))
  {
    specialized Sequence.compactMap<A>(_:)(v0[16]);
    uint64_t v26 = specialized Set.init<A>(_:)(v25);
    v0[27] = v26;
    swift_bridgeObjectRelease();
    if ((v26 & 0xC000000000000001) != 0) {
      uint64_t v27 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v27 = *(void *)(v26 + 16);
    }
    if (v27 == *(void *)(v0[16] + 16))
    {
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v40 = (void *)swift_task_alloc();
      v0[28] = v40;
      *uint64_t v40 = v0;
      v40[1] = BackgroundGroupSessionManager.updateMembers(identifier:members:);
      uint64_t v41 = v0[15];
      return MEMORY[0x1F4113748](v41, v26, ObjectType);
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      v58[0] = v45;
      *(_DWORD *)uint64_t v44 = 136315394;
      lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember();
      swift_bridgeObjectRetain();
      uint64_t v46 = Set.description.getter();
      unint64_t v48 = v47;
      swift_bridgeObjectRelease();
      v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v44 + 12) = 2080;
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
      lazy protocol witness table accessor for type TUHandle and conformance NSObject();
      swift_bridgeObjectRetain();
      uint64_t v49 = Set.description.getter();
      unint64_t v51 = v50;
      swift_bridgeObjectRelease();
      v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v51, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1A375F000, v42, v43, "Failed to convert members types: %s vs convertedMembers: %s", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v45, -1, -1);
      MEMORY[0x1A624F870](v44, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    lazy protocol witness table accessor for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError();
    swift_allocError();
    unsigned char *v52 = 8;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v37 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v55(v0[21], v0[15], v0[18]);
    os_log_type_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.fault.getter();
    BOOL v30 = os_log_type_enabled(v28, v29);
    uint64_t v31 = v0[21];
    uint64_t v32 = v0[18];
    if (v30)
    {
      os_log_t loga = v18;
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      v58[0] = v34;
      *(_DWORD *)uint64_t v33 = 136315138;
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))loga)(v31, v32);
      _os_log_impl(&dword_1A375F000, v28, v29, "updateMembers called for unknown providerID: %s", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v34, -1, -1);
      MEMORY[0x1A624F870](v33, -1, -1);
    }
    else
    {
      ((void (*)(void, void))v18)(v0[21], v0[18]);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v37 = (uint64_t (*)(void))v0[1];
  }
  return v37();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 232) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 136);
    swift_bridgeObjectRelease();
    uint64_t v4 = BackgroundGroupSessionManager.updateMembers(identifier:members:);
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 136);
    uint64_t v4 = BackgroundGroupSessionManager.updateMembers(identifier:members:);
  }
  return MEMORY[0x1F4188298](v4, v5, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t (*v19)(void);
  void (*v21)(uint64_t, uint64_t);
  os_log_type_t type;
  uint64_t v23;
  uint64_t v24[2];
  uint64_t v25;
  uint64_t v26;

  unint64_t v25 = v0;
  uint64_t v1 = *(void **)(v0 + 232);
  (*(void (**)(void, void, void))(v0 + 192))(*(void *)(v0 + 160), *(void *)(v0 + 120), *(void *)(v0 + 144));
  swift_bridgeObjectRetain();
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 232);
    os_log_type_t type = v5;
    uint64_t v7 = *(void *)(v0 + 160);
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
    os_log_type_t v8 = *(void *)(v0 + 144);
    BOOL v9 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    v24[0] = v23;
    *(_DWORD *)BOOL v9 = 136315650;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v21(v7, v8);
    *(_WORD *)(v9 + 12) = 2080;
    lazy protocol witness table accessor for type AddressableMember and conformance AddressableMember();
    swift_bridgeObjectRetain();
    uint64_t v12 = Set.description.getter();
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 22) = 2080;
    *(void *)(v0 + 80) = v6;
    uint64_t v15 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    unint64_t v16 = String.init<A>(reflecting:)();
    *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v4, type, "Failed to update members on identifier: %s with members: %s error: %s", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v23, -1, -1);
    MEMORY[0x1A624F870](v9, -1, -1);
  }
  else
  {
    uint64_t v18 = *(void **)(v0 + 232);
    (*(void (**)(void, void))(v0 + 208))(*(void *)(v0 + 160), *(void *)(v0 + 144));
    swift_bridgeObjectRelease_n();
  }
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t BackgroundGroupSessionManager.begin(activity:request:)()
{
  return MEMORY[0x1F4188298](BackgroundGroupSessionManager.begin(activity:request:), v0, 0);
}

{
  uint64_t v0;
  unsigned char *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  lazy protocol witness table accessor for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError();
  swift_allocError();
  *uint64_t v1 = 5;
  swift_willThrow();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2(0);
}

uint64_t BackgroundGroupSessionManager.end(activity:)()
{
  return MEMORY[0x1F4188298](BackgroundGroupSessionManager.end(activity:), v0, 0);
}

{
  uint64_t v0;
  unsigned char *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  lazy protocol witness table accessor for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError();
  swift_allocError();
  *uint64_t v1 = 5;
  swift_willThrow();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t BackgroundGroupSessionManager.updateShare(_:activityID:)()
{
  return specialized BackgroundGroupSessionManager.updateShare(_:activityID:)();
}

void BackgroundGroupSessionManager.updateShare(_:activityID:completion:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Log.default);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_1A375F000, v5, v6, "Updating CKShare", v7, 2u);
    MEMORY[0x1A624F870](v7, -1, -1);
  }

  lazy protocol witness table accessor for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError();
  os_log_type_t v8 = (void *)swift_allocError();
  *BOOL v9 = 5;
  a3();
}

Swift::Void __swiftcall BackgroundGroupSessionManager.updateProviders(for:)(Swift::OpaquePointer a1)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    v15[0] = v14;
    *(_DWORD *)uint64_t v5 = 136315394;
    swift_beginAccess();
    type metadata accessor for UUID();
    type metadata accessor for GroupSessionProviderObserver();
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    swift_bridgeObjectRetain();
    uint64_t v6 = Dictionary.description.getter();
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for TUConversationActivitySessionContainer);
    swift_bridgeObjectRetain();
    uint64_t v9 = Dictionary.description.getter();
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1A375F000, v3, v4, "Updating providers %s for containers: %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v14, -1, -1);
    MEMORY[0x1A624F870](v5, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = specialized _NativeDictionary.filter(_:)(v12, (uint64_t)a1._rawValue);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized Sequence.forEach(_:)(v13, (void (*)(char *, uint64_t))partial apply for closure #2 in BackgroundGroupSessionManager.updateProviders(for:));
  swift_release();
}

uint64_t closure #2 in BackgroundGroupSessionManager.updateProviders(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Log.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v23 = a1;
    uint64_t v14 = (uint8_t *)v13;
    uint64_t v15 = swift_slowAlloc();
    v27[0] = v15;
    uint64_t v24 = a3;
    uint64_t v25 = a2;
    *(_DWORD *)uint64_t v14 = 136315138;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v27);
    a2 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _os_log_impl(&dword_1A375F000, v11, v12, "Removing providerObserver %s due to it not being present in containers", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v15, -1, -1);
    uint64_t v18 = v14;
    a1 = v23;
    MEMORY[0x1A624F870](v18, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(a1);
  swift_endAccess();
  swift_release();
  BackgroundGroupSessionManager.providerObservers.didset();
  uint64_t v19 = *(void *)(a2 + 40);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v19 + 64))(ObjectType, v19);
  v27[0] = 0;
  CurrentValueSubject.send(_:)();
  return swift_release();
}

uint64_t BackgroundGroupSessionManager.deinit()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 160);
  swift_release();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t BackgroundGroupSessionManager.__deallocating_deinit()
{
  BackgroundGroupSessionManager.deinit();

  return MEMORY[0x1F4188210](v0);
}

uint64_t BackgroundGroupSessionManager.unownedExecutor.getter()
{
  return v0;
}

uint64_t protocol witness for ActivitySessionContainerProvider.onActivitySessionsChanged.getter in conformance BackgroundGroupSessionManager()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 200);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<CurrentValueSubject<[UUID : TUConversationActivitySessionContainer], Never>>);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  swift_retain();
  return v2;
}

uint64_t protocol witness for ActivitySessionContainerProvider.activitySessions.getter in conformance BackgroundGroupSessionManager()
{
  CurrentValueSubject.value.getter();
  return v1;
}

uint64_t protocol witness for ActivitySessionContainerProvider.pluginClientReporter.getter in conformance BackgroundGroupSessionManager()
{
  return 0;
}

uint64_t protocol witness for ActivitySessionContainerProvider.topicCategory(groupUUID:name:) in conformance BackgroundGroupSessionManager()
{
  uint64_t v0 = type metadata accessor for PubSubClient.TopicCategory();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Just<PubSubClient.TopicCategory>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4F5AF68], v0);
  Just.init(_:)();
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type Just<PubSubClient.TopicCategory> and conformance Just<A>, &demangling cache variable for type metadata for Just<PubSubClient.TopicCategory>);
  uint64_t v8 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t protocol witness for GroupSessionServiceProvider.start(provider:) in conformance BackgroundGroupSessionManager(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return BackgroundGroupSessionManager.start(provider:)(a1, a2);
}

uint64_t protocol witness for GroupSessionServiceProvider.start(presenceProvider:) in conformance BackgroundGroupSessionManager(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return BackgroundGroupSessionManager.start(presenceProvider:)(a1, a2);
}

uint64_t protocol witness for GroupSessionServiceProvider.leave(identifier:) in conformance BackgroundGroupSessionManager(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return BackgroundGroupSessionManager.leave(identifier:)(a1);
}

uint64_t protocol witness for GroupSessionServiceProvider.updateMembers(identifier:members:) in conformance BackgroundGroupSessionManager(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for AnyTransportSession.removeAttachment(id:) in conformance GroupSession<A>;
  return BackgroundGroupSessionManager.updateMembers(identifier:members:)(a1, a2);
}

uint64_t protocol witness for GroupSessionServiceProvider.start(presenceSession:) in conformance BackgroundGroupSessionManager(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = protocol witness for CollaborationGroupActivity.share.getter in conformance CollaborationActivity;
  return BackgroundGroupSessionManager.start(presenceSession:)(a1);
}

uint64_t protocol witness for InternalGroupSessionProvider.groupSessions.getter in conformance BackgroundGroupSessionManager()
{
  CurrentValueSubject.value.getter();
  return v1;
}

uint64_t protocol witness for InternalGroupSessionProvider.groupSessionsPublisher.getter in conformance BackgroundGroupSessionManager()
{
  uint64_t v1 = *(void *)(v0 + 208);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<CurrentValueSubject<[GroupSession<AnyGroupActivity>], Never>>);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  swift_retain();
  return v2;
}

uint64_t protocol witness for InternalGroupSessionProvider.audioSessionAssertionManager.getter in conformance BackgroundGroupSessionManager@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AudioSessionAssertionManager(v1 + 160, a1);
}

uint64_t protocol witness for InternalGroupSessionProvider.prepareForActivation(options:) in conformance BackgroundGroupSessionManager(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  return MEMORY[0x1F4188298](protocol witness for InternalGroupSessionProvider.prepareForActivation(options:) in conformance BackgroundGroupSessionManager, v1, 0);
}

uint64_t protocol witness for InternalGroupSessionProvider.begin(activity:request:) in conformance BackgroundGroupSessionManager()
{
  return MEMORY[0x1F4188298](protocol witness for InternalGroupSessionProvider.begin(activity:request:) in conformance BackgroundGroupSessionManager, v0, 0);
}

uint64_t protocol witness for InternalGroupSessionProvider.end(activity:) in conformance BackgroundGroupSessionManager()
{
  return MEMORY[0x1F4188298](protocol witness for InternalGroupSessionProvider.end(activity:) in conformance BackgroundGroupSessionManager, v0, 0);
}

uint64_t BackgroundGroupSessionManager.didDisconnect(client:)()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized BackgroundGroupSessionManager.didDisconnect(client:)
                             + async function pointer to specialized BackgroundGroupSessionManager.didDisconnect(client:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v3();
}

void invalidateProvider #1 (id:) in BackgroundGroupSessionManager.didDisconnect(client:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Log.default);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v28 = a2;
    os_log_type_t v12 = (uint8_t *)v11;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v27 = a1;
    uint64_t v14 = v13;
    v30[0] = v13;
    *(_DWORD *)os_log_type_t v12 = 136315138;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl(&dword_1A375F000, v9, v10, "Invalidating provider for ID: %s", v12, 0xCu);
    swift_arrayDestroy();
    uint64_t v17 = v14;
    a1 = v27;
    MEMORY[0x1A624F870](v17, -1, -1);
    uint64_t v18 = v12;
    a2 = v28;
    MEMORY[0x1A624F870](v18, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  swift_beginAccess();
  uint64_t v19 = *(void *)(a2 + 136);
  if (*(void *)(v19 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v21)
    {
      uint64_t v22 = *(void *)(*(void *)(v19 + 56) + 8 * v20);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v23 = *(void *)(v22 + 40);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v23 + 64))(ObjectType, v23);
      lazy protocol witness table accessor for type BackgroundGroupSessionManagerError and conformance BackgroundGroupSessionManagerError();
      uint64_t v25 = (void *)swift_allocError();
      *uint64_t v26 = 6;
      uint64_t v29 = (uint64_t)v25;
      CurrentValueSubject.send(_:)();
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(a1);
  swift_endAccess();
  swift_release();
  BackgroundGroupSessionManager.providerObservers.didset();
}

Swift::Void __swiftcall BackgroundGroupSessionManager.handleContainers(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2 = v1;
  uint64_t v63 = type metadata accessor for OSSignpostError();
  unint64_t v4 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  uint64_t v62 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for OSSignpostID();
  uint64_t v6 = *(char **)(v68 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v68);
  uint64_t v60 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  os_log_type_t v10 = (char *)&v55 - v9;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v66 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v75 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78[0] = MEMORY[0x1E4FBC860];
  if ((unint64_t)a1._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v13 = *(void *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v76 = v1;
  uint64_t v61 = v11;
  uint64_t v74 = v6;
  if (v13)
  {
    if (v13 < 1)
    {
      __break(1u);
LABEL_50:
      __break(1u);
      return;
    }
    unint64_t v73 = v4;
    for (uint64_t i = 0; i != v13; ++i)
    {
      if (((unint64_t)a1._rawValue & 0xC000000000000001) != 0) {
        id v15 = (id)MEMORY[0x1A624E900](i, a1._rawValue);
      }
      else {
        id v15 = *((id *)a1._rawValue + i + 4);
      }
      unint64_t v16 = v15;
      if (objc_msgSend(v15, sel_state) == (id)3 && objc_msgSend(v16, sel_localParticipantIdentifier))
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        uint64_t v2 = v76;
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v17 = v78[0];
    uint64_t v11 = v61;
    unint64_t v4 = v73;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v17 = MEMORY[0x1E4FBC860];
  }
  swift_retain();
  unint64_t v18 = specialized _ArrayProtocol.filter(_:)(v17);
  swift_release();
  swift_release();
  if (v18 >> 62)
  {
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    if (v20)
    {
LABEL_18:
      if (v20 >= 1)
      {
        uint64_t v21 = 0;
        uint64_t v22 = (uint64_t *)(v2 + 144);
        unint64_t v71 = v18 & 0xC000000000000001;
        uint64_t v67 = v74 + 8;
        uint64_t v59 = (uint64_t (**)(char *, uint64_t))(v4 + 88);
        int v58 = *MEMORY[0x1E4FBD340];
        uint64_t v56 = (void (**)(char *, uint64_t))(v4 + 8);
        uint64_t v57 = (void (**)(char *, char *, uint64_t))(v74 + 16);
        uint64_t v70 = (void (**)(unint64_t, uint64_t))(v66 + 8);
        uint64_t v69 = (v66 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        *(void *)&long long v19 = 136315138;
        long long v65 = v19;
        uint64_t v64 = MEMORY[0x1E4FBC840] + 8;
        uint64_t v72 = v20;
        unint64_t v73 = v18;
        while (1)
        {
          if (v71) {
            uint64_t v23 = (char *)MEMORY[0x1A624E900](v21, v18);
          }
          else {
            uint64_t v23 = (char *)*(id *)(v18 + 8 * v21 + 32);
          }
          uint64_t v74 = v23;
          id v24 = objc_msgSend(v23, sel_groupUUID);
          uint64_t v25 = (uint64_t)v75;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          swift_beginAccess();
          swift_bridgeObjectRetain();
          unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v25);
          char v28 = v27;
          swift_bridgeObjectRelease();
          if (v28)
          {
            int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v30 = *v22;
            uint64_t v77 = *v22;
            *uint64_t v22 = 0x8000000000000000;
            if (!isUniquelyReferenced_nonNull_native)
            {
              specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UUID, OSSignpostIntervalState>);
              uint64_t v30 = v77;
            }
            uint64_t v31 = *(void (**)(unint64_t, uint64_t))(v66 + 8);
            v31(*(void *)(v30 + 48) + *(void *)(v66 + 72) * v26, v11);
            uint64_t v32 = v77;
            uint64_t v33 = *(void *)(*(void *)(v77 + 56) + 8 * v26);
            specialized _NativeDictionary._delete(at:)(v26, v77);
            *uint64_t v22 = v32;
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v33 = 0;
            uint64_t v31 = *v70;
          }
          v31((unint64_t)v75, v11);
          swift_endAccess();
          if (one-time initialization token for default != -1) {
            swift_once();
          }
          uint64_t v34 = type metadata accessor for Logger();
          __swift_project_value_buffer(v34, (uint64_t)static Log.default);
          swift_retain_n();
          uint64_t v35 = Logger.logObject.getter();
          os_log_type_t v36 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v35, v36))
          {
            uint64_t v37 = swift_slowAlloc();
            uint64_t v38 = swift_slowAlloc();
            v78[0] = v38;
            *(_DWORD *)uint64_t v37 = v65;
            uint64_t v77 = *(void *)(v76 + 144);
            swift_bridgeObjectRetain();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : OSSignpostIntervalState]);
            uint64_t v39 = String.init<A>(reflecting:)();
            *(void *)(v37 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, (uint64_t *)v78);
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1A375F000, v35, v36, "requestedGroupSessionSignpostStates updated to %s", (uint8_t *)v37, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1A624F870](v38, -1, -1);
            MEMORY[0x1A624F870](v37, -1, -1);

            if (v33) {
              goto LABEL_36;
            }
          }
          else
          {

            swift_release_n();
            if (v33)
            {
LABEL_36:
              if (one-time initialization token for groupSession != -1) {
                swift_once();
              }
              uint64_t v41 = type metadata accessor for OSSignposter();
              __swift_project_value_buffer(v41, (uint64_t)static Signposts.groupSession);
              unint64_t v42 = OSSignposter.logHandle.getter();
              OSSignpostIntervalState.signpostID.getter();
              os_signpost_type_t v43 = static os_signpost_type_t.end.getter();
              if (OS_os_log.signpostsEnabled.getter())
              {
                swift_retain();
                uint64_t v44 = v62;
                checkForErrorAndConsumeState(state:)();
                swift_release();
                int v45 = (*v59)(v44, v63);
                uint64_t v46 = "[Error] Interval already ended";
                if (v45 != v58)
                {
                  (*v56)(v62, v63);
                  uint64_t v46 = "";
                }
                unint64_t v47 = v60;
                unint64_t v48 = v10;
                uint64_t v49 = v10;
                uint64_t v50 = v68;
                (*v57)(v60, v48, v68);
                unint64_t v51 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)unint64_t v51 = 0;
                os_signpost_id_t v52 = OSSignpostID.rawValue.getter();
                _os_signpost_emit_with_name_impl(&dword_1A375F000, v42, v43, v52, "GroupSessionRequested", v46, v51, 2u);
                MEMORY[0x1A624F870](v51, -1, -1);

                uint64_t v53 = *(void (**)(char *, uint64_t))v67;
                (*(void (**)(char *, uint64_t))v67)(v49, v50);
                swift_release();
                uint64_t v54 = v50;
                os_log_type_t v10 = v49;
                v53(v47, v54);
                uint64_t v11 = v61;
              }
              else
              {

                (*(void (**)(char *, uint64_t))v67)(v10, v68);
                swift_release();
              }
              goto LABEL_21;
            }
          }

LABEL_21:
          ++v21;
          unint64_t v18 = v73;
          if (v72 == v21) {
            goto LABEL_48;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else
  {
    uint64_t v20 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v20) {
      goto LABEL_18;
    }
  }

LABEL_48:
  swift_bridgeObjectRelease();
}

uint64_t BackgroundGroupSessionManager.didDisconnect(client:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = (void *)swift_allocObject();
  long long v9[2] = 0;
  _OWORD v9[3] = 0;
  void v9[4] = v2;
  v9[5] = a1;
  v9[6] = a2;
  swift_retain();
  swift_unknownObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundGroupSessionManager.didDisconnect(client:), (uint64_t)v9);
  return swift_release();
}

uint64_t closure #1 in BackgroundGroupSessionManager.didDisconnect(client:)()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized BackgroundGroupSessionManager.didDisconnect(client:)
                             + async function pointer to specialized BackgroundGroupSessionManager.didDisconnect(client:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for AnyTransportSession.downloadAttachment(_:) in conformance GroupSession<A>;
  return v3();
}

uint64_t BackgroundGroupSessionManager.didUpdateContainers(client:containers:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return specialized BackgroundGroupSessionManager.didUpdateContainers(client:containers:)(a3);
}

uint64_t closure #4 in BackgroundGroupSessionManager.didUpdateContainers(client:containers:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return MEMORY[0x1F4188298](closure #4 in BackgroundGroupSessionManager.didUpdateContainers(client:containers:), a4, 0);
}

uint64_t closure #4 in BackgroundGroupSessionManager.didUpdateContainers(client:containers:)()
{
  BackgroundGroupSessionManager.handleContainers(_:)(v0[3]);
  rawValue = (uint64_t (*)(void))v0[1]._rawValue;
  return rawValue();
}

uint64_t BackgroundGroupSessionManager.sessionDidRejectKeyRecoveryRequest(sessionID:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v33 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v28 - v11;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Log.default);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v34 = a1;
  uint64_t v32 = v14;
  v14(v12, a1, v7);
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v31 = v1;
    unint64_t v18 = (uint8_t *)v17;
    uint64_t v29 = swift_slowAlloc();
    uint64_t v36 = v29;
    uint64_t v30 = v6;
    *(_DWORD *)unint64_t v18 = 136315138;
    v28[1] = v18 + 4;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v36);
    uint64_t v6 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    _os_log_impl(&dword_1A375F000, v15, v16, "BackgroundGroupSessionManager received indication that session %s rejected a keyRecoveryRequest", v18, 0xCu);
    uint64_t v21 = v29;
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v21, -1, -1);
    uint64_t v22 = v18;
    uint64_t v2 = v31;
    MEMORY[0x1A624F870](v22, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  }

  uint64_t v23 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v6, 1, 1, v23);
  id v24 = v33;
  v32(v33, v34, v7);
  unint64_t v25 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v26 = (char *)swift_allocObject();
  *((void *)v26 + 2) = 0;
  *((void *)v26 + 3) = 0;
  *((void *)v26 + 4) = v2;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v26[v25], v24, v7);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundGroupSessionManager.sessionDidRejectKeyRecoveryRequest(sessionID:), (uint64_t)v26);
  return swift_release();
}

uint64_t closure #1 in BackgroundGroupSessionManager.sessionDidRejectKeyRecoveryRequest(sessionID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[20] = a4;
  v5[21] = a5;
  uint64_t v6 = type metadata accessor for UUID();
  v5[22] = v6;
  v5[23] = *(void *)(v6 - 8);
  v5[24] = swift_task_alloc();
  v5[25] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in BackgroundGroupSessionManager.sessionDidRejectKeyRecoveryRequest(sessionID:), 0, 0);
}

uint64_t closure #1 in BackgroundGroupSessionManager.sessionDidRejectKeyRecoveryRequest(sessionID:)()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[23];
  uint64_t v5 = v0[20];
  uint64_t v4 = v0[21];
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[26] = v6;
  v0[27] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v4, v2);
  return MEMORY[0x1F4188298](closure #1 in BackgroundGroupSessionManager.sessionDidRejectKeyRecoveryRequest(sessionID:), v5, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 160);
  swift_beginAccess();
  *(void *)(v0 + 224) = *(void *)(v1 + 136);
  swift_bridgeObjectRetain();
  return MEMORY[0x1F4188298](closure #1 in BackgroundGroupSessionManager.sessionDidRejectKeyRecoveryRequest(sessionID:), 0, 0);
}

{
  uint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t (*v29)(void);
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  uint64_t v32 = v0;
  if (*(void *)(*(void *)(v0 + 224) + 16)
    && (uint64_t v1 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v0 + 200)), (v2 & 1) != 0))
  {
    uint64_t v3 = *(void *)(v0 + 200);
    uint64_t v4 = *(void *)(v0 + 176);
    uint64_t v5 = *(void *)(v0 + 184);
    uint64_t v6 = *(void *)(*(void *)(*(void *)(v0 + 224) + 56) + 8 * v1);
    *(void *)(v0 + 232) = v6;
    swift_retain();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    *(_OWORD *)(v0 + 120) = *(_OWORD *)(v6 + 32);
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionProvider);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ErrorRecoveryGroupSessionProvider);
    if (swift_dynamicCast())
    {
      outlined init with take of TypedPayloadDecoding((long long *)(v0 + 16), v0 + 56);
      uint64_t v7 = *(void *)(v0 + 80);
      uint64_t v8 = *(void *)(v0 + 88);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v7);
      uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v8 + 8) + **(int **)(v8 + 8));
      uint64_t v9 = (void *)swift_task_alloc();
      *(void *)(v0 + 240) = v9;
      *uint64_t v9 = v0;
      v9[1] = closure #1 in BackgroundGroupSessionManager.sessionDidRejectKeyRecoveryRequest(sessionID:);
      return v30(v7, v8);
    }
    *(void *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    swift_release();
    outlined destroy of OS_dispatch_queue.SchedulerOptions?(v0 + 16, &demangling cache variable for type metadata for ErrorRecoveryGroupSessionProvider?);
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 200);
    uint64_t v12 = *(void *)(v0 + 176);
    uint64_t v13 = *(void *)(v0 + 184);
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v14(v11, v12);
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    id v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 208);
    os_log_type_t v16 = *(void *)(v0 + 192);
    unint64_t v18 = *(void *)(v0 + 168);
    uint64_t v17 = *(void *)(v0 + 176);
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Log.default);
    v15(v16, v18, v17);
    unint64_t v20 = Logger.logObject.getter();
    uint64_t v21 = static os_log_type_t.error.getter();
    uint64_t v22 = os_log_type_enabled(v20, v21);
    uint64_t v23 = *(void *)(v0 + 192);
    id v24 = *(void *)(v0 + 176);
    if (v22)
    {
      unint64_t v25 = (uint8_t *)swift_slowAlloc();
      unint64_t v26 = swift_slowAlloc();
      uint64_t v31 = v26;
      *(_DWORD *)unint64_t v25 = 136315138;
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
      char v27 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v14(v23, v24);
      _os_log_impl(&dword_1A375F000, v20, v21, "Couldn't find observer for %s", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v26, -1, -1);
      MEMORY[0x1A624F870](v25, -1, -1);
    }
    else
    {
      v14(*(void *)(v0 + 192), *(void *)(v0 + 176));
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
  return v29();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in BackgroundGroupSessionManager.sessionDidRejectKeyRecoveryRequest(sessionID:);
  }
  else {
    uint64_t v2 = closure #1 in BackgroundGroupSessionManager.sessionDidRejectKeyRecoveryRequest(sessionID:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1A375F000, v2, v3, "Fetched updated membership list", v4, 2u);
    MEMORY[0x1A624F870](v4, -1, -1);

    swift_release();
  }
  else
  {
    swift_release();
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;
  void *v17;
  uint64_t v18;

  uint64_t v17 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[31];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Log.default);
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[31];
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    os_log_type_t v16 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    v0[18] = v8;
    uint64_t v11 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(reflecting:)();
    v0[19] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1A375F000, v5, v6, "Failed to fetch membership update: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v10, -1, -1);
    MEMORY[0x1A624F870](v9, -1, -1);

    swift_release();
  }
  else
  {
    swift_release();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 7));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t BackgroundGroupSessionManager.sessionDidReceiveUpdatedUnknownParticipantList(sessionID:unknownParticipants:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = &v34[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v41 = v12;
  unint64_t v42 = &v34[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = &v34[-v13];
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Log.default);
  unint64_t v40 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16);
  v40(v14, a1, v9);
  swift_bridgeObjectRetain_n();
  os_log_type_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  int v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v38 = v8;
    uint64_t v20 = v19;
    uint64_t v36 = swift_slowAlloc();
    uint64_t v44 = v36;
    *(_DWORD *)uint64_t v20 = 136315394;
    uint64_t v39 = v3;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    int v35 = v18;
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v37 = a1;
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v14, v9);
    *(_WORD *)(v20 + 12) = 2080;
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type TUHandle and conformance NSObject();
    swift_bridgeObjectRetain();
    uint64_t v23 = Set.description.getter();
    unint64_t v25 = v24;
    swift_bridgeObjectRelease();
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v44);
    a1 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v3 = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A375F000, v16, (os_log_type_t)v35, "BackgroundGroupSessionManager received indication that session %s received an updated unknown participant list %s", (uint8_t *)v20, 0x16u);
    uint64_t v26 = v36;
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v26, -1, -1);
    uint64_t v27 = v20;
    uint64_t v8 = v38;
    MEMORY[0x1A624F870](v27, -1, -1);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v14, v9);
    swift_bridgeObjectRelease_n();
  }

  uint64_t v28 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v8, 1, 1, v28);
  uint64_t v29 = v42;
  v40(v42, a1, v9);
  unint64_t v30 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v31 = (v41 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v32 = (char *)swift_allocObject();
  *((void *)v32 + 2) = 0;
  *((void *)v32 + 3) = 0;
  *((void *)v32 + 4) = v3;
  (*(void (**)(char *, unsigned char *, uint64_t))(v10 + 32))(&v32[v30], v29, v9);
  *(void *)&v32[v31] = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in BackgroundGroupSessionManager.sessionDidReceiveUpdatedUnknownParticipantList(sessionID:unknownParticipants:), (uint64_t)v32);
  return swift_release();
}

uint64_t closure #1 in BackgroundGroupSessionManager.sessionDidReceiveUpdatedUnknownParticipantList(sessionID:unknownParticipants:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[13] = a5;
  v6[14] = a6;
  v6[12] = a4;
  uint64_t v7 = type metadata accessor for UUID();
  v6[15] = v7;
  v6[16] = *(void *)(v7 - 8);
  v6[17] = swift_task_alloc();
  v6[18] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in BackgroundGroupSessionManager.sessionDidReceiveUpdatedUnknownParticipantList(sessionID:unknownParticipants:), 0, 0);
}

uint64_t closure #1 in BackgroundGroupSessionManager.sessionDidReceiveUpdatedUnknownParticipantList(sessionID:unknownParticipants:)()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[16];
  uint64_t v5 = v0[12];
  uint64_t v4 = v0[13];
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[19] = v6;
  v0[20] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v4, v2);
  return MEMORY[0x1F4188298](closure #1 in BackgroundGroupSessionManager.sessionDidReceiveUpdatedUnknownParticipantList(sessionID:unknownParticipants:), v5, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 96);
  swift_beginAccess();
  *(void *)(v0 + 168) = *(void *)(v1 + 136);
  swift_bridgeObjectRetain();
  return MEMORY[0x1F4188298](closure #1 in BackgroundGroupSessionManager.sessionDidReceiveUpdatedUnknownParticipantList(sessionID:unknownParticipants:), 0, 0);
}

{
  void *v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t (*v27)(void);
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void (*v51)(void *, void);
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t (*v56)(uint64_t);
  void *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  void *v63;
  uint64_t v64;

  uint64_t v63 = v0;
  if (*(void *)(v0[21] + 16) && (uint64_t v1 = specialized __RawDictionaryStorage.find<A>(_:)(v0[18]), (v2 & 1) != 0))
  {
    uint64_t v3 = v0[18];
    uint64_t v4 = v0[15];
    uint64_t v5 = v0[16];
    uint64_t v6 = v0[14];
    uint64_t v7 = *(void *)(*(void *)(v0[21] + 56) + 8 * v1);
    v0[22] = v7;
    uint64_t v54 = v7;
    swift_retain();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    int v58 = v6 & 0xC000000000000001;
    if ((v6 & 0xC000000000000001) != 0) {
      uint64_t v8 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v8 = *(void *)(v0[14] + 16);
    }
    uint64_t v29 = MEMORY[0x1E4FBC860];
    if (!v8)
    {
LABEL_33:
      os_signpost_id_t v52 = specialized Set.init<A>(_:)(v29);
      v0[23] = v52;
      swift_bridgeObjectRelease();
      uint64_t v56 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v54 + 200) + **(int **)(*(void *)v54 + 200));
      uint64_t v53 = (void *)swift_task_alloc();
      v0[24] = v53;
      *uint64_t v53 = v0;
      v53[1] = closure #1 in BackgroundGroupSessionManager.sessionDidReceiveUpdatedUnknownParticipantList(sessionID:unknownParticipants:);
      return v56(v52);
    }
    uint64_t v59 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
    if (v58)
    {
      uint64_t result = __CocoaSet.startIndex.getter();
      unint64_t v31 = 1;
    }
    else
    {
      uint64_t result = specialized _NativeSet.startIndex.getter(v0[14]);
      unint64_t v31 = v32 & 1;
    }
    uint64_t v60 = result;
    uint64_t v61 = v30;
    uint64_t v62 = v31;
    if ((v8 & 0x8000000000000000) == 0)
    {
      uint64_t v55 = v0 + 2;
      uint64_t v57 = v0;
      do
      {
        while (1)
        {
          uint64_t v38 = v60;
          uint64_t v39 = v61;
          unint64_t v40 = v62;
          specialized Set.subscript.getter(v60, v61, v62, v0[14], (unint64_t *)&lazy cache variable for type metadata for TUHandle);
          unint64_t v42 = v41;
          uint64_t v43 = objc_msgSend(v41, sel_normalizedValue);
          if (!v43) {
            uint64_t v43 = objc_msgSend(v42, sel_value);
          }
          uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v46 = v45;

          unint64_t v47 = v59;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v59 + 16) + 1, 1);
            unint64_t v47 = v59;
          }
          uint64_t v49 = *(void *)(v47 + 16);
          unint64_t v48 = *(void *)(v47 + 24);
          if (v49 >= v48 >> 1)
          {
            uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
            unint64_t v47 = v59;
          }
          *(void *)(v47 + 16) = v49 + 1;
          uint64_t v50 = v47 + 16 * v49;
          *(void *)(v50 + 32) = v44;
          *(void *)(v50 + 40) = v46;
          if (v58) {
            break;
          }
          uint64_t v0 = v57;
          uint64_t v33 = specialized _NativeSet.index(after:)(v38, v39, v40, v57[14]);
          int v35 = v34;
          uint64_t v37 = v36;
          outlined consume of Set<Participant>.Index._Variant(v38, v39, v40);
          uint64_t v60 = v33;
          uint64_t v61 = v35;
          uint64_t v62 = v37 & 1;
          if (!--v8) {
            goto LABEL_32;
          }
        }
        uint64_t v0 = v57;
        if ((v40 & 1) == 0) {
          goto LABEL_37;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<TUHandle>.Index);
        unint64_t v51 = (void (*)(void *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v51(v55, 0);
        --v8;
      }
      while (v8);
LABEL_32:
      outlined consume of Set<Participant>.Index._Variant(v60, v61, v62);
      uint64_t v29 = v59;
      goto LABEL_33;
    }
    __break(1u);
LABEL_37:
    __break(1u);
  }
  else
  {
    uint64_t v9 = v0[18];
    uint64_t v10 = v0[15];
    uint64_t v11 = v0[16];
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v12(v9, v10);
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v13 = (void (*)(uint64_t, uint64_t, uint64_t))v0[19];
    uint64_t v14 = v0[17];
    uint64_t v15 = v0[15];
    os_log_type_t v16 = v0[13];
    os_log_type_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Log.default);
    v13(v14, v16, v15);
    int v18 = Logger.logObject.getter();
    uint64_t v19 = static os_log_type_t.error.getter();
    uint64_t v20 = os_log_type_enabled(v18, v19);
    uint64_t v21 = v0[17];
    unint64_t v22 = v0[15];
    if (v20)
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      unint64_t v24 = swift_slowAlloc();
      uint64_t v60 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
      unint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v12(v21, v22);
      _os_log_impl(&dword_1A375F000, v18, v19, "Couldn't find observer for %s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1A624F870](v24, -1, -1);
      MEMORY[0x1A624F870](v23, -1, -1);
    }
    else
    {
      v12(v0[17], v0[15]);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v27 = (uint64_t (*)(void))v0[1];
    return v27();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in BackgroundGroupSessionManager.sessionDidReceiveUpdatedUnknownParticipantList(sessionID:unknownParticipants:);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = closure #1 in BackgroundGroupSessionManager.sessionDidReceiveUpdatedUnknownParticipantList(sessionID:unknownParticipants:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v12 = v0;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v11 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type TUHandle and conformance NSObject();
    swift_bridgeObjectRetain();
    uint64_t v6 = Set.description.getter();
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A375F000, v2, v3, "Handled unknown participant list: %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v5, -1, -1);
    MEMORY[0x1A624F870](v4, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  void *v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t (*v11)(void);
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  uint64_t v15 = v0;
  swift_bridgeObjectRelease();
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Log.default);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  uint64_t v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = (void *)v0[25];
  if (v4)
  {
    uint64_t v13 = (id)v0[25];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v14 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for TUHandle);
    lazy protocol witness table accessor for type TUHandle and conformance NSObject();
    swift_bridgeObjectRetain();
    uint64_t v8 = Set.description.getter();
    uint64_t v10 = v9;
    swift_bridgeObjectRelease();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1A375F000, v2, v3, "Failed to handle unknown participant list: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1A624F870](v7, -1, -1);
    MEMORY[0x1A624F870](v6, -1, -1);
    swift_release();
  }
  else
  {
    swift_release();

    swift_bridgeObjectRelease_n();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t protocol witness for BackGroundSessionManagerClientDelegate.didDisconnect(client:) in conformance BackgroundGroupSessionManager(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = (void *)swift_allocObject();
  long long v9[2] = 0;
  _OWORD v9[3] = 0;
  void v9[4] = v2;
  v9[5] = a1;
  v9[6] = a2;
  swift_retain();
  swift_unknownObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&closure #1 in BackgroundGroupSessionManager.didDisconnect(client:)partial apply, (uint64_t)v9);
  return swift_release();
}

uint64_t protocol witness for BackGroundSessionManagerClientDelegate.didUpdateContainers(client:containers:) in conformance BackgroundGroupSessionManager(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return specialized BackgroundGroupSessionManager.didUpdateContainers(client:containers:)(a3);
}

unint64_t specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v39 = (result + 1) & v12;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v40 = v13;
      uint64_t v37 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      uint64_t v38 = v14;
      uint64_t v36 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v15;
        int64_t v18 = v15 * v11;
        v38(v8, *(void *)(a2 + 48) + v15 * v11, v4);
        _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v37)(v8, v4);
        unint64_t v20 = v19 & v12;
        if (a1 >= (uint64_t)v39)
        {
          if (v20 >= v39 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            if (v17 * a1 < v18
              || *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            uint64_t v24 = *(void *)(*(void *)(type metadata accessor for LinkManager.Attachment(0) - 8) + 72);
            int64_t v25 = v24 * a1;
            unint64_t result = v23 + v24 * a1;
            int64_t v26 = v24 * v11;
            unint64_t v27 = v23 + v24 * v11 + v24;
            BOOL v28 = v25 < v26 || result >= v27;
            uint64_t v9 = v16;
            if (v28)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v11;
              uint64_t v12 = v36;
            }
            else
            {
              a1 = v11;
              uint64_t v12 = v36;
              if (v25 != v26)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v11;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v39 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
        uint64_t v15 = v17;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    uint64_t v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  *uint64_t v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  uint64_t (**v16)(char *, uint64_t);
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  long long v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  void (*v35)(char *, unint64_t, uint64_t);
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  uint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    unint64_t v11 = ~v9;
    uint64_t v38 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v38;
    if ((*(void *)(v38 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      uint64_t v36 = (result + 1) & v11;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v35 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v37 = v13;
      uint64_t v16 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      do
      {
        uint64_t v17 = v15 * v10;
        v35(v8, *(void *)(a2 + 48) + v15 * v10, v4);
        int64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v16)(v8, v4);
        uint64_t v19 = v18 & v11;
        if (a1 >= (uint64_t)v36)
        {
          if (v19 >= v36 && a1 >= (uint64_t)v19)
          {
LABEL_17:
            unint64_t v22 = *(void *)(a2 + 48);
            unint64_t result = v22 + v15 * a1;
            uint64_t v23 = v22 + v17 + v15;
            if (v15 * a1 < v17 || result >= v23)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v17)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            int64_t v25 = *(void *)(a2 + 56);
            int64_t v26 = (_OWORD *)(v25 + 32 * a1);
            unint64_t v27 = (_OWORD *)(v25 + 32 * v10);
            uint64_t v12 = v38;
            if (a1 != v10 || (a1 = v10, v26 >= v27 + 2))
            {
              BOOL v28 = v27[1];
              *int64_t v26 = *v27;
              v26[1] = v28;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v36 || a1 >= (uint64_t)v19)
        {
          goto LABEL_17;
        }
        uint64_t v12 = v38;
LABEL_5:
        uint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v29 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v29 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  *uint64_t v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;

  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  uint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    unint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      uint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      BOOL v33 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        uint64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        int64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v22 = *(void *)(a2 + 56);
            uint64_t v23 = (_OWORD *)(v22 + 16 * a1);
            uint64_t v24 = (_OWORD *)(v22 + 16 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *uint64_t v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        uint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    int64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    int64_t v26 = *v25;
    unint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    int64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    unint64_t v27 = *v25;
    int64_t v26 = (-1 << a1) - 1;
  }
  *int64_t v25 = v27 & v26;
  BOOL v28 = *(void *)(a2 + 16);
  uint64_t v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t (**v32)(char *, uint64_t);
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;

  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      uint64_t v34 = (result + 1) & v12;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v35 = v13;
      uint64_t v32 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      BOOL v33 = v14;
      uint64_t v16 = v15;
      do
      {
        uint64_t v17 = v9;
        int64_t v18 = v16;
        uint64_t v19 = v16 * v11;
        v33(v8, *(void *)(a2 + 48) + v16 * v11, v4);
        _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
        unint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v32)(v8, v4);
        uint64_t v21 = v20 & v12;
        if (a1 >= (uint64_t)v34)
        {
          if (v21 >= v34 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v16 = v18;
            if (v18 * a1 < v19
              || *(void *)(a2 + 48) + v18 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v19 + v18))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v18 * a1 != v19)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v24 = *(void *)(a2 + 56);
            unint64_t result = v24 + 24 * a1;
            uint64_t v9 = v17;
            if (a1 < (uint64_t)v11 || result >= v24 + 24 * v11 + 24)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v11;
            }
            else
            {
              int64_t v25 = a1 == v11;
              a1 = v11;
              if (!v25)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v11;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v34 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v17;
        uint64_t v16 = v18;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    int64_t v26 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    unint64_t v27 = *v26;
    BOOL v28 = (-1 << a1) - 1;
  }
  else
  {
    int64_t v26 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    BOOL v28 = *v26;
    unint64_t v27 = (-1 << a1) - 1;
  }
  *int64_t v26 = v28 & v27;
  uint64_t v29 = *(void *)(a2 + 16);
  uint64_t v30 = __OFSUB__(v29, 1);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;

  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  uint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    unint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      uint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      BOOL v33 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        uint64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        int64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v22 = *(void *)(a2 + 56);
            uint64_t v23 = (void *)(v22 + 8 * a1);
            uint64_t v24 = (void *)(v22 + 8 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *uint64_t v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        uint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    int64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    int64_t v26 = *v25;
    unint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    int64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    unint64_t v27 = *v25;
    int64_t v26 = (-1 << a1) - 1;
  }
  *int64_t v25 = v27 & v26;
  BOOL v28 = *(void *)(a2 + 16);
  uint64_t v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(a2 + 48);
        unint64_t v11 = (void *)(v10 + 8 * v6);
        unint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            uint64_t v15 = (void *)(v10 + 8 * v3);
            if (v3 != v6 || v15 >= v11 + 1) {
              *uint64_t v15 = *v11;
            }
            uint64_t v16 = *(void *)(a2 + 56);
            unint64_t v17 = v16 + 24 * v3;
            int64_t v18 = (long long *)(v16 + 24 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v17 >= (unint64_t)v18 + 24))
            {
              long long v9 = *v18;
              *(void *)(v17 + 16) = *((void *)v18 + 2);
              *(_OWORD *)unint64_t v17 = v9;
              int64_t v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  long long v10;
  unint64_t v11;
  uint64_t v12;
  unsigned char *v13;
  unsigned char *v14;
  uint64_t v15;
  long long *v16;
  long long *v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        unint64_t result = Hasher._finalize()();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          unint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (unsigned char *)(v12 + v3);
          uint64_t v14 = (unsigned char *)(v12 + v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *uint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (long long *)(v15 + 48 * v3);
          unint64_t v17 = (long long *)(v15 + 48 * v6);
          if (48 * v3 < (uint64_t)(48 * v6) || v16 >= v17 + 3 || (int64_t v18 = v3 == v6, v3 = v6, !v18))
          {
            long long v9 = *v17;
            uint64_t v10 = v17[2];
            v16[1] = v17[1];
            v16[2] = v10;
            *uint64_t v16 = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(void *)(a2 + 48);
        uint64_t v10 = (void *)(v9 + 8 * v6);
        unint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8 || v3 < (uint64_t)v11) {
            goto LABEL_6;
          }
        }
        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }
        uint64_t v14 = (void *)(v9 + 8 * v3);
        if (v3 != v6 || v14 >= v10 + 1) {
          *uint64_t v14 = *v10;
        }
        uint64_t v15 = *(void *)(a2 + 56);
        uint64_t v16 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation)
                                    - 8)
                        + 72);
        unint64_t v17 = v16 * v3;
        unint64_t result = v15 + v16 * v3;
        int64_t v18 = v16 * v6;
        uint64_t v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v17 == v18) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    BOOL v23 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    BOOL v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  *uint64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  int64_t v25 = __OFSUB__(v24, 1);
  int64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        long long v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        uint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          unint64_t v11 = *(void *)(a2 + 48);
          unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *unint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (16 * v3 != 16 * v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    int64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    int64_t v18 = (-1 << result) - 1;
  }
  *unint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  long long v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  long long *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        unint64_t v11 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          uint64_t v14 = (_OWORD *)(v13 + 16 * v3);
          uint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *uint64_t v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          unint64_t v17 = v16 + 40 * v3;
          int64_t v18 = (long long *)(v16 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            long long v9 = *v18;
            uint64_t v10 = v18[1];
            *(void *)(v17 + 32) = *((void *)v18 + 4);
            *(_OWORD *)unint64_t v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

id specialized _NativeDictionary.copy()()
{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, SystemCoordinatorConfiguration>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UUID, SystemCoordinatorHost>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSDictionary>);
  uint64_t v2 = *v0;
  int64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (id)(v3 + 64);
  unint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  long long v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v11 = -1;
  if (v10 < 64) {
    unint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      long long v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      BOOL v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    int64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    unint64_t result = v20;
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  BOOL v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    long long v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    long long v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UUID, BackgroundSessionCreationRequest>);
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = type metadata accessor for LinkManager.Attachment(0);
  uint64_t v29 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1 - 8);
  int64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, LinkManager.Attachment>);
  uint64_t v24 = v0;
  uint64_t v8 = *v0;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    uint64_t *v24 = v10;
    return result;
  }
  unint64_t result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    unint64_t result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  int64_t v13 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v8 + 64);
  uint64_t v25 = v8 + 64;
  int64_t v26 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v27 = v5 + 32;
  uint64_t v28 = v5 + 16;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v13);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v5 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v19, v4);
    unint64_t v20 = *(void *)(v29 + 72) * v18;
    outlined init with copy of LinkManager.Attachment(*(void *)(v8 + 56) + v20, (uint64_t)v3);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v10 + 48) + v19, v7, v4);
    unint64_t result = (void *)outlined init with take of LinkManager.Attachment((uint64_t)v3, *(void *)(v10 + 56) + v20);
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v26) {
    goto LABEL_23;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  _OWORD v26[2];

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CodingUserInfoKey();
  int64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  unint64_t v22 = v1;
  unint64_t result = (void *)(v7 + 64);
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    unint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  int64_t v23 = v6 + 64;
  unint64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v13 = -1;
  if (v12 < 64) {
    int64_t v13 = ~(-1 << v12);
  }
  uint64_t v14 = v13 & *(void *)(v6 + 64);
  uint64_t v24 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v25 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      uint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    unint64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v24) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v23 + 8 * v19);
    ++v11;
    if (!v20)
    {
      unint64_t v11 = v19 + 1;
      if (v19 + 1 >= v24) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v23 + 8 * v11);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    uint64_t v14 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    unint64_t v18 = 32 * v16;
    outlined init with copy of Any(*(void *)(v6 + 56) + v18, (uint64_t)v26);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
    unint64_t result = outlined init with take of Any(v26, (_OWORD *)(*(void *)(v8 + 56) + v18));
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v24)
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_25;
  }
  unint64_t v20 = *(void *)(v23 + 8 * v21);
  if (v20)
  {
    unint64_t v11 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    unint64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v23 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  long long v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, GroupSessionMessenger.MessageStreamStore.Storage>);
  uint64_t v2 = *v0;
  int64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v11 = -1;
  if (v10 < 64) {
    unint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      uint64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    uint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t v18 = 24 * v15;
    unint64_t v19 = *(void *)(v2 + 56) + v18;
    unint64_t v20 = *(void *)v19;
    int64_t v21 = *(_OWORD *)(v19 + 8);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t v22 = *(void *)(v4 + 56) + v18;
    *(void *)unint64_t v22 = v20;
    *(_OWORD *)(v22 + 8) = v21;
    swift_retain();
    unint64_t result = (void *)swift_retain();
  }
  uint64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    uint64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, TypedPayloadDecoding>, (void (*)(unsigned char *, uint64_t))outlined init with take of TypedPayloadDecoding);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UUID, OSSignpostIntervalState>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UUID, GroupSessionProviderObserver>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UUID, PresenceGroupSessionProviderObserver>);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  uint64_t v38 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  uint64_t v37 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, SystemCoordinatorTable.Storage>);
  uint64_t v32 = v0;
  int64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v40 = v4;
  if (!v5)
  {
    unint64_t result = (void *)swift_release();
    uint64_t v30 = v40;
    uint64_t v29 = v32;
LABEL_25:
    *uint64_t v29 = v30;
    return result;
  }
  uint64_t v6 = v4;
  unint64_t result = (void *)(v4 + 64);
  uint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    unint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
    uint64_t v6 = v40;
  }
  uint64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v3 + 32);
  unint64_t v39 = v3;
  unint64_t v11 = -1;
  if (v10 < 64) {
    unint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v3 + 64);
  BOOL v33 = v3 + 64;
  uint64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v35 = v1 + 32;
  uint64_t v36 = v1 + 16;
  uint64_t v14 = v37;
  int64_t v13 = v38;
  uint64_t v15 = v40;
  while (1)
  {
    if (v12)
    {
      unint64_t v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v17 = v16 | (v9 << 6);
      unint64_t v18 = v39;
      goto LABEL_9;
    }
    int64_t v26 = v9 + 1;
    unint64_t v18 = v39;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v34) {
      goto LABEL_23;
    }
    uint64_t v27 = *(void *)(v33 + 8 * v26);
    ++v9;
    if (!v27)
    {
      uint64_t v9 = v26 + 1;
      if (v26 + 1 >= v34) {
        goto LABEL_23;
      }
      uint64_t v27 = *(void *)(v33 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v17 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v14, *(void *)(v18 + 48) + v19, v13);
    unint64_t v20 = *(void *)(v18 + 56);
    int64_t v21 = 16 * v17;
    unint64_t v22 = (uint64_t *)(v20 + 16 * v17);
    int64_t v23 = *v22;
    uint64_t v24 = v22[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v15 + 48) + v19, v14, v13);
    uint64_t v25 = (void *)(*(void *)(v15 + 56) + v21);
    *uint64_t v25 = v23;
    v25[1] = v24;
    swift_retain();
    unint64_t result = (void *)swift_retain();
  }
  uint64_t v28 = v26 + 2;
  if (v28 >= v34)
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    uint64_t v29 = v32;
    uint64_t v30 = v40;
    goto LABEL_25;
  }
  uint64_t v27 = *(void *)(v33 + 8 * v28);
  if (v27)
  {
    uint64_t v9 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v34) {
      goto LABEL_23;
    }
    uint64_t v27 = *(void *)(v33 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  unsigned char v27[24];

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  int64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, GroupSessionTable.Storage>);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  int64_t v23 = v1;
  unint64_t result = (void *)(v7 + 64);
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    unint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v24 = v6 + 64;
  unint64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v13 = -1;
  if (v12 < 64) {
    int64_t v13 = ~(-1 << v12);
  }
  uint64_t v14 = v13 & *(void *)(v6 + 64);
  uint64_t v25 = (unint64_t)(v12 + 63) >> 6;
  int64_t v26 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      uint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    unint64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      unint64_t v11 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v11);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    uint64_t v14 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    unint64_t v18 = 24 * v16;
    outlined init with copy of GroupSessionTable.Storage(*(void *)(v6 + 56) + v18, (uint64_t)v27);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
    unint64_t result = (void *)outlined init with take of GroupSessionTable.Storage((uint64_t)v27, *(void *)(v8 + 56) + v18);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25)
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    uint64_t v1 = v23;
    goto LABEL_25;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    unint64_t v11 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    unint64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Int>);
  int64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    *int64_t v23 = v7;
    return result;
  }
  unint64_t result = (void *)(v6 + 64);
  uint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    unint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  unint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  uint64_t v25 = (unint64_t)(v11 + 63) >> 6;
  int64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      uint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    unint64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      uint64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v20 - 1) & v20;
    uint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    unint64_t v17 = 8 * v15;
    unint64_t v18 = *(void *)(*(void *)(v5 + 56) + v17);
    unint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    uint64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UUID, TopicManager.ConversationClient>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unsigned char v20[48];

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<TopicManager.ServiceName, TopicManager.ConversationClient.Service>);
  uint64_t v2 = *v0;
  int64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v11 = -1;
  if (v10 < 64) {
    unint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      uint64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    uint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    outlined init with copy of TopicManager.ConversationClient.Service(*(void *)(v2 + 56) + 48 * v15, (uint64_t)v20);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = v16;
    unint64_t result = (void *)outlined init with take of TopicManager.ConversationClient.Service((uint64_t)v20, *(void *)(v4 + 56) + 48 * v15);
  }
  unint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Int>.Continuation);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, AsyncStream<Int>.Continuation>);
  int64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    *int64_t v23 = v7;
    return result;
  }
  unint64_t result = (void *)(v6 + 64);
  uint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    unint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  unint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  uint64_t v25 = (unint64_t)(v11 + 63) >> 6;
  int64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      uint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    unint64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      uint64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v20 - 1) & v20;
    uint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v5 + 48) + 8 * v15);
    unint64_t v18 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 56) + v18, v1);
    *(void *)(*(void *)(v7 + 48) + v16) = v17;
    unint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 56) + v18, v4, v1);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    uint64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AnyCancellable>);
  uint64_t v2 = *v0;
  int64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v11 = -1;
  if (v10 < 64) {
    unint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      uint64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v18 = v17[1];
    unint64_t v19 = 8 * v15;
    unint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_retain();
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Conversation>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SpatialTemplatePreference>);
  uint64_t v2 = *v0;
  int64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v11 = -1;
  if (v10 < 64) {
    unint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    int64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      uint64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    uint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    unint64_t v19 = *v17;
    unint64_t v18 = v17[1];
    unint64_t v20 = *(void *)(v2 + 56) + v16;
    int64_t v21 = *(void *)v20;
    unint64_t v22 = *(unsigned char *)(v20 + 8);
    LOBYTE(v20) = *(unsigned char *)(v20 + 9);
    int64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v23 = v19;
    v23[1] = v18;
    uint64_t v24 = *(void *)(v4 + 56) + v16;
    *(void *)uint64_t v24 = v21;
    *(unsigned char *)(v24 + 8) = v22;
    *(unsigned char *)(v24 + 9) = v20;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  int64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    uint64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, SpatialTemplateRole>, (void (*)(unsigned char *, uint64_t))outlined init with take of TypedPayloadDecoding);
}