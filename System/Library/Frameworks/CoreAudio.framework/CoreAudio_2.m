void sub_1BAB95F20(_Unwind_Exception *exception_object)
{
  void *v1;
  std::__shared_weak_count *v3;

  *v1 = &unk_1F145F4E8;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0,std::allocator<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0,std::allocator<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7ControlC1ERKNS_6DeviceEjjjjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0,std::allocator<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  uint64_t result = AMCP::is_base_of((AMCP *)0x6163746C, *(_DWORD *)(a1 + 16));
  if (result)
  {
    if (*(_DWORD *)(*(void *)(a1 + 8) + 8) == AMCP::Core::Core::get_simple_required_property<1870098034u>(*a2))
    {
      unsigned int simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
      uint64_t result = AMCP::is_base_of((AMCP *)*(unsigned int *)(a1 + 16), simple_required);
      if (result)
      {
        int v6 = AMCP::Core::Core::get_simple_required_property<1668047219u>(*a2);
        int v7 = AMCP::Core::Core::get_simple_required_property<1668506480u>(*a2);
        int v8 = AMCP::Core::Core::get_simple_required_property<1667591277u>(*a2);
        uint64_t result = 0;
        if (v6 == *(_DWORD *)(a1 + 20) && v7 == *(_DWORD *)(a1 + 24)) {
          return v8 == *(_DWORD *)(a1 + 28);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t AMCP::Core::Core::get_simple_required_property<1668506480u>(AMCP::Core::Core *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  strcpy(buf, "pcscbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  unint64_t result = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v2 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = pthread_self();
      mach_port_t v4 = pthread_mach_thread_np(v3);
      char v6 = 4;
      strcpy((char *)__p, "cscp");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v4;
      *(_WORD *)&buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      __int16 v8 = 1024;
      int v9 = 391;
      __int16 v10 = 2080;
      v11 = "optional_value.operator BOOL() == true";
      __int16 v12 = 2080;
      v13 = __p;
      __int16 v14 = 1024;
      int v15 = 1735159650;
      __int16 v16 = 1024;
      int v17 = 0;
      _os_log_error_impl(&dword_1BAA78000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  return result;
}

void sub_1BAB961D4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

unint64_t AMCP::Core::Core::get_simple_required_property<1667591277u>(AMCP::Core::Core *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  strcpy(buf, "mlecbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  unint64_t result = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v2 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = pthread_self();
      mach_port_t v4 = pthread_mach_thread_np(v3);
      char v6 = 4;
      strcpy((char *)__p, "celm");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v4;
      *(_WORD *)&buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      __int16 v8 = 1024;
      int v9 = 391;
      __int16 v10 = 2080;
      v11 = "optional_value.operator BOOL() == true";
      __int16 v12 = 2080;
      v13 = __p;
      __int16 v14 = 1024;
      int v15 = 1735159650;
      __int16 v16 = 1024;
      int v17 = 0;
      _os_log_error_impl(&dword_1BAA78000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  return result;
}

void sub_1BAB96350(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

__n128 std::__function::__func<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0,std::allocator<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1461A00;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0,std::allocator<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1)
{
  v2 = (char *)operator new(0x20uLL);
  *(void *)v2 = &unk_1F1461A00;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0,std::allocator<AMCP::Control::Control(AMCP::Device const&,unsigned int,unsigned int,unsigned int,unsigned int)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
}

unint64_t AMCP::Control::get_scope(AMCP::Control *this)
{
  v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  mach_port_t v4 = v3;
  v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5) {
    unint64_t simple_required = AMCP::Core::Core::get_simple_required_property<1668506480u>(v5);
  }
  else {
    unint64_t simple_required = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return simple_required;
}

unint64_t AMCP::Control::get_element(AMCP::Control *this)
{
  v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  mach_port_t v4 = v3;
  v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5) {
    unint64_t simple_required = AMCP::Core::Core::get_simple_required_property<1667591277u>(v5);
  }
  else {
    unint64_t simple_required = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return simple_required;
}

BOOL AMCP::Control::is_read_only(AMCP::Control *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 1;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 1;
  }
  mach_port_t v4 = v3;
  v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5)
  {
    strcpy(buf, "odrcbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    char v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v9 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        __int16 v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        char v13 = 4;
        strcpy((char *)__p, "crdo");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v11;
        *(_WORD *)&buf[8] = 2080;
        *(void *)&buf[10] = "Core.h";
        __int16 v15 = 1024;
        int v16 = 391;
        __int16 v17 = 2080;
        uint64_t v18 = "optional_value.operator BOOL() == true";
        __int16 v19 = 2080;
        v20 = __p;
        __int16 v21 = 1024;
        int v22 = 1735159650;
        __int16 v23 = 1024;
        int v24 = 0;
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
      abort();
    }
    BOOL v7 = v6 != 0;
  }
  else
  {
    BOOL v7 = 1;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v7;
}

void sub_1BAB966C8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *AMCP::Control::Value_Observer::Value_Observer(void *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = **a2;
  v5 = (std::__shared_weak_count *)(*a2)[1];
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    *a1 = v6;
    a1[1] = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  else
  {
    *a1 = v6;
    a1[1] = 0;
  }
  a1[2] = a3;
  return a1;
}

void AMCP::Control::Value_Observer::~Value_Observer(std::__shared_weak_count **this)
{
  AMCP::Control::Value_Observer::reset((AMCP::Control::Value_Observer *)this);
  v2 = this[1];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void AMCP::Control::Value_Observer::reset(AMCP::Control::Value_Observer *this)
{
  v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v2 && (v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    mach_port_t v4 = v3;
    if (*(void *)this)
    {
      unint64_t v5 = *((void *)this + 2);
      if (v5) {
        AMCP::Core::Conductor::destroy_control_value_observer(*(AMCP::Core::Conductor **)(*(void *)this + 32), v5);
      }
    }
    *((void *)this + 2) = 0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

void AMCP::Control::create_value_observer(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v5 || (v5 = std::__shared_weak_count::lock(v5), (BOOL v7 = v5) == 0) || !*(void *)(a1 + 16))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v11 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      __int16 v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)v28 = 2080;
      *(void *)&v28[2] = "Control.cpp";
      __int16 v29 = 1024;
      int v30 = 119;
      __int16 v31 = 2080;
      *(void *)v32 = "!core_ptr";
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v19, "No underlying object");
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    __int16 v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(void *)&v32[6] = "Control::Value_Observer AMCP::Control::create_value_observer(const Value_Observer_Proc &)";
    v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/Control.cpp";
    int v34 = 119;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    int v16 = &unk_1F148AA90;
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  __int16 v8 = *(uint64_t ***)(a1 + 32);
  uint64_t v9 = *(void *)(**v8 + 32);
  *(_DWORD *)buf = *(_DWORD *)(a1 + 8);
  unint64_t v10 = AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::register_observer(v9 + 2432, (unsigned int *)buf, a2);
  AMCP::Control::Value_Observer::Value_Observer(a3, v8, v10);

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_1BAB96AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Slider_Control::Slider_Control(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  mach_port_t v4 = (AMCP::Object *)AMCP::Control::Control(a1, a2, a3);
  *(void *)mach_port_t v4 = &unk_1F14618D0;
  uint64_t v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x736C6472);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    BOOL v7 = *v10;
    if (*(void *)v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      __int16 v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      *(_WORD *)mach_port_t v11 = 2080;
      *(void *)&v11[2] = "Control.cpp";
      __int16 v12 = 1024;
      int v13 = 130;
      __int16 v14 = 2080;
      uint64_t v15 = "constructed_correct_class(k_class_id_slider_control)";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1BAB96C94(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F145F4E8;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

AMCP::Slider_Control *AMCP::Slider_Control::Slider_Control(AMCP::Slider_Control *this, const AMCP::Device *a2, int a3, int a4, int a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = AMCP::Control::Control(this, a2, 1936483442, a5, a3, a4);
  *(void *)uint64_t v6 = &unk_1F14618D0;
  uint64_t v7 = AMCP::Object::constructed_correct_class(v6, (AMCP *)0x736C6472);
  if ((v7 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
    mach_port_t v9 = *v12;
    if (*(void *)v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v13);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      unint64_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      LODWORD(v12) = 67109890;
      HIDWORD(v12) = v11;
      *(_WORD *)int v13 = 2080;
      *(void *)&v13[2] = "Control.cpp";
      __int16 v14 = 1024;
      int v15 = 136;
      __int16 v16 = 2080;
      long long v17 = "constructed_correct_class(k_class_id_slider_control)";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v12, 0x22u);
    }
    abort();
  }
  return this;
}

void sub_1BAB96E24(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F145F4E8;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t AMCP::Slider_Control::get_value(AMCP::Slider_Control *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  mach_port_t v4 = v3;
  uint64_t v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5)
  {
    strcpy(buf, "vrdsbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    unint64_t v6 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if (!HIDWORD(v6))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v9 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        unint64_t v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        char v13 = 4;
        strcpy((char *)__p, "sdrv");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v11;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Core.h";
        __int16 v15 = 1024;
        int v16 = 391;
        __int16 v17 = 2080;
        uint64_t v18 = "optional_value.operator BOOL() == true";
        __int16 v19 = 2080;
        std::runtime_error v20 = __p;
        __int16 v21 = 1024;
        int v22 = 1735159650;
        __int16 v23 = 1024;
        int v24 = 0;
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
      abort();
    }
    unint64_t v7 = v6;
  }
  else
  {
    unint64_t v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v7;
}

void sub_1BAB9705C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Slider_Control::set_value(AMCP::Slider_Control *this, int a2)
{
  int v13 = a2;
  v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      unint64_t v6 = v5;
      unint64_t v7 = (int8x8_t *)*((void *)this + 2);
      if (v7)
      {
        uint64_t v18 = 0x676C6F6273647276;
        int v19 = 0;
        if (AMCP::Core::Core::is_property_settable(v7, (const AMCP::Address *)&v18))
        {
          AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v16, v7, (unsigned int *)&v18);
          __int16 v8 = v16;
          if (v16)
          {
            unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
            {
              AMCP::Core::Operation::call_function<void,unsigned int const&>(v8, (uint64_t)&v13);
LABEL_8:
              if (v17) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v17);
              }
              uint64_t v10 = 1;
              goto LABEL_18;
            }
            unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v11))
            {
              memset(v14, 0, sizeof(v14));
              LODWORD(v14[0]) = a2;
              __int16 v15 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
              AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v14);
              if (v15) {
                v15(0, (uint64_t)v14, 0, 0);
              }
              goto LABEL_8;
            }
          }
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
        }
      }
      uint64_t v10 = 0;
LABEL_18:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      return v10;
    }
  }
  return 0;
}

void sub_1BAB971AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void, char *, void, void), uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a15) {
    a15(0, &a11, 0, 0);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAB97184);
}

uint64_t AMCP::Slider_Control::set_value_and_wait(AMCP::Slider_Control *this, int a2)
{
  int v13 = a2;
  v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      unint64_t v6 = v5;
      unint64_t v7 = (int8x8_t *)*((void *)this + 2);
      if (v7)
      {
        uint64_t v18 = 0x676C6F6273647276;
        int v19 = 0;
        if (AMCP::Core::Core::is_property_settable(v7, (const AMCP::Address *)&v18))
        {
          AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v16, v7, (unsigned int *)&v18);
          __int16 v8 = v16;
          if (v16)
          {
            unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
            {
              AMCP::Core::Operation::call_function<void,unsigned int const&>(v8, (uint64_t)&v13);
LABEL_8:
              if (v17) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v17);
              }
              uint64_t v10 = 1;
              goto LABEL_18;
            }
            unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v11))
            {
              memset(v14, 0, sizeof(v14));
              LODWORD(v14[0]) = a2;
              __int16 v15 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
              AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v14);
              if (v15) {
                v15(0, (uint64_t)v14, 0, 0);
              }
              goto LABEL_8;
            }
          }
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
        }
      }
      uint64_t v10 = 0;
LABEL_18:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      return v10;
    }
  }
  return 0;
}

void sub_1BAB97344(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void, char *, void, void), uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a15) {
    a15(0, &a11, 0, 0);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAB9731CLL);
}

unint64_t AMCP::Slider_Control::get_range(AMCP::Slider_Control *this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2 && (v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    mach_port_t v4 = v3;
    uint64_t v5 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v5)
    {
      strcpy(buf, "rrdsbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      unint64_t v6 = AMCP::Core::Core::get_typed_property_value<std::tuple<unsigned int,unsigned int>,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
      if (!v7)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        unint64_t v11 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          __int16 v12 = pthread_self();
          mach_port_t v13 = pthread_mach_thread_np(v12);
          char v15 = 4;
          strcpy((char *)__p, "sdrr");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v13;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "Core.h";
          __int16 v17 = 1024;
          int v18 = 391;
          __int16 v19 = 2080;
          std::runtime_error v20 = "optional_value.operator BOOL() == true";
          __int16 v21 = 2080;
          int v22 = __p;
          __int16 v23 = 1024;
          int v24 = 1735159650;
          __int16 v25 = 1024;
          int v26 = 0;
          _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v15 < 0) {
            operator delete(__p[0]);
          }
        }
        abort();
      }
      unsigned int v8 = v6;
      unint64_t v9 = v6 & 0xFFFFFFFF00000000;
    }
    else
    {
      unint64_t v9 = 0;
      unsigned int v8 = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    unsigned int v8 = 0;
    unint64_t v9 = 0;
  }
  return v9 & 0xFFFFFFFF00000000 | v8;
}

void sub_1BAB97560(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

unint64_t AMCP::Core::Core::get_typed_property_value<std::tuple<unsigned int,unsigned int>,std::enable_if<true,void>>(AMCP::Core::Core *a1, const AMCP::Address *a2)
{
  if (!AMCP::Core::Core::has_property(a1, a2))
  {
LABEL_14:
    LOBYTE(v5) = 0;
    return v5 | (v2 << 8);
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v12, (int8x8_t *)a1, (unsigned int *)a2);
  unint64_t v5 = v12;
  if (v12)
  {
    unint64_t v6 = AMCP::Implementation::get_type_marker<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>((void *)v5, v6))
    {
      unint64_t v5 = AMCP::Core::Operation::call_function<std::tuple<unsigned int,unsigned int>>((void *)v5);
LABEL_5:
      int v7 = 0;
      unint64_t v2 = v5 >> 8;
      goto LABEL_11;
    }
    unint64_t v8 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>((void *)v5, v8))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v10, (void *)v5);
      unint64_t v5 = AMCP::Thing::convert_to<std::tuple<unsigned int,unsigned int>>((uint64_t)v10);
      if (v11) {
        v11(0, v10, 0, 0);
      }
      goto LABEL_5;
    }
    LOBYTE(v5) = 0;
  }
  int v7 = 1;
LABEL_11:
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v7) {
    goto LABEL_14;
  }
  return v5 | (v2 << 8);
}

uint64_t AMCP::Level_Control::Level_Control(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  mach_port_t v4 = (AMCP::Object *)AMCP::Control::Control(a1, a2, a3);
  *(void *)mach_port_t v4 = &unk_1F14618F0;
  uint64_t v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x6C65766C);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    int v7 = *v10;
    if (*(void *)v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      unint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      *(_WORD *)unint64_t v11 = 2080;
      *(void *)&v11[2] = "Control.cpp";
      __int16 v12 = 1024;
      int v13 = 202;
      __int16 v14 = 2080;
      char v15 = "constructed_correct_class(k_class_id_level_control)";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1BAB977AC(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F145F4E8;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

AMCP::Level_Control *AMCP::Level_Control::Level_Control(AMCP::Level_Control *this, const AMCP::Device *a2, int a3, int a4, int a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = AMCP::Control::Control(this, a2, 1818588780, a5, a3, a4);
  *(void *)unint64_t v6 = &unk_1F14618F0;
  uint64_t v7 = AMCP::Object::constructed_correct_class(v6, (AMCP *)0x6C65766C);
  if ((v7 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
    mach_port_t v9 = *v12;
    if (*(void *)v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v13);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      LODWORD(v12) = 67109890;
      HIDWORD(v12) = v11;
      *(_WORD *)int v13 = 2080;
      *(void *)&v13[2] = "Control.cpp";
      __int16 v14 = 1024;
      int v15 = 208;
      __int16 v16 = 2080;
      __int16 v17 = "constructed_correct_class(k_class_id_level_control)";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v12, 0x22u);
    }
    abort();
  }
  return this;
}

void sub_1BAB9793C(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F145F4E8;
  v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

float AMCP::Level_Control::get_scalar_value(AMCP::Level_Control *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  float v3 = 0.0;
  if (v2)
  {
    mach_port_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      unint64_t v6 = (AMCP::Core::Core *)*((void *)this + 2);
      if (v6)
      {
        strcpy(buf, "vsclbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        unint64_t v7 = AMCP::Core::Core::get_typed_property_value<float,std::enable_if<true,void>>(v6, (const AMCP::Address *)buf);
        if (!HIDWORD(v7))
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          mach_port_t v9 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            uint64_t v10 = pthread_self();
            mach_port_t v11 = pthread_mach_thread_np(v10);
            char v13 = 4;
            strcpy((char *)__p, "lcsv");
            *(_DWORD *)buf = 67110658;
            *(_DWORD *)&buf[4] = v11;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "Core.h";
            __int16 v15 = 1024;
            int v16 = 391;
            __int16 v17 = 2080;
            uint64_t v18 = "optional_value.operator BOOL() == true";
            __int16 v19 = 2080;
            std::runtime_error v20 = __p;
            __int16 v21 = 1024;
            int v22 = 1735159650;
            __int16 v23 = 1024;
            int v24 = 0;
            _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
            if (v13 < 0) {
              operator delete(__p[0]);
            }
          }
          abort();
        }
        float v3 = *(float *)&v7;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  return v3;
}

void sub_1BAB97B70(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Core::Core::get_typed_property_value<float,std::enable_if<true,void>>(AMCP::Core::Core *a1, const AMCP::Address *a2)
{
  if (!AMCP::Core::Core::has_property(a1, a2)) {
    goto LABEL_13;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v14, (int8x8_t *)a1, (unsigned int *)a2);
  uint64_t v5 = v14;
  if (v14)
  {
    unint64_t v6 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v6))
    {
      AMCP::Core::Operation::call_function<float>(v5);
      float v2 = v7;
LABEL_5:
      int v8 = 0;
      goto LABEL_10;
    }
    unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v9))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v12, v5);
      float v2 = AMCP::Thing::convert_to<float>((uint64_t)v12);
      if (v13) {
        v13(0, v12, 0, 0);
      }
      goto LABEL_5;
    }
  }
  int v8 = 1;
LABEL_10:
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (!v8)
  {
    uint64_t v10 = 0x100000000;
    return v10 | LODWORD(v2);
  }
LABEL_13:
  uint64_t v10 = 0;
  LODWORD(v2) &= 0xFFFFFF00;
  return v10 | LODWORD(v2);
}

uint64_t AMCP::Level_Control::set_scalar_value(AMCP::Level_Control *this, float a2)
{
  float v12 = a2;
  float v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      unint64_t v6 = v5;
      uint64_t v7 = *((void *)this + 2);
      if (v7)
      {
        uint64_t v17 = 0x676C6F626C637376;
        int v18 = 0;
        if (AMCP::Core::Core::is_property_settable((int8x8_t *)v7, (const AMCP::Address *)&v17))
        {
          AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v15, (int8x8_t *)v7, (unsigned int *)&v17);
          int v8 = v15;
          if (v15)
          {
            unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
            {
              AMCP::Core::Operation::call_function<void,float const&>(v8, (uint64_t)&v12);
LABEL_8:
              if (v16) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v16);
              }
              uint64_t v7 = 1;
              goto LABEL_18;
            }
            unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v10))
            {
              memset(v13, 0, sizeof(v13));
              *(float *)char v13 = a2;
              __int16 v14 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
              AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v13);
              if (v14) {
                v14(0, (uint64_t)v13, 0, 0);
              }
              goto LABEL_8;
            }
          }
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
        }
        uint64_t v7 = 0;
      }
LABEL_18:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      return v7;
    }
  }
  return 0;
}

void sub_1BAB97DC4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void, char *, void, void), uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a15) {
    a15(0, &a11, 0, 0);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAB97D9CLL);
}

uint64_t AMCP::Level_Control::set_scalar_value_and_wait(AMCP::Level_Control *this, float a2)
{
  float v12 = a2;
  float v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      unint64_t v6 = v5;
      uint64_t v7 = *((void *)this + 2);
      if (v7)
      {
        uint64_t v17 = 0x676C6F626C637376;
        int v18 = 0;
        if (AMCP::Core::Core::is_property_settable((int8x8_t *)v7, (const AMCP::Address *)&v17))
        {
          AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v15, (int8x8_t *)v7, (unsigned int *)&v17);
          int v8 = v15;
          if (v15)
          {
            unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
            {
              AMCP::Core::Operation::call_function<void,float const&>(v8, (uint64_t)&v12);
LABEL_8:
              if (v16) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v16);
              }
              uint64_t v7 = 1;
              goto LABEL_18;
            }
            unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v10))
            {
              memset(v13, 0, sizeof(v13));
              *(float *)char v13 = a2;
              __int16 v14 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
              AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v13);
              if (v14) {
                v14(0, (uint64_t)v13, 0, 0);
              }
              goto LABEL_8;
            }
          }
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
        }
        uint64_t v7 = 0;
      }
LABEL_18:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      return v7;
    }
  }
  return 0;
}

void sub_1BAB97F5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void, char *, void, void), uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a15) {
    a15(0, &a11, 0, 0);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAB97F34);
}

float AMCP::Level_Control::get_decibel_value(AMCP::Level_Control *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  float v2 = (std::__shared_weak_count *)*((void *)this + 3);
  float v3 = 0.0;
  if (v2)
  {
    mach_port_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      unint64_t v6 = (AMCP::Core::Core *)*((void *)this + 2);
      if (v6)
      {
        strcpy(buf, "vdclbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        unint64_t v7 = AMCP::Core::Core::get_typed_property_value<float,std::enable_if<true,void>>(v6, (const AMCP::Address *)buf);
        if (!HIDWORD(v7))
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          unint64_t v9 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            unint64_t v10 = pthread_self();
            mach_port_t v11 = pthread_mach_thread_np(v10);
            char v13 = 4;
            strcpy((char *)__p, "lcdv");
            *(_DWORD *)buf = 67110658;
            *(_DWORD *)&buf[4] = v11;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "Core.h";
            __int16 v15 = 1024;
            int v16 = 391;
            __int16 v17 = 2080;
            int v18 = "optional_value.operator BOOL() == true";
            __int16 v19 = 2080;
            std::runtime_error v20 = __p;
            __int16 v21 = 1024;
            int v22 = 1735159650;
            __int16 v23 = 1024;
            int v24 = 0;
            _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
            if (v13 < 0) {
              operator delete(__p[0]);
            }
          }
          abort();
        }
        float v3 = *(float *)&v7;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  return v3;
}

void sub_1BAB9815C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Level_Control::set_decibel_value(AMCP::Level_Control *this, float a2)
{
  float v12 = a2;
  float v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      unint64_t v6 = v5;
      uint64_t v7 = *((void *)this + 2);
      if (v7)
      {
        uint64_t v17 = 0x676C6F626C636476;
        int v18 = 0;
        if (AMCP::Core::Core::is_property_settable((int8x8_t *)v7, (const AMCP::Address *)&v17))
        {
          AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v15, (int8x8_t *)v7, (unsigned int *)&v17);
          int v8 = v15;
          if (v15)
          {
            unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
            {
              AMCP::Core::Operation::call_function<void,float const&>(v8, (uint64_t)&v12);
LABEL_8:
              if (v16) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v16);
              }
              uint64_t v7 = 1;
              goto LABEL_18;
            }
            unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v10))
            {
              memset(v13, 0, sizeof(v13));
              *(float *)char v13 = a2;
              __int16 v14 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
              AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v13);
              if (v14) {
                v14(0, (uint64_t)v13, 0, 0);
              }
              goto LABEL_8;
            }
          }
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
        }
        uint64_t v7 = 0;
      }
LABEL_18:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      return v7;
    }
  }
  return 0;
}

void sub_1BAB982AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void, char *, void, void), uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a15) {
    a15(0, &a11, 0, 0);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAB98284);
}

uint64_t AMCP::Level_Control::set_decibel_value_and_wait(AMCP::Level_Control *this, float a2)
{
  float v12 = a2;
  float v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      unint64_t v6 = v5;
      uint64_t v7 = *((void *)this + 2);
      if (v7)
      {
        uint64_t v17 = 0x676C6F626C636476;
        int v18 = 0;
        if (AMCP::Core::Core::is_property_settable((int8x8_t *)v7, (const AMCP::Address *)&v17))
        {
          AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v15, (int8x8_t *)v7, (unsigned int *)&v17);
          int v8 = v15;
          if (v15)
          {
            unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
            {
              AMCP::Core::Operation::call_function<void,float const&>(v8, (uint64_t)&v12);
LABEL_8:
              if (v16) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v16);
              }
              uint64_t v7 = 1;
              goto LABEL_18;
            }
            unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v10))
            {
              memset(v13, 0, sizeof(v13));
              *(float *)char v13 = a2;
              __int16 v14 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
              AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v13);
              if (v14) {
                v14(0, (uint64_t)v13, 0, 0);
              }
              goto LABEL_8;
            }
          }
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
        }
        uint64_t v7 = 0;
      }
LABEL_18:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      return v7;
    }
  }
  return 0;
}

void sub_1BAB98444(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void, char *, void, void), uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a15) {
    a15(0, &a11, 0, 0);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAB9841CLL);
}

double AMCP::Level_Control::get_decibel_range(AMCP::Level_Control *this)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  float v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0.0;
  }
  float v3 = std::__shared_weak_count::lock(v2);
  double v4 = 0.0;
  if (v3)
  {
    uint64_t v5 = v3;
    unint64_t v6 = (AMCP::Core::Core *)*((void *)this + 2);
    if (!v6)
    {
LABEL_17:
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      return v4;
    }
    uint64_t v20 = 0x676C6F626C636472;
    int v21 = 0;
    has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::has_property(v6, (const AMCP::Address *)&v20);
    if (!has_property)
    {
LABEL_19:
      AMCP::Log::Scope_Registry::get(has_property);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      __int16 v14 = **(NSObject ***)buf;
      if (*(void *)v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v23);
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        __int16 v15 = pthread_self();
        mach_port_t v16 = pthread_mach_thread_np(v15);
        char v19 = 4;
        strcpy((char *)&__p, "lcdr");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v16;
        *(_WORD *)__int16 v23 = 2080;
        *(void *)&v23[2] = "Core.h";
        __int16 v24 = 1024;
        int v25 = 391;
        __int16 v26 = 2080;
        *(void *)uint64_t v27 = "optional_value.operator BOOL() == true";
        *(_WORD *)&v27[8] = 2080;
        *(void *)&v27[10] = &__p;
        __int16 v28 = 1024;
        int v29 = 1735159650;
        __int16 v30 = 1024;
        int v31 = 0;
        _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v19 < 0) {
          operator delete(__p);
        }
      }
      abort();
    }
    AMCP::Core::Core::find_operation((AMCP::Core::Core *)&__p, (int8x8_t *)v6, (unsigned int *)&v20);
    int v8 = __p;
    if (__p)
    {
      unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRange ()(void)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
      {
        AMCP::Core::Operation::call_function<CA::ValueRange>(v8);
        double v4 = v10;
LABEL_8:
        char v11 = 0;
        goto LABEL_14;
      }
      unint64_t v12 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v12))
      {
        AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)buf, v8);
        double v4 = AMCP::Thing::convert_to<CA::ValueRange>((uint64_t)buf);
        if (*(void *)&v27[6]) {
          (*(void (**)(void, uint8_t *, void, void))&v27[6])(0, buf, 0, 0);
        }
        goto LABEL_8;
      }
    }
    char v11 = 1;
LABEL_14:
    has_property = (AMCP::Log::Scope_Registry *)v18;
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    if ((v11 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_19;
  }
  return v4;
}

void sub_1BAB986F8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::Core::Operation::call_function<CA::ValueRange>(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRange ()(void)>>();
  float v3 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v2);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    double v10 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      char v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v12;
      *(_WORD *)__int16 v28 = 2080;
      *(void *)&v28[2] = "Operation.h";
      __int16 v29 = 1024;
      int v30 = 154;
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    int v31 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = CA::ValueRange, Argument_Types = <>]";
    uint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v33 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    __int16 v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  double v4 = v3;
  if (!*((void *)v3 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<CA::ValueRange ()(void)>>(),
        (float v3 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v4 + 7))(4, (uint64_t)v4 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v7 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v9;
      *(_WORD *)__int16 v28 = 2080;
      *(void *)&v28[2] = "Operation.h";
      __int16 v29 = 1024;
      int v30 = 161;
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    int v31 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = CA::ValueRange, Argument_Types = <>]";
    uint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v33 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    __int16 v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v5 = *((void *)v3 + 3);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
}

void sub_1BAB98B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<CA::ValueRange ()(void)>>()
{
  v0 = &unk_1E9F79000;
  {
    v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[436];
}

float AMCP::Level_Control::convert_scalar_value_to_decibels(AMCP::Level_Control *this, float a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  float v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v3 || (v3 = std::__shared_weak_count::lock(v3)) == 0 || (uint64_t v5 = (int8x8_t *)*((void *)this + 2)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    __int16 v15 = **(NSObject ***)buf;
    if (*(void *)v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v45);
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      long long v16 = pthread_self();
      mach_port_t v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v17;
      *(_WORD *)v45 = 2080;
      *(void *)&v45[2] = "Control.cpp";
      __int16 v46 = 1024;
      int v47 = 314;
      __int16 v48 = 2080;
      *(void *)v49 = "!core_ptr";
      _os_log_error_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v31, "No underlying object");
    std::runtime_error::runtime_error(&v37, &v31);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    int v42 = -1;
    v37.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    v38 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v37);
    *(void *)&v49[6] = "float32_t AMCP::Level_Control::convert_scalar_value_to_decibels(float32_t) const";
    v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/Control.cpp";
    int v51 = 314;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v35.__r_.__value_.__l.__data_);
    int v33 = &unk_1F148AA90;
    std::string v34 = v35;
    memset(&v35, 0, sizeof(v35));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v6 = v3;
  uint64_t v27 = 0x676C6F626C637364;
  int v28 = 0;
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v29, v5, (unsigned int *)&v27);
  int v8 = v29;
  if (!v29)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v21 = **(NSObject ***)buf;
    if (*(void *)v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v45);
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = pthread_self();
      mach_port_t v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v23;
      *(_WORD *)v45 = 2080;
      *(void *)&v45[2] = "Core.h";
      __int16 v46 = 1024;
      int v47 = 202;
      _os_log_error_impl(&dword_1BAA78000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v43);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v35);
    std::runtime_error::runtime_error(&v36, &v35);
    std::runtime_error::runtime_error(&v37, &v36);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    int v42 = -1;
    v37.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    v38 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v37);
    *(void *)&v49[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = float, Argument_Types = <float>]";
    v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    int v51 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
    int v33 = &unk_1F148AA90;
    *(std::runtime_error *)&v34.__r_.__value_.__l.__data_ = v31;
    v34.__r_.__value_.__r.__words[2] = v32;
    v31.__vftable = 0;
    v31.__imp_.__imp_ = 0;
    std::string::size_type v32 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<float ()(float)>>();
  double v10 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9);
  if (!v10)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v24 = **(NSObject ***)buf;
    if (*(void *)v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v45);
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = pthread_self();
      mach_port_t v26 = pthread_mach_thread_np(v25);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v26;
      *(_WORD *)v45 = 2080;
      *(void *)&v45[2] = "Operation.h";
      __int16 v46 = 1024;
      int v47 = 154;
      _os_log_error_impl(&dword_1BAA78000, v24, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v43);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v35);
    std::runtime_error::runtime_error(&v36, &v35);
    std::runtime_error::runtime_error(&v37, &v36);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    int v42 = -1;
    v37.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    v38 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v37);
    *(void *)&v49[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = float,"
                         " Argument_Types = <float>]";
    v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v51 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
    int v33 = &unk_1F148AA90;
    *(std::runtime_error *)&v34.__r_.__value_.__l.__data_ = v31;
    v34.__r_.__value_.__r.__words[2] = v32;
    v31.__vftable = 0;
    v31.__imp_.__imp_ = 0;
    std::string::size_type v32 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  char v11 = v10;
  if (!*((void *)v10 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<float ()(float)>>(),
        (double v10 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v11 + 7))(4, (uint64_t)v11 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    std::string v18 = **(NSObject ***)buf;
    if (*(void *)v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v45);
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      std::runtime_error v19 = pthread_self();
      mach_port_t v20 = pthread_mach_thread_np(v19);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v20;
      *(_WORD *)v45 = 2080;
      *(void *)&v45[2] = "Operation.h";
      __int16 v46 = 1024;
      int v47 = 161;
      _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v43);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v35);
    std::runtime_error::runtime_error(&v36, &v35);
    std::runtime_error::runtime_error(&v37, &v36);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    int v42 = -1;
    v37.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    v38 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v37);
    *(void *)&v49[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = float,"
                         " Argument_Types = <float>]";
    v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v51 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
    int v33 = &unk_1F148AA90;
    *(std::runtime_error *)&v34.__r_.__value_.__l.__data_ = v31;
    v34.__r_.__value_.__r.__words[2] = v32;
    v31.__vftable = 0;
    v31.__imp_.__imp_ = 0;
    std::string::size_type v32 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  *(float *)buf = a2;
  uint64_t v12 = *((void *)v10 + 3);
  if (!v12) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  float v13 = (*(float (**)(uint64_t, uint8_t *))(*(void *)v12 + 48))(v12, buf);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v13;
}

void sub_1BAB9955C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::runtime_error a28,std::runtime_error a29,uint64_t a30)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<float ()(float)>>()
{
  v0 = &unk_1E9F79000;
  {
    v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[438];
}

float AMCP::Level_Control::convert_decibel_value_to_scalar(AMCP::Level_Control *this, float a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  float v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v3 || (v3 = std::__shared_weak_count::lock(v3)) == 0 || (uint64_t v5 = (int8x8_t *)*((void *)this + 2)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    __int16 v15 = **(NSObject ***)buf;
    if (*(void *)v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v45);
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      long long v16 = pthread_self();
      mach_port_t v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v17;
      *(_WORD *)v45 = 2080;
      *(void *)&v45[2] = "Control.cpp";
      __int16 v46 = 1024;
      int v47 = 321;
      __int16 v48 = 2080;
      *(void *)v49 = "!core_ptr";
      _os_log_error_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No underlying object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v31, "No underlying object");
    std::runtime_error::runtime_error(&v37, &v31);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    int v42 = -1;
    v37.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    v38 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v37);
    *(void *)&v49[6] = "float32_t AMCP::Level_Control::convert_decibel_value_to_scalar(float32_t) const";
    v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/API/Control.cpp";
    int v51 = 321;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v35.__r_.__value_.__l.__data_);
    int v33 = &unk_1F148AA90;
    std::string v34 = v35;
    memset(&v35, 0, sizeof(v35));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v6 = v3;
  uint64_t v27 = 0x676C6F626C637364;
  int v28 = 0;
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v29, v5, (unsigned int *)&v27);
  int v8 = v29;
  if (!v29)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v21 = **(NSObject ***)buf;
    if (*(void *)v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v45);
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = pthread_self();
      mach_port_t v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v23;
      *(_WORD *)v45 = 2080;
      *(void *)&v45[2] = "Core.h";
      __int16 v46 = 1024;
      int v47 = 202;
      _os_log_error_impl(&dword_1BAA78000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v43);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v35);
    std::runtime_error::runtime_error(&v36, &v35);
    std::runtime_error::runtime_error(&v37, &v36);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    int v42 = -1;
    v37.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    v38 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v37);
    *(void *)&v49[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = float, Argument_Types = <float, BOOL>]";
    v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    int v51 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
    int v33 = &unk_1F148AA90;
    *(std::runtime_error *)&v34.__r_.__value_.__l.__data_ = v31;
    v34.__r_.__value_.__r.__words[2] = v32;
    v31.__vftable = 0;
    v31.__imp_.__imp_ = 0;
    std::string::size_type v32 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<float ()(float,BOOL)>>();
  double v10 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9);
  if (!v10)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v24 = **(NSObject ***)buf;
    if (*(void *)v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v45);
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = pthread_self();
      mach_port_t v26 = pthread_mach_thread_np(v25);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v26;
      *(_WORD *)v45 = 2080;
      *(void *)&v45[2] = "Operation.h";
      __int16 v46 = 1024;
      int v47 = 154;
      _os_log_error_impl(&dword_1BAA78000, v24, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v43);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v35);
    std::runtime_error::runtime_error(&v36, &v35);
    std::runtime_error::runtime_error(&v37, &v36);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    int v42 = -1;
    v37.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    v38 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v37);
    *(void *)&v49[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = float,"
                         " Argument_Types = <float, BOOL>]";
    v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v51 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
    int v33 = &unk_1F148AA90;
    *(std::runtime_error *)&v34.__r_.__value_.__l.__data_ = v31;
    v34.__r_.__value_.__r.__words[2] = v32;
    v31.__vftable = 0;
    v31.__imp_.__imp_ = 0;
    std::string::size_type v32 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  char v11 = v10;
  if (!*((void *)v10 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<float ()(float,BOOL)>>(),
        (double v10 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v11 + 7))(4, (uint64_t)v11 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    std::string v18 = **(NSObject ***)buf;
    if (*(void *)v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v45);
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      std::runtime_error v19 = pthread_self();
      mach_port_t v20 = pthread_mach_thread_np(v19);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v20;
      *(_WORD *)v45 = 2080;
      *(void *)&v45[2] = "Operation.h";
      __int16 v46 = 1024;
      int v47 = 161;
      _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v43);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v35);
    std::runtime_error::runtime_error(&v36, &v35);
    std::runtime_error::runtime_error(&v37, &v36);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    int v42 = -1;
    v37.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    v38 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v37);
    *(void *)&v49[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = float,"
                         " Argument_Types = <float, BOOL>]";
    v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v51 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
    int v33 = &unk_1F148AA90;
    *(std::runtime_error *)&v34.__r_.__value_.__l.__data_ = v31;
    v34.__r_.__value_.__r.__words[2] = v32;
    v31.__vftable = 0;
    v31.__imp_.__imp_ = 0;
    std::string::size_type v32 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  *(float *)buf = a2;
  LOBYTE(v37.__vftable) = 1;
  uint64_t v12 = *((void *)v10 + 3);
  if (!v12) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  float v13 = (*(float (**)(uint64_t, uint8_t *, std::runtime_error *))(*(void *)v12 + 48))(v12, buf, &v37);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v13;
}

void sub_1BAB99FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::runtime_error a28,std::runtime_error a29,uint64_t a30)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<float ()(float,BOOL)>>()
{
  v0 = &unk_1E9F79000;
  {
    v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[440];
}

uint64_t AMCP::Boolean_Control::Boolean_Control(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  double v4 = (AMCP::Object *)AMCP::Control::Control(a1, a2, a3);
  *(void *)double v4 = &unk_1F1461910;
  uint64_t v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x746F676C);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    uint64_t v7 = *v10;
    if (*(void *)v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      *(_WORD *)char v11 = 2080;
      *(void *)&v11[2] = "Control.cpp";
      __int16 v12 = 1024;
      int v13 = 332;
      __int16 v14 = 2080;
      __int16 v15 = "constructed_correct_class(k_class_id_BOOLean_control)";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1BAB9A30C(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F145F4E8;
  float v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

AMCP::Boolean_Control *AMCP::Boolean_Control::Boolean_Control(AMCP::Boolean_Control *this, const AMCP::Device *a2, int a3, int a4, int a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = AMCP::Control::Control(this, a2, 1953458028, a5, a3, a4);
  *(void *)unint64_t v6 = &unk_1F1461910;
  uint64_t v7 = AMCP::Object::constructed_correct_class(v6, (AMCP *)0x746F676C);
  if ((v7 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
    mach_port_t v9 = *v12;
    if (*(void *)v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v13);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      double v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      LODWORD(v12) = 67109890;
      HIDWORD(v12) = v11;
      *(_WORD *)int v13 = 2080;
      *(void *)&_OWORD v13[2] = "Control.cpp";
      __int16 v14 = 1024;
      int v15 = 338;
      __int16 v16 = 2080;
      mach_port_t v17 = "constructed_correct_class(k_class_id_BOOLean_control)";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v12, 0x22u);
    }
    abort();
  }
  return this;
}

void sub_1BAB9A49C(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F145F4E8;
  float v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Boolean_Control::get_value(AMCP::Boolean_Control *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  float v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  double v4 = v3;
  uint64_t v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5)
  {
    strcpy(buf, "lvcbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    unint64_t v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v9 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        double v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        char v13 = 4;
        strcpy((char *)__p, "bcvl");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v11;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Core.h";
        __int16 v15 = 1024;
        int v16 = 391;
        __int16 v17 = 2080;
        uint64_t v18 = "optional_value.operator BOOL() == true";
        __int16 v19 = 2080;
        mach_port_t v20 = __p;
        __int16 v21 = 1024;
        int v22 = 1735159650;
        __int16 v23 = 1024;
        int v24 = 0;
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
      abort();
    }
    BOOL v7 = v6 != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v7;
}

void sub_1BAB9A6DC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Boolean_Control::set_value(AMCP::Boolean_Control *this, char a2)
{
  char v13 = a2;
  float v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      unint64_t v6 = v5;
      BOOL v7 = (int8x8_t *)*((void *)this + 2);
      if (v7)
      {
        uint64_t v18 = 0x676C6F626263766CLL;
        int v19 = 0;
        if (AMCP::Core::Core::is_property_settable(v7, (const AMCP::Address *)&v18))
        {
          AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v16, v7, (unsigned int *)&v18);
          int v8 = v16;
          if (v16)
          {
            unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
            {
              AMCP::Core::Operation::call_function<void,BOOL const&>(v8, (uint64_t)&v13);
LABEL_8:
              if (v17) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v17);
              }
              uint64_t v10 = 1;
              goto LABEL_18;
            }
            unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v11))
            {
              memset(v14, 0, sizeof(v14));
              LOBYTE(v14[0]) = a2;
              __int16 v15 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
              AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v14);
              if (v15) {
                v15(0, (uint64_t)v14, 0, 0);
              }
              goto LABEL_8;
            }
          }
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
        }
      }
      uint64_t v10 = 0;
LABEL_18:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      return v10;
    }
  }
  return 0;
}

void sub_1BAB9A82C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void, char *, void, void), uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a15) {
    a15(0, &a11, 0, 0);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAB9A804);
}

uint64_t AMCP::Boolean_Control::set_value_and_wait(AMCP::Boolean_Control *this, char a2)
{
  char v13 = a2;
  float v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      unint64_t v6 = v5;
      BOOL v7 = (int8x8_t *)*((void *)this + 2);
      if (v7)
      {
        uint64_t v18 = 0x676C6F626263766CLL;
        int v19 = 0;
        if (AMCP::Core::Core::is_property_settable(v7, (const AMCP::Address *)&v18))
        {
          AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v16, v7, (unsigned int *)&v18);
          int v8 = v16;
          if (v16)
          {
            unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
            {
              AMCP::Core::Operation::call_function<void,BOOL const&>(v8, (uint64_t)&v13);
LABEL_8:
              if (v17) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v17);
              }
              uint64_t v10 = 1;
              goto LABEL_18;
            }
            unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v11))
            {
              memset(v14, 0, sizeof(v14));
              LOBYTE(v14[0]) = a2;
              __int16 v15 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
              AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v14);
              if (v15) {
                v15(0, (uint64_t)v14, 0, 0);
              }
              goto LABEL_8;
            }
          }
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
        }
      }
      uint64_t v10 = 0;
LABEL_18:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      return v10;
    }
  }
  return 0;
}

void sub_1BAB9A9C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void, char *, void, void), uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a15) {
    a15(0, &a11, 0, 0);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAB9A99CLL);
}

uint64_t AMCP::Selector_Control::Selector_Control(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  double v4 = (AMCP::Object *)AMCP::Control::Control(a1, a2, a3);
  *(void *)double v4 = &unk_1F1461930;
  uint64_t v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x736C6374);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    BOOL v7 = *v10;
    if (*(void *)v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      *(_WORD *)unint64_t v11 = 2080;
      *(void *)&v11[2] = "Control.cpp";
      __int16 v12 = 1024;
      int v13 = 394;
      __int16 v14 = 2080;
      __int16 v15 = "constructed_correct_class(k_class_id_selector_control)";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1BAB9AB54(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F145F4E8;
  float v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

AMCP::Selector_Control *AMCP::Selector_Control::Selector_Control(AMCP::Selector_Control *this, const AMCP::Device *a2, int a3, int a4, int a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = AMCP::Control::Control(this, a2, 1936483188, a5, a3, a4);
  *(void *)unint64_t v6 = &unk_1F1461930;
  uint64_t v7 = AMCP::Object::constructed_correct_class(v6, (AMCP *)0x736C6374);
  if ((v7 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
    mach_port_t v9 = *v12;
    if (*(void *)v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v13);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      LODWORD(v12) = 67109890;
      HIDWORD(v12) = v11;
      *(_WORD *)int v13 = 2080;
      *(void *)&_OWORD v13[2] = "Control.cpp";
      __int16 v14 = 1024;
      int v15 = 400;
      __int16 v16 = 2080;
      __int16 v17 = "constructed_correct_class(k_class_id_selector_control)";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v12, 0x22u);
    }
    abort();
  }
  return this;
}

void sub_1BAB9ACE4(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F145F4E8;
  float v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Selector_Control::is_multi_value(AMCP::Selector_Control *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  float v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  double v4 = v3;
  uint64_t v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5)
  {
    strcpy(buf, "mccsbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    unint64_t v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v9 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        char v13 = 4;
        strcpy((char *)__p, "sccm");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v11;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Core.h";
        __int16 v15 = 1024;
        int v16 = 391;
        __int16 v17 = 2080;
        uint64_t v18 = "optional_value.operator BOOL() == true";
        __int16 v19 = 2080;
        mach_port_t v20 = __p;
        __int16 v21 = 1024;
        int v22 = 1735159650;
        __int16 v23 = 1024;
        int v24 = 0;
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
      abort();
    }
    BOOL v7 = v6 != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v7;
}

void sub_1BAB9AF24(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Selector_Control::get_value(AMCP::Selector_Control *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  float v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  double v4 = v3;
  uint64_t v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5)
  {
    AMCP::Core::Core::get_simple_required_property<1935893353u>(&__p, v5);
    uint64_t v6 = *(unsigned int *)__p;
    operator delete(__p);
  }
  else
  {
    uint64_t v6 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v6;
}

void AMCP::Core::Core::get_simple_required_property<1935893353u>(void *a1, AMCP::Core::Core *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  strcpy(buf, "iccsbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>((uint64_t)&v10, a2, (AMCP::Address *)buf);
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v5 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = pthread_self();
      mach_port_t v7 = pthread_mach_thread_np(v6);
      char v9 = 4;
      strcpy((char *)__p, "scci");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v7;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      __int16 v14 = 1024;
      int v15 = 391;
      __int16 v16 = 2080;
      __int16 v17 = "optional_value.operator BOOL() == true";
      __int16 v18 = 2080;
      __int16 v19 = __p;
      __int16 v20 = 1024;
      int v21 = 1735159650;
      __int16 v22 = 1024;
      int v23 = 0;
      _os_log_error_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  double v4 = v10;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, v10, v11, (v11 - (uint64_t)v10) >> 2);
  if (v4)
  {
    operator delete(v4);
  }
}

void sub_1BAB9B17C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Selector_Control::set_value(AMCP::Selector_Control *this, int a2)
{
  float v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  mach_port_t v7 = (int8x8_t *)*((void *)this + 2);
  if (v7)
  {
    int v8 = operator new(4uLL);
    __p = v8;
    *int v8 = a2;
    char v12 = v8 + 1;
    char v13 = v8 + 1;
    uint64_t v9 = AMCP::Core::Core::set_simple_property_value<1935893353u>(v7, (uint64_t)&__p);
    if (__p)
    {
      char v12 = __p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v9;
}

uint64_t AMCP::Core::Core::set_simple_property_value<1935893353u>(int8x8_t *a1, uint64_t a2)
{
  uint64_t v12 = 0x676C6F6273636369;
  int v13 = 0;
  if (!AMCP::Core::Core::is_property_settable(a1, (const AMCP::Address *)&v12)) {
    return 0;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v10, a1, (unsigned int *)&v12);
  double v4 = v10;
  if (!v10)
  {
LABEL_11:
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    return 0;
  }
  unint64_t v5 = AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v5))
  {
    unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v7))
    {
      uint64_t v9 = 0;
      memset(v8, 0, sizeof(v8));
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v8, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      uint64_t v9 = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
      AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v4, (uint64_t)v8);
      if (v9) {
        v9(0, (uint64_t)v8, 0, 0);
      }
      goto LABEL_5;
    }
    goto LABEL_11;
  }
  AMCP::Core::Operation::call_function<void,std::vector<unsigned int> const&>(v4, a2);
LABEL_5:
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return 1;
}

void sub_1BAB9B34C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAB9B334);
}

uint64_t AMCP::Core::Operation::call_function<void,std::vector<unsigned int> const&>(void *a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>();
  unint64_t v5 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v4);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v12 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v14;
      *(_WORD *)int v30 = 2080;
      *(void *)&v30[2] = "Operation.h";
      __int16 v31 = 1024;
      int v32 = 154;
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v23 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    int v33 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const std::vector<unsigned int> &>]";
    std::string v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v35 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    __int16 v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = v5;
  if (!*((void *)v5 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>(),
        (unint64_t v5 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v6 + 7))(4, (uint64_t)v6 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v9 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v11;
      *(_WORD *)int v30 = 2080;
      *(void *)&v30[2] = "Operation.h";
      __int16 v31 = 1024;
      int v32 = 161;
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v23 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    int v33 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const std::vector<unsigned int> &>]";
    std::string v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v35 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    __int16 v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v7 = *((void *)v5 + 3);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, a2);
}

void sub_1BAB9B820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>()
{
  v0 = &unk_1E9F79000;
  {
    v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[444];
}

uint64_t AMCP::Selector_Control::set_value_and_wait(AMCP::Selector_Control *this, int a2)
{
  float v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v3) {
    return 0;
  }
  unint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  uint64_t v7 = (int8x8_t *)*((void *)this + 2);
  if (v7)
  {
    int v8 = operator new(4uLL);
    __p = v8;
    *int v8 = a2;
    uint64_t v12 = v8 + 1;
    int v13 = v8 + 1;
    uint64_t v9 = AMCP::Core::Core::set_simple_property_value_and_wait<1935893353u>(v7, (uint64_t)&__p);
    if (__p)
    {
      uint64_t v12 = __p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v9;
}

uint64_t AMCP::Core::Core::set_simple_property_value_and_wait<1935893353u>(int8x8_t *a1, uint64_t a2)
{
  uint64_t v12 = 0x676C6F6273636369;
  int v13 = 0;
  if (!AMCP::Core::Core::is_property_settable(a1, (const AMCP::Address *)&v12)) {
    return 0;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v10, a1, (unsigned int *)&v12);
  unint64_t v4 = v10;
  if (!v10)
  {
LABEL_11:
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    return 0;
  }
  unint64_t v5 = AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v5))
  {
    unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v7))
    {
      uint64_t v9 = 0;
      memset(v8, 0, sizeof(v8));
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v8, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      uint64_t v9 = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
      AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v4, (uint64_t)v8);
      if (v9) {
        v9(0, (uint64_t)v8, 0, 0);
      }
      goto LABEL_5;
    }
    goto LABEL_11;
  }
  AMCP::Core::Operation::call_function<void,std::vector<unsigned int> const&>(v4, a2);
LABEL_5:
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return 1;
}

void sub_1BAB9BAF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAB9BADCLL);
}

void AMCP::Selector_Control::get_multi_value(AMCP::Selector_Control *this@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (unint64_t v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    unint64_t v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      AMCP::Core::Core::get_simple_required_property<1935893353u>(a2, v7);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

uint64_t AMCP::Selector_Control::set_multi_value(uint64_t a1, uint64_t a2)
{
  float v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3) {
    return 0;
  }
  unint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  unint64_t v7 = *(int8x8_t **)(a1 + 16);
  if (v7) {
    uint64_t v8 = AMCP::Core::Core::set_simple_property_value<1935893353u>(v7, a2);
  }
  else {
    uint64_t v8 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v8;
}

uint64_t AMCP::Selector_Control::set_multi_value_and_wait(uint64_t a1, uint64_t a2)
{
  float v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3) {
    return 0;
  }
  unint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  unint64_t v7 = *(int8x8_t **)(a1 + 16);
  if (v7) {
    uint64_t v8 = AMCP::Core::Core::set_simple_property_value_and_wait<1935893353u>(v7, a2);
  }
  else {
    uint64_t v8 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v8;
}

void AMCP::Selector_Control::get_item_list(AMCP::Selector_Control *this@<X0>, void *a2@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v4 || (unint64_t v5 = std::__shared_weak_count::lock(v4)) == 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  uint64_t v6 = v5;
  unint64_t v7 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v7)
  {
    uint64_t v17 = 0x676C6F6273636169;
    int v18 = 0;
    has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::has_property(v7, (const AMCP::Address *)&v17);
    if (!has_property) {
      goto LABEL_22;
    }
    AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v24, (int8x8_t *)v7, (unsigned int *)&v17);
    uint64_t v9 = v24;
    if (v24)
    {
      unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10))
      {
        AMCP::Core::Operation::call_function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>((uint64_t)buf, v9);
        uint64_t v16 = *(void **)&buf[8];
        long long v19 = *(_OWORD *)buf;
        uint64_t v20 = *(void *)&buf[16];
        memset(buf, 0, sizeof(buf));
        char v21 = 1;
        __p[0] = buf;
        std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_8:
        char v11 = 0;
        uint64_t v9 = v16;
        goto LABEL_15;
      }
      unint64_t v12 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v12))
      {
        AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)buf, v9);
        AMCP::Thing::convert_to<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(__p, (uint64_t)buf);
        uint64_t v16 = __p[1];
        long long v19 = *(_OWORD *)__p;
        uint64_t v20 = v23;
        __p[1] = 0;
        uint64_t v23 = 0;
        __p[0] = 0;
        char v21 = 1;
        uint64_t v26 = __p;
        std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&v26);
        if (*(void *)&v29[6]) {
          (*(void (**)(void, uint8_t *, void, void))&v29[6])(0, buf, 0, 0);
        }
        goto LABEL_8;
      }
    }
    char v11 = 1;
LABEL_15:
    has_property = (AMCP::Log::Scope_Registry *)v25;
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    if ((v11 & 1) == 0)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(a2, v19, (uint64_t)v9, (uint64_t)((uint64_t)v9 - v19) >> 4);
      *(void *)buf = &v19;
      std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      goto LABEL_19;
    }
LABEL_22:
    LOBYTE(v19) = 0;
    char v21 = 0;
    AMCP::Log::Scope_Registry::get(has_property);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v13 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      HIBYTE(v23) = 4;
      strcpy((char *)__p, "scai");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v15;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 391;
      __int16 v28 = 2080;
      *(void *)__int16 v29 = "optional_value.operator BOOL() == true";
      *(_WORD *)&v29[8] = 2080;
      *(void *)&v29[10] = __p;
      __int16 v30 = 1024;
      int v31 = 1735159650;
      __int16 v32 = 1024;
      int v33 = 0;
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (SHIBYTE(v23) < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
LABEL_19:

  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_1BAB9BFD8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::Core::Operation::call_function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>();
  unint64_t v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    char v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      unint64_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)__int16 v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 154;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::runtime_error v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    __int16 v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::vector<std::tupl"
          "e<unsigned int, unsigned int, applesauce::CF::StringRef>>, Argument_Types = <>]";
    int v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    uint64_t v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v5 = v4;
  if (!*((void *)v4 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>(),
        (unint64_t v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v8 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v10;
      *(_WORD *)__int16 v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 161;
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::runtime_error v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    __int16 v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::vector<std::tupl"
          "e<unsigned int, unsigned int, applesauce::CF::StringRef>>, Argument_Types = <>]";
    int v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    uint64_t v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = *((void *)v4 + 3);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
}

void sub_1BAB9C484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>()
{
  v0 = &unk_1E9F79000;
  {
    v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[446];
}

uint64_t AMCP::Stereo_Pan_Control::Stereo_Pan_Control(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (AMCP::Object *)AMCP::Control::Control(a1, a2, a3);
  *(void *)unint64_t v4 = &unk_1F1461950;
  uint64_t v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x7370616E);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    unint64_t v7 = *v10;
    if (*(void *)v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      *(_WORD *)char v11 = 2080;
      *(void *)&v11[2] = "Control.cpp";
      __int16 v12 = 1024;
      int v13 = 520;
      __int16 v14 = 2080;
      uint64_t v15 = "constructed_correct_class(k_class_id_stereo_pan_control)";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1BAB9C6D0(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F145F4E8;
  unint64_t v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

AMCP::Stereo_Pan_Control *AMCP::Stereo_Pan_Control::Stereo_Pan_Control(AMCP::Stereo_Pan_Control *this, const AMCP::Device *a2, int a3, int a4, int a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = AMCP::Control::Control(this, a2, 1936744814, a5, a3, a4);
  *(void *)uint64_t v6 = &unk_1F1461950;
  uint64_t v7 = AMCP::Object::constructed_correct_class(v6, (AMCP *)0x7370616E);
  if ((v7 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
    mach_port_t v9 = *v12;
    if (*(void *)v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v13);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      LODWORD(v12) = 67109890;
      HIDWORD(v12) = v11;
      *(_WORD *)int v13 = 2080;
      *(void *)&_OWORD v13[2] = "Control.cpp";
      __int16 v14 = 1024;
      int v15 = 526;
      __int16 v16 = 2080;
      long long v17 = "constructed_correct_class(k_class_id_stereo_pan_control)";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v12, 0x22u);
    }
    abort();
  }
  return this;
}

void sub_1BAB9C860(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F145F4E8;
  unint64_t v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

float AMCP::Stereo_Pan_Control::get_value(AMCP::Stereo_Pan_Control *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v2 = (std::__shared_weak_count *)*((void *)this + 3);
  float v3 = 0.5;
  if (v2)
  {
    unint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = (AMCP::Core::Core *)*((void *)this + 2);
      if (v6)
      {
        strcpy(buf, "vcpsbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        unint64_t v7 = AMCP::Core::Core::get_typed_property_value<float,std::enable_if<true,void>>(v6, (const AMCP::Address *)buf);
        if (!HIDWORD(v7))
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          mach_port_t v9 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            mach_port_t v10 = pthread_self();
            mach_port_t v11 = pthread_mach_thread_np(v10);
            char v13 = 4;
            strcpy((char *)__p, "spcv");
            *(_DWORD *)buf = 67110658;
            *(_DWORD *)&buf[4] = v11;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "Core.h";
            __int16 v15 = 1024;
            int v16 = 391;
            __int16 v17 = 2080;
            uint64_t v18 = "optional_value.operator BOOL() == true";
            __int16 v19 = 2080;
            std::runtime_error v20 = __p;
            __int16 v21 = 1024;
            int v22 = 1735159650;
            __int16 v23 = 1024;
            int v24 = 0;
            _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
            if (v13 < 0) {
              operator delete(__p[0]);
            }
          }
          abort();
        }
        float v3 = *(float *)&v7;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  return v3;
}

void sub_1BAB9CA94(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Stereo_Pan_Control::set_value(AMCP::Stereo_Pan_Control *this, float a2)
{
  float v12 = a2;
  float v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *((void *)this + 2);
      if (v7)
      {
        uint64_t v17 = 0x676C6F6273706376;
        int v18 = 0;
        if (AMCP::Core::Core::is_property_settable((int8x8_t *)v7, (const AMCP::Address *)&v17))
        {
          AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v15, (int8x8_t *)v7, (unsigned int *)&v17);
          uint64_t v8 = v15;
          if (v15)
          {
            unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
            {
              AMCP::Core::Operation::call_function<void,float const&>(v8, (uint64_t)&v12);
LABEL_8:
              if (v16) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v16);
              }
              uint64_t v7 = 1;
              goto LABEL_18;
            }
            unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v10))
            {
              memset(v13, 0, sizeof(v13));
              *(float *)char v13 = a2;
              __int16 v14 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
              AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v13);
              if (v14) {
                v14(0, (uint64_t)v13, 0, 0);
              }
              goto LABEL_8;
            }
          }
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
        }
        uint64_t v7 = 0;
      }
LABEL_18:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      return v7;
    }
  }
  return 0;
}

void sub_1BAB9CBE4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void, char *, void, void), uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a15) {
    a15(0, &a11, 0, 0);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAB9CBBCLL);
}

uint64_t AMCP::Stereo_Pan_Control::set_value_and_wait(AMCP::Stereo_Pan_Control *this, float a2)
{
  float v12 = a2;
  float v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *((void *)this + 2);
      if (v7)
      {
        uint64_t v17 = 0x676C6F6273706376;
        int v18 = 0;
        if (AMCP::Core::Core::is_property_settable((int8x8_t *)v7, (const AMCP::Address *)&v17))
        {
          AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v15, (int8x8_t *)v7, (unsigned int *)&v17);
          uint64_t v8 = v15;
          if (v15)
          {
            unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
            {
              AMCP::Core::Operation::call_function<void,float const&>(v8, (uint64_t)&v12);
LABEL_8:
              if (v16) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v16);
              }
              uint64_t v7 = 1;
              goto LABEL_18;
            }
            unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v10))
            {
              memset(v13, 0, sizeof(v13));
              *(float *)char v13 = a2;
              __int16 v14 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
              AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v13);
              if (v14) {
                v14(0, (uint64_t)v13, 0, 0);
              }
              goto LABEL_8;
            }
          }
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
        }
        uint64_t v7 = 0;
      }
LABEL_18:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      return v7;
    }
  }
  return 0;
}

void sub_1BAB9CD7C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void, char *, void, void), uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a15) {
    a15(0, &a11, 0, 0);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAB9CD54);
}

unint64_t AMCP::Stereo_Pan_Control::get_channels(AMCP::Stereo_Pan_Control *this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2 && (float v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v5)
    {
      strcpy(buf, "ccpsbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      unint64_t v6 = AMCP::Core::Core::get_typed_property_value<std::tuple<unsigned int,unsigned int>,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
      if (!v7)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        mach_port_t v11 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          float v12 = pthread_self();
          mach_port_t v13 = pthread_mach_thread_np(v12);
          char v15 = 4;
          strcpy((char *)__p, "spcc");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&buf[4] = v13;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "Core.h";
          __int16 v17 = 1024;
          int v18 = 391;
          __int16 v19 = 2080;
          std::runtime_error v20 = "optional_value.operator BOOL() == true";
          __int16 v21 = 2080;
          int v22 = __p;
          __int16 v23 = 1024;
          int v24 = 1735159650;
          __int16 v25 = 1024;
          int v26 = 0;
          _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v15 < 0) {
            operator delete(__p[0]);
          }
        }
        abort();
      }
      unsigned int v8 = v6;
      unint64_t v9 = v6 & 0xFFFFFFFF00000000;
    }
    else
    {
      unint64_t v9 = 0;
      unsigned int v8 = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    unsigned int v8 = 0;
    unint64_t v9 = 0;
  }
  return v9 & 0xFFFFFFFF00000000 | v8;
}

void sub_1BAB9CF98(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AMCP::Core::compute_system_differences(void *a1, uint64_t *a2, uint64_t *a3)
{
  v92 = 0;
  v93 = 0;
  unint64_t v94 = 0;
  uint64_t v6 = a2[2];
  if (v6)
  {
    char v7 = 0;
    unint64_t v3 = 0;
    unsigned int v8 = 0;
    unint64_t v9 = v93;
    while (1)
    {
      if ((unint64_t)v8 >= v3)
      {
        uint64_t v10 = v8 - v7;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62)
        {
          v93 = v9;
          unint64_t v94 = v3;
          v92 = v7;
          goto LABEL_140;
        }
        if ((uint64_t)(v3 - (void)v7) >> 1 > v11) {
          unint64_t v11 = (uint64_t)(v3 - (void)v7) >> 1;
        }
        if (v3 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v12);
        }
        else {
          uint64_t v13 = 0;
        }
        __int16 v14 = (unsigned int *)(v12 + 4 * v10);
        *__int16 v14 = *(_DWORD *)(v6 + 16);
        unint64_t v9 = v14 + 1;
        while (v8 != v7)
        {
          unsigned int v15 = *--v8;
          *--__int16 v14 = v15;
        }
        unint64_t v3 = v12 + 4 * v13;
        if (v7) {
          operator delete(v7);
        }
        char v7 = v14;
      }
      else
      {
        *unsigned int v8 = *(_DWORD *)(v6 + 16);
        unint64_t v9 = v8 + 1;
      }
      uint64_t v6 = *(void *)v6;
      unsigned int v8 = v9;
      if (!v6)
      {
        v93 = v9;
        unint64_t v94 = v3;
        v92 = v7;
        break;
      }
    }
  }
  v90 = 0;
  v89 = 0;
  unint64_t v91 = 0;
  uint64_t v16 = a3[2];
  if (!v16) {
    goto LABEL_43;
  }
  __int16 v17 = 0;
  unint64_t v18 = 0;
  __int16 v19 = 0;
  std::runtime_error v20 = v90;
  do
  {
    if ((unint64_t)v19 >= v18)
    {
      uint64_t v21 = (v19 - v17) >> 2;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 62)
      {
        unint64_t v91 = v18;
        v90 = v20;
        v89 = v17;
LABEL_140:
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v18 - (void)v17) >> 1 > v22) {
        unint64_t v22 = (uint64_t)(v18 - (void)v17) >> 1;
      }
      if (v18 - (unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v22;
      }
      if (v23) {
        unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v23);
      }
      else {
        uint64_t v24 = 0;
      }
      unint64_t v3 = v23 + 4 * v21;
      *(_DWORD *)unint64_t v3 = *(_DWORD *)(v16 + 16);
      std::runtime_error v20 = (unsigned int *)(v3 + 4);
      while (v19 != v17)
      {
        unsigned int v25 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *(_DWORD *)(v3 - 4) = v25;
        v3 -= 4;
      }
      unint64_t v18 = v23 + 4 * v24;
      if (v17) {
        operator delete(v17);
      }
      __int16 v17 = (char *)v3;
    }
    else
    {
      *(_DWORD *)__int16 v19 = *(_DWORD *)(v16 + 16);
      std::runtime_error v20 = (unsigned int *)(v19 + 4);
    }
    uint64_t v16 = *(void *)v16;
    __int16 v19 = (char *)v20;
  }
  while (v16);
  unint64_t v91 = v18;
  v90 = v20;
  v89 = v17;
LABEL_43:
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  AMCP::Utility::compute_differences_sorted<unsigned int>((uint64_t)&v83, &v92, (unsigned int **)&v89);
  long long v80 = 0u;
  long long v81 = 0u;
  float v82 = 1.0;
  int v26 = (unsigned int *)v83;
  v69 = v84;
  if (v83 != v84)
  {
    while (2)
    {
      unsigned int v27 = *v26;
      __int16 v28 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>::find<unsigned int>(*a2, a2[1], *v26);
      if (v28)
      {
        __int16 v29 = v28;
        __int16 v30 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>::find<unsigned int>(*a3, a3[1], v27);
        if (v30)
        {
          int v31 = v30;
          *(_OWORD *)__p = 0u;
          *(_OWORD *)v71 = 0u;
          int v72 = 1065353216;
          long long v101 = 0u;
          long long v102 = 0u;
          int v103 = 1065353216;
          long long v98 = 0u;
          long long v99 = 0u;
          int v100 = 1065353216;
          long long v95 = 0u;
          long long v96 = 0u;
          int v97 = 1065353216;
          for (uint64_t i = v29[5]; i; uint64_t i = *(void *)i)
          {
            unint64_t v3 = i + 16;
            int v33 = std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::find<AMCP::Address>(v31 + 3, (unsigned int *)(i + 16));
            if (v33)
            {
              int v34 = v33;
              if ((uint64_t *)i != v33)
              {
                unint64_t v35 = *(void *)(i + 64);
                uint64_t v36 = v33[8];
                if (v35 && v36)
                {
                  if (!((uint64_t (*)(uint64_t, uint64_t, uint64_t *, void))v35)(5, i + 32, v33 + 4, 0)) {
                    goto LABEL_55;
                  }
                }
                else if (v35 | v36)
                {
LABEL_55:
                  unint64_t v3 = (unint64_t)(v34 + 2);
                  std::runtime_error v37 = (void **)&v101;
                  goto LABEL_56;
                }
              }
              std::runtime_error v37 = __p;
            }
            else
            {
              std::runtime_error v37 = (void **)&v98;
            }
LABEL_56:
            std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__emplace_unique_key_args<AMCP::Address,std::pair<AMCP::Address const,AMCP::Thing> const&>((uint64_t)v37, (unsigned int *)v3, v3);
          }
          for (uint64_t j = v31[5]; j; uint64_t j = *(void *)j)
          {
            if (!std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::find<AMCP::Address>(v29 + 3, (unsigned int *)(j + 16)))std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__emplace_unique_key_args<AMCP::Address,std::pair<AMCP::Address const,AMCP::Thing> const&>((uint64_t)&v95, (unsigned int *)(j + 16), j + 16); {
          }
            }
          _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_13unordered_mapIN4AMCP7AddressENS4_5ThingENS5_4HashENS5_14Is_Exact_MatchENS_9allocatorINS_4pairIKS5_S6_EEEEEESE_SE_SE_EEC2B8ne180100IJLm0ELm1ELm2ELm3EEJSE_SE_SE_SE_EJEJEJRSE_SH_SH_SH_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSJ_IJDpT2_EEEDpOT3_((uint64_t)v76, (uint64_t)__p, (uint64_t)&v101, (uint64_t)&v98, (uint64_t)&v95);
          std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((void *)v96);
          uint64_t v39 = (void *)v95;
          *(void *)&long long v95 = 0;
          if (v39) {
            operator delete(v39);
          }
          std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((void *)v99);
          uint64_t v40 = (void *)v98;
          *(void *)&long long v98 = 0;
          if (v40) {
            operator delete(v40);
          }
          std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((void *)v102);
          uint64_t v41 = (void *)v101;
          *(void *)&long long v101 = 0;
          if (v41) {
            operator delete(v41);
          }
          std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((void *)v71[0]);
          int v42 = __p[0];
          __p[0] = 0;
          if (v42) {
            operator delete(v42);
          }
          _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_13unordered_mapIN4AMCP7AddressENS4_5ThingENS5_4HashENS5_14Is_Exact_MatchENS_9allocatorINS_4pairIKS5_S6_EEEEEESE_SE_SE_EEC2B8ne180100IJLm0ELm1ELm2ELm3EEJSE_SE_SE_SE_EJEJEJRSE_SH_SH_SH_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSJ_IJDpT2_EEEDpOT3_((uint64_t)__p, (uint64_t)v76, (uint64_t)v77, (uint64_t)v78, (uint64_t)v79);
          unint64_t v43 = *v26;
          unint64_t v44 = *((void *)&v80 + 1);
          if (*((void *)&v80 + 1))
          {
            uint8x8_t v45 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v80 + 8));
            v45.i16[0] = vaddlv_u8(v45);
            if (v45.u32[0] > 1uLL)
            {
              unint64_t v3 = *v26;
              if (*((void *)&v80 + 1) <= v43) {
                unint64_t v3 = v43 % *((void *)&v80 + 1);
              }
            }
            else
            {
              unint64_t v3 = (DWORD2(v80) - 1) & v43;
            }
            __int16 v46 = *(uint64_t ***)(v80 + 8 * v3);
            if (v46)
            {
              for (k = *v46; k; k = (uint64_t *)*k)
              {
                unint64_t v48 = k[1];
                if (v48 == v43)
                {
                  if (*((_DWORD *)k + 4) == v43) {
                    goto LABEL_107;
                  }
                }
                else
                {
                  if (v45.u32[0] > 1uLL)
                  {
                    if (v48 >= *((void *)&v80 + 1)) {
                      v48 %= *((void *)&v80 + 1);
                    }
                  }
                  else
                  {
                    v48 &= *((void *)&v80 + 1) - 1;
                  }
                  if (v48 != v3) {
                    break;
                  }
                }
              }
            }
          }
          v49 = operator new(0xB8uLL);
          *(void *)&long long v101 = v49;
          *((void *)&v101 + 1) = &v81;
          void *v49 = 0;
          v49[1] = v43;
          *((_DWORD *)v49 + 4) = *v26;
          std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v49 + 3), (uint64_t *)__p);
          std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v49 + 8), (uint64_t *)v73);
          std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v49 + 13), (uint64_t *)v74);
          std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v49 + 18), (uint64_t *)v75);
          LOBYTE(v102) = 1;
          float v50 = (float)(unint64_t)(*((void *)&v81 + 1) + 1);
          if (!v44 || (float)(v82 * (float)v44) < v50)
          {
            BOOL v51 = (v44 & (v44 - 1)) != 0;
            if (v44 < 3) {
              BOOL v51 = 1;
            }
            unint64_t v52 = v51 | (2 * v44);
            unint64_t v53 = vcvtps_u32_f32(v50 / v82);
            if (v52 <= v53) {
              size_t v54 = v53;
            }
            else {
              size_t v54 = v52;
            }
            std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)&v80, v54);
            unint64_t v44 = *((void *)&v80 + 1);
            if ((*((void *)&v80 + 1) & (*((void *)&v80 + 1) - 1)) != 0)
            {
              if (*((void *)&v80 + 1) <= v43) {
                unint64_t v3 = v43 % *((void *)&v80 + 1);
              }
              else {
                unint64_t v3 = v43;
              }
            }
            else
            {
              unint64_t v3 = (DWORD2(v80) - 1) & v43;
            }
          }
          uint64_t v55 = v80;
          v56 = *(void **)(v80 + 8 * v3);
          if (v56)
          {
            void *v49 = *v56;
          }
          else
          {
            void *v49 = v81;
            *(void *)&long long v81 = v49;
            *(void *)(v55 + 8 * v3) = &v81;
            if (!*v49)
            {
LABEL_106:
              *(void *)&long long v101 = 0;
              ++*((void *)&v81 + 1);
              std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v101);
LABEL_107:
              std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((void *)v75[2]);
              v58 = v75[0];
              v75[0] = 0;
              if (v58) {
                operator delete(v58);
              }
              std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((void *)v74[2]);
              v59 = v74[0];
              v74[0] = 0;
              if (v59) {
                operator delete(v59);
              }
              std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((void *)v73[2]);
              v60 = v73[0];
              v73[0] = 0;
              if (v60) {
                operator delete(v60);
              }
              std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((void *)v71[0]);
              v61 = __p[0];
              __p[0] = 0;
              if (v61) {
                operator delete(v61);
              }
              std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((void *)v79[2]);
              v62 = v79[0];
              v79[0] = 0;
              if (v62) {
                operator delete(v62);
              }
              std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((void *)v78[2]);
              v63 = v78[0];
              v78[0] = 0;
              if (v63) {
                operator delete(v63);
              }
              std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((void *)v77[2]);
              v64 = v77[0];
              v77[0] = 0;
              if (v64) {
                operator delete(v64);
              }
              std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((void *)v76[2]);
              v65 = v76[0];
              v76[0] = 0;
              if (v65) {
                operator delete(v65);
              }
              if (++v26 != v69) {
                continue;
              }
              goto LABEL_124;
            }
            unint64_t v57 = *(void *)(*v49 + 8);
            if ((v44 & (v44 - 1)) != 0)
            {
              if (v57 >= v44) {
                v57 %= v44;
              }
            }
            else
            {
              v57 &= v44 - 1;
            }
            v56 = (void *)(v80 + 8 * v57);
          }
          void *v56 = v49;
          goto LABEL_106;
        }
        int v66 = 50;
        v67 = "after_iter != in_after.end()";
      }
      else
      {
        int v66 = 47;
        v67 = "before_iter != in_before.end()";
      }
      break;
    }
    __assert_rtn("compute_system_differences", "Snapshot.cpp", v66, v67);
  }
LABEL_124:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, v87, (uint64_t)v88, (v88 - (unsigned char *)v87) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 3, v85, (uint64_t)v86, (v86 - (unsigned char *)v85) >> 2);
  std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>::unordered_map((uint64_t)(a1 + 6), (uint64_t)&v80);
  std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::~__hash_table((uint64_t)&v80);
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v83)
  {
    v84 = (unsigned int *)v83;
    operator delete(v83);
  }
  if (v89) {
    operator delete(v89);
  }
  if (v92) {
    operator delete(v92);
  }
}

void sub_1BAB9D78C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v12 = *v10;
  if (*v10)
  {
    *(void *)(a10 + 32) = v12;
    operator delete(v12);
  }
  uint64_t v13 = *(void **)a10;
  if (*(void *)a10)
  {
    *(void *)(a10 + 8) = v13;
    operator delete(v13);
  }
  __clang_call_terminate(a1);
}

void AMCP::Utility::compute_differences_sorted<unsigned int>(uint64_t a1, unsigned int **a2, unsigned int **a3)
{
  uint64_t v5 = *a3;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  uint64_t v6 = *a2;
  char v7 = a2[1];
  if (*a2 != v7)
  {
    unsigned int v8 = (void **)(a1 + 24);
    if (v5 == a3[1])
    {
LABEL_58:
      uint64_t v46 = a1 + 24;
      while (v6 != v7)
        std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:ne180100](&v46, v6++);
    }
    else
    {
      while (1)
      {
        unsigned int v10 = *v6;
        unsigned int v11 = *v5;
        if (*v6 == *v5)
        {
          uint64_t v13 = *(unsigned int **)(a1 + 8);
          unint64_t v12 = *(void *)(a1 + 16);
          if ((unint64_t)v13 >= v12)
          {
            unint64_t v18 = *(unsigned int **)a1;
            uint64_t v19 = ((uint64_t)v13 - *(void *)a1) >> 2;
            unint64_t v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 62) {
              goto LABEL_65;
            }
            uint64_t v21 = v12 - (void)v18;
            if (v21 >> 1 > v20) {
              unint64_t v20 = v21 >> 1;
            }
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v22 = v20;
            }
            if (v22)
            {
              unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v22);
              unint64_t v18 = *(unsigned int **)a1;
              uint64_t v13 = *(unsigned int **)(a1 + 8);
              unsigned int v10 = *v6;
            }
            else
            {
              uint64_t v23 = 0;
            }
            uint64_t v39 = (unsigned int *)(v22 + 4 * v19);
            *uint64_t v39 = v10;
            __int16 v14 = v39 + 1;
            while (v13 != v18)
            {
              unsigned int v40 = *--v13;
              *--uint64_t v39 = v40;
            }
            *(void *)a1 = v39;
            *(void *)(a1 + 8) = v14;
            *(void *)(a1 + 16) = v22 + 4 * v23;
            if (v18) {
              operator delete(v18);
            }
          }
          else
          {
            *uint64_t v13 = v10;
            __int16 v14 = v13 + 1;
          }
          *(void *)(a1 + 8) = v14;
          ++v6;
          ++v5;
        }
        else if (v10 >= v11)
        {
          unsigned int v25 = *(char **)(a1 + 56);
          unint64_t v24 = *(void *)(a1 + 64);
          if ((unint64_t)v25 >= v24)
          {
            int v33 = *(char **)(a1 + 48);
            uint64_t v34 = (v25 - v33) >> 2;
            unint64_t v35 = v34 + 1;
            if ((unint64_t)(v34 + 1) >> 62) {
LABEL_65:
            }
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            uint64_t v36 = v24 - (void)v33;
            if (v36 >> 1 > v35) {
              unint64_t v35 = v36 >> 1;
            }
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v37 = v35;
            }
            if (v37)
            {
              unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v37);
              int v33 = *(char **)(a1 + 48);
              unsigned int v25 = *(char **)(a1 + 56);
              unsigned int v11 = *v5;
            }
            else
            {
              uint64_t v38 = 0;
            }
            unint64_t v43 = (unsigned int *)(v37 + 4 * v34);
            *unint64_t v43 = v11;
            int v26 = v43 + 1;
            while (v25 != v33)
            {
              unsigned int v44 = *((_DWORD *)v25 - 1);
              v25 -= 4;
              *--unint64_t v43 = v44;
            }
            *(void *)(a1 + 48) = v43;
            *(void *)(a1 + 56) = v26;
            *(void *)(a1 + 64) = v37 + 4 * v38;
            if (v33) {
              operator delete(v33);
            }
          }
          else
          {
            *(_DWORD *)unsigned int v25 = v11;
            int v26 = v25 + 4;
          }
          ++v5;
          *(void *)(a1 + 56) = v26;
        }
        else
        {
          uint64_t v16 = *(char **)(a1 + 32);
          unint64_t v15 = *(void *)(a1 + 40);
          if ((unint64_t)v16 >= v15)
          {
            unsigned int v27 = (char *)*v8;
            uint64_t v28 = (v16 - (unsigned char *)*v8) >> 2;
            unint64_t v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 62) {
              goto LABEL_65;
            }
            uint64_t v30 = v15 - (void)v27;
            if (v30 >> 1 > v29) {
              unint64_t v29 = v30 >> 1;
            }
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v29;
            }
            if (v31)
            {
              unint64_t v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v31);
              unsigned int v27 = *(char **)(a1 + 24);
              uint64_t v16 = *(char **)(a1 + 32);
              unsigned int v10 = *v6;
            }
            else
            {
              uint64_t v32 = 0;
            }
            uint64_t v41 = (unsigned int *)(v31 + 4 * v28);
            *uint64_t v41 = v10;
            __int16 v17 = v41 + 1;
            while (v16 != v27)
            {
              unsigned int v42 = *((_DWORD *)v16 - 1);
              v16 -= 4;
              *--uint64_t v41 = v42;
            }
            *(void *)(a1 + 24) = v41;
            *(void *)(a1 + 32) = v17;
            *(void *)(a1 + 40) = v31 + 4 * v32;
            if (v27) {
              operator delete(v27);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v16 = v10;
            __int16 v17 = v16 + 4;
          }
          ++v6;
          *(void *)(a1 + 32) = v17;
        }
        char v7 = a2[1];
        if (v6 == v7) {
          break;
        }
        if (v5 == a3[1]) {
          goto LABEL_58;
        }
      }
    }
  }
  uint8x8_t v45 = a3[1];
  if (v5 != v45)
  {
    uint64_t v46 = a1 + 48;
    do
      std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:ne180100](&v46, v5++);
    while (v5 != v45);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>::find<unsigned int>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  uint64_t v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (__n128 result = *v5; result; __n128 result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_13unordered_mapIN4AMCP7AddressENS4_5ThingENS5_4HashENS5_14Is_Exact_MatchENS_9allocatorINS_4pairIKS5_S6_EEEEEESE_SE_SE_EEC2B8ne180100IJLm0ELm1ELm2ELm3EEJSE_SE_SE_SE_EJEJEJRSE_SH_SH_SH_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSJ_IJDpT2_EEEDpOT3_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::unordered_map(a1, a2);
  std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::unordered_map(v9 + 40, a3);
  std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::unordered_map(a1 + 80, a4);
  std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::unordered_map(a1 + 120, a5);
  return a1;
}

void sub_1BAB9DC48(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,0>(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(a1 + 128);
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(a1 + 88);
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(a1 + 48);

  return std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(v2);
}

void std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node(void *__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (void (*)(void, void *, void, void))v1[8];
      if (v3) {
        v3(0, v1 + 4, 0, 0);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned int **)(a2 + 16); i; uint64_t i = *(unsigned int **)i)
    std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__emplace_unique_key_args<AMCP::Address,std::pair<AMCP::Address const,AMCP::Thing> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_1BAB9DE78(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__emplace_unique_key_args<AMCP::Address,std::pair<AMCP::Address const,AMCP::Thing> const&>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unsigned int v7 = a2[1];
  unsigned int v8 = a2[2];
  unint64_t v9 = v7 & 0xFF000000 | (unint64_t)(v6 << 32) | *(void *)&v8 & 0xFFFFFFLL;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      uint64_t v3 = v7 & 0xFF000000 | (unint64_t)(v6 << 32) | *(void *)&v8 & 0xFFFFFFLL;
      if (v9 >= v10) {
        uint64_t v3 = v9 % v10;
      }
    }
    else
    {
      uint64_t v3 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == __PAIR64__(v7, v6) && *((_DWORD *)i + 6) == v8) {
            return;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v15 = operator new(0x48uLL);
  *unint64_t v15 = 0;
  v15[1] = v9;
  v15[2] = *(void *)a3;
  *((_DWORD *)v15 + 6) = *(_DWORD *)(a3 + 8);
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  v15[8] = 0;
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, void *, void))(a3 + 48);
  if (v16) {
    v16(1, a3 + 16, v15 + 4, 0);
  }
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        uint64_t v3 = v9 % v10;
      }
      else {
        uint64_t v3 = v9;
      }
    }
    else
    {
      uint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *unint64_t v15 = *v24;
LABEL_41:
    *unint64_t v24 = v15;
    goto LABEL_42;
  }
  *unint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    unint64_t v25 = *(void *)(*v15 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
}

void sub_1BAB9E0E4(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Address,AMCP::Thing>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Address,AMCP::Thing>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = (void (*)(void, void *, void, void))__p[8];
    if (v3) {
      v3(0, __p + 4, 0, 0);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t *std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::find<AMCP::Address>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  unsigned int v4 = a2[1];
  unsigned int v5 = a2[2];
  unint64_t v6 = v4 & 0xFF000000 | (unint64_t)(v3 << 32) | *(void *)&v5 & 0xFFFFFFLL;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    uint64_t v8 = v4 & 0xFF000000 | (unint64_t)(v3 << 32) | *(void *)&v5 & 0xFFFFFFLL;
    if (v6 >= *(void *)&v2) {
      uint64_t v8 = v6 % *(void *)&v2;
    }
  }
  else
  {
    uint64_t v8 = v6 & (*(void *)&v2 - 1);
  }
  unint64_t v9 = *(uint64_t ***)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  for (__n128 result = *v9; result; __n128 result = (uint64_t *)*result)
  {
    unint64_t v11 = result[1];
    if (v6 == v11)
    {
      if (result[2] == __PAIR64__(v4, v3) && *((_DWORD *)result + 6) == v5) {
        return result;
      }
    }
    else
    {
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= *(void *)&v2) {
          v11 %= *(void *)&v2;
        }
      }
      else
      {
        v11 &= *(void *)&v2 - 1;
      }
      if (v11 != v8) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
    std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>> const&>(a1, *((_DWORD *)i + 4), (_DWORD *)i + 4);
  return a1;
}

void sub_1BAB9E2B4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>> const&>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v12 = (void *)(a1 + 16);
  uint64_t v13 = operator new(0xB8uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  char v24 = 0;
  *uint64_t v13 = 0;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = *a3;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>::__tuple_impl((uint64_t)(v13 + 3), (uint64_t)(a3 + 2));
  char v24 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t v13 = *v21;
LABEL_38:
    *unint64_t v21 = v13;
    goto LABEL_39;
  }
  *uint64_t v13 = *v12;
  *unint64_t v12 = v13;
  *(void *)(v20 + 8 * v3) = v12;
  if (*v13)
  {
    unint64_t v22 = *(void *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v22 >= v7) {
        v22 %= v7;
      }
    }
    else
    {
      v22 &= v7 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  v23[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v23);
}

void sub_1BAB9E500(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>::__tuple_impl(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::unordered_map(a1, a2);
  std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::unordered_map(v4 + 40, a2 + 40);
  std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::unordered_map(a1 + 80, a2 + 80);
  std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::unordered_map(a1 + 120, a2 + 120);
  return a1;
}

void sub_1BAB9E578(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v6 = *(_DWORD **)(*a1 + 8);
  unint64_t v5 = *(void *)(*a1 + 16);
  if ((unint64_t)v6 >= v5)
  {
    uint8x8_t v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v6 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    BOOL v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v13);
      uint8x8_t v8 = *(_DWORD **)v4;
      unint64_t v6 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      uint64_t v14 = 0;
    }
    float v15 = (_DWORD *)(v13 + 4 * v9);
    unint64_t v16 = v13 + 4 * v14;
    *float v15 = *a2;
    unint64_t v7 = v15 + 1;
    while (v6 != v8)
    {
      int v17 = *--v6;
      *--float v15 = v17;
    }
    *(void *)uint64_t v4 = v15;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *unint64_t v6 = *a2;
    unint64_t v7 = v6 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

void *AMCP::Core::make_external_diff(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v34 = 0;
  *(void *)unint64_t v35 = 0;
  *(void *)&v35[8] = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  *(void *)(a1 + 48) = v34;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)v35;
  *(void *)unint64_t v35 = 0;
  *(void *)&v35[8] = 0;
  uint64_t v34 = 0;
  __n128 result = boost::container::vector<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>,void>::~vector(&v34);
  unint64_t v5 = *(uint64_t **)(a2 + 64);
  if (v5)
  {
    unint64_t v22 = "emplace";
    uint64_t v23 = "this->priv_in_range_or_end(position)";
    do
    {
      if (v5[11] || v5[16] || v5[21])
      {
        memset(v32, 0, sizeof(v32));
        for (uint64_t i = (unsigned int *)v5[10]; i; uint64_t i = *(unsigned int **)i)
          boost::container::dtl::flat_tree<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::dtl::select1st<AMCP::Address>,AMCP::Address::Is_Exact_Before,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::insert_or_assign<AMCP::Address const&,AMCP::Thing const&>((uint64_t)&v34, (uint64_t)v32, 0, i + 4, (uint64_t)(i + 8));
        memset(v31, 0, sizeof(v31));
        for (uint64_t j = (unsigned int *)v5[15]; j; uint64_t j = *(unsigned int **)j)
          boost::container::dtl::flat_tree<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::dtl::select1st<AMCP::Address>,AMCP::Address::Is_Exact_Before,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::insert_or_assign<AMCP::Address const&,AMCP::Thing const&>((uint64_t)&v34, (uint64_t)v31, 0, j + 4, (uint64_t)(j + 8));
        memset(v30, 0, sizeof(v30));
        for (k = (unsigned int *)v5[20]; k; k = *(unsigned int **)k)
          boost::container::dtl::flat_tree<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::dtl::select1st<AMCP::Address>,AMCP::Address::Is_Exact_Before,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::insert_or_assign<AMCP::Address const&,AMCP::Thing const&>((uint64_t)&v34, (uint64_t)v30, 0, k + 4, (uint64_t)(k + 8));
        boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::vector(&v24, (const char *)v32);
        boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::vector(&v26, (const char *)v31);
        boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::vector(&v28, (const char *)v30);
        int v33 = 0;
        unint64_t v10 = *(unsigned int **)(a1 + 48);
        unint64_t v9 = *(void *)(a1 + 56);
        if (!v10 && v9) {
          __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
        }
        uint64_t v11 = (unsigned int *)(v5 + 2);
        BOOL v12 = &v10[20 * v9];
        uint64_t v34 = v12;
        if (boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>>::priv_insert_unique_prepare(v10, &v34, *((_DWORD *)v5 + 4), (unsigned int **)&v33))
        {
          unint64_t v13 = v33;
          int v14 = 1862;
          if (v10 > (unsigned int *)v33 || v33 > (char *)v12) {
            goto LABEL_35;
          }
          unint64_t v15 = *(void *)(a1 + 64);
          if (v15 < v9)
          {
            int v14 = 2821;
            unint64_t v22 = "priv_insert_forward_range";
            uint64_t v23 = "this->m_holder.capacity() >= this->m_holder.m_size";
LABEL_35:
            __assert_rtn(v22, "vector.hpp", v14, v23);
          }
          if (v15 == v9)
          {
            boost::container::vector<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>,boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>*,unsigned int const&,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>(&v34, (char *)(a1 + 48), v33, (uint64_t)&v24, (_DWORD *)v5 + 4);
          }
          else if (v12 == (unsigned int *)v33)
          {
            *BOOL v12 = *v11;
            unint64_t v21 = &v10[20 * v9];
            *((void *)v21 + 1) = v24;
            *((_OWORD *)v21 + 1) = v25;
            long long v25 = 0uLL;
            char v24 = 0;
            *((void *)v21 + 4) = v26;
            *(_OWORD *)(v21 + 10) = v27;
            long long v27 = 0uLL;
            uint64_t v26 = 0;
            *((void *)v21 + 7) = v28;
            *((_OWORD *)v21 + 4) = v29;
            uint64_t v28 = 0;
            long long v29 = 0uLL;
            *(void *)(a1 + 56) = v9 + 1;
          }
          else
          {
            unint64_t v16 = v12 - 20;
            *BOOL v12 = *(v12 - 20);
            int v17 = &v10[20 * v9];
            *((void *)v17 + 1) = *((void *)v12 - 9);
            *((_OWORD *)v17 + 1) = *((_OWORD *)v12 - 4);
            *((void *)v12 - 9) = 0;
            *((void *)v12 - 8) = 0;
            *((void *)v17 + 4) = *((void *)v12 - 6);
            *(_OWORD *)(v17 + 10) = *(_OWORD *)(v12 - 10);
            *((void *)v12 - 7) = 0;
            *((void *)v12 - 6) = 0;
            *((void *)v12 - 5) = 0;
            *((void *)v12 - 4) = 0;
            *((void *)v17 + 7) = *((void *)v12 - 3);
            *((_OWORD *)v17 + 4) = *((_OWORD *)v12 - 1);
            *((void *)v12 - 2) = 0;
            *((void *)v12 - 1) = 0;
            *((void *)v12 - 3) = 0;
            *(void *)(a1 + 56) = v9 + 1;
            if (v12 - 20 != (unsigned int *)v13)
            {
              unint64_t v18 = (char *)(v12 - 20);
              do
              {
                unsigned int v19 = *((_DWORD *)v18 - 20);
                v18 -= 80;
                *unint64_t v16 = v19;
                std::__memberwise_forward_assign[abi:ne180100]<std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,0ul,1ul,2ul>((char **)v16 + 1, (char **)v16 - 9);
                unint64_t v16 = (unsigned int *)v18;
              }
              while (v18 != v13);
            }
            LODWORD(v34) = *v11;
            uint64_t v20 = v24;
            *(_OWORD *)&v35[8] = v25;
            char v24 = 0;
            long long v25 = 0uLL;
            *(void *)unint64_t v35 = v20;
            uint64_t v36 = v26;
            long long v37 = v27;
            long long v27 = 0uLL;
            uint64_t v26 = 0;
            uint64_t v38 = v28;
            long long v39 = v29;
            long long v29 = 0uLL;
            uint64_t v28 = 0;
            *(_DWORD *)unint64_t v13 = v34;
            std::__memberwise_forward_assign[abi:ne180100]<std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,0ul,1ul,2ul>((char **)v13 + 1, (char **)v35);
            boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(&v38);
            boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(&v36);
            boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(v35);
          }
        }
        else
        {
          if (v9 < 0xCCCCCCCCCCCCCCCDLL * ((v33 - (char *)v10) >> 4)) {
            __assert_rtn("nth", "vector.hpp", 1688, "this->m_holder.m_size >= n");
          }
          std::__memberwise_forward_assign[abi:ne180100]<std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,0ul,1ul,2ul>((char **)&v10[4 * ((v33 - (char *)v10) >> 4) + 2], &v24);
        }
        boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(&v28);
        boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(&v26);
        boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(&v24);
        boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(v30);
        boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(v31);
        __n128 result = boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(v32);
      }
      unint64_t v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return result;
}

void sub_1BAB9EB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
  {
    unint64_t v18 = *(void **)v16;
    if (*(void *)v16)
    {
      *(void *)(v16 + 8) = v18;
      operator delete(v18);
    }
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *boost::container::vector<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = (void *)(*a1 + 32);
    do
    {
      --v2;
      boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(v3 + 3);
      boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(v3);
      boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(v3 - 3);
      v3 += 10;
    }
    while (v2);
  }
  if (a1[2]) {
    operator delete((void *)*a1);
  }
  return a1;
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::dtl::select1st<AMCP::Address>,AMCP::Address::Is_Exact_Before,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::insert_or_assign<AMCP::Address const&,AMCP::Thing const&>(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, uint64_t a5)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  BOOL v51 = 0;
  if (!a3)
  {
    unint64_t v9 = *(unsigned int **)a2;
    uint64_t v28 = *(void *)(a2 + 8);
    if (*(void *)a2) {
      BOOL v29 = 1;
    }
    else {
      BOOL v29 = v28 == 0;
    }
    if (!v29) {
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    }
    unint64_t v18 = &v9[14 * v28];
LABEL_36:
    unint64_t v53 = v18;
    uint64_t v30 = &v53;
    goto LABEL_37;
  }
  unint64_t v9 = *(unsigned int **)a2;
  uint64_t v10 = *(void *)(a2 + 8);
  if (*(void *)a2) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v10 == 0;
  }
  if (!v11) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  BOOL v12 = &v9[14 * v10];
  if (v12 == a3) {
    goto LABEL_15;
  }
  unsigned int v13 = *a4;
  unsigned int v14 = a4[1];
  unsigned int v16 = *a3;
  unsigned int v15 = a3[1];
  BOOL v17 = *a4 == *a3;
  if (v14 >= v15) {
    BOOL v17 = 0;
  }
  if (v13 < v16 || v17 || v13 == v16 && v14 == v15 && a4[2] < a3[2])
  {
LABEL_15:
    BOOL v51 = a3;
    if (v9 == a3) {
      goto LABEL_29;
    }
    unsigned int v19 = *(a3 - 14);
    unsigned int v20 = *(a3 - 13);
    unint64_t v18 = a3 - 14;
    unsigned int v21 = *a4;
    unsigned int v22 = a4[1];
    BOOL v23 = v19 == *a4;
    if (v20 >= v22) {
      BOOL v23 = 0;
    }
    if (v19 < v21
      || v23
      || ((unsigned int v24 = *(a3 - 12), v25 = a4[2], v19 == v21) ? (v26 = v20 == v22) : (v26 = 0),
          !v26 ? (char v27 = 0) : (char v27 = 1),
          v26 && v24 < v25))
    {
LABEL_29:
      *(unsigned char *)(a1 + 8) = 1;
      goto LABEL_38;
    }
    BOOL v48 = v19 == v21 && v22 < v20;
    if (v25 < v24) {
      char v49 = v27;
    }
    else {
      char v49 = 0;
    }
    if (v21 >= v19 && !v48 && (v49 & 1) == 0)
    {
      BOOL v51 = a3 - 14;
      *(unsigned char *)(a1 + 8) = 0;
      goto LABEL_70;
    }
    goto LABEL_36;
  }
  unint64_t v52 = v12;
  uint64_t v30 = &v52;
  unint64_t v9 = a3;
LABEL_37:
  BOOL inserted = boost::container::dtl::flat_tree<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::dtl::select1st<AMCP::Address>,AMCP::Address::Is_Exact_Before,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::priv_insert_unique_prepare(v9, v30, a4, &v51);
  *(unsigned char *)(a1 + 8) = inserted;
  if (inserted)
  {
LABEL_38:
    uint64_t v32 = v51;
    int v33 = *(unsigned int **)a2;
    if (*(void *)a2 > (unint64_t)v51) {
      goto LABEL_74;
    }
    unint64_t v34 = *(void *)(a2 + 8);
    if (!v33 && v34) {
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    }
    unint64_t v35 = &v33[14 * v34];
    if (v51 > v35) {
LABEL_74:
    }
      __assert_rtn("emplace", "vector.hpp", 1862, "this->priv_in_range_or_end(position)");
    unint64_t v36 = *(void *)(a2 + 16);
    if (v36 < v34) {
      __assert_rtn("priv_insert_forward_range", "vector.hpp", 2821, "this->m_holder.capacity() >= this->m_holder.m_size");
    }
    if (v36 == v34)
    {
      boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,boost::container::dtl::pair<AMCP::Address,AMCP::Thing>*,AMCP::Address const&,AMCP::Thing const&>>(&v53, (char *)a2, (uint64_t)v51, a5, (uint64_t)a4);
      uint64_t v32 = v53;
    }
    else if (v35 == v51)
    {
      *(void *)BOOL v51 = *(void *)a4;
      v32[2] = a4[2];
      uint8x8_t v45 = &v33[14 * v34];
      *((_OWORD *)v45 + 1) = 0u;
      v45 += 4;
      *((void *)v45 + 4) = 0;
      *((_OWORD *)v45 + 1) = 0u;
      uint64_t v46 = *(void (**)(uint64_t, uint64_t))(a5 + 32);
      if (v46) {
        v46(1, a5);
      }
      ++*(void *)(a2 + 8);
    }
    else
    {
      long long v37 = v35 - 14;
      boost::container::dtl::pair<AMCP::Address,AMCP::Thing>::pair((uint64_t)v35, (uint64_t)(v35 - 14));
      ++*(void *)(a2 + 8);
      if (v37 != v32)
      {
        long long v39 = v37;
        do
        {
          uint64_t v40 = *((void *)v39 - 7);
          v39 -= 14;
          *(void *)long long v37 = v40;
          v37[2] = *(v37 - 12);
          AMCP::swap((AMCP::Thing *)(v37 - 10), (AMCP::Thing *)(v37 + 4), v38);
          long long v37 = v39;
        }
        while (v39 != v32);
      }
      unsigned int v41 = *a4;
      unsigned int v42 = a4[1];
      LODWORD(v53) = *a4;
      HIDWORD(v53) = v42;
      unsigned int v43 = a4[2];
      unsigned int v54 = v43;
      memset(v55, 0, sizeof(v55));
      v56 = 0;
      unsigned int v44 = *(void (**)(uint64_t, uint64_t, _OWORD *, void))(a5 + 32);
      if (v44)
      {
        v44(1, a5, v55, 0);
        unsigned int v41 = v53;
        unsigned int v42 = HIDWORD(v53);
        unsigned int v43 = v54;
      }
      *uint64_t v32 = v41;
      v32[1] = v42;
      v32[2] = v43;
      AMCP::swap((AMCP::Thing *)v55, (AMCP::Thing *)(v32 + 4), v38);
      if (v56) {
        v56(0, v55, 0, 0);
      }
    }
    *(void *)a1 = v32;
    return;
  }
LABEL_70:
  if (*(void *)(a2 + 8) < (unint64_t)(0x6DB6DB6DB6DB6DB7 * (((uint64_t)v51 - *(void *)a2) >> 3))) {
    __assert_rtn("nth", "vector.hpp", 1688, "this->m_holder.m_size >= n");
  }
  uint64_t v50 = *(void *)a2 + 8 * (((uint64_t)v51 - *(void *)a2) >> 3);
  *(void *)a1 = v50;

  AMCP::Thing::operator=((AMCP::Thing *)(v50 + 16), a5, (AMCP::Thing *)a3);
}

void sub_1BAB9F0C0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = (void (**)(void, uint64_t, void, void))(*a1 + 48);
    do
    {
      if (*v3) {
        (*v3)(0, (uint64_t)(v3 - 4), 0, 0);
      }
      v3 += 7;
      --v2;
    }
    while (v2);
  }
  if (a1[2]) {
    operator delete((void *)*a1);
  }
  return a1;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>>::priv_insert_unique_prepare(unsigned int *a1, unsigned int **a2, unsigned int a3, unsigned int **a4)
{
  if (*a2 != a1)
  {
    unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * (((char *)*a2 - (char *)a1) >> 4);
    do
    {
      if (v4 != 1 && !a1) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!a1) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v5 = v4 >> 1;
      unint64_t v6 = &a1[20 * (v4 >> 1)];
      unsigned int v8 = *v6;
      unint64_t v7 = v6 + 20;
      v4 += ~(v4 >> 1);
      if (v8 >= a3) {
        unint64_t v4 = v5;
      }
      else {
        a1 = v7;
      }
    }
    while (v4);
  }
  *a4 = a1;
  if (a1 == *a2) {
    return 1;
  }
  if (!a1) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  return *a1 > a3;
}

char **std::__memberwise_forward_assign[abi:ne180100]<std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,0ul,1ul,2ul>(char **a1, char **a2)
{
  unint64_t v4 = boost::container::dtl::flat_tree<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::dtl::select1st<AMCP::Address>,AMCP::Address::Is_Exact_Before,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::Data::operator=(a1, a2);
  boost::container::dtl::flat_tree<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::dtl::select1st<AMCP::Address>,AMCP::Address::Is_Exact_Before,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::Data::operator=(v4 + 3, a2 + 3);

  return boost::container::dtl::flat_tree<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::dtl::select1st<AMCP::Address>,AMCP::Address::Is_Exact_Before,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::Data::operator=(a1 + 6, a2 + 6);
}

void boost::container::vector<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>,boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>*,unsigned int const&,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>(void *a1, char *a2, char *a3, uint64_t a4, _DWORD *a5)
{
  unint64_t v5 = *((void *)a2 + 2);
  if (v5 != *((void *)a2 + 1)) {
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  }
  if (v5 == 0x199999999999999) {
    goto LABEL_28;
  }
  if (v5 >> 61 > 4) {
    uint64_t v6 = -1;
  }
  else {
    uint64_t v6 = 8 * v5;
  }
  if (v5 >> 61) {
    unint64_t v7 = v6;
  }
  else {
    unint64_t v7 = 8 * v5 / 5;
  }
  if (v7 >= 0x199999999999999) {
    unint64_t v7 = 0x199999999999999;
  }
  unint64_t v8 = v5 + 1 > v7 ? v5 + 1 : v7;
  if (v8 > 0x199999999999999) {
LABEL_28:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  unsigned int v14 = *(char **)a2;
  unsigned int v15 = (char *)operator new(80 * v8);
  unsigned int v16 = v15;
  BOOL v17 = *(char **)a2;
  uint64_t v18 = *(void *)a2 + 80 * *((void *)a2 + 1);
  unsigned int v19 = v15;
  if (*(char **)a2 != a3)
  {
    unsigned int v20 = *(char **)a2;
    unsigned int v19 = v15;
    do
    {
      *(_DWORD *)unsigned int v19 = *(_DWORD *)v20;
      *((void *)v19 + 1) = *((void *)v20 + 1);
      *((_OWORD *)v19 + 1) = *((_OWORD *)v20 + 1);
      *((void *)v20 + 2) = 0;
      *((void *)v20 + 3) = 0;
      *((void *)v20 + 1) = 0;
      *((void *)v19 + 4) = *((void *)v20 + 4);
      *(_OWORD *)(v19 + 40) = *(_OWORD *)(v20 + 40);
      *((void *)v20 + 5) = 0;
      *((void *)v20 + 6) = 0;
      *((void *)v20 + 4) = 0;
      *((void *)v19 + 7) = *((void *)v20 + 7);
      *((_OWORD *)v19 + 4) = *((_OWORD *)v20 + 4);
      *((void *)v20 + 7) = 0;
      *((void *)v20 + 8) = 0;
      *((void *)v20 + 9) = 0;
      v19 += 80;
      v20 += 80;
    }
    while (v20 != a3);
  }
  *(_DWORD *)unsigned int v19 = *a5;
  *((void *)v19 + 1) = *(void *)a4;
  *((_OWORD *)v19 + 1) = *(_OWORD *)(a4 + 8);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  *((void *)v19 + 4) = *(void *)(a4 + 24);
  *(_OWORD *)(v19 + 40) = *(_OWORD *)(a4 + 32);
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = 0;
  *(void *)(a4 + 24) = 0;
  *((void *)v19 + 7) = *(void *)(a4 + 48);
  *((_OWORD *)v19 + 4) = *(_OWORD *)(a4 + 56);
  *(void *)(a4 + 48) = 0;
  *(void *)(a4 + 56) = 0;
  *(void *)(a4 + 64) = 0;
  if ((char *)v18 != a3)
  {
    unsigned int v21 = v19 + 144;
    unsigned int v22 = a3;
    do
    {
      *((_DWORD *)v21 - 16) = *(_DWORD *)v22;
      *((void *)v21 - 7) = *((void *)v22 + 1);
      *(v21 - 3) = *((_OWORD *)v22 + 1);
      *((void *)v22 + 2) = 0;
      *((void *)v22 + 3) = 0;
      *((void *)v22 + 1) = 0;
      *((void *)v21 - 4) = *((void *)v22 + 4);
      *(_OWORD *)((char *)v21 - 24) = *(_OWORD *)(v22 + 40);
      *((void *)v22 + 5) = 0;
      *((void *)v22 + 6) = 0;
      *((void *)v22 + 4) = 0;
      *((void *)v21 - 1) = *((void *)v22 + 7);
      *unsigned int v21 = *((_OWORD *)v22 + 4);
      v21 += 5;
      *((void *)v22 + 7) = 0;
      *((void *)v22 + 8) = 0;
      *((void *)v22 + 9) = 0;
      v22 += 80;
    }
    while (v22 != (char *)v18);
  }
  uint64_t v23 = *((void *)a2 + 1);
  if (v17)
  {
    if (v23)
    {
      unsigned int v24 = v17 + 32;
      do
      {
        --v23;
        boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(v24 + 3);
        boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(v24);
        boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::~vector(v24 - 3);
        v24 += 10;
      }
      while (v23);
    }
    operator delete(*(void **)a2);
    uint64_t v23 = *((void *)a2 + 1);
  }
  *(void *)a2 = v16;
  *((void *)a2 + 1) = v23 + 1;
  *((void *)a2 + 2) = v8;
  *a1 = &v16[a3 - v14];
}

void boost::container::throw_length_error(boost::container *this, const char *a2)
{
  exception = __cxa_allocate_exception(0x10uLL);
  void *exception = &unk_1F1480870;
  exception[1] = this;
}

const char *boost::container::exception::what(boost::container::exception *this)
{
  if (*((void *)this + 1)) {
    return (const char *)*((void *)this + 1);
  }
  else {
    return "unknown boost::container exception";
  }
}

void boost::container::out_of_range::~out_of_range(std::exception *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x1C1859840);
}

char **boost::container::dtl::flat_tree<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::dtl::select1st<AMCP::Address>,AMCP::Address::Is_Exact_Before,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::Data::operator=(char **a1, char **a2)
{
  if (a2 != a1)
  {
    unint64_t v4 = *a1;
    unint64_t v5 = a1[1];
    if (v5)
    {
      uint64_t v6 = (void (**)(void, uint64_t, void, void))(v4 + 48);
      do
      {
        if (*v6) {
          (*v6)(0, (uint64_t)(v6 - 4), 0, 0);
        }
        v6 += 7;
        --v5;
      }
      while (v5);
      unint64_t v4 = *a1;
    }
    a1[1] = 0;
    if (v4) {
      operator delete(v4);
    }
    *a1 = *a2;
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return a1;
}

void *boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::vector(void *a1, const char *a2)
{
  unint64_t v4 = *((void *)a2 + 1);
  *a1 = 0;
  a1[1] = v4;
  a1[2] = 0;
  if (v4)
  {
    if (v4 >= 0x24924924924924ALL) {
      boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
    }
    unint64_t v5 = (char *)operator new(56 * v4);
    *a1 = v5;
    a1[2] = v4;
  }
  else
  {
    unint64_t v5 = 0;
  }
  uint64_t v6 = *((void *)a2 + 1);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)a2;
    do
    {
      unint64_t v9 = &v5[v7];
      *(void *)unint64_t v9 = *(void *)(v8 + v7);
      *((_DWORD *)v9 + 2) = *(_DWORD *)(v8 + v7 + 8);
      *(_OWORD *)&v5[v7 + 16] = 0u;
      *((_OWORD *)v9 + 2) = 0u;
      *((void *)v9 + 6) = 0;
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, char *, void))(v8 + v7 + 48);
      if (v10) {
        v10(1, v8 + v7 + 16, &v5[v7 + 16], 0);
      }
      v7 += 56;
      --v6;
    }
    while (v6);
  }
  return a1;
}

void sub_1BAB9F7B0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  if (*(void *)(v1 + 16)) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::dtl::select1st<AMCP::Address>,AMCP::Address::Is_Exact_Before,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::priv_insert_unique_prepare(unsigned int *a1, unsigned int **a2, unsigned int *a3, unsigned int **a4)
{
  if (*a2 != a1)
  {
    unint64_t v4 = 0x6DB6DB6DB6DB6DB7 * (((char *)*a2 - (char *)a1) >> 3);
    unsigned int v5 = *a3;
    unsigned int v6 = a3[1];
    do
    {
      if (v4 != 1 && !a1) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!a1) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v7 = v4 >> 1;
      uint64_t v8 = &a1[14 * (v4 >> 1)];
      unsigned int v9 = *v8;
      unsigned int v10 = v8[1];
      BOOL v11 = *v8 == v5;
      if (v10 >= v6) {
        BOOL v11 = 0;
      }
      if (v9 < v5 || v11 || (v9 == v5 ? (BOOL v12 = v10 == v6) : (BOOL v12 = 0), v12 ? (v13 = v8[2] >= a3[2]) : (v13 = 1), !v13))
      {
        a1 = v8 + 14;
        unint64_t v7 = v4 + ~v7;
      }
      unint64_t v4 = v7;
    }
    while (v7);
  }
  *a4 = a1;
  if (a1 == *a2) {
    return 1;
  }
  if (!a1) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  unsigned int v14 = *a3;
  unsigned int v15 = a3[1];
  unsigned int v17 = *a1;
  unsigned int v16 = a1[1];
  BOOL v18 = v15 < v16 && *a3 == *a1;
  uint64_t v19 = 1;
  if (v14 >= v17 && !v18) {
    return v14 == v17 && v15 == v16 && a3[2] < a1[2];
  }
  return v19;
}

AMCP::Thing *AMCP::Thing::operator=(AMCP::Thing *a1, uint64_t a2, AMCP::Thing *a3)
{
  unint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  unint64_t v4 = *(void (**)(uint64_t))(a2 + 32);
  if (v4) {
    v4(1);
  }
  AMCP::swap((AMCP::Thing *)v6, a1, a3);
  if (v7) {
    v7(0, v6, 0, 0);
  }
  return a1;
}

void boost::container::vector<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>,boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>,boost::container::dtl::pair<AMCP::Address,AMCP::Thing>*,AMCP::Address const&,AMCP::Thing const&>>(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = *((void *)a2 + 2);
  if (v5 != *((void *)a2 + 1)) {
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  }
  if (v5 == 0x249249249249249) {
    goto LABEL_32;
  }
  if (v5 >> 61 > 4) {
    uint64_t v6 = -1;
  }
  else {
    uint64_t v6 = 8 * v5;
  }
  if (v5 >> 61) {
    unint64_t v7 = v6;
  }
  else {
    unint64_t v7 = 8 * v5 / 5;
  }
  if (v7 >= 0x249249249249249) {
    unint64_t v7 = 0x249249249249249;
  }
  unint64_t v8 = v5 + 1 > v7 ? v5 + 1 : v7;
  if (v8 > 0x249249249249249) {
LABEL_32:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  uint64_t v27 = *(void *)a2;
  BOOL v13 = (char *)operator new(56 * v8);
  unsigned int v14 = v13;
  uint64_t v15 = *(void *)a2;
  uint64_t v16 = *((void *)a2 + 1);
  BOOL v29 = v13;
  unint64_t v31 = a2;
  uint64_t v17 = (uint64_t)v13;
  if (v15 != a3)
  {
    uint64_t v18 = v15;
    uint64_t v17 = (uint64_t)v13;
    do
    {
      boost::container::dtl::pair<AMCP::Address,AMCP::Thing>::pair(v17, v18);
      v18 += 56;
      v17 += 56;
    }
    while (v18 != a3);
  }
  uint64_t v30 = v17;
  *(void *)uint64_t v17 = *(void *)a5;
  *(_DWORD *)(v17 + 8) = *(_DWORD *)(a5 + 8);
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(void *)(v17 + 48) = 0;
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(a4 + 32);
  if (v19) {
    v19(1, a4, v17 + 16, 0);
  }
  uint64_t v20 = v15 + 56 * v16;
  if (v20 != a3)
  {
    uint64_t v21 = v17 + 56;
    uint64_t v22 = a3;
    do
    {
      uint64_t v23 = boost::container::dtl::pair<AMCP::Address,AMCP::Thing>::pair(v21, v22);
      v22 += 56;
      uint64_t v21 = v23 + 56;
    }
    while (v22 != v20);
  }
  BOOL v29 = 0;
  uint64_t v30 = 0;
  boost::container::dtl::scoped_destructor_range<boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::~scoped_destructor_range((uint64_t *)&v29);
  if (v15)
  {
    uint64_t v24 = *((void *)a2 + 1);
    if (v24)
    {
      unsigned int v25 = (void (**)(void, uint64_t, void, void))(v15 + 48);
      do
      {
        if (*v25) {
          (*v25)(0, (uint64_t)(v25 - 4), 0, 0);
        }
        v25 += 7;
        --v24;
      }
      while (v24);
    }
    operator delete(*(void **)a2);
  }
  uint64_t v26 = *((void *)a2 + 1) + 1;
  *(void *)a2 = v14;
  *((void *)a2 + 1) = v26;
  *((void *)a2 + 2) = v8;
  *a1 = &v14[a3 - v27];
}

void sub_1BAB9FBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  boost::container::dtl::scoped_destructor_range<boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::~scoped_destructor_range((uint64_t *)va);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t boost::container::dtl::pair<AMCP::Address,AMCP::Thing>::pair(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  int v3 = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = 0;
  unint64_t v4 = *(void (**)(uint64_t, uint64_t))(a2 + 48);
  if (v4) {
    v4(2, a2 + 16);
  }
  return a1;
}

uint64_t *boost::container::dtl::scoped_destructor_range<boost::container::new_allocator<boost::container::dtl::pair<AMCP::Address,AMCP::Thing>>>::~scoped_destructor_range(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  while (v2 != v3)
  {
    unint64_t v4 = *(void (**)(void, uint64_t, void, void))(v2 + 48);
    if (v4)
    {
      v4(0, v2 + 16, 0, 0);
      uint64_t v2 = *a1;
      uint64_t v3 = a1[1];
    }
    v2 += 56;
    *a1 = v2;
  }
  return a1;
}

void AMCP::make_description_from_thing(AMCP *this, const AMCP::Thing *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (void (*)(uint64_t, const AMCP::Thing *, void, uint64_t *))*((void *)a2 + 4);
  uint64_t v16 = 0;
  if (v4) {
    v4(3, a2, 0, &v16);
  }
  if (v16 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
  {
    AMCP::Thing::convert_to<applesauce::CF::ArrayRef>(cf, (uint64_t)a2);
    CFTypeRef v5 = cf[0];
    if (cf[0]) {
      goto LABEL_27;
    }
    goto LABEL_69;
  }
  if (v16 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
  {
    AMCP::Thing::convert_to<applesauce::CF::DictionaryRef>(cf, (uint64_t)a2);
    CFTypeRef v5 = cf[0];
    if (cf[0]) {
      goto LABEL_27;
    }
    goto LABEL_69;
  }
  if (v16 != AMCP::Implementation::get_type_marker<applesauce::CF::URLRef>())
  {
    if (v16 == AMCP::Implementation::get_type_marker<BOOL>())
    {
      AMCP::Thing::convert_to<applesauce::CF::BooleanRef>(cf, (uint64_t)a2);
      CFTypeRef v5 = cf[0];
      if (cf[0]) {
        goto LABEL_27;
      }
      goto LABEL_69;
    }
    if (v16 == AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>()
      || v16 == AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>())
    {
      AMCP::Thing::convert_to<applesauce::CF::DataRef>(cf, (uint64_t)a2);
      CFTypeRef v5 = cf[0];
      if (cf[0])
      {
LABEL_27:
        CFRetain(cf[0]);
        *(void *)this = v5;
        CFRelease(v5);
        return;
      }
      goto LABEL_69;
    }
    if (v16 != AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>()
      && v16 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
      && !AMCP::is_one_of<AudioValueRange,CA::ValueRange,applesauce::CF::DictionaryRef>(&v16)
      && v16 != AMCP::Implementation::get_type_marker<CA::ChannelLayout>()
      && v16 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
      && !AMCP::is_one_of<AudioStreamBasicDescription,CA::StreamDescription,applesauce::CF::DictionaryRef>(&v16))
    {
      if (AMCP::is_one_of<std::vector<AudioStreamBasicDescription>,std::vector<CA::StreamDescription>,applesauce::CF::ArrayRef>(&v16)) {
        goto LABEL_39;
      }
      if (!AMCP::is_one_of<AudioStreamRangedDescription,CA::RangedStreamDescription,applesauce::CF::DictionaryRef>(&v16))
      {
        if (AMCP::is_one_of<std::vector<AudioStreamRangedDescription>,std::vector<CA::RangedStreamDescription>,applesauce::CF::ArrayRef>(&v16)) {
          goto LABEL_39;
        }
        if (v16 != AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>()
          && v16 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
        {
          if (v16 == AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>()
            || v16 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
            || v16 == AMCP::Implementation::get_type_marker<CA::ValueRangeList>()
            || v16 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
          {
            goto LABEL_39;
          }
          if (v16 != AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>()
            && v16 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
          {
            if (v16 != AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>()
              && v16 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              if (AMCP::is_one_of<BOOL,char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(&v16))
              {
                AMCP::Thing::convert_to<applesauce::CF::NumberRef>(cf, (uint64_t)a2);
                applesauce::CF::NumberRef::operator applesauce::CF::TypeRef(this, cf[0]);
                applesauce::CF::NumberRef::~NumberRef(cf);
                return;
              }
              if (!AMCP::is_one_of<std::vector<BOOL>,std::vector<char>,std::vector<signed char>,std::vector<unsigned char>,std::vector<short>,std::vector<unsigned short>,std::vector<int>,std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(&v16))
              {
                if (v16 == AMCP::Implementation::get_type_marker<std::string>()
                  || v16 == AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>())
                {
                  AMCP::Thing::convert_to<applesauce::CF::StringRef>(cf, (uint64_t)a2);
                  applesauce::CF::StringRef::operator applesauce::CF::TypeRef(this, cf[0]);
                  applesauce::CF::StringRef::~StringRef(cf);
                  return;
                }
                if (v16 != AMCP::Implementation::get_type_marker<std::vector<std::string>>()
                  && v16 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
                {
                  if (AMCP::is_one_of<mcp_applesauce::CF::PropertyListRef,applesauce::CF::StringRef,applesauce::CF::DataRef,applesauce::CF::NumberRef,applesauce::CF::BooleanRef,applesauce::CF::DateRef,applesauce::CF::ArrayRef,applesauce::CF::DictionaryRef>(&v16))
                  {
                    AMCP::Thing::convert_to<mcp_applesauce::CF::PropertyListRef>(cf, (uint64_t)a2);
                    mcp_applesauce::CF::PropertyListRef::operator applesauce::CF::TypeRef(this, cf[0]);
                    mcp_applesauce::CF::PropertyListRef::~PropertyListRef(cf);
                    return;
                  }
                  goto LABEL_69;
                }
              }
            }
LABEL_39:
            AMCP::Thing::convert_to<applesauce::CF::ArrayRef>(cf, (uint64_t)a2);
            applesauce::CF::ArrayRef::operator applesauce::CF::TypeRef(this, cf[0]);
            applesauce::CF::ArrayRef::~ArrayRef(cf);
            return;
          }
        }
      }
    }
    AMCP::Thing::convert_to<applesauce::CF::DictionaryRef>(cf, (uint64_t)a2);
    applesauce::CF::DictionaryRef::operator applesauce::CF::TypeRef(this, cf[0]);
    applesauce::CF::DictionaryRef::~DictionaryRef(cf);
    return;
  }
  AMCP::Thing::convert_to<applesauce::CF::URLRef>(&url, (uint64_t)a2);
  CFURLRef v6 = url;
  if (!url)
  {
LABEL_69:
    *(void *)this = 0;
    return;
  }
  CFDataRef v7 = CFURLCreateData(0, url, 0x8000100u, 1u);
  applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v14, v7);
  if (v14)
  {
    CFStringRef v8 = CFStringCreateWithBytes(0, (const UInt8 *)"Really A CFURL", 14, 0x8000100u, 0);
    CFStringRef v9 = v8;
    if (!v8)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFRetain(v8);
    CFTypeRef v17 = v9;
    CFTypeRef v10 = v14;
    if (v14) {
      CFRetain(v14);
    }
    CFTypeRef v18 = v10;
    cf[0] = &v17;
    cf[1] = (CFTypeRef)1;
    CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)cf);
    CFRetain(CFDictionaryRef);
    *(void *)this = CFDictionaryRef;
    CFRelease(CFDictionaryRef);
    if (v18) {
      CFRelease(v18);
    }
    if (v17) {
      CFRelease(v17);
    }
    CFRelease(v9);
    if (v14) {
      CFRelease(v14);
    }
  }
  else
  {
    *(void *)this = 0;
  }
  CFRelease(v6);
}

void sub_1BABA0284(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMCP::Address::to_string(std::string *this, unsigned int *a2, int16x8_t a3)
{
  a3.i32[0] = bswap32(*a2);
  *(int8x8_t *)a3.i8 = vzip1_s8(*(int8x8_t *)a3.i8, *(int8x8_t *)a3.i8);
  v5.i64[0] = 0x1F0000001FLL;
  v5.i64[1] = 0x1F0000001FLL;
  v6.i64[0] = 0x5F0000005FLL;
  v6.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)a3.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v6, (uint32x4_t)vsraq_n_s32(v5, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a3.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a3.i8, (int8x8_t)0x2E002E002E002ELL);
  *((unsigned char *)&v21.__r_.__value_.__s + 23) = 4;
  LODWORD(v21.__r_.__value_.__l.__data_) = vmovn_s16(a3).u32[0];
  v21.__r_.__value_.__s.__data_[4] = 0;
  CFDataRef v7 = std::string::append(&v21, "/", 1uLL);
  int16x8_t v8 = *(int16x8_t *)&v7->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(int16x8_t *)&v22.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v8.i32[0] = bswap32(a2[1]);
  *(int8x8_t *)v8.i8 = vzip1_s8(*(int8x8_t *)v8.i8, *(int8x8_t *)v8.i8);
  v9.i64[0] = 0x1F0000001FLL;
  v9.i64[1] = 0x1F0000001FLL;
  v10.i64[0] = 0x5F0000005FLL;
  v10.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)v8.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v10, (uint32x4_t)vsraq_n_s32(v9, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v8.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v8.i8, (int8x8_t)0x2E002E002E002ELL);
  char v20 = 4;
  *(_DWORD *)__s = vmovn_s16(v8).u32[0];
  __s[4] = 0;
  BOOL v11 = std::string::append(&v22, __s, 4uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  BOOL v13 = std::string::append(&v23, "/", 1uLL);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v18, a2[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v15 = &v18;
  }
  else {
    uint64_t v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v18.__r_.__value_.__l.__size_;
  }
  CFTypeRef v17 = std::string::append(&v24, (const std::string::value_type *)v15, size);
  *this = *v17;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (v20 < 0) {
    operator delete(*(void **)__s);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void *applesauce::CF::DictionaryRef::operator applesauce::CF::TypeRef(void *result, CFTypeRef cf)
{
  uint64_t v3 = result;
  if (cf) {
    __n128 result = CFRetain(cf);
  }
  void *v3 = cf;
  return result;
}

BOOL AMCP::is_one_of<AudioValueRange,CA::ValueRange,applesauce::CF::DictionaryRef>(void *a1)
{
  return *a1 == AMCP::Implementation::get_type_marker<AudioValueRange>()
      || *a1 == AMCP::Implementation::get_type_marker<CA::ValueRange>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
}

BOOL AMCP::is_one_of<AudioStreamBasicDescription,CA::StreamDescription,applesauce::CF::DictionaryRef>(void *a1)
{
  return *a1 == AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>()
      || *a1 == AMCP::Implementation::get_type_marker<CA::StreamDescription>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
}

BOOL AMCP::is_one_of<std::vector<AudioStreamBasicDescription>,std::vector<CA::StreamDescription>,applesauce::CF::ArrayRef>(void *a1)
{
  return *a1 == AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
}

void *applesauce::CF::ArrayRef::operator applesauce::CF::TypeRef(void *result, CFTypeRef cf)
{
  uint64_t v3 = result;
  if (cf) {
    __n128 result = CFRetain(cf);
  }
  void *v3 = cf;
  return result;
}

BOOL AMCP::is_one_of<AudioStreamRangedDescription,CA::RangedStreamDescription,applesauce::CF::DictionaryRef>(void *a1)
{
  uint64_t v2 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    uint64_t v2 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v5)
    {
      uint64_t v2 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  if (*a1 == v2[135]) {
    return 1;
  }
  uint64_t v3 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    uint64_t v3 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v7)
    {
      uint64_t v3 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return *a1 == v3[137] || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
}

BOOL AMCP::is_one_of<std::vector<AudioStreamRangedDescription>,std::vector<CA::RangedStreamDescription>,applesauce::CF::ArrayRef>(void *a1)
{
  return *a1 == AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
}

BOOL AMCP::is_one_of<BOOL,char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(void *a1)
{
  if (*a1 == AMCP::Implementation::get_type_marker<BOOL>()) {
    return 1;
  }

  return AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a1);
}

void *applesauce::CF::NumberRef::operator applesauce::CF::TypeRef(void *result, CFTypeRef cf)
{
  uint64_t v3 = result;
  if (cf) {
    __n128 result = CFRetain(cf);
  }
  void *v3 = cf;
  return result;
}

BOOL AMCP::is_one_of<std::vector<BOOL>,std::vector<char>,std::vector<signed char>,std::vector<unsigned char>,std::vector<short>,std::vector<unsigned short>,std::vector<int>,std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(void *a1)
{
  if (*a1 == AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
    || *a1 == AMCP::Implementation::get_type_marker<std::vector<char>>()
    || *a1 == AMCP::Implementation::get_type_marker<std::vector<signed char>>()
    || *a1 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
    || *a1 == AMCP::Implementation::get_type_marker<std::vector<short>>()
    || *a1 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
    || *a1 == AMCP::Implementation::get_type_marker<std::vector<int>>())
  {
    return 1;
  }

  return AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a1);
}

void *applesauce::CF::StringRef::operator applesauce::CF::TypeRef(void *result, CFTypeRef cf)
{
  uint64_t v3 = result;
  if (cf) {
    __n128 result = CFRetain(cf);
  }
  void *v3 = cf;
  return result;
}

BOOL AMCP::is_one_of<mcp_applesauce::CF::PropertyListRef,applesauce::CF::StringRef,applesauce::CF::DataRef,applesauce::CF::NumberRef,applesauce::CF::BooleanRef,applesauce::CF::DateRef,applesauce::CF::ArrayRef,applesauce::CF::DictionaryRef>(void *a1)
{
  return *a1 == AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
}

void *mcp_applesauce::CF::PropertyListRef::operator applesauce::CF::TypeRef(void *result, CFTypeRef cf)
{
  uint64_t v3 = result;
  if (cf) {
    __n128 result = CFRetain(cf);
  }
  void *v3 = cf;
  return result;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_meta_device_property_traits_list(void)::$_0 &&>>()
{
  v34[6] = *MEMORY[0x1E4F143B8];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v0, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v1, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v2, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v3, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v4, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v5, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v6, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v7, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v8, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v9, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1969841184, 1, 1, 0, &AMCP::Property_Traits<1969841184u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1836411236u>::k_valid_scopes, 0, 1668639076, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1953653102, 1, 0, 0, &AMCP::Property_Traits<1953653102u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651007861u>::k_valid_scopes, 0, 1953653102, 23);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1668049764, 1, 0, 0, &AMCP::Property_Traits<1668049764u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1819569763u>::k_valid_scopes, 0, 1668049764, 7);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1819569763, 1, 0, 0, AMCP::Property_Traits<1819569763u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1853059700u>::k_valid_scopes, 0, 1819569763, 24);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1853059700, 1, 0, 1, &AMCP::Property_Traits<1853059700u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1853059619u>::k_valid_scopes, 0, 1853059700, 17);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v23, 1853059619, 1, 0, 0, &AMCP::Property_Traits<1853059619u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1935763060u>::k_valid_scopes, 0, 1853059619, 25);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v24, 1836411236, 0, 0, 0, &AMCP::Property_Traits<1836411236u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1751737454u>::k_valid_scopes, 0, 1836411236, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v25, 1935763060, 1, 0, 0, AMCP::Property_Traits<1935763060u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1937009955u>::k_valid_scopes, 0, 1935763060, 24);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v26, 1937009955, 1, 0, 0, &AMCP::Property_Traits<1937009955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1685222501u>::k_valid_scopes, 0, 1937009955, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v27, 1685222501, 0, 0, 0, &AMCP::Property_Traits<1685222501u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1936879204u>::k_valid_scopes, 0, 1685222501, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v28, 1735554416, 1, 0, 1, &AMCP::Property_Traits<1735554416u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1634169456u>::k_valid_scopes, 0, 1735554416, 3);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v29, 1634169456, 1, 0, 0, &AMCP::Property_Traits<1634169456u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1633906541u>::k_valid_scopes, 0, 1634169456, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v30, 1633906541, 1, 0, 1, &AMCP::Property_Traits<1633906541u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1634562932u>::k_valid_scopes, 0, 1633906541, 3);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v31, 1634562932, 1, 0, 1, &AMCP::Property_Traits<1634562932u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1634755428u>::k_valid_scopes, 0, 1634562932, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v32, 1634755428, 1, 0, 1, &AMCP::Property_Traits<1634755428u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668445298u>::k_valid_scopes, 0, 1634755428, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v33, 1668445298, 1, 0, 0, &AMCP::Property_Traits<1668445298u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1886549620u>::k_valid_scopes, 0, 1668445298, 12);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v34, 1936879204, 0, 0, 0, AMCP::Property_Traits<1936879204u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1684434036u>::k_valid_scopes, 0, 1936876644, 27);
  operator new();
}

void sub_1BABA1334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v16 = v15;
  *(void *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1C1859840](v14, 0x20C40960023A9);
  uint64_t v18 = 1680;
  while (1)
  {
    uint64_t v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(void *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18) {
      _Unwind_Resume(a1);
    }
  }
}

void DSP_Dictionariable::TooledDictionary::~TooledDictionary(DSP_Dictionariable::TooledDictionary *this)
{
  DSP_Dictionariable::TooledDictionary::~TooledDictionary(this);

  JUMPOUT(0x1C1859840);
}

{
  const void *v1;

  uint64_t v1 = (const void *)*((void *)this + 1);
  if (v1) {
    CFRelease(v1);
  }
}

void DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(DSP_Dictionariable::DictionariableKvp *this)
{
  *(void *)this = &unk_1F14875D8;
  uint64_t v1 = (const void *)*((void *)this + 1);
  if (v1) {
    CFRelease(v1);
  }
}

void DSP_Dictionariable::DictionarySet::maybe_add_under_key(uint64_t **a1, __CFDictionary **a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 8) && *(void *)a3 && CFStringGetLength(*(CFStringRef *)a3) >= 1)
  {
    CFTypeRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
    uint64_t v7 = *a1;
    uint64_t v6 = a1[1];
    while (v7 != v6)
    {
      (*(void (**)(uint64_t, CFTypeRef *))(*(void *)*v7 + 16))(*v7, &Mutable);
      ++v7;
    }
    if (!*(unsigned char *)(a3 + 8)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, Mutable);
    mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>(*a2, *(const void **)a3, cf);
    if (cf) {
      CFRelease(cf);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = a1[1];
    while (v8 != v9)
    {
      uint64_t v10 = *v8++;
      (*(void (**)(uint64_t, __CFDictionary **))(*(void *)v10 + 16))(v10, a2);
    }
  }
}

void sub_1BABA15A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t DSP_Dictionariable::DictionarySet::maybe_load_from_under_key(uint64_t **a1, CFDictionaryRef *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 8) && *(void *)a3 && CFStringGetLength(*(CFStringRef *)a3) >= 1)
  {
    v14[0] = &unk_1F1487618;
    v14[1] = 0;
    _OWORD v14[2] = a2;
    if (!*(unsigned char *)(a3 + 8)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*&>(v13, *a2, *(const void **)a3);
    if (v13[8])
    {
      uint64_t v6 = *a1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 1;
      while (v6 != v7)
      {
        uint64_t v8 = v8 & (*(unsigned int (**)(uint64_t, unsigned char *))(*(void *)*v6 + 24))(*v6, v13);
        ++v6;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v13);
    DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v14);
  }
  else
  {
    uint64_t v9 = *a1;
    uint64_t v10 = a1[1];
    uint64_t v8 = 1;
    while (v9 != v10)
    {
      uint64_t v11 = *v9++;
      uint64_t v8 = v8 & (*(unsigned int (**)(uint64_t, CFDictionaryRef *))(*(void *)v11 + 24))(v11, a2);
    }
  }
  return v8;
}

void sub_1BABA16FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)va);
  _Unwind_Resume(a1);
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*&>(unsigned char *a1, CFDictionaryRef theDict, const void *a3)
{
  uint64_t v4 = applesauce::CF::details::at_key<__CFString const*&>(theDict, a3);
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFDictionaryGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    char v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(void *)a1 = v5;
  char v7 = 1;
LABEL_6:
  a1[8] = v7;
}

void DSP_Dictionariable::DictionarySet::add_to(DSP_Dictionariable::DictionarySet *this, __CFArray **a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  CFTypeRef v9 = Mutable;
  CFTypeID v6 = *(void **)this;
  uint64_t v5 = (void *)*((void *)this + 1);
  if (v6 == v5)
  {
    CFTypeRef v7 = Mutable;
  }
  else
  {
    do
    {
      (*(void (**)(void, CFTypeRef *))(*(void *)*v6 + 16))(*v6, &v9);
      ++v6;
    }
    while (v6 != v5);
    CFTypeRef v7 = v9;
  }
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, v7);
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v9) {
    CFRelease(v9);
  }
}

void sub_1BABA1880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va);
  _Unwind_Resume(a1);
}

BOOL DSP_Dictionariable::DictionarySet::has_all_values(DSP_Dictionariable::DictionarySet *this, DSP_Dictionariable::DictionarySet *a2)
{
  uint64_t v2 = (a2 - this) >> 3;
  if (a2 != this)
  {
    uint64_t v4 = this;
    do
    {
      uint64_t v5 = *(void *)v4;
      uint64_t v4 = (DSP_Dictionariable::DictionarySet *)((char *)v4 + 8);
      v2 -= (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5);
    }
    while (v4 != a2);
  }
  return v2 == 0;
}

void HALB_MachPort::~HALB_MachPort(mach_port_name_t *this)
{
}

void AMCP::Address::make_string_for_scope(AMCP::Address *this@<X0>, void *a2@<X8>, int16x8_t a3@<Q0>)
{
  if ((int)this > 1768845427)
  {
    switch(this)
    {
      case 0x696E7074:
        uint64_t v3 = "Input";
        goto LABEL_14;
      case 0x6F757470:
        uint64_t v3 = "Output";
        goto LABEL_14;
      case 0x70747275:
        uint64_t v3 = "Pass Thru";
        goto LABEL_14;
    }
  }
  else
  {
    switch(this)
    {
      case 0:
        uint64_t v3 = "Unused";
        goto LABEL_14;
      case 0x2A2A2A2A:
        uint64_t v3 = "Wild Card";
        goto LABEL_14;
      case 0x676C6F62:
        uint64_t v3 = "Global";
LABEL_14:
        std::string::basic_string[abi:ne180100]<0>(a2, v3);
        return;
    }
  }
  a3.i32[0] = bswap32(this);
  *(int8x8_t *)a3.i8 = vzip1_s8(*(int8x8_t *)a3.i8, *(int8x8_t *)a3.i8);
  v4.i64[0] = 0x1F0000001FLL;
  v4.i64[1] = 0x1F0000001FLL;
  v5.i64[0] = 0x5F0000005FLL;
  v5.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)a3.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v5, (uint32x4_t)vsraq_n_s32(v4, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a3.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a3.i8, (int8x8_t)0x2E002E002E002ELL);
  char v7 = 4;
  LODWORD(__p) = vmovn_s16(a3).u32[0];
  BYTE4(__p) = 0;
  caulk::make_string((caulk *)"Scope '%s'", (uint64_t)a2, &__p);
  if (v7 < 0) {
    operator delete(__p);
  }
}

void HALB_CFBundle::~HALB_CFBundle(HALB_CFBundle *this)
{
  HALB_CFBundle::~HALB_CFBundle(this);

  JUMPOUT(0x1C1859840);
}

{
  const void *v2;

  *(void *)this = &unk_1F1461AA8;
  if (*((unsigned char *)this + 16))
  {
    uint64_t v2 = (const void *)*((void *)this + 1);
    if (v2)
    {
      CFRelease(v2);
      *((void *)this + 1) = 0;
    }
  }
}

const __CFString *HALB_CFBundle::CopyLocalizedString(HALB_CFBundle *this, CFStringRef key, const __CFString *a3, CFTypeRef cf, const __CFString *a5)
{
  char v7 = (__CFBundle *)*((void *)this + 1);
  if (!v7) {
    goto LABEL_10;
  }
  if (key)
  {
    CFStringRef result = CFBundleCopyLocalizedString(v7, key, 0, 0);
    if (result != key) {
      goto LABEL_6;
    }
    CFRelease(key);
  }
  CFStringRef result = 0;
LABEL_6:
  if (a3)
  {
    if (!result)
    {
      CFStringRef result = CFBundleCopyLocalizedString(*((CFBundleRef *)this + 1), a3, 0, 0);
      if (result == a3)
      {
        CFRelease(a3);
        if (cf) {
          goto LABEL_11;
        }
        return 0;
      }
    }
  }
  if (result) {
    return result;
  }
LABEL_10:
  if (cf)
  {
LABEL_11:
    CFRetain(cf);
    return (const __CFString *)cf;
  }
  return 0;
}

void HALS_IOEngine::get_timebase(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t HALS_IOEngine::NotifyWaitingTapThatIOHasFullyStarted(HALS_IOEngine *this)
{
  return 0;
}

uint64_t HALS_IOEngine::IsEngineMixing(HALS_IOEngine *this)
{
  return 0;
}

uint64_t HALS_IOEngine::CanSkipBeginEndIOOperation(HALS_IOEngine *this)
{
  return 0;
}

double HALS_IOEngine::GetEarliestCurrentPositionForOutputStream(HALS_IOEngine *this)
{
  return 0.0;
}

uint64_t HALS_IOEngine::TeardownForIsolatedIO(HALS_IOEngine *this)
{
  return 0;
}

uint64_t HALS_IOEngine::SetupForIsolatedIO(HALS_IOEngine *this)
{
  return 0;
}

uint64_t HALS_IOEngine::IsolatedReadFromStream(HALS_IOEngine *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  return 0;
}

uint64_t HALS_IOEngine::SupportsIsolatedIO(HALS_IOEngine *this)
{
  return 0;
}

uint64_t HALS_IOEngine::GetDSPLatencyForStreamAtIndex(HALS_IOEngine *this)
{
  return 0;
}

uint64_t HALS_IOEngine::DoAnyQueuesHaveWorkAfterFlush(HALS_IOEngine *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 97);
  return v1 & 1;
}

void HALS_IOEngine::FlushAllQueues(HALS_IOEngine *this)
{
}

void HALS_IssueDetector::Initialize(HALS_IssueDetector *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
  {
    int v2 = AudioIssueDetectorLibraryLoader(void)::libSym(this);
    if (!v2) {
      return;
    }
  }
  else
  {
    int v2 = -1;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315650;
    int32x4_t v4 = "HALS_IssueDetector.h";
    __int16 v5 = 1024;
    int v6 = 184;
    __int16 v7 = 1024;
    int v8 = v2;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  err = %d calling AudioIssueDetectorClientInitialize", (uint8_t *)&v3, 0x18u);
  }
}

void *std::vector<RunningIOContextClientInfo>::__init_with_size[abi:ne180100]<RunningIOContextClientInfo*,RunningIOContextClientInfo*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int32x4_t v4 = result;
    if (a4 >= 0x1555555555555556) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    CFStringRef result = std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(a4);
    __int16 v7 = result;
    *int32x4_t v4 = result;
    v4[1] = result;
    v4[2] = (char *)result + 12 * v8;
    size_t v9 = a3 - (void)a2;
    if (v9) {
      CFStringRef result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1BABA1DDC(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<HALS_IOEngine::_SendIsRunningNotifications(BOOL,std::vector<RunningIOContextClientInfo> const&)::$_0,std::default_delete<HALS_IOEngine::_SendIsRunningNotifications(BOOL,std::vector<RunningIOContextClientInfo> const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    int v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x1C1859840](v2, 0x1020C403997D5A5);
  }
  return a1;
}

uint64_t *applesauce::dispatch::v1::async<HALS_IOEngine::_SendIsRunningNotifications(BOOL,std::vector<RunningIOContextClientInfo> const&)::$_0 &>(dispatch_queue_s *,HALS_IOEngine::_SendIsRunningNotifications(BOOL,std::vector<RunningIOContextClientInfo> const&)::$_0 &)::{lambda(void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const AudioObjectPropertyAddress *a5)
{
  uint64_t v21 = a1;
  if (*(unsigned char *)(a1 + 28))
  {
    v22.__begin_ = (std::vector<unsigned int>::pointer)0x676C6F62676F6E65;
    LODWORD(v22.__end_) = 0;
    HALS_NotificationManager::PropertiesChanged((HALS_NotificationManager *)*(unsigned int *)(a1 + 24), 0, 1u, (const AudioObjectPropertyAddress *)&v22, a5);
  }
  memset(&v22, 0, sizeof(v22));
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  if (*(void *)a1 != v7)
  {
    do
    {
      uint64_t v8 = (const std::vector<unsigned int>::value_type *)(v6 + 8);
      v9.__i_ = v22.__begin_;
      if (v22.__end_ == v22.__begin_)
      {
        v9.__i_ = v22.__end_;
      }
      else
      {
        unint64_t v10 = v22.__end_ - v22.__begin_;
        do
        {
          unint64_t v11 = v10 >> 1;
          uint64_t v12 = &v9.__i_[v10 >> 1];
          std::vector<unsigned int>::value_type v14 = *v12;
          uint64_t v13 = v12 + 1;
          v10 += ~(v10 >> 1);
          if (v14 < *v8) {
            v9.__i_ = v13;
          }
          else {
            unint64_t v10 = v11;
          }
        }
        while (v10);
      }
      if (v22.__end_ == v9.__i_ || *v9.__i_ != *v8) {
        std::vector<unsigned int>::insert(&v22, v9, v8);
      }
      v6 += 12;
    }
    while (v6 != v7);
    begin = v22.__begin_;
    std::vector<unsigned int>::pointer end = v22.__end_;
    if (v22.__begin_ != v22.__end_)
    {
      do
      {
        uint64_t v17 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*begin);
        uint64_t v19 = v17;
        if (v17) {
          HALS_Client::SendIsRunningSomewhereElse(v17, *(_DWORD *)(a1 + 24), a1);
        }
        HALS_ObjectMap::ReleaseObject(v19, v18);
        ++begin;
      }
      while (begin != end);
      begin = v22.__begin_;
    }
    if (begin)
    {
      v22.__end_ = begin;
      operator delete(begin);
    }
  }
  return std::unique_ptr<HALS_IOEngine::_SendIsRunningNotifications(BOOL,std::vector<RunningIOContextClientInfo> const&)::$_0,std::default_delete<HALS_IOEngine::_SendIsRunningNotifications(BOOL,std::vector<RunningIOContextClientInfo> const&)::$_0>>::~unique_ptr[abi:ne180100](&v21);
}

void sub_1BABA1F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

std::vector<unsigned int>::iterator std::vector<unsigned int>::insert(std::vector<unsigned int> *this, std::vector<unsigned int>::const_iterator __position, std::vector<unsigned int>::const_reference __x)
{
  std::vector<unsigned int>::const_reference v3 = __x;
  uint64_t i = (unsigned int *)__position.__i_;
  std::vector<unsigned int>::pointer end = this->__end_;
  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  if (end >= value)
  {
    std::vector<unsigned int>::pointer begin = this->__begin_;
    unint64_t v14 = end - this->__begin_ + 1;
    if (v14 >> 62) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (char *)__position.__i_ - (char *)begin;
    uint64_t v16 = __position.__i_ - begin;
    uint64_t v17 = (char *)value - (char *)begin;
    if (v17 >> 1 > v14) {
      unint64_t v14 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    __v.__end_cap_.__value_ = (std::allocator<unsigned int> *)p_end_cap;
    if (v18)
    {
      uint64_t v20 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v18);
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v19 = 0;
    }
    uint64_t v21 = &v20[v16];
    __v.__first_ = v20;
    __v.__begin_ = v21;
    __v.__end_cap_.__value_ = &v20[v19];
    if (v16 == v19)
    {
      if (v15 < 1)
      {
        if (begin == i) {
          unint64_t v23 = 1;
        }
        else {
          unint64_t v23 = v15 >> 1;
        }
        uint64_t v24 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v23);
        uint64_t v21 = (unsigned int *)((char *)v24 + (v23 & 0xFFFFFFFFFFFFFFFCLL));
        __v.__first_ = v24;
        __v.__begin_ = v21;
        __v.__end_cap_.__value_ = &v24[v25];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        unint64_t v22 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v22 = v16 + 1;
        }
        v21 -= v22 >> 1;
        __v.__begin_ = v21;
      }
    }
    *uint64_t v21 = *v3;
    __v.__end_ = v21 + 1;
    uint64_t i = std::vector<unsigned int>::__swap_out_circular_buffer(this, &__v, i);
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
  }
  else if (__position.__i_ == end)
  {
    *__position.__i_ = *__x;
    this->__end_ = (std::vector<unsigned int>::pointer)(__position.__i_ + 1);
  }
  else
  {
    std::__wrap_iter<const unsigned int *>::iterator_type v9 = __position.__i_ + 1;
    unint64_t v10 = end - 1;
    std::vector<unsigned int>::pointer v11 = this->__end_;
    while (v10 < end)
    {
      unsigned int v12 = *v10++;
      *v11++ = v12;
    }
    this->__end_ = v11;
    if (end != v9) {
      memmove((void *)&end[-(end - v9)], __position.__i_, (char *)end - (char *)v9);
    }
    if (i <= v3) {
      v3 += this->__end_ > v3;
    }
    *uint64_t i = *v3;
  }
  return (std::vector<unsigned int>::iterator)i;
}

void sub_1BABA21B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<HALS_IOEngine::_UpdateIssueReporters(std::vector<unsigned int> const&)::$_0,std::default_delete<HALS_IOEngine::_UpdateIssueReporters(std::vector<unsigned int> const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::vector<unsigned int>::const_reference v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    int32x4_t v4 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v4;
      operator delete(v4);
    }
    MEMORY[0x1C1859840](v2, 0x30C400AA40F66);
  }
  return a1;
}

uint64_t *applesauce::dispatch::v1::async<HALS_IOEngine::_UpdateIssueReporters(std::vector<unsigned int> const&)::$_0 &>(dispatch_queue_s *,HALS_IOEngine::_UpdateIssueReporters(std::vector<unsigned int> const&)::$_0 &)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  __p = 0;
  unint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v2 = *(unsigned int **)a1;
  uint64_t v1 = *(unsigned int **)(a1 + 8);
  uint64_t v28 = v1;
  uint64_t v29 = a1;
  while (v2 != v1)
  {
    int32x4_t v4 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v2);
    if (v4)
    {
      HALS_IOContext::GetIssueReporters((HALS_IOContext *)buf, (uint64_t)v4);
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&v30, __p, (uint64_t)v34, (v34 - (HALS_Object *)__p) >> 3);
      __int16 v5 = v30;
      uint64_t v6 = v31;
      uint64_t v7 = *(void **)buf;
      uint64_t v8 = *(uint64_t **)&buf[8];
      p_p = &__p;
      unint64_t v36 = &__p;
      if (v30 == v31)
      {
        std::vector<unsigned int>::pointer v11 = *(uint64_t **)buf;
LABEL_13:
        long long v37 = p_p;
        while (v11 != v8)
          std::back_insert_iterator<std::vector<long long>>::operator=[abi:ne180100]((uint64_t *)&v37, v11++);
      }
      else
      {
        unint64_t v10 = v30;
        std::vector<unsigned int>::pointer v11 = *(uint64_t **)buf;
        while (v11 != v8)
        {
          uint64_t v12 = *v11;
          uint64_t v13 = *v10;
          if (*v11 >= *v10)
          {
            std::back_insert_iterator<std::vector<long long>>::operator=[abi:ne180100]((uint64_t *)&v36, v10);
            v11 += v13 >= v12;
            ++v10;
          }
          else
          {
            std::back_insert_iterator<std::vector<long long>>::operator=[abi:ne180100]((uint64_t *)&v36, v11++);
          }
          if (v10 == v6)
          {
            p_p = v36;
            goto LABEL_13;
          }
        }
        long long v37 = v36;
        while (v10 != v6)
          std::back_insert_iterator<std::vector<long long>>::operator=[abi:ne180100]((uint64_t *)&v37, v10++);
      }
      std::__sort<std::__less<long long,long long> &,long long *>();
      uint64_t v15 = (HALS_Object *)__p;
      unint64_t v14 = v34;
      if (__p == v34)
      {
LABEL_29:
        if (v14 != v15)
        {
          std::vector<unsigned int>::const_reference v3 = v14;
          unint64_t v34 = v15;
        }
      }
      else
      {
        uint64_t v16 = (HALS_Object *)((char *)__p + 8);
        while (v16 != v34)
        {
          uint64_t v17 = (void *)((char *)v16 - 8);
          uint64_t v18 = *((void *)v16 - 1);
          uint64_t v19 = *(void *)v16;
          uint64_t v16 = (HALS_Object *)((char *)v16 + 8);
          if (v18 == v19)
          {
            for (uint64_t i = (HALS_Object *)(v17 + 2); i != v14; uint64_t i = (HALS_Object *)((char *)i + 8))
            {
              uint64_t v21 = v18;
              uint64_t v18 = *(void *)i;
              if (v21 != *(void *)i)
              {
                v17[1] = v18;
                ++v17;
              }
            }
            uint64_t v15 = (HALS_Object *)(v17 + 1);
            goto LABEL_29;
          }
        }
      }
      if (v5) {
        operator delete(v5);
      }
      if (v7) {
        operator delete(v7);
      }
    }
    HALS_ObjectMap::ReleaseObject(v4, v3);
    ++v2;
    uint64_t v1 = v28;
  }
  uint64_t v22 = *(void *)(a1 + 24);
  if (v22)
  {
    if ((void **)(v22 + 40) != &__p) {
      std::vector<long long>::__assign_with_size[abi:ne180100]<long long *,long long *>((char *)(v22 + 40), (char *)__p, (uint64_t)v34, (v34 - (HALS_Object *)__p) >> 3);
    }
    uint64_t v23 = *(void *)(v22 + 32);
    if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global);
    }
    if (AudioIssueDetectorLibraryLoader(void)::libSym)
    {
      int v24 = AudioIssueDetectorLibraryLoader(void)::libSym(v23, &__p);
      if (!v24) {
        goto LABEL_47;
      }
    }
    else
    {
      int v24 = -1;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = *(void *)(v22 + 32);
      *(_DWORD *)buf = 136315906;
      *(void *)&buf[4] = "HALS_IssueDetector.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 211;
      __int16 v39 = 1024;
      int v40 = v24;
      __int16 v41 = 2048;
      uint64_t v42 = v25;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  err = %d calling AudioIssueDetectorClientUpdateReportingSessions, mDetectorID = %llu", buf, 0x22u);
    }
  }
LABEL_47:
  if (__p)
  {
    unint64_t v34 = (HALS_Object *)__p;
    operator delete(__p);
  }
  return std::unique_ptr<HALS_IOEngine::_UpdateIssueReporters(std::vector<unsigned int> const&)::$_0,std::default_delete<HALS_IOEngine::_UpdateIssueReporters(std::vector<unsigned int> const&)::$_0>>::~unique_ptr[abi:ne180100](&v29);
}

void sub_1BABA2588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<HALS_IOEngine::_UpdateIssueReporters(std::vector<unsigned int> const&)::$_0,std::default_delete<HALS_IOEngine::_UpdateIssueReporters(std::vector<unsigned int> const&)::$_0>>::~unique_ptr[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

char *std::vector<long long>::__assign_with_size[abi:ne180100]<long long *,long long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  std::__wrap_iter<const unsigned int *>::iterator_type v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    CFStringRef result = std::vector<void const*>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    std::__wrap_iter<const unsigned int *>::iterator_type v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    CFStringRef result = (char *)memmove(*(void **)result, __src, v14 - v9);
    std::__wrap_iter<const unsigned int *>::iterator_type v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    CFStringRef result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

uint64_t *std::back_insert_iterator<std::vector<long long>>::operator=[abi:ne180100](uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = *(void **)(*a1 + 8);
  unint64_t v5 = *(void *)(*a1 + 16);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(void **)v4;
    uint64_t v9 = ((uint64_t)v6 - *(void *)v4) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    BOOL v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v13);
      uint64_t v8 = *(void **)v4;
      uint64_t v6 = *(void **)(v4 + 8);
    }
    else
    {
      uint64_t v14 = 0;
    }
    unint64_t v15 = (void *)(v13 + 8 * v9);
    unint64_t v16 = v13 + 8 * v14;
    *unint64_t v15 = *a2;
    uint64_t v7 = v15 + 1;
    while (v6 != v8)
    {
      uint64_t v17 = *--v6;
      *--unint64_t v15 = v17;
    }
    *(void *)uint64_t v4 = v15;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *uint64_t v6 = *a2;
    uint64_t v7 = v6 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

void HALS_IOEngine::HALS_IOEngine(HALS_IOEngine *this, HALS_IODevice *a2, uint64_t a3, uint64_t a4, HALS_Object *a5)
{
  object[40] = *(dispatch_object_t *)MEMORY[0x1E4F143B8];
  HALS_Object::HALS_Object(this, 1701734254, 0, (uint64_t)a2, a5);
  *(void *)uint64_t v6 = &unk_1F1461AD8;
  *(void *)(v6 + 104) = 0;
  *(void *)(v6 + 112) = 0;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_WORD *)(v6 + 96) = 0;
  *(_OWORD *)(v6 + 64) = 0u;
  uint64_t v7 = (NSObject **)(v6 + 64);
  *(void *)(v6 + 120) = 0;
  *(void *)(v6 + 128) = 850045863;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(void *)(v6 + 216) = 850045863;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_OWORD *)(v6 + 288) = 0u;
  *(void *)(v6 + 304) = 850045863;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *((void *)this + 47) = dispatch_semaphore_create(0);
  *((void *)this + 53) = 0;
  *((void *)this + 54) = 0;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_WORD *)this + 208) = 0;
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 850045863;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *((void *)this + 67) = 850045863;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((void *)this + 78) = 850045863;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *((void *)this + 87) = dispatch_semaphore_create(0);
  AMCP::Utility::Dispatch_Queue::create_serial_with_workloop((AMCP::Utility::Dispatch_Queue *)object, "com.apple.audio.HALS_Engine-updater");
  AMCP::Utility::Dispatch_Queue::operator=(v7, object[0]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)object);
}

void HALS_IOEngine::~HALS_IOEngine(HALS_IOEngine *this)
{
  *(void *)this = &unk_1F1461AD8;
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_IOEngine *)((char *)this + 384));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_IOEngine *)((char *)this + 64));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  HALS_Object::~HALS_Object(this);
}

uint64_t ___ZN13HALS_IOEngine23SetIOContextStreamUsageEjbjPb_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(**(void **)(a1 + 32) + 248))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(unsigned int *)(a1 + 52), *(void *)(a1 + 40));
}

void sub_1BABA2A38(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZN13HALS_IOEngine28DeferSetIOContextStreamUsageEjbjPb_block_invoke(uint64_t a1)
{
  uint64_t v2 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 40));
  uint64_t v4 = (HALS_ObjectMap *)v2;
  if (v2)
  {
    char v5 = *(unsigned char *)(a1 + 52);
    uint64_t v6 = *(void *)(a1 + 32);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 0x40000000;
    v9[2] = ___ZN13HALS_IOEngine23SetIOContextStreamUsageEjbjPb_block_invoke;
    v9[3] = &__block_descriptor_tmp_2230;
    char v10 = v5;
    v9[6] = *(void *)(a1 + 44);
    v9[4] = v2;
    v9[5] = v6;
    uint64_t v7 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
    HALB_CommandGate::ExecuteCommand(v7, (uint64_t)v9);
  }
  HALS_ObjectMap::ReleaseObject(v4, v3);
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    JUMPOUT(0x1C1859810);
  }
  return result;
}

void sub_1BABA2B68(void *a1)
{
}

uint64_t *std::unique_ptr<HALS_IOEngine::_SendIsRunningNotificationForContextRegistration(unsigned int,std::vector<RunningIOContextClientInfo> const&)::$_0,std::default_delete<HALS_IOEngine::_SendIsRunningNotificationForContextRegistration(unsigned int,std::vector<RunningIOContextClientInfo> const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::vector<unsigned int>::const_reference v3 = *(void **)(v2 + 8);
    if (v3)
    {
      *(void *)(v2 + 16) = v3;
      operator delete(v3);
    }
    MEMORY[0x1C1859840](v2, 0x1020C405E66F15BLL);
  }
  return a1;
}

uint64_t *applesauce::dispatch::v1::async<HALS_IOEngine::_SendIsRunningNotificationForContextRegistration(unsigned int,std::vector<RunningIOContextClientInfo> const&)::$_0 &>(dispatch_queue_s *,HALS_IOEngine::_SendIsRunningNotificationForContextRegistration(unsigned int,std::vector<RunningIOContextClientInfo> const&)::$_0 &)::{lambda(void *)#1}::__invoke(unsigned int *a1)
{
  uint64_t v6 = a1;
  uint64_t v2 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*a1);
  uint64_t v4 = v2;
  if (v2) {
    HALS_Client::SendIsRunningSomewhereElse(v2, a1[1], (uint64_t)(a1 + 2));
  }
  HALS_ObjectMap::ReleaseObject(v4, v3);
  return std::unique_ptr<HALS_IOEngine::_SendIsRunningNotificationForContextRegistration(unsigned int,std::vector<RunningIOContextClientInfo> const&)::$_0,std::default_delete<HALS_IOEngine::_SendIsRunningNotificationForContextRegistration(unsigned int,std::vector<RunningIOContextClientInfo> const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v6);
}

void sub_1BABA2C44(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  HALS_ObjectMap::ReleaseObject(v10, a2);
  std::unique_ptr<HALS_IOEngine::_SendIsRunningNotificationForContextRegistration(unsigned int,std::vector<RunningIOContextClientInfo> const&)::$_0,std::default_delete<HALS_IOEngine::_SendIsRunningNotificationForContextRegistration(unsigned int,std::vector<RunningIOContextClientInfo> const&)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

HALB_Mutex *std::unique_ptr<HALB_CommandGate>::reset[abi:ne180100](HALB_Mutex **a1, HALB_Mutex *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    HALB_Mutex::~HALB_Mutex(result);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void HALS_IssueDetector::~HALS_IssueDetector(HALS_IssueDetector *this)
{
  HALS_IssueDetector::~HALS_IssueDetector(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F147A278;
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global);
    }
    if (AudioIssueDetectorLibraryLoader(void)::libSym) {
      AudioIssueDetectorLibraryLoader(void)::libSym(v2);
    }
    *((void *)this + 4) = 0;
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    char v5 = 136315394;
    uint64_t v6 = "HALS_IssueDetector.h";
    uint64_t v7 = 1024;
    uint64_t v8 = 109;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  calling AudioIssueDetectorClientDispose already disposed", (uint8_t *)&v5, 0x12u);
  }
  std::vector<unsigned int>::const_reference v3 = (void *)*((void *)this + 5);
  if (v3)
  {
    *((void *)this + 6) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }
}

void sub_1BABA2E40(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__shared_ptr_emplace<HALS_IssueDetector>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<HALS_IssueDetector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147A228;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_IssueDetector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147A228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL HALS_IOContext_Manager_Graph_Builder_Connection::is_tap_mono(uint64_t a1, const void **a2)
{
  v10[0] = 0;
  v10[1] = 0;
  HALS_System::GetInstance(&v11, 0, v10);
  uint64_t v4 = v11;
  char v5 = *a2;
  if (v5) {
    CFRetain(v5);
  }
  uint64_t v7 = (HALS_ObjectMap *)HALS_System::CopyTapByUID(v4, v5, *(void *)(a1 + 16));
  if (v5) {
    CFRelease(v5);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v7) {
    BOOL v8 = *((unsigned char *)v7 + 80) != 0;
  }
  else {
    BOOL v8 = 0;
  }
  HALS_ObjectMap::ReleaseObject(v7, v6);
  return v8;
}

void sub_1BABA2FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager_Graph_Builder_Connection::get_tapped_object_list(uint64_t a1@<X0>, CFTypeRef *a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v37[0] = 0;
  v37[1] = 0;
  HALS_System::GetInstance(&v33, 0, v37);
  uint64_t v6 = (uint64_t)v33;
  CFTypeRef v7 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  CFTypeRef v36 = v7;
  uint64_t v9 = HALS_System::CopyTapByUID(v6, v7, *(void *)(a1 + 16));
  if (v7) {
    CFRelease(v7);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (v9)
  {
    uint64_t v33 = 0;
    unint64_t v34 = 0;
    uint64_t v35 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v33, *(const void **)(v9 + 208), *(void *)(v9 + 216), (uint64_t)(*(void *)(v9 + 216) - *(void *)(v9 + 208)) >> 2);
    char v10 = (int *)v33;
    uint64_t v28 = v34;
    if (v33 != v34)
    {
      uint64_t v11 = 0;
      uint64_t v26 = v9;
      do
      {
        v32[0] = 0;
        v32[1] = 0;
        HALS_System::GetInstance(&v30, 0, v32);
        unint64_t v13 = (HALS_ObjectMap *)HALS_System::CopyClientByObjectID(v30, *v10);
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
        if (v13)
        {
          (*(void (**)(HALS_System **__return_ptr, HALS_ObjectMap *))(*(void *)v13 + 200))(&v30, v13);
          uint64_t v14 = (unsigned int *)v30;
          unint64_t v15 = v31;
          if (v30 != (HALS_System *)v31)
          {
            uint64_t v27 = v10;
            unint64_t v16 = (unint64_t)a3[2];
            uint64_t v17 = *a3;
            uint64_t v29 = v13;
            do
            {
              mcp_object = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)(*(void *)(a1 + 8) + 16), *v14);
              int v19 = (int)mcp_object;
              if ((unint64_t)mcp_object >> 32)
              {
                if ((unint64_t)v11 >= v16)
                {
                  uint64_t v21 = (v11 - v17) >> 2;
                  unint64_t v22 = v21 + 1;
                  if ((unint64_t)(v21 + 1) >> 62) {
                    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                  }
                  if ((uint64_t)(v16 - (void)v17) >> 1 > v22) {
                    unint64_t v22 = (uint64_t)(v16 - (void)v17) >> 1;
                  }
                  if (v16 - (unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v23 = v22;
                  }
                  if (v23) {
                    unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v23);
                  }
                  else {
                    BOOL v12 = 0;
                  }
                  int v24 = (char *)(v23 + 4 * v21);
                  *(_DWORD *)int v24 = v19;
                  uint64_t v20 = v24 + 4;
                  while (v11 != v17)
                  {
                    int v25 = *((_DWORD *)v11 - 1);
                    v11 -= 4;
                    *((_DWORD *)v24 - 1) = v25;
                    v24 -= 4;
                  }
                  unint64_t v16 = v23 + 4 * (void)v12;
                  *a3 = v24;
                  a3[1] = v20;
                  a3[2] = (char *)v16;
                  if (v17) {
                    operator delete(v17);
                  }
                  uint64_t v17 = v24;
                  unint64_t v13 = v29;
                }
                else
                {
                  *(_DWORD *)uint64_t v11 = mcp_object;
                  uint64_t v20 = v11 + 4;
                }
                a3[1] = v20;
                uint64_t v11 = v20;
              }
              ++v14;
            }
            while (v14 != (unsigned int *)v15);
            uint64_t v14 = (unsigned int *)v30;
            uint64_t v9 = v26;
            char v10 = v27;
          }
          if (v14)
          {
            uint64_t v31 = (std::__shared_weak_count *)v14;
            operator delete(v14);
          }
        }
        HALS_ObjectMap::ReleaseObject(v13, v12);
        ++v10;
      }
      while (v10 != (int *)v28);
      char v10 = (int *)v33;
    }
    if (v10) {
      operator delete(v10);
    }
  }
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v9, v8);
}

void sub_1BABA3244(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22)
{
  HALS_ObjectMap::ReleaseObject(v23, a2);
  int v25 = *(void **)v22;
  if (*(void *)v22)
  {
    *(void *)(v22 + 8) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(a1);
}

BOOL HALS_IOContext_Manager_Graph_Builder_Connection::should_create_mono_mix_map(HALS_IOContext_Manager_Graph_Builder_Connection *this)
{
  v3[0] = 0;
  v3[1] = 0;
  HALS_System::GetInstance(&v4, 0, v3);
  int v1 = *(unsigned __int8 *)(v4 + 1224);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v1 != 0;
}

void HALS_IOContext_Manager_Graph_Builder_Connection::maybe_get_master_device_and_sample_rate(HALS_IOContext_Manager_Graph_Builder_Connection *this@<X0>, CFDictionaryRef *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  if (!*a2) {
    goto LABEL_114;
  }
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)"uid", 3, 0x8000100u, 0);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v7 = applesauce::CF::details::has_key<applesauce::CF::StringRef>(*a2, v6);
  CFRelease(v6);
  if (!v7)
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
    uint64_t v43 = *(NSObject **)cf;
    if (*(void *)v69) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v69);
    }
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      unsigned int v44 = pthread_self();
      mach_port_t v45 = pthread_mach_thread_np(v44);
      unint64_t v46 = 0;
      int v47 = 0;
      int v48 = 47;
      do
      {
        char v49 = &aLibraryCachesC_32[v46];
        if (v48 == 47) {
          int v47 = &aLibraryCachesC_32[v46];
        }
        int v48 = v49[1];
        if (!v49[1]) {
          break;
        }
        BOOL v34 = v46++ >= 0xFFF;
      }
      while (!v34);
      if (v47) {
        uint64_t v50 = v47 + 1;
      }
      else {
        uint64_t v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_Manager_Graph_Builder_Connection.cpp";
      }
      LODWORD(cf) = 67109890;
      HIDWORD(cf) = v45;
      *(_WORD *)v69 = 2080;
      *(void *)&v69[2] = v50;
      __int16 v70 = 1024;
      int v71 = 191;
      __int16 v72 = 2080;
      v73 = "in_aggregate_description->has_key(AMCP::CF::String{kAudioAggregateDeviceUIDKey})";
      _os_log_error_impl(&dword_1BAA78000, v43, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s We should have already exited if the aggregate UID were missing.", (uint8_t *)&cf, 0x22u);
    }
    abort();
  }
  if (!*a2)
  {
LABEL_114:
    BOOL v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v51, "Could not construct");
    goto LABEL_131;
  }
  CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)"clock", 5, 0x8000100u, 0);
  if (!v9)
  {
    unint64_t v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v53, "Could not construct");
    __cxa_throw(v53, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFTypeRef cf = 0;
  applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v67, *a2, v9, &cf);
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v9);
  CFStringRef v10 = (const __CFString *)v67;
  if (v67) {
    goto LABEL_14;
  }
  if (!*a2)
  {
    BOOL v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v51, "Could not construct");
    goto LABEL_131;
  }
  CFStringRef v11 = CFStringCreateWithBytes(0, (const UInt8 *)"master", 6, 0x8000100u, 0);
  if (!v11)
  {
    unsigned int v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v54, "Could not construct");
    __cxa_throw(v54, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFTypeRef v65 = 0;
  applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&cf, *a2, v11, &v65);
  CFStringRef v10 = (const __CFString *)cf;
  CFTypeRef v67 = cf;
  if (v65) {
    CFRelease(v65);
  }
  CFRelease(v11);
  if (v10) {
    goto LABEL_14;
  }
  if (!*a2) {
    goto LABEL_128;
  }
  CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)"subdevices", 10, 0x8000100u, 0);
  if (!v14)
  {
    uint64_t v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v57, "Could not construct");
    __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v65, *a2, v14);
  CFRelease(v14);
  if (!v66) {
    goto LABEL_31;
  }
  if (!v65)
  {
LABEL_128:
    BOOL v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v51, "Could not construct");
    goto LABEL_131;
  }
  Count = (AMCP::Log::Scope_Registry *)CFArrayGetCount((CFArrayRef)v65);
  if (!Count)
  {
LABEL_31:
    AMCP::Log::Scope_Registry::get(Count);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
    uint64_t v18 = *(NSObject **)cf;
    if (*(void *)v69) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v69);
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = pthread_self();
      mach_port_t v29 = pthread_mach_thread_np(v28);
      unint64_t v30 = 0;
      uint64_t v31 = 0;
      int v32 = 47;
      do
      {
        uint64_t v33 = &aLibraryCachesC_32[v30];
        if (v32 == 47) {
          uint64_t v31 = &aLibraryCachesC_32[v30];
        }
        int v32 = v33[1];
        if (!v33[1]) {
          break;
        }
        BOOL v34 = v30++ >= 0xFFF;
      }
      while (!v34);
      if (v31) {
        uint64_t v35 = v31 + 1;
      }
      else {
        uint64_t v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_Manager_Graph_Builder_Connection.cpp";
      }
      LODWORD(cf) = 67109634;
      HIDWORD(cf) = v29;
      *(_WORD *)v69 = 2080;
      *(void *)&v69[2] = v35;
      __int16 v70 = 1024;
      int v71 = 203;
      _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Unable to calculate clock and sample rate", (uint8_t *)&cf, 0x18u);
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 1;
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v65);
    return;
  }
  if (!v65) {
    goto LABEL_128;
  }
  applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&cf, (CFArrayRef)v65, 0);
  if (!v65) {
    goto LABEL_128;
  }
  applesauce::CF::details::at_as<applesauce::CF::ArrayRef>(&theArray, (CFArrayRef)v65);
  int v16 = v64;
  if (v64)
  {
    CFArrayRef v17 = theArray;
    if (theArray) {
      goto LABEL_36;
    }
    goto LABEL_130;
  }
  CFArrayRef v17 = (const __CFArray *)v65;
  if (!v65)
  {
LABEL_130:
    BOOL v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v51, "Could not construct");
LABEL_131:
    __cxa_throw(v51, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_36:
  CFStringRef v10 = 0;
  CFIndex v19 = CFArrayGetCount(v17);
  if (!v19) {
    goto LABEL_73;
  }
  for (unint64_t i = 0; i != v19; ++i)
  {
    if (!v65)
    {
LABEL_125:
      CFTypeRef v67 = v10;
      BOOL v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v51, "Could not construct");
      goto LABEL_131;
    }
    applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&v61, (CFArrayRef)v65, i);
    if (v69[0] == v62)
    {
      if (v69[0])
      {
        CFStringRef v21 = (const __CFString *)cf;
        CFTypeRef cf = v61;
        CFStringRef v61 = v21;
      }
    }
    else if (v69[0])
    {
      std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::reset[abi:ne180100]((uint64_t)&cf);
    }
    else
    {
      CFTypeRef cf = v61;
      CFStringRef v61 = 0;
      v69[0] = 1;
    }
    std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v61);
    if (v16)
    {
      if (!theArray) {
        goto LABEL_125;
      }
      applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&v61, theArray, i);
      if (v69[0] == v62)
      {
        if (v69[0])
        {
          CFStringRef v22 = (const __CFString *)cf;
          CFTypeRef cf = v61;
          CFStringRef v61 = v22;
        }
      }
      else if (v69[0])
      {
        std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::reset[abi:ne180100]((uint64_t)&cf);
      }
      else
      {
        CFTypeRef cf = v61;
        CFStringRef v61 = 0;
        v69[0] = 1;
      }
      std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v61);
      if (v69[0])
      {
        if (!cf) {
          goto LABEL_125;
        }
        CFStringRef v23 = CFStringCreateWithBytes(0, (const UInt8 *)"uid", 3, 0x8000100u, 0);
        if (!v23)
        {
          CFTypeRef v67 = v10;
          uint64_t v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v55, "Could not construct");
          __cxa_throw(v55, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        CFTypeRef v60 = 0;
        applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v61, (const __CFDictionary *)cf, v23, &v60);
        CFStringRef v24 = v61;
        CFStringRef v61 = v10;
        if (v10) {
          CFRelease(v10);
        }
        if (v60) {
          CFRelease(v60);
        }
        goto LABEL_68;
      }
    }
    else if (v69[0])
    {
      if (!cf) {
        goto LABEL_125;
      }
      CFStringRef v23 = CFStringCreateWithBytes(0, (const UInt8 *)"uid", 3, 0x8000100u, 0);
      if (!v23)
      {
        CFTypeRef v67 = v10;
        v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v56, "Could not construct");
        __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      CFTypeRef v60 = 0;
      applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v61, (const __CFDictionary *)cf, v23, &v60);
      CFStringRef v24 = v61;
      CFStringRef v61 = v10;
      if (v10) {
        CFRelease(v10);
      }
      if (v60) {
        CFRelease(v60);
      }
LABEL_68:
      CFRelease(v23);
      CFStringRef v10 = v24;
    }
    if (v10)
    {
      CFRetain(v10);
      CFStringRef v59 = v10;
      double clock_sample_rate = HALS_IOContext_Manager_Graph_Builder_Connection::get_clock_sample_rate((uint64_t)this, &v59);
      CFRelease(v10);
      if (clock_sample_rate != 0.0)
      {
        CFTypeRef v67 = v10;
        CFRetain(v10);
        CFTypeRef v13 = v67;
        *(double *)a3 = clock_sample_rate;
        *(void *)(a3 + 8) = v10;
        *(unsigned char *)(a3 + 16) = 1;
        std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theArray);
        std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
        std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v65);
        if (!v13) {
          return;
        }
LABEL_19:
        CFRelease(v13);
        return;
      }
    }
  }
  CFTypeRef v67 = v10;
LABEL_73:
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theArray);
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  uint64_t v26 = (AMCP::Log::Scope_Registry *)std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v65);
  if (!v10)
  {
    AMCP::Log::Scope_Registry::get(v26);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
    uint64_t v27 = *(NSObject **)cf;
    if (*(void *)v69) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v69);
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef v36 = pthread_self();
      mach_port_t v37 = pthread_mach_thread_np(v36);
      unint64_t v38 = 0;
      __int16 v39 = 0;
      int v40 = 47;
      do
      {
        __int16 v41 = &aLibraryCachesC_32[v38];
        if (v40 == 47) {
          __int16 v39 = &aLibraryCachesC_32[v38];
        }
        int v40 = v41[1];
        if (!v41[1]) {
          break;
        }
        BOOL v34 = v38++ >= 0xFFF;
      }
      while (!v34);
      if (v39) {
        uint64_t v42 = v39 + 1;
      }
      else {
        uint64_t v42 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_Manager_Graph_Builder_Connection.cpp";
      }
      LODWORD(cf) = 67109634;
      HIDWORD(cf) = v37;
      *(_WORD *)v69 = 2080;
      *(void *)&v69[2] = v42;
      __int16 v70 = 1024;
      int v71 = 244;
      _os_log_error_impl(&dword_1BAA78000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Unable to calculate clock and sample rate", (uint8_t *)&cf, 0x18u);
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 1;
    return;
  }
LABEL_14:
  CFRetain(v10);
  CFStringRef v58 = v10;
  double v12 = HALS_IOContext_Manager_Graph_Builder_Connection::get_clock_sample_rate((uint64_t)this, &v58);
  CFRelease(v10);
  if (v12 == 0.0) {
    double v12 = 44100.0;
  }
  CFTypeRef v13 = v67;
  if (v67) {
    CFRetain(v67);
  }
  *(double *)a3 = v12;
  *(void *)(a3 + 8) = v13;
  *(unsigned char *)(a3 + 16) = 1;
  if (v13) {
    goto LABEL_19;
  }
}

void sub_1BABA3E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a2)
  {
    __cxa_free_exception(v18);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL applesauce::CF::details::has_key<applesauce::CF::StringRef>(CFDictionaryRef theDict, const void *a2)
{
  BOOL result = 0;
  if (theDict)
  {
    if (a2) {
      return CFDictionaryContainsKey(theDict, a2) != 0;
    }
  }
  return result;
}

uint64_t applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(void *a1, const __CFDictionary *a2, const void *a3, void *a4)
{
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,applesauce::CF::StringRef>(&cf, a2, a3);
  if (v9)
  {
    CFTypeRef v6 = cf;
    if (cf) {
      CFRetain(cf);
    }
    *a1 = v6;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void applesauce::CF::details::at_as<applesauce::CF::ArrayRef>(unsigned char *a1, CFArrayRef theArray)
{
  if (!CFArrayGetCount(theArray)) {
    goto LABEL_6;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
  char v5 = ValueAtIndex;
  if (!ValueAtIndex) {
    goto LABEL_6;
  }
  CFRetain(ValueAtIndex);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFArrayGetTypeID())
  {
    CFRelease(v5);
LABEL_6:
    char v7 = 0;
    *a1 = 0;
    goto LABEL_7;
  }
  *(void *)a1 = v5;
  char v7 = 1;
LABEL_7:
  a1[8] = v7;
}

void std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (v2) {
      CFRelease(v2);
    }
    *(unsigned char *)(a1 + 8) = 0;
  }
}

double HALS_IOContext_Manager_Graph_Builder_Connection::get_clock_sample_rate(uint64_t a1, const __CFString **a2)
{
  uint64_t v3 = *(void *)(a1 + 8) + 144;
  while (1)
  {
    uint64_t v3 = *(void *)v3;
    if (!v3) {
      break;
    }
    (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(v3 + 24) + 16))(&cf);
    CFComparisonResult v4 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)cf, a2);
    if (cf) {
      CFRelease(cf);
    }
    if (v4 == kCFCompareEqualTo) {
      return (*(double (**)(void))(**(void **)(v3 + 24) + 24))(*(void *)(v3 + 24));
    }
  }
  v9[0] = 0;
  v9[1] = 0;
  HALS_System::GetInstance(&cf, 0, v9);
  char v7 = HALS_System::CopyDeviceByUID((HALS_System *)cf, *a2, 0);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v7) {
    double v5 = (*(double (**)(HALS_ObjectMap *))(*(void *)v7 + 264))(v7);
  }
  else {
    double v5 = 0.0;
  }
  HALS_ObjectMap::ReleaseObject(v7, v6);
  return v5;
}

void sub_1BABA4208(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  HALS_ObjectMap::ReleaseObject(v12, a2);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager_Graph_Builder_Connection::get_aggregate_composition(HALS_IOContext_Manager_Graph_Builder_Connection *this@<X0>, unsigned int a2@<W1>, applesauce::CF::DictionaryRef *a3@<X8>)
{
  double v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)(*((void *)this + 1) + 16), a2);
  if (v5)
  {
    uint64_t v6 = *((unsigned int *)v5 + 5);
    v9[0] = 0;
    v9[1] = 0;
    HALS_System::GetInstance(&v10, 0, v9);
    char v7 = HALS_System::CopyDeviceByObjectID(v10, v6, *((HALS_Client **)this + 2));
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (v7)
    {
      CFStringRef v10 = (HALS_System *)0x676C6F6261636F6DLL;
      LODWORD(v11) = 0;
      CFTypeRef v13 = 0;
      int v12 = 0;
      (*(void (**)(HALS_ObjectMap *, uint64_t, HALS_System **, uint64_t, int *, CFTypeRef *, void, void, void))(*(void *)v7 + 112))(v7, v6, &v10, 8, &v12, &v13, 0, 0, 0);
      applesauce::CF::DictionaryRef::DictionaryRef(a3, v13);
      HALS_ObjectMap::ReleaseObject(v7, v8);
      return;
    }
    pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  }
  *(void *)a3 = 0;
}

void sub_1BABA4364(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  HALS_ObjectMap::ReleaseObject(v14, a2);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager_Graph_Builder_Connection::get_uid_for_meta_device_clock(HALS_IOContext_Manager_Graph_Builder_Connection *this@<X0>, unsigned int a2@<W1>, applesauce::CF::StringRef *a3@<X8>)
{
  double v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)(*((void *)this + 1) + 16), a2);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = *((unsigned int *)v5 + 5);
  v14[0] = 0;
  v14[1] = 0;
  HALS_System::GetInstance(&v15, 0, v14);
  char v7 = HALS_System::CopyDeviceByObjectID(v15, v6, *((HALS_Client **)this + 2));
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (!v7)
  {
    pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
LABEL_12:
    *(void *)a3 = 0;
    return;
  }
  unint64_t v15 = (HALS_System *)0x676C6F6261706364;
  LODWORD(v16) = 0;
  CFTypeRef cf = 0;
  LODWORD(v13) = 0;
  (*(void (**)(HALS_ObjectMap *, uint64_t, HALS_System **, uint64_t, const __CFString **, CFTypeRef *, void, void, void))(*(void *)v7 + 112))(v7, v6, &v15, 8, &v13, &cf, 0, 0, 0);
  applesauce::CF::StringRef::StringRef(a3, cf);
  unint64_t v15 = 0;
  if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)a3, (const __CFString **)&v15) == kCFCompareEqualTo)goto LABEL_8; {
  CFStringRef v8 = CFStringCreateWithBytes(0, (const UInt8 *)"", 0, 0x8000100u, 0);
  }
  CFTypeRef cf = v8;
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFComparisonResult v9 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)a3, (const __CFString **)&cf);
  CFRelease(v8);
  if (v9 == kCFCompareEqualTo)
  {
LABEL_8:
    unint64_t v15 = (HALS_System *)0x676C6F62616D7374;
    LODWORD(v16) = 0;
    CFTypeRef cf = 0;
    int v17 = 0;
    (*(void (**)(HALS_ObjectMap *, uint64_t, HALS_System **, uint64_t, int *, CFTypeRef *, void, void, void))(*(void *)v7 + 112))(v7, v6, &v15, 8, &v17, &cf, 0, 0, 0);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v13, cf);
    CFStringRef v11 = *(const __CFString **)a3;
    *(void *)a3 = v13;
    CFStringRef v13 = v11;
    if (v11) {
      CFRelease(v11);
    }
  }
  HALS_ObjectMap::ReleaseObject(v7, v10);
}

void sub_1BABA45D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  applesauce::CF::StringRef::~StringRef(v5);
  HALS_ObjectMap::ReleaseObject(v6, v8);
  _Unwind_Resume(a1);
}

BOOL HALS_IOContext_Manager_Graph_Builder_Connection::is_reference_stream(HALS_IOContext_Manager_Graph_Builder_Connection *this, unsigned int a2)
{
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v5, *(std::__shared_mutex_base **)(*((void *)this + 1) + 96), a2);
  if (v5)
  {
    uint64_t v7 = 0x676C6F6274617073;
    int v8 = 0;
    unint64_t v2 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v5, (const AMCP::Address *)&v7);
    if (HIDWORD(v2)) {
      BOOL v3 = v2 != 0;
    }
    else {
      BOOL v3 = 0;
    }
  }
  else
  {
    BOOL v3 = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

uint64_t *HALS_IOContext_Manager_Graph_Builder_Connection::get_stream(uint64_t a1, unsigned int a2, uint64_t *mcp_object, unint64_t a4)
{
  uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)(*(void *)(a1 + 8) + 16), a2);
  if (!v7) {
    return 0;
  }
  int v8 = *((_DWORD *)v7 + 5);
  v17[0] = 0;
  v17[1] = 0;
  HALS_System::GetInstance(&v14, 0, v17);
  CFStringRef v10 = HALS_System::CopyDeviceByObjectID(v14, v8, *(HALS_Client **)(a1 + 16));
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v10)
  {
    CFStringRef v14 = 0;
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    HALS_Device::CopyStreamList((uint64_t)v10, mcp_object == 1, (char **)&v14);
    if (a4 < ((char *)v15 - (char *)v14) >> 3
      && (mcp_object = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)(*(void *)(a1 + 8) + 16), *(_DWORD *)(*((void *)v14 + a4) + 16)), (unint64_t)mcp_object >> 32))
    {
      HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)&v14, v11);
      char v12 = 0;
    }
    else
    {
      HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)&v14, v11);
      char v12 = 1;
    }
  }
  else
  {
    char v12 = 1;
  }
  HALS_ObjectMap::ReleaseObject(v10, v9);
  if (v12) {
    return 0;
  }
  return mcp_object;
}

void sub_1BABA47DC(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)va, a2);
  HALS_ObjectMap::ReleaseObject(v3, v5);
  _Unwind_Resume(a1);
}

HALS_ObjectMap ***HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser(HALS_ObjectMap ***a1, HALS_Object *a2)
{
  BOOL v3 = *a1;
  CFComparisonResult v4 = a1[1];
  if (*a1 != v4)
  {
    do
      HALS_ObjectMap::ReleaseObject(*v3++, a2);
    while (v3 != v4);
    BOOL v3 = *a1;
  }
  if (v3)
  {
    a1[1] = v3;
    operator delete(v3);
  }
  return a1;
}

BOOL HALS_IOContext_Manager_Graph_Builder_Connection::is_device_an_aggregate(HALS_IOContext_Manager_Graph_Builder_Connection *this, unsigned int a2)
{
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v4, *(std::__shared_mutex_base **)(*((void *)this + 1) + 96), a2);
  if (v4) {
    BOOL v2 = AMCP::Core::Core::get_simple_required_property<1668047219u>(v4) == 1633773415;
  }
  else {
    BOOL v2 = 0;
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void HALS_IOContext_Manager_Graph_Builder_Connection::get_node_description(HALS_IOContext_Manager_Graph_Builder_Connection *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v5, *(std::__shared_mutex_base **)(*((void *)this + 1) + 96), a2);
  if (v5)
  {
    AMCP::Core::Core::get_simple_required_property<1852073061u>((AMCP::Node_Description *)a3, v5);
  }
  else
  {
    *(void *)a3 = 1;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0x100000000;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 104) = 0u;
  }
  CFComparisonResult v4 = v6;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void AMCP::Core::Core::get_simple_required_property<1852073061u>(AMCP::Node_Description *a1, AMCP::Core::Core *this)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0x676C6F626E646465;
  int v16 = 0;
  has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::has_property(this, (const AMCP::Address *)&v15);
  if (!has_property)
  {
LABEL_33:
    v17[0] = 0;
    char v22 = 0;
LABEL_34:
    AMCP::Log::Scope_Registry::get(has_property);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    char v12 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      char v24 = 4;
      strcpy((char *)v23, "ndde");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v14;
      *(_WORD *)unint64_t v30 = 2080;
      *(void *)&v30[2] = "Core.h";
      __int16 v31 = 1024;
      int v32 = 391;
      __int16 v33 = 2080;
      BOOL v34 = "optional_value.operator BOOL() == true";
      __int16 v35 = 2080;
      *(void *)CFTypeRef v36 = v23;
      *(_WORD *)&v36[8] = 1024;
      strcpy(&v36[10], "bolg");
      char v37 = 4;
      int v38 = 0;
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v24 < 0) {
        operator delete(v23[0]);
      }
    }
    abort();
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v26, (int8x8_t *)this, (unsigned int *)&v15);
  double v5 = v26;
  if (v26)
  {
    unint64_t v6 = AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Description ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v6))
    {
      AMCP::Core::Operation::call_function<AMCP::Node_Description>((uint64_t)buf, v5);
      std::__optional_destruct_base<AMCP::Node_Description,false>::__optional_destruct_base[abi:ne180100]<AMCP::Node_Description>((uint64_t)v17, (uint64_t)buf);
      for (uint64_t i = 96; i != 48; i -= 24)
      {
        v23[0] = &buf[i];
        std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
      }
      if (v39 < 0) {
        operator delete(*(void **)&v36[4]);
      }
      if (SBYTE5(v34) < 0) {
        operator delete(*(void **)v30);
      }
LABEL_19:
      int v10 = 0;
      goto LABEL_21;
    }
    unint64_t v8 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v8))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v23, v5);
      AMCP::Thing::convert_to<AMCP::Node_Description>((AMCP::Node_Description *)buf, (uint64_t)v23);
      std::__optional_destruct_base<AMCP::Node_Description,false>::__optional_destruct_base[abi:ne180100]<AMCP::Node_Description>((uint64_t)v17, (uint64_t)buf);
      for (uint64_t j = 96; j != 48; j -= 24)
      {
        uint64_t v28 = &buf[j];
        std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
      }
      if (v39 < 0) {
        operator delete(*(void **)&v36[4]);
      }
      if (SBYTE5(v34) < 0) {
        operator delete(*(void **)v30);
      }
      if (v25) {
        v25(0, v23, 0, 0);
      }
      goto LABEL_19;
    }
  }
  int v10 = 1;
LABEL_21:
  has_property = (AMCP::Log::Scope_Registry *)v27;
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v10) {
    goto LABEL_33;
  }
  if (!v22) {
    goto LABEL_34;
  }
  AMCP::Node_Description::Node_Description(a1, (const AMCP::Node_Description *)v17);
  if (v22)
  {
    for (uint64_t k = 96; k != 48; k -= 24)
    {
      *(void *)buf = &v17[k];
      std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    }
    if (v21 < 0) {
      operator delete(__p);
    }
    if (v19 < 0) {
      operator delete(v18);
    }
  }
}

void sub_1BABA4CC0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

AMCP::Node_Description *AMCP::Node_Description::Node_Description(AMCP::Node_Description *this, const AMCP::Node_Description *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  *((void *)this + 4) = *((void *)a2 + 4);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 40);
    *((void *)this + 7) = *((void *)a2 + 7);
    *(_OWORD *)((char *)this + 40) = v5;
  }
  char v6 = 0;
  uint64_t v7 = 0;
  *((void *)this + 8) = *((void *)a2 + 8);
  unint64_t v8 = (char *)a2 + 72;
  do
  {
    char v9 = v6;
    int v10 = (void *)((char *)this + 24 * v7 + 72);
    *int v10 = 0;
    v10[1] = 0;
    uint64_t v10[2] = 0;
    std::vector<AMCP::Terminal_Description>::__init_with_size[abi:ne180100]<AMCP::Terminal_Description*,AMCP::Terminal_Description*>(v10, *(long long **)&v8[24 * v7], *(long long **)&v8[24 * v7 + 8], 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)&v8[24 * v7 + 8] - *(void *)&v8[24 * v7]) >> 3));
    char v6 = 1;
    uint64_t v7 = 1;
  }
  while ((v9 & 1) == 0);
  return this;
}

void sub_1BABA4E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(char *)(v11 + 31) < 0) {
    operator delete(*v10);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  BOOL v2 = *a1;
  if (*v2)
  {
    std::vector<AMCP::Terminal_Description>::__clear[abi:ne180100]((uint64_t *)v2);
    BOOL v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<AMCP::Terminal_Description>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 104)
  {
    for (uint64_t j = -40; j != -88; j -= 24)
    {
      long long v5 = (void **)(i + j);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  a1[1] = v2;
}

void *std::vector<AMCP::Terminal_Description>::__init_with_size[abi:ne180100]<AMCP::Terminal_Description*,AMCP::Terminal_Description*>(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    std::vector<AMCP::Terminal_Description>::__vallocate[abi:ne180100](result, a4);
    BOOL result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Terminal_Description>,AMCP::Terminal_Description*,AMCP::Terminal_Description*,AMCP::Terminal_Description*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BABA4F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<AMCP::Terminal_Description>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Terminal_Description>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[104 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Terminal_Description>,AMCP::Terminal_Description*,AMCP::Terminal_Description*,AMCP::Terminal_Description*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  _OWORD v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    char v6 = a2;
    do
    {
      std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description&,AMCP::Terminal_Description*>(v4, v6);
      char v6 = (long long *)((char *)v6 + 104);
      uint64_t v4 = v11 + 104;
      v11 += 104;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<AMCP::Terminal_Description>,AMCP::Terminal_Description*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1BABA5084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description&,AMCP::Terminal_Description*>(uint64_t a1, long long *a2)
{
  char v4 = 0;
  uint64_t v5 = 0;
  long long v6 = *a2;
  long long v7 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v6;
  *(_OWORD *)(a1 + 16) = v7;
  uint64_t v8 = a1 + 40;
  uint64_t v9 = (uint64_t)a2 + 40;
  do
  {
    char v10 = v4;
    uint64_t v11 = (std::string *)(v8 + 24 * v5);
    v11->__r_.__value_.__r.__words[0] = 0;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v11, *(long long **)(v9 + 24 * v5), *(long long **)(v9 + 24 * v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v9 + 24 * v5 + 8) - *(void *)(v9 + 24 * v5)) >> 3));
    char v4 = 1;
    uint64_t v5 = 1;
  }
  while ((v10 & 1) == 0);
  uint64_t v12 = *((void *)a2 + 11);
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(void *)(a1 + 88) = v12;
  return a1;
}

void sub_1BABA5158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((v12 & 1) == 0)
  {
    uint64_t v14 = 24 * v11;
    uint64_t v15 = v10 + 16;
    do
    {
      a10 = v15 + v14;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
      v14 -= 24;
    }
    while (v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<AMCP::Terminal_Description>,AMCP::Terminal_Description*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      for (uint64_t i = -40; i != -88; i -= 24)
      {
        long long v6 = (void **)(v3 + i);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      v3 -= 104;
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Terminal_Description>>(unint64_t a1)
{
  if (a1 >= 0x276276276276277) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(104 * a1);
}

uint64_t AMCP::Core::Operation::call_function<AMCP::Node_Description>(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Description ()(void)>>();
  uint64_t v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      char v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)mach_port_t v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 154;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    char v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    int v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Node_Descriptio"
          "n, Argument_Types = <>]";
    __int16 v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    int v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v5 = v4;
  if (!*((void *)v4 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Description ()(void)>>(),
        (uint64_t v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v8 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v10;
      *(_WORD *)mach_port_t v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 161;
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    char v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    int v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Node_Descriptio"
          "n, Argument_Types = <>]";
    __int16 v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    int v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = *((void *)v4 + 3);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
}

void sub_1BABA56E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<AMCP::Node_Description,false>::__optional_destruct_base[abi:ne180100]<AMCP::Node_Description>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0;
  *(_DWORD *)BOOL result = *(_DWORD *)a2;
  long long v3 = *(_OWORD *)(a2 + 8);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(result + 8) = v3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(result + 32) = *(void *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 40);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(result + 40) = v4;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(result + 64) = *(void *)(a2 + 64);
  do
  {
    uint64_t v5 = (void *)(result + v2);
    uint64_t v6 = (void *)(a2 + v2);
    v5[9] = 0;
    v5[10] = 0;
    v5[11] = 0;
    *(_OWORD *)(v5 + 9) = *(_OWORD *)(a2 + v2 + 72);
    v5[11] = *(void *)(a2 + v2 + 88);
    v6[9] = 0;
    v6[10] = 0;
    v6[11] = 0;
    v2 += 24;
  }
  while (v2 != 48);
  *(unsigned char *)(result + 120) = 1;
  return result;
}

AMCP::Node_Description *AMCP::Thing::convert_to<AMCP::Node_Description>(AMCP::Node_Description *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<AMCP::Node_Description>();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  std::runtime_error v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    uint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (const AMCP::Node_Description *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6) {
      return AMCP::Node_Description::Node_Description(a1, v6);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    mach_port_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<AMCP::Node_Description>();
  memset(v17, 0, sizeof(v17));
  uint64_t v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    uint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    char v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = (const AMCP::Node_Description *)v18(4, v17, 0, &v15);
  if (!v8)
  {
    mach_port_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    long long v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  BOOL result = AMCP::Node_Description::Node_Description(a1, v8);
  if (v18) {
    return (AMCP::Node_Description *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BABA59B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<AMCP::Node_Description>()
{
  v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[72];
}

uint64_t AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Description ()(void)>>()
{
  v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[70];
}

uint64_t HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(uint64_t a1, uint64_t a2)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  int v2 = *(std::__shared_mutex_base **)(*(void *)(a1 + 8) + 96);
  v7[0] = &unk_1F1461F18;
  v7[1] = a2;
  v7[3] = v7;
  AMCP::Core::Broker::fetch_first_core_if (&v5, v2, (uint64_t)v7);
  std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](v7);
  if (v5) {
    uint64_t v3 = *v5;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

void *std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK47HALS_IOContext_Manager_Graph_Builder_Connection22get_node_from_node_uidEN10applesauce2CF9StringRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  if (!AMCP::is_base_of((AMCP *)0x616E6F64, simple_required)) {
    return 0;
  }
  AMCP::Core::Core::get_simple_required_property<1853188452u>(&cf, *a2);
  BOOL v5 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(**(const __CFString ***)(a1 + 8), (const __CFString **)&cf) == kCFCompareEqualTo;
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

uint64_t AMCP::Core::Core::get_simple_required_property<1853188452u>(void *a1, AMCP::Core::Core *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  strcpy(buf, "diunbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(&cf, a2, (const AMCP::Address *)buf);
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v6 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      long long v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      char v10 = 4;
      strcpy((char *)__p, "nuid");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v8;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      __int16 v14 = 1024;
      int v15 = 391;
      __int16 v16 = 2080;
      long long v17 = "optional_value.operator BOOL() == true";
      __int16 v18 = 2080;
      uint64_t v19 = __p;
      __int16 v20 = 1024;
      int v21 = 1735159650;
      __int16 v22 = 1024;
      int v23 = 0;
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  CFTypeRef v4 = cf;
  if (cf) {
    CFRetain(cf);
  }
  *a1 = v4;
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void sub_1BABA5DC0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1461F18;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F1461F18;
  result[1] = v3;
  return result;
}

void std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_node_from_node_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
}

uint64_t HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(uint64_t a1, uint64_t a2)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_mutex_base **)(*(void *)(a1 + 8) + 96);
  v7[0] = &unk_1F1461E98;
  v7[1] = a2;
  v7[3] = v7;
  AMCP::Core::Broker::fetch_first_core_if (&v5, v2, (uint64_t)v7);
  std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](v7);
  if (v5) {
    uint64_t v3 = *v5;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

void *std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK47HALS_IOContext_Manager_Graph_Builder_Connection26get_device_from_device_uidEN10applesauce2CF9StringRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  if (!AMCP::is_base_of((AMCP *)0x61646576, simple_required)) {
    return 0;
  }
  AMCP::Core::Core::get_simple_required_property<1969841184u>(&cf, *a2);
  BOOL v5 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(**(const __CFString ***)(a1 + 8), (const __CFString **)&cf) == kCFCompareEqualTo;
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1461E98;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F1461E98;
  result[1] = v3;
  return result;
}

void std::__function::__func<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Graph_Builder_Connection::get_device_from_device_uid(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
}

BOOL HALS_IOContext_Manager_Graph_Builder_Connection::object_has_expired(HALS_IOContext_Manager_Graph_Builder_Connection *this, unsigned int a2)
{
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v4, *(std::__shared_mutex_base **)(*((void *)this + 1) + 96), a2);
  uint64_t v2 = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2 == 0;
}

void HALS_IOContext_Manager_Graph_Builder_Connection::~HALS_IOContext_Manager_Graph_Builder_Connection(HALS_IOContext_Manager_Graph_Builder_Connection *this)
{
}

BOOL AMCP::HAL::hal_property_value_is_object_id(AMCP::HAL *this)
{
  return (AMCP::HAL::get_hal_property_value_type_code(this) & 0x1E) == 10;
}

uint64_t AMCP::HAL::get_hal_property_value_type_code(AMCP::HAL *this)
{
  uint64_t v1 = 3;
  if ((int)this > 1835295842)
  {
    if ((int)this <= 1935962741)
    {
      if ((int)this > 1885762668)
      {
        if ((int)this > 1919839343)
        {
          if ((int)this > 1935894637)
          {
            if ((int)this <= 1935946357)
            {
              if ((this - 1935896178) < 2) {
                return 6;
              }
              if (this == 1935894638) {
                return v1;
              }
              int v10 = 1935894894;
              goto LABEL_407;
            }
            if ((int)this <= 1935960433)
            {
              if (this != 1935946358)
              {
                int v5 = 1935959154;
                goto LABEL_402;
              }
              return 7;
            }
            if (this == 1935960434) {
              return v1;
            }
            int v3 = 1935962738;
          }
          else
          {
            if ((int)this <= 1935762291)
            {
              if ((int)this <= 1920297315)
              {
                if (this != 1919839344)
                {
                  int v10 = 1920168547;
                  goto LABEL_407;
                }
                return 1;
              }
              if (this == 1920297316) {
                return 10;
              }
              int v9 = 1934587252;
              goto LABEL_390;
            }
            if ((int)this <= 1935892840)
            {
              if (this == 1935762292) {
                return v1;
              }
              int v5 = 1935763060;
              goto LABEL_402;
            }
            if (this == 1935892841) {
              return 4;
            }
            int v3 = 1935893353;
          }
LABEL_415:
          if (this != v3) {
            return 0;
          }
          return 4;
        }
        if ((int)this > 1886353265)
        {
          if ((int)this <= 1919186466)
          {
            if ((int)this <= 1902539641)
            {
              if (this == 1886353266) {
                return v1;
              }
              int v5 = 1886546294;
              goto LABEL_402;
            }
            if (this == 1902539642) {
              return v1;
            }
            return this == 1919055206;
          }
          if ((int)this <= 1919251301)
          {
            if (this != 1919186467)
            {
              int v5 = 1919251299;
              goto LABEL_402;
            }
            return 11;
          }
          if (this == 1919251302 || this == 1919512167) {
            return v1;
          }
          if (this != 1919773028) {
            return 0;
          }
          return 17;
        }
        if ((int)this > 1886156134)
        {
          if ((int)this > 1886221683)
          {
            if (this == 1886221684) {
              return v1;
            }
            int v5 = 1886353256;
          }
          else
          {
            if (this == 1886156135) {
              return v1;
            }
            int v5 = 1886218606;
          }
          goto LABEL_402;
        }
        if ((int)this > 1885956451)
        {
          if (this == 1885956452) {
            return 6;
          }
          int v6 = 1886152483;
          goto LABEL_366;
        }
        if (this != 1885762669)
        {
          int v9 = 1885954665;
          goto LABEL_390;
        }
      }
      else
      {
        if ((int)this <= 1851878756)
        {
          if ((int)this > 1836411235)
          {
            if ((int)this > 1836475426)
            {
              if ((int)this > 1836479330)
              {
                if (this != 1836479331)
                {
                  int v5 = 1836479590;
                  goto LABEL_402;
                }
                return 7;
              }
              if (this == 1836475427) {
                return 9;
              }
              unsigned __int16 v15 = 25698;
            }
            else
            {
              if ((int)this <= 1836462691)
              {
                if (this == 1836411236) {
                  return 6;
                }
                int v5 = 1836414053;
                goto LABEL_402;
              }
              if (this == 1836462692) {
                return 7;
              }
              unsigned __int16 v15 = 12915;
            }
            int v12 = v15 | 0x6D760000;
            goto LABEL_327;
          }
          if ((int)this > 1835821925)
          {
            if ((int)this > 1836281965)
            {
              if (this != 1836281966)
              {
                int v5 = 1836282994;
                goto LABEL_402;
              }
              return 7;
            }
            if (this == 1835821926) {
              return v1;
            }
            int v3 = 1836281891;
            goto LABEL_415;
          }
          if ((int)this > 1835295858)
          {
            if (this != 1835295859)
            {
              int v5 = 1835628607;
              goto LABEL_402;
            }
            return 4;
          }
          if (this == 1835295843) {
            return 6;
          }
          int v4 = 1835295854;
          goto LABEL_411;
        }
        if ((int)this <= 1853059699)
        {
          if ((int)this > 1852400498)
          {
            if ((int)this <= 1852601963)
            {
              if (this == 1852400499) {
                return 6;
              }
              int v3 = 1852601891;
              goto LABEL_415;
            }
            if (this != 1852601964)
            {
              int v17 = 1853059619;
LABEL_381:
              if (this != v17) {
                return 0;
              }
              return 9;
            }
            return 4;
          }
          if ((int)this <= 1851878769)
          {
            if (this != 1851878757)
            {
              int v10 = 1851878764;
              goto LABEL_407;
            }
            return 5;
          }
          if (this == 1851878770) {
            return v1;
          }
          int v12 = 1852012899;
          goto LABEL_327;
        }
        if ((int)this <= 1870098019)
        {
          if ((int)this > 1869638758)
          {
            if (this == 1869638759) {
              return 6;
            }
            int v5 = 1870030194;
            goto LABEL_402;
          }
          if (this != 1853059700)
          {
            int v5 = 1869180523;
            goto LABEL_402;
          }
          return 8;
        }
        if ((int)this <= 1885762594)
        {
          if (this == 1870098020) {
            return 11;
          }
          int v16 = 1885762592;
          goto LABEL_306;
        }
        if (this == 1885762595) {
          return 13;
        }
        if (this != 1885762623)
        {
          if (this != 1885762657) {
            return 0;
          }
          return 14;
        }
      }
    }
    else
    {
      if ((int)this > 1937077092)
      {
        if ((int)this <= 1969841249)
        {
          if ((int)this > 1952805484)
          {
            if ((int)this <= 1953326882)
            {
              if ((int)this > 1953002100)
              {
                if (this == 1953002101) {
                  return v1;
                }
                int v5 = 1953325673;
              }
              else
              {
                if (this == 1952805485) {
                  return v1;
                }
                int v5 = 1953002099;
              }
              goto LABEL_402;
            }
            if ((int)this > 1969514099)
            {
              if (this == 1969514100) {
                return v1;
              }
              int v10 = 1969841184;
              goto LABEL_407;
            }
            if (this != 1953326883)
            {
              int v5 = 1953653102;
              goto LABEL_402;
            }
            return 4;
          }
          if ((int)this > 1937140844)
          {
            if ((int)this > 1952542819)
            {
              if (this == 1952542820) {
                return v1;
              }
              int v5 = 1952542835;
              goto LABEL_402;
            }
            if (this != 1937140845)
            {
              int v5 = 1937142886;
              goto LABEL_402;
            }
            return 7;
          }
          if ((int)this > 1937138722)
          {
            if (this == 1937138723) {
              return 9;
            }
            unsigned __int16 v8 = 27748;
          }
          else
          {
            if (this == 1937077093) {
              return 1;
            }
            unsigned __int16 v8 = 12900;
          }
          int v12 = v8 | 0x73760000;
          goto LABEL_327;
        }
        if ((int)this <= 1986359922)
        {
          if ((int)this > 1970496881)
          {
            if ((int)this > 1986229349)
            {
              if (this == 1986229350) {
                return v1;
              }
              int v17 = 1986290211;
              goto LABEL_381;
            }
            if (this == 1970496882) {
              return v1;
            }
            int v12 = 1983013986;
            goto LABEL_327;
          }
          if ((this - 1969841250) >= 4)
          {
            int v5 = 1970170980;
            goto LABEL_402;
          }
          return 10;
        }
        if ((int)this <= 1987013731)
        {
          if ((int)this <= 1986880098)
          {
            if (this == 1986359923) {
              return v1;
            }
            int v5 = 1986425722;
            goto LABEL_402;
          }
          if (this == 1986880099) {
            return 7;
          }
          int v12 = 1986885219;
          goto LABEL_327;
        }
        if ((int)this <= 2003136115)
        {
          if (this == 1987013732) {
            return 7;
          }
          int v12 = 1987013741;
          goto LABEL_327;
        }
        if (this == 2003136116) {
          return v1;
        }
        if (this != 2020373603) {
          return 0;
        }
        return 8;
      }
      if ((int)this > 1936811107)
      {
        if ((int)this <= 1936879203)
        {
          if ((int)this <= 1936811875)
          {
            if (this != 1936811108)
            {
              int v7 = 1936811109;
              goto LABEL_377;
            }
            return 1;
          }
          if ((this - 1936811876) <= 0x10)
          {
            if (((1 << ((_BYTE)this - 100)) & 0x18005) != 0) {
              return 7;
            }
            if (this == 1936811890) {
              return 9;
            }
          }
          if (this != 1936876644) {
            return 0;
          }
        }
        else
        {
          if ((int)this > 1936945762)
          {
            if ((int)this > 1937009954)
            {
              if (this != 1937009955)
              {
                if (this == 1937010031) {
                  return v1;
                }
                int v5 = 1937010788;
                goto LABEL_402;
              }
              return 11;
            }
            if (this == 1936945763) {
              return 4;
            }
            int v9 = 1937007734;
            goto LABEL_390;
          }
          if ((int)this > 1936941930)
          {
            if (this == 1936941931) {
              return v1;
            }
            int v4 = 1936941934;
            goto LABEL_411;
          }
          if (this != 1936879204)
          {
            int v3 = 1936941859;
            goto LABEL_415;
          }
        }
        return 18;
      }
      if ((int)this > 1936482680)
      {
        if ((int)this <= 1936682094)
        {
          if ((int)this > 1936553331)
          {
            if (this == 1936553332) {
              return v1;
            }
            int v10 = 1936618861;
            goto LABEL_407;
          }
          if (this != 1936482681)
          {
            int v5 = 1936483696;
            goto LABEL_402;
          }
          return 1;
        }
        if ((int)this <= 1936745314)
        {
          if (this == 1936682095) {
            return v1;
          }
          int v12 = 1936744814;
          goto LABEL_327;
        }
        if (this == 1936745315) {
          return 4;
        }
        if (this == 1936745334) {
          return 7;
        }
        int v3 = 1936748067;
        goto LABEL_415;
      }
      if ((int)this <= 1936092512)
      {
        if ((int)this <= 1936092450)
        {
          if (this == 1935962742) {
            return v1;
          }
          int v5 = 1936092276;
          goto LABEL_402;
        }
        if (this != 1936092451)
        {
          unsigned __int16 v14 = 27967;
          goto LABEL_305;
        }
        return 13;
      }
      if ((int)this <= 1936092531)
      {
        if (this != 1936092513)
        {
          unsigned __int16 v14 = 28013;
LABEL_305:
          int v16 = v14 | 0x73660000;
LABEL_306:
          if (this != v16) {
            return 0;
          }
          return 12;
        }
        return 14;
      }
      if (this != 1936092532)
      {
        int v9 = 1936224868;
        goto LABEL_390;
      }
    }
    return 12;
  }
  if ((int)this <= 1684434035)
  {
    if ((int)this <= 1667523954)
    {
      if ((int)this > 1650685547)
      {
        if ((int)this > 1651472418)
        {
          if ((int)this > 1652060005)
          {
            if ((int)this <= 1667327846)
            {
              if (this == 1652060006) {
                return v1;
              }
              int v5 = 1652060014;
              goto LABEL_402;
            }
            if (this != 1667327847)
            {
              if (this == 1667330160) {
                return 6;
              }
              int v4 = 1667460717;
              goto LABEL_411;
            }
            return 10;
          }
          if ((int)this > 1651735074)
          {
            if (this != 1651735075)
            {
              int v10 = 1651861860;
              goto LABEL_407;
            }
            return 9;
          }
          if (this != 1651472419)
          {
            int v5 = 1651730810;
            goto LABEL_402;
          }
          return 11;
        }
        if ((int)this <= 1651013224)
        {
          if ((int)this > 1651007860)
          {
            if (this == 1651007861) {
              return v1;
            }
            int v5 = 1651010921;
            goto LABEL_402;
          }
          if (this == 1650685548) {
            return v1;
          }
          int v6 = 1650751011;
          goto LABEL_366;
        }
        if ((int)this > 1651272545)
        {
          if (this != 1651272546)
          {
            int v7 = 1651272548;
            goto LABEL_377;
          }
          return 1;
        }
        if (this == 1651013225) {
          return v1;
        }
        int v9 = 1651074160;
LABEL_390:
        if (this != v9) {
          return 0;
        }
        return 10;
      }
      if ((int)this <= 1634496614)
      {
        if ((int)this <= 1634038356)
        {
          if ((int)this <= 1633970531)
          {
            if (this == 1346585414) {
              return v1;
            }
            int v7 = 1633906541;
            goto LABEL_377;
          }
          if (this != 1633970532)
          {
            int v5 = 1634038341;
            goto LABEL_402;
          }
          return 17;
        }
        if ((int)this > 1634300530)
        {
          if (this == 1634300531) {
            return 17;
          }
          int v6 = 1634429294;
        }
        else
        {
          if (this == 1634038357) {
            return 6;
          }
          int v6 = 1634169456;
        }
LABEL_366:
        if (this != v6) {
          return 0;
        }
        return 11;
      }
      if ((int)this <= 1634955891)
      {
        if ((int)this <= 1634755427)
        {
          if (this == 1634496615) {
            return v1;
          }
          int v10 = 1634562932;
          goto LABEL_407;
        }
        if (this == 1634755428) {
          return 6;
        }
        int v12 = 1634758774;
        goto LABEL_327;
      }
      if ((int)this > 1650682914)
      {
        if (this != 1650682915)
        {
          int v5 = 1650682995;
          goto LABEL_402;
        }
        return 11;
      }
      if (this != 1634955892)
      {
        int v5 = 1635087471;
        goto LABEL_402;
      }
      return 8;
    }
    if ((int)this > 1668506479)
    {
      if ((int)this > 1682929011)
      {
        if ((int)this <= 1684157045)
        {
          if ((int)this > 1684107363)
          {
            if (this == 1684107364) {
              return v1;
            }
            unsigned __int16 v13 = 29795;
          }
          else
          {
            if (this == 1682929012) {
              return 10;
            }
            unsigned __int16 v13 = 26471;
          }
          int v5 = v13 | 0x64610000;
          goto LABEL_402;
        }
        if ((int)this > 1684301170)
        {
          if (this == 1684301171) {
            return 15;
          }
          if (this == 1684301174) {
            return v1;
          }
          int v6 = 1684370979;
          goto LABEL_366;
        }
        if (this == 1684157046) {
          return 7;
        }
        int v3 = 1684236338;
        goto LABEL_415;
      }
      if ((int)this > 1668639075)
      {
        if ((int)this <= 1668702577)
        {
          if (this == 1668639076) {
            return 6;
          }
          int v3 = 1668641652;
          goto LABEL_415;
        }
        if (this == 1668702578) {
          return v1;
        }
        int v9 = 1682533920;
        goto LABEL_390;
      }
      if ((int)this > 1668510817)
      {
        if (this == 1668510818) {
          return v1;
        }
        int v6 = 1668575852;
        goto LABEL_366;
      }
      if (this == 1668506480) {
        return v1;
      }
      unsigned __int16 v11 = 29283;
LABEL_263:
      int v3 = v11 | 0x63730000;
      goto LABEL_415;
    }
    if ((int)this <= 1668049763)
    {
      if ((int)this <= 1667787119)
      {
        if ((int)this > 1667591276)
        {
          if (this == 1667591277) {
            return v1;
          }
          int v5 = 1667658618;
          goto LABEL_402;
        }
        if (this == 1667523955) {
          return 15;
        }
        int v9 = 1667523958;
        goto LABEL_390;
      }
      if ((int)this <= 1668047218)
      {
        if (this == 1667787120) {
          return 5;
        }
        int v4 = 1667788397;
        goto LABEL_411;
      }
      if (this == 1668047219) {
        return v1;
      }
      int v6 = 1668049699;
      goto LABEL_366;
    }
    if ((int)this > 1668181612)
    {
      if ((int)this <= 1668506474)
      {
        if (this == 1668181613) {
          return 5;
        }
        unsigned __int16 v11 = 25379;
        goto LABEL_263;
      }
      if (this == 1668506475) {
        return v1;
      }
      int v4 = 1668506478;
    }
    else
    {
      if ((int)this <= 1668050794)
      {
        if (this == 1668049764) {
          return v1;
        }
        int v5 = 1668049771;
        goto LABEL_402;
      }
      if (this == 1668050795) {
        return v1;
      }
      int v4 = 1668181110;
    }
LABEL_411:
    if (this != v4) {
      return 0;
    }
    return 5;
  }
  if ((int)this <= 1751740523)
  {
    if ((int)this > 1698776146)
    {
      if ((int)this > 1735551331)
      {
        if ((int)this > 1751413615)
        {
          if ((int)this > 1751737453)
          {
            if (this == 1751737454) {
              return v1;
            }
            if (this != 1751740451)
            {
              int v3 = 1751740518;
              goto LABEL_415;
            }
            return 4;
          }
          if (this == 1751413616) {
            return 15;
          }
          int v7 = 1751474532;
LABEL_377:
          if (this != v7) {
            return 0;
          }
          return 15;
        }
        if ((int)this > 1735750500)
        {
          if (this != 1735750501)
          {
            int v5 = 1751412337;
            goto LABEL_402;
          }
          return 4;
        }
        if (this != 1735551332)
        {
          int v7 = 1735554416;
          goto LABEL_377;
        }
        return 1;
      }
      if ((int)this <= 1718843938)
      {
        if ((int)this > 1702193507)
        {
          if (this == 1702193508) {
            return v1;
          }
          int v5 = 1718839674;
          goto LABEL_402;
        }
        if (this == 1698776147) {
          return v1;
        }
        int v6 = 1701733411;
        goto LABEL_366;
      }
      if ((int)this > 1735354733)
      {
        if (this == 1735354734) {
          return v1;
        }
        int v5 = 1735356005;
        goto LABEL_402;
      }
      if (this != 1718843939)
      {
        int v10 = 1719105134;
        goto LABEL_407;
      }
      return 9;
    }
    if ((int)this > 1685089382)
    {
      if ((int)this <= 1685222500)
      {
        if ((this - 1685218913) <= 0x13 && ((1 << ((_BYTE)this - 97)) & 0x90001) != 0) {
          return v1;
        }
        int v10 = 1685089383;
        goto LABEL_407;
      }
      if ((int)this <= 1685414762)
      {
        if (this == 1685222501) {
          return v1;
        }
        int v5 = 1685287012;
        goto LABEL_402;
      }
      if (this != 1685414763)
      {
        int v5 = 1685416292;
        goto LABEL_402;
      }
      return 1;
    }
    if ((int)this > 1684500593)
    {
      if ((int)this > 1684893795)
      {
        if (this == 1684893796) {
          return v1;
        }
        int v5 = 1685087596;
        goto LABEL_402;
      }
      if (this != 1684500594)
      {
        int v5 = 1684629094;
        goto LABEL_402;
      }
      return 1;
    }
    if ((int)this <= 1684498543)
    {
      if (this == 1684434036) {
        return v1;
      }
      int v5 = 1684498541;
      goto LABEL_402;
    }
    if (this == 1684498544) {
      return v1;
    }
    int v12 = 1684500589;
LABEL_327:
    if (this != v12) {
      return 0;
    }
    return 7;
  }
  if ((int)this > 1818456931)
  {
    if ((int)this > 1819111267)
    {
      if ((int)this > 1819634019)
      {
        if ((int)this > 1835101041)
        {
          if (this != 1835101042)
          {
            if (this == 1835103092) {
              return v1;
            }
            int v3 = 1835295779;
            goto LABEL_415;
          }
          return 5;
        }
        if (this != 1819634020)
        {
          int v5 = 1835100526;
          goto LABEL_402;
        }
        return 15;
      }
      if ((int)this > 1819501421)
      {
        if (this == 1819501422) {
          return 6;
        }
        int v5 = 1819569763;
        goto LABEL_402;
      }
      if (this == 1819111268) {
        return 6;
      }
      int v10 = 1819173229;
LABEL_407:
      if (this == v10) {
        return 6;
      }
      return 0;
    }
    if ((int)this > 1818850144)
    {
      if ((int)this <= 1818850925)
      {
        if (this == 1818850145) {
          return 4;
        }
        int v3 = 1818850162;
        goto LABEL_415;
      }
      if (this == 1818850926) {
        return v1;
      }
      int v10 = 1819107691;
      goto LABEL_407;
    }
    if ((int)this <= 1818456949)
    {
      if (this != 1818456932)
      {
        unsigned __int16 v2 = 29550;
LABEL_142:
        int v10 = v2 | 0x6C630000;
        goto LABEL_407;
      }
      return 7;
    }
    if (this != 1818456950)
    {
      int v5 = 1818457190;
      goto LABEL_402;
    }
    return 7;
  }
  if ((int)this > 1769174369)
  {
    if ((int)this > 1818453106)
    {
      if ((int)this > 1818454125)
      {
        if (this == 1818454126 || this == 1818455660) {
          return 6;
        }
        unsigned __int16 v2 = 28270;
        goto LABEL_142;
      }
      if (this == 1818453107) {
        return 7;
      }
      int v12 = 1818453110;
      goto LABEL_327;
    }
    if ((int)this <= 1818452845)
    {
      if (this == 1769174370) {
        return v1;
      }
      int v5 = 1784767339;
      goto LABEL_402;
    }
    if (this != 1818452846)
    {
      int v17 = 1818453106;
      goto LABEL_381;
    }
    return 6;
  }
  if ((int)this > 1768187245)
  {
    if ((int)this > 1768845171)
    {
      if (this == 1768845172) {
        return v1;
      }
      int v7 = 1768907636;
    }
    else
    {
      if (this == 1768187246) {
        return v1;
      }
      int v7 = 1768777573;
    }
    goto LABEL_377;
  }
  if ((int)this <= 1752135522)
  {
    if (this == 1751740524) {
      return 6;
    }
    int v5 = 1752131442;
LABEL_402:
    if (this != v5) {
      return 0;
    }
    return v1;
  }
  if (this != 1752135523)
  {
    if (this != 1768124270) {
      return 0;
    }
    return 16;
  }
  return v1;
}

uint64_t AMCP::HAL::get_hal_property_qualifier_type_code(AMCP::HAL *this)
{
  int v1 = (int)this;
  uint64_t result = 0;
  if (v1 > 1836462691)
  {
    if (v1 <= 1936092524)
    {
      if (v1 > 1886218605)
      {
        if (v1 <= 1935896177)
        {
          if (v1 == 1886218606 || v1 == 1934587252) {
            return 3;
          }
          int v3 = 1935894894;
          goto LABEL_62;
        }
        if ((v1 - 1935896178) < 2) {
          return 3;
        }
        int v4 = 1935946358;
        goto LABEL_68;
      }
      if (v1 <= 1870098019)
      {
        if (v1 != 1836462692 && v1 != 1836462707)
        {
          int v3 = 1852400499;
          goto LABEL_62;
        }
        return 7;
      }
      if (v1 == 1870098020) {
        return 4;
      }
      if (v1 != 1885762669)
      {
        if (v1 != 1885954665) {
          return result;
        }
        return 6;
      }
    }
    else
    {
      if (v1 > 1953325672)
      {
        if ((v1 - 1969841250) < 4 || v1 == 1953325673) {
          return 6;
        }
        int v4 = 1983013986;
        goto LABEL_68;
      }
      if (v1 > 1936811891)
      {
        if (v1 > 1936941933)
        {
          if (v1 == 1936941934) {
            return 3;
          }
          int v4 = 1937125988;
          goto LABEL_68;
        }
        if (v1 != 1936811892)
        {
          int v3 = 1936941931;
          goto LABEL_62;
        }
        return 7;
      }
      if (v1 != 1936092525)
      {
        if (v1 == 1936224868) {
          return 3;
        }
        int v4 = 1936811878;
        goto LABEL_68;
      }
    }
    return 12;
  }
  if (v1 <= 1684498540)
  {
    if (v1 <= 1668181109)
    {
      if (v1 > 1667658617)
      {
        if (v1 == 1667658618 || v1 == 1667787120) {
          return 3;
        }
        int v3 = 1668049771;
        goto LABEL_62;
      }
      if (v1 != 1651074160)
      {
        if (v1 == 1667327847 || v1 == 1667523958) {
          return 15;
        }
        return result;
      }
      return 6;
    }
    if (v1 <= 1682533919)
    {
      if (v1 == 1668181110 || v1 == 1668506475) {
        return 3;
      }
      int v3 = 1668506478;
      goto LABEL_62;
    }
    if (v1 == 1682533920 || v1 == 1682929012) {
      return 3;
    }
    int v4 = 1684157046;
LABEL_68:
    if (v1 != v4) {
      return result;
    }
    return 7;
  }
  if (v1 <= 1818453106)
  {
    if (v1 <= 1684500593)
    {
      if (v1 == 1684498541 || v1 == 1684498544) {
        return 3;
      }
      int v3 = 1684500589;
      goto LABEL_62;
    }
    if (v1 == 1684500594) {
      return 3;
    }
    if (v1 != 1685416292)
    {
      int v3 = 1751740524;
      goto LABEL_62;
    }
    return 6;
  }
  if (v1 <= 1818456941)
  {
    if (v1 == 1818453107) {
      return 7;
    }
    if (v1 == 1818455660) {
      return 3;
    }
    int v4 = 1818456932;
    goto LABEL_68;
  }
  if (v1 <= 1835295842)
  {
    if (v1 != 1818456942)
    {
      int v3 = 1819501422;
      goto LABEL_62;
    }
    return 3;
  }
  if (v1 == 1835295843) {
    return 3;
  }
  int v3 = 1835295854;
LABEL_62:
  if (v1 == v3) {
    return 3;
  }
  return result;
}

uint64_t AMCP::HAL::get_hal_type_code_for_mcp(int a1)
{
  if ((a1 - 1) > 0x1B) {
    return 0;
  }
  else {
    return dword_1BB002900[a1 - 1];
  }
}

uint64_t AMCP::HAL::translate_hal_control_address_to_device(AMCP::HAL *this, uint64_t a2, unsigned int a3, int *a4, const AudioObjectPropertyAddress *a5)
{
  int v5 = *a4;
  if (*a4 <= 1818456949)
  {
    if (v5 <= 1818453105)
    {
      if (v5 <= 1651272547)
      {
        if (v5 != 1650685548)
        {
          if (v5 != 1651272546 || this != 1936028002) {
            goto LABEL_257;
          }
          goto LABEL_220;
        }
        if ((int)this > 1819504225)
        {
          if ((int)this <= 1936028001)
          {
            if ((int)this > 1852601963)
            {
              if (this != 1852601964)
              {
                if (this != 1885888878)
                {
                  if (this != 1885893481) {
                    goto LABEL_257;
                  }
                  goto LABEL_222;
                }
LABEL_176:
                uint64_t v7 = 1885888768;
                goto LABEL_94;
              }
              goto LABEL_188;
            }
            if (this != 1819504226)
            {
              if (this != 1836414053) {
                goto LABEL_257;
              }
LABEL_230:
              if (a2 == 1886679669)
              {
                uint64_t v6 = 117;
LABEL_232:
                uint64_t v7 = 1953001984;
                goto LABEL_233;
              }
              uint64_t v7 = 1836413952;
LABEL_235:
              uint64_t v6 = 101;
              return v6 | v7 | (a2 << 32);
            }
            goto LABEL_121;
          }
          if ((int)this > 1937072748)
          {
            if (this != 1937072749)
            {
              if (this == 1952541794) {
                goto LABEL_103;
              }
              if (this != 1999790690) {
                goto LABEL_257;
              }
              goto LABEL_259;
            }
LABEL_125:
            uint64_t v7 = 1936553216;
            goto LABEL_126;
          }
          if (this == 1936028002) {
            goto LABEL_220;
          }
          if (this != 1936682095)
          {
LABEL_91:
            if (this == 1936744814) {
              goto LABEL_92;
            }
LABEL_257:
            uint64_t v6 = 0;
            uint64_t v7 = 0;
            return v6 | v7 | (a2 << 32);
          }
LABEL_131:
          if (a2 != 1886679669)
          {
            uint64_t v7 = 1936681984;
            uint64_t v6 = 111;
            return v6 | v7 | (a2 << 32);
          }
          uint64_t v6 = 115;
          goto LABEL_232;
        }
        if ((int)this > 1685287522)
        {
          if ((int)this <= 1751740517)
          {
            if (this == 1685287523)
            {
LABEL_140:
              uint64_t v10 = 1936941824;
LABEL_226:
              uint64_t v7 = v10 + 3840;
              uint64_t v6 = 99;
              return v6 | v7 | (a2 << 32);
            }
            if (this != 1702259059)
            {
              if (this != 1718432370) {
                goto LABEL_257;
              }
              goto LABEL_145;
            }
            goto LABEL_146;
          }
          if (this != 1751740518)
          {
            if (this != 1784767339)
            {
              if (this != 1815241314) {
                goto LABEL_257;
              }
              goto LABEL_193;
            }
LABEL_194:
            uint64_t v7 = 1784767232;
            uint64_t v6 = 107;
            return v6 | v7 | (a2 << 32);
          }
LABEL_114:
          uint64_t v6 = 102;
          goto LABEL_204;
        }
        if ((int)this > 1668049263)
        {
          if (this == 1668049264) {
            goto LABEL_109;
          }
          if (this != 1684370292)
          {
            if (this != 1684895092) {
              goto LABEL_257;
            }
            goto LABEL_117;
          }
          goto LABEL_182;
        }
        if (this == 1650602615) {
          goto LABEL_227;
        }
        if (this != 1668047723) {
          goto LABEL_257;
        }
LABEL_225:
        uint64_t v10 = 1668506368;
        goto LABEL_226;
      }
      if (v5 == 1651272548)
      {
        if (this != 1936028002) {
          goto LABEL_257;
        }
        uint64_t v7 = 1936811008;
        goto LABEL_235;
      }
      if (v5 != 1668049771) {
        goto LABEL_257;
      }
      if (this != 1668047723)
      {
LABEL_90:
        if (this != 1936028002) {
          goto LABEL_91;
        }
        goto LABEL_220;
      }
      uint64_t v6 = 107;
LABEL_202:
      uint64_t v7 = 1668506368;
      return v6 | v7 | (a2 << 32);
    }
    if (v5 > 1818453109)
    {
      if (v5 == 1818453110)
      {
        if ((int)this <= 1836414052) {
          goto LABEL_104;
        }
        if ((int)this <= 1936682094)
        {
          if ((int)this <= 1885893480) {
            goto LABEL_173;
          }
          if (this == 1885893481) {
            goto LABEL_222;
          }
          if (this == 1936028002) {
            goto LABEL_220;
          }
          if (this != 1936028007) {
            goto LABEL_257;
          }
          uint64_t v6 = 100;
          goto LABEL_219;
        }
        if ((int)this <= 1937072757) {
          goto LABEL_122;
        }
        if ((int)this <= 1986817380)
        {
          if (this == 1937072758)
          {
            uint64_t v6 = 100;
            goto LABEL_262;
          }
LABEL_102:
          if (this != 1952541794) {
            goto LABEL_257;
          }
          goto LABEL_103;
        }
        if (this == 1999790690)
        {
LABEL_259:
          uint64_t v7 = 1999790592;
          goto LABEL_260;
        }
        if (this != 1986817381) {
          goto LABEL_257;
        }
        if (a2 != 1886679669)
        {
          uint64_t v7 = 1987013632;
          goto LABEL_221;
        }
        uint64_t v6 = 98;
        unsigned __int16 v11 = 25600;
LABEL_256:
        uint64_t v7 = v11 | 0x6D760000u;
        goto LABEL_233;
      }
      if (v5 != 1818456932) {
        goto LABEL_257;
      }
      if ((int)this <= 1836414052) {
        goto LABEL_104;
      }
      if ((int)this <= 1936682094)
      {
        if ((int)this <= 1885893480) {
          goto LABEL_173;
        }
        if (this == 1885893481) {
          goto LABEL_222;
        }
        if (this == 1936028002) {
          goto LABEL_220;
        }
        if (this != 1936028007) {
          goto LABEL_257;
        }
        uint64_t v6 = 116;
        goto LABEL_219;
      }
      if ((int)this <= 1937072757) {
        goto LABEL_122;
      }
      if ((int)this <= 1986817380)
      {
        if (this == 1937072758)
        {
          uint64_t v7 = 1937125888;
LABEL_221:
          uint64_t v6 = 100;
          return v6 | v7 | (a2 << 32);
        }
        goto LABEL_102;
      }
      if (this == 1999790690) {
        goto LABEL_259;
      }
      if (this != 1986817381) {
        goto LABEL_257;
      }
      if (a2 != 1886679669)
      {
        uint64_t v7 = 1983013888;
        goto LABEL_260;
      }
      uint64_t v6 = 100;
    }
    else
    {
      if (v5 == 1818453106)
      {
        if ((int)this <= 1836414052) {
          goto LABEL_104;
        }
        if ((int)this > 1936682094)
        {
          if ((int)this > 1937072757)
          {
            if ((int)this <= 1986817380)
            {
              if (this == 1937072758)
              {
                uint64_t v7 = 1937138688;
LABEL_71:
                uint64_t v6 = 35;
                return v6 | v7 | (a2 << 32);
              }
              goto LABEL_102;
            }
            if (this != 1999790690)
            {
              if (this != 1986817381) {
                goto LABEL_257;
              }
              BOOL v9 = a2 == 1886679669;
              uint64_t v8 = 1986290176;
              uint64_t v7 = 1836475392;
LABEL_69:
              if (!v9) {
                uint64_t v7 = v8;
              }
              goto LABEL_71;
            }
            goto LABEL_259;
          }
          goto LABEL_122;
        }
        if ((int)this <= 1885893480) {
          goto LABEL_173;
        }
        if (this == 1885893481) {
          goto LABEL_222;
        }
        if (this == 1936028002) {
          goto LABEL_220;
        }
        if (this != 1936028007) {
          goto LABEL_257;
        }
        uint64_t v6 = 114;
LABEL_219:
        uint64_t v7 = 1936811776;
        return v6 | v7 | (a2 << 32);
      }
      if (v5 != 1818453107) {
        goto LABEL_257;
      }
      if ((int)this <= 1836414052) {
        goto LABEL_104;
      }
      if ((int)this <= 1936682094)
      {
        if ((int)this <= 1885893480) {
          goto LABEL_173;
        }
        if (this == 1885893481) {
          goto LABEL_222;
        }
        if (this == 1936028002) {
          goto LABEL_220;
        }
        if (this != 1936028007) {
          goto LABEL_257;
        }
        uint64_t v6 = 102;
        goto LABEL_219;
      }
      if ((int)this <= 1937072757) {
        goto LABEL_122;
      }
      if ((int)this <= 1986817380)
      {
        if (this != 1937072758) {
          goto LABEL_102;
        }
        uint64_t v7 = 1935946240;
LABEL_264:
        uint64_t v6 = 118;
        return v6 | v7 | (a2 << 32);
      }
      if (this == 1999790690) {
        goto LABEL_259;
      }
      if (this != 1986817381) {
        goto LABEL_257;
      }
      if (a2 != 1886679669)
      {
        uint64_t v7 = 1684156928;
        goto LABEL_264;
      }
      uint64_t v6 = 115;
    }
    unsigned __int16 v11 = 12800;
    goto LABEL_256;
  }
  if (v5 <= 1935894893)
  {
    if (v5 <= 1935892840)
    {
      if (v5 != 1818456950)
      {
        if (v5 != 1818457190) {
          goto LABEL_257;
        }
        if ((int)this > 1836414052)
        {
          if ((int)this <= 1936744813)
          {
            if ((int)this > 1885893480)
            {
              if (this != 1885893481)
              {
                if (this == 1936028002) {
                  goto LABEL_220;
                }
                if (this != 1936682095) {
                  goto LABEL_257;
                }
                goto LABEL_131;
              }
LABEL_222:
              uint64_t v7 = 1885893376;
              uint64_t v6 = 105;
              return v6 | v7 | (a2 << 32);
            }
LABEL_173:
            if (this != 1836414053)
            {
              if (this != 1852601964)
              {
                if (this != 1885888878) {
                  goto LABEL_257;
                }
                goto LABEL_176;
              }
              goto LABEL_188;
            }
            goto LABEL_230;
          }
          if ((int)this <= 1952541793)
          {
            if (this != 1936744814)
            {
              if (this != 1937072749)
              {
                if (this != 1937072758) {
                  goto LABEL_257;
                }
                uint64_t v7 = 1937142784;
LABEL_214:
                uint64_t v6 = 102;
                return v6 | v7 | (a2 << 32);
              }
              goto LABEL_125;
            }
LABEL_92:
            uint64_t v7 = 1836281856;
            if (a2 != 1886679669) {
              uint64_t v7 = 1936744704;
            }
            goto LABEL_94;
          }
          if (this != 1952541794)
          {
            if (this != 1999790690)
            {
              if (this != 1986817381) {
                goto LABEL_257;
              }
              uint64_t v7 = 1986229248;
              if (a2 == 1886679669) {
                uint64_t v7 = 1836479488;
              }
              goto LABEL_214;
            }
            goto LABEL_259;
          }
LABEL_103:
          uint64_t v6 = 98;
          uint64_t v7 = 1952541696;
          return v6 | v7 | (a2 << 32);
        }
LABEL_104:
        if ((int)this <= 1702259058)
        {
          if ((int)this <= 1684370291)
          {
            if (this != 1650602615)
            {
              if (this != 1668047723)
              {
                if (this != 1668049264) {
                  goto LABEL_257;
                }
LABEL_109:
                uint64_t v7 = 1668049152;
                uint64_t v6 = 112;
                return v6 | v7 | (a2 << 32);
              }
              goto LABEL_225;
            }
LABEL_227:
            uint64_t v7 = 1650602496;
            uint64_t v6 = 119;
            return v6 | v7 | (a2 << 32);
          }
          if (this != 1684370292)
          {
            if (this == 1684895092)
            {
LABEL_117:
              uint64_t v7 = 1684894976;
LABEL_126:
              uint64_t v6 = 116;
              return v6 | v7 | (a2 << 32);
            }
            goto LABEL_139;
          }
          goto LABEL_182;
        }
        if ((int)this <= 1784767338)
        {
          if (this != 1702259059)
          {
            if (this != 1718432370)
            {
              if (this != 1751740518) {
                goto LABEL_257;
              }
              goto LABEL_114;
            }
LABEL_145:
            uint64_t v7 = 1718432256;
            uint64_t v6 = 114;
            return v6 | v7 | (a2 << 32);
          }
LABEL_146:
          uint64_t v7 = 1952542720;
          goto LABEL_221;
        }
        if (this != 1784767339)
        {
          if (this != 1815241314)
          {
            if (this != 1819504226) {
              goto LABEL_257;
            }
LABEL_121:
            uint64_t v7 = 1819504128;
LABEL_260:
            uint64_t v6 = 98;
            return v6 | v7 | (a2 << 32);
          }
LABEL_193:
          uint64_t v7 = 1815241216;
          goto LABEL_260;
        }
        goto LABEL_194;
      }
      if ((int)this <= 1836414052) {
        goto LABEL_104;
      }
      if ((int)this > 1936682094)
      {
        if ((int)this > 1937072757)
        {
          if ((int)this <= 1986817380)
          {
            if (this == 1937072758)
            {
              uint64_t v6 = 109;
LABEL_262:
              uint64_t v7 = 1937140736;
              return v6 | v7 | (a2 << 32);
            }
            goto LABEL_102;
          }
          if (this != 1999790690)
          {
            if (this != 1986817381) {
              goto LABEL_257;
            }
            if (a2 != 1886679669)
            {
              uint64_t v7 = 1987013632;
              uint64_t v6 = 109;
              return v6 | v7 | (a2 << 32);
            }
            uint64_t v7 = 1836479232;
            uint64_t v6 = 99;
LABEL_233:
            a2 = 1886679669;
            return v6 | v7 | (a2 << 32);
          }
          goto LABEL_259;
        }
LABEL_122:
        if (this != 1936682095)
        {
          if (this == 1936744814) {
            goto LABEL_92;
          }
          if (this != 1937072749) {
            goto LABEL_257;
          }
          goto LABEL_125;
        }
        goto LABEL_131;
      }
      if ((int)this <= 1885893480) {
        goto LABEL_173;
      }
      if (this == 1885893481) {
        goto LABEL_222;
      }
      if (this == 1936028002) {
        goto LABEL_220;
      }
      if (this != 1936028007) {
        goto LABEL_257;
      }
      uint64_t v6 = 115;
      goto LABEL_219;
    }
    if (v5 != 1935892841)
    {
      if (v5 != 1935893353) {
        goto LABEL_257;
      }
      if ((int)this > 1751740517)
      {
        if ((int)this > 1936028001) {
          goto LABEL_90;
        }
        if (this != 1751740518)
        {
          if (this != 1852601964) {
            goto LABEL_257;
          }
LABEL_188:
          uint64_t v6 = 108;
          goto LABEL_189;
        }
        goto LABEL_114;
      }
      if (this != 1668047723)
      {
        if (this != 1684370292)
        {
LABEL_139:
          if (this != 1685287523) {
            goto LABEL_257;
          }
          goto LABEL_140;
        }
LABEL_182:
        uint64_t v6 = 115;
        goto LABEL_208;
      }
      goto LABEL_225;
    }
    if ((int)this > 1751740517)
    {
      if ((int)this > 1936028001) {
        goto LABEL_90;
      }
      if (this == 1751740518)
      {
        uint64_t v6 = 35;
        goto LABEL_204;
      }
      if (this != 1852601964) {
        goto LABEL_257;
      }
      uint64_t v6 = 35;
LABEL_189:
      uint64_t v7 = 1852601856;
      return v6 | v7 | (a2 << 32);
    }
    if (this != 1668047723)
    {
      if (this != 1684370292)
      {
        if (this == 1685287523)
        {
          uint64_t v6 = 35;
          uint64_t v7 = 1936941824;
          return v6 | v7 | (a2 << 32);
        }
        goto LABEL_257;
      }
      uint64_t v6 = 35;
LABEL_208:
      uint64_t v7 = 1835295744;
      return v6 | v7 | (a2 << 32);
    }
    uint64_t v6 = 35;
    goto LABEL_202;
  }
  if (v5 <= 1935962741)
  {
    if (v5 != 1935894894)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      if (v5 != 1935962738) {
        goto LABEL_257;
      }
      return v6 | v7 | (a2 << 32);
    }
    if ((int)this > 1751740517)
    {
      if ((int)this > 1936028001) {
        goto LABEL_90;
      }
      if (this != 1751740518)
      {
        if (this != 1852601964) {
          goto LABEL_257;
        }
        uint64_t v6 = 108;
        uint64_t v7 = 1818455552;
        return v6 | v7 | (a2 << 32);
      }
      uint64_t v6 = 108;
LABEL_204:
      uint64_t v7 = 1751740416;
      return v6 | v7 | (a2 << 32);
    }
    if (this != 1668047723)
    {
      if (this != 1684370292)
      {
        if (this == 1685287523)
        {
          uint64_t v6 = 110;
          uint64_t v7 = 1819501312;
          return v6 | v7 | (a2 << 32);
        }
        goto LABEL_257;
      }
      uint64_t v6 = 99;
      goto LABEL_208;
    }
    uint64_t v7 = 1818456832;
LABEL_94:
    uint64_t v6 = 110;
    return v6 | v7 | (a2 << 32);
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  if (v5 != 1935962742)
  {
    if (v5 != 1936745315)
    {
      if (v5 != 1936745334) {
        goto LABEL_257;
      }
      goto LABEL_90;
    }
    if (this != 1936028002)
    {
      if (this != 1936744814) {
        goto LABEL_257;
      }
      uint64_t v8 = 1936748032;
      BOOL v9 = a2 == 1886679669;
      uint64_t v7 = 1836281856;
      goto LABEL_69;
    }
LABEL_220:
    uint64_t v7 = 1936811008;
    goto LABEL_221;
  }
  return v6 | v7 | (a2 << 32);
}

void AMCP::HAL::translate_mcp_value_to_hal_by_type(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, applesauce::CF::DataRef *a4@<X8>)
{
  int v4 = a4;
  switch(a3)
  {
    case 1:
      if (a2 != 16) {
        goto LABEL_252;
      }
      if (!*(void *)(a1 + 32))
      {
        int v38 = 0;
        uint64_t v39 = 0;
        size_t v40 = 0;
        memset(&v118, 0, sizeof(v118));
LABEL_246:
        std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(&v118, v38, v39, v40);
        goto LABEL_258;
      }
      uint64_t v35 = (void (*)(uint64_t, uint64_t, void, void **))AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>();
      CFTypeRef v36 = *(void (**)(uint64_t, uint64_t, void, void **))(a1 + 32);
      __p[0] = 0;
      if (v36)
      {
        v36(3, a1, 0, __p);
        CFTypeRef v36 = (void (*)(uint64_t, uint64_t, void, void **))__p[0];
      }
      if (v36 == v35)
      {
        __p[0] = v35;
        uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, void, void **))(a1 + 32))(4, a1, 0, __p);
        memset(&v118, 0, sizeof(v118));
        if (v37)
        {
          int v38 = *(const void **)v37;
          uint64_t v39 = *(void *)(v37 + 8);
          size_t v40 = v39 - *(void *)v37;
        }
        else
        {
          int v38 = 0;
          uint64_t v39 = 0;
          size_t v40 = 0;
        }
        goto LABEL_246;
      }
      *(void *)&v117.Float64 mMinimum = AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>();
      *(_OWORD *)__p = 0u;
      long long v122 = 0u;
      v123 = 0;
      (*(void (**)(uint64_t, uint64_t, void **, AudioValueRange *))(a1 + 32))(6, a1, __p, &v117);
      if (v123)
      {
        *(void *)__x = v35;
        uint64_t v104 = v123(4, __p, 0, __x);
        memset(&v118, 0, sizeof(v118));
        if (v104)
        {
          v105 = *(const void **)v104;
          uint64_t v106 = *(void *)(v104 + 8);
        }
        else
        {
          uint64_t v106 = 0;
          v105 = 0;
        }
        std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(&v118, v105, v106, v106 - (void)v105);
      }
      else
      {
        memset(&v118, 0, sizeof(v118));
        std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(&v118, 0, 0, 0);
      }
      if (v123) {
        v123(0, __p, 0, 0);
      }
LABEL_258:
      std::vector<char>::pointer begin = v118.__begin_;
      CFDataRef v108 = CFDataCreate(0, (const UInt8 *)v118.__begin_, v118.__end_ - v118.__begin_);
      applesauce::CF::DataRef::DataRef(v4, v108);
LABEL_259:
      if (begin) {
        operator delete(begin);
      }
      return;
    case 2:
      if (!*(void *)(a1 + 32)) {
        goto LABEL_252;
      }
      uint64_t type = AMCP::Implementation::get_type_marker<int>();
      std::vector<char>::pointer v30 = *(std::vector<char>::pointer *)(a1 + 32);
      v118.__begin_ = 0;
      if (v30)
      {
        ((void (*)(uint64_t, uint64_t, void, std::vector<char> *))v30)(3, a1, 0, &v118);
        std::vector<char>::pointer v30 = v118.__begin_;
      }
      if (v30 == (std::vector<char>::pointer)type)
      {
        *(void *)&v117.Float64 mMinimum = type;
        if (!(*(uint64_t (**)(uint64_t, uint64_t, void, AudioValueRange *))(a1 + 32))(4, a1, 0, &v117)) {
          goto LABEL_252;
        }
        goto LABEL_193;
      }
      *(void *)__x = AMCP::Implementation::get_type_marker<int>();
      *(_OWORD *)__p = 0u;
      long long v122 = 0u;
      v123 = 0;
      (*(void (**)(uint64_t, uint64_t, void **, std::vector<char>::value_type *))(a1 + 32))(6, a1, __p, __x);
      if (v123)
      {
        uint64_t v119 = type;
        uint64_t v91 = v123(4, __p, 0, (std::vector<char>::value_type *)&v119);
        if (v123) {
          v123(0, __p, 0, 0);
        }
        if (v91)
        {
LABEL_193:
          LODWORD(__p[0]) = AMCP::Thing::convert_to<int>(a1);
          goto LABEL_211;
        }
      }
      goto LABEL_252;
    case 3:
    case 10:
      AMCP::HAL::translate_simple_mcp_value_to_hal<unsigned int>(a4, a1);
      return;
    case 4:
      switch(a2)
      {
        case 0u:
        case 1u:
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
          goto LABEL_252;
        case 0xDu:
        case 0x15u:
          AMCP::HAL::translate_simple_mcp_value_to_hal<std::tuple<unsigned int,unsigned int>>(a4, a1);
          break;
        case 0x14u:
          goto LABEL_70;
        default:
          goto LABEL_73;
      }
      return;
    case 5:
LABEL_73:
      if (!AMCP::Thing::can_convert_to<applesauce::CF::StringRef>(a1)) {
        goto LABEL_252;
      }
      AMCP::Thing::convert_to<applesauce::CF::StringRef>(&v117, a1);
      Float64 mMinimum = v117.mMinimum;
      if (!*(void *)&v117.mMinimum)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)__p, *(const __CFString **)&v117.mMinimum);
      if ((SBYTE7(v122) & 0x80u) == 0) {
        uint64_t v42 = __p;
      }
      else {
        uint64_t v42 = (void **)__p[0];
      }
      size_t v43 = strlen((const char *)v42);
      __x[0] = 0;
      std::vector<char>::vector(&v118, v43 + 1, __x);
      if ((SBYTE7(v122) & 0x80u) == 0) {
        unsigned int v44 = __p;
      }
      else {
        unsigned int v44 = (void **)__p[0];
      }
      memcpy(v118.__begin_, v44, v118.__end_ - v118.__begin_);
      CFDataRef v45 = CFDataCreate(0, (const UInt8 *)v118.__begin_, v118.__end_ - v118.__begin_);
      applesauce::CF::DataRef::DataRef(v4, v45);
      if (v118.__begin_)
      {
        v118.__end_ = v118.__begin_;
        operator delete(v118.__begin_);
      }
      if (SBYTE7(v122) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_188;
    case 6:
      if (!AMCP::Thing::can_convert_to<applesauce::CF::StringRef>(a1)) {
        goto LABEL_252;
      }
      AMCP::Thing::convert_to<applesauce::CF::StringRef>(__p, a1);
      AMCP::HAL::translate_cf_string_mcp_value_to_hal(v4, (CFStringRef *)__p);
      if (__p[0]) {
        CFRelease(__p[0]);
      }
      return;
    case 7:
      if (!*(void *)(a1 + 32)) {
        goto LABEL_252;
      }
      uint64_t v33 = AMCP::Implementation::get_type_marker<float>();
      std::vector<char>::pointer v34 = *(std::vector<char>::pointer *)(a1 + 32);
      v118.__begin_ = 0;
      if (v34)
      {
        ((void (*)(uint64_t, uint64_t, void, std::vector<char> *))v34)(3, a1, 0, &v118);
        std::vector<char>::pointer v34 = v118.__begin_;
      }
      if (v34 == (std::vector<char>::pointer)v33)
      {
        *(void *)&v117.Float64 mMinimum = v33;
        if (!(*(uint64_t (**)(uint64_t, uint64_t, void, AudioValueRange *))(a1 + 32))(4, a1, 0, &v117)) {
          goto LABEL_252;
        }
      }
      else
      {
        *(void *)__x = AMCP::Implementation::get_type_marker<float>();
        *(_OWORD *)__p = 0u;
        long long v122 = 0u;
        v123 = 0;
        (*(void (**)(uint64_t, uint64_t, void **, std::vector<char>::value_type *))(a1 + 32))(6, a1, __p, __x);
        if (!v123) {
          goto LABEL_252;
        }
        uint64_t v119 = v33;
        uint64_t v96 = v123(4, __p, 0, (std::vector<char>::value_type *)&v119);
        if (v123) {
          v123(0, __p, 0, 0);
        }
        if (!v96) {
          goto LABEL_252;
        }
      }
      LODWORD(__p[0]) = AMCP::Thing::convert_to<float>(a1);
LABEL_211:
      CFIndex v87 = 4;
      goto LABEL_217;
    case 8:
      if (!*(void *)(a1 + 32)) {
        goto LABEL_252;
      }
      uint64_t v80 = AMCP::Implementation::get_type_marker<double>();
      std::vector<char>::pointer v81 = *(std::vector<char>::pointer *)(a1 + 32);
      v118.__begin_ = 0;
      if (v81)
      {
        ((void (*)(uint64_t, uint64_t, void, std::vector<char> *))v81)(3, a1, 0, &v118);
        std::vector<char>::pointer v81 = v118.__begin_;
      }
      if (v81 == (std::vector<char>::pointer)v80)
      {
        *(void *)&v117.Float64 mMinimum = v80;
        if (!(*(uint64_t (**)(uint64_t, uint64_t, void, AudioValueRange *))(a1 + 32))(4, a1, 0, &v117)) {
          goto LABEL_252;
        }
        goto LABEL_216;
      }
      *(void *)__x = AMCP::Implementation::get_type_marker<double>();
      *(_OWORD *)__p = 0u;
      long long v122 = 0u;
      v123 = 0;
      (*(void (**)(uint64_t, uint64_t, void **, std::vector<char>::value_type *))(a1 + 32))(6, a1, __p, __x);
      if (v123)
      {
        uint64_t v119 = v80;
        uint64_t v97 = v123(4, __p, 0, (std::vector<char>::value_type *)&v119);
        if (v123) {
          v123(0, __p, 0, 0);
        }
        if (v97)
        {
LABEL_216:
          __p[0] = COERCE_VOID_(AMCP::Thing::convert_to<double>(a1));
          CFIndex v87 = 8;
          goto LABEL_217;
        }
      }
      goto LABEL_252;
    case 9:
      if (a2 < 0x19 || a2 - 27 < 2) {
        goto LABEL_252;
      }
      if (a2 == 26)
      {
        AMCP::HAL::translate_simple_mcp_value_to_hal<CA::ValueRange>(a4, a1);
        return;
      }
      if (a2 == 25)
      {
        if (!AMCP::Thing::can_convert_to<CA::ValueRangeList>(a1)) {
          goto LABEL_252;
        }
        AMCP::Thing::convert_to<CA::ValueRangeList>(__p, a1);
        std::vector<char>::pointer begin = (std::vector<char>::pointer)__p[0];
        std::vector<char>::pointer v72 = (std::vector<char>::pointer)__p[1];
        std::vector<double>::vector(&v118, ((unint64_t)((char *)__p[1] - (char *)__p[0]) >> 3) & 0xFFFFFFFE);
        uint64_t v74 = (const UInt8 *)v118.__begin_;
        if (begin != v72)
        {
          std::vector<char>::pointer v75 = v118.__begin_;
          v76 = begin;
          do
          {
            *(void *)std::vector<char>::pointer v75 = *v76;
            *((void *)v75 + 1) = v76[1];
            v76 += 2;
            v75 += 16;
          }
          while (v76 != (void *)v72);
        }
        CFDataRef v77 = CFDataCreate(0, v74, v118.__end_ - (std::vector<char>::pointer)v74);
        applesauce::CF::DataRef::DataRef(v4, v77);
        if (v118.__begin_)
        {
          v118.__end_ = v118.__begin_;
          operator delete(v118.__begin_);
        }
        goto LABEL_259;
      }
LABEL_150:
      if (!*(void *)(a1 + 32)) {
        goto LABEL_252;
      }
      uint64_t v78 = AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>();
      std::vector<char>::pointer v79 = *(std::vector<char>::pointer *)(a1 + 32);
      v118.__begin_ = 0;
      if (v79)
      {
        ((void (*)(uint64_t, uint64_t, void, std::vector<char> *))v79)(3, a1, 0, &v118);
        std::vector<char>::pointer v79 = v118.__begin_;
      }
      if (v79 == (std::vector<char>::pointer)v78)
      {
        *(void *)&v117.Float64 mMinimum = v78;
        if (!(*(uint64_t (**)(uint64_t, uint64_t, void, AudioValueRange *))(a1 + 32))(4, a1, 0, &v117)) {
          goto LABEL_252;
        }
      }
      else
      {
        *(void *)__x = AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>();
        *(_OWORD *)__p = 0u;
        long long v122 = 0u;
        v123 = 0;
        (*(void (**)(uint64_t, uint64_t, void **, std::vector<char>::value_type *))(a1 + 32))(6, a1, __p, __x);
        if (!v123) {
          goto LABEL_252;
        }
        uint64_t v119 = v78;
        uint64_t v86 = v123(4, __p, 0, (std::vector<char>::value_type *)&v119);
        if (v123) {
          v123(0, __p, 0, 0);
        }
        if (!v86) {
          goto LABEL_252;
        }
      }
      v123 = 0;
      *(_OWORD *)__p = 0u;
      long long v122 = 0u;
      AMCP::Thing::convert_to<AudioStreamBasicDescription>((uint64_t)__p, a1);
      CFIndex v87 = 40;
LABEL_217:
      CFDataRef v98 = CFDataCreate(0, (const UInt8 *)__p, v87);
      applesauce::CF::DataRef::DataRef(v4, v98);
      return;
    case 11:
LABEL_70:
      AMCP::HAL::translate_vector_mcp_value_to_hal<unsigned int>(a4, a1);
      return;
    case 12:
      goto LABEL_150;
    case 13:
      if (!AMCP::Thing::can_convert_to<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(a1)) {
        goto LABEL_252;
      }
      AMCP::Thing::convert_to<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(&v118, a1);
      std::vector<char>::pointer v46 = v118.__begin_;
      std::vector<char>::pointer end = v118.__end_;
      if (v118.__begin_ != v118.__end_)
      {
        v111 = v4;
        BOOL v9 = 0;
        int v47 = 0;
        unint64_t v48 = 0;
        while (1)
        {
          char v49 = *(double **)v46;
          std::vector<char>::pointer v114 = v46;
          v116 = (double *)*((void *)v46 + 1);
          if (*(double **)v46 != v116) {
            break;
          }
LABEL_138:
          std::vector<char>::pointer v46 = v114 + 64;
          if (v114 + 64 == end)
          {
            int v4 = v111;
            goto LABEL_235;
          }
        }
        uint64_t v50 = v46 + 32;
LABEL_94:
        double v52 = *v49;
        double v51 = v49[1];
        unint64_t v53 = 21;
        unsigned int v54 = &AMCP::Utility::Common_Sample_Rate::k_list;
        while (1)
        {
          uint64_t v55 = (double *)&v54[v53 >> 1];
          if (*v55 >= v52)
          {
            v53 >>= 1;
            if (*v55 == v52)
            {
              unsigned int v54 = (uint64_t *)v55;
LABEL_101:
              unint64_t v56 = 21;
              uint64_t v57 = (unsigned int *)&AMCP::Utility::Common_Sample_Rate::k_list;
              while (1)
              {
                CFStringRef v58 = (double *)&v57[2 * (v56 >> 1)];
                if (*v58 >= v51)
                {
                  v56 >>= 1;
                  if (*v58 == v51)
                  {
                    uint64_t v57 = (unsigned int *)v58;
LABEL_108:
                    if (v57 == dword_1BB002900)
                    {
                      uint64_t v57 = dword_1BB002900;
                    }
                    else if (*(double *)v57 <= v51)
                    {
                      v57 += 2;
                    }
                    if ((char *)v57 - (char *)v54 < 0 || !v54) {
LABEL_218:
                    }
                      std::terminate();
                    if (v57 != (unsigned int *)v54)
                    {
                      unint64_t v59 = 0;
                      unint64_t v60 = (unint64_t)((char *)v57 - (char *)v54) >> 3;
                      while (v60 > v59)
                      {
                        long long v61 = v50[1];
                        *(_OWORD *)__p = *v50;
                        long long v122 = v61;
                        uint64_t v62 = v54[v59];
                        if ((unint64_t)v47 >= v48)
                        {
                          unint64_t v64 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v47 - (char *)v9) >> 3) + 1;
                          if (v64 > 0x666666666666666) {
                            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                          }
                          if (0x999999999999999ALL * ((uint64_t)(v48 - (void)v9) >> 3) > v64) {
                            unint64_t v64 = 0x999999999999999ALL * ((uint64_t)(v48 - (void)v9) >> 3);
                          }
                          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - (void)v9) >> 3) >= 0x333333333333333) {
                            unint64_t v65 = 0x666666666666666;
                          }
                          else {
                            unint64_t v65 = v64;
                          }
                          if (v65) {
                            unint64_t v65 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v65);
                          }
                          else {
                            uint64_t v66 = 0;
                          }
                          unint64_t v67 = v65 + 8 * (((char *)v47 - (char *)v9) >> 3);
                          *(void *)unint64_t v67 = v62;
                          *(_OWORD *)(v67 + 8) = *(_OWORD *)__p;
                          *(_OWORD *)(v67 + 24) = v122;
                          if (v47 == (uint64_t *)v9)
                          {
                            int v71 = (AudioStreamRangedDescription *)(v65 + 8 * (((char *)v47 - (char *)v9) >> 3));
                          }
                          else
                          {
                            unint64_t v68 = v65 + 8 * (((char *)v47 - (char *)v9) >> 3);
                            do
                            {
                              long long v69 = *(_OWORD *)(v47 - 5);
                              long long v70 = *(_OWORD *)(v47 - 3);
                              int v71 = (AudioStreamRangedDescription *)(v68 - 40);
                              *(void *)(v68 - 8) = *(v47 - 1);
                              *(_OWORD *)(v68 - 24) = v70;
                              *(_OWORD *)(v68 - 40) = v69;
                              v47 -= 5;
                              v68 -= 40;
                            }
                            while (v47 != (uint64_t *)v9);
                          }
                          unint64_t v48 = v65 + 40 * v66;
                          int v47 = (uint64_t *)(v67 + 40);
                          if (v9) {
                            operator delete(v9);
                          }
                          BOOL v9 = v71;
                        }
                        else
                        {
                          *int v47 = v62;
                          long long v63 = *(_OWORD *)__p;
                          *(_OWORD *)(v47 + 3) = v122;
                          *(_OWORD *)(v47 + 1) = v63;
                          v47 += 5;
                        }
                        if (++v59 == v60) {
                          goto LABEL_137;
                        }
                      }
                      goto LABEL_218;
                    }
LABEL_137:
                    v49 += 2;
                    if (v49 == v116) {
                      goto LABEL_138;
                    }
                    goto LABEL_94;
                  }
                }
                else
                {
                  uint64_t v57 = (unsigned int *)(v58 + 1);
                  v56 += ~(v56 >> 1);
                }
                if (!v56) {
                  goto LABEL_108;
                }
              }
            }
          }
          else
          {
            unsigned int v54 = (uint64_t *)(v55 + 1);
            v53 += ~(v53 >> 1);
          }
          if (!v53) {
            goto LABEL_101;
          }
        }
      }
      BOOL v9 = 0;
      int v47 = 0;
LABEL_235:
      CFDataRef v103 = CFDataCreate(0, (const UInt8 *)v9, (char *)v47 - (char *)v9);
      applesauce::CF::DataRef::DataRef(v4, v103);
LABEL_236:
      if (v9) {
        operator delete(v9);
      }
      __p[0] = &v118;
      std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      return;
    case 14:
      if (!AMCP::Thing::can_convert_to<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(a1)) {
        goto LABEL_252;
      }
      v110 = v4;
      AMCP::Thing::convert_to<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(&v118, a1);
      std::vector<char>::pointer v8 = v118.__begin_;
      std::vector<char>::pointer v113 = v118.__end_;
      if (v118.__begin_ == v118.__end_)
      {
        BOOL v9 = 0;
        uint64_t v10 = 0;
        int v12 = 0;
      }
      else
      {
        BOOL v9 = 0;
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        int v12 = 0;
        do
        {
          unsigned __int16 v13 = *(double **)v8;
          unsigned __int16 v14 = (double *)*((void *)v8 + 1);
          std::vector<char>::pointer v115 = v8;
          if (*(double **)v8 != v14)
          {
            unsigned __int16 v15 = v8 + 32;
            do
            {
              long long v16 = v15[1];
              *(_OWORD *)__p = *v15;
              long long v122 = v16;
              if (*v13 == v13[1]) {
                double v17 = *v13;
              }
              else {
                double v17 = 0.0;
              }
              AudioValueRange v117 = *(AudioValueRange *)v13;
              if ((unint64_t)v12 >= v11)
              {
                uint64_t v19 = 0x6DB6DB6DB6DB6DB7 * (((char *)v12 - (char *)v9) >> 3);
                unint64_t v20 = v19 + 1;
                if ((unint64_t)(v19 + 1) > 0x492492492492492) {
                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                }
                if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v11 - (void)v9) >> 3) > v20) {
                  unint64_t v20 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v11 - (void)v9) >> 3);
                }
                if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - (void)v9) >> 3)) >= 0x249249249249249) {
                  unint64_t v21 = 0x492492492492492;
                }
                else {
                  unint64_t v21 = v20;
                }
                if (v21) {
                  unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v21);
                }
                else {
                  uint64_t v22 = 0;
                }
                unint64_t v23 = v21 + 56 * v19;
                *(double *)unint64_t v23 = v17;
                *(_OWORD *)(v23 + 8) = *(_OWORD *)__p;
                *(_OWORD *)(v23 + 24) = v122;
                *(AudioValueRange *)(v23 + 40) = v117;
                if (v10 == v9)
                {
                  uint64_t v28 = (AudioStreamRangedDescription *)(v21 + 56 * v19);
                }
                else
                {
                  unint64_t v24 = v21 + 56 * v19;
                  do
                  {
                    long long v25 = *(_OWORD *)&v10[-1].mFormat.mSampleRate;
                    long long v26 = *(_OWORD *)&v10[-1].mFormat.mBytesPerPacket;
                    long long v27 = *(_OWORD *)&v10[-1].mFormat.mBitsPerChannel;
                    uint64_t v28 = (AudioStreamRangedDescription *)(v24 - 56);
                    *(Float64 *)(v24 - 8) = v10[-1].mSampleRateRange.mMaximum;
                    *(_OWORD *)(v24 - 24) = v27;
                    *(_OWORD *)(v24 - 40) = v26;
                    *(_OWORD *)(v24 - 56) = v25;
                    --v10;
                    v24 -= 56;
                  }
                  while (v10 != v9);
                }
                unint64_t v11 = v21 + 56 * v22;
                uint64_t v10 = (AudioStreamRangedDescription *)(v23 + 56);
                if (v9) {
                  operator delete(v9);
                }
                BOOL v9 = v28;
              }
              else
              {
                v12->mFormat.mSampleRate = v17;
                long long v18 = v122;
                *(_OWORD *)&v12->mFormat.mFormatID = *(_OWORD *)__p;
                *(_OWORD *)&v12->mFormat.mBytesPerFrame = v18;
                v12->mSampleRateRange = v117;
                uint64_t v10 = v12 + 1;
              }
              v13 += 2;
              int v12 = v10;
            }
            while (v13 != v14);
          }
          std::vector<char>::pointer v8 = v115 + 64;
        }
        while (v115 + 64 != v113);
      }
      unint64_t v100 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((char *)v12 - (char *)v9) >> 3));
      if (v12 == v9) {
        long long v101 = 0;
      }
      else {
        long long v101 = (const AudioStreamRangedDescription *)v100;
      }
      std::__introsort<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *,false>((unint64_t)v9, v12, v101, 1);
      CFDataRef v102 = CFDataCreate(0, (const UInt8 *)v9, (char *)v10 - (char *)v9);
      applesauce::CF::DataRef::DataRef(v110, v102);
      goto LABEL_236;
    case 15:
      if (!*(void *)(a1 + 32)) {
        goto LABEL_200;
      }
      uint64_t v31 = AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>();
      std::vector<char>::pointer v32 = *(std::vector<char>::pointer *)(a1 + 32);
      v118.__begin_ = 0;
      if (v32)
      {
        ((void (*)(uint64_t, uint64_t, void, std::vector<char> *))v32)(3, a1, 0, &v118);
        std::vector<char>::pointer v32 = v118.__begin_;
      }
      if (v32 == (std::vector<char>::pointer)v31)
      {
        *(void *)&v117.Float64 mMinimum = v31;
        if (!(*(uint64_t (**)(uint64_t, uint64_t, void, AudioValueRange *))(a1 + 32))(4, a1, 0, &v117)) {
          goto LABEL_200;
        }
LABEL_198:
        AMCP::Thing::convert_to<applesauce::CF::BooleanRef>(__p, a1);
        std::vector<char>::pointer v93 = (std::vector<char>::pointer)__p[0];
        if (__p[0])
        {
          CFRetain(__p[0]);
          CFRelease(v93);
        }
        goto LABEL_250;
      }
      *(void *)__x = AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>();
      *(_OWORD *)__p = 0u;
      long long v122 = 0u;
      v123 = 0;
      (*(void (**)(uint64_t, uint64_t, void **, std::vector<char>::value_type *))(a1 + 32))(6, a1, __p, __x);
      if (v123)
      {
        uint64_t v119 = v31;
        uint64_t v92 = v123(4, __p, 0, (std::vector<char>::value_type *)&v119);
        if (v123) {
          v123(0, __p, 0, 0);
        }
        if (v92) {
          goto LABEL_198;
        }
      }
LABEL_200:
      if (!*(void *)(a1 + 32)) {
        goto LABEL_224;
      }
      uint64_t v94 = AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>();
      std::vector<char>::pointer v95 = *(std::vector<char>::pointer *)(a1 + 32);
      v118.__begin_ = 0;
      if (v95)
      {
        ((void (*)(uint64_t, uint64_t, void, std::vector<char> *))v95)(3, a1, 0, &v118);
        std::vector<char>::pointer v95 = v118.__begin_;
      }
      if (v95 == (std::vector<char>::pointer)v94)
      {
        *(void *)&v117.Float64 mMinimum = v94;
        if (!(*(uint64_t (**)(uint64_t, uint64_t, void, AudioValueRange *))(a1 + 32))(4, a1, 0, &v117)) {
          goto LABEL_224;
        }
LABEL_223:
        AMCP::Thing::convert_to<applesauce::CF::NumberRef>(__p, a1);
        applesauce::CF::TypeRef::from_get(&v118, __p[0]);
        std::vector<char>::pointer v93 = v118.__begin_;
        v118.__begin_ = 0;
        applesauce::CF::TypeRef::~TypeRef((const void **)&v118.__begin_);
        applesauce::CF::NumberRef::~NumberRef((const void **)__p);
        goto LABEL_250;
      }
      *(void *)__x = AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>();
      *(_OWORD *)__p = 0u;
      long long v122 = 0u;
      v123 = 0;
      (*(void (**)(uint64_t, uint64_t, void **, std::vector<char>::value_type *))(a1 + 32))(6, a1, __p, __x);
      if (v123)
      {
        uint64_t v119 = v94;
        uint64_t v99 = v123(4, __p, 0, (std::vector<char>::value_type *)&v119);
        if (v123) {
          v123(0, __p, 0, 0);
        }
        if (v99) {
          goto LABEL_223;
        }
      }
LABEL_224:
      if (AMCP::Thing::can_convert_to<applesauce::CF::StringRef>(a1))
      {
        AMCP::Thing::convert_to<applesauce::CF::StringRef>(__p, a1);
        applesauce::CF::TypeRef::from_get(&v118, __p[0]);
        std::vector<char>::pointer v93 = v118.__begin_;
        v118.__begin_ = 0;
        applesauce::CF::TypeRef::~TypeRef((const void **)&v118.__begin_);
        applesauce::CF::StringRef::~StringRef((const void **)__p);
      }
      else if (AMCP::Thing::can_convert_to<applesauce::CF::DataRef>(a1))
      {
        AMCP::Thing::convert_to<applesauce::CF::DataRef>(__p, a1);
        applesauce::CF::TypeRef::from_get(&v118, __p[0]);
        std::vector<char>::pointer v93 = v118.__begin_;
        v118.__begin_ = 0;
        applesauce::CF::TypeRef::~TypeRef((const void **)&v118.__begin_);
        applesauce::CF::DataRef::~DataRef((const void **)__p);
      }
      else if (AMCP::Thing::can_convert_to<applesauce::CF::ArrayRef>(a1))
      {
        AMCP::Thing::convert_to<applesauce::CF::ArrayRef>(__p, a1);
        applesauce::CF::TypeRef::from_get(&v118, __p[0]);
        std::vector<char>::pointer v93 = v118.__begin_;
        v118.__begin_ = 0;
        applesauce::CF::TypeRef::~TypeRef((const void **)&v118.__begin_);
        applesauce::CF::ArrayRef::~ArrayRef((const void **)__p);
      }
      else
      {
        if (!AMCP::Thing::can_convert_to<applesauce::CF::DictionaryRef>(a1)) {
          goto LABEL_252;
        }
        AMCP::Thing::convert_to<applesauce::CF::DictionaryRef>(__p, a1);
        applesauce::CF::TypeRef::from_get(&v118, __p[0]);
        std::vector<char>::pointer v93 = v118.__begin_;
        v118.__begin_ = 0;
        applesauce::CF::TypeRef::~TypeRef((const void **)&v118.__begin_);
        applesauce::CF::DictionaryRef::~DictionaryRef((const void **)__p);
      }
LABEL_250:
      if (v93)
      {
        CFDataRef Data = CFPropertyListCreateData(0, v93, kCFPropertyListBinaryFormat_v1_0, 0, 0);
        applesauce::CF::DataRef::DataRef(v4, Data);
        CFRelease(v93);
        return;
      }
LABEL_252:
      *(void *)int v4 = 0;
      return;
    case 16:
      if (!*(void *)(a1 + 32)) {
        goto LABEL_252;
      }
      uint64_t v6 = AMCP::Implementation::get_type_marker<applesauce::CF::URLRef>();
      std::vector<char>::pointer v7 = *(std::vector<char>::pointer *)(a1 + 32);
      v118.__begin_ = 0;
      if (v7)
      {
        ((void (*)(uint64_t, uint64_t, void, std::vector<char> *))v7)(3, a1, 0, &v118);
        std::vector<char>::pointer v7 = v118.__begin_;
      }
      if (v7 == (std::vector<char>::pointer)v6)
      {
        *(void *)&v117.Float64 mMinimum = v6;
        if (!(*(uint64_t (**)(uint64_t, uint64_t, void, AudioValueRange *))(a1 + 32))(4, a1, 0, &v117)) {
          goto LABEL_252;
        }
      }
      else
      {
        *(void *)__x = AMCP::Implementation::get_type_marker<applesauce::CF::URLRef>();
        *(_OWORD *)__p = 0u;
        long long v122 = 0u;
        v123 = 0;
        (*(void (**)(uint64_t, uint64_t, void **, std::vector<char>::value_type *))(a1 + 32))(6, a1, __p, __x);
        if (!v123) {
          goto LABEL_252;
        }
        uint64_t v119 = v6;
        uint64_t v88 = v123(4, __p, 0, (std::vector<char>::value_type *)&v119);
        if (v123) {
          v123(0, __p, 0, 0);
        }
        if (!v88) {
          goto LABEL_252;
        }
      }
      AMCP::Thing::convert_to<applesauce::CF::URLRef>(__p, a1);
      Float64 mMinimum = *(double *)__p;
      CFStringRef v89 = CFURLGetString((CFURLRef)__p[0]);
      CFStringRef v90 = v89;
      if (v89) {
        CFRetain(v89);
      }
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v118, v90);
      AMCP::HAL::translate_cf_string_mcp_value_to_hal(v4, (CFStringRef *)&v118);
      if (v118.__begin_) {
        CFRelease(v118.__begin_);
      }
      if (mMinimum != 0.0) {
LABEL_188:
      }
        CFRelease(*(CFTypeRef *)&mMinimum);
      return;
    case 17:
      if (a2 > 0x1C) {
        goto LABEL_163;
      }
      goto LABEL_252;
    case 18:
LABEL_163:
      if (!*(void *)(a1 + 32)) {
        goto LABEL_252;
      }
      uint64_t v82 = AMCP::Implementation::get_type_marker<CA::ChannelLayout>();
      std::vector<char>::pointer v83 = *(std::vector<char>::pointer *)(a1 + 32);
      v118.__begin_ = 0;
      if (v83)
      {
        ((void (*)(uint64_t, uint64_t, void, std::vector<char> *))v83)(3, a1, 0, &v118);
        std::vector<char>::pointer v83 = v118.__begin_;
      }
      if (v83 == (std::vector<char>::pointer)v82)
      {
        *(void *)&v117.Float64 mMinimum = v82;
        if (!(*(uint64_t (**)(uint64_t, uint64_t, void, AudioValueRange *))(a1 + 32))(4, a1, 0, &v117)) {
          goto LABEL_252;
        }
      }
      else
      {
        *(void *)__x = AMCP::Implementation::get_type_marker<CA::ChannelLayout>();
        *(_OWORD *)__p = 0u;
        long long v122 = 0u;
        v123 = 0;
        (*(void (**)(uint64_t, uint64_t, void **, std::vector<char>::value_type *))(a1 + 32))(6, a1, __p, __x);
        if (!v123) {
          goto LABEL_252;
        }
        uint64_t v119 = v82;
        uint64_t v84 = v123(4, __p, 0, (std::vector<char>::value_type *)&v119);
        if (v123) {
          v123(0, __p, 0, 0);
        }
        if (!v84) {
          goto LABEL_252;
        }
      }
      AMCP::Thing::convert_to<CA::ChannelLayout>(__p, a1);
      std::vector<char>::pointer begin = (std::vector<char>::pointer)__p[0];
      CFDataRef v85 = CFDataCreate(0, (const UInt8 *)__p[0], (char *)__p[1] - (char *)__p[0]);
      applesauce::CF::DataRef::DataRef(v4, v85);
      goto LABEL_259;
    default:
      goto LABEL_252;
  }
}

void sub_1BABA9ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (v31) {
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

applesauce::CF::DataRef *AMCP::HAL::translate_simple_mcp_value_to_hal<unsigned int>(applesauce::CF::DataRef *result, uint64_t a2)
{
  unsigned __int16 v2 = result;
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t type = AMCP::Implementation::get_type_marker<unsigned int>();
  int v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  unsigned __int16 v14 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v14);
    int v5 = v14;
  }
  if (v5 != (void (*)(uint64_t, uint64_t, void, void))type)
  {
    uint64_t v9 = AMCP::Implementation::get_type_marker<unsigned int>();
    *(_OWORD *)bytes = 0u;
    long long v11 = 0u;
    int v12 = 0;
    uint64_t result = (applesauce::CF::DataRef *)(*(uint64_t (**)(uint64_t, uint64_t, UInt8 *, uint64_t *))(a2 + 32))(6, a2, bytes, &v9);
    if (!v12) {
      goto LABEL_12;
    }
    uint64_t v8 = type;
    uint64_t result = (applesauce::CF::DataRef *)v12(4, bytes, 0, &v8);
    uint64_t v6 = result;
    if (v12) {
      uint64_t result = (applesauce::CF::DataRef *)v12(0, bytes, 0, 0);
    }
    if (!v6) {
      goto LABEL_12;
    }
LABEL_11:
    *(_DWORD *)bytes = AMCP::Thing::convert_to<unsigned int>(a2);
    CFDataRef v7 = CFDataCreate(0, bytes, 4);
    return applesauce::CF::DataRef::DataRef(v2, v7);
  }
  uint64_t v13 = type;
  uint64_t result = (applesauce::CF::DataRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v13);
  if (result) {
    goto LABEL_11;
  }
LABEL_12:
  *(void *)unsigned __int16 v2 = 0;
  return result;
}

void sub_1BABAA2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void, char *, void, void))
{
  if (a15) {
    a15(0, &a11, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::HAL::translate_vector_mcp_value_to_hal<unsigned int>(applesauce::CF::DataRef *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_13;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::vector<unsigned int>>();
  int v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  unsigned __int16 v14 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v14);
    int v5 = v14;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v13 = v4;
    if (!(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v13))
    {
LABEL_13:
      *(void *)a1 = 0;
      return;
    }
  }
  else
  {
    uint64_t v10 = AMCP::Implementation::get_type_marker<std::vector<unsigned int>>();
    memset(v11, 0, sizeof(v11));
    int v12 = 0;
    (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v11, &v10);
    if (!v12) {
      goto LABEL_13;
    }
    uint64_t v9 = v4;
    uint64_t v6 = v12(4, v11, 0, &v9);
    if (v12) {
      v12(0, v11, 0, 0);
    }
    if (!v6) {
      goto LABEL_13;
    }
  }
  AMCP::Thing::convert_to<std::vector<unsigned int>>(v11, a2);
  CFDataRef v7 = *(void **)&v11[0];
  CFDataRef v8 = CFDataCreate(0, *(const UInt8 **)&v11[0], *((void *)&v11[0] + 1) - *(void *)&v11[0]);
  applesauce::CF::DataRef::DataRef(a1, v8);
  if (v7) {
    operator delete(v7);
  }
}

void sub_1BABAA45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

applesauce::CF::DataRef *AMCP::HAL::translate_simple_mcp_value_to_hal<std::tuple<unsigned int,unsigned int>>(applesauce::CF::DataRef *result, uint64_t a2)
{
  unsigned __int16 v2 = result;
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>();
  int v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  unsigned __int16 v14 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v14);
    int v5 = v14;
  }
  if (v5 != (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v9 = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>();
    *(_OWORD *)bytes = 0u;
    long long v11 = 0u;
    int v12 = 0;
    uint64_t result = (applesauce::CF::DataRef *)(*(uint64_t (**)(uint64_t, uint64_t, UInt8 *, uint64_t *))(a2 + 32))(6, a2, bytes, &v9);
    if (!v12) {
      goto LABEL_12;
    }
    uint64_t v8 = v4;
    uint64_t result = (applesauce::CF::DataRef *)v12(4, bytes, 0, &v8);
    uint64_t v6 = result;
    if (v12) {
      uint64_t result = (applesauce::CF::DataRef *)v12(0, bytes, 0, 0);
    }
    if (!v6) {
      goto LABEL_12;
    }
LABEL_11:
    *(void *)bytes = AMCP::Thing::convert_to<std::tuple<unsigned int,unsigned int>>(a2);
    CFDataRef v7 = CFDataCreate(0, bytes, 8);
    return applesauce::CF::DataRef::DataRef(v2, v7);
  }
  uint64_t v13 = v4;
  uint64_t result = (applesauce::CF::DataRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v13);
  if (result) {
    goto LABEL_11;
  }
LABEL_12:
  *(void *)unsigned __int16 v2 = 0;
  return result;
}

void sub_1BABAA5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void, char *, void, void))
{
  if (a15) {
    a15(0, &a11, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Thing::can_convert_to<applesauce::CF::StringRef>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    return 0;
  }
  uint64_t v2 = AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
  int v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  long long v11 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v11);
    int v3 = v11;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))v2)
  {
    uint64_t v10 = v2;
    return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v10) != 0;
  }
  uint64_t v7 = AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
  memset(v8, 0, sizeof(v8));
  uint64_t v9 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v8, &v7);
  if (!v9) {
    return 0;
  }
  uint64_t v6 = v2;
  BOOL v4 = v9(4, v8, 0, &v6) != 0;
  if (v9) {
    v9(0, v8, 0, 0);
  }
  return v4;
}

void sub_1BABAA728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::HAL::translate_cf_string_mcp_value_to_hal(AMCP::HAL *this, CFStringRef *a2)
{
  if (*a2)
  {
    CFIndex Length = CFStringGetLength(*a2);
    __int16 v6 = 0;
    std::vector<unsigned short>::vector(&__p, Length, &v6);
    v9.length = (v8 - (unsigned char *)__p) >> 1;
    v9.location = 0;
    CFStringGetCharacters(*a2, v9, (UniChar *)__p);
    CFDataRef v5 = CFDataCreate(0, (const UInt8 *)__p, v8 - (unsigned char *)__p);
    applesauce::CF::DataRef::DataRef(this, v5);
    if (__p)
    {
      uint64_t v8 = __p;
      operator delete(__p);
    }
  }
  else
  {
    *(void *)this = 0;
  }
}

void sub_1BABAA7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Thing::can_convert_to<CA::ValueRangeList>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    return 0;
  }
  uint64_t v2 = AMCP::Implementation::get_type_marker<CA::ValueRangeList>();
  int v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  long long v11 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v11);
    int v3 = v11;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))v2)
  {
    uint64_t v10 = v2;
    return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v10) != 0;
  }
  uint64_t v7 = AMCP::Implementation::get_type_marker<CA::ValueRangeList>();
  memset(v8, 0, sizeof(v8));
  CFRange v9 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v8, &v7);
  if (!v9) {
    return 0;
  }
  uint64_t v6 = v2;
  BOOL v4 = v9(4, v8, 0, &v6) != 0;
  if (v9) {
    v9(0, v8, 0, 0);
  }
  return v4;
}

void sub_1BABAA904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void *std::vector<double>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<void const*>::__vallocate[abi:ne180100](a1, a2);
    BOOL v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1BABAA97C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

applesauce::CF::DataRef *AMCP::HAL::translate_simple_mcp_value_to_hal<CA::ValueRange>(applesauce::CF::DataRef *result, uint64_t a2)
{
  uint64_t v2 = result;
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<CA::ValueRange>();
  CFDataRef v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  unsigned __int16 v15 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v15);
    CFDataRef v5 = v15;
  }
  if (v5 != (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v10 = AMCP::Implementation::get_type_marker<CA::ValueRange>();
    *(_OWORD *)bytes = 0u;
    long long v12 = 0u;
    uint64_t v13 = 0;
    uint64_t result = (applesauce::CF::DataRef *)(*(uint64_t (**)(uint64_t, uint64_t, UInt8 *, uint64_t *))(a2 + 32))(6, a2, bytes, &v10);
    if (!v13) {
      goto LABEL_12;
    }
    uint64_t v9 = v4;
    uint64_t result = (applesauce::CF::DataRef *)v13(4, bytes, 0, &v9);
    uint64_t v6 = result;
    if (v13) {
      uint64_t result = (applesauce::CF::DataRef *)v13(0, bytes, 0, 0);
    }
    if (!v6) {
      goto LABEL_12;
    }
LABEL_11:
    *(void *)bytes = AMCP::Thing::convert_to<CA::ValueRange>(a2);
    *(void *)&bytes[8] = v7;
    CFDataRef v8 = CFDataCreate(0, bytes, 16);
    return applesauce::CF::DataRef::DataRef(v2, v8);
  }
  uint64_t v14 = v4;
  uint64_t result = (applesauce::CF::DataRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v14);
  if (result) {
    goto LABEL_11;
  }
LABEL_12:
  *(void *)uint64_t v2 = 0;
  return result;
}

void sub_1BABAAAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void, char *, void, void))
{
  if (a15) {
    a15(0, &a11, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Thing::can_convert_to<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    return 0;
  }
  uint64_t v2 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>();
  int v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  long long v11 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v11);
    int v3 = v11;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))v2)
  {
    uint64_t v10 = v2;
    return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v10) != 0;
  }
  uint64_t v7 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>();
  memset(v8, 0, sizeof(v8));
  uint64_t v9 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v8, &v7);
  if (!v9) {
    return 0;
  }
  uint64_t v6 = v2;
  BOOL v4 = v9(4, v8, 0, &v6) != 0;
  if (v9) {
    v9(0, v8, 0, 0);
  }
  return v4;
}

void sub_1BABAAC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *,false>(unint64_t a1, AudioStreamRangedDescription *a2, const AudioStreamRangedDescription *a3, char a4)
{
  uint64_t v7 = a3;
  while (2)
  {
    uint64_t v10 = a2 - 1;
    v193 = a2 - 3;
    v194 = a2 - 2;
    unint64_t v11 = a1;
    v195 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = (uint64_t)a2 - v11;
          uint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)a2 - v11) >> 3);
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)v10, (const AudioStreamRangedDescription *)v11, a3))
                {
                  long long v72 = *(_OWORD *)v11;
                  long long v73 = *(_OWORD *)(v11 + 16);
                  long long v74 = *(_OWORD *)(v11 + 32);
                  v197.mSampleRateRange.Float64 mMaximum = *(Float64 *)(v11 + 48);
                  *(_OWORD *)&v197.mFormat.mBytesPerPacket = v73;
                  *(_OWORD *)&v197.mFormat.mBitsPerChannel = v74;
                  *(_OWORD *)&v197.mFormat.mSampleRate = v72;
                  long long v75 = *(_OWORD *)&v10->mFormat.mSampleRate;
                  long long v76 = *(_OWORD *)&v10->mFormat.mBytesPerPacket;
                  long long v77 = *(_OWORD *)&v10->mFormat.mBitsPerChannel;
                  *(Float64 *)(v11 + 48) = v10->mSampleRateRange.mMaximum;
                  *(_OWORD *)(v11 + 16) = v76;
                  *(_OWORD *)(v11 + 32) = v77;
                  *(_OWORD *)unint64_t v11 = v75;
                  long long v78 = *(_OWORD *)&v197.mFormat.mSampleRate;
                  long long v79 = *(_OWORD *)&v197.mFormat.mBytesPerPacket;
                  long long v80 = *(_OWORD *)&v197.mFormat.mBitsPerChannel;
                  v10->mSampleRateRange.Float64 mMaximum = v197.mSampleRateRange.mMaximum;
                  *(_OWORD *)&v10->mFormat.mBytesPerPacket = v79;
                  *(_OWORD *)&v10->mFormat.mBitsPerChannel = v80;
                  *(_OWORD *)&v10->mFormat.mSampleRate = v78;
                }
                break;
              case 3:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>((AudioStreamRangedDescription *)v11, (Float64 *)(v11 + 56), v10);
                break;
              case 4:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>((AudioStreamRangedDescription *)v11, (AudioStreamRangedDescription *)(v11 + 56), (AudioStreamRangedDescription *)(v11 + 112), &v10->mFormat.mSampleRate);
                break;
              case 5:
                std::vector<char>::pointer v81 = (long long *)(v11 + 56);
                uint64_t v82 = (long long *)(v11 + 112);
                std::vector<char>::pointer v83 = (long long *)(v11 + 168);
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>((AudioStreamRangedDescription *)v11, (AudioStreamRangedDescription *)(v11 + 56), (AudioStreamRangedDescription *)(v11 + 112), (Float64 *)(v11 + 168));
                if (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)v10, (const AudioStreamRangedDescription *)(v11 + 168), v84))
                {
                  long long v87 = *(_OWORD *)(v11 + 184);
                  *(_OWORD *)&v197.mFormat.mSampleRate = *v83;
                  long long v86 = *(_OWORD *)&v197.mFormat.mSampleRate;
                  *(_OWORD *)&v197.mFormat.mBytesPerPacket = v87;
                  *(_OWORD *)&v197.mFormat.mBitsPerChannel = *(_OWORD *)(v11 + 200);
                  long long v88 = *(_OWORD *)&v197.mFormat.mBitsPerChannel;
                  v197.mSampleRateRange.Float64 mMaximum = *(Float64 *)(v11 + 216);
                  Float64 mMaximum = v197.mSampleRateRange.mMaximum;
                  Float64 v90 = v10->mSampleRateRange.mMaximum;
                  long long v92 = *(_OWORD *)&v10->mFormat.mBytesPerPacket;
                  long long v91 = *(_OWORD *)&v10->mFormat.mBitsPerChannel;
                  long long *v83 = *(_OWORD *)&v10->mFormat.mSampleRate;
                  *(_OWORD *)(v11 + 184) = v92;
                  *(_OWORD *)(v11 + 200) = v91;
                  *(Float64 *)(v11 + 216) = v90;
                  *(_OWORD *)&v10->mFormat.mBytesPerPacket = v87;
                  *(_OWORD *)&v10->mFormat.mBitsPerChannel = v88;
                  v10->mSampleRateRange.Float64 mMaximum = mMaximum;
                  *(_OWORD *)&v10->mFormat.mSampleRate = v86;
                  if (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)(v11 + 168), (const AudioStreamRangedDescription *)(v11 + 112), v85))
                  {
                    uint64_t v94 = *(void *)(v11 + 160);
                    long long v96 = *(_OWORD *)(v11 + 128);
                    long long v95 = *(_OWORD *)(v11 + 144);
                    long long v97 = *v82;
                    long long v98 = *(_OWORD *)(v11 + 184);
                    *uint64_t v82 = *v83;
                    *(_OWORD *)(v11 + 128) = v98;
                    *(_OWORD *)(v11 + 144) = *(_OWORD *)(v11 + 200);
                    *(void *)(v11 + 160) = *(void *)(v11 + 216);
                    long long *v83 = v97;
                    *(_OWORD *)(v11 + 184) = v96;
                    *(_OWORD *)(v11 + 200) = v95;
                    *(void *)(v11 + 216) = v94;
                    if (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)(v11 + 112), (const AudioStreamRangedDescription *)(v11 + 56), v93))
                    {
                      uint64_t v100 = *(void *)(v11 + 104);
                      long long v102 = *(_OWORD *)(v11 + 72);
                      long long v101 = *(_OWORD *)(v11 + 88);
                      long long v103 = *v81;
                      long long v104 = *(_OWORD *)(v11 + 128);
                      *std::vector<char>::pointer v81 = *v82;
                      *(_OWORD *)(v11 + 72) = v104;
                      *(_OWORD *)(v11 + 88) = *(_OWORD *)(v11 + 144);
                      *(void *)(v11 + 104) = *(void *)(v11 + 160);
                      *uint64_t v82 = v103;
                      *(_OWORD *)(v11 + 128) = v102;
                      *(_OWORD *)(v11 + 144) = v101;
                      *(void *)(v11 + 160) = v100;
                      if (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)(v11 + 56), (const AudioStreamRangedDescription *)v11, v99))
                      {
                        long long v105 = *(_OWORD *)v11;
                        long long v106 = *(_OWORD *)(v11 + 16);
                        long long v107 = *(_OWORD *)(v11 + 32);
                        v197.mSampleRateRange.Float64 mMaximum = *(Float64 *)(v11 + 48);
                        *(_OWORD *)&v197.mFormat.mBytesPerPacket = v106;
                        *(_OWORD *)&v197.mFormat.mBitsPerChannel = v107;
                        *(_OWORD *)&v197.mFormat.mSampleRate = v105;
                        long long v108 = *(_OWORD *)(v11 + 72);
                        *(_OWORD *)unint64_t v11 = *v81;
                        *(_OWORD *)(v11 + 16) = v108;
                        *(_OWORD *)(v11 + 32) = *(_OWORD *)(v11 + 88);
                        *(void *)(v11 + 48) = *(void *)(v11 + 104);
                        long long v109 = *(_OWORD *)&v197.mFormat.mSampleRate;
                        long long v110 = *(_OWORD *)&v197.mFormat.mBytesPerPacket;
                        long long v111 = *(_OWORD *)&v197.mFormat.mBitsPerChannel;
                        *(Float64 *)(v11 + 104) = v197.mSampleRateRange.mMaximum;
                        *(_OWORD *)(v11 + 72) = v110;
                        *(_OWORD *)(v11 + 88) = v111;
                        *std::vector<char>::pointer v81 = v109;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 1343)
          {
            v112 = (CAStreamRangedDescription *)(v11 + 56);
            BOOL v114 = (AudioStreamRangedDescription *)v11 == a2 || v112 == (CAStreamRangedDescription *)a2;
            if (a4)
            {
              if (!v114)
              {
                uint64_t v115 = 0;
                v116 = (CAStreamRangedDescription *)v11;
                do
                {
                  AudioValueRange v117 = (const AudioStreamRangedDescription *)v116;
                  v116 = v112;
                  if (CAStreamRangedDescription::Sorter(v112, v117, a3))
                  {
                    long long v118 = *(_OWORD *)v116;
                    long long v119 = *((_OWORD *)v116 + 1);
                    long long v120 = *((_OWORD *)v116 + 2);
                    v197.mSampleRateRange.Float64 mMaximum = *((Float64 *)v116 + 6);
                    *(_OWORD *)&v197.mFormat.mBytesPerPacket = v119;
                    *(_OWORD *)&v197.mFormat.mBitsPerChannel = v120;
                    *(_OWORD *)&v197.mFormat.mSampleRate = v118;
                    uint64_t v121 = v115;
                    while (1)
                    {
                      uint64_t v122 = v11 + v121;
                      long long v123 = *(_OWORD *)(v11 + v121 + 16);
                      *(_OWORD *)(v122 + 56) = *(_OWORD *)(v11 + v121);
                      *(_OWORD *)(v122 + 72) = v123;
                      *(_OWORD *)(v122 + 88) = *(_OWORD *)(v11 + v121 + 32);
                      *(void *)(v122 + 104) = *(void *)(v11 + v121 + 48);
                      if (!v121) {
                        break;
                      }
                      v121 -= 56;
                      if ((CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&v197, (const AudioStreamRangedDescription *)(v121 + v11), a3) & 1) == 0)
                      {
                        uint64_t v124 = v11 + v121 + 56;
                        goto LABEL_80;
                      }
                    }
                    uint64_t v124 = v11;
LABEL_80:
                    long long v125 = *(_OWORD *)&v197.mFormat.mSampleRate;
                    long long v126 = *(_OWORD *)&v197.mFormat.mBytesPerPacket;
                    long long v127 = *(_OWORD *)&v197.mFormat.mBitsPerChannel;
                    *(Float64 *)(v124 + 48) = v197.mSampleRateRange.mMaximum;
                    *(_OWORD *)(v124 + 16) = v126;
                    *(_OWORD *)(v124 + 32) = v127;
                    *(_OWORD *)uint64_t v124 = v125;
                  }
                  v112 = (CAStreamRangedDescription *)((char *)v116 + 56);
                  v115 += 56;
                }
                while ((AudioStreamRangedDescription *)((char *)v116 + 56) != a2);
              }
            }
            else if (!v114)
            {
              do
              {
                v182 = (const AudioStreamRangedDescription *)a1;
                a1 = (unint64_t)v112;
                if (CAStreamRangedDescription::Sorter(v112, v182, a3))
                {
                  long long v183 = *(_OWORD *)a1;
                  long long v184 = *(_OWORD *)(a1 + 16);
                  long long v185 = *(_OWORD *)(a1 + 32);
                  v197.mSampleRateRange.Float64 mMaximum = *(Float64 *)(a1 + 48);
                  *(_OWORD *)&v197.mFormat.mBytesPerPacket = v184;
                  *(_OWORD *)&v197.mFormat.mBitsPerChannel = v185;
                  *(_OWORD *)&v197.mFormat.mSampleRate = v183;
                  unint64_t v186 = a1;
                  do
                  {
                    unint64_t v187 = v186 - 56;
                    long long v188 = *(_OWORD *)(v186 - 40);
                    *(_OWORD *)unint64_t v186 = *(_OWORD *)(v186 - 56);
                    *(_OWORD *)(v186 + 16) = v188;
                    *(_OWORD *)(v186 + 32) = *(_OWORD *)(v186 - 24);
                    *(void *)(v186 + 48) = *(void *)(v186 - 8);
                    char v189 = CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&v197, (const AudioStreamRangedDescription *)(v186 - 112), a3);
                    unint64_t v186 = v187;
                  }
                  while ((v189 & 1) != 0);
                  long long v190 = *(_OWORD *)&v197.mFormat.mSampleRate;
                  long long v191 = *(_OWORD *)&v197.mFormat.mBytesPerPacket;
                  long long v192 = *(_OWORD *)&v197.mFormat.mBitsPerChannel;
                  *(Float64 *)(v187 + 48) = v197.mSampleRateRange.mMaximum;
                  *(_OWORD *)(v187 + 16) = v191;
                  *(_OWORD *)(v187 + 32) = v192;
                  *(_OWORD *)unint64_t v187 = v190;
                }
                v112 = (CAStreamRangedDescription *)(a1 + 56);
              }
              while ((AudioStreamRangedDescription *)(a1 + 56) != a2);
            }
            return;
          }
          if (!v7)
          {
            if ((AudioStreamRangedDescription *)v11 != a2)
            {
              int64_t v128 = (unint64_t)(v13 - 2) >> 1;
              int64_t v129 = v128;
              do
              {
                int64_t v130 = v129;
                if (v128 >= v129)
                {
                  uint64_t v131 = (2 * v129) | 1;
                  unint64_t v132 = a1 + 56 * v131;
                  if (2 * v129 + 2 < v13
                    && CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)(a1 + 56 * v131), (const AudioStreamRangedDescription *)(v132 + 56), a3))
                  {
                    v132 += 56;
                    uint64_t v131 = 2 * v130 + 2;
                  }
                  unint64_t v133 = a1 + 56 * v130;
                  if ((CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)v132, (const AudioStreamRangedDescription *)v133, a3) & 1) == 0)
                  {
                    long long v134 = *(_OWORD *)v133;
                    long long v135 = *(_OWORD *)(v133 + 16);
                    long long v136 = *(_OWORD *)(v133 + 32);
                    v197.mSampleRateRange.Float64 mMaximum = *(Float64 *)(v133 + 48);
                    *(_OWORD *)&v197.mFormat.mBytesPerPacket = v135;
                    *(_OWORD *)&v197.mFormat.mBitsPerChannel = v136;
                    *(_OWORD *)&v197.mFormat.mSampleRate = v134;
                    do
                    {
                      unint64_t v137 = v132;
                      long long v138 = *(_OWORD *)v132;
                      long long v139 = *(_OWORD *)(v132 + 16);
                      long long v140 = *(_OWORD *)(v132 + 32);
                      *(void *)(v133 + 48) = *(void *)(v132 + 48);
                      *(_OWORD *)(v133 + 16) = v139;
                      *(_OWORD *)(v133 + 32) = v140;
                      *(_OWORD *)unint64_t v133 = v138;
                      if (v128 < v131) {
                        break;
                      }
                      uint64_t v141 = (2 * v131) | 1;
                      unint64_t v132 = a1 + 56 * v141;
                      uint64_t v142 = 2 * v131 + 2;
                      if (v142 < v13
                        && CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)(a1 + 56 * v141), (const AudioStreamRangedDescription *)(v132 + 56), a3))
                      {
                        v132 += 56;
                        uint64_t v141 = v142;
                      }
                      unint64_t v133 = v137;
                      uint64_t v131 = v141;
                    }
                    while (!CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)v132, &v197, a3));
                    long long v143 = *(_OWORD *)&v197.mFormat.mSampleRate;
                    long long v144 = *(_OWORD *)&v197.mFormat.mBytesPerPacket;
                    long long v145 = *(_OWORD *)&v197.mFormat.mBitsPerChannel;
                    *(Float64 *)(v137 + 48) = v197.mSampleRateRange.mMaximum;
                    *(_OWORD *)(v137 + 16) = v144;
                    *(_OWORD *)(v137 + 32) = v145;
                    *(_OWORD *)unint64_t v137 = v143;
                  }
                }
                int64_t v129 = v130 - 1;
              }
              while (v130);
              int64_t v146 = v12 / 0x38uLL;
              v147 = v195;
              do
              {
                uint64_t v148 = 0;
                long long v149 = *(_OWORD *)a1;
                long long v150 = *(_OWORD *)(a1 + 16);
                long long v151 = *(_OWORD *)(a1 + 32);
                v196.mSampleRateRange.Float64 mMaximum = *(Float64 *)(a1 + 48);
                *(_OWORD *)&v196.mFormat.mBytesPerPacket = v150;
                *(_OWORD *)&v196.mFormat.mBitsPerChannel = v151;
                *(_OWORD *)&v196.mFormat.mSampleRate = v149;
                unint64_t v152 = a1;
                do
                {
                  uint64_t v153 = v152 + 56 * v148 + 56;
                  uint64_t v154 = (2 * v148) | 1;
                  uint64_t v155 = 2 * v148 + 2;
                  if (v155 < v146
                    && CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)(v152 + 56 * v148 + 56), (const AudioStreamRangedDescription *)(v152 + 56 * v148 + 112), a3))
                  {
                    v153 += 56;
                    uint64_t v154 = v155;
                  }
                  long long v156 = *(_OWORD *)v153;
                  long long v157 = *(_OWORD *)(v153 + 16);
                  long long v158 = *(_OWORD *)(v153 + 32);
                  *(void *)(v152 + 48) = *(void *)(v153 + 48);
                  *(_OWORD *)(v152 + 16) = v157;
                  *(_OWORD *)(v152 + 32) = v158;
                  *(_OWORD *)unint64_t v152 = v156;
                  unint64_t v152 = v153;
                  uint64_t v148 = v154;
                }
                while (v154 <= (uint64_t)((unint64_t)(v146 - 2) >> 1));
                if ((AudioStreamRangedDescription *)v153 == --v147)
                {
                  long long v178 = *(_OWORD *)&v196.mFormat.mSampleRate;
                  long long v179 = *(_OWORD *)&v196.mFormat.mBytesPerPacket;
                  long long v180 = *(_OWORD *)&v196.mFormat.mBitsPerChannel;
                  *(Float64 *)(v153 + 48) = v196.mSampleRateRange.mMaximum;
                  *(_OWORD *)(v153 + 16) = v179;
                  *(_OWORD *)(v153 + 32) = v180;
                  *(_OWORD *)uint64_t v153 = v178;
                }
                else
                {
                  long long v159 = *(_OWORD *)&v147->mFormat.mSampleRate;
                  long long v160 = *(_OWORD *)&v147->mFormat.mBytesPerPacket;
                  long long v161 = *(_OWORD *)&v147->mFormat.mBitsPerChannel;
                  *(Float64 *)(v153 + 48) = v147->mSampleRateRange.mMaximum;
                  *(_OWORD *)(v153 + 16) = v160;
                  *(_OWORD *)(v153 + 32) = v161;
                  *(_OWORD *)uint64_t v153 = v159;
                  long long v162 = *(_OWORD *)&v196.mFormat.mSampleRate;
                  long long v163 = *(_OWORD *)&v196.mFormat.mBytesPerPacket;
                  long long v164 = *(_OWORD *)&v196.mFormat.mBitsPerChannel;
                  v147->mSampleRateRange.Float64 mMaximum = v196.mSampleRateRange.mMaximum;
                  *(_OWORD *)&v147->mFormat.mBytesPerPacket = v163;
                  *(_OWORD *)&v147->mFormat.mBitsPerChannel = v164;
                  *(_OWORD *)&v147->mFormat.mSampleRate = v162;
                  uint64_t v165 = v153 - a1 + 56;
                  if (v165 >= 57)
                  {
                    unint64_t v166 = (v165 / 0x38uLL - 2) >> 1;
                    unint64_t v167 = a1 + 56 * v166;
                    if (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)v167, (const AudioStreamRangedDescription *)v153, a3))
                    {
                      long long v168 = *(_OWORD *)v153;
                      long long v169 = *(_OWORD *)(v153 + 16);
                      long long v170 = *(_OWORD *)(v153 + 32);
                      v197.mSampleRateRange.Float64 mMaximum = *(Float64 *)(v153 + 48);
                      *(_OWORD *)&v197.mFormat.mBytesPerPacket = v169;
                      *(_OWORD *)&v197.mFormat.mBitsPerChannel = v170;
                      *(_OWORD *)&v197.mFormat.mSampleRate = v168;
                      do
                      {
                        uint64_t v171 = v167;
                        long long v172 = *(_OWORD *)v167;
                        long long v173 = *(_OWORD *)(v167 + 16);
                        long long v174 = *(_OWORD *)(v167 + 32);
                        *(void *)(v153 + 48) = *(void *)(v167 + 48);
                        *(_OWORD *)(v153 + 16) = v173;
                        *(_OWORD *)(v153 + 32) = v174;
                        *(_OWORD *)uint64_t v153 = v172;
                        if (!v166) {
                          break;
                        }
                        unint64_t v166 = (v166 - 1) >> 1;
                        unint64_t v167 = a1 + 56 * v166;
                        uint64_t v153 = v171;
                      }
                      while ((CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)v167, &v197, a3) & 1) != 0);
                      long long v175 = *(_OWORD *)&v197.mFormat.mSampleRate;
                      long long v176 = *(_OWORD *)&v197.mFormat.mBytesPerPacket;
                      long long v177 = *(_OWORD *)&v197.mFormat.mBitsPerChannel;
                      *(Float64 *)(v171 + 48) = v197.mSampleRateRange.mMaximum;
                      *(_OWORD *)(v171 + 16) = v176;
                      *(_OWORD *)(v171 + 32) = v177;
                      *(_OWORD *)uint64_t v171 = v175;
                    }
                  }
                }
              }
              while (v146-- > 2);
            }
            return;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          unint64_t v15 = v11 + 56 * ((unint64_t)v13 >> 1);
          if ((unint64_t)v12 < 0x1C01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>((AudioStreamRangedDescription *)v15, (Float64 *)v11, v10);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>((AudioStreamRangedDescription *)v11, (Float64 *)v15, v10);
            uint64_t v16 = 56 * v14;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>((AudioStreamRangedDescription *)(v11 + 56), (Float64 *)(v16 + v11 - 56), v194);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>((AudioStreamRangedDescription *)(v11 + 112), (Float64 *)(v11 + 56 + v16), v193);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>((AudioStreamRangedDescription *)(v16 + v11 - 56), (Float64 *)v15, (AudioStreamRangedDescription *)(v11 + 56 + v16));
            long long v18 = *(_OWORD *)v11;
            long long v19 = *(_OWORD *)(v11 + 16);
            long long v20 = *(_OWORD *)(v11 + 32);
            v197.mSampleRateRange.Float64 mMaximum = *(Float64 *)(v11 + 48);
            *(_OWORD *)&v197.mFormat.mBytesPerPacket = v19;
            *(_OWORD *)&v197.mFormat.mBitsPerChannel = v20;
            *(_OWORD *)&v197.mFormat.mSampleRate = v18;
            long long v21 = *(_OWORD *)v15;
            long long v22 = *(_OWORD *)(v15 + 16);
            long long v23 = *(_OWORD *)(v15 + 32);
            *(void *)(v11 + 48) = *(void *)(v15 + 48);
            *(_OWORD *)(v11 + 16) = v22;
            *(_OWORD *)(v11 + 32) = v23;
            *(_OWORD *)unint64_t v11 = v21;
            long long v24 = *(_OWORD *)&v197.mFormat.mSampleRate;
            long long v25 = *(_OWORD *)&v197.mFormat.mBytesPerPacket;
            long long v26 = *(_OWORD *)&v197.mFormat.mBitsPerChannel;
            *(Float64 *)(v15 + 48) = v197.mSampleRateRange.mMaximum;
            *(_OWORD *)(v15 + 16) = v25;
            *(_OWORD *)(v15 + 32) = v26;
            *(_OWORD *)unint64_t v15 = v24;
          }
          a2 = v195;
          uint64_t v7 = (const AudioStreamRangedDescription *)((char *)v7 - 1);
          if ((a4 & 1) != 0
            || (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)(v11 - 56), (const AudioStreamRangedDescription *)v11, v17) & 1) != 0)
          {
            break;
          }
          long long v50 = *(_OWORD *)v11;
          long long v51 = *(_OWORD *)(v11 + 16);
          long long v52 = *(_OWORD *)(v11 + 32);
          v196.mSampleRateRange.Float64 mMaximum = *(Float64 *)(v11 + 48);
          *(_OWORD *)&v196.mFormat.mBytesPerPacket = v51;
          *(_OWORD *)&v196.mFormat.mBitsPerChannel = v52;
          *(_OWORD *)&v196.mFormat.mSampleRate = v50;
          if (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&v196, v10, v17))
          {
            do
              v11 += 56;
            while ((CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&v196, (const AudioStreamRangedDescription *)v11, a3) & 1) == 0);
          }
          else
          {
            unint64_t v53 = (const AudioStreamRangedDescription *)(v11 + 56);
            do
            {
              unint64_t v11 = (unint64_t)v53;
              if (v53 >= v195) {
                break;
              }
              int v54 = CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&v196, v53, a3);
              unint64_t v53 = (const AudioStreamRangedDescription *)(v11 + 56);
            }
            while (!v54);
          }
          uint64_t v55 = v195;
          if (v11 < (unint64_t)v195)
          {
            uint64_t v55 = v195;
            do
              --v55;
            while ((CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&v196, v55, a3) & 1) != 0);
          }
          while (v11 < (unint64_t)v55)
          {
            long long v56 = *(_OWORD *)v11;
            long long v57 = *(_OWORD *)(v11 + 16);
            long long v58 = *(_OWORD *)(v11 + 32);
            v197.mSampleRateRange.Float64 mMaximum = *(Float64 *)(v11 + 48);
            *(_OWORD *)&v197.mFormat.mBytesPerPacket = v57;
            *(_OWORD *)&v197.mFormat.mBitsPerChannel = v58;
            *(_OWORD *)&v197.mFormat.mSampleRate = v56;
            long long v59 = *(_OWORD *)&v55->mFormat.mSampleRate;
            long long v60 = *(_OWORD *)&v55->mFormat.mBytesPerPacket;
            long long v61 = *(_OWORD *)&v55->mFormat.mBitsPerChannel;
            *(Float64 *)(v11 + 48) = v55->mSampleRateRange.mMaximum;
            *(_OWORD *)(v11 + 16) = v60;
            *(_OWORD *)(v11 + 32) = v61;
            *(_OWORD *)unint64_t v11 = v59;
            long long v62 = *(_OWORD *)&v197.mFormat.mSampleRate;
            long long v63 = *(_OWORD *)&v197.mFormat.mBytesPerPacket;
            long long v64 = *(_OWORD *)&v197.mFormat.mBitsPerChannel;
            v55->mSampleRateRange.Float64 mMaximum = v197.mSampleRateRange.mMaximum;
            *(_OWORD *)&v55->mFormat.mBytesPerPacket = v63;
            *(_OWORD *)&v55->mFormat.mBitsPerChannel = v64;
            *(_OWORD *)&v55->mFormat.mSampleRate = v62;
            do
              v11 += 56;
            while (!CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&v196, (const AudioStreamRangedDescription *)v11, a3));
            do
              --v55;
            while ((CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&v196, v55, a3) & 1) != 0);
          }
          unint64_t v65 = (long long *)(v11 - 56);
          BOOL v4 = v11 - 56 >= a1;
          BOOL v5 = v11 - 56 == a1;
          if (v11 - 56 != a1)
          {
            long long v66 = *v65;
            long long v67 = *(_OWORD *)(v11 - 40);
            long long v68 = *(_OWORD *)(v11 - 24);
            *(void *)(a1 + 48) = *(void *)(v11 - 8);
            *(_OWORD *)(a1 + 16) = v67;
            *(_OWORD *)(a1 + 32) = v68;
            *(_OWORD *)a1 = v66;
          }
          a4 = 0;
          long long v69 = *(_OWORD *)&v196.mFormat.mSampleRate;
          long long v70 = *(_OWORD *)&v196.mFormat.mBytesPerPacket;
          long long v71 = *(_OWORD *)&v196.mFormat.mBitsPerChannel;
          *(Float64 *)(v11 - 8) = v196.mSampleRateRange.mMaximum;
          *(_OWORD *)(v11 - 40) = v70;
          *(_OWORD *)(v11 - 24) = v71;
          long long *v65 = v69;
        }
        long long v27 = *(_OWORD *)v11;
        long long v28 = *(_OWORD *)(v11 + 16);
        long long v29 = *(_OWORD *)(v11 + 32);
        v196.mSampleRateRange.Float64 mMaximum = *(Float64 *)(v11 + 48);
        *(_OWORD *)&v196.mFormat.mBytesPerPacket = v28;
        *(_OWORD *)&v196.mFormat.mBitsPerChannel = v29;
        *(_OWORD *)&v196.mFormat.mSampleRate = v27;
        std::vector<char>::pointer v30 = (CAStreamRangedDescription *)v11;
        do
        {
          uint64_t v31 = v30;
          std::vector<char>::pointer v30 = (CAStreamRangedDescription *)((char *)v30 + 56);
        }
        while ((CAStreamRangedDescription::Sorter(v30, &v196, v17) & 1) != 0);
        std::vector<char>::pointer v32 = (CAStreamRangedDescription *)v195;
        if (v31 == (CAStreamRangedDescription *)v11)
        {
          std::vector<char>::pointer v32 = (CAStreamRangedDescription *)v195;
          do
          {
            if (v30 >= v32) {
              break;
            }
            std::vector<char>::pointer v32 = (CAStreamRangedDescription *)((char *)v32 - 56);
          }
          while ((CAStreamRangedDescription::Sorter(v32, &v196, v17) & 1) == 0);
        }
        else
        {
          do
            std::vector<char>::pointer v32 = (CAStreamRangedDescription *)((char *)v32 - 56);
          while (!CAStreamRangedDescription::Sorter(v32, &v196, v17));
        }
        if (v30 < v32)
        {
          uint64_t v33 = v30;
          std::vector<char>::pointer v34 = v32;
          do
          {
            long long v36 = *((_OWORD *)v33 + 1);
            *(_OWORD *)&v197.mFormat.mSampleRate = *(_OWORD *)v33;
            long long v35 = *(_OWORD *)&v197.mFormat.mSampleRate;
            *(_OWORD *)&v197.mFormat.mBytesPerPacket = v36;
            *(_OWORD *)&v197.mFormat.mBitsPerChannel = *((_OWORD *)v33 + 2);
            long long v37 = *(_OWORD *)&v197.mFormat.mBitsPerChannel;
            v197.mSampleRateRange.Float64 mMaximum = *((Float64 *)v33 + 6);
            Float64 v38 = v197.mSampleRateRange.mMaximum;
            uint64_t v39 = *((void *)v34 + 6);
            long long v41 = *((_OWORD *)v34 + 1);
            long long v40 = *((_OWORD *)v34 + 2);
            *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
            *((_OWORD *)v33 + 1) = v41;
            *((_OWORD *)v33 + 2) = v40;
            *((void *)v33 + 6) = v39;
            *((_OWORD *)v34 + 1) = v36;
            *((_OWORD *)v34 + 2) = v37;
            *((Float64 *)v34 + 6) = v38;
            *(_OWORD *)std::vector<char>::pointer v34 = v35;
            do
            {
              uint64_t v31 = v33;
              uint64_t v33 = (CAStreamRangedDescription *)((char *)v33 + 56);
            }
            while ((CAStreamRangedDescription::Sorter(v33, &v196, v17) & 1) != 0);
            do
              std::vector<char>::pointer v34 = (CAStreamRangedDescription *)((char *)v34 - 56);
            while (!CAStreamRangedDescription::Sorter(v34, &v196, v17));
          }
          while (v33 < v34);
        }
        if (v31 != (CAStreamRangedDescription *)a1)
        {
          long long v42 = *(_OWORD *)v31;
          long long v43 = *((_OWORD *)v31 + 1);
          long long v44 = *((_OWORD *)v31 + 2);
          *(void *)(a1 + 48) = *((void *)v31 + 6);
          *(_OWORD *)(a1 + 16) = v43;
          *(_OWORD *)(a1 + 32) = v44;
          *(_OWORD *)a1 = v42;
        }
        long long v45 = *(_OWORD *)&v196.mFormat.mSampleRate;
        long long v46 = *(_OWORD *)&v196.mFormat.mBytesPerPacket;
        long long v47 = *(_OWORD *)&v196.mFormat.mBitsPerChannel;
        *((void *)v31 + 6) = *(void *)&v196.mSampleRateRange.mMaximum;
        *((_OWORD *)v31 + 1) = v46;
        *((_OWORD *)v31 + 2) = v47;
        *(_OWORD *)uint64_t v31 = v45;
        if (v30 >= v32) {
          break;
        }
LABEL_31:
        std::__introsort<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *,false>(a1, v31, v7, a4 & 1);
        a4 = 0;
        unint64_t v11 = (unint64_t)v31 + 56;
      }
      BOOL v48 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>((AudioStreamRangedDescription *)a1, (AudioStreamRangedDescription *)v31, v17);
      unint64_t v11 = (unint64_t)v31 + 56;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>((AudioStreamRangedDescription *)v31 + 1, v195, v49))
      {
        break;
      }
      if (!v48) {
        goto LABEL_31;
      }
    }
    a2 = (AudioStreamRangedDescription *)v31;
    if (!v48) {
      continue;
    }
    break;
  }
}

void *applesauce::CF::TypeRef::from_get(void *this, CFTypeRef cf)
{
  int v3 = this;
  if (cf) {
    this = CFRetain(cf);
  }
  void *v3 = cf;
  return this;
}

BOOL AMCP::Thing::can_convert_to<applesauce::CF::DataRef>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    return 0;
  }
  uint64_t v2 = AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>();
  int v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  unint64_t v11 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v11);
    int v3 = v11;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))v2)
  {
    uint64_t v10 = v2;
    return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v10) != 0;
  }
  uint64_t v7 = AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>();
  memset(v8, 0, sizeof(v8));
  uint64_t v9 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v8, &v7);
  if (!v9) {
    return 0;
  }
  uint64_t v6 = v2;
  BOOL v4 = v9(4, v8, 0, &v6) != 0;
  if (v9) {
    v9(0, v8, 0, 0);
  }
  return v4;
}

void sub_1BABAB890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

BOOL AMCP::Thing::can_convert_to<applesauce::CF::ArrayRef>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    return 0;
  }
  uint64_t v2 = AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
  int v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  unint64_t v11 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v11);
    int v3 = v11;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))v2)
  {
    uint64_t v10 = v2;
    return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v10) != 0;
  }
  uint64_t v7 = AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
  memset(v8, 0, sizeof(v8));
  uint64_t v9 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v8, &v7);
  if (!v9) {
    return 0;
  }
  uint64_t v6 = v2;
  BOOL v4 = v9(4, v8, 0, &v6) != 0;
  if (v9) {
    v9(0, v8, 0, 0);
  }
  return v4;
}

void sub_1BABAB9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

BOOL AMCP::Thing::can_convert_to<applesauce::CF::DictionaryRef>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    return 0;
  }
  uint64_t v2 = AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
  int v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  unint64_t v11 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v11);
    int v3 = v11;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))v2)
  {
    uint64_t v10 = v2;
    return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v10) != 0;
  }
  uint64_t v7 = AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
  memset(v8, 0, sizeof(v8));
  uint64_t v9 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v8, &v7);
  if (!v9) {
    return 0;
  }
  uint64_t v6 = v2;
  BOOL v4 = v9(4, v8, 0, &v6) != 0;
  if (v9) {
    v9(0, v8, 0, 0);
  }
  return v4;
}

void sub_1BABABAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(AudioStreamRangedDescription *a1, Float64 *this, AudioStreamRangedDescription *a3)
{
  char v6 = CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)this, a1, a3);
  uint64_t result = CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)a3, (const AudioStreamRangedDescription *)this, v7);
  if (v6)
  {
    if (result)
    {
      Float64 mMaximum = a1->mSampleRateRange.mMaximum;
      long long v12 = *(_OWORD *)&a1->mFormat.mBytesPerPacket;
      long long v11 = *(_OWORD *)&a1->mFormat.mBitsPerChannel;
      long long v13 = *(_OWORD *)&a1->mFormat.mSampleRate;
      long long v15 = *(_OWORD *)&a3->mFormat.mBytesPerPacket;
      long long v14 = *(_OWORD *)&a3->mFormat.mBitsPerChannel;
      long long v16 = *(_OWORD *)&a3->mFormat.mSampleRate;
      a1->mSampleRateRange.Float64 mMaximum = a3->mSampleRateRange.mMaximum;
      *(_OWORD *)&a1->mFormat.mBytesPerPacket = v15;
      *(_OWORD *)&a1->mFormat.mBitsPerChannel = v14;
      *(_OWORD *)&a1->mFormat.mSampleRate = v16;
    }
    else
    {
      Float64 v31 = a1->mSampleRateRange.mMaximum;
      long long v33 = *(_OWORD *)&a1->mFormat.mBytesPerPacket;
      long long v32 = *(_OWORD *)&a1->mFormat.mBitsPerChannel;
      long long v34 = *(_OWORD *)&a1->mFormat.mSampleRate;
      long long v36 = *((_OWORD *)this + 1);
      long long v35 = *((_OWORD *)this + 2);
      long long v37 = *(_OWORD *)this;
      a1->mSampleRateRange.Float64 mMaximum = this[6];
      *(_OWORD *)&a1->mFormat.mBytesPerPacket = v36;
      *(_OWORD *)&a1->mFormat.mBitsPerChannel = v35;
      *(_OWORD *)&a1->mFormat.mSampleRate = v37;
      *(_OWORD *)this = v34;
      *((_OWORD *)this + 1) = v33;
      *((_OWORD *)this + 2) = v32;
      this[6] = v31;
      uint64_t result = CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)a3, (const AudioStreamRangedDescription *)this, v9);
      if (!result) {
        return result;
      }
      Float64 mMaximum = this[6];
      long long v12 = *((_OWORD *)this + 1);
      long long v11 = *((_OWORD *)this + 2);
      long long v13 = *(_OWORD *)this;
      long long v39 = *(_OWORD *)&a3->mFormat.mBytesPerPacket;
      long long v38 = *(_OWORD *)&a3->mFormat.mBitsPerChannel;
      long long v40 = *(_OWORD *)&a3->mFormat.mSampleRate;
      this[6] = a3->mSampleRateRange.mMaximum;
      *((_OWORD *)this + 1) = v39;
      *((_OWORD *)this + 2) = v38;
      *(_OWORD *)this = v40;
    }
    *(_OWORD *)&a3->mFormat.mSampleRate = v13;
    *(_OWORD *)&a3->mFormat.mBytesPerPacket = v12;
    *(_OWORD *)&a3->mFormat.mBitsPerChannel = v11;
    a3->mSampleRateRange.Float64 mMaximum = mMaximum;
  }
  else if (result)
  {
    Float64 v17 = this[6];
    long long v19 = *((_OWORD *)this + 1);
    long long v18 = *((_OWORD *)this + 2);
    long long v20 = *(_OWORD *)this;
    long long v22 = *(_OWORD *)&a3->mFormat.mBytesPerPacket;
    long long v21 = *(_OWORD *)&a3->mFormat.mBitsPerChannel;
    long long v23 = *(_OWORD *)&a3->mFormat.mSampleRate;
    this[6] = a3->mSampleRateRange.mMaximum;
    *((_OWORD *)this + 1) = v22;
    *((_OWORD *)this + 2) = v21;
    *(_OWORD *)this = v23;
    *(_OWORD *)&a3->mFormat.mSampleRate = v20;
    *(_OWORD *)&a3->mFormat.mBytesPerPacket = v19;
    *(_OWORD *)&a3->mFormat.mBitsPerChannel = v18;
    a3->mSampleRateRange.Float64 mMaximum = v17;
    uint64_t result = CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)this, a1, v9);
    if (result)
    {
      Float64 v24 = a1->mSampleRateRange.mMaximum;
      long long v26 = *(_OWORD *)&a1->mFormat.mBytesPerPacket;
      long long v25 = *(_OWORD *)&a1->mFormat.mBitsPerChannel;
      long long v27 = *(_OWORD *)&a1->mFormat.mSampleRate;
      long long v29 = *((_OWORD *)this + 1);
      long long v28 = *((_OWORD *)this + 2);
      long long v30 = *(_OWORD *)this;
      a1->mSampleRateRange.Float64 mMaximum = this[6];
      *(_OWORD *)&a1->mFormat.mBytesPerPacket = v29;
      *(_OWORD *)&a1->mFormat.mBitsPerChannel = v28;
      *(_OWORD *)&a1->mFormat.mSampleRate = v30;
      *(_OWORD *)this = v27;
      *((_OWORD *)this + 1) = v26;
      *((_OWORD *)this + 2) = v25;
      this[6] = v24;
    }
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(AudioStreamRangedDescription *a1, AudioStreamRangedDescription *a2, AudioStreamRangedDescription *a3, Float64 *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(a1, &a2->mFormat.mSampleRate, a3);
  if (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)a4, a3, v8))
  {
    Float64 mMaximum = a3->mSampleRateRange.mMaximum;
    long long v13 = *(_OWORD *)&a3->mFormat.mBytesPerPacket;
    long long v12 = *(_OWORD *)&a3->mFormat.mBitsPerChannel;
    long long v14 = *(_OWORD *)&a3->mFormat.mSampleRate;
    long long v16 = *((_OWORD *)a4 + 1);
    long long v15 = *((_OWORD *)a4 + 2);
    long long v17 = *(_OWORD *)a4;
    a3->mSampleRateRange.Float64 mMaximum = a4[6];
    *(_OWORD *)&a3->mFormat.mBytesPerPacket = v16;
    *(_OWORD *)&a3->mFormat.mBitsPerChannel = v15;
    *(_OWORD *)&a3->mFormat.mSampleRate = v17;
    *(_OWORD *)a4 = v14;
    *((_OWORD *)a4 + 1) = v13;
    *((_OWORD *)a4 + 2) = v12;
    a4[6] = mMaximum;
    if (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)a3, a2, v9))
    {
      Float64 v19 = a2->mSampleRateRange.mMaximum;
      long long v21 = *(_OWORD *)&a2->mFormat.mBytesPerPacket;
      long long v20 = *(_OWORD *)&a2->mFormat.mBitsPerChannel;
      long long v22 = *(_OWORD *)&a2->mFormat.mSampleRate;
      long long v24 = *(_OWORD *)&a3->mFormat.mBytesPerPacket;
      long long v23 = *(_OWORD *)&a3->mFormat.mBitsPerChannel;
      long long v25 = *(_OWORD *)&a3->mFormat.mSampleRate;
      a2->mSampleRateRange.Float64 mMaximum = a3->mSampleRateRange.mMaximum;
      *(_OWORD *)&a2->mFormat.mBytesPerPacket = v24;
      *(_OWORD *)&a2->mFormat.mBitsPerChannel = v23;
      *(_OWORD *)&a2->mFormat.mSampleRate = v25;
      *(_OWORD *)&a3->mFormat.mSampleRate = v22;
      *(_OWORD *)&a3->mFormat.mBytesPerPacket = v21;
      *(_OWORD *)&a3->mFormat.mBitsPerChannel = v20;
      a3->mSampleRateRange.Float64 mMaximum = v19;
      if (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)a2, a1, v18))
      {
        Float64 v26 = a1->mSampleRateRange.mMaximum;
        long long v27 = *(_OWORD *)&a1->mFormat.mBytesPerPacket;
        __n128 result = *(__n128 *)&a1->mFormat.mBitsPerChannel;
        long long v28 = *(_OWORD *)&a1->mFormat.mSampleRate;
        long long v30 = *(_OWORD *)&a2->mFormat.mBytesPerPacket;
        long long v29 = *(_OWORD *)&a2->mFormat.mBitsPerChannel;
        long long v31 = *(_OWORD *)&a2->mFormat.mSampleRate;
        a1->mSampleRateRange.Float64 mMaximum = a2->mSampleRateRange.mMaximum;
        *(_OWORD *)&a1->mFormat.mBytesPerPacket = v30;
        *(_OWORD *)&a1->mFormat.mBitsPerChannel = v29;
        *(_OWORD *)&a1->mFormat.mSampleRate = v31;
        *(_OWORD *)&a2->mFormat.mSampleRate = v28;
        *(_OWORD *)&a2->mFormat.mBytesPerPacket = v27;
        *(__n128 *)&a2->mFormat.mBitsPerChannel = result;
        a2->mSampleRateRange.Float64 mMaximum = v26;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(AudioStreamRangedDescription *a1, AudioStreamRangedDescription *a2, const AudioStreamRangedDescription *a3)
{
  uint64_t v5 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v7 = a2 - 1;
      if (!CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&a2[-1], a1, a3)) {
        return 1;
      }
      Float64 mMaximum = a1->mSampleRateRange.mMaximum;
      long long v10 = *(_OWORD *)&a1->mFormat.mBytesPerPacket;
      long long v9 = *(_OWORD *)&a1->mFormat.mBitsPerChannel;
      long long v11 = *(_OWORD *)&a1->mFormat.mSampleRate;
      long long v13 = *(_OWORD *)&v7->mFormat.mBytesPerPacket;
      long long v12 = *(_OWORD *)&v7->mFormat.mBitsPerChannel;
      long long v14 = *(_OWORD *)&v7->mFormat.mSampleRate;
      a1->mSampleRateRange.Float64 mMaximum = v7->mSampleRateRange.mMaximum;
      *(_OWORD *)&a1->mFormat.mBytesPerPacket = v13;
      *(_OWORD *)&a1->mFormat.mBitsPerChannel = v12;
      *(_OWORD *)&a1->mFormat.mSampleRate = v14;
      *(_OWORD *)&v7->mFormat.mSampleRate = v11;
      *(_OWORD *)&v7->mFormat.mBytesPerPacket = v10;
      *(_OWORD *)&v7->mFormat.mBitsPerChannel = v9;
      BOOL result = 1;
      v7->mSampleRateRange.Float64 mMaximum = mMaximum;
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(a1, &a1[1].mFormat.mSampleRate, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(a1, a1 + 1, a1 + 2, &a2[-1].mFormat.mSampleRate);
      return 1;
    case 5:
      Float64 v26 = a1 + 1;
      long long v27 = a1 + 2;
      long long v28 = a1 + 3;
      long long v29 = a2 - 1;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(a1, a1 + 1, a1 + 2, &a1[3].mFormat.mSampleRate);
      if (!CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)v29, a1 + 3, v30)) {
        return 1;
      }
      Float64 v32 = a1[3].mSampleRateRange.mMaximum;
      long long v34 = *(_OWORD *)&a1[3].mFormat.mBytesPerPacket;
      long long v33 = *(_OWORD *)&a1[3].mFormat.mBitsPerChannel;
      long long v35 = *(_OWORD *)&v28->mFormat.mSampleRate;
      long long v37 = *(_OWORD *)&v29->mFormat.mBytesPerPacket;
      long long v36 = *(_OWORD *)&v29->mFormat.mBitsPerChannel;
      long long v38 = *(_OWORD *)&v29->mFormat.mSampleRate;
      a1[3].mSampleRateRange.Float64 mMaximum = v29->mSampleRateRange.mMaximum;
      *(_OWORD *)&a1[3].mFormat.mBytesPerPacket = v37;
      *(_OWORD *)&a1[3].mFormat.mBitsPerChannel = v36;
      *(_OWORD *)&v28->mFormat.mSampleRate = v38;
      *(_OWORD *)&v29->mFormat.mSampleRate = v35;
      *(_OWORD *)&v29->mFormat.mBytesPerPacket = v34;
      *(_OWORD *)&v29->mFormat.mBitsPerChannel = v33;
      v29->mSampleRateRange.Float64 mMaximum = v32;
      if (!CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&a1[3], a1 + 2, v31)) {
        return 1;
      }
      Float64 v40 = a1[2].mSampleRateRange.mMaximum;
      long long v42 = *(_OWORD *)&a1[2].mFormat.mBytesPerPacket;
      long long v41 = *(_OWORD *)&a1[2].mFormat.mBitsPerChannel;
      long long v43 = *(_OWORD *)&v27->mFormat.mSampleRate;
      long long v44 = *(_OWORD *)&a1[3].mFormat.mBytesPerPacket;
      *(_OWORD *)&v27->mFormat.mSampleRate = *(_OWORD *)&v28->mFormat.mSampleRate;
      *(_OWORD *)&a1[2].mFormat.mBytesPerPacket = v44;
      *(_OWORD *)&a1[2].mFormat.mBitsPerChannel = *(_OWORD *)&a1[3].mFormat.mBitsPerChannel;
      a1[2].mSampleRateRange.Float64 mMaximum = a1[3].mSampleRateRange.mMaximum;
      *(_OWORD *)&v28->mFormat.mSampleRate = v43;
      *(_OWORD *)&a1[3].mFormat.mBytesPerPacket = v42;
      *(_OWORD *)&a1[3].mFormat.mBitsPerChannel = v41;
      a1[3].mSampleRateRange.Float64 mMaximum = v40;
      if (!CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&a1[2], a1 + 1, v39)) {
        return 1;
      }
      Float64 v46 = a1[1].mSampleRateRange.mMaximum;
      long long v48 = *(_OWORD *)&a1[1].mFormat.mBytesPerPacket;
      long long v47 = *(_OWORD *)&a1[1].mFormat.mBitsPerChannel;
      long long v49 = *(_OWORD *)&v26->mFormat.mSampleRate;
      long long v50 = *(_OWORD *)&a1[2].mFormat.mBytesPerPacket;
      *(_OWORD *)&v26->mFormat.mSampleRate = *(_OWORD *)&v27->mFormat.mSampleRate;
      *(_OWORD *)&a1[1].mFormat.mBytesPerPacket = v50;
      *(_OWORD *)&a1[1].mFormat.mBitsPerChannel = *(_OWORD *)&a1[2].mFormat.mBitsPerChannel;
      a1[1].mSampleRateRange.Float64 mMaximum = a1[2].mSampleRateRange.mMaximum;
      *(_OWORD *)&v27->mFormat.mSampleRate = v49;
      *(_OWORD *)&a1[2].mFormat.mBytesPerPacket = v48;
      *(_OWORD *)&a1[2].mFormat.mBitsPerChannel = v47;
      a1[2].mSampleRateRange.Float64 mMaximum = v46;
      if (!CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&a1[1], a1, v45)) {
        return 1;
      }
      Float64 v51 = a1->mSampleRateRange.mMaximum;
      long long v53 = *(_OWORD *)&a1->mFormat.mBytesPerPacket;
      long long v52 = *(_OWORD *)&a1->mFormat.mBitsPerChannel;
      long long v54 = *(_OWORD *)&a1->mFormat.mSampleRate;
      long long v55 = *(_OWORD *)&a1[1].mFormat.mBytesPerPacket;
      *(_OWORD *)&a1->mFormat.mSampleRate = *(_OWORD *)&v26->mFormat.mSampleRate;
      *(_OWORD *)&a1->mFormat.mBytesPerPacket = v55;
      *(_OWORD *)&a1->mFormat.mBitsPerChannel = *(_OWORD *)&a1[1].mFormat.mBitsPerChannel;
      a1->mSampleRateRange.Float64 mMaximum = a1[1].mSampleRateRange.mMaximum;
      *(_OWORD *)&v26->mFormat.mSampleRate = v54;
      *(_OWORD *)&a1[1].mFormat.mBytesPerPacket = v53;
      *(_OWORD *)&a1[1].mFormat.mBitsPerChannel = v52;
      BOOL result = 1;
      a1[1].mSampleRateRange.Float64 mMaximum = v51;
      return result;
    default:
      long long v15 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AMCP::HAL::translate_mcp_value_to_hal_by_type(AMCP::Thing const&,AMCP::Property_Type_Code,AMCP::HAL::HAL_Property_Type_Code)::$_0 &,AudioStreamRangedDescription *>(a1, &a1[1].mFormat.mSampleRate, a1 + 2);
      long long v17 = a1 + 3;
      if (&a1[3] == a2) {
        return 1;
      }
      uint64_t v18 = 0;
      int v19 = 0;
      break;
  }
  while (1)
  {
    if (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)v17, v15, v16))
    {
      long long v20 = *(_OWORD *)&v17->mFormat.mBytesPerPacket;
      long long v56 = *(_OWORD *)&v17->mFormat.mSampleRate;
      long long v57 = v20;
      long long v58 = *(_OWORD *)&v17->mFormat.mBitsPerChannel;
      Float64 v59 = v17->mSampleRateRange.mMaximum;
      uint64_t v21 = v18;
      while (1)
      {
        long long v22 = (char *)a1 + v21;
        long long v23 = *(_OWORD *)((char *)&a1[2].mFormat.mBytesPerPacket + v21);
        *(_OWORD *)(v22 + 168) = *(_OWORD *)((char *)&a1[2].mFormat.mSampleRate + v21);
        *(_OWORD *)(v22 + 184) = v23;
        *(_OWORD *)(v22 + 200) = *(_OWORD *)((char *)&a1[2].mFormat.mBitsPerChannel + v21);
        *((void *)v22 + 27) = *(void *)((char *)&a1[2].mSampleRateRange.mMaximum + v21);
        if (v21 == -112) {
          break;
        }
        v21 -= 56;
        if ((CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)&v56, (const AudioStreamRangedDescription *)v22 + 1, v16) & 1) == 0)
        {
          long long v24 = (AudioStreamRangedDescription *)((char *)a1 + v21 + 168);
          goto LABEL_13;
        }
      }
      long long v24 = a1;
LABEL_13:
      long long v25 = v57;
      *(_OWORD *)&v24->mFormat.mSampleRate = v56;
      *(_OWORD *)&v24->mFormat.mBytesPerPacket = v25;
      *(_OWORD *)&v24->mFormat.mBitsPerChannel = v58;
      v24->mSampleRateRange.Float64 mMaximum = v59;
      if (++v19 == 8) {
        return &v17[1] == a2;
      }
    }
    long long v15 = v17;
    v18 += 56;
    if (++v17 == a2) {
      return 1;
    }
  }
}

void *std::vector<unsigned short>::vector(void *a1, uint64_t a2, _WORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned short>::__vallocate[abi:ne180100](a1, a2);
    char v6 = (_WORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 2 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 2;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1BABAC114(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::HAL::translate_hal_value_to_mcp_by_type(const __CFData **a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  switch(a3)
  {
    case 1:
      if (a2 > 0x12) {
        goto LABEL_52;
      }
      if (((1 << a2) & 0x79FFF) != 0) {
        goto LABEL_92;
      }
      if (a2 == 13)
      {
        long long v22 = (const UInt8 **)applesauce::CF::DataRef::operator->(a1);
        raw_data = applesauce::CF::DataRef_proxy::get_raw_data(*v22);
        long long v24 = (const __CFData **)applesauce::CF::DataRef::operator->(a1);
        CFDataRef byte_length = applesauce::CF::DataRef_proxy::get_byte_length(*v24);
        long long v20 = 0;
        cf[0] = 0;
        cf[1] = 0;
        unint64_t v96 = 0;
        if ((unint64_t)byte_length >= 0x28)
        {
          Float64 v26 = 0;
          long long v20 = 0;
          unint64_t v27 = 0;
          long long v28 = &raw_data[40 * ((unint64_t)byte_length / 0x28)];
          do
          {
            *(_OWORD *)URLString = *(_OWORD *)raw_data;
            long long v92 = *((_OWORD *)raw_data + 1);
            *(void *)&long long v93 = *((void *)raw_data + 4);
            if ((unint64_t)v26 >= v27)
            {
              unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v26 - (char *)v20) >> 3) + 1;
              if (v31 > 0x666666666666666) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              if (0x999999999999999ALL * ((uint64_t)(v27 - (void)v20) >> 3) > v31) {
                unint64_t v31 = 0x999999999999999ALL * ((uint64_t)(v27 - (void)v20) >> 3);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v27 - (void)v20) >> 3) >= 0x333333333333333) {
                unint64_t v32 = 0x666666666666666;
              }
              else {
                unint64_t v32 = v31;
              }
              if (v32) {
                unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v32);
              }
              else {
                uint64_t v33 = 0;
              }
              unint64_t v34 = v32 + 8 * (((char *)v26 - (char *)v20) >> 3);
              *(_OWORD *)unint64_t v34 = *(_OWORD *)URLString;
              *(_OWORD *)(v34 + 16) = v92;
              *(void *)(v34 + 32) = v93;
              if (v26 == v20)
              {
                long long v38 = (__CFString *)(v32 + 8 * (((char *)v26 - (char *)v20) >> 3));
              }
              else
              {
                unint64_t v35 = v32 + 8 * (((char *)v26 - (char *)v20) >> 3);
                do
                {
                  long long v36 = *(_OWORD *)&v26[-2].length;
                  long long v37 = *(_OWORD *)&v26[-1].info;
                  long long v38 = (__CFString *)(v35 - 40);
                  *(void *)(v35 - 8) = v26[-1].length;
                  *(_OWORD *)(v35 - 24) = v37;
                  *(_OWORD *)(v35 - 40) = v36;
                  Float64 v26 = (__CFString *)((char *)v26 - 40);
                  v35 -= 40;
                }
                while (v26 != v20);
              }
              unint64_t v27 = v32 + 40 * v33;
              Float64 v26 = (__CFString *)(v34 + 40);
              if (v20) {
                operator delete(v20);
              }
              long long v20 = v38;
            }
            else
            {
              long long v29 = *(_OWORD *)raw_data;
              long long v30 = *((_OWORD *)raw_data + 1);
              v26[1].isa = (void *)*((void *)raw_data + 4);
              *(_OWORD *)&v26->isa = v29;
              *(_OWORD *)&v26->data = v30;
              Float64 v26 = (__CFString *)((char *)v26 + 40);
            }
            raw_data += 40;
          }
          while (raw_data < v28);
          cf[1] = v26;
          unint64_t v96 = v27;
          cf[0] = v20;
        }
        AMCP::make_available_format_list((uint64_t *)cf, (uint64_t *)URLString);
      }
      else
      {
        long long v71 = (const UInt8 **)applesauce::CF::DataRef::operator->(a1);
        long long v72 = applesauce::CF::DataRef_proxy::get_raw_data(*v71);
        long long v73 = (const __CFData **)applesauce::CF::DataRef::operator->(a1);
        CFDataRef v74 = applesauce::CF::DataRef_proxy::get_byte_length(*v73);
        long long v20 = 0;
        cf[0] = 0;
        cf[1] = 0;
        unint64_t v96 = 0;
        if ((unint64_t)v74 >= 0x38)
        {
          long long v75 = 0;
          long long v20 = 0;
          unint64_t v76 = 0;
          long long v77 = &v72[56 * ((unint64_t)v74 / 0x38)];
          do
          {
            *(_OWORD *)URLString = *(_OWORD *)v72;
            long long v92 = *((_OWORD *)v72 + 1);
            long long v93 = *((_OWORD *)v72 + 2);
            uint64_t v94 = *((void *)v72 + 6);
            if ((unint64_t)v75 >= v76)
            {
              unint64_t v81 = 0x6DB6DB6DB6DB6DB7 * (((char *)v75 - (char *)v20) >> 3) + 1;
              if (v81 > 0x492492492492492) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v76 - (void)v20) >> 3) > v81) {
                unint64_t v81 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v76 - (void)v20) >> 3);
              }
              if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v76 - (void)v20) >> 3)) >= 0x249249249249249) {
                unint64_t v82 = 0x492492492492492;
              }
              else {
                unint64_t v82 = v81;
              }
              if (v82) {
                unint64_t v82 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v82);
              }
              else {
                uint64_t v83 = 0;
              }
              unint64_t v84 = v82 + 8 * (((char *)v75 - (char *)v20) >> 3);
              *(_OWORD *)unint64_t v84 = *(_OWORD *)URLString;
              *(_OWORD *)(v84 + 16) = v92;
              *(_OWORD *)(v84 + 32) = v93;
              *(void *)(v84 + 48) = v94;
              if (v75 == v20)
              {
                long long v86 = (__CFString *)(v82 + 8 * (((char *)v75 - (char *)v20) >> 3));
              }
              else
              {
                unint64_t v85 = v82 + 8 * (((char *)v75 - (char *)v20) >> 3);
                do
                {
                  long long v86 = (__CFString *)(v85 - 56);
                  long long v87 = *(_OWORD *)&v75[-2].info;
                  long long v88 = *(_OWORD *)&v75[-2].length;
                  long long v89 = *(_OWORD *)&v75[-1].info;
                  *(void *)(v85 - 8) = v75[-1].length;
                  *(_OWORD *)(v85 - 24) = v89;
                  *(_OWORD *)(v85 - 40) = v88;
                  *(_OWORD *)(v85 - 56) = v87;
                  long long v75 = (__CFString *)((char *)v75 - 56);
                  v85 -= 56;
                }
                while (v75 != v20);
              }
              unint64_t v76 = v82 + 56 * v83;
              long long v75 = (__CFString *)(v84 + 56);
              if (v20) {
                operator delete(v20);
              }
              long long v20 = v86;
            }
            else
            {
              long long v78 = *(_OWORD *)v72;
              long long v79 = *((_OWORD *)v72 + 1);
              long long v80 = *((_OWORD *)v72 + 2);
              v75[1].data = (char *)*((void *)v72 + 6);
              *(_OWORD *)&v75->data = v79;
              *(_OWORD *)&v75[1].isa = v80;
              *(_OWORD *)&v75->isa = v78;
              long long v75 = (__CFString *)((char *)v75 + 56);
            }
            v72 += 56;
          }
          while (v72 < v77);
          cf[1] = v75;
          unint64_t v96 = v76;
          cf[0] = v20;
        }
        AMCP::make_available_format_list((uint64_t *)cf, (uint64_t *)URLString);
      }
      *(_OWORD *)a4 = *(_OWORD *)URLString;
      a4[2] = v92;
      a4[3] = 0;
      URLString[0] = 0;
      URLString[1] = 0;
      *(void *)&long long v92 = 0;
      a4[4] = AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>::dispatch;
      long long v97 = URLString;
      std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
      if (!v20) {
        return;
      }
      cf[1] = v20;
      goto LABEL_98;
    case 2:
LABEL_52:
      CFDataRef v39 = *a1;
      if (!*a1) {
        goto LABEL_126;
      }
      if ((unint64_t)CFDataGetLength(v39) <= 3) {
        goto LABEL_92;
      }
      Float64 v40 = (const UInt8 **)applesauce::CF::DataRef::operator->(a1);
      BOOL v41 = *(_DWORD *)applesauce::CF::DataRef_proxy::get_raw_data(*v40) != 0;
      *(_OWORD *)a4 = 0u;
      *((_OWORD *)a4 + 1) = 0u;
      *(unsigned char *)a4 = v41;
      long long v12 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      goto LABEL_94;
    case 3:
      CFStringRef v13 = (const __CFString *)CFPropertyListCreateWithData(0, *a1, 0, 0, 0);
      URLString[0] = v13;
      AMCP::make_thing_from_description((AMCP *)a4, (CFTypeRef *)URLString);
      if (v13) {
        CFRelease(v13);
      }
      return;
    case 4:
      CFDataRef v45 = *a1;
      if (!*a1) {
        goto LABEL_126;
      }
      BytePtr = CFDataGetBytePtr(v45);
      if (!*a1) {
        goto LABEL_126;
      }
      unint64_t Length = CFDataGetLength(*a1);
      CFStringRef v48 = CFStringCreateWithCharacters(0, (const UniChar *)BytePtr, Length >> 1);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)URLString, v48);
      a4[2] = 0;
      a4[3] = 0;
      *a4 = URLString[0];
      a4[1] = 0;
      long long v12 = AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::dispatch;
      goto LABEL_94;
    case 5:
      CFDataRef v49 = *a1;
      if (!*a1) {
        goto LABEL_126;
      }
      long long v50 = CFDataGetBytePtr(v49);
      if (!*a1) {
        goto LABEL_126;
      }
      unint64_t v51 = CFDataGetLength(*a1);
      CFStringRef v52 = CFStringCreateWithCharacters(0, (const UniChar *)v50, v51 >> 1);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)URLString, v52);
      CFURLRef v53 = CFURLCreateWithString(0, URLString[0], 0);
      applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)cf, v53);
      a4[4] = 0;
      *(_OWORD *)a4 = 0u;
      *((_OWORD *)a4 + 1) = 0u;
      AMCP::Implementation::In_Place_Storage<applesauce::CF::URLRef>::construct<applesauce::CF::URLRef&>((uint64_t)a4, cf);
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      if (URLString[0]) {
        CFRelease(URLString[0]);
      }
      return;
    case 6:
    case 7:
    case 9:
    case 15:
    case 18:
    case 22:
    case 23:
    case 24:
      AMCP::HAL::translate_simple_hal_value_to_mcp<unsigned int>((uint64_t)a4, a1);
      return;
    case 8:
      CFDataRef v42 = *a1;
      if (!*a1) {
        goto LABEL_126;
      }
      if ((unint64_t)CFDataGetLength(v42) <= 3) {
        goto LABEL_92;
      }
      long long v43 = (const UInt8 **)applesauce::CF::DataRef::operator->(a1);
      BOOL v44 = *(_DWORD *)applesauce::CF::DataRef_proxy::get_raw_data(*v43) != 0;
      *(_OWORD *)a4 = 0u;
      *((_OWORD *)a4 + 1) = 0u;
      *(_DWORD *)a4 = v44;
      long long v12 = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
      goto LABEL_94;
    case 10:
      CFDataRef v10 = *a1;
      if (!*a1) {
        goto LABEL_126;
      }
      if ((unint64_t)CFDataGetLength(v10) <= 3) {
        goto LABEL_92;
      }
      if (!*a1) {
        goto LABEL_126;
      }
      long long v11 = CFDataGetBytePtr(*a1);
      *(_OWORD *)a4 = 0u;
      *((_OWORD *)a4 + 1) = 0u;
      *(_DWORD *)a4 = *(_DWORD *)v11;
      long long v12 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
      goto LABEL_94;
    case 11:
      CFDataRef v54 = *a1;
      if (!*a1) {
        goto LABEL_126;
      }
      if ((unint64_t)CFDataGetLength(v54) <= 0x27) {
        goto LABEL_92;
      }
      if (*a1)
      {
        CFDataGetBytePtr(*a1);
        *(_OWORD *)a4 = 0u;
        *((_OWORD *)a4 + 1) = 0u;
        a4[4] = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
        operator new();
      }
      goto LABEL_126;
    case 12:
      CFDataRef v55 = *a1;
      if (!*a1) {
        goto LABEL_126;
      }
      if ((unint64_t)CFDataGetLength(v55) <= 3) {
        goto LABEL_92;
      }
      if (!*a1) {
        goto LABEL_126;
      }
      long long v56 = CFDataGetBytePtr(*a1);
      *(_OWORD *)a4 = 0u;
      *((_OWORD *)a4 + 1) = 0u;
      *(_DWORD *)a4 = *(_DWORD *)v56;
      long long v12 = AMCP::Implementation::In_Place_Storage<int>::dispatch;
      goto LABEL_94;
    case 13:
      CFDataRef v21 = *a1;
      if (*a1) {
        goto LABEL_80;
      }
      goto LABEL_126;
    case 14:
    case 20:
      AMCP::HAL::translate_vector_hal_value_to_mcp<unsigned int>((uint64_t)a4, a1);
      return;
    case 16:
      if (a2 != 1) {
        goto LABEL_92;
      }
      long long v57 = (const UInt8 **)applesauce::CF::DataRef::operator->(a1);
      long long v58 = applesauce::CF::DataRef_proxy::get_raw_data(*v57);
      Float64 v59 = (const __CFData **)applesauce::CF::DataRef::operator->(a1);
      CFDataRef v60 = applesauce::CF::DataRef_proxy::get_byte_length(*v59);
      std::vector<std::byte>::vector(URLString, (size_t)v60);
      memcpy((void *)URLString[0], v58, (char *)URLString[1] - (char *)URLString[0]);
      *(_OWORD *)a4 = 0u;
      *((_OWORD *)a4 + 1) = 0u;
      a4[4] = 0;
      std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(a4, URLString[0], (uint64_t)URLString[1], (char *)URLString[1] - (char *)URLString[0]);
      long long v9 = AMCP::Implementation::In_Place_Storage<AMCP::Bag_O_Bytes>::dispatch;
      goto LABEL_77;
    case 17:
      CFDataRef v64 = *a1;
      if (!*a1) {
        goto LABEL_126;
      }
      if ((unint64_t)CFDataGetLength(v64) <= 7) {
        goto LABEL_92;
      }
      if (!*a1) {
        goto LABEL_126;
      }
      unint64_t v65 = CFDataGetBytePtr(*a1);
      a4[1] = 0;
      a4[2] = 0;
      a4[3] = 0;
      *a4 = *(void *)v65;
      long long v12 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
      goto LABEL_94;
    case 21:
      CFDataRef v21 = *a1;
      if (!*a1) {
        goto LABEL_126;
      }
LABEL_80:
      if ((unint64_t)CFDataGetLength(v21) <= 7) {
        goto LABEL_92;
      }
      long long v62 = (const UInt8 **)applesauce::CF::DataRef::operator->(a1);
      uint64_t v63 = *(void *)applesauce::CF::DataRef_proxy::get_raw_data(*v62);
      a4[2] = 0;
      a4[3] = 0;
      *a4 = v63;
      a4[1] = 0;
      long long v12 = AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int>>::dispatch;
      goto LABEL_94;
    case 25:
      CFDataRef v14 = *a1;
      if (!*a1) {
        goto LABEL_126;
      }
      long long v15 = CFDataGetBytePtr(v14);
      CFDataRef v16 = *a1;
      if (!*a1) {
        goto LABEL_126;
      }
      URLString[0] = 0;
      URLString[1] = 0;
      *(void *)&long long v92 = 0;
      unint64_t v17 = ((unint64_t)CFDataGetLength(v16) >> 3) & 0x1FFFFFFFFFFFFFFELL;
      if (v17)
      {
        uint64_t v18 = &v15[8 * v17];
        do
        {
          *(_OWORD *)CFTypeRef cf = *(_OWORD *)v15;
          CA::ValueRangeList::AddRange((double **)URLString, (double *)cf);
          v15 += 16;
        }
        while (v15 < v18);
        long long v20 = (__CFString *)URLString[0];
        CFStringRef v19 = URLString[1];
      }
      else
      {
        CFStringRef v19 = 0;
        long long v20 = 0;
      }
      a4[4] = 0;
      *(_OWORD *)a4 = 0u;
      *((_OWORD *)a4 + 1) = 0u;
      std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(a4, v20, (uint64_t)v19, ((char *)v19 - (char *)v20) >> 4);
      a4[4] = AMCP::Implementation::In_Place_Storage<CA::ValueRangeList>::dispatch;
      if (!v20) {
        return;
      }
LABEL_98:
      long long v61 = v20;
      goto LABEL_99;
    case 26:
      CFDataRef v68 = *a1;
      if (!*a1) {
        goto LABEL_126;
      }
      if ((unint64_t)CFDataGetLength(v68) <= 0xF) {
        goto LABEL_92;
      }
      long long v69 = (const UInt8 **)applesauce::CF::DataRef::operator->(a1);
      long long v70 = *(_OWORD *)applesauce::CF::DataRef_proxy::get_raw_data(*v69);
      a4[2] = 0;
      a4[3] = 0;
      *(_OWORD *)a4 = v70;
      long long v12 = AMCP::Implementation::In_Place_Storage<CA::ValueRange>::dispatch;
      goto LABEL_94;
    case 27:
      CFDataRef v6 = *a1;
      if (!*a1) {
        goto LABEL_126;
      }
      if ((unint64_t)CFDataGetLength(v6) <= 0xB) {
        goto LABEL_92;
      }
      uint64_t v7 = (const UInt8 **)applesauce::CF::DataRef::operator->(a1);
      uint64_t v8 = applesauce::CF::DataRef_proxy::get_raw_data(*v7);
      CA::ChannelLayout::ChannelLayout((std::vector<char> *)URLString, (const AudioChannelLayout *)v8);
      a4[4] = 0;
      *(_OWORD *)a4 = 0u;
      *((_OWORD *)a4 + 1) = 0u;
      std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a4, URLString[0], (uint64_t)URLString[1], (char *)URLString[1] - (char *)URLString[0]);
      long long v9 = AMCP::Implementation::In_Place_Storage<CA::ChannelLayout>::dispatch;
LABEL_77:
      a4[4] = v9;
      long long v61 = (__CFString *)URLString[0];
      if (!URLString[0]) {
        return;
      }
      URLString[1] = URLString[0];
LABEL_99:
      operator delete(v61);
      break;
    case 28:
      CFDataRef v66 = *a1;
      if (!*a1) {
        goto LABEL_126;
      }
      if ((unint64_t)CFDataGetLength(v66) <= 3)
      {
LABEL_92:
        a4[4] = 0;
        *(_OWORD *)a4 = 0u;
        *((_OWORD *)a4 + 1) = 0u;
      }
      else
      {
        if (!*a1)
        {
LABEL_126:
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          applesauce::CF::construct_error(exception);
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        long long v67 = CFDataGetBytePtr(*a1);
        *(_OWORD *)a4 = 0u;
        *((_OWORD *)a4 + 1) = 0u;
        *(_DWORD *)a4 = *(_DWORD *)v67;
        long long v12 = AMCP::Implementation::In_Place_Storage<AMCP::Power_State>::dispatch;
LABEL_94:
        a4[4] = v12;
      }
      break;
    default:
      goto LABEL_92;
  }
}

void sub_1BABACD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void *applesauce::CF::DataRef::operator->(void *result)
{
  if (!*result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1BABACF08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const UInt8 *applesauce::CF::DataRef_proxy::get_raw_data(const UInt8 *this)
{
  if (this) {
    return CFDataGetBytePtr((CFDataRef)this);
  }
  return this;
}

const __CFData *applesauce::CF::DataRef_proxy::get_byte_length(const __CFData *this)
{
  if (this) {
    return (const __CFData *)CFDataGetLength(this);
  }
  return this;
}

void AMCP::make_thing_from_description(AMCP *this, CFTypeRef *a2)
{
  if (*a2) {
    CFTypeID v4 = CFGetTypeID(*a2);
  }
  else {
    CFTypeID v4 = 0;
  }
  if (v4 == CFBooleanGetTypeID())
  {
    CFTypeRef v5 = *a2;
    if (v5)
    {
      CFRetain(v5);
      applesauce::CF::BooleanRef::BooleanRef((applesauce::CF::BooleanRef *)&v29, v5);
      CFDataRef v6 = v29;
    }
    else
    {
      CFDataRef v6 = 0;
    }
    *((void *)this + 2) = 0;
    *((void *)this + 3) = 0;
    *(void *)this = v6;
    *((void *)this + 1) = 0;
    uint64_t v8 = AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch;
LABEL_43:
    *((void *)this + 4) = v8;
    return;
  }
  if (*a2) {
    CFTypeID v7 = CFGetTypeID(*a2);
  }
  else {
    CFTypeID v7 = 0;
  }
  if (v7 == CFDataGetTypeID())
  {
    CFTypeRef v9 = *a2;
    if (v9)
    {
      CFRetain(v9);
      applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v29, v9);
      CFDataRef v10 = v29;
    }
    else
    {
      CFDataRef v10 = 0;
    }
    *((void *)this + 2) = 0;
    *((void *)this + 3) = 0;
    *(void *)this = v10;
    *((void *)this + 1) = 0;
    uint64_t v8 = AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::dispatch;
    goto LABEL_43;
  }
  if (*a2) {
    CFTypeID v11 = CFGetTypeID(*a2);
  }
  else {
    CFTypeID v11 = 0;
  }
  if (v11 == CFNumberGetTypeID())
  {
    CFTypeRef v12 = *a2;
    if (v12)
    {
      CFRetain(v12);
      applesauce::CF::NumberRef::NumberRef((applesauce::CF::NumberRef *)&v29, v12);
      CFStringRef v13 = v29;
    }
    else
    {
      CFStringRef v13 = 0;
    }
    *((void *)this + 2) = 0;
    *((void *)this + 3) = 0;
    *(void *)this = v13;
    *((void *)this + 1) = 0;
    uint64_t v8 = AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::dispatch;
    goto LABEL_43;
  }
  if (*a2) {
    CFTypeID v14 = CFGetTypeID(*a2);
  }
  else {
    CFTypeID v14 = 0;
  }
  if (v14 == CFStringGetTypeID())
  {
    CFTypeRef v15 = *a2;
    if (v15)
    {
      CFRetain(v15);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v29, v15);
      CFDataRef v16 = v29;
    }
    else
    {
      CFDataRef v16 = 0;
    }
    *((void *)this + 2) = 0;
    *((void *)this + 3) = 0;
    *(void *)this = v16;
    *((void *)this + 1) = 0;
    uint64_t v8 = AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::dispatch;
    goto LABEL_43;
  }
  if (*a2) {
    CFTypeID v17 = CFGetTypeID(*a2);
  }
  else {
    CFTypeID v17 = 0;
  }
  if (v17 == CFURLGetTypeID())
  {
    CFTypeRef v18 = *a2;
    if (v18)
    {
      CFRetain(v18);
      applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v29, v18);
      CFStringRef v19 = v29;
    }
    else
    {
      CFStringRef v19 = 0;
    }
    *((void *)this + 2) = 0;
    *((void *)this + 3) = 0;
    *(void *)this = v19;
    *((void *)this + 1) = 0;
    uint64_t v8 = AMCP::Implementation::In_Place_Storage<applesauce::CF::URLRef>::dispatch;
    goto LABEL_43;
  }
  if (*a2) {
    CFTypeID v20 = CFGetTypeID(*a2);
  }
  else {
    CFTypeID v20 = 0;
  }
  if (v20 == CFArrayGetTypeID())
  {
    applesauce::CF::ArrayRef::from_get((applesauce::CF::ArrayRef *)&v29, *a2);
    *((void *)this + 2) = 0;
    *((void *)this + 3) = 0;
    *(void *)this = v29;
    *((void *)this + 1) = 0;
    long long v29 = 0;
    *((void *)this + 4) = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
    applesauce::CF::ArrayRef::~ArrayRef(&v29);
  }
  else
  {
    typeid = applesauce::CF::TypeRef::get_typeid(*a2);
    if (typeid == (const void *)CFDictionaryGetTypeID())
    {
      applesauce::CF::DictionaryRef::from_get((applesauce::CF::DictionaryRef *)&v31, *a2);
      long long v22 = (CFDictionaryRef *)applesauce::CF::DictionaryRef::operator->(&v31);
      applesauce::CF::StringRef::StringRef((CFStringRef *)&v28, (const UInt8 *)"Really A CFURL", 14);
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DataRef,applesauce::CF::StringRef>(&v29, *v22, v28);
      applesauce::CF::StringRef::~StringRef(&v28);
      if (v30)
      {
        long long v23 = (const UInt8 **)applesauce::CF::DataRef::operator->(&v29);
        raw_data = applesauce::CF::DataRef_proxy::get_raw_data(*v23);
        long long v25 = (const __CFData **)applesauce::CF::DataRef::operator->(&v29);
        CFDataRef byte_length = applesauce::CF::DataRef_proxy::get_byte_length(*v25);
        CFURLRef v27 = CFURLCreateWithBytes(0, raw_data, (CFIndex)byte_length, 0x8000100u, 0);
        applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v28, v27);
        *((void *)this + 2) = 0;
        *((void *)this + 3) = 0;
        *(void *)this = v28;
        *((void *)this + 1) = 0;
        long long v28 = 0;
        *((void *)this + 4) = AMCP::Implementation::In_Place_Storage<applesauce::CF::URLRef>::dispatch;
        applesauce::CF::URLRef::~URLRef(&v28);
      }
      else
      {
        *((void *)this + 4) = 0;
        *(_OWORD *)this = 0u;
        *((_OWORD *)this + 1) = 0u;
        AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef&>((uint64_t)this, &v31);
      }
      std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v29);
      applesauce::CF::DictionaryRef::~DictionaryRef(&v31);
    }
    else
    {
      *((void *)this + 4) = 0;
      *(_OWORD *)this = 0u;
      *((_OWORD *)this + 1) = 0u;
    }
  }
}

void sub_1BABAD2F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::URLRef>::construct<applesauce::CF::URLRef&>(uint64_t a1, CFTypeRef *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *(void *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::URLRef>::dispatch;
  return a1;
}

double AMCP::HAL::translate_simple_hal_value_to_mcp<unsigned int>(uint64_t a1, CFDataRef *a2)
{
  if (!*a2) {
    goto LABEL_6;
  }
  if ((unint64_t)CFDataGetLength(*a2) <= 3)
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }
  if (!*a2)
  {
LABEL_6:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BytePtr = CFDataGetBytePtr(*a2);
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)a1 = *(_DWORD *)BytePtr;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
  return result;
}

void sub_1BABAD478(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AMCP::HAL::translate_vector_hal_value_to_mcp<unsigned int>(uint64_t a1, CFDataRef *a2)
{
  if (!*a2 || (BytePtr = CFDataGetBytePtr(*a2), !*a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFIndex Length = CFDataGetLength(*a2);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(&v8, BytePtr, (uint64_t)&BytePtr[Length & 0xFFFFFFFFFFFFFFFCLL], Length >> 2);
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CFDataRef v6 = v8;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)a1, v8, v9, (v9 - (uint64_t)v8) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BABAD5AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::vector<std::byte>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<char>::__vallocate[abi:ne180100](a1, a2);
    CFTypeID v4 = (char *)a1[1];
    uint64_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1BABAD638(_Unwind_Exception *exception_object)
{
  CFTypeRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<char> *CA::ChannelLayout::ChannelLayout(std::vector<char> *this, const AudioChannelLayout *a2)
{
  UInt32 mNumberChannelDescriptions = a2->mNumberChannelDescriptions;
  if (mNumberChannelDescriptions <= 1) {
    UInt32 mNumberChannelDescriptions = 1;
  }
  uint64_t v5 = std::vector<char>::vector(this, 20 * mNumberChannelDescriptions + 12);
  memcpy(v5->__begin_, a2, 20 * a2->mNumberChannelDescriptions + 12);
  return this;
}

uint64_t AMCP::Implementation::In_Place_Storage<AMCP::Power_State>::dispatch(uint64_t result, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      double result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_5;
    case 1:
      double result = 0;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<AMCP::Power_State>::dispatch;
      return result;
    case 2:
      double result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<AMCP::Power_State>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_5:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t v8 = AMCP::Implementation::get_type_marker<AMCP::Power_State>();
      double result = 0;
      *a4 = v8;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Power_State>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<AMCP::Power_State>();
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, void, _OWORD *))(a2 + 32);
      *(void *)&v14[0] = 0;
      if (v10)
      {
        v10(3, a2, 0, v14);
        uint64_t v10 = *(void (**)(uint64_t, uint64_t, void, _OWORD *))&v14[0];
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, _OWORD *))v9) {
        goto LABEL_20;
      }
      CFTypeID v11 = (void (*)(uint64_t, AMCP::Thing *, void, void))*((void *)a3 + 4);
      CFDataRef v16 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v16);
        CFTypeID v11 = v16;
      }
      if (v11 == (void (*)(uint64_t, AMCP::Thing *, void, void))v9)
      {
        if (*(void *)(a2 + 32))
        {
          *(void *)&v14[0] = AMCP::Implementation::get_type_marker<AMCP::Power_State>();
          CFTypeRef v12 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, void, _OWORD *))(a2 + 32))(4, a2, 0, v14);
        }
        else
        {
          CFTypeRef v12 = 0;
        }
        *(void *)&v14[0] = AMCP::Implementation::get_type_marker<AMCP::Power_State>();
        if (*v12 == *(_DWORD *)(*((uint64_t (**)(uint64_t, AMCP::Thing *, void, _OWORD *))a3 + 4))(4, a3, 0, v14))return 1; {
      }
        }
      else
      {
LABEL_20:
        int v13 = AMCP::Thing::convert_to<AMCP::Power_State>(a2);
        if (v13 == AMCP::Thing::convert_to<AMCP::Power_State>((uint64_t)a3)) {
          return 1;
        }
      }
      return 0;
    case 6:
      CFTypeRef v15 = 0;
      memset(v14, 0, sizeof(v14));
      AMCP::swap((AMCP::Thing *)v14, a3, a3);
      if (v15) {
        v15(0, v14, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<AMCP::Power_State>()
{
  unint64_t v0 = 0x1E9F78000uLL;
  {
    unint64_t v0 = 0x1E9F78000;
    if (v2)
    {
      unint64_t v0 = 0x1E9F78000;
    }
  }
  return *(void *)(v0 + 2912);
}

uint64_t AMCP::Thing::convert_to<AMCP::Power_State>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t v2 = AMCP::Implementation::get_type_marker<AMCP::Power_State>();
  CFTypeRef v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  CFStringRef v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    CFTypeRef v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))v2)
  {
    uint64_t v18 = v2;
    CFTypeID v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4) {
      return *v4;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<AMCP::Power_State>();
  memset(v16, 0, sizeof(v16));
  CFTypeID v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    uint64_t v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFTypeID v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = v2;
  CFDataRef v6 = (unsigned int *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    CFTypeRef v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5;
}

void sub_1BABADB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

const void **AMCP::Implementation::In_Place_Storage<applesauce::CF::URLRef>::dispatch(const void **result, const void **a2, AMCP::Thing *a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      long long v7 = *a2;
      if (*a2) {
        CFRetain(v7);
      }
      double result = 0;
      *(void *)a3 = v7;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<applesauce::CF::URLRef>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(void *)a3 = *a2;
      *a2 = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<applesauce::CF::URLRef>::dispatch;
LABEL_6:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::URLRef>::destruct((uint64_t)a2);
      return 0;
    case 3:
      uint64_t v8 = AMCP::Implementation::get_type_marker<applesauce::CF::URLRef>();
      double result = 0;
      *a4 = v8;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::URLRef>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<applesauce::CF::URLRef>();
      uint64_t v10 = (void (*)(uint64_t, const void **, void, CFTypeRef *))a2[4];
      cf1[0] = 0;
      if (v10)
      {
        v10(3, a2, 0, cf1);
        uint64_t v10 = (void (*)(uint64_t, const void **, void, CFTypeRef *))cf1[0];
      }
      if (v10 != (void (*)(uint64_t, const void **, void, CFTypeRef *))v9) {
        goto LABEL_21;
      }
      CFTypeID v11 = (void (*)(uint64_t, AMCP::Thing *, void, CFTypeRef *))*((void *)a3 + 4);
      CFTypeRef cf2 = 0;
      if (v11)
      {
        v11(3, a3, 0, &cf2);
        CFTypeID v11 = (void (*)(uint64_t, AMCP::Thing *, void, CFTypeRef *))cf2;
      }
      if (v11 != (void (*)(uint64_t, AMCP::Thing *, void, CFTypeRef *))v9)
      {
LABEL_21:
        AMCP::Thing::convert_to<applesauce::CF::URLRef>(cf1, (uint64_t)a2);
        AMCP::Thing::convert_to<applesauce::CF::URLRef>(&cf2, (uint64_t)a3);
        CFTypeRef v13 = cf1[0];
        CFTypeRef v14 = cf2;
        BOOL v15 = ((unint64_t)cf1[0] | (unint64_t)cf2) == 0;
        if (cf1[0] && cf2)
        {
          BOOL v15 = CFEqual(cf1[0], cf2) != 0;
        }
        else if (!cf2)
        {
          goto LABEL_26;
        }
        CFRelease(v14);
LABEL_26:
        if (v13) {
          CFRelease(v13);
        }
        return (const void **)v15;
      }
      if (a2[4])
      {
        cf1[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::URLRef>();
        CFTypeRef v12 = (const void **)((uint64_t (*)(uint64_t, const void **, void, CFTypeRef *))a2[4])(4, a2, 0, cf1);
      }
      else
      {
        CFTypeRef v12 = 0;
      }
      cf1[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::URLRef>();
      CFDataRef v16 = (const void **)(*((uint64_t (**)(uint64_t, AMCP::Thing *, void, CFTypeRef *))a3 + 4))(4, a3, 0, cf1);
      unint64_t v17 = (unint64_t)*v12;
      unint64_t v18 = (unint64_t)*v16;
      if (*v12 && v18) {
        return (const void **)(CFEqual((CFTypeRef)v17, (CFTypeRef)v18) != 0);
      }
      return (const void **)!(v17 | v18);
    case 6:
      CFDataRef v21 = 0;
      *(_OWORD *)cf1 = 0u;
      long long v20 = 0u;
      AMCP::swap((AMCP::Thing *)cf1, a3, a3);
      if (v21) {
        v21(0, cf1, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BABADDC4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

double AMCP::Implementation::In_Place_Storage<applesauce::CF::URLRef>::destruct(uint64_t a1)
{
  uint64_t v2 = *(const void **)a1;
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

applesauce::CF::ArrayRef *applesauce::CF::ArrayRef::from_get(applesauce::CF::ArrayRef *this, CFTypeRef cf)
{
  uint64_t v2 = this;
  if (cf)
  {
    CFRetain(cf);
    return applesauce::CF::ArrayRef::ArrayRef(v2, cf);
  }
  else
  {
    *(void *)this = 0;
  }
  return this;
}

const void *applesauce::CF::TypeRef::get_typeid(const void *this)
{
  if (this) {
    return (const void *)CFGetTypeID(this);
  }
  return this;
}

applesauce::CF::DictionaryRef *applesauce::CF::DictionaryRef::from_get(applesauce::CF::DictionaryRef *this, CFTypeRef cf)
{
  uint64_t v2 = this;
  if (cf)
  {
    CFRetain(cf);
    return applesauce::CF::DictionaryRef::DictionaryRef(v2, cf);
  }
  else
  {
    *(void *)this = 0;
  }
  return this;
}

void *applesauce::CF::DictionaryRef::operator->(void *result)
{
  if (!*result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1BABADF6C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFStringRef *applesauce::CF::StringRef::StringRef(CFStringRef *a1, const UInt8 *a2, CFIndex a3)
{
  if (a2)
  {
    CFStringRef v4 = CFStringCreateWithBytes(0, a2, a3, 0x8000100u, 0);
    *a1 = v4;
    if (!v4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void sub_1BABAE00C(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DataRef,applesauce::CF::StringRef>(unsigned char *a1, CFDictionaryRef theDict, const void *a3)
{
  CFStringRef v4 = applesauce::CF::details::at_key<applesauce::CF::StringRef>(theDict, a3);
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFDataGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    char v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(void *)a1 = v5;
  char v7 = 1;
LABEL_6:
  a1[8] = v7;
}

uint64_t AMCP::HAL::type_code_from_custom_property_type(AMCP::HAL *this)
{
  if (this == 1667658612) {
    int v1 = 6;
  }
  else {
    int v1 = 0;
  }
  if (this == 1886155636) {
    unsigned int v2 = 15;
  }
  else {
    unsigned int v2 = v1;
  }
  if (this == 1918990199) {
    return 1;
  }
  else {
    return v2;
  }
}

uint64_t AMCP::Graph::Graph_Wire::Connection::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  int v4 = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = v4;
  std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a2 + 40));
  int v5 = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = v5;
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
  if (a1 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 104), *(char **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
  }
  long long v6 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 128) = v6;
  uint64_t v8 = *(void *)(a2 + 160);
  uint64_t v7 = *(void *)(a2 + 168);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 168);
  *(void *)(a1 + 160) = v8;
  *(void *)(a1 + 168) = v7;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  if (a1 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 192), *(char **)(a2 + 192), *(void *)(a2 + 200), (uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 2);
  }
  return a1;
}

std::string *AMCP::Graph::Graph_Wire::Connection::Connection(std::string *this, const AMCP::Graph::Graph_Wire::Connection *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v5 = *((void *)a2 + 3);
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 8);
  this[1].__r_.__value_.__r.__words[0] = v5;
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 40);
    this[2].__r_.__value_.__l.__size_ = *((void *)a2 + 7);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v6;
  }
  std::string::size_type v7 = *((void *)a2 + 8);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  this[2].__r_.__value_.__r.__words[2] = v7;
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 80), *((const std::string::value_type **)a2 + 10), *((void *)a2 + 11));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 5);
    this[4].__r_.__value_.__r.__words[0] = *((void *)a2 + 12);
    *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = v8;
  }
  this[4].__r_.__value_.__l.__size_ = 0;
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[4].__r_.__value_.__l.__size_, *((const void **)a2 + 13), *((void *)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 2);
  long long v9 = *((_OWORD *)a2 + 8);
  *(_OWORD *)((char *)&this[5].__r_.__value_.__r.__words[2] + 4) = *(_OWORD *)((char *)a2 + 140);
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = v9;
  std::string::size_type v10 = *((void *)a2 + 21);
  this[6].__r_.__value_.__r.__words[2] = *((void *)a2 + 20);
  this[7].__r_.__value_.__r.__words[0] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  long long v11 = *((_OWORD *)a2 + 11);
  this[8].__r_.__value_.__r.__words[0] = 0;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = v11;
  this[8].__r_.__value_.__l.__size_ = 0;
  this[8].__r_.__value_.__r.__words[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(this[8].__r_.__value_.__r.__words, *((const void **)a2 + 24), *((void *)a2 + 25), (uint64_t)(*((void *)a2 + 25) - *((void *)a2 + 24)) >> 2);
  return this;
}

void sub_1BABAE324(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  std::string::size_type v7 = result;
  uint64_t v8 = *((void *)result + 2);
  long long v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *std::string::size_type v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    double result = std::vector<unsigned int>::__vallocate[abi:ne180100](v7, v11);
    CFTypeRef v13 = (char *)v7[1];
    CFTypeRef v12 = (void **)(v7 + 1);
    long long v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      CFStringRef v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  CFTypeRef v12 = (void **)(result + 8);
  CFTypeRef v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  CFDataRef v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v14 - v9);
    long long v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    CFStringRef v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *CFTypeRef v12 = &v9[v17];
  return result;
}

uint64_t std::__optional_destruct_base<AMCP::Graph::Graph_Wire::Connection,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 216))
  {
    unsigned int v2 = *(void **)(a1 + 192);
    if (v2)
    {
      *(void *)(a1 + 200) = v2;
      operator delete(v2);
    }
    CFTypeRef v3 = *(std::__shared_weak_count **)(a1 + 168);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    long long v4 = *(void **)(a1 + 104);
    if (v4)
    {
      *(void *)(a1 + 112) = v4;
      operator delete(v4);
    }
    if (*(char *)(a1 + 103) < 0) {
      operator delete(*(void **)(a1 + 80));
    }
    if (*(char *)(a1 + 63) < 0) {
      operator delete(*(void **)(a1 + 40));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

void std::__optional_destruct_base<AMCP::Graph::Graph_Wire::Connection,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 216))
  {
    unsigned int v2 = *(void **)(a1 + 192);
    if (v2)
    {
      *(void *)(a1 + 200) = v2;
      operator delete(v2);
    }
    CFTypeRef v3 = *(std::__shared_weak_count **)(a1 + 168);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    long long v4 = *(void **)(a1 + 104);
    if (v4)
    {
      *(void *)(a1 + 112) = v4;
      operator delete(v4);
    }
    if (*(char *)(a1 + 103) < 0) {
      operator delete(*(void **)(a1 + 80));
    }
    if (*(char *)(a1 + 63) < 0) {
      operator delete(*(void **)(a1 + 40));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 216) = 0;
  }
}

void AMCP::Graph::Graph_Wire::Connection::~Connection(AMCP::Graph::Graph_Wire::Connection *this)
{
  unsigned int v2 = (void *)*((void *)this + 24);
  if (v2)
  {
    *((void *)this + 25) = v2;
    operator delete(v2);
  }
  CFTypeRef v3 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v4 = (void *)*((void *)this + 13);
  if (v4)
  {
    *((void *)this + 14) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void AMCP::Terminal_Identifier_to_string(std::string *a1, const void **a2)
{
  int v4 = *((_DWORD *)a2 + 8);
  if (v4) {
    std::string::size_type v5 = "in";
  }
  else {
    std::string::size_type v5 = "out";
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  std::string::size_type v7 = &v18;
  std::string::basic_string[abi:ne180100]((uint64_t)&v18, v6 + 1);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v7 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *a2;
    }
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 91;
  if (v4) {
    std::string::size_type v9 = 2;
  }
  else {
    std::string::size_type v9 = 3;
  }
  uint64_t v10 = std::string::append(&v18, v5, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  CFTypeRef v12 = std::string::append(&v19, "]:", 2uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, (unint64_t)a2[3]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  CFDataRef v16 = std::string::append(&v20, (const std::string::value_type *)p_p, size);
  *a1 = *v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1BABAE7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Graph_Wire::Wire_Info::~Wire_Info(AMCP::Graph::Graph_Wire::Wire_Info *this)
{
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  CFTypeRef v3 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void AMCP::Graph::Graph_Wire::Conversion_Info::~Conversion_Info(AMCP::Graph::Graph_Wire::Conversion_Info *this)
{
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  CFTypeRef v3 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::string::size_type v5 = (void *)*((void *)this + 15);
  if (v5)
  {
    *((void *)this + 16) = v5;
    operator delete(v5);
  }
  size_t v6 = (void *)*((void *)this + 12);
  if (v6)
  {
    *((void *)this + 13) = v6;
    operator delete(v6);
  }
}

double AMCP::Graph::Graph_Wire::get_description(AMCP::Graph::Graph_Wire *this, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v11 = *(std::string *)a2;
  }
  uint64_t v4 = *(void *)(a2 + 24);
  if (*(char *)(a2 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else {
    std::string v10 = *(std::string *)(a2 + 40);
  }
  uint64_t v5 = *(void *)(a2 + 64);
  std::string::size_type size = v11.__r_.__value_.__l.__size_;
  uint64_t v7 = *(std::string::size_type *)((char *)&v11.__r_.__value_.__r.__words[1] + 7);
  *(void *)this = v11.__r_.__value_.__r.__words[0];
  *((void *)this + 1) = size;
  *(void *)((char *)this + 15) = v7;
  *((unsigned char *)this + 23) = *((unsigned char *)&v11.__r_.__value_.__s + 23);
  *((void *)this + 3) = v4;
  *((_DWORD *)this + 8) = 0;
  std::string::size_type v8 = v10.__r_.__value_.__r.__words[0];
  *((void *)this + 6) = v10.__r_.__value_.__l.__size_;
  *(void *)((char *)this + 55) = *(std::string::size_type *)((char *)&v10.__r_.__value_.__r.__words[1] + 7);
  LOBYTE(size) = *((unsigned char *)&v10.__r_.__value_.__s + 23);
  *((void *)this + 5) = v8;
  *((unsigned char *)this + 63) = size;
  *((void *)this + 8) = v5;
  *((_DWORD *)this + 18) = 1;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  *(_OWORD *)((char *)this + 140) = xmmword_1BAFF9440;
  *((_DWORD *)this + 39) = 64;
  *((unsigned char *)this + 160) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 21) = 0;
  std::string::operator=((std::string *)((char *)this + 40), (const std::string *)(a2 + 40));
  *((void *)this + 8) = *(void *)(a2 + 64);
  *((_DWORD *)this + 18) = *(_DWORD *)(a2 + 72);
  if ((AMCP::Graph::Graph_Wire *)((char *)this + 80) != (AMCP::Graph::Graph_Wire *)(a2 + 80)) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 80, *(char **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
  }
  if (this != (AMCP::Graph::Graph_Wire *)a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 104, *(char **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
  }
  *(_OWORD *)((char *)this + 132) = *(_OWORD *)(a2 + 128);
  double result = *(double *)(a2 + 148);
  *((double *)this + 19) = result;
  *((_DWORD *)this + 32) = *(_DWORD *)(a2 + 156);
  *((unsigned char *)this + 160) = *(unsigned char *)(a2 + 160);
  return result;
}

void sub_1BABAEA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Wire_Description::~Wire_Description(AMCP::Wire_Description *this)
{
  uint64_t v4 = (void **)((char *)this + 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  unsigned int v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  CFTypeRef v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t AMCP::DAL::DAL_Buffer::remove_source()
{
  return 0;
}

void AMCP::add_available_format(uint64_t *a1, uint64_t a2)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 12);
  unsigned int v5 = *(_DWORD *)(a2 + 28);
  unsigned int v6 = *(_DWORD *)(a2 + 32);
  std::string::size_type v8 = (double **)*a1;
  uint64_t v7 = (double **)a1[1];
  if (v7 != (double **)*a1)
  {
    unint64_t v9 = ((uint64_t)v7 - *a1) >> 6;
    while (1)
    {
      unint64_t v10 = v9 >> 1;
      std::string v11 = &v8[8 * (v9 >> 1)];
      unsigned int v12 = *((_DWORD *)v11 + 8);
      if (!v4) {
        break;
      }
      if (v12) {
        BOOL v13 = v4 == v12;
      }
      else {
        BOOL v13 = 1;
      }
      if (!v13)
      {
        LOBYTE(v14) = v12 != 1819304813 && v4 < v12;
        if (v4 == 1819304813) {
          LOBYTE(v14) = 1;
        }
        goto LABEL_23;
      }
      LOBYTE(v14) = 0;
      BOOL v15 = v12 == 1819304813;
      BOOL v16 = v4 == 1819304813;
      BOOL v17 = 0;
      if (v4 != 1819304813 || v12 != 1819304813) {
        goto LABEL_24;
      }
      int v18 = *((_DWORD *)v11 + 9);
      LOBYTE(v14) = (v18 & 0x40) == 0;
      if ((v3 & 0x40) != 0)
      {
        BOOL v15 = 1;
        BOOL v17 = (*((_DWORD *)v11 + 9) & 0x40) == 0;
      }
      else
      {
        if ((v18 & 0x40) != 0) {
          goto LABEL_50;
        }
        LOBYTE(v14) = 0;
        BOOL v17 = 0;
        BOOL v15 = 1;
      }
LABEL_25:
      if (!v17 && v15)
      {
        if ((*(_DWORD *)(a2 + 12) & 1) != (*((_DWORD *)v11 + 9) & 1))
        {
          unsigned int v14 = *((_DWORD *)v11 + 9);
          goto LABEL_48;
        }
        goto LABEL_31;
      }
LABEL_30:
      if (v17) {
        goto LABEL_48;
      }
LABEL_31:
      char v20 = v14;
      if (!v6)
      {
        if (!v5)
        {
          if ((v14 & 1) == 0) {
            goto LABEL_50;
          }
LABEL_49:
          std::string::size_type v8 = v11 + 8;
          unint64_t v10 = v9 + ~v10;
          goto LABEL_50;
        }
LABEL_42:
        unsigned int v14 = *((_DWORD *)v11 + 13);
        if (v5 == v14 || v14 == 0) {
          LOBYTE(v14) = v20;
        }
        else {
          LOBYTE(v14) = v5 < v14;
        }
        goto LABEL_48;
      }
      unsigned int v21 = *((_DWORD *)v11 + 14);
      BOOL v22 = v21 != 0;
      BOOL v23 = v6 > v21;
      BOOL v24 = v6 != v21;
      char v25 = v23;
      int v26 = v22 && v24;
      if (v26) {
        LOBYTE(v14) = v25;
      }
      else {
        LOBYTE(v14) = v20;
      }
      if ((v26 & 1) == 0 && v5) {
        goto LABEL_42;
      }
LABEL_48:
      if (v14) {
        goto LABEL_49;
      }
LABEL_50:
      unint64_t v9 = v10;
      if (!v10) {
        goto LABEL_54;
      }
    }
    LOBYTE(v14) = 0;
LABEL_23:
    BOOL v15 = v12 == 1819304813;
    BOOL v16 = v4 == 1819304813;
    BOOL v17 = v4 != 0;
LABEL_24:
    if (!v16) {
      goto LABEL_30;
    }
    goto LABEL_25;
  }
LABEL_54:
  if (v8 != v7
    && *((double *)v8 + 3) == 0.0
    && *((_DWORD *)v8 + 8) == v4
    && *((_DWORD *)v8 + 9) == v3
    && *((_DWORD *)v8 + 10) == *(_DWORD *)(a2 + 16)
    && *((_DWORD *)v8 + 11) == *(_DWORD *)(a2 + 20)
    && *((_DWORD *)v8 + 12) == *(_DWORD *)(a2 + 24)
    && *((_DWORD *)v8 + 13) == v5
    && *((_DWORD *)v8 + 14) == v6)
  {
    *(_OWORD *)long long v89 = *(_OWORD *)(a2 + 40);
    CA::ValueRangeList::AddRange(v8, (double *)v89);
  }
  else
  {
    int v77 = *(_DWORD *)(a2 + 12);
    int v78 = *(_DWORD *)(a2 + 16);
    int v79 = *(_DWORD *)(a2 + 20);
    int v80 = *(_DWORD *)(a2 + 24);
    int v81 = *(_DWORD *)(a2 + 36);
    long long v94 = *(_OWORD *)(a2 + 40);
    uint64_t v84 = 0;
    long long v83 = 0uLL;
    CA::ValueRangeList::AddRange((double **)&v83, (double *)&v94);
    long long v29 = (double **)*a1;
    unint64_t v28 = a1[1];
    uint64_t v30 = (uint64_t)v8 - *a1;
    uint64_t v31 = v30 >> 6;
    uint64_t v32 = *a1 + (v30 & 0xFFFFFFFFFFFFFFC0);
    unint64_t v82 = a1;
    unint64_t v35 = a1[2];
    uint64_t v34 = (uint64_t)(a1 + 2);
    unint64_t v33 = v35;
    if (v28 >= v35)
    {
      unint64_t v52 = ((uint64_t)(v28 - (void)v29) >> 6) + 1;
      if (v52 >> 58) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v53 = v33 - (void)v29;
      if (v53 >> 5 > v52) {
        unint64_t v52 = v53 >> 5;
      }
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v54 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v54 = v52;
      }
      uint64_t v88 = v34;
      if (v54) {
        unint64_t v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>(v54);
      }
      else {
        uint64_t v55 = 0;
      }
      unint64_t v56 = v54 + (v31 << 6);
      unint64_t v85 = (char *)v54;
      *(void *)&long long v86 = v56;
      *((void *)&v86 + 1) = v56;
      long long v87 = (char *)(v54 + (v55 << 6));
      if (v31 == v55)
      {
        if (v30 < 1)
        {
          if (v8 == v29) {
            unint64_t v58 = 1;
          }
          else {
            unint64_t v58 = v30 >> 5;
          }
          uint64_t v91 = v34;
          Float64 v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>(v58);
          uint64_t v61 = v86;
          if (*((void *)&v86 + 1) == (void)v86)
          {
            int64x2_t v66 = vdupq_n_s64(v86);
            long long v62 = &v59[64 * (v58 >> 2)];
          }
          else
          {
            long long v62 = &v59[64 * (v58 >> 2) + *((void *)&v86 + 1) - v86];
            uint64_t v63 = &v59[64 * (v58 >> 2)];
            do
            {
              *(void *)uint64_t v63 = 0;
              *((void *)v63 + 1) = 0;
              *((void *)v63 + 2) = 0;
              *(_OWORD *)uint64_t v63 = *(_OWORD *)v61;
              *((void *)v63 + 2) = *(void *)(v61 + 16);
              *(void *)uint64_t v61 = 0;
              *(void *)(v61 + 8) = 0;
              *(void *)(v61 + 16) = 0;
              long long v64 = *(_OWORD *)(v61 + 24);
              long long v65 = *(_OWORD *)(v61 + 40);
              *((void *)v63 + 7) = *(void *)(v61 + 56);
              *(_OWORD *)(v63 + 40) = v65;
              *(_OWORD *)(v63 + 24) = v64;
              v63 += 64;
              v61 += 64;
            }
            while (v63 != v62);
            int64x2_t v66 = (int64x2_t)v86;
          }
          long long v67 = v87;
          *(void *)long long v89 = v85;
          unint64_t v85 = v59;
          *(void *)&long long v86 = &v59[64 * (v58 >> 2)];
          *(int64x2_t *)&v89[8] = v66;
          *((void *)&v86 + 1) = v62;
          long long v87 = &v59[64 * v60];
          Float64 v90 = v67;
          std::__split_buffer<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::~__split_buffer((uint64_t)v89);
          unint64_t v56 = *((void *)&v86 + 1);
        }
        else
        {
          unint64_t v57 = v31 + 2;
          if (v31 >= -1) {
            unint64_t v57 = v31 + 1;
          }
          v56 -= v57 >> 1 << 6;
          *(void *)&long long v86 = v56;
          *((void *)&v86 + 1) = v56;
        }
      }
      *(_OWORD *)unint64_t v56 = v83;
      *(void *)(v56 + 16) = v84;
      *(void *)(v56 + 24) = 0;
      *(_DWORD *)(v56 + 32) = v4;
      *(_DWORD *)(v56 + 36) = v77;
      *(_DWORD *)(v56 + 40) = v78;
      *(_DWORD *)(v56 + 44) = v79;
      *(_DWORD *)(v56 + 48) = v80;
      *(_DWORD *)(v56 + 52) = v5;
      *(_DWORD *)(v56 + 56) = v6;
      *(_DWORD *)(v56 + 60) = v81;
      *((void *)&v86 + 1) += 64;
      *(void *)&long long v86 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<CA::ValueRangeList,CA::StreamDescription>>,std::reverse_iterator<std::tuple<CA::ValueRangeList,CA::StreamDescription>*>,std::reverse_iterator<std::tuple<CA::ValueRangeList,CA::StreamDescription>*>,std::reverse_iterator<std::tuple<CA::ValueRangeList,CA::StreamDescription>*>>(v34, v32, v32, *v82, *v82, v86, v86);
      uint64_t v68 = v82[1];
      uint64_t v69 = *((void *)&v86 + 1);
      uint64_t v92 = *((void *)&v86 + 1);
      uint64_t v93 = *((void *)&v86 + 1);
      *(void *)long long v89 = v34;
      *(void *)&v89[8] = &v92;
      *(void *)&v89[16] = &v93;
      if (v32 != v68)
      {
        do
        {
          *(void *)uint64_t v69 = 0;
          *(void *)(v69 + 8) = 0;
          *(void *)(v69 + 16) = 0;
          *(_OWORD *)uint64_t v69 = *(_OWORD *)v32;
          *(void *)(v69 + 16) = *(void *)(v32 + 16);
          *(void *)uint64_t v32 = 0;
          *(void *)(v32 + 8) = 0;
          *(void *)(v32 + 16) = 0;
          long long v70 = *(_OWORD *)(v32 + 24);
          long long v71 = *(_OWORD *)(v32 + 40);
          *(void *)(v69 + 56) = *(void *)(v32 + 56);
          *(_OWORD *)(v69 + 40) = v71;
          *(_OWORD *)(v69 + 24) = v70;
          v69 += 64;
          v32 += 64;
        }
        while (v32 != v68);
        uint64_t v93 = v69;
      }
      LOBYTE(v90) = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<CA::ValueRangeList,CA::StreamDescription>>,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v89);
      long long v72 = *(_OWORD *)v82;
      uint64_t v73 = (uint64_t)v87;
      *unint64_t v82 = v86;
      v82[1] = v69;
      long long v86 = v72;
      uint64_t v74 = v82[2];
      v82[2] = v73;
      long long v87 = (char *)v74;
      unint64_t v85 = (char *)v72;
      std::__split_buffer<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::~__split_buffer((uint64_t)&v85);
    }
    else if (v32 == v28)
    {
      *(_OWORD *)uint64_t v32 = v83;
      *(void *)(v32 + 16) = v84;
      *(void *)(v32 + 24) = 0;
      *(_DWORD *)(v32 + 32) = v4;
      *(_DWORD *)(v32 + 36) = v77;
      *(_DWORD *)(v32 + 40) = v78;
      *(_DWORD *)(v32 + 44) = v79;
      *(_DWORD *)(v32 + 48) = v80;
      *(_DWORD *)(v32 + 52) = v5;
      *(_DWORD *)(v32 + 56) = v6;
      *(_DWORD *)(v32 + 60) = v81;
      v82[1] = v32 + 64;
    }
    else
    {
      uint64_t v36 = v32 + 64;
      unint64_t v37 = v28 - 64;
      unint64_t v38 = v28;
      if (v28 >= 0x40)
      {
        do
        {
          *(void *)unint64_t v38 = 0;
          *(void *)(v38 + 8) = 0;
          *(void *)(v38 + 16) = 0;
          *(_OWORD *)unint64_t v38 = *(_OWORD *)v37;
          *(void *)(v38 + 16) = *(void *)(v37 + 16);
          *(void *)unint64_t v37 = 0;
          *(void *)(v37 + 8) = 0;
          *(void *)(v37 + 16) = 0;
          long long v39 = *(_OWORD *)(v37 + 24);
          long long v40 = *(_OWORD *)(v37 + 40);
          *(void *)(v38 + 56) = *(void *)(v37 + 56);
          *(_OWORD *)(v38 + 40) = v40;
          *(_OWORD *)(v38 + 24) = v39;
          v38 += 64;
          v37 += 64;
        }
        while (v37 < v28);
      }
      long long v76 = v83;
      uint64_t v75 = v84;
      v82[1] = v38;
      if (v28 != v36)
      {
        unint64_t v41 = 0;
        uint64_t v42 = (uint64_t)(v28 - v36) >> 6;
        long long v43 = &(&v29[8 * v31])[8 * v42];
        uint64_t v44 = -64 * v42;
        do
        {
          unint64_t v45 = v28 + v41;
          long long v47 = (void **)(v28 + v41 - 64);
          Float64 v46 = *v47;
          if (*v47)
          {
            *(void *)(v45 - 56) = v46;
            operator delete(v46);
            *long long v47 = 0;
            *(void *)(v28 + v41 - 56) = 0;
            *(void *)(v28 + v41 - 48) = 0;
          }
          uint64_t v48 = (uint64_t)&v43[v41 / 8 - 8];
          *(_OWORD *)long long v47 = *(_OWORD *)v48;
          *(void *)(v45 - 48) = v43[v41 / 8 - 6];
          *(void *)uint64_t v48 = 0;
          *(void *)(v48 + 8) = 0;
          *(void *)(v48 + 16) = 0;
          long long v49 = *(_OWORD *)&v43[v41 / 8 - 5];
          long long v50 = *(_OWORD *)&v43[v41 / 8 - 3];
          *(void *)(v45 - 8) = v43[v41 / 8 - 1];
          *(_OWORD *)(v45 - 24) = v50;
          *(_OWORD *)(v45 - 40) = v49;
          v41 -= 64;
        }
        while (v44 != v41);
      }
      unint64_t v51 = *(void **)v32;
      if (*(void *)v32)
      {
        *(void *)(v32 + 8) = v51;
        operator delete(v51);
      }
      *(_OWORD *)uint64_t v32 = v76;
      *(void *)(v32 + 16) = v75;
      *(void *)(v32 + 24) = 0;
      *(_DWORD *)(v32 + 32) = v4;
      *(_DWORD *)(v32 + 36) = v77;
      *(_DWORD *)(v32 + 40) = v78;
      *(_DWORD *)(v32 + 44) = v79;
      *(_DWORD *)(v32 + 48) = v80;
      *(_DWORD *)(v32 + 52) = v5;
      *(_DWORD *)(v32 + 56) = v6;
      *(_DWORD *)(v32 + 60) = v81;
    }
  }
}

void sub_1BABAF1E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
  {
    std::__split_buffer<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::~__split_buffer((uint64_t)&a20);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::make_available_format_list(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      long long v5 = *(_OWORD *)(v2 + 16);
      v11[0] = *(_OWORD *)v2;
      v11[1] = v5;
      uint64_t v12 = *(void *)(v2 + 32);
      uint64_t v13 = *(void *)&v11[0];
      uint64_t v14 = *(void *)&v11[0];
      AMCP::add_available_format(a2, (uint64_t)v11);
      v2 += 40;
    }
    while (v2 != v3);
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    while (1)
    {
      if (v6 == v7) {
        return;
      }
      std::string::size_type v8 = *(double **)v6;
      uint64_t v9 = *(void *)(v6 + 8);
      if (*(void *)v6 == v9) {
        break;
      }
      double v10 = *v8;
      if (*v8 == *(double *)(v9 - 8)) {
        goto LABEL_9;
      }
LABEL_10:
      v6 += 64;
    }
    double v10 = 0.0;
LABEL_9:
    *(double *)(v6 + 24) = v10;
    goto LABEL_10;
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  double v9;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      AMCP::add_available_format(a2, v2);
      v2 += 56;
    }
    while (v2 != v3);
    long long v5 = *a2;
    uint64_t v6 = a2[1];
    while (1)
    {
      if (v5 == v6) {
        return;
      }
      uint64_t v7 = *(double **)v5;
      std::string::size_type v8 = *(void *)(v5 + 8);
      if (*(void *)v5 == v8) {
        break;
      }
      uint64_t v9 = *v7;
      if (*v7 == *(double *)(v8 - 8)) {
        goto LABEL_9;
      }
LABEL_10:
      v5 += 64;
    }
    uint64_t v9 = 0.0;
LABEL_9:
    *(double *)(v5 + 24) = v9;
    goto LABEL_10;
  }
}

uint64_t AMCP::get_stream_property_traits_list(AMCP *this)
{
  {
    AMCP::get_stream_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::get_stream_property_traits_list(void)::once, memory_order_acquire) != -1)
  {
    unsigned int v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&AMCP::get_stream_property_traits_list(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_stream_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_stream_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_stream_property_traits_list(void)::$_0 &&>>()
{
  v24[6] = *MEMORY[0x1E4F143B8];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v0, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v1, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v2, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v3, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v4, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v5, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v6, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v7, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v8, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v9, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1935960434, 1, 0, 0, &AMCP::Property_Traits<1935960434u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935894638u>::k_valid_scopes, 0, 1935960434, 8);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1935894638, 1, 0, 0, &AMCP::Property_Traits<1935894638u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1952542835u>::k_valid_scopes, 0, 1935894638, 24);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1952542835, 1, 0, 0, &AMCP::Property_Traits<1952542835u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1952805485u>::k_valid_scopes, 0, 1952542835, 24);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1952805485, 1, 0, 0, &AMCP::Property_Traits<1952805485u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936487523u>::k_valid_scopes, 0, 1952805485, 22);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1936487523, 1, 0, 0, &AMCP::Property_Traits<1936487523u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1718444404u>::k_valid_scopes, 0, 1819569763, 12);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v23, 1718444404, 1, 0, 1, &AMCP::Property_Traits<1718444404u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1718449187u>::k_valid_scopes, 0, 1885762592, 11);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v24, 1718449187, 1, 0, 0, &AMCP::Property_Traits<1718449187u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1735554416u>::k_valid_scopes, 0, 1885762657, 1);
  operator new();
}

void sub_1BABAFAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v16 = v15;
  *(void *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1C1859840](v14, 0x20C40960023A9);
  uint64_t v18 = 1200;
  while (1)
  {
    uint64_t v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(void *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18) {
      _Unwind_Resume(a1);
    }
  }
}

void HALS_Client::RemoveMuter(HALS_Object *a1, int a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  char v11 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZN11HALS_Client11RemoveMuterEN4AMCP9DirectionEj_block_invoke;
  v5[3] = &unk_1E6230CC8;
  int v6 = 0;
  int v7 = a2;
  v5[4] = &v8;
  v5[5] = a1;
  uint64_t v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Object *))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v5);
  if (*((unsigned char *)v9 + 24))
  {
    HALS_Client::UpdateMuteStateOnContexts(a1);
    strcpy((char *)&v4, "tmopbolg");
    BYTE1(v4.mElement) = 0;
    HIWORD(v4.mElement) = 0;
    HALS_Object::PropertiesChanged(a1, (HALS_NotificationManager *)*((unsigned int *)a1 + 4), *((unsigned int *)a1 + 4), 1u, &v4);
  }
  _Block_object_dispose(&v8, 8);
}

void sub_1BABAFC60(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_Client11RemoveMuterEN4AMCP9DirectionEj_block_invoke(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = v2 + 64;
  AudioObjectPropertyAddress v4 = (void *)(v2 + 64 + 40 * *(unsigned int *)(a1 + 48));
  uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v4, *(_DWORD *)(a1 + 52));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v5 != 0;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    int8x8_t v6 = (int8x8_t)v4[1];
    unint64_t v7 = v5[1];
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= *(void *)&v6) {
        v7 %= *(void *)&v6;
      }
    }
    else
    {
      v7 &= *(void *)&v6 - 1;
    }
    uint64_t v9 = *(uint64_t **)(*v4 + 8 * v7);
    do
    {
      uint64_t v10 = v9;
      uint64_t v9 = (uint64_t *)*v9;
    }
    while (v9 != v5);
    if (v10 == v4 + 2) {
      goto LABEL_19;
    }
    unint64_t v11 = v10[1];
    if (v8.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v6) {
        v11 %= *(void *)&v6;
      }
    }
    else
    {
      v11 &= *(void *)&v6 - 1;
    }
    if (v11 != v7)
    {
LABEL_19:
      if (!*v5) {
        goto LABEL_20;
      }
      unint64_t v12 = *(void *)(*v5 + 8);
      if (v8.u32[0] > 1uLL)
      {
        if (v12 >= *(void *)&v6) {
          v12 %= *(void *)&v6;
        }
      }
      else
      {
        v12 &= *(void *)&v6 - 1;
      }
      if (v12 != v7) {
LABEL_20:
      }
        *(void *)(*v4 + 8 * v7) = 0;
    }
    uint64_t v13 = *v5;
    if (*v5)
    {
      unint64_t v14 = *(void *)(v13 + 8);
      if (v8.u32[0] > 1uLL)
      {
        if (v14 >= *(void *)&v6) {
          v14 %= *(void *)&v6;
        }
      }
      else
      {
        v14 &= *(void *)&v6 - 1;
      }
      if (v14 != v7)
      {
        *(void *)(*v4 + 8 * v14) = v10;
        uint64_t v13 = *v5;
      }
    }
    *uint64_t v10 = v13;
    uint64_t *v5 = 0;
    --v4[3];
    operator delete(v5);
    AMCP::Log::Scope_Registry::get(v15);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v16 = **(NSObject ***)buf;
    if (*(void *)v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v34);
    }
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (v17)
    {
      uint64_t v18 = pthread_self();
      mach_port_t v19 = pthread_mach_thread_np(v18);
      HALS_Client::GetUniqueDebugString((HALS_Client *)&v32, v2);
      int v20 = SHIBYTE(v32.__r_.__value_.__r.__words[2]);
      std::string::size_type v21 = v32.__r_.__value_.__r.__words[0];
      int v22 = *(_DWORD *)(v2 + 16);
      get_muter_name(&__p, (HALS_ObjectMap *)*(unsigned int *)(a1 + 52));
      uint64_t v23 = &v32;
      if (v20 < 0) {
        uint64_t v23 = (std::string *)v21;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      int v25 = *(_DWORD *)(a1 + 52);
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)uint64_t v34 = 2080;
      *(void *)&v34[2] = "HALS_Client.cpp";
      __int16 v35 = 1024;
      int v36 = 1519;
      __int16 v37 = 2082;
      unint64_t v38 = v23;
      __int16 v39 = 1024;
      int v40 = v22;
      __int16 v41 = 2082;
      uint64_t v42 = p_p;
      __int16 v43 = 1024;
      int v44 = v25;
      _os_log_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d HALS_Client::RemoveMuter: Process %{public}s (%u) unmuted by %{public}s (%u)", buf, 0x38u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
    }
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v17);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v26 = **(NSObject ***)buf;
    if (*(void *)v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v34);
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      CFURLRef v27 = pthread_self();
      mach_port_t v28 = pthread_mach_thread_np(v27);
      uint64_t v29 = v3 + 40 * *(unsigned int *)(a1 + 48);
      get_muter_strings(&v32, *(uint64_t ***)(v29 + 16), *(void *)(v29 + 24));
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v30 = &v32;
      }
      else {
        uint64_t v30 = (std::string *)v32.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v28;
      *(_WORD *)uint64_t v34 = 2080;
      *(void *)&v34[2] = "HALS_Client.cpp";
      __int16 v35 = 1024;
      int v36 = 1520;
      __int16 v37 = 2080;
      unint64_t v38 = v30;
      _os_log_impl(&dword_1BAA78000, v26, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d HALS_Client::RemoveMuter:\t\tCurrent muters: (%s)", buf, 0x22u);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1BABB0060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void HALS_Client::UpdateMuteStateOnContexts(_DWORD *a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 200))(&__p);
  uint64_t v2 = (unsigned int *)__p;
  uint64_t v3 = v14;
  while (v2 != v3)
  {
    AudioObjectPropertyAddress v4 = (HALS_ObjectMap *)*v2;
    uint64_t v5 = HALS_ObjectMap::CopyObjectByObjectID(v4);
    unint64_t v7 = (HALS_ObjectMap *)v5;
    if (v5)
    {
      int v8 = (*(uint64_t (**)(void, void))(**(void **)(v5 + 96) + 544))(*(void *)(v5 + 96), 0);
      BOOL ShouldMuteContext = HALS_Client::ShouldMuteContext(a1, 0, v4);
      if (v8 != ShouldMuteContext) {
        (*(void (**)(void *, void, BOOL))(**((void **)v7 + 12) + 552))(*((void **)v7 + 12), 0, ShouldMuteContext);
      }
    }
    HALS_ObjectMap::ReleaseObject(v7, v6);
    ++v2;
  }
  v10[0] = 0;
  v10[1] = 0;
  HALS_System::GetInstance(&v11, 0, v10);
  if (v11) {
    HALS_System::ProcessPropertyChanged(v11, a1[4], 1886350708, 1735159650, 1);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (__p)
  {
    unint64_t v14 = (unsigned int *)__p;
    operator delete(__p);
  }
}

void sub_1BABB01F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL HALS_Client::ShouldMuteContext(_DWORD *a1, int a2, HALS_ObjectMap *a3)
{
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x5002000000;
  BOOL v17 = __Block_byref_object_copy__37;
  uint64_t v18 = __Block_byref_object_dispose__38;
  memset(v19, 0, sizeof(v19));
  int v20 = 1065353216;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  v12[2] = ___ZNK11HALS_Client17ShouldMuteContextEN4AMCP9DirectionEj_block_invoke;
  v12[3] = &unk_1E6230CF0;
  v12[4] = &v14;
  v12[5] = a1;
  int v13 = a2;
  uint64_t v5 = (HALB_Mutex *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v12);
  if (v15[8])
  {
    uint64_t v6 = HALS_ObjectMap::CopyObjectByObjectID(a3);
    int v8 = (HALS_IOContext *)v6;
    if (v6 && **(_DWORD **)(v6 + 64) == a1[4])
    {
      uint64_t v9 = v15 + 7;
      while (1)
      {
        uint64_t v9 = (void *)*v9;
        BOOL v10 = v9 != 0;
        if (!v9) {
          break;
        }
        if (!*((unsigned char *)v9 + 24) || HALS_IOContext::IncludesDevice(v8, *((_DWORD *)v9 + 5)))
        {
          BOOL v10 = 1;
          break;
        }
      }
    }
    else
    {
      BOOL v10 = 0;
    }
    HALS_ObjectMap::ReleaseObject(v8, v7);
  }
  else
  {
    BOOL v10 = 0;
  }
  _Block_object_dispose(&v14, 8);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)v19);
  return v10;
}

void sub_1BABB03D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(v9);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__37(uint64_t result, void *a2)
{
  uint64_t v2 = a2[5];
  a2[5] = 0;
  *(void *)(result + 40) = v2;
  *(void *)(result + 48) = a2[6];
  a2[6] = 0;
  uint64_t v5 = a2[7];
  uint64_t v3 = a2 + 7;
  uint64_t v4 = v5;
  *(void *)(result + 56) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 64) = v6;
  *(_DWORD *)(result + 72) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 48);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 56;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__38(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(a1 + 40);
}

void ___ZNK11HALS_Client17ShouldMuteContextEN4AMCP9DirectionEj_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40) + 40 * *(unsigned int *)(a1 + 48) + 64;
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v3 = (void *)(v2 + 40);
  if (v2 + 40 != v1)
  {
    *(_DWORD *)(v2 + 72) = *(_DWORD *)(*(void *)(a1 + 40) + 40 * *(unsigned int *)(a1 + 48) + 96);
    uint64_t v4 = *(uint64_t **)(v1 + 16);
    uint64_t v5 = *(void *)(v2 + 48);
    if (!v5) {
      goto LABEL_10;
    }
    for (uint64_t i = 0; i != v5; *(void *)(*v3 + 8 * i++) = 0)
      ;
    unint64_t v7 = *(uint64_t **)(v2 + 56);
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
    if (v7)
    {
      while (v4)
      {
        unint64_t v8 = *((unsigned int *)v4 + 4);
        *((_DWORD *)v7 + 4) = v8;
        int v9 = *((_DWORD *)v4 + 5);
        *((unsigned char *)v7 + 24) = *((unsigned char *)v4 + 24);
        *((_DWORD *)v7 + 5) = v9;
        BOOL v10 = (uint64_t *)*v7;
        v7[1] = v8;
        BOOL inserted = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_prepare((uint64_t)v3, v8, (_DWORD *)v7 + 4);
        std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_perform(v3, v7, inserted);
        uint64_t v4 = (uint64_t *)*v4;
        unint64_t v7 = v10;
        if (!v10) {
          goto LABEL_10;
        }
      }
      do
      {
        uint64_t v16 = (uint64_t *)*v7;
        operator delete(v7);
        unint64_t v7 = v16;
      }
      while (v16);
    }
    else
    {
LABEL_10:
      while (v4)
      {
        unint64_t v12 = (unsigned int *)operator new(0x20uLL);
        *(void *)unint64_t v12 = 0;
        uint64_t v13 = v4[2];
        void v12[6] = *((_DWORD *)v4 + 6);
        *((void *)v12 + 2) = v13;
        unint64_t v14 = v12[4];
        *((void *)v12 + 1) = v14;
        uint64_t v15 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_prepare((uint64_t)v3, v14, v12 + 4);
        std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_perform(v3, v12, v15);
        uint64_t v4 = (uint64_t *)*v4;
      }
    }
  }
}

void sub_1BABB05BC(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1BABB05DC(_Unwind_Exception *a1)
{
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      int8x8_t prime = (int8x8_t)v11;
    }
    else {
      int8x8_t prime = (int8x8_t)v10;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v6) {
      goto LABEL_74;
    }
    if (*(void *)&prime >= v6) {
      goto LABEL_43;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v6)
    {
      unint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_74:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = operator new(8 * *(void *)&prime);
      unint64_t v14 = *(void **)a1;
      *(void *)a1 = v13;
      if (v14) {
        operator delete(v14);
      }
      uint64_t v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v15++) = 0;
      while (*(void *)&prime != v15);
      uint64_t v16 = *(uint64_t ***)(a1 + 16);
      if (v16)
      {
        unint64_t v17 = (unint64_t)v16[1];
        uint8x8_t v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(void *)&prime) {
            v17 %= *(void *)&prime;
          }
        }
        else
        {
          v17 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v17) = a1 + 16;
        for (uint64_t i = *v16; *v16; uint64_t i = *v16)
        {
          unint64_t v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(void *)&prime) {
              v23 %= *(void *)&prime;
            }
          }
          else
          {
            v23 &= *(void *)&prime - 1;
          }
          if (v23 == v17)
          {
            uint64_t v16 = (uint64_t **)i;
          }
          else
          {
            BOOL v24 = i;
            if (*(void *)(*(void *)a1 + 8 * v23))
            {
              do
              {
                int v25 = v24;
                BOOL v24 = (uint64_t *)*v24;
              }
              while (v24 && *((_DWORD *)i + 4) == *((_DWORD *)v24 + 4));
              *uint64_t v16 = v24;
              *int v25 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = i;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v16;
              uint64_t v16 = (uint64_t **)i;
              unint64_t v17 = v23;
            }
          }
        }
      }
      unint64_t v6 = (unint64_t)prime;
    }
    else
    {
      __int16 v35 = *(void **)a1;
      *(void *)a1 = 0;
      if (v35) {
        operator delete(v35);
      }
      unint64_t v6 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    unint64_t v27 = a2;
    if (v6 <= a2) {
      unint64_t v27 = a2 % v6;
    }
  }
  else
  {
    unint64_t v27 = (v6 - 1) & a2;
  }
  mach_port_t v28 = *(uint64_t **)(*(void *)a1 + 8 * v27);
  if (!v28) {
    return 0;
  }
  int v29 = 0;
  do
  {
    double result = v28;
    mach_port_t v28 = (uint64_t *)*v28;
    if (!v28) {
      break;
    }
    unint64_t v31 = v28[1];
    if (v26.u32[0] > 1uLL)
    {
      unint64_t v32 = v28[1];
      if (v31 >= v6) {
        unint64_t v32 = v31 % v6;
      }
    }
    else
    {
      unint64_t v32 = v31 & (v6 - 1);
    }
    if (v32 != v27) {
      break;
    }
    BOOL v33 = v31 == a2 && *((_DWORD *)v28 + 4) == *a3;
    int v34 = v29 & !v33;
    v29 |= v33;
  }
  while (v34 != 1);
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(void *a1, unsigned int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  uint8x8_t v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (double result = *v5; result; double result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void HALS_Client::GetUniqueDebugString(HALS_Client *this, uint64_t a2)
{
  HALS_Client::GetBundleIDString(this, a2);
  uint64_t v4 = *((unsigned __int8 *)this + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)this + 1);
  }
  if (!v4)
  {
    uint8x8_t v5 = (caulk::platform *)*(unsigned int *)(a2 + 232);
    caulk::platform::process_name(v5);
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      std::string::operator=((std::string *)this, &__str);
    }
    else
    {
      std::to_string(&v7, (int)v5);
      if (*((char *)this + 23) < 0) {
        operator delete(*(void **)this);
      }
      *(std::string *)this = v7;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BABB0BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  _Unwind_Resume(exception_object);
}

void get_muter_name(std::string *a1, HALS_ObjectMap *a2)
{
  if (!HALS_ObjectMap::IsObjectMapped((unint64_t)a2))
  {
LABEL_7:
    std::to_string(a1, a2);
    return;
  }
  int v4 = *(_DWORD *)(HALS_ObjectMap::CopyObjectByObjectID(a2) + 20);
  if (v4 != 1668050548)
  {
    if (v4 == 1952672883)
    {
      uint64_t v5 = HALS_ObjectMap::CopyObjectByObjectID(a2);
      HALS_Tap::GetName(&cf, *(const void **)(v5 + 56));
      if (cf)
      {
        CFRelease(cf);
        HALS_Tap::GetName(&cf, *(const void **)(v5 + 56));
        CFTypeRef v6 = cf;
        if (!cf)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)a1, (const __CFString *)cf);
        CFRelease(v6);
      }
      else
      {
        HALS_Tap::GetUID(&cf, *(const void **)(v5 + 64));
        CFTypeRef v8 = cf;
        if (!cf)
        {
          unint64_t v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v10, "Could not construct");
          __cxa_throw(v10, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)a1, (const __CFString *)cf);
        CFRelease(v8);
      }
      return;
    }
    goto LABEL_7;
  }
  uint64_t v7 = HALS_ObjectMap::CopyObjectByObjectID(a2);

  HALS_Client::GetUniqueDebugString((HALS_Client *)a1, v7);
}

void sub_1BABB0D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v10);
  applesauce::CF::StringRef::~StringRef(&a10);
  _Unwind_Resume(a1);
}

void get_muter_strings(std::string *a1, uint64_t **a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a2)
  {
    uint8x8_t v3 = a2;
    for (uint64_t i = a3 - 1; ; --i)
    {
      get_muter_name(&__p, (HALS_ObjectMap *)*((unsigned int *)v3 + 4));
      CFTypeRef v6 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      std::string::size_type v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? HIBYTE(__p.__r_.__value_.__r.__words[2])
         : __p.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v6, v7);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        break;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if (i) {
        goto LABEL_13;
      }
LABEL_14:
      uint8x8_t v3 = (uint64_t **)*v3;
      if (!v3) {
        return;
      }
    }
    if (!i) {
      goto LABEL_14;
    }
LABEL_13:
    std::string::append(a1, ", ", 2uLL);
    goto LABEL_14;
  }
}

void sub_1BABB0E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void *HALS_Tap::GetName(void *this, const void *a2)
{
  uint8x8_t v3 = this;
  if (a2) {
    this = CFRetain(a2);
  }
  void *v3 = a2;
  return this;
}

void *HALS_Tap::GetUID(void *this, const void *a2)
{
  uint8x8_t v3 = this;
  if (a2) {
    this = CFRetain(a2);
  }
  void *v3 = a2;
  return this;
}

void HALS_Client::GetBundleIDString(HALS_Client *this, uint64_t a2)
{
  uint8x8_t v3 = *(const void **)(a2 + 240);
  if (v3
    && (CFRetain(v3), (uint64_t v5 = *(const void **)(a2 + 240)) != 0)
    && (applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v5), cf))
  {
    applesauce::CF::convert_to<std::string,0>((uint64_t)this, (const __CFString *)cf);
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
  }
}

void sub_1BABB0F9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_Client8AddMuterEN4AMCP9DirectionEjNSt3__18optionalIjEE_block_invoke(uint64_t a1)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = v3 + 64;
  unint64_t v5 = *(unsigned int *)(a1 + 60);
  uint64_t v6 = v3 + 64 + 40 * *(unsigned int *)(a1 + 56);
  int8x8_t prime = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)v6, v5);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = prime == 0;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    char v8 = 1;
  }
  else
  {
    if (prime[24]) {
      BOOL v9 = *(unsigned char *)(a1 + 68) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9) {
      char v8 = (prime[24] != 0) ^ (*(unsigned char *)(a1 + 68) != 0);
    }
    else {
      char v8 = *((_DWORD *)prime + 5) != *(_DWORD *)(a1 + 64);
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v8;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)
    && !*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    return;
  }
  unint64_t v10 = *(void *)(v6 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v1 = v5;
      if (v10 <= v5) {
        unint64_t v1 = v5 % v10;
      }
    }
    else
    {
      unint64_t v1 = (v10 - 1) & v5;
    }
    unint64_t v12 = *(void **)(*(void *)v6 + 8 * v1);
    if (v12)
    {
      uint64_t v13 = (unsigned char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v5)
          {
            if (*((_DWORD *)v13 + 4) == v5) {
              goto LABEL_84;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v1) {
              break;
            }
          }
          uint64_t v13 = *(unsigned char **)v13;
        }
        while (v13);
      }
    }
  }
  int8x8_t prime = operator new(0x20uLL);
  uint64_t v13 = prime;
  *(void *)int8x8_t prime = 0;
  *((void *)prime + 1) = v5;
  *((_DWORD *)prime + 4) = *(_DWORD *)(a1 + 60);
  prime[20] = 0;
  prime[24] = 0;
  float v15 = (float)(unint64_t)(*(void *)(v6 + 24) + 1);
  float v16 = *(float *)(v6 + 32);
  if (v10 && (float)(v16 * (float)v10) >= v15)
  {
    unint64_t v5 = v1;
    goto LABEL_74;
  }
  BOOL v17 = 1;
  if (v10 >= 3) {
    BOOL v17 = (v10 & (v10 - 1)) != 0;
  }
  unint64_t v18 = v17 | (2 * v10);
  unint64_t v19 = vcvtps_u32_f32(v15 / v16);
  if (v18 <= v19) {
    size_t v20 = v19;
  }
  else {
    size_t v20 = v18;
  }
  if (v20 == 1)
  {
    size_t v20 = 2;
  }
  else if ((v20 & (v20 - 1)) != 0)
  {
    int8x8_t prime = (unsigned char *)std::__next_prime(v20);
    size_t v20 = (size_t)prime;
    unint64_t v10 = *(void *)(v6 + 8);
  }
  if (v20 <= v10)
  {
    if (v20 >= v10) {
      goto LABEL_70;
    }
    int8x8_t prime = (unsigned char *)vcvtps_u32_f32((float)*(unint64_t *)(v6 + 24) / *(float *)(v6 + 32));
    if (v10 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      int8x8_t prime = (unsigned char *)std::__next_prime((size_t)prime);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz((unint64_t)(prime - 1));
      if ((unint64_t)prime >= 2) {
        int8x8_t prime = (unsigned char *)v27;
      }
    }
    if (v20 <= (unint64_t)prime) {
      size_t v20 = (size_t)prime;
    }
    if (v20 >= v10)
    {
      unint64_t v10 = *(void *)(v6 + 8);
      goto LABEL_70;
    }
    if (!v20)
    {
      int8x8_t prime = *(unsigned char **)v6;
      *(void *)uint64_t v6 = 0;
      if (prime) {
        operator delete(prime);
      }
      unint64_t v10 = 0;
      *(void *)(v6 + 8) = 0;
      goto LABEL_70;
    }
  }
  if (v20 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v21 = operator new(8 * v20);
  int8x8_t prime = *(unsigned char **)v6;
  *(void *)uint64_t v6 = v21;
  if (prime) {
    operator delete(prime);
  }
  uint64_t v22 = 0;
  *(void *)(v6 + 8) = v20;
  do
    *(void *)(*(void *)v6 + 8 * v22++) = 0;
  while (v20 != v22);
  unint64_t v23 = *(void **)(v6 + 16);
  if (v23)
  {
    size_t v24 = v23[1];
    uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= v20) {
        v24 %= v20;
      }
    }
    else
    {
      v24 &= v20 - 1;
    }
    *(void *)(*(void *)v6 + 8 * v24) = v6 + 16;
    mach_port_t v28 = (void *)*v23;
    if (*v23)
    {
      do
      {
        size_t v29 = v28[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v29 >= v20) {
            v29 %= v20;
          }
        }
        else
        {
          v29 &= v20 - 1;
        }
        if (v29 != v24)
        {
          if (!*(void *)(*(void *)v6 + 8 * v29))
          {
            *(void *)(*(void *)v6 + 8 * v29) = v23;
            goto LABEL_66;
          }
          *unint64_t v23 = *v28;
          void *v28 = **(void **)(*(void *)v6 + 8 * v29);
          **(void **)(*(void *)v6 + 8 * v29) = v28;
          mach_port_t v28 = v23;
        }
        size_t v29 = v24;
LABEL_66:
        unint64_t v23 = v28;
        mach_port_t v28 = (void *)*v28;
        size_t v24 = v29;
      }
      while (v28);
    }
  }
  unint64_t v10 = v20;
LABEL_70:
  if ((v10 & (v10 - 1)) != 0)
  {
    if (v10 <= v5) {
      v5 %= v10;
    }
  }
  else
  {
    unint64_t v5 = (v10 - 1) & v5;
  }
LABEL_74:
  uint64_t v30 = *(unsigned char **)v6;
  unint64_t v31 = *(void **)(*(void *)v6 + 8 * v5);
  if (v31)
  {
    *(void *)uint64_t v13 = *v31;
  }
  else
  {
    *(void *)uint64_t v13 = *(void *)(v6 + 16);
    *(void *)(v6 + 16) = v13;
    *(void *)&v30[8 * v5] = v6 + 16;
    if (!*(void *)v13) {
      goto LABEL_83;
    }
    unint64_t v32 = *(void *)(*(void *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    unint64_t v31 = (void *)(*(void *)v6 + 8 * v32);
  }
  *unint64_t v31 = v13;
LABEL_83:
  ++*(void *)(v6 + 24);
LABEL_84:
  int v33 = *(_DWORD *)(a1 + 64);
  v13[24] = *(unsigned char *)(a1 + 68);
  *((_DWORD *)v13 + 5) = v33;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)prime);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  int v34 = **(NSObject ***)buf;
  if (*(void *)v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v54);
  }
  BOOL v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
  if (v35)
  {
    int v36 = pthread_self();
    mach_port_t v37 = pthread_mach_thread_np(v36);
    HALS_Client::GetUniqueDebugString((HALS_Client *)&v52, v3);
    int v38 = SHIBYTE(v52.__r_.__value_.__r.__words[2]);
    std::string::size_type v39 = v52.__r_.__value_.__r.__words[0];
    int v40 = *(_DWORD *)(v3 + 16);
    get_muter_name(&__p, (HALS_ObjectMap *)*(unsigned int *)(a1 + 60));
    if (v38 >= 0) {
      __int16 v41 = &v52;
    }
    else {
      __int16 v41 = (std::string *)v39;
    }
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    int v43 = *(_DWORD *)(a1 + 60);
    int v44 = *(unsigned __int8 *)(a1 + 68);
    uint64_t v45 = "device ID ";
    if (*(unsigned char *)(a1 + 68)) {
      int v44 = *(_DWORD *)(a1 + 64);
    }
    else {
      uint64_t v45 = "all devices";
    }
    *(_DWORD *)buf = 67111170;
    *(_DWORD *)&buf[4] = v37;
    *(_WORD *)unint64_t v54 = 2080;
    *(void *)&v54[2] = "HALS_Client.cpp";
    __int16 v55 = 1024;
    int v56 = 1491;
    __int16 v57 = 2082;
    unint64_t v58 = v41;
    __int16 v59 = 1024;
    int v60 = v40;
    __int16 v61 = 2082;
    long long v62 = p_p;
    __int16 v63 = 1024;
    int v64 = v43;
    __int16 v65 = 2080;
    int64x2_t v66 = v45;
    __int16 v67 = 1024;
    int v68 = v44;
    _os_log_impl(&dword_1BAA78000, v34, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d HALS_Client::AddMuter: Process %{public}s (%u) muted by %{public}s (%u) for %s%u", buf, 0x48u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v35);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  Float64 v46 = **(NSObject ***)buf;
  if (*(void *)v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v54);
  }
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
  {
    long long v47 = pthread_self();
    mach_port_t v48 = pthread_mach_thread_np(v47);
    uint64_t v49 = v4 + 40 * *(unsigned int *)(a1 + 56);
    get_muter_strings(&v52, *(uint64_t ***)(v49 + 16), *(void *)(v49 + 24));
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v50 = &v52;
    }
    else {
      long long v50 = (std::string *)v52.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v48;
    *(_WORD *)unint64_t v54 = 2080;
    *(void *)&v54[2] = "HALS_Client.cpp";
    __int16 v55 = 1024;
    int v56 = 1492;
    __int16 v57 = 2080;
    unint64_t v58 = v50;
    _os_log_impl(&dword_1BAA78000, v46, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d HALS_Client::AddMuter:\t\tCurrent muters: (%s)", buf, 0x22u);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BABB16D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::pointer begin = this->__begin_;
  std::vector<unsigned int>::pointer end = this->__end_;
  std::vector<unsigned int>::size_type v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5) {
      return;
    }
    unint64_t v19 = &begin[__sz];
    goto LABEL_15;
  }
  std::vector<unsigned int>::size_type v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 4 * v6);
    unint64_t v19 = &end[v6];
LABEL_15:
    this->__end_ = v19;
    return;
  }
  if (__sz >> 62) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (char *)value - (char *)begin;
  std::vector<unsigned int>::size_type v9 = v8 >> 1;
  if (v8 >> 1 <= __sz) {
    std::vector<unsigned int>::size_type v9 = __sz;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  uint8x8_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v10);
  std::vector<unsigned int>::pointer v12 = this->__begin_;
  std::vector<unsigned int>::pointer v13 = this->__end_;
  unint64_t v14 = &v11[4 * v5];
  float v16 = (unsigned int *)&v11[4 * v15];
  bzero(v14, 4 * v6);
  BOOL v17 = (unsigned int *)&v14[4 * v6];
  while (v13 != v12)
  {
    int v18 = *--v13;
    *((_DWORD *)v14 - 1) = v18;
    v14 -= 4;
  }
  this->__begin_ = (std::vector<unsigned int>::pointer)v14;
  this->__end_ = v17;
  this->__end_cap_.__value_ = v16;
  if (v12)
  {
    operator delete(v12);
  }
}

void AMCP::Utility::SecTask::release(const void **this)
{
  unint64_t v2 = *this;
  if (v2)
  {
    CFRelease(v2);
    *this = 0;
  }
}

void ___ZN11HALS_Client28StopListeningToAllPropertiesEj_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = *(int **)(v1 + 144);
  uint64_t v3 = *(int **)(v1 + 152);
  do
  {
    if (v2 == v3) {
      return;
    }
    int v4 = *v2;
    v2 += 10;
    int v5 = *(_DWORD *)(a1 + 40);
    BOOL v6 = v4 != v5;
  }
  while (v4 != v5);
  std::string::size_type v7 = &v2[10 * v6];
  uint64_t v8 = v7 - 10;
  std::vector<unsigned int>::size_type v9 = v7;
  if (v7 == v3) {
    goto LABEL_35;
  }
  do
  {
    *uint64_t v8 = *v9;
    unint64_t v10 = (_DWORD *)*((void *)v8 + 1);
    uint8x8_t v11 = (uint64_t *)*((void *)v9 + 1);
    std::vector<unsigned int>::pointer v12 = (uint64_t *)*((void *)v9 + 2);
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v11) >> 2);
    uint64_t v14 = *((void *)v8 + 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v14 - (uint64_t)v10) >> 2) < v13)
    {
      if (v10)
      {
        *((void *)v8 + 2) = v10;
        operator delete(v10);
        uint64_t v14 = 0;
        *((void *)v8 + 1) = 0;
        *((void *)v8 + 2) = 0;
        *((void *)v8 + 3) = 0;
      }
      if (v13 > 0x1555555555555555) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v14 >> 2);
      uint64_t v16 = 2 * v15;
      if (2 * v15 <= v13) {
        uint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v11) >> 2);
      }
      if (v15 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v17 = 0x1555555555555555;
      }
      else {
        unint64_t v17 = v16;
      }
      std::vector<AudioObjectPropertyAddress>::__vallocate[abi:ne180100]((void *)v8 + 1, v17);
      unint64_t v10 = (_DWORD *)*((void *)v8 + 2);
      int v18 = (char *)v10;
      if (v11 != v12)
      {
        int v18 = (char *)*((void *)v8 + 2);
        do
        {
          uint64_t v19 = *v11;
          *((_DWORD *)v18 + 2) = *((_DWORD *)v11 + 2);
          *(void *)int v18 = v19;
          v18 += 12;
          uint8x8_t v11 = (uint64_t *)((char *)v11 + 12);
        }
        while (v11 != v12);
      }
      goto LABEL_17;
    }
    uint64_t v21 = (_DWORD *)*((void *)v8 + 2);
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (v21 - v10);
    if (v22 >= v13)
    {
      int v18 = (char *)*((void *)v8 + 1);
      while (v11 != v12)
      {
        uint64_t v29 = *v11;
        *((_DWORD *)v18 + 2) = *((_DWORD *)v11 + 2);
        *(void *)int v18 = v29;
        v18 += 12;
        uint8x8_t v11 = (uint64_t *)((char *)v11 + 12);
      }
LABEL_17:
      int64_t v20 = v18 - (char *)v10;
      goto LABEL_27;
    }
    if (v21 != v10)
    {
      uint64_t v23 = 4 * (v21 - v10);
      size_t v24 = (uint64_t *)*((void *)v9 + 1);
      do
      {
        uint64_t v25 = *v24;
        uint64_t v10[2] = *((_DWORD *)v24 + 2);
        *(void *)unint64_t v10 = v25;
        v10 += 3;
        size_t v24 = (uint64_t *)((char *)v24 + 12);
        v23 -= 12;
      }
      while (v23);
      unint64_t v10 = (_DWORD *)*((void *)v8 + 2);
    }
    uint8x8_t v26 = (uint64_t *)((char *)v11 + 12 * v22);
    uint64_t v27 = (char *)v10;
    if (v26 != v12)
    {
      uint64_t v27 = (char *)v10;
      do
      {
        uint64_t v28 = *v26;
        *((_DWORD *)v27 + 2) = *((_DWORD *)v26 + 2);
        *(void *)uint64_t v27 = v28;
        v27 += 12;
        uint8x8_t v26 = (uint64_t *)((char *)v26 + 12);
      }
      while (v26 != v12);
    }
    int64_t v20 = v27 - (char *)v10;
LABEL_27:
    *((void *)v8 + 2) = (char *)v10 + v20;
    *((void *)v8 + 4) = *((void *)v9 + 4);
    v9 += 10;
    v8 += 10;
  }
  while (v9 != v3);
  uint64_t v3 = *(int **)(v1 + 152);
LABEL_35:
  while (v3 != v8)
  {
    uint64_t v30 = (void *)*((void *)v3 - 4);
    if (v30)
    {
      *((void *)v3 - 3) = v30;
      operator delete(v30);
    }
    v3 -= 10;
  }
  *(void *)(v1 + 152) = v8;
}

void HALS_Client::SetNonMixableFormat(HALS_Client *this, int a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  uint64_t v3[2] = ___ZN11HALS_Client19SetNonMixableFormatEj_block_invoke;
  v3[3] = &__block_descriptor_tmp_14_2443;
  v3[4] = this;
  int v4 = a2;
  unint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Client *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

void ___ZN11HALS_Client19SetNonMixableFormatEj_block_invoke(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  int v4 = (char *)v2[22];
  unint64_t v3 = v2[23];
  if ((unint64_t)v4 >= v3)
  {
    BOOL v6 = (char *)v2[21];
    uint64_t v7 = (v4 - v6) >> 2;
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 62) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v3 - (void)v6;
    if (v9 >> 1 > v8) {
      unint64_t v8 = v9 >> 1;
    }
    BOOL v10 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v10) {
      unint64_t v11 = v8;
    }
    if (v11)
    {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v11);
      BOOL v6 = (char *)v2[21];
      int v4 = (char *)v2[22];
    }
    else
    {
      uint64_t v12 = 0;
    }
    unint64_t v13 = (_DWORD *)(v11 + 4 * v7);
    unint64_t v14 = v11 + 4 * v12;
    *unint64_t v13 = *(_DWORD *)(a1 + 40);
    int v5 = v13 + 1;
    while (v4 != v6)
    {
      int v15 = *((_DWORD *)v4 - 1);
      v4 -= 4;
      *--unint64_t v13 = v15;
    }
    v2[21] = v13;
    v2[22] = v5;
    v2[23] = v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(_DWORD *)int v4 = *(_DWORD *)(a1 + 40);
    int v5 = v4 + 4;
  }
  v2[22] = v5;
}

void ___ZNK11HALS_Client33SendSleepingIsAllowedNotificationEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 32));
  unint64_t v3 = (HALS_ObjectMap *)v1;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 40))(v1);
  }
  HALS_ObjectMap::ReleaseObject(v3, v2);
}

void sub_1BABB1C5C(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t ___ZN11HALS_Client46UpdateStartCountAndMaybeNotifyProcessIsRunningEjb_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  int v2 = *(_DWORD *)(v1 + 320);
  if (*(unsigned char *)(result + 48)) {
    unsigned int v3 = v2 + 1;
  }
  else {
    unsigned int v3 = v2 - 1;
  }
  *(_DWORD *)(v1 + 320) = v3;
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3 < 2;
  return result;
}

void HALS_Client::SendIsRunningSomewhereElse(_DWORD *a1, int a2, uint64_t a3)
{
  int v3 = a1[4];
  v10[0] = 0;
  v10[1] = v10;
  uint64_t v10[2] = 0x2000000000;
  int v11 = 0;
  v8[0] = 0;
  v8[1] = v8;
  _OWORD v8[2] = 0x2000000000;
  int v9 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZN11HALS_Client26SendIsRunningSomewhereElseEjRKNSt3__16vectorI26RunningIOContextClientInfoNS0_9allocatorIS2_EEEE_block_invoke;
  v5[3] = &unk_1E6230C38;
  void v5[6] = a1;
  v5[7] = a3;
  int v6 = a2;
  int v7 = v3;
  v5[4] = v8;
  v5[5] = v10;
  int v4 = (HALB_Mutex *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v5);
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(v10, 8);
}

void sub_1BABB1D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_Client26SendIsRunningSomewhereElseEjRKNSt3__16vectorI26RunningIOContextClientInfoNS0_9allocatorIS2_EEEE_block_invoke(uint64_t a1)
{
  int v2 = *(void **)(a1 + 48);
  int v4 = (char *)v2[37];
  int v3 = (char *)v2[38];
  uint64_t v5 = v3 - v4;
  if (v3 == v4)
  {
    int v7 = (char *)v2[38];
  }
  else
  {
    unint64_t v6 = v5 >> 3;
    int v7 = (char *)v2[37];
    do
    {
      unint64_t v8 = v6 >> 1;
      int v9 = &v7[8 * (v6 >> 1)];
      unsigned int v11 = *(_DWORD *)v9;
      BOOL v10 = v9 + 8;
      v6 += ~(v6 >> 1);
      if (v11 < *(_DWORD *)(a1 + 64)) {
        int v7 = v10;
      }
      else {
        unint64_t v6 = v8;
      }
    }
    while (v6);
  }
  if (v3 == v7)
  {
    unsigned int v12 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    unsigned int v12 = *(_DWORD *)(a1 + 64);
    unint64_t v13 = v7;
    if (*(_DWORD *)v7 == v12) {
      goto LABEL_50;
    }
  }
  uint64_t v14 = v7 - v4;
  uint64_t v15 = (v7 - v4) >> 3;
  unint64_t v13 = &v4[(v7 - v4) & 0xFFFFFFFFFFFFFFF8];
  unint64_t v16 = v2[39];
  if ((unint64_t)v3 >= v16)
  {
    unint64_t v21 = (v5 >> 3) + 1;
    if (v21 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v22 = v16 - (void)v4;
    unint64_t v23 = (uint64_t)(v16 - (void)v4) >> 2;
    if (v23 > v21) {
      unint64_t v21 = v23;
    }
    if (v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v21;
    }
    if (v24)
    {
      uint8x8_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v24);
    }
    else
    {
      uint8x8_t v26 = 0;
      uint64_t v25 = 0;
    }
    uint64_t v30 = &v26[8 * v15];
    unint64_t v31 = &v26[8 * v25];
    if (v15 == v25)
    {
      if (v14 < 1)
      {
        if (v7 == v4) {
          unint64_t v33 = 1;
        }
        else {
          unint64_t v33 = v14 >> 2;
        }
        int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v33);
        uint64_t v30 = &v34[8 * (v33 >> 2)];
        unint64_t v31 = &v34[8 * v35];
        if (v26)
        {
          int v36 = v26;
          mach_port_t v37 = v31;
          operator delete(v36);
          unint64_t v31 = v37;
        }
      }
      else
      {
        unint64_t v32 = v15 + 2;
        if (v15 >= -1) {
          unint64_t v32 = v15 + 1;
        }
        v30 -= 8 * (v32 >> 1);
      }
    }
    *(void *)uint64_t v30 = v12;
    int v38 = v30 + 8;
    std::string::size_type v39 = (char *)v2[37];
    int v40 = v30;
    if (v39 != v13)
    {
      __int16 v41 = v13;
      int v40 = v30;
      do
      {
        uint64_t v42 = *((void *)v41 - 1);
        v41 -= 8;
        *((void *)v40 - 1) = v42;
        v40 -= 8;
      }
      while (v41 != v39);
    }
    for (uint64_t i = (char *)v2[38]; v13 != i; ++v38)
    {
      uint64_t v44 = *(void *)v13;
      v13 += 8;
      void *v38 = v44;
    }
    uint64_t v45 = (void *)v2[37];
    v2[37] = v40;
    v2[38] = v38;
    v2[39] = v31;
    if (v45) {
      operator delete(v45);
    }
    unint64_t v13 = v30;
  }
  else if (v13 == v3)
  {
    *(void *)int v3 = v12;
    v2[38] = v3 + 8;
    unint64_t v13 = v3;
  }
  else
  {
    unint64_t v17 = v13 + 8;
    int v18 = v3 - 8;
    uint64_t v19 = (void *)v2[38];
    while (v18 < v3)
    {
      uint64_t v20 = *(void *)v18;
      v18 += 8;
      *v19++ = v20;
    }
    v2[38] = v19;
    if (v3 != v17)
    {
      uint64_t v27 = 8 * ((v3 - v17) >> 3);
      uint64_t v28 = v3 - 4;
      uint64_t v29 = (uint64_t)&v4[8 * v15 - 4];
      do
      {
        *((_DWORD *)v28 - 1) = *(_DWORD *)(v29 + v27 - 4);
        *(_DWORD *)uint64_t v28 = *(_DWORD *)(v29 + v27);
        v28 -= 8;
        v27 -= 8;
      }
      while (v27);
    }
    *(_DWORD *)unint64_t v13 = v12;
    *((_DWORD *)v13 + 1) = 0;
  }
LABEL_50:
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *((_DWORD *)v13 + 1);
  Float64 v46 = *(unsigned __int8 ***)(a1 + 56);
  long long v47 = *v46;
  mach_port_t v48 = v46[1];
  if (*v46 == v48)
  {
    int v49 = 0;
  }
  else
  {
    int v49 = 0;
    do
    {
      BOOL v52 = *((_DWORD *)v47 + 2) == *(_DWORD *)(a1 + 68);
      int v51 = *v47;
      v47 += 12;
      int v50 = v51;
      BOOL v52 = v52 || v50 == 0;
      if (!v52) {
        ++v49;
      }
    }
    while (v47 != v48);
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v49;
  *((_DWORD *)v13 + 1) = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void sub_1BABB2088(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN11HALS_Client23DevicesStartedByContextERKNSt3__16vectorIjNS0_9allocatorIjEEEES6__block_invoke(uint64_t a1)
{
  int v2 = *(uint64_t ***)(a1 + 32);
  if (HALS_Client::ActiveDeviceList::TryToAddToActiveDeviceList(v2 + 44, **(unsigned int ***)(a1 + 40), *(unsigned int **)(*(void *)(a1 + 40) + 8)))HALS_Client::NotifyClientsAboutInputDeviceListChange((HALS_Client *)v2); {
  if (HALS_Client::ActiveDeviceList::TryToAddToActiveDeviceList(v2 + 41, **(unsigned int ***)(a1 + 48), *(unsigned int **)(*(void *)(a1 + 48) + 8)))HALS_Client::NotifyClientsAboutOutputDeviceListChange((HALS_Client *)v2);
  }
}

void sub_1BABB20F8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_Client::ActiveDeviceList::TryToAddToActiveDeviceList(uint64_t **a1, unsigned int *a2, unsigned int *a3)
{
  if (a2 == a3)
  {
    char v6 = 0;
  }
  else
  {
    int v4 = a2;
    char v6 = 0;
    int v7 = a1[1];
    do
    {
      uint64_t v8 = *v4;
      int v9 = *a1;
      BOOL v10 = *a1;
      if (*a1 == v7)
      {
LABEL_6:
        unint64_t v11 = (unint64_t)a1[2];
        if ((unint64_t)v7 >= v11)
        {
          uint64_t v13 = v7 - v9;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v15 = v11 - (void)v9;
          if (v15 >> 2 > v14) {
            unint64_t v14 = v15 >> 2;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            if (v16 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v17 = (char *)operator new(8 * v16);
          }
          else
          {
            unint64_t v17 = 0;
          }
          int v18 = (uint64_t *)&v17[8 * v13];
          *int v18 = v8 | 0x100000000;
          unsigned int v12 = v18 + 1;
          if (v9 != v7)
          {
            do
            {
              uint64_t v19 = *--v7;
              *--int v18 = v19;
            }
            while (v7 != v9);
            int v7 = *a1;
          }
          *a1 = v18;
          a1[1] = v12;
          a1[2] = (uint64_t *)&v17[8 * v16];
          if (v7) {
            operator delete(v7);
          }
        }
        else
        {
          *int v7 = v8 | 0x100000000;
          unsigned int v12 = v7 + 1;
        }
        a1[1] = v12;
        char v6 = 1;
        int v7 = v12;
      }
      else
      {
        while (v8 != *(_DWORD *)v10)
        {
          if (++v10 == v7) {
            goto LABEL_6;
          }
        }
      }
      ++v4;
    }
    while (v4 != a3);
  }
  return v6 & 1;
}

void HALS_Client::NotifyClientsAboutInputDeviceListChange(HALS_Client *this)
{
  v3[0] = 0;
  v3[1] = 0;
  HALS_System::GetInstance(&v4, 0, v3);
  if (v4) {
    HALS_System::ProcessPropertyChanged(v4, *((_DWORD *)this + 4), 1885632035, 1768845428, 0);
  }
  int v2 = v5;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1BABB2304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void HALS_Client::NotifyClientsAboutOutputDeviceListChange(HALS_Client *this)
{
  v3[0] = 0;
  v3[1] = 0;
  HALS_System::GetInstance(&v4, 0, v3);
  if (v4) {
    HALS_System::ProcessPropertyChanged(v4, *((_DWORD *)this + 4), 1885632035, 1869968496, 0);
  }
  int v2 = v5;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1BABB23A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN11HALS_Client23DevicesStoppedByContextERKNSt3__16vectorIjNS0_9allocatorIjEEEES6__block_invoke(uint64_t a1)
{
  int v2 = *(char ***)(a1 + 32);
  if (HALS_Client::ActiveDeviceList::TryToRemoveFromActiveDeviceList(v2 + 44, **(int ***)(a1 + 40), *(int **)(*(void *)(a1 + 40) + 8)))HALS_Client::NotifyClientsAboutInputDeviceListChange((HALS_Client *)v2); {
  if (HALS_Client::ActiveDeviceList::TryToRemoveFromActiveDeviceList(v2 + 41, **(int ***)(a1 + 48), *(int **)(*(void *)(a1 + 48) + 8)))HALS_Client::NotifyClientsAboutOutputDeviceListChange((HALS_Client *)v2);
  }
}

void sub_1BABB2414(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_Client::ActiveDeviceList::TryToRemoveFromActiveDeviceList(char **a1, int *a2, int *a3)
{
  if (a2 == a3)
  {
    char v6 = 0;
  }
  else
  {
    int v4 = a2;
    char v6 = 0;
    int v7 = *a1;
    uint64_t v8 = a1[1];
    do
    {
      if (v7 == v8)
      {
        uint64_t v8 = v7;
      }
      else
      {
        int v9 = *v4;
        BOOL v10 = v7;
        while (1)
        {
          if (v9 == *(_DWORD *)v10)
          {
            int v11 = *((_DWORD *)v10 + 1) - 1;
            *((_DWORD *)v10 + 1) = v11;
            if (!v11) {
              break;
            }
          }
          v10 += 8;
          if (v10 == v8) {
            goto LABEL_13;
          }
        }
        int64_t v12 = v8 - (v10 + 8);
        if (v8 != v10 + 8)
        {
          memmove(v10, v10 + 8, v8 - (v10 + 8));
          int v7 = *a1;
        }
        uint64_t v8 = &v10[v12];
        a1[1] = &v10[v12];
        char v6 = 1;
      }
LABEL_13:
      ++v4;
    }
    while (v4 != a3);
  }
  return v6 & 1;
}

void sub_1BABB2804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

BOOL Symbol<tailspin_config * (*)(void)>::operator BOOL()
{
  return weak_tailspin_config_create_with_current_state != 0;
}

BOOL Symbol<void (*)(tailspin_config *)>::operator BOOL()
{
  return weak_tailspin_config_free != 0;
}

id get_TSPDumpOptions_ReasonString(void)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&get_TSPDumpOptions_ReasonString(void)::once_flag, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    int v3 = &v4;
    std::__call_once(&get_TSPDumpOptions_ReasonString(void)::once_flag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<get_TSPDumpOptions_ReasonString(void)::$_0 &&>>);
  }
  unint64_t v0 = (void *)get_TSPDumpOptions_ReasonString(void)::s_symbol;

  return v0;
}

void Symbol<BOOL (*)(int,NSDictionary *)>::initialize()
{
  unint64_t v0 = &weak_tailspin_dump_output_with_options_sync;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1E9F78568, memory_order_acquire) != -1)
  {
    char v2 = &v0;
    uint64_t v1 = &v2;
    std::__call_once(&qword_1E9F78568, &v1, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<BOOL (*)(int,NSDictionary *)>::initialize(void)::{lambda(void)#1} &&>>);
  }
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<BOOL (*)(int,NSDictionary *)>::initialize(void)::{lambda(void)#1} &&>>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  char v2 = *(void **)v1;
  double result = get_address_for_symbol(*(const char **)(*(void *)v1 + 8));
  void *v2 = result;
  return result;
}

void *get_address_for_symbol(const char *a1)
{
  double result = dlopen("/usr/lib/libtailspin.dylib", 1);
  if (result) {
    return dlsym(result, a1);
  }
  return result;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<get_TSPDumpOptions_ReasonString(void)::$_0 &&>>()
{
  unint64_t v0 = *(void **)get_address_for_symbol("TSPDumpOptions_ReasonString");

  objc_storeStrong((id *)&get_TSPDumpOptions_ReasonString(void)::s_symbol, v0);
}

void Symbol<void (*)(tailspin_config *)>::initialize(uint64_t a1)
{
  char v2 = (std::once_flag::_State_type *)(a1 + 16);
  uint64_t v3 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    uint64_t v5 = &v3;
    int v4 = &v5;
    std::__call_once(v2, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *)>::initialize(void)::{lambda(void)#1} &&>>);
  }
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *)>::initialize(void)::{lambda(void)#1} &&>>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  char v2 = *(void **)v1;
  double result = get_address_for_symbol(*(const char **)(*(void *)v1 + 8));
  void *v2 = result;
  return result;
}

void Symbol<BOOL (*)(tailspin_config *)>::initialize(uint64_t a1)
{
  char v2 = (std::once_flag::_State_type *)(a1 + 16);
  uint64_t v3 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)v2, memory_order_acquire) != -1)
  {
    uint64_t v5 = &v3;
    int v4 = &v5;
    std::__call_once(v2, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<BOOL (*)(tailspin_config *)>::initialize(void)::{lambda(void)#1} &&>>);
  }
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<BOOL (*)(tailspin_config *)>::initialize(void)::{lambda(void)#1} &&>>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  char v2 = *(void **)v1;
  double result = get_address_for_symbol(*(const char **)(*(void *)v1 + 8));
  void *v2 = result;
  return result;
}

void Symbol<tailspin_config * (*)(void)>::initialize()
{
  unint64_t v0 = &weak_tailspin_config_create_with_current_state;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1E9F78478, memory_order_acquire) != -1)
  {
    char v2 = &v0;
    uint64_t v1 = &v2;
    std::__call_once(&qword_1E9F78478, &v1, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<tailspin_config * (*)(void)>::initialize(void)::{lambda(void)#1} &&>>);
  }
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<tailspin_config * (*)(void)>::initialize(void)::{lambda(void)#1} &&>>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  char v2 = *(void **)v1;
  double result = get_address_for_symbol(*(const char **)(*(void *)v1 + 8));
  void *v2 = result;
  return result;
}

void sub_1BABB3464(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void Symbol<void (*)(tailspin_config *,unsigned long long)>::operator()<tailspin_config *&,int>(void (**a1)(void, void), void *a2, int *a3)
{
  char v6 = (std::once_flag::_State_type *)(a1 + 2);
  int v7 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)v6, memory_order_acquire) != -1)
  {
    int v9 = &v7;
    uint64_t v8 = &v9;
    std::__call_once(v6, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *,unsigned long long)>::initialize(void)::{lambda(void)#1} &&>>);
  }
  if (*a1) {
    (*a1)(*a2, *a3);
  }
}

void Symbol<void (*)(tailspin_config *,unsigned char,unsigned char,BOOL)>::operator()<tailspin_config *&,int,int,BOOL>(void *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v8 = &weak_tailspin_kdbg_filter_subclass_set;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1E9F784D8, memory_order_acquire) != -1)
  {
    BOOL v10 = &v8;
    int v9 = &v10;
    std::__call_once(&qword_1E9F784D8, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *,unsigned char,unsigned char,BOOL)>::initialize(void)::{lambda(void)#1} &&>>);
  }
  if (weak_tailspin_kdbg_filter_subclass_set) {
    weak_tailspin_kdbg_filter_subclass_set(*a1, *a2, *a3, *a4);
  }
}

void Symbol<void (*)(tailspin_config *)>::operator()<tailspin_config *&>(void (**a1)(void), void *a2)
{
  if (*a1) {
    (*a1)(*a2);
  }
}

void Symbol<void (*)(tailspin_config *,unsigned char,BOOL)>::operator()<tailspin_config *&,int,BOOL>(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  char v6 = &weak_tailspin_kdbg_filter_class_set;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1E9F78520, memory_order_acquire) != -1)
  {
    uint64_t v8 = &v6;
    int v7 = &v8;
    std::__call_once(&qword_1E9F78520, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *,unsigned char,BOOL)>::initialize(void)::{lambda(void)#1} &&>>);
  }
  if (weak_tailspin_kdbg_filter_class_set) {
    weak_tailspin_kdbg_filter_class_set(*a1, *a2, *a3);
  }
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *,unsigned char,BOOL)>::initialize(void)::{lambda(void)#1} &&>>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  char v2 = *(void **)v1;
  double result = get_address_for_symbol(*(const char **)(*(void *)v1 + 8));
  void *v2 = result;
  return result;
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *,int,BOOL)>::initialize(void)::{lambda(void)#1} &&>>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  char v2 = *(void **)v1;
  double result = get_address_for_symbol(*(const char **)(*(void *)v1 + 8));
  void *v2 = result;
  return result;
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *,unsigned char,unsigned char,BOOL)>::initialize(void)::{lambda(void)#1} &&>>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  char v2 = *(void **)v1;
  double result = get_address_for_symbol(*(const char **)(*(void *)v1 + 8));
  void *v2 = result;
  return result;
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *,unsigned long)>::initialize(void)::{lambda(void)#1} &&>>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  char v2 = *(void **)v1;
  double result = get_address_for_symbol(*(const char **)(*(void *)v1 + 8));
  void *v2 = result;
  return result;
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *,unsigned long long)>::initialize(void)::{lambda(void)#1} &&>>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  char v2 = *(void **)v1;
  double result = get_address_for_symbol(*(const char **)(*(void *)v1 + 8));
  void *v2 = result;
  return result;
}

void Symbol<void (*)(tailspin_config *,BOOL)>::initialize()
{
  unint64_t v0 = &weak_tailspin_enabled_set;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1E9F78448, memory_order_acquire) != -1)
  {
    char v2 = &v0;
    uint64_t v1 = &v2;
    std::__call_once(&qword_1E9F78448, &v1, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *,BOOL)>::initialize(void)::{lambda(void)#1} &&>>);
  }
}

void *std::__call_once_proxy[abi:ne180100]<std::tuple<Symbol<void (*)(tailspin_config *,BOOL)>::initialize(void)::{lambda(void)#1} &&>>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  char v2 = *(void **)v1;
  double result = get_address_for_symbol(*(const char **)(*(void *)v1 + 8));
  void *v2 = result;
  return result;
}

void sub_1BABB3B4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id get_TSPDumpOptions_MaxTimestamp(void)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&get_TSPDumpOptions_MaxTimestamp(void)::once_flag, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&get_TSPDumpOptions_MaxTimestamp(void)::once_flag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<get_TSPDumpOptions_MaxTimestamp(void)::$_0 &&>>);
  }
  unint64_t v0 = (void *)get_TSPDumpOptions_MaxTimestamp(void)::s_symbol;

  return v0;
}

id get_TSPDumpOptions_MinTimestamp(void)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&get_TSPDumpOptions_MinTimestamp(void)::once_flag, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&get_TSPDumpOptions_MinTimestamp(void)::once_flag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<get_TSPDumpOptions_MinTimestamp(void)::$_0 &&>>);
  }
  unint64_t v0 = (void *)get_TSPDumpOptions_MinTimestamp(void)::s_symbol;

  return v0;
}

id get_TSPDumpOptions_MinTraceBufferDurationSec(void)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&get_TSPDumpOptions_MinTraceBufferDurationSec(void)::once_flag, memory_order_acquire) != -1)
  {
    int v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&get_TSPDumpOptions_MinTraceBufferDurationSec(void)::once_flag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<get_TSPDumpOptions_MinTraceBufferDurationSec(void)::$_0 &&>>);
  }
  unint64_t v0 = (void *)get_TSPDumpOptions_MinTraceBufferDurationSec(void)::s_symbol;

  return v0;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<get_TSPDumpOptions_MinTraceBufferDurationSec(void)::$_0 &&>>()
{
  unint64_t v0 = *(void **)get_address_for_symbol("TSPDumpOptions_MinTraceBufferDurationSec");

  objc_storeStrong((id *)&get_TSPDumpOptions_MinTraceBufferDurationSec(void)::s_symbol, v0);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<get_TSPDumpOptions_MinTimestamp(void)::$_0 &&>>()
{
  unint64_t v0 = *(void **)get_address_for_symbol("TSPDumpOptions_MinTimestamp");

  objc_storeStrong((id *)&get_TSPDumpOptions_MinTimestamp(void)::s_symbol, v0);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<get_TSPDumpOptions_MaxTimestamp(void)::$_0 &&>>()
{
  unint64_t v0 = *(void **)get_address_for_symbol("TSPDumpOptions_MaxTimestamp");

  objc_storeStrong((id *)&get_TSPDumpOptions_MaxTimestamp(void)::s_symbol, v0);
}

void sub_1BABB3F50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN13HALB_Tailspin17DumpTailspinAsyncEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = __udivti3();
  if (v3 >= v4) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = -v5;
  }
  if (v6 >= 5000000000)
  {
    *(void *)(v2 + 8) = v3;
    int v7 = (void *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      int v7 = (void *)*v7;
    }
    uint64_t v8 = *(void *)(a1 + 40);
    int v9 = [NSString stringWithUTF8String:v7];
    +[HALB_TailspinImpl dumpTailspinSync:v8 forReason:v9];
    if (v12)
    {
      if (v11 < 0) {
        operator delete(__p);
      }
    }
  }
}

void sub_1BABB40A4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BABB4090);
}

void __destroy_helper_block_ea8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

void __copy_helper_block_ea8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  uint64_t v2 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 48);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void System_Core_Graph_Host::simple_property_changed_async(System_Core_Graph_Host *this, uint64_t a2, const AMCP::Address *a3, const AMCP::Thing *a4)
{
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)uint64_t v20 = 0u;
  int v21 = 1065353216;
  uint64_t v8 = *(unsigned int *)a3;
  uint64_t v9 = *((unsigned __int8 *)a3 + 7);
  int v10 = *((_DWORD *)a3 + 2);
  char v11 = operator new(0x48uLL);
  unint64_t v12 = (v9 << 24) | (v8 << 32) | *(void *)&v10 & 0xFFFFFFLL;
  void *v11 = 0;
  v11[1] = v12;
  _OWORD v11[2] = *(void *)a3;
  *((_DWORD *)v11 + 6) = v10;
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  v11[8] = 0;
  uint64_t v13 = (void (*)(uint64_t, const AMCP::Thing *, void *, void))*((void *)a4 + 4);
  if (v13) {
    v13(1, a4, v11 + 4, 0);
  }
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)__p, 1uLL);
  unint64_t v14 = (unint64_t)__p[1];
  uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    if ((void *)v12 >= __p[1]) {
      v12 %= (unint64_t)__p[1];
    }
  }
  else
  {
    v12 &= (unint64_t)__p[1] - 1;
  }
  unint64_t v16 = __p[0];
  unint64_t v17 = (void *)*((void *)__p[0] + v12);
  if (v17)
  {
    void *v11 = *v17;
  }
  else
  {
    void *v11 = v20[0];
    v20[0] = v11;
    v16[v12] = v20;
    if (!*v11) {
      goto LABEL_16;
    }
    unint64_t v18 = *(void *)(*v11 + 8);
    if (v15.u32[0] > 1uLL)
    {
      if (v18 >= v14) {
        v18 %= v14;
      }
    }
    else
    {
      v18 &= v14 - 1;
    }
    unint64_t v17 = (char *)__p[0] + 8 * v18;
  }
  *unint64_t v17 = v11;
LABEL_16:
  ++v20[1];
  AMCP::Core::Conductor::properties_changed_async(*(void *)(*((void *)this + 1) + 32), a2, (uint64_t)__p);
}

void sub_1BABB42AC(void *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Address,AMCP::Thing>,void *>>>::operator()[abi:ne180100](0, v1);
  __clang_call_terminate(a1);
}

void AMCP::Core::Conductor::properties_changed_async(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[40] = *MEMORY[0x1E4F143B8];
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v7, *(dispatch_object_t *)(a1 + 352));
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::unordered_map((uint64_t)&__p, a3);
  operator new();
}

void sub_1BABB4400(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    unint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t applesauce::dispatch::v1::async<AMCP::Core::Conductor::properties_changed_async(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::{lambda(void)#1}>(dispatch_queue_s *,AMCP::Core::Conductor::properties_changed_async(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::{lambda(void)#1} &&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    long long v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      unint64_t v4 = v3;
      uint64_t v5 = *(void *)a1;
      if (!*(void *)a1)
      {
LABEL_44:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        goto LABEL_45;
      }
      int v6 = *(_DWORD *)(a1 + 16);
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v62, "com.apple.coreaudio", "AMCP");
      int v8 = *((_DWORD *)v62[0] + 4);
      switch(v8)
      {
        case 3:
          AMCP::Log::Scope_Registry::get(v7);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v52, "com.apple.coreaudio", "AMCP");
          uint64_t v13 = (caulk::concurrent::messenger *)*((void *)v52[0] + 1);
          unint64_t v14 = pthread_self();
          mach_port_t v15 = pthread_mach_thread_np(v14);
          uint64_t v16 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
          *(_DWORD *)(v16 + 16) = 0;
          *(unsigned char *)(v16 + 20) = 1;
          *(_DWORD *)(v16 + 24) = v15;
          *(void *)(v16 + 32) = "Conductor.cpp";
          *(_DWORD *)(v16 + 40) = 464;
          *(_DWORD *)(v16 + 44) = v6;
          *(void *)uint64_t v16 = &unk_1F1489400;
          *(void *)(v16 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v13, (caulk::concurrent::message *)v16);
          break;
        case 2:
          AMCP::Log::Scope_Registry::get(v7);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v52, "com.apple.coreaudio", "AMCP");
          unint64_t v17 = (caulk::concurrent::messenger *)*((void *)v52[0] + 1);
          unint64_t v18 = pthread_self();
          mach_port_t v19 = pthread_mach_thread_np(v18);
          uint64_t v20 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
          *(_DWORD *)(v20 + 16) = 0;
          *(unsigned char *)(v20 + 20) = 2;
          *(_DWORD *)(v20 + 24) = v19;
          *(void *)(v20 + 32) = "Conductor.cpp";
          *(_DWORD *)(v20 + 40) = 464;
          *(_DWORD *)(v20 + 44) = v6;
          *(void *)uint64_t v20 = &unk_1F14893A8;
          *(void *)(v20 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v17, (caulk::concurrent::message *)v20);
          break;
        case 1:
          AMCP::Log::Scope_Registry::get(v7);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v52, "com.apple.coreaudio", "AMCP");
          uint64_t v9 = (caulk::concurrent::messenger *)*((void *)v52[0] + 1);
          int v10 = pthread_self();
          mach_port_t v11 = pthread_mach_thread_np(v10);
          uint64_t v12 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
          *(_DWORD *)(v12 + 16) = 0;
          *(unsigned char *)(v12 + 20) = 0;
          *(_DWORD *)(v12 + 24) = v11;
          *(void *)(v12 + 32) = "Conductor.cpp";
          *(_DWORD *)(v12 + 40) = 464;
          *(_DWORD *)(v12 + 44) = v6;
          *(void *)uint64_t v12 = &unk_1F1489350;
          *(void *)(v12 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v9, (caulk::concurrent::message *)v12);
          break;
        default:
          goto LABEL_12;
      }
      if (v52[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v52[1]);
      }
LABEL_12:
      if (v62[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v62[1]);
      }
      kdebug_trace();
      *(_OWORD *)BOOL v52 = 0u;
      *(_OWORD *)uint64_t v53 = 0u;
      int v54 = 1065353216;
      std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::unordered_map((uint64_t)v55, a1 + 24);
      *(_OWORD *)int v56 = 0u;
      *(_OWORD *)__int16 v57 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      int v58 = 1065353216;
      int v61 = 1065353216;
      std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node(0);
      std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node(0);
      std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node(0);
      LODWORD(v62[0]) = v6;
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>::__tuple_impl((uint64_t)&v62[1], (uint64_t)v52);
      memset(v50, 0, sizeof(v50));
      int v51 = 1065353216;
      std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>> const&>((uint64_t)v50, v62[0], v62);
      std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node(v69);
      int v21 = __p;
      std::string __p = 0;
      if (v21) {
        operator delete(v21);
      }
      std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node(v67);
      unint64_t v22 = v66;
      int64x2_t v66 = 0;
      if (v22) {
        operator delete(v22);
      }
      std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((void *)v65[2]);
      unint64_t v23 = v65[0];
      v65[0] = 0;
      if (v23) {
        operator delete(v23);
      }
      std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node(*((void **)&v63 + 1));
      unint64_t v24 = v62[1];
      v62[1] = 0;
      if (v24) {
        operator delete(v24);
      }
      long long v63 = 0u;
      long long v64 = 0u;
      *(_OWORD *)long long v62 = 0u;
      std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>::unordered_map((uint64_t)v65, (uint64_t)v50);
      AMCP::Core::Conductor::call_external_begin_config_change_observers(v5, 0, v6, 0, (uint64_t)v62);
      LODWORD(v48) = v6;
      LOBYTE(v46) = 0;
      AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_sync<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&>(v5 + 1136, (unsigned int *)&v48, &v48, (char *)&v46, (uint64_t)v62);
      LODWORD(v48) = v6;
      LOBYTE(v46) = 0;
      AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_sync<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&>(v5 + 1352, (unsigned int *)&v48, &v48, (char *)&v46, (uint64_t)v62);
      AMCP::Core::Conductor::call_external_end_config_change_observers(v5, v6, 0, (uint64_t)v62);
      uint64_t v25 = (AMCP::Log::Scope_Registry *)kdebug_trace();
      AMCP::Log::Scope_Registry::get(v25);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v48, "com.apple.coreaudio", "AMCP");
      int v27 = *(_DWORD *)(v48 + 16);
      switch(v27)
      {
        case 3:
          AMCP::Log::Scope_Registry::get(v26);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v46, "com.apple.coreaudio", "AMCP");
          unint64_t v32 = *(caulk::concurrent::messenger **)(v46 + 8);
          unint64_t v33 = pthread_self();
          mach_port_t v34 = pthread_mach_thread_np(v33);
          uint64_t v35 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
          *(_DWORD *)(v35 + 16) = 0;
          *(unsigned char *)(v35 + 20) = 1;
          *(_DWORD *)(v35 + 24) = v34;
          *(void *)(v35 + 32) = "Conductor.cpp";
          *(_DWORD *)(v35 + 40) = 487;
          *(_DWORD *)(v35 + 44) = v6;
          *(void *)uint64_t v35 = &unk_1F1489508;
          *(void *)(v35 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v32, (caulk::concurrent::message *)v35);
          break;
        case 2:
          AMCP::Log::Scope_Registry::get(v26);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v46, "com.apple.coreaudio", "AMCP");
          int v36 = *(caulk::concurrent::messenger **)(v46 + 8);
          mach_port_t v37 = pthread_self();
          mach_port_t v38 = pthread_mach_thread_np(v37);
          uint64_t v39 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
          *(_DWORD *)(v39 + 16) = 0;
          *(unsigned char *)(v39 + 20) = 2;
          *(_DWORD *)(v39 + 24) = v38;
          *(void *)(v39 + 32) = "Conductor.cpp";
          *(_DWORD *)(v39 + 40) = 487;
          *(_DWORD *)(v39 + 44) = v6;
          *(void *)uint64_t v39 = &unk_1F14894B0;
          *(void *)(v39 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v36, (caulk::concurrent::message *)v39);
          break;
        case 1:
          AMCP::Log::Scope_Registry::get(v26);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v46, "com.apple.coreaudio", "AMCP");
          uint64_t v28 = *(caulk::concurrent::messenger **)(v46 + 8);
          uint64_t v29 = pthread_self();
          mach_port_t v30 = pthread_mach_thread_np(v29);
          uint64_t v31 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
          *(_DWORD *)(v31 + 16) = 0;
          *(unsigned char *)(v31 + 20) = 0;
          *(_DWORD *)(v31 + 24) = v30;
          *(void *)(v31 + 32) = "Conductor.cpp";
          *(_DWORD *)(v31 + 40) = 487;
          *(_DWORD *)(v31 + 44) = v6;
          *(void *)uint64_t v31 = &unk_1F1489458;
          *(void *)(v31 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v28, (caulk::concurrent::message *)v31);
          break;
        default:
LABEL_30:
          if (v49) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v49);
          }
          std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::~__hash_table((uint64_t)v65);
          if (*((void *)&v63 + 1))
          {
            *(void *)&long long v64 = *((void *)&v63 + 1);
            operator delete(*((void **)&v63 + 1));
          }
          if (v62[0])
          {
            v62[1] = v62[0];
            operator delete(v62[0]);
          }
          std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::~__hash_table((uint64_t)v50);
          std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((void *)v60);
          int v40 = (void *)v59;
          *(void *)&long long v59 = 0;
          if (v40) {
            operator delete(v40);
          }
          std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((void *)v57[0]);
          __int16 v41 = v56[0];
          v56[0] = 0;
          if (v41) {
            operator delete(v41);
          }
          std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((void *)v55[2]);
          uint64_t v42 = v55[0];
          v55[0] = 0;
          if (v42) {
            operator delete(v42);
          }
          std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((void *)v53[0]);
          int v43 = v52[0];
          v52[0] = 0;
          if (v43) {
            operator delete(v43);
          }
          goto LABEL_44;
      }
      if (v47) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
      }
      goto LABEL_30;
    }
  }
LABEL_45:
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table(a1 + 24);
  uint64_t v44 = *(std::__shared_weak_count **)(a1 + 8);
  if (v44) {
    std::__shared_weak_count::__release_weak(v44);
  }
  return MEMORY[0x1C1859840](a1, 0x10A0C4071FF95D2);
}

void sub_1BABB4C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  if (a2)
  {
    if (__p) {
      operator delete(__p);
    }
    if (a39) {
      operator delete(a39);
    }
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void System_Core_Graph_Host::create_manifest(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

uint64_t System_Core_Graph_Host::get_current_power_state(System_Core_Graph_Host *this)
{
  return *(unsigned int *)(*(void *)(*((void *)this + 1) + 32) + 3064);
}

uint64_t System_Core_Graph_Host::get_node_proc_owner(System_Core_Graph_Host *this)
{
  return *(void *)(*((void *)this + 1) + 32) + 2656;
}

uint64_t System_Core_Graph_Host::get_broker(System_Core_Graph_Host *this)
{
  return *(void *)(*((void *)this + 1) + 16);
}

void System_Core_Graph_Host::~System_Core_Graph_Host(System_Core_Graph_Host *this)
{
  *(void *)this = &unk_1F1461FD8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F1461FD8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

double _ZNSt3__115allocate_sharedB8ne180100IN4AMCP4Core6BrokerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1)
{
  uint64_t v2 = (char *)operator new(0x1D8uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1F1485290;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 456) = 0u;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)(v2 + 24));
  *((void *)v2 + 30) = 0;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *((_DWORD *)v2 + 56) = 1065353216;
  *((_DWORD *)v2 + 58) = 16;
  *((void *)v2 + 31) = 0;
  *((void *)v2 + 32) = 0;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)(v2 + 264));
  double result = 0.0;
  *((_OWORD *)v2 + 27) = 0u;
  *((_OWORD *)v2 + 28) = 0u;
  *((_DWORD *)v2 + 116) = 1065353216;
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1BABB4E98(_Unwind_Exception *a1)
{
  int v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 248) = v6;
    operator delete(v6);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::~__hash_table(v3);
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 136));
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 88));
  std::mutex::~mutex(v2);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v7);
  _Unwind_Resume(a1);
}

void ___ZN10applesauce8dispatch2v19sync_implIZN4AMCP4Core11System_Core5startERKNSt3__16vectorINS_2CF9StringRefENS6_9allocatorIS9_EEEESE_E3__0EEvP16dispatch_queue_sOT_NS6_17integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(const void *****)(a1 + 32);
  uint64_t v2 = *v1;
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)int v51 = 0u;
  int v52 = 1065353216;
  LODWORD(v55) = 1;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v53, 0, (int *)&v55, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(void *)&v53[0] + 40), v53);
  if (*((void *)&v53[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v53[0] + 1));
  }
  LODWORD(v55) = 1634957683;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v53, 0, (int *)&v55, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(void *)&v53[0] + 40), v53);
  if (*((void *)&v53[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v53[0] + 1));
  }
  LODWORD(v55) = 1634957683;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v53, 0, (int *)&v55, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(void *)&v53[0] + 40), v53);
  if (*((void *)&v53[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v53[0] + 1));
  }
  LODWORD(v55) = 0;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v53, 0, (int *)&v55, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(void *)&v53[0] + 40), v53);
  if (*((void *)&v53[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v53[0] + 1));
  }
  CFStringRef v3 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.CoreAudio", 25, 0x8000100u, 0);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v55 = 0x676C6F626F706C67;
  LODWORD(v56) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v53, (uint64_t)&v55, v3);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(void *)&v53[0] + 40), v53);
  if (*((void *)&v53[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v53[0] + 1));
  }
  CFRelease(v3);
  *(void *)&v53[0] = v2[2];
  DWORD2(v53[0]) = 1;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>(&v55, 0, v53, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v55 + 40), &v55);
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  CFStringRef v4 = CFStringCreateWithBytes(0, (const UInt8 *)"MCP System", 10, 0x8000100u, 0);
  if (!v4)
  {
    int v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v40, "Could not construct");
    __cxa_throw(v40, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v55 = 0x676C6F626C6E616DLL;
  LODWORD(v56) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v53, (uint64_t)&v55, v4);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(void *)&v53[0] + 40), v53);
  if (*((void *)&v53[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v53[0] + 1));
  }
  CFRelease(v4);
  *(void *)&v53[0] = v2[2];
  *((void *)&v53[0] + 1) = 0x61706C6700000001;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>(&v55, 0, v53, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v55 + 40), &v55);
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  *(void *)&v53[0] = v2[2];
  *(long long *)((char *)v53 + 8) = xmmword_1BAFF9450;
  _ZN4AMCP4Core19Operation_Utilities19make_typed_propertyINSt3__16vectorIjNS3_9allocatorIjEEEEZNS1_25make_object_list_propertyIjJEEENS3_10shared_ptrINS0_9OperationEEERNS0_6BrokerERKNS_7AddressESG_RKT_DpRKT0_EUlvE_EESB_SG_OT0_(&v55, 0, (uint64_t *)v53, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v55 + 40), &v55);
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  *(void *)&v53[0] = v2[2];
  *(long long *)((char *)v53 + 8) = xmmword_1BAFF9460;
  _ZN4AMCP4Core19Operation_Utilities19make_typed_propertyINSt3__16vectorIjNS3_9allocatorIjEEEEZNS1_25make_object_list_propertyIjJEEENS3_10shared_ptrINS0_9OperationEEERNS0_6BrokerERKNS_7AddressESG_RKT_DpRKT0_EUlvE_EESB_SG_OT0_(&v55, 0, (uint64_t *)v53, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v55 + 40), &v55);
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  *(void *)&v53[0] = v2[2];
  *(long long *)((char *)v53 + 8) = xmmword_1BAFF9470;
  _ZN4AMCP4Core19Operation_Utilities19make_typed_propertyINSt3__16vectorIjNS3_9allocatorIjEEEEZNS1_25make_object_list_propertyIjJEEENS3_10shared_ptrINS0_9OperationEEERNS0_6BrokerERKNS_7AddressESG_RKT_DpRKT0_EUlvE_EESB_SG_OT0_(&v55, 0, (uint64_t *)v53, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v55 + 40), &v55);
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  *(void *)&v53[0] = v2[2];
  *((void *)&v53[0] + 1) = 0x696F636E00000001;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>(&v55, 0, v53, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v55 + 40), &v55);
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  *(void *)&v53[0] = v2[2];
  *((void *)&v53[0] + 1) = 0x616E6F6400000001;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>(&v55, 0, v53, 1.5836601e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v55 + 40), &v55);
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v49, 0, 1.5836601e190);
  uint64_t v5 = v49;
  int v6 = (std::__shared_weak_count *)v2[4];
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>>();
  uint64_t v55 = (uint64_t)&unk_1F14622F8;
  int v56 = v6;
  __int16 v57 = &v55;
  memset(v53, 0, sizeof(v53));
  int v54 = 0;
  std::__function::__value_func<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>::__value_func[abi:ne180100]((uint64_t)v53, (uint64_t)&v55);
  int v54 = AMCP::Implementation::In_Place_Storage<std::function<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v5, v7, (AMCP *)v53);
  if (v54) {
    v54(0, (uint64_t)v53, 0, 0);
  }
  std::__function::__value_func<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>::~__value_func[abi:ne180100](&v55);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v5 + 40), &v49);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v53, 0, 1.5836601e190);
  int v8 = (std::__shared_weak_count *)*((void *)&v49 + 1);
  __int16 v41 = (std::__shared_weak_count *)*((void *)&v53[0] + 1);
  long long v49 = v53[0];
  uint64_t v9 = *(void *)&v53[0];
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  int v10 = (std::__shared_weak_count *)v2[4];
  unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(applesauce::CF::StringRef)>>();
  uint64_t v55 = (uint64_t)&unk_1F1462388;
  int v56 = v10;
  __int16 v57 = &v55;
  memset(v53, 0, sizeof(v53));
  int v54 = 0;
  std::__function::__value_func<BOOL ()(applesauce::CF::StringRef)>::__value_func[abi:ne180100]((uint64_t)v53, (uint64_t)&v55);
  int v54 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(applesauce::CF::StringRef)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v9, v11, (AMCP *)v53);
  if (v54) {
    v54(0, (uint64_t)v53, 0, 0);
  }
  std::__function::__value_func<BOOL ()(applesauce::CF::StringRef)>::~__value_func[abi:ne180100](&v55);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v9 + 40), &v49);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v53, 0, 1.58366008e190);
  uint64_t v12 = v41;
  uint64_t v42 = (std::__shared_weak_count *)*((void *)&v53[0] + 1);
  long long v49 = v53[0];
  uint64_t v13 = *(void *)&v53[0];
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  unint64_t v14 = AMCP::Implementation::get_type_marker<std::function<std::optional<unsigned int> ()(applesauce::CF::StringRef)>>();
  uint64_t v55 = (uint64_t)&unk_1F1462418;
  int v56 = (std::__shared_weak_count *)v2;
  __int16 v57 = &v55;
  memset(v53, 0, sizeof(v53));
  int v54 = 0;
  std::__function::__value_func<std::optional<unsigned int> ()(applesauce::CF::StringRef)>::__value_func[abi:ne180100]((uint64_t)v53, (uint64_t)&v55);
  int v54 = AMCP::Implementation::In_Place_Storage<std::function<std::optional<unsigned int> ()(applesauce::CF::StringRef)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v13, v14, (AMCP *)v53);
  if (v54) {
    v54(0, (uint64_t)v53, 0, 0);
  }
  std::__function::__value_func<std::optional<unsigned int> ()(applesauce::CF::StringRef)>::~__value_func[abi:ne180100](&v55);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v13 + 40), &v49);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v53, 0, 1.58366008e190);
  mach_port_t v15 = v42;
  int v43 = (std::__shared_weak_count *)*((void *)&v53[0] + 1);
  long long v49 = v53[0];
  uint64_t v16 = *(void *)&v53[0];
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  unint64_t v17 = AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()(void)>>();
  uint64_t v55 = (uint64_t)&unk_1F14624A8;
  int v56 = (std::__shared_weak_count *)v2;
  __int16 v57 = &v55;
  memset(v53, 0, sizeof(v53));
  int v54 = 0;
  std::__function::__value_func<std::unordered_set<AMCP::Wire_Description> ()(void)>::__value_func[abi:ne180100]((uint64_t)v53, (uint64_t)&v55);
  int v54 = AMCP::Implementation::In_Place_Storage<std::function<std::unordered_set<AMCP::Wire_Description> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v16, v17, (AMCP *)v53);
  if (v54) {
    v54(0, (uint64_t)v53, 0, 0);
  }
  std::__function::__value_func<std::unordered_set<AMCP::Wire_Description> ()(void)>::~__value_func[abi:ne180100](&v55);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v16 + 40), &v49);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v53, 0, 1.58366008e190);
  unint64_t v18 = v43;
  uint64_t v44 = (std::__shared_weak_count *)*((void *)&v53[0] + 1);
  long long v49 = v53[0];
  uint64_t v19 = *(void *)&v53[0];
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  unint64_t v20 = AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()>>();
  uint64_t v55 = (uint64_t)&unk_1F1462538;
  int v56 = (std::__shared_weak_count *)v2;
  __int16 v57 = &v55;
  memset(v53, 0, sizeof(v53));
  int v54 = 0;
  std::__function::__value_func<std::unordered_set<AMCP::Wire_Description> ()>::__value_func[abi:ne180100]((uint64_t)v53, (uint64_t)&v55);
  int v54 = AMCP::Implementation::In_Place_Storage<std::function<std::unordered_set<AMCP::Wire_Description> ()>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v19, v20, (AMCP *)v53);
  if (v54) {
    v54(0, (uint64_t)v53, 0, 0);
  }
  std::__function::__value_func<std::unordered_set<AMCP::Wire_Description> ()>::~__value_func[abi:ne180100](&v55);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v19 + 40), &v49);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v53, 0, 1.58366012e190);
  int v21 = v44;
  uint64_t v45 = (std::__shared_weak_count *)*((void *)&v53[0] + 1);
  long long v49 = v53[0];
  uint64_t v22 = *(void *)&v53[0];
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  unint64_t v23 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>>();
  uint64_t v55 = (uint64_t)&unk_1F14625C8;
  int v56 = (std::__shared_weak_count *)v2;
  __int16 v57 = &v55;
  memset(v53, 0, sizeof(v53));
  int v54 = 0;
  std::__function::__value_func<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>::__value_func[abi:ne180100]((uint64_t)v53, (uint64_t)&v55);
  int v54 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v22, v23, (AMCP *)v53);
  if (v54) {
    v54(0, (uint64_t)v53, 0, 0);
  }
  std::__function::__value_func<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>::~__value_func[abi:ne180100](&v55);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v22 + 40), &v49);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v53, 0, 1.58366012e190);
  unint64_t v24 = v45;
  uint64_t v46 = (std::__shared_weak_count *)*((void *)&v53[0] + 1);
  long long v49 = v53[0];
  uint64_t v25 = *(void *)&v53[0];
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  unint64_t v26 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>>();
  uint64_t v55 = (uint64_t)&unk_1F1462658;
  int v56 = (std::__shared_weak_count *)v2;
  __int16 v57 = &v55;
  memset(v53, 0, sizeof(v53));
  int v54 = 0;
  std::__function::__value_func<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>::__value_func[abi:ne180100]((uint64_t)v53, (uint64_t)&v55);
  int v54 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v25, v26, (AMCP *)v53);
  if (v54) {
    v54(0, (uint64_t)v53, 0, 0);
  }
  std::__function::__value_func<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>::~__value_func[abi:ne180100](&v55);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v25 + 40), &v49);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v53, 0, 1.58366008e190);
  int v27 = v46;
  long long v47 = (std::__shared_weak_count *)*((void *)&v53[0] + 1);
  long long v49 = v53[0];
  uint64_t v28 = *(void *)&v53[0];
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  unint64_t v29 = AMCP::Implementation::get_type_marker<std::function<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>>();
  uint64_t v55 = (uint64_t)&unk_1F14626E8;
  int v56 = (std::__shared_weak_count *)v2;
  __int16 v57 = &v55;
  memset(v53, 0, sizeof(v53));
  int v54 = 0;
  std::__function::__value_func<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>::__value_func[abi:ne180100]((uint64_t)v53, (uint64_t)&v55);
  int v54 = AMCP::Implementation::In_Place_Storage<std::function<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v28, v29, (AMCP *)v53);
  if (v54) {
    v54(0, (uint64_t)v53, 0, 0);
  }
  std::__function::__value_func<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>::~__value_func[abi:ne180100](&v55);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v28 + 40), &v49);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v53, 0, 1.58366013e190);
  mach_port_t v30 = v47;
  uint64_t v48 = (std::__shared_weak_count *)*((void *)&v53[0] + 1);
  long long v49 = v53[0];
  uint64_t v31 = *(void *)&v53[0];
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  unint64_t v32 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Power_State)>>();
  uint64_t v55 = (uint64_t)&unk_1F1462778;
  int v56 = (std::__shared_weak_count *)v2;
  __int16 v57 = &v55;
  memset(v53, 0, sizeof(v53));
  int v54 = 0;
  std::__function::__value_func<void ()(AMCP::Power_State)>::__value_func[abi:ne180100]((uint64_t)v53, (uint64_t)&v55);
  int v54 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Power_State)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v31, v32, (AMCP *)v53);
  if (v54) {
    v54(0, (uint64_t)v53, 0, 0);
  }
  std::__function::__value_func<void ()(AMCP::Power_State)>::~__value_func[abi:ne180100](&v55);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v31 + 40), &v49);
  AMCP::Core::Broker::make_core((AMCP::Core::Core **)v53, (std::__shared_mutex_base *)v2[2], (uint64_t)__p, 1u);
  if (*((void *)&v53[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v53[0] + 1));
  }
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((void *)v51[0]);
  unint64_t v33 = __p[0];
  __p[0] = 0;
  if (v33) {
    operator delete(v33);
  }
  mach_port_t v34 = (const void **)operator new(0x30uLL);
  v34[1] = 0;
  v34[2] = 0;
  v34[3] = 0;
  *mach_port_t v34 = &unk_1F1462128;
  v34[4] = 0;
  v34[5] = 0;
  uint64_t v35 = *v1;
  int v36 = (std::__shared_weak_count *)(*v1)[7];
  v35[6] = v34 + 3;
  v35[7] = v34;
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  mach_port_t v37 = (std::__shared_weak_count *)v1[1];
  mach_port_t v38 = (*v1)[6];
  *(void *)&v53[0] = *v1;
  *((void *)&v53[0] + 1) = v37;
  if (v37) {
    atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::Core::Driver_Manager::load(v38, v53, v1[2], v1[3]);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
}

void sub_1BABB5B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AMCP::Core::Driver_Manager>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  if (*(void *)(a1 + 24))
  {
    std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100]((uint64_t *)(a1 + 24));
    uint64_t v2 = *v1;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<AMCP::Core::Driver_Manager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1462128;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Core::Driver_Manager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1462128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t _ZN4AMCP4Core19Operation_Utilities19make_typed_propertyINSt3__16vectorIjNS3_9allocatorIjEEEEZNS1_25make_object_list_propertyIjJEEENS3_10shared_ptrINS0_9OperationEEERNS0_6BrokerERKNS_7AddressESG_RKT_DpRKT0_EUlvE_EESB_SG_OT0_(uint64_t *a1, int a2, uint64_t *a3, double a4)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, a2, a4);
  uint64_t v6 = *a1;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  uint64_t v8 = *a3;
  long long v11 = *(_OWORD *)(a3 + 1);
  uint64_t v9 = operator new(0x20uLL);
  *uint64_t v9 = &unk_1F14621F8;
  v9[1] = v8;
  *((_OWORD *)v9 + 1) = v11;
  void v14[3] = v9;
  memset(v12, 0, sizeof(v12));
  uint64_t v13 = 0;
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v14);
  uint64_t v13 = AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v12);
  if (v13) {
    v13(0, (uint64_t)v12, 0, 0);
  }
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::~__value_func[abi:ne180100](v14);
  return AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(v6);
}

void sub_1BABB5F00(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[370];
}

uint64_t std::__function::__value_func<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  CFStringRef v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    CFStringRef v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<BOOL ()(applesauce::CF::StringRef)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[372];
}

uint64_t std::__function::__value_func<BOOL ()(applesauce::CF::StringRef)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  CFStringRef v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    CFStringRef v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<BOOL ()(applesauce::CF::StringRef)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::optional<unsigned int> ()(applesauce::CF::StringRef)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[374];
}

uint64_t std::__function::__value_func<std::optional<unsigned int> ()(applesauce::CF::StringRef)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  CFStringRef v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    CFStringRef v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::optional<unsigned int> ()(applesauce::CF::StringRef)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()(void)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[376];
}

uint64_t std::__function::__value_func<std::unordered_set<AMCP::Wire_Description> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  CFStringRef v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    CFStringRef v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::unordered_set<AMCP::Wire_Description> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()(unsigned int)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[378];
}

uint64_t std::__function::__value_func<std::unordered_set<AMCP::Wire_Description> ()(unsigned int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  CFStringRef v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    CFStringRef v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::unordered_set<AMCP::Wire_Description> ()(unsigned int)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[380];
}

uint64_t std::__function::__value_func<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  CFStringRef v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    CFStringRef v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[382];
}

uint64_t std::__function::__value_func<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  CFStringRef v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    CFStringRef v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[384];
}

uint64_t std::__function::__value_func<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  CFStringRef v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    CFStringRef v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_8,std::allocator<AMCP::Core::System_Core::build_core(void)::$_8>,void ()(AMCP::Power_State)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_8,std::allocator<AMCP::Core::System_Core::build_core(void)::$_8>,void ()(AMCP::Power_State)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core11System_Core10build_coreEvE3$_8"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_8,std::allocator<AMCP::Core::System_Core::build_core(void)::$_8>,void ()(AMCP::Power_State)>::operator()(AMCP::Log::Scope_Registry *a1, int *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v2 = *a2;
  uint64_t v3 = *((void *)a1 + 1);
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  uint64_t v4 = **(NSObject ***)buf;
  if (*(void *)v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v16);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = pthread_self();
    mach_port_t v6 = pthread_mach_thread_np(v5);
    std::string::basic_string[abi:ne180100]<0>(__p, off_1E6236640[v2]);
    unint64_t v7 = SHIBYTE(v11) >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v6;
    *(_WORD *)uint64_t v16 = 2080;
    *(void *)&_OWORD v16[2] = "System_Core.cpp";
    __int16 v17 = 1024;
    int v18 = 235;
    __int16 v19 = 2080;
    unint64_t v20 = v7;
    _os_log_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_INFO, "%6u %32s:%-5d System::update_power_state: %s", buf, 0x22u);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v8 = *(void *)(v3 + 32);
  (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)(v8 + 2648) + 40))(buf, v8 + 2648);
  __p[0] = (void *)(v8 + 2656);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)(v8 + 2648) + 16))(&__p[1], v8 + 2648);
  LODWORD(v12) = v2;
  *((void *)&v12 + 1) = v8 + 3064;
  unint64_t v14 = 0;
  uint64_t v9 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v9 = &unk_1F14666E8;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)__p;
  *((void *)v9 + 3) = v11;
  __p[1] = 0;
  long long v11 = 0;
  *((_OWORD *)v9 + 2) = v12;
  unint64_t v14 = v9;
  AMCP::IO_Core::exception_safe_dispatch(*(NSObject **)buf, (uint64_t)v13);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v13);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)buf);
}

void sub_1BABB6D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_8,std::allocator<AMCP::Core::System_Core::build_core(void)::$_8>,void ()(AMCP::Power_State)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1462778;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_8,std::allocator<AMCP::Core::System_Core::build_core(void)::$_8>,void ()(AMCP::Power_State)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F1462778;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_8,std::allocator<AMCP::Core::System_Core::build_core(void)::$_8>,void ()(AMCP::Power_State)>::~__func()
{
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>>::dispatch;
LABEL_6:
      std::__function::__value_func<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      long long v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_7,std::allocator<AMCP::Core::System_Core::build_core(void)::$_7>,std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_7,std::allocator<AMCP::Core::System_Core::build_core(void)::$_7>,std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core11System_Core10build_coreEvE3$_7"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_7,std::allocator<AMCP::Core::System_Core::build_core(void)::$_7>,std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)unint64_t v29 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  int v32 = *(_DWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  int v36 = *(_DWORD *)(a2 + 72);
  uint64_t v34 = v6;
  uint64_t v35 = v7;
  *(_OWORD *)std::string __p = v5;
  uint64_t v8 = (void *)(*(void *)(*(void *)(a1 + 8) + 32) + 2712);
  uint64_t v30 = v3;
  uint64_t v31 = v4;
  AMCP::Graph::Wire_Index::get_wires_for_terminal(&v52, v8, (unsigned __int8 **)v29);
  uint64_t v9 = v53;
  uint64_t v28 = v52;
  if (v52 == v53)
  {
LABEL_14:
    uint64_t v13 = v28;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 64) = 0;
    goto LABEL_15;
  }
  uint64_t v10 = v52;
  while (1)
  {
    uint64_t v11 = *(void *)v10;
    if (*(char *)(*(void *)v10 + 63) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v39, *(const std::string::value_type **)(v11 + 40), *(void *)(v11 + 48));
    }
    else
    {
      *(_OWORD *)uint64_t v39 = *(_OWORD *)(v11 + 40);
      *(void *)&v39[16] = *(void *)(v11 + 56);
    }
    *(void *)&v39[24] = *(void *)(v11 + 64);
    LODWORD(v40[0]) = *(_DWORD *)(v11 + 72);
    v37[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
    v37[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v39[24];
    v37[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v40;
    v54[0] = (unsigned __int8 **)__p;
    v54[1] = (unsigned __int8 **)&v35;
    v54[2] = (unsigned __int8 **)&v36;
    if (!std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)v37, v54))
    {
      if ((v39[23] & 0x80000000) != 0) {
        operator delete(*(void **)v39);
      }
      goto LABEL_13;
    }
    int v12 = *(unsigned __int8 *)(v11 + 408);
    if ((v39[23] & 0x80000000) != 0) {
      operator delete(*(void **)v39);
    }
    if (v12) {
      break;
    }
LABEL_13:
    v10 += 8;
    if (v10 == v9) {
      goto LABEL_14;
    }
  }
  if (*(unsigned char *)(v11 + 408))
  {
    AMCP::Graph::Graph_Wire::Connection::Connection((std::string *)v39, (const AMCP::Graph::Graph_Wire::Connection *)(v11 + 192));
  }
  else
  {
    LODWORD(v47[0]) = 0;
    long long v45 = 0u;
    int32x4_t v46 = 0u;
    *(_OWORD *)int v43 = 0u;
    *(_OWORD *)uint64_t v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    *(_OWORD *)int v40 = 0u;
    memset(v39, 0, sizeof(v39));
    *(void *)((char *)v47 + 4) = 64;
    uint64_t v48 = 0;
    long long v49 = 0;
    int v50 = 1;
    memset(v51, 0, sizeof(v51));
  }
  *(void *)mach_port_t v38 = 0;
  memset(v37, 0, sizeof(v37));
  *(_DWORD *)&v38[8] = 64;
  *(_WORD *)&v38[12] = 0;
  v38[14] = 0;
  uint64_t v15 = *(void *)(v11 + 416);
  unint64_t v14 = *(std::__shared_weak_count **)(v11 + 424);
  if (!v14)
  {
    if (!v15) {
      goto LABEL_34;
    }
    uint64_t v16 = 0;
LABEL_31:
    char v17 = 1;
    goto LABEL_32;
  }
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  if (!v15) {
    goto LABEL_34;
  }
  uint64_t v15 = *(void *)(v11 + 416);
  uint64_t v16 = *(std::__shared_weak_count **)(v11 + 424);
  if (!v16) {
    goto LABEL_31;
  }
  char v17 = 0;
  atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_32:
  int v18 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
  std::string::operator=(v37, v18);
  if ((v17 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
LABEL_34:
  uint64_t v20 = *(void *)(v11 + 432);
  __int16 v19 = *(std::__shared_weak_count **)(v11 + 440);
  if (!v19)
  {
    if (!v20) {
      goto LABEL_43;
    }
    uint64_t v21 = 0;
LABEL_40:
    char v22 = 1;
    goto LABEL_41;
  }
  atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  if (!v20) {
    goto LABEL_43;
  }
  uint64_t v20 = *(void *)(v11 + 432);
  uint64_t v21 = *(std::__shared_weak_count **)(v11 + 440);
  if (!v21) {
    goto LABEL_40;
  }
  char v22 = 0;
  atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_41:
  unint64_t v23 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
  std::string::operator=(v37, v23);
  if ((v22 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
LABEL_43:
  int16x8_t v24 = (int16x8_t)vtstq_s32(v46, v46);
  *(int8x8_t *)v24.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v24), (int8x8_t)0x1000100010001);
  *(_DWORD *)mach_port_t v38 = vmovn_s16(v24).u32[0];
  *(void *)&v38[4] = v47[0];
  v38[12] = v44[1] != (void *)v45;
  v38[13] = v48 != 0;
  v38[14] = *(void *)&v51[3] != *(void *)&v51[5];
  if (SHIBYTE(v37[0].__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)a3, v37[0].__r_.__value_.__l.__data_, v37[0].__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)a3 = v37[0];
  }
  uint64_t v25 = (std::string *)(a3 + 24);
  if (SHIBYTE(v37[1].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v25, v37[1].__r_.__value_.__l.__data_, v37[1].__r_.__value_.__l.__size_);
    int v26 = SHIBYTE(v37[1].__r_.__value_.__r.__words[2]);
    *(void *)(a3 + 48) = *(void *)v38;
    *(void *)(a3 + 55) = *(void *)&v38[7];
    *(unsigned char *)(a3 + 64) = 1;
    if (v26 < 0) {
      operator delete(v37[1].__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)&v37[1].__r_.__value_.__l.__data_;
    *(void *)(a3 + 40) = *((void *)&v37[1].__r_.__value_.__l + 2);
    *(void *)(a3 + 48) = *(void *)v38;
    *(void *)(a3 + 55) = *(void *)&v38[7];
    *(unsigned char *)(a3 + 64) = 1;
  }
  uint64_t v13 = v28;
  if (SHIBYTE(v37[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37[0].__r_.__value_.__l.__data_);
  }
  if (*(void *)&v51[3])
  {
    *(void *)&v51[5] = *(void *)&v51[3];
    operator delete(*(void **)&v51[3]);
  }
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  if (v44[1])
  {
    *(void **)&long long v45 = v44[1];
    operator delete(v44[1]);
  }
  if (SHIBYTE(v44[0]) < 0) {
    operator delete(v43[0]);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[1]);
  }
  if ((v39[23] & 0x80000000) != 0) {
    operator delete(*(void **)v39);
  }
LABEL_15:
  if (v13) {
    operator delete(v13);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(v29[0]);
  }
}

void sub_1BABB7474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  if (*(char *)(v72 + 23) < 0) {
    operator delete(*a9);
  }
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a72) {
    operator delete(a72);
  }
  if (a71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a71);
  }
  if (a63) {
    operator delete(a63);
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (a10) {
    operator delete(a10);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_7,std::allocator<AMCP::Core::System_Core::build_core(void)::$_7>,std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14626E8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_7,std::allocator<AMCP::Core::System_Core::build_core(void)::$_7>,std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F14626E8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_7,std::allocator<AMCP::Core::System_Core::build_core(void)::$_7>,std::optional<AMCP::Wire_Connection_Properties> ()(AMCP::Wire_Identifier)>::~__func()
{
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_6,std::allocator<AMCP::Core::System_Core::build_core(void)::$_6>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_6,std::allocator<AMCP::Core::System_Core::build_core(void)::$_6>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core11System_Core10build_coreEvE3$_6"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_6,std::allocator<AMCP::Core::System_Core::build_core(void)::$_6>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>::operator()(uint64_t a1, unsigned __int8 **a2, int *a3, long long *a4, long long *a5)
{
  int v5 = *a3;
  long long v14 = *a4;
  long long v15 = a4[1];
  long long v16 = a4[2];
  long long v17 = a4[3];
  long long v10 = *a5;
  long long v11 = a5[1];
  long long v12 = a5[2];
  long long v13 = a5[3];
  uint64_t v6 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>((void *)(*(void *)(*(void *)(a1 + 8) + 32) + 2792), a2);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = v6[12];
    uint64_t v9 = (std::__shared_weak_count *)v7[13];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v8)
    {
      int v18 = v5;
      long long v19 = v14;
      long long v20 = v15;
      long long v21 = v16;
      long long v22 = v17;
      long long v23 = v10;
      long long v24 = v11;
      long long v25 = v12;
      long long v26 = v13;
      char v29 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::store(v8, (long long *)&v18);
    }
    if (v9)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_6,std::allocator<AMCP::Core::System_Core::build_core(void)::$_6>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1462658;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_6,std::allocator<AMCP::Core::System_Core::build_core(void)::$_6>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1462658;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_6,std::allocator<AMCP::Core::System_Core::build_core(void)::$_6>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp,CA::TimeStamp)>::~__func()
{
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      long long v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_5,std::allocator<AMCP::Core::System_Core::build_core(void)::$_5>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_5,std::allocator<AMCP::Core::System_Core::build_core(void)::$_5>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core11System_Core10build_coreEvE3$_5"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_5,std::allocator<AMCP::Core::System_Core::build_core(void)::$_5>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>::operator()(uint64_t a1, unsigned __int8 **a2, int *a3, long long *a4)
{
  int v4 = *a3;
  long long v9 = *a4;
  long long v10 = a4[1];
  long long v11 = a4[2];
  long long v12 = a4[3];
  int v5 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>((void *)(*(void *)(*(void *)(a1 + 8) + 32) + 2792), a2);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = v5[12];
    uint64_t v8 = (std::__shared_weak_count *)v6[13];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v7)
    {
      int v13 = v4;
      long long v14 = v9;
      long long v15 = v10;
      long long v16 = v11;
      long long v17 = v12;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      char v23 = 0;
      caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::store(v7, (long long *)&v13);
    }
    if (v8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_5,std::allocator<AMCP::Core::System_Core::build_core(void)::$_5>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14625C8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_5,std::allocator<AMCP::Core::System_Core::build_core(void)::$_5>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F14625C8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_5,std::allocator<AMCP::Core::System_Core::build_core(void)::$_5>,void ()(AMCP::Wire_Identifier const&,float,CA::TimeStamp)>::~__func()
{
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::unordered_set<AMCP::Wire_Description> ()(unsigned int)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::unordered_set<AMCP::Wire_Description> ()>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::unordered_set<AMCP::Wire_Description> ()>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::unordered_set<AMCP::Wire_Description> ()>>::dispatch;
LABEL_6:
      std::__function::__value_func<std::unordered_set<AMCP::Wire_Description> ()>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      long long v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_4,std::allocator<AMCP::Core::System_Core::build_core(void)::$_4>,std::unordered_set<AMCP::Wire_Description> ()(unsigned int)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_4,std::allocator<AMCP::Core::System_Core::build_core(void)::$_4>,std::unordered_set<AMCP::Wire_Description> ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core11System_Core10build_coreEvE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_4,std::allocator<AMCP::Core::System_Core::build_core(void)::$_4>,std::unordered_set<AMCP::Wire_Description> ()(unsigned int)>::operator()(uint64_t a1@<X0>, int *a2@<X1>, AMCP::IO_Core::Graph_Manager *a3@<X8>)
{
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_4,std::allocator<AMCP::Core::System_Core::build_core(void)::$_4>,std::unordered_set<AMCP::Wire_Description> ()(unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1462538;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_4,std::allocator<AMCP::Core::System_Core::build_core(void)::$_4>,std::unordered_set<AMCP::Wire_Description> ()(unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1462538;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_4,std::allocator<AMCP::Core::System_Core::build_core(void)::$_4>,std::unordered_set<AMCP::Wire_Description> ()(unsigned int)>::~__func()
{
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::unordered_set<AMCP::Wire_Description> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::unordered_set<AMCP::Wire_Description> ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::unordered_set<AMCP::Wire_Description> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::unordered_set<AMCP::Wire_Description> ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<std::unordered_set<AMCP::Wire_Description> ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::unordered_set<AMCP::Wire_Description> ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      long long v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_3,std::allocator<AMCP::Core::System_Core::build_core(void)::$_3>,std::unordered_set<AMCP::Wire_Description> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_3,std::allocator<AMCP::Core::System_Core::build_core(void)::$_3>,std::unordered_set<AMCP::Wire_Description> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core11System_Core10build_coreEvE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_3,std::allocator<AMCP::Core::System_Core::build_core(void)::$_3>,std::unordered_set<AMCP::Wire_Description> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v5[40] = *(NSObject **)MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 32);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  (*(void (**)(NSObject **__return_ptr))(*(void *)(v3 + 2648) + 40))(v5);
  v4[0] = &unk_1F14665E8;
  v4[1] = v3 + 2656;
  v4[2] = a2;
  v4[3] = v4;
  AMCP::IO_Core::exception_safe_dispatch(v5[0], (uint64_t)v4);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v4);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v5);
}

void sub_1BABB827C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)va1);
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_3,std::allocator<AMCP::Core::System_Core::build_core(void)::$_3>,std::unordered_set<AMCP::Wire_Description> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14624A8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_3,std::allocator<AMCP::Core::System_Core::build_core(void)::$_3>,std::unordered_set<AMCP::Wire_Description> ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F14624A8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_3,std::allocator<AMCP::Core::System_Core::build_core(void)::$_3>,std::unordered_set<AMCP::Wire_Description> ()(void)>::~__func()
{
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::optional<unsigned int> ()(applesauce::CF::StringRef)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::optional<unsigned int> ()(applesauce::CF::StringRef)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::optional<unsigned int> ()(applesauce::CF::StringRef)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::optional<unsigned int> ()(applesauce::CF::StringRef)>>::dispatch;
LABEL_6:
      std::__function::__value_func<std::optional<unsigned int> ()(applesauce::CF::StringRef)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::optional<unsigned int> ()(applesauce::CF::StringRef)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::optional<unsigned int> ()(applesauce::CF::StringRef)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      long long v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_2,std::allocator<AMCP::Core::System_Core::build_core(void)::$_2>,std::optional<unsigned int> ()(applesauce::CF::StringRef)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_2,std::allocator<AMCP::Core::System_Core::build_core(void)::$_2>,std::optional<unsigned int> ()(applesauce::CF::StringRef)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core11System_Core10build_coreEvE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_2,std::allocator<AMCP::Core::System_Core::build_core(void)::$_2>,std::optional<unsigned int> ()(applesauce::CF::StringRef)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef cf = *a2;
  *a2 = 0;
  uint64_t node_id = AMCP::IO_Core::Graph_Manager::get_node_id((AMCP::IO_Core::Graph_Manager *)(*(void *)(*(void *)(a1 + 8) + 32) + 2648), (const applesauce::CF::StringRef *)&cf);
  if (cf) {
    CFRelease(cf);
  }
  return node_id;
}

void sub_1BABB8588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_2,std::allocator<AMCP::Core::System_Core::build_core(void)::$_2>,std::optional<unsigned int> ()(applesauce::CF::StringRef)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1462418;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_2,std::allocator<AMCP::Core::System_Core::build_core(void)::$_2>,std::optional<unsigned int> ()(applesauce::CF::StringRef)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1462418;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_2,std::allocator<AMCP::Core::System_Core::build_core(void)::$_2>,std::optional<unsigned int> ()(applesauce::CF::StringRef)>::~__func()
{
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(applesauce::CF::StringRef)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(applesauce::CF::StringRef)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<BOOL ()(applesauce::CF::StringRef)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(applesauce::CF::StringRef)>>::dispatch;
LABEL_6:
      std::__function::__value_func<BOOL ()(applesauce::CF::StringRef)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(applesauce::CF::StringRef)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<BOOL ()(applesauce::CF::StringRef)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      long long v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_1,std::allocator<AMCP::Core::System_Core::build_core(void)::$_1>,BOOL ()(applesauce::CF::StringRef)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_1,std::allocator<AMCP::Core::System_Core::build_core(void)::$_1>,BOOL ()(applesauce::CF::StringRef)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core11System_Core10build_coreEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_1,std::allocator<AMCP::Core::System_Core::build_core(void)::$_1>,BOOL ()(applesauce::CF::StringRef)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  v9[40] = *(NSObject **)MEMORY[0x1E4F143B8];
  CFTypeRef cf = *a2;
  *a2 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned __int8 v7 = 0;
  (*(void (**)(NSObject **__return_ptr))(*(void *)(v2 + 2648) + 40))(v9);
  uint64_t v3 = operator new(0x20uLL);
  void *v3 = &unk_1F14664E8;
  v3[1] = v2 + 2656;
  uint64_t v3[2] = &cf;
  v3[3] = &v7;
  void v8[3] = v3;
  AMCP::IO_Core::exception_safe_dispatch(v9[0], (uint64_t)v8);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v8);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v9);
  int v4 = v7;
  if (cf) {
    CFRelease(cf);
  }
  return v4 != 0;
}

void sub_1BABB8930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_1,std::allocator<AMCP::Core::System_Core::build_core(void)::$_1>,BOOL ()(applesauce::CF::StringRef)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1462388;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_1,std::allocator<AMCP::Core::System_Core::build_core(void)::$_1>,BOOL ()(applesauce::CF::StringRef)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1462388;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_1,std::allocator<AMCP::Core::System_Core::build_core(void)::$_1>,BOOL ()(applesauce::CF::StringRef)>::~__func()
{
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>>::dispatch;
LABEL_6:
      std::__function::__value_func<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      long long v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_0,std::allocator<AMCP::Core::System_Core::build_core(void)::$_0>,std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_0,std::allocator<AMCP::Core::System_Core::build_core(void)::$_0>,std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core11System_Core10build_coreEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_0,std::allocator<AMCP::Core::System_Core::build_core(void)::$_0>,std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>::operator()(uint64_t a1@<X0>, long long *a2@<X1>, long long *a3@<X2>, unsigned char *a4@<X8>)
{
  long long v11 = *a2;
  uint64_t v12 = *((void *)a2 + 2);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v13 = *(long long *)((char *)a2 + 24);
  uint64_t v14 = *((void *)a2 + 5);
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  long long v7 = *a3;
  uint64_t v8 = *((void *)a3 + 2);
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  long long v9 = *(long long *)((char *)a3 + 24);
  uint64_t v5 = *((void *)a3 + 5);
  *((void *)a3 + 2) = 0;
  *((void *)a3 + 3) = 0;
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  uint64_t v6 = *(void *)(a1 + 8) + 2648;
  uint64_t v10 = v5;
  AMCP::IO_Core::Graph_Manager::modify_graph(a4, v6, (uint64_t)&v11, (uint64_t)&v7);
  long long v15 = (void **)&v9;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100](&v15);
  long long v15 = (void **)&v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  long long v15 = (void **)&v13;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100](&v15);
  long long v15 = (void **)&v11;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100](&v15);
}

void sub_1BABB8CEC(void *a1)
{
  __cxa_begin_catch(a1);
  unsigned char *v1 = 0;
  v1[24] = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BABB8CA4);
}

void sub_1BABB8D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  *(void *)(v17 - 56) = v16;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 56));
  *(void *)(v17 - 56) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 56));
  *(void *)(v17 - 56) = v15;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 56));
  *(void *)(v17 - 56) = &a15;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 56));
  _Unwind_Resume(a1);
}

void std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:ne180100]<AMCP::Wire_Identifier,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 192;
        std::__destroy_at[abi:ne180100]<AMCP::Wire_Description,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120;
        std::__destroy_at[abi:ne180100]<AMCP::Node_Description,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<AMCP::Node_Description,0>(uint64_t a1)
{
  for (uint64_t i = 96; i != 48; i -= 24)
  {
    uint64_t v4 = (void **)(a1 + i);
    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 8);
    operator delete(v3);
  }
}

void std::__destroy_at[abi:ne180100]<AMCP::Wire_Description,0>(uint64_t a1)
{
  uint64_t v5 = (void **)(a1 + 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(void *)(a1 + 88) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v4 = *(void **)a1;
    operator delete(v4);
  }
}

void std::__destroy_at[abi:ne180100]<AMCP::Wire_Identifier,0>(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_0,std::allocator<AMCP::Core::System_Core::build_core(void)::$_0>,std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14622F8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_0,std::allocator<AMCP::Core::System_Core::build_core(void)::$_0>,std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F14622F8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Core::System_Core::build_core(void)::$_0,std::allocator<AMCP::Core::System_Core::build_core(void)::$_0>,std::optional<std::vector<unsigned int>> ()(AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN4AMCP4Core19Operation_Utilities25make_object_list_propertyIjJEEENS_10shared_ptrINS3_9OperationEEERNS3_6BrokerERKNS2_7AddressESD_RKT_DpRKT0_EUlvE_NS_9allocatorISL_EEFNS_6vectorIjNSM_IjEEEEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP4Core19Operation_Utilities25make_object_list_propertyIjJEEENSt3__110shared_ptrINS0_9OperationEEERNS0_6BrokerERKNS_7AddressESB_RKT_DpRKT0_EUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP4Core19Operation_Utilities25make_object_list_propertyIjJEEENS_10shared_ptrINS3_9OperationEEERNS3_6BrokerERKNS2_7AddressESD_RKT_DpRKT0_EUlvE_NS_9allocatorISL_EEFNS_6vectorIjNSM_IjEEEEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities25make_object_list_propertyIjJEEENSt3__110shared_ptrINS0_9OperationEEERNS0_6BrokerERKNS_7AddressESB_RKT_DpRKT0_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNSt3__110__function6__funcIZN4AMCP4Core19Operation_Utilities25make_object_list_propertyIjJEEENS_10shared_ptrINS3_9OperationEEERNS3_6BrokerERKNS2_7AddressESD_RKT_DpRKT0_EUlvE_NS_9allocatorISL_EEFNS_6vectorIjNSM_IjEEEEvEEclEv@<X0>(uint64_t a1@<X0>, std::vector<unsigned int> *a2@<X8>)
{
  void v4[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_mutex_base **)(a1 + 8);
  v4[0] = &unk_1F1462268;
  v4[1] = a1 + 16;
  v4[2] = a1 + 28;
  v4[3] = v4;
  AMCP::Core::Broker::fetch_object_ids_if (a2, v2, (uint64_t)v4);
  return std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](v4);
}

void *_ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE11target_typeEv()
{
  return &_ZTIZN4AMCP4Core16Broker_Utilities43fetch_object_ids_with_properties_and_valuesIjJENSt3__19enable_ifILb1EvEEEENS3_6vectorIjNS3_9allocatorIjEEEERNS0_6BrokerERKNS_7AddressERKT_DpOT0_EUlSH_E_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core16Broker_Utilities43fetch_object_ids_with_properties_and_valuesIjJENSt3__19enable_ifILb1EvEEEENS3_6vectorIjNS3_9allocatorIjEEEERNS0_6BrokerERKNS_7AddressERKT_DpOT0_EUlSH_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEEclEST_(uint64_t a1, AMCP::Core::Core **a2)
{
  return _ZN4AMCP4Core4Core26has_properties_with_valuesIjJENSt3__19enable_ifILb1EvEEEEbRKNS_7AddressERKT_DpOT0_(*a2, *(const AMCP::Address **)(a1 + 8), *(_DWORD **)(a1 + 16));
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1462268;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F1462268;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core19Operation_Utilities25make_object_list_propertyIjJEEENS_10shared_ptrINS3_9OperationEEERNS3_6BrokerERKNS2_7AddressESD_RKT_DpRKT0_EUlvE_NS_9allocatorISL_EEFNS_6vectorIjNSM_IjEEEEvEE7__cloneEPNS0_6__baseISR_EE(__n128 *a1, __n128 *a2)
{
  unint64_t v2 = a1->n128_u64[1];
  a2->n128_u64[0] = (unint64_t)&unk_1F14621F8;
  a2->n128_u64[1] = v2;
  __n128 result = a1[1];
  a2[1] = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core19Operation_Utilities25make_object_list_propertyIjJEEENS_10shared_ptrINS3_9OperationEEERNS3_6BrokerERKNS2_7AddressESD_RKT_DpRKT0_EUlvE_NS_9allocatorISL_EEFNS_6vectorIjNSM_IjEEEEvEE7__cloneEv(__n128 *a1)
{
  unint64_t v2 = (__n128 *)operator new(0x20uLL);
  unint64_t v3 = a1->n128_u64[1];
  v2->n128_u64[0] = (unint64_t)&unk_1F14621F8;
  v2->n128_u64[1] = v3;
  __n128 result = a1[1];
  v2[1] = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP4Core19Operation_Utilities25make_object_list_propertyIjJEEENS_10shared_ptrINS3_9OperationEEERNS3_6BrokerERKNS2_7AddressESD_RKT_DpRKT0_EUlvE_NS_9allocatorISL_EEFNS_6vectorIjNSM_IjEEEEvEED0Ev()
{
}

void std::__shared_ptr_emplace<AMCP::Core::Conductor>::__on_zero_shared(uint64_t a1)
{
  AMCP::Core::Conductor::flush_work_queues((dispatch_object_t *)(a1 + 24));
  AMCP::DAL::get_timestamp_writer_queue(v2);
  AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::Utility::Dispatch_Queue *)AMCP::DAL::get_timestamp_writer_queue(void)::s_timestamp_writer_queue);
  *(void *)(a1 + 2672) = &unk_1F1488BB8;
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 3112);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  AMCP::IO_Core::Graph_Manager::~Graph_Manager((AMCP::IO_Core::Graph_Manager *)(a1 + 2672));
  AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::~Map(a1 + 2456);
  AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::~Map(a1 + 2240);
  AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::~Map(a1 + 2024);
  AMCP::Observer::Map<std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,unsigned int,true,std::less<unsigned int>>::~Map(a1 + 1808);
  AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::~Map(a1 + 1592);
  AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,unsigned int,true,std::less<unsigned int>>::~Map(a1 + 1376);
  AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,unsigned int,true,std::less<unsigned int>>::~Map(a1 + 1160);
  uint64_t v6 = (void **)(a1 + 1128);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 1080));
  std::mutex::~mutex((std::mutex *)(a1 + 1016));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(a1 + 696));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(a1 + 376));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(a1 + 56));
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void std::__shared_ptr_emplace<AMCP::Core::Conductor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14620D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Core::Conductor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14620D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_pointer<System_Core_Graph_Host *,std::shared_ptr<AMCP::Graph::Graph_Host>::__shared_ptr_default_delete<AMCP::Graph::Graph_Host,System_Core_Graph_Host>,std::allocator<System_Core_Graph_Host>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP5Graph10Graph_HostEE27__shared_ptr_default_deleteIS3_22System_Core_Graph_HostEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<System_Core_Graph_Host *,std::shared_ptr<AMCP::Graph::Graph_Host>::__shared_ptr_default_delete<AMCP::Graph::Graph_Host,System_Core_Graph_Host>,std::allocator<System_Core_Graph_Host>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<System_Core_Graph_Host *,std::shared_ptr<AMCP::Graph::Graph_Host>::__shared_ptr_default_delete<AMCP::Graph::Graph_Host,System_Core_Graph_Host>,std::allocator<System_Core_Graph_Host>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Core::Broker>::__on_zero_shared(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 448);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>,0>(v2 + 2);
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 432);
  *(void *)(a1 + 432) = 0;
  if (v4) {
    operator delete(v4);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 376));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 328));
  std::mutex::~mutex((std::mutex *)(a1 + 264));
  uint64_t v5 = *(void **)(a1 + 240);
  if (v5)
  {
    *(void *)(a1 + 248) = v5;
    operator delete(v5);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::~__hash_table(a1 + 192);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 136));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));

  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>,0>(void *a1)
{
  unint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
}

void std::__shared_ptr_emplace<AMCP::Core::Broker>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1485290;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Core::Broker>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1485290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Core::System_Core>::__on_zero_shared(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v20, "com.apple.coreaudio", "AMCP");
  int v3 = *(_DWORD *)(v20 + 16);
  switch(v3)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      long long v9 = **(NSObject ***)buf;
      if (*(void *)v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v23);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v11;
        *(_WORD *)char v23 = 2080;
        *(void *)&void v23[2] = "System_Core.cpp";
        __int16 v24 = 1024;
        int v25 = 65;
        long long v7 = v9;
        os_log_type_t v8 = OS_LOG_TYPE_INFO;
        goto LABEL_12;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v12 = **(NSObject ***)buf;
      if (*(void *)v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v23);
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        long long v18 = pthread_self();
        mach_port_t v19 = pthread_mach_thread_np(v18);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v19;
        *(_WORD *)char v23 = 2080;
        *(void *)&void v23[2] = "System_Core.cpp";
        __int16 v24 = 1024;
        int v25 = 65;
        _os_log_debug_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Destroying System_Core", buf, 0x18u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v4 = **(NSObject ***)buf;
      if (*(void *)v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v23);
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = pthread_self();
        mach_port_t v6 = pthread_mach_thread_np(v5);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v6;
        *(_WORD *)char v23 = 2080;
        *(void *)&void v23[2] = "System_Core.cpp";
        __int16 v24 = 1024;
        int v25 = 65;
        long long v7 = v4;
        os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
LABEL_12:
        _os_log_impl(&dword_1BAA78000, v7, v8, "%6u %32s:%-5d Destroying System_Core", buf, 0x18u);
      }
      break;
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 104));
  long long v13 = *(std::__shared_weak_count **)(a1 + 96);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 64);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 48);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 32);
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_1BABB99A8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__shared_ptr_emplace<AMCP::Core::System_Core>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1462038;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Core::System_Core>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1462038;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<AMCP::Core::System_Core::stop(void)::$_0,std::allocator<AMCP::Core::System_Core::stop(void)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Core::System_Core::stop(void)::$_0,std::allocator<AMCP::Core::System_Core::stop(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core11System_Core4stopEvE3$_0")) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void std::__function::__func<AMCP::Core::System_Core::stop(void)::$_0,std::allocator<AMCP::Core::System_Core::stop(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(a1 + 8);
  unint64_t v2 = (uint64_t *)v1[6];
  int v3 = (uint64_t *)*v2;
  uint64_t v4 = (uint64_t *)v2[1];
  while (v3 != v4)
  {
    uint64_t v5 = *v3;
    v3 += 2;
    (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100](v2);
  mach_port_t v6 = (std::__shared_weak_count *)v1[7];
  v1[6] = 0;
  v1[7] = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  long long v7 = (std::__shared_mutex_base *)v1[2];
  v15[0] = &unk_1F1464868;
  uint64_t v16 = v15;
  AMCP::Core::Broker::fetch_object_ids_if (&v14, v7, (uint64_t)v15);
  std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](v15);
  std::vector<unsigned int>::pointer begin = v14.__begin_;
  std::vector<unsigned int>::pointer end = v14.__end_;
  while (begin != end)
  {
    uint64_t v10 = begin;
    do
    {
      unsigned int v11 = *v10++;
      AMCP::Core::Broker::destroy_core(v7, v11);
    }
    while (v10 != end);
    v15[0] = &unk_1F14648E8;
    uint64_t v16 = v15;
    AMCP::Core::Broker::fetch_object_ids_if (&v13, v7, (uint64_t)v15);
    if (begin) {
      operator delete(begin);
    }
    long long v12 = *(_OWORD *)&v13.__begin_;
    std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](v15);
    std::vector<unsigned int>::pointer end = (std::vector<unsigned int>::pointer)*((void *)&v12 + 1);
    std::vector<unsigned int>::pointer begin = (std::vector<unsigned int>::pointer)v12;
  }
  if (begin) {
    operator delete(begin);
  }
}

uint64_t std::__function::__func<AMCP::Core::System_Core::stop(void)::$_0,std::allocator<AMCP::Core::System_Core::stop(void)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1462178;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Core::System_Core::stop(void)::$_0,std::allocator<AMCP::Core::System_Core::stop(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1462178;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Core::System_Core::stop(void)::$_0,std::allocator<AMCP::Core::System_Core::stop(void)::$_0>,void ()(void)>::~__func()
{
}

void Testing_TCC_And_Input_Status_Handler::ReportRecordingStateToSystemStatus(uint64_t a1, uint64_t a2, int a3, char a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK36Testing_TCC_And_Input_Status_Handler34ReportRecordingStateToSystemStatusERK13audit_token_tN28TCC_And_Input_Status_Handler19RecordingStatusTypeEb_block_invoke;
  v5[3] = &__block_descriptor_tmp_2545;
  v5[4] = a1;
  int v6 = a3;
  char v7 = a4;
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 40));
  if (v4) {
    atomic_store(1u, (unsigned __int8 *)(a1 + 41));
  }
  dispatch_async(*(dispatch_queue_t *)(a1 + 8), v5);
}

uint64_t ___ZNK36Testing_TCC_And_Input_Status_Handler34ReportRecordingStateToSystemStatusERK13audit_token_tN28TCC_And_Input_Status_Handler19RecordingStatusTypeEb_block_invoke(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 40);
  if (v1)
  {
    if (v1 != 1) {
      return result;
    }
    uint64_t v2 = &byte_1E9F78578;
  }
  else
  {
    uint64_t v2 = &byte_1E9F78577;
  }
  char *v2 = *(unsigned char *)(result + 44);
  return result;
}

uint64_t Testing_TCC_And_Input_Status_Handler::get_test_state(Testing_TCC_And_Input_Status_Handler *this)
{
  uint64_t v5 = 0;
  int v6 = &v5;
  uint64_t v7 = 0x3802000000;
  os_log_type_t v8 = __Block_byref_object_copy__2547;
  long long v9 = __Block_byref_object_dispose__2548;
  __int16 v10 = 257;
  v11[0] = 0;
  *(_DWORD *)((char *)v11 + 3) = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK36Testing_TCC_And_Input_Status_Handler14get_test_stateEv_block_invoke;
  v4[3] = &unk_1E6230D78;
  void v4[4] = &v5;
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 40);
  if (v1) {
    atomic_store(1u, (unsigned __int8 *)this + 41);
  }
  dispatch_sync(*((dispatch_queue_t *)this + 1), v4);
  uint64_t v2 = v6[5];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t __Block_byref_object_copy__2547(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(result + 40) = v2;
  return result;
}

uint64_t ___ZNK36Testing_TCC_And_Input_Status_Handler14get_test_stateEv_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 8);
  *(void *)(v1 + 40) = Testing_TCC_And_Input_Status_Handler::g_current_test_state;
  *(unsigned char *)(v1 + 48) = byte_1E9F78578;
  return result;
}

void Testing_TCC_And_Input_Status_Handler::set_test_state(uint64_t a1, uint64_t a2, char a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZN36Testing_TCC_And_Input_Status_Handler14set_test_stateEN28TCC_And_Input_Status_Handler10Test_StateE_block_invoke;
  v4[3] = &__block_descriptor_tmp_2_2550;
  void v4[4] = a2;
  char v5 = a3;
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(a1 + 40));
  if (v3) {
    atomic_store(1u, (unsigned __int8 *)(a1 + 41));
  }
  dispatch_sync(*(dispatch_queue_t *)(a1 + 8), v4);
}

uint64_t ___ZN36Testing_TCC_And_Input_Status_Handler14set_test_stateEN28TCC_And_Input_Status_Handler10Test_StateE_block_invoke(uint64_t result)
{
  Testing_TCC_And_Input_Status_Handler::g_current_test_state = *(void *)(result + 32);
  byte_1E9F78578 = *(unsigned char *)(result + 40);
  return result;
}

uint64_t Testing_TCC_And_Input_Status_Handler::ShouldOverrideInterprocessTapEntitlement(Testing_TCC_And_Input_Status_Handler *this)
{
  return byte_1E9F78573 | 0x100u;
}

uint64_t Testing_TCC_And_Input_Status_Handler::ShouldOverrideRecordingIndicatorSuppressionEntitlement(Testing_TCC_And_Input_Status_Handler *this)
{
  return byte_1E9F78572 | 0x100u;
}

uint64_t Testing_TCC_And_Input_Status_Handler::CheckTCC(Testing_TCC_And_Input_Status_Handler *this, const __CFString *a2, audit_token_t *a3)
{
  return 0;
}

uint64_t Testing_TCC_And_Input_Status_Handler::CheckTCCQuiet(Testing_TCC_And_Input_Status_Handler *this, const __CFString *a2, audit_token_t *a3)
{
  *((unsigned char *)this + 328) = 0;
  return 1;
}

void Testing_TCC_And_Input_Status_Handler::EvaluateAndDispatchRecordingStateToSystemStatus(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  void v8[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1;
  int v7 = a3;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v8, a4);
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a1 + 40));
  if (v5) {
    atomic_store(1u, (unsigned __int8 *)(a1 + 41));
  }
  operator new();
}

void sub_1BABBA054(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t *std::unique_ptr<Testing_TCC_And_Input_Status_Handler::EvaluateAndDispatchRecordingStateToSystemStatus(audit_token_t const&,TCC_And_Input_Status_Handler::RecordingStatusType,std::function<BOOL ()(void)>)::$_0,std::default_delete<Testing_TCC_And_Input_Status_Handler::EvaluateAndDispatchRecordingStateToSystemStatus(audit_token_t const&,TCC_And_Input_Status_Handler::RecordingStatusType,std::function<BOOL ()(void)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)(v2 + 16));
    MEMORY[0x1C1859840](v2, 0x1060C4067D9AA7CLL);
  }
  return a1;
}

uint64_t *applesauce::dispatch::v1::async<Testing_TCC_And_Input_Status_Handler::EvaluateAndDispatchRecordingStateToSystemStatus(audit_token_t const&,TCC_And_Input_Status_Handler::RecordingStatusType,std::function<BOOL ()(void)>)::$_0 &>(dispatch_queue_s *,Testing_TCC_And_Input_Status_Handler::EvaluateAndDispatchRecordingStateToSystemStatus(audit_token_t const&,TCC_And_Input_Status_Handler::RecordingStatusType,std::function<BOOL ()(void)>)::$_0 &)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  char v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2);
  int v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
  {
    unsigned __int8 v5 = &byte_1E9F78577;
    goto LABEL_6;
  }
  if (v4 == 1)
  {
    unsigned __int8 v5 = &byte_1E9F78578;
LABEL_6:
    char *v5 = v3;
  }
  return std::unique_ptr<Testing_TCC_And_Input_Status_Handler::EvaluateAndDispatchRecordingStateToSystemStatus(audit_token_t const&,TCC_And_Input_Status_Handler::RecordingStatusType,std::function<BOOL ()(void)>)::$_0,std::default_delete<Testing_TCC_And_Input_Status_Handler::EvaluateAndDispatchRecordingStateToSystemStatus(audit_token_t const&,TCC_And_Input_Status_Handler::RecordingStatusType,std::function<BOOL ()(void)>)::$_0>>::~unique_ptr[abi:ne180100](&v7);
}

void sub_1BABBA140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<Testing_TCC_And_Input_Status_Handler::EvaluateAndDispatchRecordingStateToSystemStatus(audit_token_t const&,TCC_And_Input_Status_Handler::RecordingStatusType,std::function<BOOL ()(void)>)::$_0,std::default_delete<Testing_TCC_And_Input_Status_Handler::EvaluateAndDispatchRecordingStateToSystemStatus(audit_token_t const&,TCC_And_Input_Status_Handler::RecordingStatusType,std::function<BOOL ()(void)>)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Testing_TCC_And_Input_Status_Handler::~Testing_TCC_And_Input_Status_Handler(Testing_TCC_And_Input_Status_Handler *this)
{
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((Testing_TCC_And_Input_Status_Handler *)((char *)this + 8));

  JUMPOUT(0x1C1859840);
}

{
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((Testing_TCC_And_Input_Status_Handler *)((char *)this + 8));
}

uint64_t TCC_And_Input_Status_Handler::get_test_state(TCC_And_Input_Status_Handler *this)
{
  return 257;
}

uint64_t embedded_TCC_And_Input_Status_Handler::ShouldOverrideInterprocessTapEntitlement(embedded_TCC_And_Input_Status_Handler *this)
{
  return 0;
}

uint64_t embedded_TCC_And_Input_Status_Handler::ShouldOverrideRecordingIndicatorSuppressionEntitlement(embedded_TCC_And_Input_Status_Handler *this)
{
  return 0;
}

uint64_t embedded_TCC_And_Input_Status_Handler::CheckTCC(embedded_TCC_And_Input_Status_Handler *this, const __CFString *a2, audit_token_t *a3)
{
  return 1;
}

uint64_t embedded_TCC_And_Input_Status_Handler::CheckTCCQuiet(embedded_TCC_And_Input_Status_Handler *this, const __CFString *a2, audit_token_t *a3)
{
  return 0;
}

void embedded_TCC_And_Input_Status_Handler::~embedded_TCC_And_Input_Status_Handler(embedded_TCC_And_Input_Status_Handler *this)
{
}

void Testing_TCC_And_Input_Status_Handler::Testing_TCC_And_Input_Status_Handler(Testing_TCC_And_Input_Status_Handler *this)
{
  object[40] = *(dispatch_object_t *)MEMORY[0x1E4F143B8];
  Testing_PlatformBehaviors::get_tcc_and_input_status_handler(void)const::tcc_handler = (uint64_t)&unk_1F1462808;
  qword_1E9F78C28 = 0;
  unk_1E9F78C30 = 0;
  *(_OWORD *)algn_1E9F78C10 = 0u;
  word_1E9F78C20 = 0;
  xmmword_1E9F78C00 = 0u;
  qword_1E9F78C38 = 0;
  unk_1E9F78C40 = 850045863;
  xmmword_1E9F78C48 = 0u;
  unk_1E9F78C58 = 0u;
  xmmword_1E9F78C68 = 0u;
  unk_1E9F78C78 = 0u;
  xmmword_1E9F78C88 = 0u;
  qword_1E9F78C98 = 850045863;
  unk_1E9F78CA0 = 0u;
  unk_1E9F78CB0 = 0u;
  unk_1E9F78CC0 = 0u;
  unk_1E9F78CD0 = 0u;
  unk_1E9F78CE0 = 0u;
  qword_1E9F78CF0 = 850045863;
  xmmword_1E9F78CF8 = 0u;
  unk_1E9F78D08 = 0u;
  xmmword_1E9F78D18 = 0u;
  unk_1E9F78D28 = 0u;
  qword_1E9F78D38 = (uint64_t)dispatch_semaphore_create(0);
  byte_1E9F78D40 = 0;
  AMCP::Utility::Dispatch_Queue::create_serial_with_workloop((AMCP::Utility::Dispatch_Queue *)object, "HAL Test System Status Queue");
  AMCP::Utility::Dispatch_Queue::operator=((NSObject **)&xmmword_1E9F78C00, object[0]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)object);
}

void ADS::LevelControl::SetPropertyData(void *a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, float *a8, _DWORD *a9, unint64_t *a10, unsigned __int8 a11)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a4 == 1818453110)
  {
    if (a7 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long v47 = 136315394;
        *(void *)&v47[4] = "ADS_LevelControl.cpp";
        __int16 v48 = 1024;
        int v49 = 204;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::LevelControl::SetPropertyData: wrong size for the data for kAudioLevelControlPropertyDecibelValue", v47, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 561211770;
    }
    uint64_t v20 = (CAVolumeCurve *)(a1 + 19);
    double MaximumDB = CAVolumeCurve::GetMaximumDB((CAVolumeCurve *)(a1 + 19));
    if (a1[22]) {
      float v22 = *(float *)(a1[20] + 36);
    }
    else {
      float v22 = 0.0;
    }
    if (v22 < *a8) {
      float v22 = *a8;
    }
    if (v22 >= *(float *)&MaximumDB) {
      float v29 = *(float *)&MaximumDB;
    }
    else {
      float v29 = v22;
    }
    uint64_t v31 = a1[7];
    uint64_t v30 = a1 + 7;
    *(void *)long long v47 = v30;
    v47[8] = (*(uint64_t (**)(void *))(v31 + 16))(v30);
    *((_DWORD *)v30 + 22) = CAVolumeCurve::ConvertDBToRaw(v20, v29);
    *a9 = 1;
    int v16 = *((_DWORD *)v30 - 1);
    uint64_t v17 = (int *)a10[1];
    unint64_t v32 = a10[2];
    if ((unint64_t)v17 < v32)
    {
      int v19 = 1818453110;
      goto LABEL_27;
    }
    unint64_t v34 = 0x1555555555555555;
    __int16 v24 = (int *)*a10;
    unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v17 - *a10) >> 2);
    unint64_t v36 = v35 + 1;
    if (v35 + 1 > 0x1555555555555555) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - (void)v24) >> 2);
    if (2 * v37 > v36) {
      unint64_t v36 = 2 * v37;
    }
    if (v37 < 0xAAAAAAAAAAAAAAALL) {
      unint64_t v34 = v36;
    }
    if (v34)
    {
      unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v34);
      __int16 v24 = (int *)*a10;
      uint64_t v17 = (int *)a10[1];
    }
    else
    {
      uint64_t v38 = 0;
    }
    uint64_t v39 = (_DWORD *)(v34 + 12 * v35);
    unint64_t v40 = v34 + 12 * v38;
    *uint64_t v39 = 1818453110;
    v39[1] = v16;
    v39[2] = 0;
    unint64_t v33 = v39 + 3;
    if (v17 != v24)
    {
      do
      {
        uint64_t v43 = *(void *)(v17 - 3);
        v17 -= 3;
        int v44 = v17[2];
        *(void *)(v39 - 3) = v43;
        v39 -= 3;
        v39[2] = v44;
      }
      while (v17 != v24);
      goto LABEL_42;
    }
LABEL_43:
    *a10 = (unint64_t)v39;
    a10[1] = (unint64_t)v33;
    a10[2] = v40;
    if (v24) {
      operator delete(v24);
    }
    goto LABEL_45;
  }
  if (*(_DWORD *)a4 == 1818456950)
  {
    if (a7 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long v47 = 136315394;
        *(void *)&v47[4] = "ADS_LevelControl.cpp";
        __int16 v48 = 1024;
        int v49 = 188;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::LevelControl::SetPropertyData: wrong size for the data for kAudioLevelControlPropertyScalarValue", v47, 0x12u);
      }
      long long v45 = __cxa_allocate_exception(0x10uLL);
      *(void *)long long v45 = off_1F148A5D8;
      v45[2] = 561211770;
    }
    float v13 = *a8;
    uint64_t v15 = a1[7];
    std::vector<unsigned int> v14 = a1 + 7;
    *(void *)long long v47 = a1 + 7;
    v47[8] = (*(uint64_t (**)(void *))(v15 + 16))(a1 + 7);
    *((_DWORD *)v14 + 22) = CAVolumeCurve::ConvertScalarToRaw((CAVolumeCurve *)(v14 + 12), fminf(fmaxf(v13, 0.0), 1.0));
    *a9 = 1;
    int v16 = *((_DWORD *)v14 - 1);
    uint64_t v17 = (int *)a10[1];
    unint64_t v18 = a10[2];
    if ((unint64_t)v17 < v18)
    {
      int v19 = 1818456950;
LABEL_27:
      *uint64_t v17 = v19;
      v17[1] = v16;
      _OWORD v17[2] = 0;
      unint64_t v33 = v17 + 3;
LABEL_45:
      a10[1] = (unint64_t)v33;
      CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)v47);
      return;
    }
    unint64_t v23 = 0x1555555555555555;
    __int16 v24 = (int *)*a10;
    unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v17 - *a10) >> 2);
    unint64_t v26 = v25 + 1;
    if (v25 + 1 > 0x1555555555555555) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (void)v24) >> 2);
    if (2 * v27 > v26) {
      unint64_t v26 = 2 * v27;
    }
    if (v27 < 0xAAAAAAAAAAAAAAALL) {
      unint64_t v23 = v26;
    }
    if (v23)
    {
      unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v23);
      __int16 v24 = (int *)*a10;
      uint64_t v17 = (int *)a10[1];
    }
    else
    {
      uint64_t v28 = 0;
    }
    uint64_t v39 = (_DWORD *)(v23 + 12 * v25);
    unint64_t v40 = v23 + 12 * v28;
    *uint64_t v39 = 1818456950;
    v39[1] = v16;
    v39[2] = 0;
    unint64_t v33 = v39 + 3;
    if (v17 != v24)
    {
      do
      {
        uint64_t v41 = *(void *)(v17 - 3);
        v17 -= 3;
        int v42 = v17[2];
        *(void *)(v39 - 3) = v41;
        v39 -= 3;
        v39[2] = v42;
      }
      while (v17 != v24);
LABEL_42:
      __int16 v24 = (int *)*a10;
      goto LABEL_43;
    }
    goto LABEL_43;
  }

  ADS::BaseObject::SetPropertyData((uint64_t)a1, a2, a3, a4, a5, a6, a7, (uint64_t)a8, a9, a10, a11);
}

void sub_1BABBA844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ADS::LevelControl::GetPropertyData(ADS::LevelControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6, unsigned int a7, unsigned int *a8, float *a9)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  AudioObjectPropertySelector mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1818453109)
  {
    if (mSelector == 1818453110)
    {
      if (a7 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unint64_t v33 = 136315394;
          *(void *)&v33[4] = "ADS_LevelControl.cpp";
          __int16 v34 = 1024;
          int v35 = 128;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::LevelControl::GetPropertyData: not enough space for the return value of kAudioLevelControlPropertyDecibelValue for the volume control", v33, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = off_1F148A5D8;
        exception[2] = 561211770;
      }
      uint64_t v19 = *((void *)this + 7);
      unint64_t v18 = (char *)this + 56;
      *(void *)unint64_t v33 = (char *)this + 56;
      v33[8] = (*(uint64_t (**)(char *))(v19 + 16))((char *)this + 56);
      CAVolumeCurve::ConvertRawToDB((CAVolumeCurve *)(v18 + 96), *((_DWORD *)v18 + 22));
      goto LABEL_14;
    }
    if (mSelector != 1818456932)
    {
      if (mSelector == 1818456950)
      {
        if (a7 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)unint64_t v33 = 136315394;
            *(void *)&v33[4] = "ADS_LevelControl.cpp";
            __int16 v34 = 1024;
            int v35 = 118;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::LevelControl::GetPropertyData: not enough space for the return value of kAudioLevelControlPropertyScalarValue for the volume control", v33, 0x12u);
          }
          uint64_t v30 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v30 = off_1F148A5D8;
          v30[2] = 561211770;
        }
        uint64_t v13 = *((void *)this + 7);
        long long v12 = (char *)this + 56;
        *(void *)unint64_t v33 = (char *)this + 56;
        v33[8] = (*(uint64_t (**)(char *))(v13 + 16))((char *)this + 56);
        float v14 = CAVolumeCurve::ConvertRawToScalar((CAVolumeCurve *)(v12 + 96), *((_DWORD *)v12 + 22));
LABEL_14:
        *a9 = v14;
        *a8 = 4;
        CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)v33);
        return;
      }
      goto LABEL_20;
    }
    if (a7 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unint64_t v33 = 136315394;
        *(void *)&v33[4] = "ADS_LevelControl.cpp";
        __int16 v34 = 1024;
        int v35 = 145;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::LevelControl::GetPropertyData: not enough space for the return value of kAudioLevelControlPropertyDecibelValue for the volume control", v33, 0x12u);
      }
      float v29 = __cxa_allocate_exception(0x10uLL);
      *(void *)float v29 = off_1F148A5D8;
      v29[2] = 561211770;
    }
    uint64_t v20 = (ADS::LevelControl *)((char *)this + 152);
    int v21 = CAVolumeCurve::ConvertScalarToRaw((ADS::LevelControl *)((char *)this + 152), fminf(fmaxf(*a9, 0.0), 1.0));
    CAVolumeCurve::ConvertRawToDB(v20, v21);
    goto LABEL_31;
  }
  if (mSelector == 1818453106)
  {
    if (a7 <= 0xF)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unint64_t v33 = 136315394;
        *(void *)&v33[4] = "ADS_LevelControl.cpp";
        __int16 v34 = 1024;
        int v35 = 137;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::LevelControl::GetPropertyData: not enough space for the return value of kAudioLevelControlPropertyDecibelRange for the volume control", v33, 0x12u);
      }
      uint64_t v31 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v31 = off_1F148A5D8;
      v31[2] = 561211770;
    }
    unint64_t v23 = (ADS::LevelControl *)((char *)this + 152);
    if (*((void *)this + 22)) {
      double v24 = *(float *)(*((void *)this + 20) + 36);
    }
    else {
      double v24 = 0.0;
    }
    *(double *)a9 = v24;
    double MaximumDB = CAVolumeCurve::GetMaximumDB(v23);
    *((double *)a9 + 1) = *(float *)&MaximumDB;
    unsigned int v26 = 16;
    goto LABEL_32;
  }
  if (mSelector == 1818453107)
  {
    if (a7 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unint64_t v33 = 136315394;
        *(void *)&v33[4] = "ADS_LevelControl.cpp";
        __int16 v34 = 1024;
        int v35 = 160;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::LevelControl::GetPropertyData: not enough space for the return value of kAudioLevelControlPropertyConvertDecibelsToScalar for the volume control", v33, 0x12u);
      }
      unint64_t v32 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v32 = off_1F148A5D8;
      uint64_t v32[2] = 561211770;
    }
    float v15 = *a9;
    double v16 = CAVolumeCurve::GetMaximumDB((ADS::LevelControl *)((char *)this + 152));
    if (*((void *)this + 22)) {
      float v17 = *(float *)(*((void *)this + 20) + 36);
    }
    else {
      float v17 = 0.0;
    }
    if (v17 < v15) {
      float v17 = v15;
    }
    if (v17 < *(float *)&v16) {
      *(float *)&double v16 = v17;
    }
    int v27 = CAVolumeCurve::ConvertDBToRaw((ADS::LevelControl *)((char *)this + 152), *(float *)&v16);
    float v22 = CAVolumeCurve::ConvertRawToScalar((ADS::LevelControl *)((char *)this + 152), v27);
LABEL_31:
    *a9 = v22;
    unsigned int v26 = 4;
LABEL_32:
    *a8 = v26;
    return;
  }
LABEL_20:

  ADS::Control::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, (char *)a9);
}

uint64_t ADS::LevelControl::GetPropertyDataSize(ADS::LevelControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6)
{
  signed int mSelector = a4->mSelector;
  uint64_t v7 = 4;
  if ((int)a4->mSelector > 1818453106)
  {
    if (mSelector > 1818456931)
    {
      BOOL v8 = mSelector == 1818456932;
      unsigned __int16 v9 = 29558;
    }
    else
    {
      BOOL v8 = mSelector == 1818453107;
      unsigned __int16 v9 = 25718;
    }
    int v11 = v9 | 0x6C630000;
    if (!v8 && mSelector != v11) {
      return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
    }
    return v7;
  }
  if (mSelector == 1667591277 || mSelector == 1668506480) {
    return v7;
  }
  if (mSelector == 1818453106) {
    return 16;
  }
  return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
}

uint64_t ADS::LevelControl::IsPropertySettable(ADS::LevelControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  uint64_t v4 = 0;
  AudioObjectPropertySelector mSelector = a4->mSelector;
  if ((int)a4->mSelector <= 1818453109)
  {
    if (mSelector - 1818453106 >= 2 && mSelector != 1667591277 && mSelector != 1668506480) {
      return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
    }
    return v4;
  }
  switch(mSelector)
  {
    case 0x6C637376u:
      return 1;
    case 0x6C637364u:
      return v4;
    case 0x6C636476u:
      return 1;
  }
  return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
}

BOOL ADS::LevelControl::HasProperty(ADS::LevelControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  AudioObjectPropertySelector mSelector = a4->mSelector;
  if ((int)a4->mSelector <= 1818453105)
  {
    BOOL v6 = mSelector == 1667591277;
    int v7 = 1668506480;
  }
  else
  {
    BOOL v6 = mSelector - 1818453106 <= 4 && ((1 << (mSelector - 114)) & 0x13) != 0 || mSelector == 1818456932;
    int v7 = 1818456950;
  }
  return v6 || mSelector == v7 || ADS::BaseObject::HasProperty(this, a2, a3, a4);
}

void ADS::LevelControl::~LevelControl(ADS::LevelControl *this)
{
  ADS::LevelControl::~LevelControl(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F14628A8;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 21));
  *(void *)this = &unk_1F147E368;
  CADeprecated::CAMutex::~CAMutex((ADS::LevelControl *)((char *)this + 56));

  ADS::BaseObject::~BaseObject(this);
}

uint64_t std::map<CARawPoint,CADBPoint>::map[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  char v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  unsigned __int8 v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      BOOL v6 = *(uint64_t **)(a1 + 8);
      int v7 = v3;
      if (*(uint64_t ***)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v8 = *(void *)(a1 + 8);
      unsigned __int16 v9 = v3;
      if (v6)
      {
        do
        {
          int v7 = (uint64_t **)v8;
          uint64_t v8 = *(void *)(v8 + 8);
        }
        while (v8);
      }
      else
      {
        do
        {
          int v7 = (uint64_t **)v9[2];
          BOOL v10 = *v7 == (uint64_t *)v9;
          unsigned __int16 v9 = v7;
        }
        while (v10);
      }
      int v11 = *((_DWORD *)v5 + 7);
      if (*((_DWORD *)v7 + 7) < v11)
      {
LABEL_8:
        if (v6) {
          long long v12 = v7;
        }
        else {
          long long v12 = v3;
        }
        if (v6) {
          uint64_t v13 = v7 + 1;
        }
        else {
          uint64_t v13 = v3;
        }
      }
      else
      {
        long long v12 = v3;
        uint64_t v13 = v3;
        if (v6)
        {
          uint64_t v13 = v3;
          while (1)
          {
            while (1)
            {
              long long v12 = (uint64_t **)v6;
              int v17 = *((_DWORD *)v6 + 7);
              if (v11 >= v17) {
                break;
              }
              BOOL v6 = *v12;
              uint64_t v13 = v12;
              if (!*v12) {
                goto LABEL_15;
              }
            }
            if (v17 >= v11) {
              break;
            }
            uint64_t v13 = v12 + 1;
            BOOL v6 = v12[1];
            if (!v6) {
              goto LABEL_15;
            }
          }
        }
      }
      if (!*v13)
      {
LABEL_15:
        float v14 = (uint64_t *)operator new(0x30uLL);
        *(uint64_t *)((char *)v14 + 28) = *(void *)((char *)v5 + 28);
        *(uint64_t *)((char *)v14 + 36) = *(void *)((char *)v5 + 36);
        std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v14);
      }
      float v15 = (void *)v5[1];
      if (v15)
      {
        do
        {
          double v16 = v15;
          float v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          double v16 = (void *)v5[2];
          BOOL v10 = *v16 == (void)v5;
          unsigned __int8 v5 = v16;
        }
        while (!v10);
      }
      unsigned __int8 v5 = v16;
    }
    while (v16 != v4);
  }
  return a1;
}

void sub_1BABBB240(_Unwind_Exception *a1)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t ADS::LevelControl::LevelControl(uint64_t a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  BOOL v10 = ADS::Control::Control((ADS::Control *)a1, a2, a3, a4, a5, 1818588780);
  *(void *)BOOL v10 = &unk_1F14628A8;
  *((_DWORD *)v10 + 36) = a6;
  *((_DWORD *)v10 + 38) = *(_DWORD *)a7;
  std::map<CARawPoint,CADBPoint>::map[abi:ne180100]((uint64_t)v10 + 160, (void *)(a7 + 8));
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a7 + 32);
  return a1;
}

void sub_1BABBB2D0(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = &unk_1F147E368;
  CADeprecated::CAMutex::~CAMutex((CADeprecated::CAMutex *)(v1 + 56));
  ADS::BaseObject::~BaseObject((ADS::BaseObject *)v1);
  _Unwind_Resume(a1);
}

void ADS::BaseObject::AbortConfigChange(ADS::BaseObject *this, unint64_t a2, char *a3)
{
  *(void *)&long long v9 = (char *)this + 24;
  *((void *)&v9 + 1) = *(void *)(a3 + 12);
  ADS::PropertyManager::FindProperty((ADS::PropertyManager *)&v6, v9, *((_DWORD *)a3 + 5));
  if (!v6)
  {
    (*(void (**)(char *))(*(void *)a3 + 8))(a3);
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  (*(void (**)(uint64_t, char *))(*(void *)v6 + 32))(v6, a3);
  uint64_t v4 = v7;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1BABBB414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ADS::BaseObject::PerformConfigChange(ADS::BaseObject *this, unint64_t a2, char *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v12 = (char *)this + 24;
  *((void *)&v12 + 1) = *(void *)(a3 + 12);
  ADS::PropertyManager::FindProperty((ADS::PropertyManager *)&v6, v12, *((_DWORD *)a3 + 5));
  if (!v6)
  {
    std::__function::__value_func<int ()(void)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)(a3 + 24));
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 48))(v9);
    }
    (*(void (**)(char *))(*(void *)a3 + 8))(a3);
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  (*(void (**)(uint64_t, char *))(*(void *)v6 + 24))(v6, a3);
  uint64_t v4 = v7;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1BABBB5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  _Unwind_Resume(a1);
}

void ADS::BaseObject::SetPropertyData(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, unint64_t *a10, unsigned __int8 a11)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v46 = a1 + 24;
  *((void *)&v46 + 1) = *a4;
  ADS::PropertyManager::FindProperty((ADS::PropertyManager *)&v39, v46, *((_DWORD *)a4 + 2));
  float v15 = v39;
  if (!v39)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)blocuint64_t k = 136315394;
      *(void *)&block[4] = "ADS_PropertyManager.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 115;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::PropertyManager::SetPropertyData: property not found.", block, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  int v16 = (*(uint64_t (**)(uint64_t *))(*v39 + 56))(v39);
  uint64_t v17 = *v15;
  if (v16)
  {
    uint64_t v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v17 + 40))(v15, a8, a7);
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    *(void *)blocuint64_t k = MEMORY[0x1E4F143A8];
    *(void *)&block[8] = 0x40000000;
    *(void *)&block[16] = ___ZN3ADS15PropertyManager15SetPropertyDataEj26AudioObjectPropertyAddressPKvjNS_17SettabilityPolicyE_block_invoke;
    int v42 = &__block_descriptor_tmp_9181;
    int v44 = a2;
    uint64_t v43 = v18;
    uint64_t v19 = (dispatch_queue_t *)ADS::Simulator::sServerDefaultPriorityQueue;
    if (ADS::Simulator::sServerDefaultPriorityQueue)
    {
      unsigned __int8 v20 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 32));
      if (v20) {
        atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
      }
      dispatch_async(*v19, block);
    }
    int v21 = 0;
  }
  else
  {
    int v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, void))(v17 + 16))(v15, a8, a7, a11);
  }
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (v21)
  {
    *a9 = 1;
    unint64_t v23 = a10[1];
    unint64_t v22 = a10[2];
    if (v23 >= v22)
    {
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a10) >> 2);
      unint64_t v27 = v26 + 1;
      if (v26 + 1 > 0x1555555555555555) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a10) >> 2);
      if (2 * v28 > v27) {
        unint64_t v27 = 2 * v28;
      }
      if (v28 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v29 = 0x1555555555555555;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29) {
        unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v29);
      }
      else {
        uint64_t v30 = 0;
      }
      unint64_t v31 = v29 + 12 * v26;
      unint64_t v32 = v29 + 12 * v30;
      uint64_t v33 = *a4;
      *(_DWORD *)(v31 + 8) = *((_DWORD *)a4 + 2);
      *(void *)unint64_t v31 = v33;
      unint64_t v25 = v31 + 12;
      int v35 = (_DWORD *)*a10;
      __int16 v34 = (_DWORD *)a10[1];
      if (v34 != (_DWORD *)*a10)
      {
        do
        {
          uint64_t v36 = *(void *)(v34 - 3);
          v34 -= 3;
          int v37 = v34[2];
          *(void *)(v31 - 12) = v36;
          v31 -= 12;
          *(_DWORD *)(v31 + 8) = v37;
        }
        while (v34 != v35);
        __int16 v34 = (_DWORD *)*a10;
      }
      *a10 = v31;
      a10[1] = v25;
      a10[2] = v32;
      if (v34) {
        operator delete(v34);
      }
    }
    else
    {
      uint64_t v24 = *a4;
      *(_DWORD *)(v23 + 8) = *((_DWORD *)a4 + 2);
      *(void *)unint64_t v23 = v24;
      unint64_t v25 = v23 + 12;
    }
    a10[1] = v25;
  }
}

void sub_1BABBB964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ADS::BaseObject::GetPropertyData(ADS::BaseObject *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6, unsigned int a7, unsigned int *a8, char *a9)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  AudioObjectPropertySelector mSelector = a4->mSelector;
  if ((int)a4->mSelector <= 1668641651)
  {
    if (mSelector == 1650682995)
    {
      if (a7 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          uint64_t v30 = "ADS_BaseObject.cpp";
          __int16 v31 = 1024;
          int v32 = 127;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  BaseObject::GetPropertyData: not enough space for the return value of kAudioObjectPropertyBaseClass", buf, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = off_1F148A5D8;
        exception[2] = 561211770;
      }
      int v20 = *((_DWORD *)this + 4);
    }
    else
    {
      if (mSelector != 1668047219) {
        goto LABEL_23;
      }
      if (a7 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          uint64_t v30 = "ADS_BaseObject.cpp";
          __int16 v31 = 1024;
          int v32 = 134;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  BaseObject::GetPropertyData: not enough space for the return value of kAudioObjectPropertyClass", buf, 0x12u);
        }
        uint64_t v24 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v24 = off_1F148A5D8;
        v24[2] = 561211770;
      }
      int v20 = *((_DWORD *)this + 3);
    }
LABEL_21:
    *(_DWORD *)a9 = v20;
    *a8 = 4;
    return;
  }
  switch(mSelector)
  {
    case 0x73746476u:
      if (a7 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          uint64_t v30 = "ADS_BaseObject.cpp";
          __int16 v31 = 1024;
          int v32 = 141;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  BaseObject::GetPropertyData: not enough space for the return value of kAudioObjectPropertyOwner", buf, 0x12u);
        }
        unint64_t v22 = __cxa_allocate_exception(0x10uLL);
        *(void *)unint64_t v22 = off_1F148A5D8;
        v22[2] = 561211770;
      }
      int v20 = *((_DWORD *)this + 5);
      goto LABEL_21;
    case 0x6F776E64u:
      *a8 = 0;
      return;
    case 0x63757374u:
      unsigned int v13 = 0;
      if (a7 >= 0xC)
      {
        uint64_t v14 = *((void *)this + 3);
        if (*((void *)this + 4) != v14)
        {
          uint64_t v15 = 0;
          unint64_t v16 = 0;
          unint64_t v17 = a7 / 0xCuLL;
          uint64_t v18 = a9 + 8;
          do
          {
            *((void *)v18 - 1) = (*(uint64_t (**)(void))(**(void **)(v14 + v15) + 72))(*(void *)(v14 + v15));
            *uint64_t v18 = v19;
            if (++v16 >= v17) {
              break;
            }
            uint64_t v14 = *((void *)this + 3);
            v18 += 3;
            v15 += 16;
          }
          while ((*((void *)this + 4) - v14) >> 4 > v16);
          unsigned int v13 = 12 * v16;
        }
      }
      *a8 = v13;
      return;
  }
LABEL_23:
  *(void *)&long long v34 = (char *)this + 24;
  *((void *)&v34 + 1) = *(void *)&a4->mSelector;
  ADS::PropertyManager::FindProperty((ADS::PropertyManager *)&v27, v34, a4->mElement);
  int v21 = v27;
  if (!v27)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v30 = "ADS_PropertyManager.cpp";
      __int16 v31 = 1024;
      int v32 = 105;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::PropertyManager::GetPropertyData: property not found.", buf, 0x12u);
    }
    int v25 = 2003332927;
LABEL_42:
    unint64_t v26 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v26 = off_1F148A5D8;
    v26[2] = v25;
  }
  if ((**v27)(v27) > a7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v30 = "ADS_PropertyManager.cpp";
      __int16 v31 = 1024;
      int v32 = 106;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::PropertyManager::GetPropertyData: not enough space for return value of custom property.", buf, 0x12u);
    }
    int v25 = 561211770;
    goto LABEL_42;
  }
  *a8 = ((uint64_t (*)(unsigned int (***)(void), char *))(*v21)[1])(v21, a9);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
}

void sub_1BABBBF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ADS::BaseObject::GetPropertyDataSize(ADS::BaseObject *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  AudioObjectPropertySelector mSelector = a4->mSelector;
  uint64_t v7 = 4;
  if ((int)a4->mSelector <= 1668641651)
  {
    if (mSelector == 1650682995 || mSelector == 1668047219) {
      return v7;
    }
    goto LABEL_10;
  }
  if (mSelector == 1668641652) {
    return 12 * ((*((void *)this + 4) - *((void *)this + 3)) >> 4);
  }
  if (mSelector != 1937007734)
  {
    if (mSelector == 1870098020) {
      return 0;
    }
LABEL_10:
    *(void *)&long long v18 = (char *)this + 24;
    *((void *)&v18 + 1) = *(void *)&a4->mSelector;
    ADS::PropertyManager::FindProperty((ADS::PropertyManager *)&v11, v18, a4->mElement);
    if (!v11)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v14 = "ADS_PropertyManager.cpp";
        __int16 v15 = 1024;
        int v16 = 87;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::PropertyManager::GetPropertyDataSize: property not found.", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 2003332927;
    }
    uint64_t v7 = (**v11)(v11);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  return v7;
}

void sub_1BABBC100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

uint64_t ADS::BaseObject::IsPropertySettable(ADS::BaseObject *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  uint64_t v4 = 0;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  AudioObjectPropertySelector mSelector = a4->mSelector;
  if ((int)a4->mSelector <= 1668641651)
  {
    BOOL v6 = mSelector == 1650682995;
    int v7 = 1668047219;
  }
  else
  {
    BOOL v6 = mSelector == 1668641652 || mSelector == 1870098020;
    int v7 = 1937007734;
  }
  if (!v6 && mSelector != v7)
  {
    *(void *)&long long v18 = (char *)this + 24;
    *((void *)&v18 + 1) = *(void *)&a4->mSelector;
    ADS::PropertyManager::FindProperty((ADS::PropertyManager *)&v11, v18, a4->mElement);
    if (!v11)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v14 = "ADS_PropertyManager.cpp";
        __int16 v15 = 1024;
        int v16 = 96;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::PropertyManager::IsPropertySettable: property not found.", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 2003332927;
    }
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  return v4;
}

void sub_1BABBC2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

BOOL ADS::BaseObject::HasProperty(ADS::BaseObject *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  AudioObjectPropertySelector mSelector = a4->mSelector;
  uint64_t v5 = 1;
  if ((int)a4->mSelector <= 1668641651)
  {
    if (mSelector != 1650682995 && mSelector != 1668047219) {
      goto LABEL_12;
    }
  }
  else if (mSelector != 1937007734 && mSelector != 1870098020)
  {
    if (mSelector == 1668641652)
    {
      BOOL v7 = *((void *)this + 4) == *((void *)this + 3);
      return !v7;
    }
LABEL_12:
    *(void *)&long long v13 = (char *)this + 24;
    *((void *)&v13 + 1) = *(void *)&a4->mSelector;
    ADS::PropertyManager::FindProperty((ADS::PropertyManager *)&v11, v13, a4->mElement);
    uint64_t v9 = v11;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    BOOL v7 = v9 == 0;
    return !v7;
  }
  return v5;
}

void ADS::BaseObject::~BaseObject(ADS::BaseObject *this)
{
  *(void *)this = &unk_1F1462928;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 4);
    uint64_t v4 = (void *)*((void *)this + 3);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v2;
    operator delete(v4);
  }
}

void HALS_DSPRequest::~HALS_DSPRequest(HALS_DSPRequest *this)
{
  HALS_DSPRequest::~HALS_DSPRequest(this);

  JUMPOUT(0x1C1859840);
}

{
  void *v2;
  void **v3;

  *(void *)this = &unk_1F1462990;
  uint64_t v2 = (void *)*((void *)this + 87);
  if (v2)
  {
    *((void *)this + 88) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1F14867D0;
  uint64_t v3 = (void **)((char *)this + 656);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((HALS_DSPRequest *)((char *)this + 72));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((HALS_DSPRequest *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((HALS_DSPRequest *)((char *)this + 24));
  *(void *)this = &unk_1F1486820;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

void std::__tree<DSP_Host_Types::AudioProcessingType>::__assign_multi<std::__tree_const_iterator<DSP_Host_Types::AudioProcessingType,std::__tree_node<DSP_Host_Types::AudioProcessingType,void *> *,long>>(uint64_t a1, void *a2, void *a3)
{
  if (*(void *)(a1 + 16))
  {
    BOOL v6 = *(uint64_t **)a1;
    uint64_t v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    if (v6[1]) {
      uint64_t v9 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v9 = v6;
    }
    if (!v9)
    {
      int v20 = 0;
LABEL_29:
      std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v20);
      goto LABEL_30;
    }
    uint64_t v10 = std::__tree<DSP_Host_Types::AudioProcessingType>::_DetachedTreeCache::__detach_next((uint64_t)v9);
    if (a2 != a3)
    {
      uint64_t v11 = v9;
      long long v12 = a2;
      do
      {
        uint64_t v9 = v10;
        unsigned int v13 = *((_DWORD *)v12 + 7);
        *((_DWORD *)v11 + 7) = v13;
        uint64_t v14 = *v8;
        __int16 v15 = (uint64_t **)(a1 + 8);
        int v16 = (uint64_t **)(a1 + 8);
        if (*v8)
        {
          do
          {
            while (1)
            {
              __int16 v15 = (uint64_t **)v14;
              if (v13 >= *((_DWORD *)v14 + 7)) {
                break;
              }
              uint64_t v14 = (uint64_t *)*v14;
              int v16 = v15;
              if (!*v15) {
                goto LABEL_14;
              }
            }
            uint64_t v14 = (uint64_t *)v14[1];
          }
          while (v14);
          int v16 = v15 + 1;
        }
LABEL_14:
        std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v15, v16, v11);
        if (v10) {
          uint64_t v10 = std::__tree<DSP_Host_Types::AudioProcessingType>::_DetachedTreeCache::__detach_next((uint64_t)v10);
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v17 = (void *)v12[1];
        if (v17)
        {
          do
          {
            a2 = v17;
            uint64_t v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            a2 = (void *)v12[2];
            BOOL v18 = *a2 == (void)v12;
            long long v12 = a2;
          }
          while (!v18);
        }
        if (!v9) {
          break;
        }
        uint64_t v11 = v9;
        long long v12 = a2;
      }
      while (a2 != a3);
    }
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v9);
    if (v10)
    {
      for (uint64_t i = (uint64_t *)v10[2]; i; uint64_t i = (uint64_t *)i[2])
        uint64_t v10 = i;
      int v20 = v10;
      goto LABEL_29;
    }
  }
LABEL_30:
  if (a2 != a3)
  {
    int v21 = (uint64_t **)(a1 + 8);
    do
    {
      unint64_t v22 = (uint64_t *)operator new(0x20uLL);
      unsigned int v23 = *((_DWORD *)a2 + 7);
      *((_DWORD *)v22 + 7) = v23;
      uint64_t v24 = *v21;
      int v25 = (uint64_t **)(a1 + 8);
      unint64_t v26 = (uint64_t **)(a1 + 8);
      if (*v21)
      {
        do
        {
          while (1)
          {
            int v25 = (uint64_t **)v24;
            if (v23 >= *((_DWORD *)v24 + 7)) {
              break;
            }
            uint64_t v24 = (uint64_t *)*v24;
            unint64_t v26 = v25;
            if (!*v25) {
              goto LABEL_38;
            }
          }
          uint64_t v24 = (uint64_t *)v24[1];
        }
        while (v24);
        unint64_t v26 = v25 + 1;
      }
LABEL_38:
      std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v25, v26, v22);
      unint64_t v27 = (void *)a2[1];
      if (v27)
      {
        do
        {
          unint64_t v28 = v27;
          unint64_t v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          unint64_t v28 = (void *)a2[2];
          BOOL v18 = *v28 == (void)a2;
          a2 = v28;
        }
        while (!v18);
      }
      a2 = v28;
    }
    while (v28 != a3);
  }
}

uint64_t std::__tree<DSP_Host_Types::AudioProcessingType>::__emplace_unique_key_args<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::AudioProcessingType const&>(uint64_t **a1, unsigned int a2, int a3)
{
  BOOL v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        BOOL v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        return 0;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        BOOL v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return 1;
  }
}

uint64_t DSP_Host_Types::FormatDescription::operator=(uint64_t result, uint64_t a2)
{
  int v2 = 0;
  int v4 = *(_DWORD *)(a2 + 8);
  unsigned int v3 = *(_DWORD *)(a2 + 12);
  unsigned int v5 = *(_DWORD *)(a2 + 16);
  int v6 = *(_DWORD *)(a2 + 20);
  int v8 = *(_DWORD *)(a2 + 24);
  unsigned int v7 = *(_DWORD *)(a2 + 28);
  unsigned int v9 = *(_DWORD *)(a2 + 32);
  *(void *)(result + 40) = *(void *)a2;
  *(unsigned char *)(result + 48) = 1;
  *(_DWORD *)(result + 72) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(result + 76) = 1;
  *(_WORD *)(result + 96) = ((v3 & 0x20) == 0) | 0x100;
  if (v4 == 1819304813 && v6 == 1 && v8 == v5 && v9 >> 3 <= v5)
  {
    if (!v7) {
      goto LABEL_13;
    }
    if ((v3 & 0x20) == 0)
    {
      BOOL v12 = v5 == v5 / v7 * v7;
      v5 /= v7;
      if (!v12) {
        goto LABEL_13;
      }
    }
    int v2 = 0;
    if ((v3 & 2) == 0 && 8 * v5 == v9)
    {
      if (v3)
      {
        if (v5 == 4) {
          int v10 = 1;
        }
        else {
          int v10 = 4 * (v5 == 8);
        }
        if ((v3 & 0x1F84) != 0) {
          int v2 = 0;
        }
        else {
          int v2 = v10;
        }
      }
      else
      {
        if ((v3 & 4) == 0)
        {
LABEL_13:
          int v2 = 0;
          goto LABEL_14;
        }
        int v11 = (v3 >> 7) & 0x3F;
        if (v11 == 24 && v5 == 4)
        {
          int v2 = 3;
        }
        else if (v11 || v5 != 4)
        {
          BOOL v12 = v5 == 2 && v11 == 0;
          if (v12) {
            int v2 = 2;
          }
          else {
            int v2 = 0;
          }
        }
        else
        {
          int v2 = 5;
        }
      }
    }
  }
LABEL_14:
  *(_DWORD *)(result + 120) = v2;
  *(unsigned char *)(result + 124) = 1;
  return result;
}

uint64_t std::shared_ptr<DSP_Host_OffloadDictionary>::operator=[abi:ne180100]<DSP_Host_OffloadDictionary,std::default_delete<DSP_Host_OffloadDictionary>,void>(uint64_t a1, void *a2)
{
  if (*a2) {
    operator new();
  }
  *a2 = 0;
  unsigned int v3 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = 0uLL;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

uint64_t std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    int v2 = *(const void **)(result + 16);
    if (v2) {
      CFRelease(v2);
    }
    unsigned int v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    JUMPOUT(0x1C1859840);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<DSP_Host_OffloadDictionary  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__114default_deleteI26DSP_Host_OffloadDictionaryEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<DSP_Host_OffloadDictionary  *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](*(void *)(a1 + 24));
}

void std::__shared_ptr_pointer<DSP_Host_OffloadDictionary  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void *std::__tree<DSP_Host_Types::AudioProcessingType>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    unsigned int v3 = (void *)*result;
    if (*result == a1)
    {
      *uint64_t result = 0;
      while (1)
      {
        int v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          int v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; unsigned int v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          unsigned int v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

void HALS_DSPRequest::CreateStreamConfiguration(void *a1, uint64_t a2, HALS_IODevice **a3, int a4)
{
  int v4 = a3;
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  NumberStreams = (AMCP::Log::Scope_Registry *)HALS_IODevice::GetNumberStreams(*a3, a4 == 1768845428);
  int v67 = (int)NumberStreams;
  unsigned int v7 = v4[1];
  if (v7)
  {
    int v63 = *((_DWORD *)v7 + 24);
    BOOL v65 = *(_DWORD *)(a2 + 680) == a4;
  }
  else
  {
    int v63 = 0;
    BOOL v65 = 0;
  }
  if (NumberStreams)
  {
    int v8 = 0;
    unsigned int v9 = (void **)&v79;
    do
    {
      int v10 = v4;
      int v11 = (char *)operator new(0x180uLL);
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = 0;
      *(void *)int v11 = &unk_1F147F1E0;
      *((_OWORD *)v11 + 2) = 0u;
      *((_OWORD *)v11 + 4) = 0u;
      *((_OWORD *)v11 + 5) = 0u;
      *((_OWORD *)v11 + 6) = 0u;
      *((_OWORD *)v11 + 7) = 0u;
      *((_OWORD *)v11 + 8) = 0u;
      *((_OWORD *)v11 + 9) = 0u;
      *((_OWORD *)v11 + 10) = 0u;
      *((_OWORD *)v11 + 11) = 0u;
      *((_OWORD *)v11 + 12) = 0u;
      *((_OWORD *)v11 + 13) = 0u;
      *((_OWORD *)v11 + 14) = 0u;
      *((_OWORD *)v11 + 15) = 0u;
      *((_OWORD *)v11 + 16) = 0u;
      *((_OWORD *)v11 + 17) = 0u;
      *((_OWORD *)v11 + 18) = 0u;
      *((_OWORD *)v11 + 19) = 0u;
      *((_OWORD *)v11 + 20) = 0u;
      *((_OWORD *)v11 + 21) = 0u;
      *((_OWORD *)v11 + 22) = 0u;
      *((_OWORD *)v11 + 23) = 0u;
      *((_OWORD *)v11 + 3) = 0u;
      *((void *)v11 + 3) = &unk_1F147EC70;
      std::string::basic_string[abi:ne180100]<0>(&__p, "stream semantic");
      DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::StreamSemanticType,DSP_Host_Types::StringLookup_StreamSemantic,unsigned int>::StringifiedKvp((void *)v11 + 6, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::FormatDescription *)(v11 + 136), "current format");
      BOOL v12 = (DSP_Dictionariable::DictionariableKvp *)v9;
      std::string::basic_string[abi:ne180100]<0>(&__p, "stream id");
      DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)v11 + 36, (uint64_t)&__p);
      *((void *)v11 + 36) = &unk_1F147F0A0;
      v11[304] = 0;
      v11[328] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "latency samples");
      DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)v11 + 42, (uint64_t)&__p);
      *((void *)v11 + 42) = &unk_1F1487570;
      v11[352] = 0;
      v11[356] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      *((void *)v11 + 45) = 0;
      *((void *)v11 + 46) = 0;
      *((void *)v11 + 47) = 0;
      *(void *)&long long v72 = v11 + 24;
      *((void *)&v72 + 1) = v11;
      unsigned int v13 = (HALS_Stream *)HALS_IODevice::CopyStreamByIndex(*v4, a4 == 1768845428, v8);
      uint64_t v14 = (unsigned int *)v13;
      if (!v13 || HALS_Stream::GetTerminalType(v13) == 1768843885) {
        goto LABEL_83;
      }
      HALS_Stream::GetCurrentVirtualFormat((HALS_Stream *)v14, &v71);
      DSP_Host_Types::FormatDescription::operator=((uint64_t)(v11 + 136), (uint64_t)&v71);
      std::to_string(&__p, v14[4]);
      std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>((std::string *)(v11 + 304), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (*((unsigned char *)v4 + 20))
      {
        float v15 = *((float *)v4 + 4);
        double mSampleRate = v71.mSampleRate;
        *((_DWORD *)v11 + 88) = (v15
                                             / mSampleRate
                                             * (double)HALS_Stream::GetStreamLatencyFrames((HALS_Stream *)v14));
        v11[356] = 1;
        *((double *)v11 + 22) = *((float *)v4 + 4);
        v11[184] = 1;
        unint64_t v18 = *((void *)v11 + 46);
        unint64_t v17 = *((void *)v11 + 47);
        if (v18 >= v17)
        {
          uint64_t v37 = *((void *)v11 + 45);
          unint64_t v38 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v18 - v37) >> 3);
          unint64_t v39 = v38 + 1;
          if (v38 + 1 > 0x1AF286BCA1AF286) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v40 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v17 - v37) >> 3);
          if (2 * v40 > v39) {
            unint64_t v39 = 2 * v40;
          }
          uint64_t v41 = (char *)(v40 >= 0xD79435E50D7943 ? 0x1AF286BCA1AF286 : v39);
          int v80 = v11 + 376;
          if (v41) {
            uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DSP_Host_Types::FormatDescription>>((unint64_t)v41);
          }
          else {
            uint64_t v42 = 0;
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v41[152 * v38];
          __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
          int v79 = &v41[152 * v42];
          DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::FormatDescription *)__p.__r_.__value_.__l.__size_, (const DSP_Host_Types::FormatDescription *)(v11 + 136));
          __p.__r_.__value_.__r.__words[2] += 152;
          std::vector<DSP_Host_Types::FormatDescription>::__swap_out_circular_buffer((uint64_t *)v11 + 45, &__p);
          unint64_t v19 = *((void *)v11 + 46);
          std::__split_buffer<DSP_Host_Types::FormatDescription>::~__split_buffer((uint64_t)&__p);
        }
        else
        {
          DSP_Host_Types::FormatDescription::FormatDescription(*((DSP_Host_Types::FormatDescription **)v11 + 46), (const DSP_Host_Types::FormatDescription *)(v11 + 136));
          unint64_t v19 = v18 + 152;
          *((void *)v11 + 46) = v19;
        }
        *((void *)v11 + 46) = v19;
      }
      else
      {
        *((_DWORD *)v11 + 88) = HALS_Stream::GetStreamLatencyFrames((HALS_Stream *)v14);
        v11[356] = 1;
        uint64_t v20 = v14[4];
        __p.__r_.__value_.__r.__words[0] = 0x676C6F6273666D61;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
        unint64_t v21 = (*(unsigned int (**)(unsigned int *, uint64_t, std::string *, void, void, void))(*(void *)v14 + 104))(v14, v20, &__p, 0, 0, 0)/ 0x38uLL;
        std::vector<AudioStreamRangedDescription>::vector(v70, v21);
        uint64_t v22 = v14[4];
        __p.__r_.__value_.__r.__words[0] = 0x676C6F6273666D61;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
        LODWORD(v73) = 0;
        (*(void (**)(unsigned int *, uint64_t, std::string *, void, void **, void *, void, void, void))(*(void *)v14 + 112))(v14, v22, &__p, (56 * v21), &v73, v70[0], 0, 0, 0);
        if (v73 >= 0x38)
        {
          unsigned int v23 = v12;
          uint64_t v24 = 0;
          unint64_t v25 = 56 * (v73 / 0x38uLL);
          do
          {
            long long v26 = *(_OWORD *)((char *)v70[0] + v24 + 16);
            v68[0] = *(_OWORD *)((char *)v70[0] + v24);
            v68[1] = v26;
            uint64_t v69 = *(void *)((char *)v70[0] + v24 + 32);
            *(void *)&v68[0] = *(void *)((char *)v70[0] + v24 + 40);
            uint64_t v27 = v72;
            __p.__r_.__value_.__s.__data_[8] = 0;
            __p.__r_.__value_.__s.__data_[16] = 0;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1486968;
            std::string::basic_string[abi:ne180100]<0>(&v73, "sample rate");
            DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v23, (uint64_t)&v73);
            int v79 = (char *)&unk_1F1486A00;
            char v81 = 0;
            char v82 = 0;
            if (SHIBYTE(v75) < 0) {
              operator delete(v73);
            }
            std::string::basic_string[abi:ne180100]<0>(&v73, "channels");
            DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v83, (uint64_t)&v73);
            v83[0] = &unk_1F1487570;
            char v84 = 0;
            char v85 = 0;
            if (SHIBYTE(v75) < 0) {
              operator delete(v73);
            }
            std::string::basic_string[abi:ne180100]<0>(&v73, "is interleaved");
            DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v86, (uint64_t)&v73);
            v86[0] = &unk_1F1486878;
            __int16 v87 = 0;
            if (SHIBYTE(v75) < 0) {
              operator delete(v73);
            }
            std::string::basic_string[abi:ne180100]<0>(&v73, "common pcm format");
            DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v88, (uint64_t)&v73);
            v88[0] = &unk_1F1487570;
            char v89 = 0;
            char v90 = 0;
            if (SHIBYTE(v75) < 0) {
              operator delete(v73);
            }
            uint64_t v91 = 0;
            uint64_t v92 = 0;
            uint64_t v93 = 0;
            DSP_Host_Types::FormatDescription::operator=((uint64_t)&__p, (uint64_t)v68);
            unint64_t v29 = *(void *)(v27 + 344);
            unint64_t v28 = *(void *)(v27 + 352);
            if (v29 >= v28)
            {
              uint64_t v31 = *(void *)(v27 + 336);
              unint64_t v32 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v29 - v31) >> 3);
              unint64_t v33 = v32 + 1;
              if (v32 + 1 > 0x1AF286BCA1AF286) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v34 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v28 - v31) >> 3);
              if (2 * v34 > v33) {
                unint64_t v33 = 2 * v34;
              }
              if (v34 >= 0xD79435E50D7943) {
                unint64_t v35 = 0x1AF286BCA1AF286;
              }
              else {
                unint64_t v35 = v33;
              }
              uint64_t v77 = v27 + 352;
              if (v35) {
                unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<DSP_Host_Types::FormatDescription>>(v35);
              }
              else {
                uint64_t v36 = 0;
              }
              uint64_t v73 = (void *)v35;
              uint64_t v74 = (DSP_Host_Types::FormatDescription *)(v35 + 152 * v32);
              uint64_t v75 = v74;
              unint64_t v76 = v35 + 152 * v36;
              DSP_Host_Types::FormatDescription::FormatDescription(v74, (const DSP_Host_Types::FormatDescription *)&__p);
              uint64_t v75 = (DSP_Host_Types::FormatDescription *)((char *)v75 + 152);
              std::vector<DSP_Host_Types::FormatDescription>::__swap_out_circular_buffer((uint64_t *)(v27 + 336), &v73);
              unint64_t v30 = *(void *)(v27 + 344);
              std::__split_buffer<DSP_Host_Types::FormatDescription>::~__split_buffer((uint64_t)&v73);
            }
            else
            {
              DSP_Host_Types::FormatDescription::FormatDescription(*(DSP_Host_Types::FormatDescription **)(v27 + 344), (const DSP_Host_Types::FormatDescription *)&__p);
              unint64_t v30 = v29 + 152;
              *(void *)(v27 + 344) = v30;
            }
            *(void *)(v27 + 344) = v30;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1486968;
            if (v91)
            {
              uint64_t v92 = v91;
              operator delete(v91);
            }
            DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v88);
            DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v86);
            DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v83);
            unsigned int v23 = v12;
            DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v12);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F14869A8;
            std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p.__r_.__value_.__l.__size_);
            v24 += 56;
          }
          while (v25 != v24);
        }
        if (v70[0])
        {
          v70[1] = v70[0];
          operator delete(v70[0]);
        }
        int v4 = v10;
      }
      if (v65)
      {
        if (v8 == v63)
        {
          unsigned int v43 = v14[4];
          int v44 = *(char **)(a2 + 704);
          unint64_t v45 = *(void *)(a2 + 712);
          if ((unint64_t)v44 >= v45)
          {
            __int16 v48 = *(char **)(a2 + 696);
            uint64_t v49 = (v44 - v48) >> 2;
            unint64_t v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 62) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v51 = v45 - (void)v48;
            if (v51 >> 1 > v50) {
              unint64_t v50 = v51 >> 1;
            }
            BOOL v52 = (unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v52) {
              unint64_t v53 = v50;
            }
            if (v53)
            {
              unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v53);
              int v44 = *(char **)(a2 + 704);
              __int16 v48 = *(char **)(a2 + 696);
            }
            else
            {
              uint64_t v54 = 0;
            }
            uint64_t v55 = (unsigned int *)(v53 + 4 * v49);
            *uint64_t v55 = v43;
            long long v46 = v55 + 1;
            if (v44 == v48)
            {
              long long v47 = (void *)a2;
            }
            else
            {
              long long v47 = (void *)a2;
              do
              {
                unsigned int v56 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *--uint64_t v55 = v56;
              }
              while (v44 != v48);
            }
            v47[87] = v55;
            v47[88] = v46;
            v47[89] = v53 + 4 * v54;
            if (v48) {
              operator delete(v48);
            }
          }
          else
          {
            *(_DWORD *)int v44 = v43;
            long long v46 = v44 + 4;
            long long v47 = (void *)a2;
          }
          BOOL v65 = 0;
          v47[88] = v46;
        }
        else
        {
          BOOL v65 = 1;
        }
      }
      else
      {
        BOOL v65 = 0;
      }
      uint64_t v57 = v72;
      *(_DWORD *)(v72 + 40) = 1;
      *(unsigned char *)(v57 + 44) = 1;
      if (HALS_Stream::IsReferenceStream((HALS_Stream *)v14))
      {
        *(_DWORD *)(v57 + 40) = 2;
        *(unsigned char *)(v57 + 44) = 1;
      }
      std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((uint64_t)a1, &v72);
      int v11 = (char *)*((void *)&v72 + 1);
      unsigned int v9 = (void **)v12;
      if (*((void *)&v72 + 1)) {
LABEL_83:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v11);
      ++v8;
    }
    while (v8 != v67);
  }
  if (v65)
  {
    AMCP::Log::Scope_Registry::get(NumberStreams);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    uint64_t v58 = *(NSObject **)__p.__r_.__value_.__l.__data_;
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
    {
      long long v59 = pthread_self();
      mach_port_t v60 = pthread_mach_thread_np(v59);
      int v61 = v4[1];
      int v62 = *((_DWORD *)v61 + 2);
      LODWORD(v61) = *((_DWORD *)v61 + 24);
      LODWORD(__p.__r_.__value_.__l.__data_) = 67110146;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v60;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_DSPRequest.cpp";
      WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = 197;
      LOWORD(v79) = 1024;
      *(_DWORD *)((char *)&v79 + 2) = v62;
      HIWORD(v79) = 1024;
      LODWORD(v80) = v61;
      _os_log_impl(&dword_1BAA78000, v58, OS_LOG_TYPE_INFO, "%6u %32s:%-5d [hal_dsp] A specified stream (Device ID %d / Index %d) no longer exists; io context update required.",
        (uint8_t *)&__p,
        0x24u);
    }
  }
}

void sub_1BABBD58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, DSP_Dictionariable::DictionariableKvp *a17, DSP_Dictionariable::DictionariableKvp *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a33);
  }
  a27 = a12;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Unwind_Resume(a1);
}

uint64_t HALS_Stream::GetTerminalType(HALS_Stream *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v3 = 0x676C6F627465726DLL;
  int v4 = 0;
  uint64_t v5 = 0;
  (*(void (**)(HALS_Stream *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)this + 112))(this, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5);
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>(std::string *this, const std::string *a2)
{
  if (this[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

uint64_t HALS_Stream::GetStreamLatencyFrames(HALS_Stream *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v3 = 0x676C6F626C746E63;
  int v4 = 0;
  uint64_t v5 = 0;
  (*(void (**)(HALS_Stream *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)this + 112))(this, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5);
}

BOOL HALS_Stream::IsReferenceStream(HALS_Stream *this)
{
  if (*((_DWORD *)this + 14) == 1) {
    return 1;
  }
  uint64_t v3 = *((unsigned int *)this + 4);
  uint64_t v8 = 0x676C6F6274617073;
  int v9 = 0;
  int v4 = (*(uint64_t (**)(HALS_Stream *, uint64_t, uint64_t *, void))(*(void *)this + 88))(this, v3, &v8, 0);
  BOOL result = 0;
  if (v4)
  {
    uint64_t v5 = *((unsigned int *)this + 4);
    uint64_t v6 = 0x676C6F6274617073;
    int v7 = 0;
    int v11 = 0;
    int v10 = 0;
    (*(void (**)(HALS_Stream *, uint64_t, uint64_t *, uint64_t, int *, int *, void, void, void))(*(void *)this + 112))(this, v5, &v6, 4, &v10, &v11, 0, 0, 0);
    return v11 != 0;
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DSP_Host_Types::FormatDescription>>(unint64_t a1)
{
  if (a1 >= 0x1AF286BCA1AF287) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(152 * a1);
}

uint64_t *std::vector<DSP_Host_Types::FormatDescription>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  for (uint64_t i = 152; ; i -= 152)
  {
    uint64_t v8 = v6 + i;
    if (v4 + i - 152 == v5) {
      break;
    }
    int v9 = (const DSP_Host_Types::FormatDescription *)(v4 + i - 304);
    BOOL result = (uint64_t *)DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::FormatDescription *)(v8 - 304), v9);
  }
  uint64_t v10 = v8 - 152;
  a2[1] = v10;
  uint64_t v11 = *v3;
  uint64_t *v3 = v10;
  a2[1] = v11;
  uint64_t v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = v3[2];
  uint64_t v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<DSP_Host_Types::FormatDescription>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 152);
    *(void *)(a1 + 16) = i - 152;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::StreamSemanticType,DSP_Host_Types::StringLookup_StreamSemantic,unsigned int>::StringifiedKvp(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = DSP_Dictionariable::DictionariableKvp::DictionariableKvp(a1, a2);
  *((unsigned char *)v3 + 16) = 0;
  *((unsigned char *)v3 + 20) = 0;
  void *v3 = &unk_1F147F0F8;
  v3[6] = 0;
  v3[10] = 0;
  {
    DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::kThisLookup[0] = 0;
    qword_1E9F7A328 = (uint64_t)"uninitialized";
    dword_1E9F7A330 = 1;
    qword_1E9F7A338 = (uint64_t)"general";
    dword_1E9F7A340 = 2;
    qword_1E9F7A348 = (uint64_t)"tap";
  }
  v5[0] = &unk_1F1486378;
  uint64_t v6 = v5;
  std::__function::__value_func<DSP_Host_Types::StreamSemanticType ()(char const*)>::swap[abi:ne180100](v5, a1 + 3);
  std::__function::__value_func<DSP_Host_Types::StreamSemanticType ()(char const*)>::~__value_func[abi:ne180100](v5);
  v5[0] = &unk_1F1486408;
  uint64_t v6 = v5;
  std::__function::__value_func<char const* ()(DSP_Host_Types::StreamSemanticType)>::swap[abi:ne180100](v5, a1 + 7);
  std::__function::__value_func<char const* ()(DSP_Host_Types::StreamSemanticType)>::~__value_func[abi:ne180100](v5);
  return a1;
}

void DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::StreamSemanticType,DSP_Host_Types::StringLookup_StreamSemantic,unsigned int>::~StringifiedKvp(DSP_Dictionariable::DictionariableKvp *a1)
{
  *(void *)a1 = &unk_1F147F0F8;
  std::__function::__value_func<char const* ()(DSP_Host_Types::StreamSemanticType)>::~__value_func[abi:ne180100]((void *)a1 + 7);
  std::__function::__value_func<DSP_Host_Types::StreamSemanticType ()(char const*)>::~__value_func[abi:ne180100]((void *)a1 + 3);

  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F147F0F8;
  std::__function::__value_func<char const* ()(DSP_Host_Types::StreamSemanticType)>::~__value_func[abi:ne180100]((void *)a1 + 7);
  std::__function::__value_func<DSP_Host_Types::StreamSemanticType ()(char const*)>::~__value_func[abi:ne180100]((void *)a1 + 3);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(a1);

  JUMPOUT(0x1C1859840);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::StreamConfiguration>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf) {
    CFRelease(cf);
  }
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1BABBDE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::StreamConfiguration>::description(uint64_t a1@<X0>, void *a2@<X8>)
{
  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_) {
    CFRelease(cf.__begin_);
  }
  CFStringRef v4 = CFCopyDescription(v8);
  CFStringRef v5 = v4;
  if (v4)
  {
    CFIndex Length = CFStringGetLength(v4);
    CFIndex v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    std::vector<char>::value_type __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if (v7) {
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    }
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1BABBDFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void *std::__function::__value_func<char const* ()(DSP_Host_Types::StreamSemanticType)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<DSP_Host_Types::StreamSemanticType ()(char const*)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::StreamSemanticType,DSP_Host_Types::StringLookup_StreamSemantic,unsigned int>::load_from(uint64_t a1, CFDictionaryRef *a2)
{
  if (*(unsigned char *)(a1 + 20)) {
    *(unsigned char *)(a1 + 20) = 0;
  }
  v9[0] = &unk_1F1487618;
  v9[1] = 0;
  uint64_t v10 = a2;
  if (applesauce::CF::details::has_key<__CFString const*&>(*a2, *(const void **)(a1 + 8)))
  {
    applesauce::CF::details::find_at_key<std::string,__CFString const*&>((uint64_t)__p, *v10, *(const void **)(a1 + 8));
    if (v8 >= 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    uint64_t v11 = v3;
    uint64_t v4 = *(void *)(a1 + 48);
    if (!v4) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    *(_DWORD *)(a1 + 16) = (*(uint64_t (**)(uint64_t, void ***))(*(void *)v4 + 48))(v4, &v11);
    *(unsigned char *)(a1 + 20) = 1;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
  }
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v9);
  return v5;
}

void DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::StreamSemanticType,DSP_Host_Types::StringLookup_StreamSemantic,unsigned int>::add_to(uint64_t a1, __CFDictionary **a2)
{
  if (!*(unsigned char *)(a1 + 20)) {
    return;
  }
  int v14 = *(_DWORD *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 80);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v5 = (char *)(*(uint64_t (**)(uint64_t, int *))(*(void *)v3 + 48))(v3, &v14);
  std::string::basic_string[abi:ne180100]<0>(&bytes, v5);
  if ((char)v13 < 0)
  {
    CFIndex v6 = numBytes;
    if (!numBytes)
    {
LABEL_12:
      operator delete(bytes);
      return;
    }
    p_bytes = bytes;
    CFIndex v7 = (const void **)(a1 + 8);
    if (!bytes)
    {
      CFStringRef v9 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    CFIndex v6 = v13;
    if (!v13) {
      return;
    }
    CFIndex v7 = (const void **)(a1 + 8);
    p_bytes = (const UInt8 *)&bytes;
  }
  CFStringRef v9 = CFStringCreateWithBytes(0, p_bytes, v6, 0x8000100u, 0);
  if (!v9)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_9:
  mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(*a2, *v7, v9);
  if (v9) {
    CFRelease(v9);
  }
  if ((char)v13 < 0) {
    goto LABEL_12;
  }
}

void sub_1BABBE39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<DSP_Host_Types::StreamConfiguration>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<DSP_Host_Types::StreamConfiguration>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F1E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<DSP_Host_Types::StreamConfiguration>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F1E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t HALS_DSPRequest::GetDataSourceType(HALS_DSPRequest *this, const HALS_Device *a2)
{
  int v2 = (HALS_Control *)(*(uint64_t (**)(HALS_DSPRequest *, uint64_t, const HALS_Device *, void))(*(void *)this + 640))(this, 1685287523, a2, 0);
  uint64_t v4 = v2;
  if (v2)
  {
    int SelectorControlValue = HALS_Control::GetSelectorControlValue(v2);
    unsigned int v6 = SelectorControlValue & 0xFFFFFF00;
    int v7 = SelectorControlValue;
    uint64_t v8 = 0x100000000;
  }
  else
  {
    uint64_t v8 = 0;
    int v7 = 0;
    unsigned int v6 = 0;
  }
  HALS_ObjectMap::ReleaseObject(v4, v3);
  return v8 | v6 | v7;
}

void sub_1BABBE57C(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_Control::GetSelectorControlValue(HALS_Control *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v3 = 0x676C6F6273636369;
  int v4 = 0;
  uint64_t v5 = 0;
  (*(void (**)(HALS_Control *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)this + 112))(this, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5);
}

void HALS_DSPRequest::CreateDeviceDescription(HALS_DSPRequest::IODeviceInfo const&)const::$_2::operator()(void **a1, int a2, uint64_t a3)
{
  int v10 = a2;
  uint64_t v11 = 1869968496;
  if ((*(unsigned int (**)(void, void, int *, void))(*(void *)**a1 + 88))(**a1, *(unsigned int *)(**a1 + 16), &v10, 0))
  {
    uint64_t v5 = (*(uint64_t (**)(void, void, int *, void, void, void))(*(void *)**a1 + 104))(**a1, *(unsigned int *)(**a1 + 16), &v10, 0, 0, 0);
    if (v5)
    {
      uint64_t v6 = v5;
      __x[0] = 0;
      std::vector<char>::vector(&v9, v5, __x);
      std::vector<char>::pointer begin = v9.__begin_;
      *(_DWORD *)std::vector<char>::value_type __x = 0;
      (*(void (**)(void, void, int *, uint64_t, std::vector<char>::value_type *, std::vector<char>::pointer, void, void, void))(*(void *)**a1 + 112))(**a1, *(unsigned int *)(**a1 + 16), &v10, v6, __x, v9.__begin_, 0, 0, 0);
      DSP_Host_Types::AudioChannelConfiguration::operator=(a3, begin);
      if (v9.__begin_)
      {
        v9.__end_ = v9.__begin_;
        operator delete(v9.__begin_);
      }
    }
  }
}

void sub_1BABBE75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::DeviceDescription>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf) {
    CFRelease(cf);
  }
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1BABBE828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::DeviceDescription>::description(uint64_t a1@<X0>, void *a2@<X8>)
{
  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_) {
    CFRelease(cf.__begin_);
  }
  CFStringRef v4 = CFCopyDescription(v8);
  CFStringRef v5 = v4;
  if (v4)
  {
    CFIndex Length = CFStringGetLength(v4);
    CFIndex v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    std::vector<char>::value_type __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if (v7) {
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    }
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1BABBE998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t std::__shared_ptr_emplace<DSP_Host_Types::DeviceDescription>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<DSP_Host_Types::DeviceDescription>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F418;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<DSP_Host_Types::DeviceDescription>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void DSP_Dictionariable::SingleKvp<std::string>::value(std::string *a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 40)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::size_type v2 = *(void *)(a2 + 24);
    uint64_t v3 = *(const std::string::value_type **)(a2 + 16);
    std::string::__init_copy_ctor_external(a1, v3, v2);
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 16);
    a1->__r_.__value_.__r.__words[2] = *(void *)(a2 + 32);
  }
}

uint64_t HALS_PlatformBehaviors_Impl::direct_test_mode_is_enabled(HALS_PlatformBehaviors_Impl *this)
{
  return 0;
}

uint64_t HALS_PlatformBehaviors_Impl::client_server_test_mode_is_enabled(HALS_PlatformBehaviors_Impl *this)
{
  return 0;
}

uint64_t HALS_PlatformBehaviors_Impl::system_port_is_shared(HALS_PlatformBehaviors_Impl *this)
{
  return 0;
}

BOOL Testing_PlatformBehaviors::direct_test_mode_is_enabled(Testing_PlatformBehaviors *this)
{
  return g_static_start_options == 1 && Testing_PlatformBehaviors::s_test_configuration != 3;
}

BOOL Testing_PlatformBehaviors::client_server_test_mode_is_enabled(Testing_PlatformBehaviors *this)
{
  return g_static_start_options == 1 && Testing_PlatformBehaviors::s_test_configuration == 3;
}

uint64_t Testing_PlatformBehaviors::get_system_port(Testing_PlatformBehaviors *this)
{
  uint64_t result = *((unsigned int *)this + 2);
  if (!result)
  {
    uint64_t result = HALB_MachPort::CreatePort((HALB_MachPort *)4);
    *((_DWORD *)this + 2) = result;
  }
  return result;
}

uint64_t Testing_PlatformBehaviors::system_port_is_shared(Testing_PlatformBehaviors *this)
{
  return 1;
}

uint64_t Testing_PlatformBehaviors::unset_system_port(uint64_t this)
{
  *(_DWORD *)(this + 8) = 0;
  return this;
}

uint64_t *Testing_PlatformBehaviors::get_tcc_and_input_status_handler(Testing_PlatformBehaviors *this)
{
  {
    if (v2)
    {
      Testing_TCC_And_Input_Status_Handler::Testing_TCC_And_Input_Status_Handler(v2);
    }
  }
  return &Testing_PlatformBehaviors::get_tcc_and_input_status_handler(void)const::tcc_handler;
}

BOOL Testing_PlatformBehaviors::get_default_device_behavior(Testing_PlatformBehaviors *this)
{
  return Testing_PlatformBehaviors::s_test_configuration == 6;
}

uint64_t Testing_PlatformBehaviors::get_settings_behavior(Testing_PlatformBehaviors *this)
{
  if (Testing_PlatformBehaviors::s_test_configuration == 5) {
    unsigned int v1 = 3;
  }
  else {
    unsigned int v1 = 0;
  }
  if (Testing_PlatformBehaviors::s_test_configuration == 4) {
    return 2;
  }
  else {
    return v1;
  }
}

BOOL Testing_PlatformBehaviors::get_load_audiohardwareplugins(Testing_PlatformBehaviors *this)
{
  return Testing_PlatformBehaviors::s_test_configuration != 2;
}

uint64_t Testing_PlatformBehaviors::get_stacked_channel_policy(Testing_PlatformBehaviors *this)
{
  return 1;
}

uint64_t Testing_PlatformBehaviors::get_device_list_visibility(Testing_PlatformBehaviors *this)
{
  return 0;
}

uint64_t Testing_PlatformBehaviors::get_device_context_connection(Testing_PlatformBehaviors *this)
{
  return 2 * (Testing_PlatformBehaviors::s_test_configuration != 3);
}

void Testing_PlatformBehaviors::~Testing_PlatformBehaviors(Testing_PlatformBehaviors *this)
{
}

uint64_t embedded_PlatformBehaviors::get_system_port(embedded_PlatformBehaviors *this)
{
  return 0;
}

uint64_t *embedded_PlatformBehaviors::get_tcc_and_input_status_handler(embedded_PlatformBehaviors *this)
{
  {
    embedded_PlatformBehaviors::get_tcc_and_input_status_handler(void)const::tcc_handler = (uint64_t)&unk_1F1462B38;
  }
  return &embedded_PlatformBehaviors::get_tcc_and_input_status_handler(void)const::tcc_handler;
}

uint64_t embedded_PlatformBehaviors::get_default_device_behavior(embedded_PlatformBehaviors *this)
{
  return 0;
}

uint64_t embedded_PlatformBehaviors::get_settings_behavior(embedded_PlatformBehaviors *this)
{
  return 0;
}

uint64_t embedded_PlatformBehaviors::get_load_audiohardwareplugins(embedded_PlatformBehaviors *this)
{
  return 1;
}

uint64_t embedded_PlatformBehaviors::get_stacked_channel_policy(embedded_PlatformBehaviors *this)
{
  return 1;
}

uint64_t embedded_PlatformBehaviors::get_device_list_visibility(embedded_PlatformBehaviors *this)
{
  return 1;
}

uint64_t embedded_PlatformBehaviors::get_device_context_connection(embedded_PlatformBehaviors *this)
{
  return 1;
}

void embedded_PlatformBehaviors::~embedded_PlatformBehaviors(embedded_PlatformBehaviors *this)
{
}

uint64_t *HALS_PlatformBehaviors::get_platform_behaviors(HALS_PlatformBehaviors *this)
{
  if (g_static_start_options == 1)
  {
    uint64_t v3 = &HALS_PlatformBehaviors::get_platform_behaviors(void)::testing;
      return &HALS_PlatformBehaviors::get_platform_behaviors(void)::testing;
    HALS_PlatformBehaviors::get_platform_behaviors(void)::testing = (uint64_t)&unk_1F1462A08;
    dword_1E9F78BE8 = 0;
    goto LABEL_11;
  }
  {
    uint64_t v3 = &HALS_PlatformBehaviors::get_platform_behaviors(void)::embedded;
    {
      HALS_PlatformBehaviors::get_platform_behaviors(void)::embedded = (uint64_t)&unk_1F1462AA0;
LABEL_11:
      __cxa_guard_release(v2);
      return v3;
    }
  }
  return &HALS_PlatformBehaviors::get_platform_behaviors(void)::embedded;
}

uint64_t HALS_Box::_CopyControlByDescription(HALS_Box *this)
{
  return 0;
}

uint64_t HALS_Box::_CopyControlByIndex(HALS_Box *this)
{
  return 0;
}

uint64_t HALS_Box::_GetNumberControls(HALS_Box *this)
{
  return 0;
}

void HALS_Box::GetPropertyData(HALS_Box *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, uint64_t *a6, unsigned int a7, uint64_t *a8, HALS_Client *a9)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1651861859)
  {
    if (mSelector > 1668575851)
    {
      if (mSelector == 1668575852)
      {
        uint64_t v27 = 0;
        unint64_t v28 = &v27;
        uint64_t v29 = 0x2000000000;
        int v30 = 0;
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&uint8_t buf[8] = 0x40000000;
        *(void *)&buf[16] = ___ZNK8HALS_Box17GetBoxControlListEjPvRj_block_invoke;
        unint64_t v32 = &unk_1E6230E18;
        unint64_t v33 = &v27;
        unint64_t v34 = this;
        LODWORD(v36) = a4;
        unint64_t v35 = a6;
        unint64_t v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Box *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v19, (uint64_t)buf);
        *a5 = 4 * *((_DWORD *)v28 + 6);
        _Block_object_dispose(&v27, 8);
        return;
      }
      if (mSelector == 1870098020)
      {
        uint64_t v27 = 0;
        unint64_t v28 = &v27;
        uint64_t v29 = 0x2000000000;
        int v30 = 0;
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&uint8_t buf[8] = 0x40000000;
        *(void *)&buf[16] = ___ZNK8HALS_Box45GetNumberOfControlsAndCopyIDsUsingClassFilterEjPKjPj_block_invoke;
        unint64_t v32 = &unk_1E6230DF0;
        unsigned int v37 = a7 >> 2;
        unint64_t v35 = a8;
        uint64_t v36 = a6;
        unint64_t v33 = &v27;
        unint64_t v34 = this;
        uint64_t v22 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Box *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v22, (uint64_t)buf);
        int v23 = *((_DWORD *)v28 + 6);
        _Block_object_dispose(&v27, 8);
        int v21 = 4 * v23;
        goto LABEL_46;
      }
      if (mSelector != 1953653102) {
        goto LABEL_49;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Box.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 334;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Box::GetPropertyData: bad property data size for kAudioBoxPropertyTransportType", buf, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = off_1F148A5D8;
        exception[2] = 561211770;
      }
    }
    else
    {
      switch(mSelector)
      {
        case 1651861860:
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_Box.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 325;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioObjectPropertyModelName", buf, 0x12u);
            }
            unint64_t v25 = __cxa_allocate_exception(0x10uLL);
            *(void *)unint64_t v25 = off_1F148A5D8;
            v25[2] = 561211770;
          }
          int v16 = (const void *)*((void *)this + 8);
          if (v16)
          {
            CFRetain(v16);
            uint64_t v17 = *((void *)this + 8);
          }
          else
          {
            uint64_t v17 = 0;
          }
          *a6 = v17;
          int v21 = 8;
          goto LABEL_46;
        case 1652060006:
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_Box.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 388;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Box::GetPropertyData: bad property data size for kAudioBoxPropertyHasAudio", buf, 0x12u);
            }
            uint64_t v20 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v20 = off_1F148A5D8;
            v20[2] = 561211770;
          }
          break;
        case 1652060014:
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_Box.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 379;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Box::GetPropertyData: bad property data size for kAudioBoxPropertyHasAudio", buf, 0x12u);
            }
            unsigned __int8 v13 = __cxa_allocate_exception(0x10uLL);
            *(void *)unsigned __int8 v13 = off_1F148A5D8;
            _OWORD v13[2] = 561211770;
          }
          break;
        default:
          goto LABEL_49;
      }
    }
LABEL_44:
    *(_DWORD *)a6 = 0;
LABEL_45:
    int v21 = 4;
LABEL_46:
    *a5 = v21;
    return;
  }
  if (mSelector > 1651010920)
  {
    switch(mSelector)
    {
      case 1651010921:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_Box.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 361;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Box::GetPropertyData: bad property data size for kAudioBoxPropertyHasAudio", buf, 0x12u);
          }
          unint64_t v18 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v18 = off_1F148A5D8;
          v18[2] = 561211770;
        }
        break;
      case 1651013225:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_Box.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 352;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Box::GetPropertyData: bad property data size for kAudioBoxPropertyHasAudio", buf, 0x12u);
          }
          long long v26 = __cxa_allocate_exception(0x10uLL);
          *(void *)long long v26 = off_1F148A5D8;
          v26[2] = 561211770;
        }
        break;
      case 1651536495:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_Box.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 370;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Box::GetPropertyData: bad property data size for kAudioBoxPropertyHasAudio", buf, 0x12u);
          }
          int v14 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v14 = off_1F148A5D8;
          _OWORD v14[2] = 561211770;
        }
        break;
      default:
        goto LABEL_49;
    }
    goto LABEL_44;
  }
  if (mSelector == 1650682915 || mSelector == 1650751011)
  {
    *a5 = 0;
    return;
  }
  if (mSelector == 1651007861)
  {
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_Box.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 343;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Box::GetPropertyData: bad property data size for kAudioBoxPropertyHasAudio", buf, 0x12u);
      }
      uint64_t v24 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v24 = off_1F148A5D8;
      v24[2] = 561211770;
    }
    *(_DWORD *)a6 = 1;
    goto LABEL_45;
  }
LABEL_49:

  HALS_Object::GetPropertyData((uint64_t)this, a2, (int *)a3, a4, (int *)a5, a6);
}

void sub_1BABBF754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNK8HALS_Box17GetBoxControlListEjPvRj_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  unsigned int v4 = *(_DWORD *)(a1 + 56) >> 2;
  unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 208))(v2);
  if (v5 < v4) {
    unsigned int v4 = v5;
  }
  if (v4)
  {
    uint64_t v6 = 0;
    unsigned int v7 = 0;
    do
    {
      CFTypeRef v8 = (HALS_ObjectMap *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 216))(v2, v6);
      if (v8) {
        *(_DWORD *)(v3 + 4 * v7++) = *((_DWORD *)v8 + 4);
      }
      HALS_ObjectMap::ReleaseObject(v8, v9);
      uint64_t v6 = (v6 + 1);
    }
    while (v4 != v6);
  }
  else
  {
    unsigned int v7 = 0;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v7;
}

void ___ZNK8HALS_Box45GetNumberOfControlsAndCopyIDsUsingClassFilterEjPKjPj_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 208))(v2);
  if (v3)
  {
    int v4 = v3;
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 216))(v2, v5);
      CFTypeRef v8 = (HALS_ObjectMap *)v6;
      unint64_t v9 = *(unsigned int *)(a1 + 64);
      uint64_t v10 = *(void *)(a1 + 48);
      if (v9) {
        BOOL v11 = v10 == 0;
      }
      else {
        BOOL v11 = 1;
      }
      if (v11) {
        goto LABEL_11;
      }
      unint64_t v12 = 0;
      unsigned __int8 v13 = (HALB_Info *)*(unsigned int *)(v6 + 20);
      do
      {
        BOOL IsSubClass = HALB_Info::IsSubClass(v13, *(_DWORD *)(v10 + 4 * v12));
        if (IsSubClass) {
          break;
        }
        ++v12;
      }
      while (v12 < v9);
      if (IsSubClass) {
LABEL_11:
      }
        *(_DWORD *)(*(void *)(a1 + 56)
                  + 4 * (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))++) = *((_DWORD *)v8 + 4);
      HALS_ObjectMap::ReleaseObject(v8, v7);
      uint64_t v5 = (v5 + 1);
    }
    while (v5 != v4);
  }
}

uint64_t HALS_Box::GetPropertyDataSize(HALS_Box *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, const void *a5, HALS_Client *a6)
{
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1651861859)
  {
    if (mSelector > 1651010920)
    {
      if (mSelector == 1651010921 || mSelector == 1651013225) {
        return 4;
      }
      int v7 = 1651536495;
    }
    else
    {
      if (mSelector == 1650682915 || mSelector == 1650751011) {
        return 0;
      }
      int v7 = 1651007861;
    }
    goto LABEL_16;
  }
  if (mSelector <= 1668575851)
  {
    if (mSelector == 1651861860) {
      return 8;
    }
    if (mSelector == 1652060006) {
      return 4;
    }
    int v7 = 1652060014;
    goto LABEL_16;
  }
  if (mSelector == 1668575852)
  {
    uint64_t v20 = 0;
    int v21 = &v20;
    uint64_t v22 = 0x2000000000;
    int v23 = 0;
    uint64_t v12 = MEMORY[0x1E4F143A8];
    uint64_t v13 = 0x40000000;
    int v14 = ___ZNK8HALS_Box17GetNumberControlsEv_block_invoke;
    float v15 = &unk_1E6230DA0;
    int v16 = &v20;
    uint64_t v17 = this;
    unint64_t v9 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Box *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v9, (uint64_t)&v12);
LABEL_22:
    int v11 = *((_DWORD *)v21 + 6);
    _Block_object_dispose(&v20, 8);
    return (4 * v11);
  }
  if (mSelector == 1870098020)
  {
    uint64_t v20 = 0;
    int v21 = &v20;
    uint64_t v22 = 0x2000000000;
    int v23 = 0;
    uint64_t v12 = MEMORY[0x1E4F143A8];
    uint64_t v13 = 0x40000000;
    int v14 = ___ZNK8HALS_Box35GetNumberOfControlsUsingClassFilterEjPKj_block_invoke;
    float v15 = &unk_1E6230DC8;
    unsigned int v19 = a4 >> 2;
    uint64_t v17 = this;
    unint64_t v18 = a5;
    int v16 = &v20;
    uint64_t v10 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Box *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v10, (uint64_t)&v12);
    goto LABEL_22;
  }
  int v7 = 1953653102;
LABEL_16:
  if (mSelector == v7) {
    return 4;
  }

  return HALS_Object::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
}

void sub_1BABBFC00(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK8HALS_Box17GetNumberControlsEv_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 208))(*(void *)(a1 + 40));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BABBFC70(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK8HALS_Box35GetNumberOfControlsUsingClassFilterEjPKj_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 208))(v2);
  if (v3)
  {
    int v4 = v3;
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 216))(v2, v5);
      CFTypeRef v8 = (HALS_ObjectMap *)v6;
      unint64_t v9 = *(unsigned int *)(a1 + 56);
      uint64_t v10 = *(void *)(a1 + 48);
      if (v9) {
        BOOL v11 = v10 == 0;
      }
      else {
        BOOL v11 = 1;
      }
      if (v11) {
        goto LABEL_11;
      }
      unint64_t v12 = 0;
      uint64_t v13 = (HALB_Info *)*(unsigned int *)(v6 + 20);
      do
      {
        BOOL IsSubClass = HALB_Info::IsSubClass(v13, *(_DWORD *)(v10 + 4 * v12));
        if (IsSubClass) {
          break;
        }
        ++v12;
      }
      while (v12 < v9);
      if (IsSubClass) {
LABEL_11:
      }
        ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      HALS_ObjectMap::ReleaseObject(v8, v7);
      uint64_t v5 = (v5 + 1);
    }
    while (v5 != v4);
  }
}

uint64_t HALS_Box::IsPropertySettable(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result = 0;
  int v4 = *a3;
  if (*a3 <= 1651536494)
  {
    if (v4 <= 1651007860)
    {
      BOOL v5 = v4 == 1650682915;
      int v6 = 1650751011;
    }
    else
    {
      BOOL v5 = v4 == 1651007861 || v4 == 1651010921;
      int v6 = 1651013225;
    }
LABEL_19:
    if (!v5 && v4 != v6) {
      return HALS_Object::IsPropertySettable(0, a2, a3);
    }
    return result;
  }
  if (v4 <= 1652060013)
  {
    BOOL v5 = v4 == 1651536495 || v4 == 1651861860;
    int v6 = 1652060006;
    goto LABEL_19;
  }
  if (v4 != 1953653102 && v4 != 1668575852)
  {
    if (v4 == 1652060014) {
      return 1;
    }
    return HALS_Object::IsPropertySettable(0, a2, a3);
  }
  return result;
}

uint64_t HALS_Box::HasProperty(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *a3;
  uint64_t result = 1;
  if (*a3 > 1652060005)
  {
    if (v3 > 1869638758)
    {
      if (v3 > 1937007733)
      {
        if (v3 == 1937007734) {
          return result;
        }
        int v5 = 1953653102;
      }
      else
      {
        if (v3 == 1869638759) {
          return result;
        }
        int v5 = 1870098020;
      }
    }
    else if (v3 > 1668047218)
    {
      if (v3 == 1668047219) {
        return result;
      }
      int v5 = 1668575852;
    }
    else
    {
      if (v3 == 1652060006) {
        return result;
      }
      int v5 = 1652060014;
    }
  }
  else
  {
    if (v3 > 1651010920)
    {
      if (v3 > 1651536494)
      {
        if (v3 == 1651536495) {
          return result;
        }
        int v5 = 1651861860;
        goto LABEL_25;
      }
      if (v3 == 1651010921) {
        return result;
      }
      unsigned __int16 v6 = 30313;
    }
    else
    {
      if (v3 <= 1650751010)
      {
        if (v3 == 1650682915) {
          return result;
        }
        int v5 = 1650682995;
        goto LABEL_25;
      }
      if (v3 == 1650751011) {
        return result;
      }
      unsigned __int16 v6 = 24949;
    }
    int v5 = v6 | 0x62680000;
  }
LABEL_25:
  if (v3 != v5) {
    return 0;
  }
  return result;
}

uint64_t HALS_Box::GetMIGDispatchQueue(HALS_Box *this)
{
  return *((void *)this + 7);
}

{
  return *((void *)this + 7);
}

uint64_t HALS_Box::GetCommandGate(HALS_Box *this)
{
  return *((void *)this + 6);
}

{
  return *((void *)this + 6);
}

void HALS_Box::~HALS_Box(HALS_Box *this)
{
  HALS_Box::~HALS_Box(this);

  JUMPOUT(0x1C1859840);
}

{
  HALB_Mutex *v2;
  AMCP::Utility::Dispatch_Queue *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F1462B98;
  uint64_t v2 = (HALB_Mutex *)*((void *)this + 6);
  if (v2)
  {
    HALB_Mutex::~HALB_Mutex(v2);
    MEMORY[0x1C1859840]();
  }
  int v3 = (AMCP::Utility::Dispatch_Queue *)*((void *)this + 7);
  if (v3)
  {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v3);
    MEMORY[0x1C1859840]();
  }
  CACFString::~CACFString((HALS_Box *)((char *)this + 64));

  HALS_Object::~HALS_Object(this);
}

void HALS_Box::HALS_Box(HALS_Box *this, HALS_DeviceManager *a2, const __CFString *a3, uint64_t a4, HALS_Object *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  HALS_Object::HALS_Object(this, 1633841016, 0, (uint64_t)a2, a5);
  *(void *)uint64_t v6 = &unk_1F1462B98;
  *(void *)(v6 + 4_Block_object_dispose(&a9, 8) = 0;
  *(void *)(v6 + 64) = a3;
  CFTypeRef v8 = (const __CFString **)(v6 + 64);
  *(void *)(v6 + 56) = 0;
  *(unsigned char *)(v6 + 72) = 1;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 12_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 20_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_OWORD *)(v6 + 28_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(v6 + 304) = 0u;
  *(_OWORD *)(v6 + 320) = 0u;
  if (a3)
  {
    *(_DWORD *)buf = 256;
    CACFString::GetCString(a3, (__CFString *)(v6 + 80), (char *)buf, v7);
    CFStringRef Length = *v8;
    if (*v8)
    {
      CFStringRef Length = (const __CFString *)CFStringGetLength(Length);
      int v10 = Length + 1;
    }
    else
    {
      int v10 = 1;
    }
    *(_DWORD *)float v15 = v10;
    MEMORY[0x1F4188790](Length);
    CACFString::GetCString(*v8, (__CFString *)&v15[-((v11 + 15) & 0x1FFFFFFF0) - 4], v15, v12);
    operator new[]();
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v17 = "HALS_Box.cpp";
    __int16 v18 = 1024;
    int v19 = 38;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Box::HALS_Box: all boxes have to have a UID", buf, 0x12u);
  }
  exception = __cxa_allocate_exception(0x10uLL);
  *(void *)exception = off_1F148A5D8;
  exception[2] = 1852797029;
}

void sub_1BABC03A8(_Unwind_Exception *a1)
{
  MEMORY[0x1C1859840](v4, 0x10A0C40CF3E2C79);
  MEMORY[0x1C1859810](v3, 0x1000C8077774924);
  CACFString::~CACFString(v2);
  HALS_Object::~HALS_Object(v1);
  _Unwind_Resume(a1);
}

CFIndex OS::CF::String::AsCString(CFIndex this, UInt8 *a2, uint64_t a3)
{
  *a2 = 0;
  CFIndex usedBufLen = 1;
  CFStringRef v3 = *(const __CFString **)(this + 8);
  if (v3)
  {
    v7.length = CFStringGetLength(*(CFStringRef *)(this + 8));
    v7.location = 0;
    this = CFStringGetBytes(v3, v7, 0x8000100u, 0, 0, a2, a3 - 1, &usedBufLen);
    a2[usedBufLen] = 0;
  }
  return this;
}

void sub_1BABC076C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BABC08C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DSP_ADM;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1BABC0B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContext_Impl::Start_ActivateDSP(HALS_IOContext_Impl *this)
{
  return 0;
}

uint64_t HALS_IOContext_Impl::CountTapsForUnitTests(HALS_IOContext_Impl *this)
{
  return 0;
}

uint64_t HALS_IOContext_Impl::ShouldBlockStartOnTapStart(HALS_IOContext_Impl *this)
{
  return 0;
}

void HALS_IOContext_Impl::GetHostedDSPProcessorPropertySetInterface(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

CFComparisonResult HALS_IOContext_MCP_Impl::GetOwningDeviceID(const __CFDictionary **this)
{
  if (this[14])
  {
    uint64_t v2 = (HALS_System *)CFStringCreateWithBytes(0, (const UInt8 *)"uid", 3, 0x8000100u, 0);
    float v15 = v2;
    if (!v2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFStringRef v3 = v2;
    CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"", 0, 0x8000100u, 0);
    if (!cf)
    {
      unint64_t v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v12, "Could not construct");
      __cxa_throw(v12, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v18, this[14], v3, &cf);
    if (cf) {
      CFRelease(cf);
    }
    CFRelease(v3);
  }
  else
  {
    CFTypeRef v18 = CFStringCreateWithBytes(0, (const UInt8 *)"", 0, 0x8000100u, 0);
    if (!v18)
    {
      uint64_t v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v13, "Could not construct");
      __cxa_throw(v13, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  uint64_t v4 = (HALS_System *)CFStringCreateWithBytes(0, (const UInt8 *)"", 0, 0x8000100u, 0);
  float v15 = v4;
  if (!v4)
  {
    int v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
    __cxa_throw(v10, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v5 = (const __CFString *)v18;
  CFComparisonResult v6 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)v18, (const __CFString **)&v15);
  CFRelease(v4);
  if (v6)
  {
    v14[0] = 0;
    v14[1] = 0;
    HALS_System::GetInstance(&v15, 0, v14);
    CFTypeRef v8 = (unsigned int *)HALS_System::CopyDeviceByUID(v15, v5, 0);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if (v8) {
      CFComparisonResult v6 = (unint64_t)v8[4];
    }
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v8, v7);
    if (v8)
    {
      if (!v5) {
        return v6;
      }
      goto LABEL_18;
    }
  }
  CFComparisonResult v6 = kCFCompareEqualTo;
  if (v5) {
LABEL_18:
  }
    CFRelease(v5);
  return v6;
}

void sub_1BABC0E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t HALS_IOContext_MCP_Impl::GetSafetyOffset(HALS_IOContext_MCP_Impl *this, uint64_t a2)
{
  uint64_t result = *((void *)this + 32);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 120))(result);
    if (result) {
      return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 32) + 144))(*((void *)this + 32), a2);
    }
  }
  return result;
}

double HALS_IOContext_MCP_Impl::GetActualSampleRate(HALS_IOContext_MCP_Impl *this)
{
  uint64_t v2 = *((void *)this + 32);
  if (!v2 || !(*(unsigned int (**)(uint64_t))(*(void *)v2 + 120))(v2)) {
    return 0.0;
  }
  CFStringRef v3 = *(void (**)(void))(**((void **)this + 32) + 152);

  v3();
  return result;
}

__n128 HALS_IOContext_MCP_Impl::GetStreamInfo(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int a5)
{
  unsigned int v5 = a3 / 0x38;
  uint64_t v6 = a1 + 24 * a5;
  uint64_t v7 = *(void *)(v6 + 192);
  uint64_t v8 = *(void *)(v6 + 200);
  unint64_t v9 = (void *)(v6 + 192);
  unsigned int v10 = -991146299 * ((unint64_t)(v8 - v7) >> 3);
  if (a3 / 0x38 >= v10) {
    unsigned int v5 = v10;
  }
  *a4 = v5;
  if (v5)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    uint64_t v16 = a2 + 8;
    do
    {
      uint64_t v17 = (long long *)(*v9 + v14);
      unsigned int owning_device_for_stream = HALS_IOContext_MCP_Impl::get_owning_device_for_stream(a1, a5, v15);
      uint64_t v19 = *((void *)v17 + 4);
      long long v21 = *v17;
      __n128 result = (__n128)v17[1];
      *(_DWORD *)(v16 - _Block_object_dispose(&a9, 8) = owning_device_for_stream;
      *(_DWORD *)(v16 - 4) = a5;
      *(void *)uint64_t v16 = 0;
      *(_OWORD *)(v16 + _Block_object_dispose(&a9, 8) = v21;
      *(void *)(v16 + 40) = v19;
      *(__n128 *)(v16 + 24) = result;
      ++v15;
      v16 += 56;
      v14 += 104;
    }
    while (v15 < *a4);
  }
  return result;
}

uint64_t **HALS_IOContext_MCP_Impl::get_owning_device_for_stream(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v32 = 0x676C6F626E756964;
  LODWORD(v33) = 0;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 56);
  if (v6 && (uint64_t v7 = std::__shared_weak_count::lock(v6)) != 0)
  {
    uint64_t v8 = v7;
    unint64_t v9 = *(int8x8_t **)(a1 + 48);
    if (v9) {
      AMCP::Core::Core::call_operation_function<applesauce::CF::StringRef>((AMCP::Log::Scope_Registry *)&v34, v9, (unsigned int *)&v32);
    }
    else {
      CFStringRef v34 = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    CFStringRef v34 = 0;
  }
  v31[0] = 0;
  v31[1] = 0;
  HALS_System::GetInstance(&v29, 0, v31);
  if (!v34)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v10 = *(os_unfair_lock_s **)(v29.__r_.__value_.__r.__words[0] + 1392);
  applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, v34);
  os_unfair_lock_lock(v10 + 4);
  HALS_IOContext_Manager_Impl::find_wires_for_context(&v32, (uint64_t)&v10[6], (uint64_t)&__p);
  os_unfair_lock_unlock(v10 + 4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v29.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v29.__r_.__value_.__l.__size_);
  }
  uint64_t v11 = v32;
  uint64_t v12 = v33;
  if (v32 == v33)
  {
LABEL_50:
    hal_object_id_for_device_uid = 0;
  }
  else
  {
    BOOL v13 = a2 == 0;
    int v14 = a2 == 0;
    if (a2) {
      unint64_t v15 = "-in";
    }
    else {
      unint64_t v15 = "-out";
    }
    if (v13) {
      int64_t v16 = 4;
    }
    else {
      int64_t v16 = 3;
    }
    int v17 = *v15;
    while (1)
    {
      if (*(void *)(v11 + 64) == a3 && *(_DWORD *)(v11 + 72) == v14)
      {
        if (*(char *)(v11 + 63) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v11 + 40), *(void *)(v11 + 48));
        }
        else {
          std::string __p = *(std::string *)(v11 + 40);
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int64_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int64_t size = __p.__r_.__value_.__l.__size_;
        }
        if (size >= v16)
        {
          long long v21 = (char *)p_p + size;
          uint64_t v22 = p_p;
          do
          {
            int64_t v23 = size - v16;
            if (v23 == -1) {
              break;
            }
            uint64_t v24 = (char *)memchr(v22, v17, v23 + 1);
            if (!v24) {
              break;
            }
            unint64_t v25 = v24;
            if (!memcmp(v24, v15, v16))
            {
              if (v25 != v21 && v25 - (char *)p_p != -1)
              {
                std::string::basic_string(&v29, &__p, 0, v25 - (char *)p_p, (std::allocator<char> *)&v35);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                std::string __p = v29;
              }
              break;
            }
            uint64_t v22 = (std::string *)(v25 + 1);
            int64_t size = v21 - (v25 + 1);
          }
          while (size >= v16);
        }
        v28[0] = 0;
        v28[1] = 0;
        HALS_System::GetInstance(&v29, 0, v28);
        hal_object_id_for_device_uid = HALS_IOContext_Manager::get_hal_object_id_for_device_uid(*(void *)(v29.__r_.__value_.__r.__words[0] + 1392), (unsigned __int8 *)&__p);
        if (v29.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v29.__r_.__value_.__l.__size_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (hal_object_id_for_device_uid) {
          break;
        }
      }
      v11 += 80;
      if (v11 == v12) {
        goto LABEL_50;
      }
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v34) {
    CFRelease(v34);
  }
  return hal_object_id_for_device_uid;
}

void sub_1BABC139C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::string __p = &a23;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  applesauce::CF::StringRef::~StringRef((const void **)(v23 - 96));
  _Unwind_Resume(a1);
}

void AMCP::Core::Core::call_operation_function<applesauce::CF::StringRef>(AMCP::Log::Scope_Registry *a1, int8x8_t *a2, unsigned int *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (*a3 == 707406378 || a3[1] == 707406378 || a3[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)uint64_t v31 = 2080;
      *(void *)&uint64_t v31[2] = "Core.h";
      __int16 v32 = 1024;
      int v33 = 198;
      __int16 v34 = 2080;
      *(void *)char v35 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v28, a2, a3);
  if (!v28)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v8 = **(NSObject ***)buf;
    if (*(void *)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      unint64_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)uint64_t v31 = 2080;
      *(void *)&uint64_t v31[2] = "Core.h";
      __int16 v32 = 1024;
      int v33 = 202;
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v35[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = applesauce::CF::StringRef, Argument_Types = <>]";
    uint64_t v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    int v37 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    int64_t v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  AMCP::Core::Operation::call_function<applesauce::CF::StringRef>((uint64_t)a1, v28);
  uint64_t v7 = v29;
  if (v29)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1BABC17B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 136);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext_MCP_Impl::GetHandleOverloadWithCatchup(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

uint64_t HALS_IOContext_MCP_Impl::GetIdentifySpeechDeviceToAllowDeviceRestart(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

uint64_t HALS_IOContext_MCP_Impl::CopyIOThreadOSWorkgroup(HALS_IOContext_MCP_Impl *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (!v2) {
    return 0;
  }
  CFStringRef v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  if (*((void *)this + 6))
  {
    HALS_IOContext_MCP_Impl::get_simple_mcp_property<2003267184u>((uint64_t)v8, this);
    uint64_t v6 = caulk::mach::details::retain_os_object(v9, v5);
    caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v8);
  }
  else
  {
    uint64_t v6 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v6;
}

void HALS_IOContext_MCP_Impl::get_simple_mcp_property<2003267184u>(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a2[7];
  if (v4)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v4);
    unsigned int v5 = v4;
    if (v4)
    {
      uint64_t v6 = (AMCP::Core::Core *)a2[6];
      if (v6)
      {
        AMCP::Core::Core::get_simple_required_property<2003267184u>(a1, v6);
LABEL_10:
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        return;
      }
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  uint64_t v7 = **(NSObject ***)buf;
  if (*(void *)v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v19);
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v9 = pthread_self();
    mach_port_t v10 = pthread_mach_thread_np(v9);
    int v11 = *(_DWORD *)(a2[5] + 16);
    HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&v15, (uint64_t)a2);
    CFStringRef v12 = v15;
    if (!v15)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v15);
    if (v17 >= 0) {
      mach_port_t v13 = __p;
    }
    else {
      mach_port_t v13 = (void **)__p[0];
    }
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v10;
    *(_WORD *)std::string v19 = 2080;
    *(void *)&_OWORD v19[2] = "HALS_IOContext_MCP_Impl.cpp";
    __int16 v20 = 1024;
    int v21 = 107;
    __int16 v22 = 1024;
    int v23 = v11;
    __int16 v24 = 2080;
    uint64_t v25 = v13;
    _os_log_debug_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    CFRelease(v12);
  }
  uint64_t v8 = MEMORY[0x1E4FB7EA8] + 16;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + _Block_object_dispose(&a9, 8) = 0u;
  *(void *)a1 = v8;
  if (v5) {
    goto LABEL_10;
  }
}

void sub_1BABC1B38(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void HALS_IOContext_MCP_Impl::get_debug_device_name(HALS_IOContext_MCP_Impl *this, uint64_t a2)
{
  if (!*(void *)(a2 + 112))
  {
    CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)"", 0, 0x8000100u, 0);
    *(void *)this = v6;
    if (v6) {
      return;
    }
LABEL_11:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v4 = CFStringCreateWithBytes(0, (const UInt8 *)"uid", 3, 0x8000100u, 0);
  cf[1] = v4;
  if (!v4) {
    goto LABEL_11;
  }
  CFStringRef v5 = v4;
  cf[0] = CFStringCreateWithBytes(0, (const UInt8 *)"", 0, 0x8000100u, 0);
  if (!cf[0])
  {
    uint64_t v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v7, "Could not construct");
    __cxa_throw(v7, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(this, *(const __CFDictionary **)(a2 + 112), v5, cf);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  CFRelease(v5);
}

void sub_1BABC1CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void AMCP::Core::Core::get_simple_required_property<2003267184u>(uint64_t a1, AMCP::Core::Core *this)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v23 = 0x676C6F6277676E70;
  int v24 = 0;
  has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::has_property(this, (const AMCP::Address *)&v23);
  if (!has_property)
  {
LABEL_17:
    LOBYTE(v30) = 0;
    char v35 = 0;
LABEL_18:
    AMCP::Log::Scope_Registry::get(has_property);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    __int16 v20 = **(NSObject ***)buf;
    if (*(void *)v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v37);
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      int v21 = pthread_self();
      mach_port_t v22 = pthread_mach_thread_np(v21);
      char v26 = 4;
      strcpy((char *)__p, "wgnp");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v22;
      *(_WORD *)int v37 = 2080;
      *(void *)&std::string v37[2] = "Core.h";
      *(_WORD *)&v37[10] = 1024;
      *(_DWORD *)&v37[12] = 391;
      *(_WORD *)&v37[16] = 2080;
      *(void *)&v37[18] = "optional_value.operator BOOL() == true";
      *(_WORD *)&v37[26] = 2080;
      *(void *)&v37[28] = __p;
      *(_WORD *)&v37[36] = 1024;
      strcpy(&v37[38], "bolg");
      v37[43] = 4;
      *(_DWORD *)&v37[44] = 0;
      _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v28, (int8x8_t *)this, (unsigned int *)&v23);
  CFStringRef v6 = v28;
  if (v28)
  {
    unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<caulk::mach::os_workgroup_interval_managed ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v7))
    {
      AMCP::Core::Operation::call_function<caulk::mach::os_workgroup_interval_managed>((uint64_t)buf, v6);
      memset(v33, 0, sizeof(v33));
      long long v32 = 0u;
      char v34 = 0;
      uint64_t v30 = MEMORY[0x1E4FB7EA8] + 16;
      uint64_t v31 = *(caulk::mach::details **)v37;
      *(void *)int v37 = 0;
      caulk::mach::details::release_os_object(0, v8);
      long long v9 = *(_OWORD *)v33;
      long long v10 = v32;
      uint64_t v11 = *(void *)&v33[16];
      long long v32 = *(_OWORD *)&v37[8];
      *(_OWORD *)int v33 = *(_OWORD *)&v37[24];
      *(void *)&v33[16] = *(void *)&v37[40];
      *(void *)&v37[40] = v11;
      *(_OWORD *)&v37[8] = v10;
      *(_OWORD *)&v37[24] = v9;
      LOBYTE(v11) = v33[24];
      v33[24] = v38;
      char v38 = v11;
      LOBYTE(v11) = v34;
      char v34 = v39;
      char v39 = v11;
      char v35 = 1;
      caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)buf);
LABEL_5:
      char v12 = 0;
      goto LABEL_10;
    }
    unint64_t v13 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v13))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)__p, v6);
      AMCP::Thing::convert_to<caulk::mach::os_workgroup_interval_managed>((uint64_t)buf, (uint64_t)__p);
      memset(v33, 0, sizeof(v33));
      long long v32 = 0u;
      char v34 = 0;
      uint64_t v30 = MEMORY[0x1E4FB7EA8] + 16;
      uint64_t v31 = *(caulk::mach::details **)v37;
      *(void *)int v37 = 0;
      caulk::mach::details::release_os_object(0, v14);
      long long v15 = *(_OWORD *)v33;
      long long v16 = v32;
      uint64_t v17 = *(void *)&v33[16];
      long long v32 = *(_OWORD *)&v37[8];
      *(_OWORD *)int v33 = *(_OWORD *)&v37[24];
      *(void *)&v33[16] = *(void *)&v37[40];
      *(void *)&v37[40] = v17;
      *(_OWORD *)&v37[8] = v16;
      *(_OWORD *)&v37[24] = v15;
      LOBYTE(v17) = v33[24];
      v33[24] = v38;
      char v38 = v17;
      LOBYTE(v17) = v34;
      char v34 = v39;
      char v39 = v17;
      char v35 = 1;
      caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)buf);
      if (v27) {
        v27(0, __p, 0, 0);
      }
      goto LABEL_5;
    }
  }
  char v12 = 1;
LABEL_10:
  has_property = (AMCP::Log::Scope_Registry *)v29;
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (v12) {
    goto LABEL_17;
  }
  if (!v35) {
    goto LABEL_18;
  }
  *(void *)a1 = MEMORY[0x1E4FB7EA0] + 16;
  uint64_t v18 = caulk::mach::details::retain_os_object(v31, v5);
  long long v19 = *(_OWORD *)v33;
  *(_OWORD *)(a1 + 16) = v32;
  *(_OWORD *)(a1 + 32) = v19;
  *(_OWORD *)(a1 + 41) = *(_OWORD *)&v33[9];
  *(void *)a1 = MEMORY[0x1E4FB7EA8] + 16;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v18;
  *(unsigned char *)(a1 + 57) = v34;
  if (v35) {
    caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&v30);
  }
}

void sub_1BABC20F8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContext_MCP_Impl::GetIOThreadOSWorkgroup(HALS_IOContext_MCP_Impl *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (!v2) {
    return 0;
  }
  CFStringRef v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  CFStringRef v4 = v3;
  if (*((void *)this + 6))
  {
    HALS_IOContext_MCP_Impl::get_simple_mcp_property<2003267184u>((uint64_t)v7, this);
    uint64_t v5 = v8;
    caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v7);
  }
  else
  {
    uint64_t v5 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v5;
}

void HALS_IOContext_MCP_Impl::SetIOThreadOSWorkgroup(HALS_IOContext_MCP_Impl *this, os_workgroup_s *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  CFStringRef v3 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      CFStringRef v6 = v5;
      if (!*((void *)this + 6))
      {
LABEL_20:
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        return;
      }
      caulk::mach::os_workgroup_interval_managed::from_get((caulk::mach::os_workgroup_interval_managed *)&v27, a2);
      unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 7);
      if (v7)
      {
        unint64_t v7 = std::__shared_weak_count::lock(v7);
        uint64_t v8 = v7;
        if (v7)
        {
          uint64_t v9 = (int8x8_t *)*((void *)this + 6);
          if (v9)
          {
            uint64_t v25 = 0x676C6F6277676E70;
            int v26 = 0;
            if (AMCP::Core::Core::is_property_settable(v9, (const AMCP::Address *)&v25))
            {
              AMCP::Core::Core::find_operation((AMCP::Core::Core *)&__p, v9, (unsigned int *)&v25);
              long long v10 = __p;
              if (__p)
              {
                unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>();
                if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v10, v11))
                {
                  AMCP::Core::Operation::call_function<void,caulk::mach::os_workgroup_interval_managed const&>(v10, (uint64_t)&v27);
                }
                else
                {
                  unint64_t v20 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
                  if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v10, v20))
                  {
                    std::string v29 = 0;
                    memset(buf, 0, sizeof(buf));
                    AMCP::Implementation::Outboard_Storage<caulk::mach::os_workgroup_interval_managed>::construct<caulk::mach::os_workgroup_interval_managed&>((uint64_t)buf);
                  }
                }
              }
              if (v23) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v23);
              }
            }
LABEL_18:
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
LABEL_19:
            caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&v27);
            unint64_t v13 = (unsigned int *)*((void *)this + 5);
            long long v14 = (HALS_NotificationManager *)v13[4];
            *(void *)&v27.signed int mSelector = 0x676C6F626F737767;
            v27.mElement = 0;
            HALS_Object::PropertiesChanged((HALS_Object *)v13, v14, 0, 1u, &v27);
            goto LABEL_20;
          }
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      char v12 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        long long v15 = pthread_self();
        mach_port_t v16 = pthread_mach_thread_np(v15);
        int v17 = *(_DWORD *)(*((void *)this + 5) + 16);
        HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&v25, (uint64_t)this);
        CFStringRef v18 = (const __CFString *)v25;
        if (!v25)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)v25);
        if (v24 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v16;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "HALS_IOContext_MCP_Impl.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = 121;
        *(_WORD *)&unsigned char buf[24] = 1024;
        *(_DWORD *)&buf[26] = v17;
        *(_WORD *)&buf[30] = 2080;
        std::string v29 = p_p;
        _os_log_debug_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
        if (v24 < 0) {
          operator delete(__p);
        }
        CFRelease(v18);
      }
      if (!v8) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
  }
}

void sub_1BABC24B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t caulk::mach::os_workgroup_interval_managed::from_get(caulk::mach::os_workgroup_interval_managed *this, os_workgroup_s *a2)
{
  uint64_t v3 = caulk::mach::details::retain_os_object(a2, a2);
  caulk::mach::details::release_os_object(0, v4);
  *(void *)this = MEMORY[0x1E4FB7EA0] + 16;
  *((void *)this + 1) = v3;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 41) = 0u;
  caulk::mach::details::release_os_object(0, v5);
  *(void *)this = MEMORY[0x1E4FB7EA8] + 16;
  *((unsigned char *)this + 57) = 0;

  return caulk::mach::details::release_os_object(0, v6);
}

void HALS_IOContext_MCP_Impl::GetIOProcStreamUsage(HALS_IOContext_MCP_Impl *this, AudioHardwareIOProcStreamUsage *a2, unsigned int *a3, char a4)
{
  uint64_t v15 = 0;
  mach_port_t v16 = &v15;
  uint64_t v17 = 0x2000000000;
  int v18 = 0;
  uint64_t v11 = 0;
  char v12 = &v11;
  uint64_t v13 = 0x2000000000;
  int v14 = 0;
  uint64_t v5 = *((void *)this + 5);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  void v9[2] = ___ZNK23HALS_IOContext_MCP_Impl20GetIOProcStreamUsageER30AudioHardwareIOProcStreamUsageRjb_block_invoke;
  v9[3] = &unk_1E6230E80;
  char v10 = a4;
  v9[6] = this;
  void v9[7] = a3;
  v9[8] = a2;
  v9[4] = &v15;
  v9[5] = &v11;
  CFStringRef v6 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v9);
  if (*((_DWORD *)v12 + 6))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    int v8 = *((_DWORD *)v12 + 6);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v8;
  }
  *a3 = *((_DWORD *)v16 + 6);
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(&v15, 8);
}

void sub_1BABC2734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK23HALS_IOContext_MCP_Impl20GetIOProcStreamUsageER30AudioHardwareIOProcStreamUsageRjb_block_invoke(uint64_t result)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(result + 48);
  int v2 = *(unsigned __int8 *)(result + 72);
  uint64_t v3 = 0x4EC4EC4EC4EC4EC5
     * ((uint64_t)(*(void *)(v1 + 24 * *(unsigned __int8 *)(result + 72) + 200)
                - *(void *)(v1 + 24 * *(unsigned __int8 *)(result + 72) + 192)) >> 3);
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 330382100
                                                                  * ((uint64_t)(*(void *)(v1
                                                                                         + 24
                                                                                         * *(unsigned __int8 *)(result + 72)
                                                                                         + 200)
                                                                             - *(void *)(v1
                                                                                         + 24
                                                                                         * *(unsigned __int8 *)(result + 72)
                                                                                         + 192)) >> 3)
                                                                  + 12;
  if (**(_DWORD **)(result + 56) < *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v14 = "HALS_IOContext_MCP_Impl.cpp";
      __int16 v15 = 1024;
      int v16 = 1068;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDevicePropertyIOProcStreamUsage", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 561211770;
  }
  uint64_t v4 = *(void *)(result + 64);
  *(_DWORD *)(v4 + _Block_object_dispose(&a9, 8) = v3;
  if (v3)
  {
    unint64_t v5 = 0;
    uint64_t v6 = v1 + 64;
    BOOL v7 = v2 == 0;
    uint64_t v8 = 64;
    if (v7)
    {
      uint64_t v8 = 88;
      uint64_t v6 = v1 + 88;
    }
    unint64_t v9 = *(void *)(v6 + 8);
    uint64_t v10 = v4 + 12;
    do
    {
      if (v9 <= v5) {
        LODWORD(v11) = 1;
      }
      else {
        uint64_t v11 = (*(void *)(*(void *)(v1 + v8) + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1;
      }
      *(_DWORD *)(v10 + 4 * v5++) = v11;
    }
    while (v3 != v5);
  }
  return result;
}

void sub_1BABC2930(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    uint64_t v11 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      int v12 = v11[2];
    }
    else {
      int v12 = 2003329396;
    }
    *(_DWORD *)(*(void *)(*(void *)(a10 + 40) + 8) + 24) = v12;
    __cxa_end_catch();
    JUMPOUT(0x1BABC284CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContext_MCP_Impl::SetIOProcStreamUsage(HALS_IOContext_MCP_Impl *this, const AudioHardwareIOProcStreamUsage *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a3 <= 0xB)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      __int16 v15 = "HALS_IOContext_MCP_Impl.cpp";
      __int16 v16 = 1024;
      int v17 = 572;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::SetPropertyData: bad property data size for kAudioDevicePropertyIOProcStreamUsage", (uint8_t *)&v14, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 561211770;
  }
  unint64_t v4 = ((unint64_t)a3 + 0x3FFFFFFF4) >> 2;
  UInt32 mNumberStreams = a2->mNumberStreams;
  if (mNumberStreams >= v4) {
    unint64_t v4 = v4;
  }
  else {
    unint64_t v4 = mNumberStreams;
  }
  if (-991146299 * ((*((void *)this + 3 * a4 + 25) - *((void *)this + 3 * a4 + 24)) >> 3) < v4) {
    unint64_t v4 = -991146299 * ((*((void *)this + 3 * a4 + 25) - *((void *)this + 3 * a4 + 24)) >> 3);
  }
  if (v4)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 88;
    if (a4) {
      uint64_t v7 = 64;
    }
    uint64_t v8 = *(void *)((char *)this + v7);
    do
    {
      unint64_t v9 = v6 >> 6;
      uint64_t v10 = 1 << v6;
      if (a2->mStreamIsOn[v6]) {
        uint64_t v11 = *(void *)(v8 + 8 * v9) | v10;
      }
      else {
        uint64_t v11 = *(void *)(v8 + 8 * v9) & ~v10;
      }
      *(void *)(v8 + 8 * v9) = v11;
      ++v6;
    }
    while (v4 != v6);
  }
  HALS_IOContext_MCP_Impl::UpdateContext(this);
  return 0;
}

void sub_1BABC2B20(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BABC2A40);
  }
  _Unwind_Resume(a1);
}

void HALS_IOContext_MCP_Impl::UpdateContext(HALS_IOContext_MCP_Impl *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (const void *)*((void *)this + 14);
  if (v1)
  {
    int v2 = (AMCP::Log::Scope_Registry *)HALS_IOContext_MCP_Impl::SetComposition(this, v1);
    if (v2)
    {
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v6, "com.apple.coreaudio", "AMCP");
      uint64_t v3 = *v6;
      if (*(void *)v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v7);
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v4 = pthread_self();
        mach_port_t v5 = pthread_mach_thread_np(v4);
        LODWORD(v6) = 67109634;
        HIDWORD(v6) = v5;
        *(_WORD *)uint64_t v7 = 2080;
        *(void *)&v7[2] = "HALS_IOContext_MCP_Impl.cpp";
        __int16 v8 = 1024;
        int v9 = 358;
        _os_log_debug_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Error setting IOC composition.", (uint8_t *)&v6, 0x18u);
      }
    }
  }
}

uint64_t HALS_IOContext_MCP_Impl::SetComposition(HALS_IOContext_MCP_Impl *this, CFTypeRef cf)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (!cf)
  {
    CFDictionaryRef v42 = 0;
LABEL_22:
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v18 = **(NSObject ***)buf;
    if ((void)v44) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v44);
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      long long v19 = pthread_self();
      mach_port_t v20 = pthread_mach_thread_np(v19);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v20;
      LOWORD(v44) = 2080;
      *(void *)((char *)&v44 + 2) = "HALS_IOContext_MCP_Impl.cpp";
      WORD5(v44) = 1024;
      HIDWORD(v44) = 479;
      LOWORD(v45) = 2080;
      *(void *)((char *)&v45 + 2) = "not (description)";
      _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s SetComposition called with null description", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"SetComposition called with null description", (uint64_t)&valuePtr);
    std::logic_error::logic_error(&v34, &valuePtr);
    v34.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v35, &v34);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    int v40 = -1;
    v35.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v36 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *((void *)&v45 + 1) = "virtual OSStatus HALS_IOContext_MCP_Impl::SetComposition(CFDictionaryRef)";
    long long v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_MCP_Impl.cpp";
    int v47 = 479;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v28);
    CFTypeRef cfa = &unk_1F148AA90;
    long long v31 = v28;
    uint64_t v32 = v29;
    long long v28 = 0uLL;
    uint64_t v29 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v3 = this;
  CFRetain(cf);
  this = applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v42, cf);
  CFDictionaryRef v4 = v42;
  if (!v42) {
    goto LABEL_22;
  }
  CFRetain(v42);
  CFDictionaryRef v27 = v4;
  mach_port_t v5 = (std::logic_error_vtbl *)CFStringCreateWithBytes(0, (const UInt8 *)"device id", 9, 0x8000100u, 0);
  v35.__vftable = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
  CFTypeRef cfa = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cfa)
  {
    mach_port_t v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "Could not construct");
    __cxa_throw(v22, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(buf, v4, v5, &cfa);
  unint64_t v6 = *(NSObject ***)buf;
  if (!*(void *)buf)
  {
    uint64_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Could not construct");
    __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v7 = (HALS_ObjectMap *)applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
  CFRelease(v6);
  if (cfa) {
    CFRelease(cfa);
  }
  CFRelease(v5);
  __int16 v8 = (unsigned int *)HALS_ObjectMap::CopyObjectByObjectID(v7);
  if (v8)
  {
    uint64_t v10 = v8[36];
    unint64_t v11 = (unint64_t)v8[37] << 32;
  }
  else
  {
    unint64_t v11 = 0x200000000;
    uint64_t v10 = 1;
  }
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v8, v9);
  CFRelease(v4);
  *(void *)buf = 0;
  *(void *)&long long v44 = buf;
  *((void *)&v44 + 1) = 0x2000000000;
  LODWORD(v45) = 0;
  v35.__vftable = 0;
  uint64_t v12 = *((void *)v3 + 7);
  if (v12 && *(void *)(v12 + 8) != -1) {
    operator new();
  }
  uint64_t v13 = *((void *)v3 + 5);
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 1174405120;
  v24[2] = ___ZN23HALS_IOContext_MCP_Impl14SetCompositionEPK14__CFDictionary_block_invoke;
  v24[3] = &unk_1F1462FC8;
  v24[5] = v3;
  CFDictionaryRef v14 = v42;
  if (v42) {
    CFRetain(v42);
  }
  CFTypeRef v25 = v14;
  unint64_t v26 = v11 | v10;
  v24[4] = buf;
  __int16 v15 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 56))(v13);
  HALB_CommandGate::ExecuteCommand(v15, (uint64_t)v24);
  uint64_t v16 = *(unsigned int *)(v44 + 24);
  if (v25) {
    CFRelease(v25);
  }
  _Block_object_dispose(buf, 8);
  if (v42) {
    CFRelease(v42);
  }
  return v16;
}

void sub_1BABC31E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,Buffer_Size_Notifier *a35)
{
  std::unique_ptr<Buffer_Size_Notifier>::reset[abi:ne180100](&a35);
  _Block_object_dispose((const void *)(v35 - 144), 8);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v35 - 152));
  _Unwind_Resume(a1);
}

void ___ZN23HALS_IOContext_MCP_Impl14SetCompositionEPK14__CFDictionary_block_invoke(uint64_t a1)
{
  v99[4] = *(const __CFString **)MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(v1 + 56);
  if (v2) {
    BOOL v3 = *(void *)(v2 + 8) == -1;
  }
  else {
    BOOL v3 = 1;
  }
  CFDictionaryRef v4 = *(const void **)(v1 + 112);
  mach_port_t v5 = *(const void **)(a1 + 48);
  *(void *)(v1 + 112) = v5;
  if (v5) {
    CFRetain(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v71 = 0;
  long long v72 = 0;
  HALS_System::GetInstance(&v73, 0, &v71);
  unint64_t v6 = *(os_unfair_lock_s **)(v73 + 1392);
  uint64_t v7 = *(const void **)(v1 + 112);
  if (v7)
  {
    CFRetain(v7);
    CFTypeRef v70 = v7;
    os_unfair_lock_lock(v6 + 4);
    CFRetain(v7);
    CFTypeRef cf = v7;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v88 = 0u;
    CFRetain(v7);
    int v78 = v7;
    CFNumberRef v8 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[10]>((const __CFDictionary *)v7, "device id");
    if (v8)
    {
      unint64_t v9 = applesauce::CF::convert_as<unsigned int,0>(v8);
      if (HIDWORD(v9)) {
        HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)&v6[10], v9);
      }
    }
    CFRelease(v7);
    HALS_IOContext_Manager_Impl::get_graph_builder();
  }
  CFTypeRef v70 = 0;
  os_unfair_lock_lock(v6 + 4);
  CFTypeRef cf = 0;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v88 = 0u;
  uint64_t v75 = 0;
  unint64_t v76 = 0;
  *(void *)buf = (char *)&v89 + 8;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)buf = &v88;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (cf) {
    CFRelease(cf);
  }
  os_unfair_lock_unlock(v6 + 4);
  uint64_t v11 = v75;
  uint64_t v10 = v76;
  if (v76)
  {
    atomic_fetch_add_explicit(&v76->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v74) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v74);
  }
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  if (v10)
  {
    if (v10->__shared_owners_ != -1 && v3)
    {
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v13 = *(std::__shared_weak_count **)(v1 + 56);
      *(void *)(v1 + 4_Block_object_dispose(&a9, 8) = v11;
      *(void *)(v1 + 56) = v10;
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      HALS_System::GetInstance(&v79, 0, &v68);
      int v14 = *(_DWORD *)(v79 + 1388);
      uint64_t v84 = 0x676C6F626E64696FLL;
      LODWORD(v85) = 0;
      uint64_t v16 = *(void **)(v1 + 8);
      __int16 v15 = *(atomic_ullong **)(v1 + 16);
      if (v15) {
        atomic_fetch_add_explicit(v15 + 2, 1uLL, memory_order_relaxed);
      }
      __p[0] = &unk_1F14630E0;
      __p[1] = v16;
      __p[2] = v15;
      __p[3] = __p;
      int v17 = *(std::__shared_weak_count **)(v1 + 56);
      if (v17)
      {
        int v17 = std::__shared_weak_count::lock(v17);
        uint64_t v18 = v17;
        if (v17)
        {
          long long v19 = *(AMCP::Address **)(v1 + 48);
          if (v19)
          {
            std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)__p);
            AMCP::Core::Core::call_operation_function<void,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(v19, (unsigned int *)&v84, (uint64_t)buf);
            std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100](buf);
            goto LABEL_50;
          }
        }
      }
      else
      {
        uint64_t v18 = 0;
      }
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v17);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v22 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        CFDictionaryRef v42 = pthread_self();
        mach_port_t v43 = pthread_mach_thread_np(v42);
        int v44 = *(_DWORD *)(*(void *)(v1 + 40) + 16);
        HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)v99, v1);
        CFStringRef v45 = v99[0];
        if (!v99[0])
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)&v88, v99[0]);
        if ((SBYTE7(v89) & 0x80u) == 0) {
          long long v46 = &v88;
        }
        else {
          long long v46 = (long long *)v88;
        }
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v43;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "HALS_IOContext_MCP_Impl.cpp";
        __int16 v93 = 1024;
        int v94 = 95;
        __int16 v95 = 1024;
        int v96 = v44;
        __int16 v97 = 2080;
        long long v98 = v46;
        _os_log_debug_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
        if (SBYTE7(v89) < 0) {
          operator delete((void *)v88);
        }
        CFRelease(v45);
      }
      if (!v18)
      {
LABEL_51:
        std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100](__p);
        strcpy(buf, "revobolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        int v23 = *(_DWORD *)(*(void *)(v1 + 40) + 16);
        *(void *)&long long v88 = &unk_1F1463160;
        DWORD2(v8_Block_object_dispose(&a9, 8) = v23;
        *((void *)&v89 + 1) = &v88;
        HALS_IOContext_MCP_Impl::call_mcp_operation_void_function<std::function<void ()>>((void *)v1, (unsigned int *)buf, (uint64_t)&v88);
        std::__function::__value_func<void ()>::~__value_func[abi:ne180100](&v88);
        strcpy(buf, "pbdnbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        uint64_t v25 = *(void *)(v1 + 8);
        uint64_t v24 = *(void *)(v1 + 16);
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 16), 1uLL, memory_order_relaxed);
        }
        uint64_t v84 = (uint64_t)&unk_1F14631E0;
        uint64_t v85 = v25;
        uint64_t v86 = v24;
        __int16 v87 = &v84;
        HALS_IOContext_MCP_Impl::call_mcp_operation_void_function<std::function<void ()>>((void *)v1, (unsigned int *)buf, (uint64_t)&v84);
        std::__function::__value_func<void ()>::~__value_func[abi:ne180100](&v84);
        strcpy(buf, "pednbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        CFStringRef v27 = *(const __CFString **)(v1 + 8);
        uint64_t v26 = *(void *)(v1 + 16);
        if (v26) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 16), 1uLL, memory_order_relaxed);
        }
        v99[0] = (const __CFString *)&unk_1F1463260;
        v99[1] = v27;
        v99[2] = (const __CFString *)v26;
        v99[3] = (const __CFString *)v99;
        HALS_IOContext_MCP_Impl::call_mcp_operation_void_function<std::function<void ()>>((void *)v1, (unsigned int *)buf, (uint64_t)v99);
        std::__function::__value_func<void ()>::~__value_func[abi:ne180100](v99);
        HALS_IOContext_MCP_Impl::set_simple_mcp_value<1718839674u>((void *)v1, (_DWORD *)(v1 + 248));
        strcpy(buf, "sppibolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        HALS_IOContext_MCP_Impl::call_mcp_operation_void_function<AMCP::Power_State>((void *)v1, (unsigned int *)buf, v14);
        long long v28 = *(std::__shared_weak_count **)(v1 + 56);
        if (v28)
        {
          uint64_t v29 = *(void *)(*(void *)(v1 + 40) + 64);
          long long v28 = std::__shared_weak_count::lock(v28);
          uint64_t v30 = v28;
          if (v28)
          {
            long long v28 = *(std::__shared_weak_count **)(v1 + 48);
            if (v28)
            {
              AMCP::Core::Core::set_simple_property_value<1885630071u>((int8x8_t *)v28, (unsigned char *)(v29 + 42));
              goto LABEL_64;
            }
          }
        }
        else
        {
          uint64_t v30 = 0;
        }
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v28);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        long long v31 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          int v47 = pthread_self();
          mach_port_t v48 = pthread_mach_thread_np(v47);
          int v49 = *(_DWORD *)(*(void *)(v1 + 40) + 16);
          HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&v81, v1);
          unint64_t v50 = (const void *)v81.__r_.__value_.__r.__words[0];
          if (!v81.__r_.__value_.__r.__words[0])
          {
            int v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v63, "Could not construct");
            __cxa_throw(v63, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          applesauce::CF::convert_to<std::string,0>((uint64_t)&v82, (const __CFString *)v81.__r_.__value_.__l.__data_);
          if (v83 >= 0) {
            uint64_t v51 = &v82;
          }
          else {
            uint64_t v51 = (long long *)v82;
          }
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v48;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "HALS_IOContext_MCP_Impl.cpp";
          __int16 v93 = 1024;
          int v94 = 121;
          __int16 v95 = 1024;
          int v96 = v49;
          __int16 v97 = 2080;
          long long v98 = v51;
          _os_log_debug_impl(&dword_1BAA78000, v31, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
          if (SHIBYTE(v83) < 0) {
            operator delete((void *)v82);
          }
          CFRelease(v50);
        }
        if (!v30)
        {
LABEL_65:
          uint64_t v32 = *(std::__shared_weak_count **)(v1 + 56);
          if (v32)
          {
            uint64_t v33 = *(void *)(*(void *)(v1 + 40) + 64);
            uint64_t v32 = std::__shared_weak_count::lock(v32);
            std::logic_error v34 = v32;
            if (v32)
            {
              uint64_t v32 = *(std::__shared_weak_count **)(v1 + 48);
              if (v32)
              {
                AMCP::Core::Core::set_simple_property_value<1885627511u>((int8x8_t *)v32, (unsigned char *)(v33 + 43));
                goto LABEL_74;
              }
            }
          }
          else
          {
            std::logic_error v34 = 0;
          }
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v32);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v35 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          {
            BOOL v52 = pthread_self();
            mach_port_t v53 = pthread_mach_thread_np(v52);
            int v54 = *(_DWORD *)(*(void *)(v1 + 40) + 16);
            HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&v81, v1);
            uint64_t v55 = (const void *)v81.__r_.__value_.__r.__words[0];
            if (!v81.__r_.__value_.__r.__words[0])
            {
              long long v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v64, "Could not construct");
              __cxa_throw(v64, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            applesauce::CF::convert_to<std::string,0>((uint64_t)&v82, (const __CFString *)v81.__r_.__value_.__l.__data_);
            if (v83 >= 0) {
              unsigned int v56 = &v82;
            }
            else {
              unsigned int v56 = (long long *)v82;
            }
            *(_DWORD *)buf = 67110146;
            *(_DWORD *)&uint8_t buf[4] = v53;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_IOContext_MCP_Impl.cpp";
            __int16 v93 = 1024;
            int v94 = 121;
            __int16 v95 = 1024;
            int v96 = v54;
            __int16 v97 = 2080;
            long long v98 = v56;
            _os_log_debug_impl(&dword_1BAA78000, v35, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
            if (SHIBYTE(v83) < 0) {
              operator delete((void *)v82);
            }
            CFRelease(v55);
          }
          if (!v34)
          {
LABEL_75:
            std::vector<BOOL>::resize(v1 + 64, -991146299 * ((*(void *)(v1 + 224) - *(void *)(v1 + 216)) >> 3), 1);
            std::vector<BOOL>::resize(v1 + 88, -991146299 * ((*(void *)(v1 + 200) - *(void *)(v1 + 192)) >> 3), 1);
            uint64_t v36 = *(std::__shared_weak_count **)(v1 + 56);
            if (v36)
            {
              uint64_t v36 = std::__shared_weak_count::lock(v36);
              uint64_t v37 = v36;
              if (v36)
              {
                uint64_t v38 = *(const AMCP::Address **)(v1 + 48);
                if (v38)
                {
                  *(void *)&long long v82 = 0x676C6F626D746D62;
                  DWORD2(v82) = 0;
                  AMCP::Core::Core::get_property_value((AMCP::Core::Core *)buf, v38, (const AMCP::Address *)&v82);
                  AMCP::Thing::convert_to<std::shared_ptr<AMCP::Graph::Timebase>>(&v82, (uint64_t)buf);
                  if (v98) {
                    ((void (*)(void, unsigned char *, void, void))v98)(0, buf, 0, 0);
                  }
LABEL_86:
                  std::__shared_weak_count::__release_shared[abi:ne180100](v37);
                  long long v40 = v82;
LABEL_87:
                  char v41 = *(std::__shared_weak_count **)(v1 + 264);
                  *(_OWORD *)(v1 + 256) = v40;
                  if (v41) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
                  }
                  long long v82 = 0uLL;
                  HALS_System::GetInstance(buf, 0, (uint64_t *)&v82);
                  HALS_System::ProcessPropertyChanged(*(HALS_System **)buf, **(_DWORD **)(*(void *)(v1 + 40) + 64), 1885632035, 1869968496, 1);
                  if (*(void *)&buf[8]) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
                  }
                  *(_OWORD *)&v81.__r_.__value_.__l.__data_ = 0uLL;
                  HALS_System::GetInstance(buf, 0, (uint64_t *)&v81);
                  HALS_System::ProcessPropertyChanged(*(HALS_System **)buf, **(_DWORD **)(*(void *)(v1 + 40) + 64), 1885632035, 1768845428, 1);
                  if (*(void *)&buf[8]) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
                  }
                  if (v80) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v80);
                  }
                  if (v69) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
                  }
                  goto LABEL_97;
                }
              }
            }
            else
            {
              uint64_t v37 = 0;
            }
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v36);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            uint64_t v39 = **(NSObject ***)buf;
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v57 = pthread_self();
              mach_port_t v58 = pthread_mach_thread_np(v57);
              int v59 = *(_DWORD *)(*(void *)(v1 + 40) + 16);
              HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&v81, v1);
              mach_port_t v60 = (const void *)v81.__r_.__value_.__r.__words[0];
              if (!v81.__r_.__value_.__r.__words[0])
              {
                BOOL v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v65, "Could not construct");
                __cxa_throw(v65, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              applesauce::CF::convert_to<std::string,0>((uint64_t)&v82, (const __CFString *)v81.__r_.__value_.__l.__data_);
              if (v83 >= 0) {
                int v61 = &v82;
              }
              else {
                int v61 = (long long *)v82;
              }
              *(_DWORD *)buf = 67110146;
              *(_DWORD *)&uint8_t buf[4] = v58;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = "HALS_IOContext_MCP_Impl.cpp";
              __int16 v93 = 1024;
              int v94 = 1513;
              __int16 v95 = 1024;
              int v96 = v59;
              __int16 v97 = 2080;
              long long v98 = v61;
              _os_log_debug_impl(&dword_1BAA78000, v39, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
              if (SHIBYTE(v83) < 0) {
                operator delete((void *)v82);
              }
              CFRelease(v60);
            }
            long long v40 = 0uLL;
            long long v82 = 0u;
            if (!v37) {
              goto LABEL_87;
            }
            goto LABEL_86;
          }
LABEL_74:
          std::__shared_weak_count::__release_shared[abi:ne180100](v34);
          goto LABEL_75;
        }
LABEL_64:
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        goto LABEL_65;
      }
LABEL_50:
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      goto LABEL_51;
    }
    if (v3 || v10->__shared_owners_ != -1)
    {
LABEL_97:
      std::__shared_weak_count::__release_weak(v10);
      return;
    }
  }
  else if (v3)
  {
    return;
  }
  int v20 = *(_DWORD *)(*(void *)(v1 + 40) + 16);
  uint64_t v21 = *(void *)(v1 + 464);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN23HALS_IOContext_MCP_Impl14SetCompositionEPK14__CFDictionary_block_invoke_2;
  block[3] = &__block_descriptor_tmp_17;
  int v67 = v20;
  LOBYTE(v20) = atomic_load((unsigned __int8 *)(v21 + 32));
  if (v20) {
    atomic_store(1u, (unsigned __int8 *)(v21 + 33));
  }
  dispatch_async(*(dispatch_queue_t *)v21, block);
  if (v10) {
    goto LABEL_97;
  }
}

void sub_1BABC4530(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_objecta, os_unfair_lock_s *lock, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,const void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,const void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  if (a2)
  {
    AMCP::Graph_Description::~Graph_Description(&a53);
    applesauce::CF::DictionaryRef::~DictionaryRef(&a30);
    os_unfair_lock_unlock(lock);
    applesauce::CF::DictionaryRef::~DictionaryRef(&a23);
    if (a27) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a27);
    }
    if (a25) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a25);
    }
    int v54 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      *(_DWORD *)(*(void *)(*(void *)(a10 + 32) + 8) + 24) = v54[2];
    }
    else {
      *(_DWORD *)(*(void *)(*(void *)(a10 + 32) + 8) + 24) = 2003329396;
    }
    __cxa_end_catch();
    JUMPOUT(0x1BABC3E18);
  }
  _Unwind_Resume(a1);
}

void sub_1BABC48FC()
{
}

void Buffer_Size_Notifier::~Buffer_Size_Notifier(Buffer_Size_Notifier *this)
{
  uint64_t v2 = *((void *)this + 2);
  BOOL v3 = *(std::__shared_weak_count **)(v2 + 56);
  if (v3)
  {
    CFDictionaryRef v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      mach_port_t v5 = v4;
      if (*(void *)(v2 + 48))
      {
        int simple_mcp = HALS_IOContext_MCP_Impl::get_simple_mcp_property<1718839674u>(*((void **)this + 2));
        unint64_t v7 = HALS_IOContext_MCP_Impl::get_simple_mcp_property<1718843939u>(*((void **)this + 2));
        CFNumberRef v8 = 0;
        if (simple_mcp == *(_DWORD *)this)
        {
          unint64_t v9 = 0;
        }
        else
        {
          unint64_t v9 = 0;
          if (*(_DWORD *)this)
          {
            CFNumberRef v8 = (AudioObjectPropertyAddress *)operator new(0xCuLL);
            unint64_t v9 = v8 + 1;
            *(void *)&v8->signed int mSelector = 0x676C6F626673697ALL;
            v8->AudioObjectPropertyElement mElement = 0;
          }
        }
        int v10 = *((_DWORD *)this + 1);
        BOOL v12 = v10 == v7 && *((_DWORD *)this + 2) == HIDWORD(v7);
        if (!v10 || v12)
        {
          uint64_t v16 = v8;
          int v17 = v9;
        }
        else
        {
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v8) >> 2);
          unint64_t v14 = v13 + 1;
          if (v13 + 1 > 0x1555555555555555) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v9 - (char *)v8) >> 2) > v14) {
            unint64_t v14 = 0x5555555555555556 * (((char *)v9 - (char *)v8) >> 2);
          }
          if (v13 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v15 = 0x1555555555555555;
          }
          else {
            unint64_t v15 = v14;
          }
          if (v15) {
            unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v15);
          }
          uint64_t v16 = (AudioObjectPropertyAddress *)(v15 + 4 * (((char *)v9 - (char *)v8) >> 2));
          *(void *)&v16->signed int mSelector = 0x676C6F6266737A23;
          v16->AudioObjectPropertyElement mElement = 0;
          int v17 = v16 + 1;
          while (v9 != v8)
          {
            uint64_t v18 = *(void *)&v9[-1].mSelector;
            --v9;
            AudioObjectPropertyElement mElement = v9->mElement;
            *(void *)&v16[-1].signed int mSelector = v18;
            --v16;
            v16->AudioObjectPropertyElement mElement = mElement;
          }
          if (v8) {
            operator delete(v8);
          }
        }
        if (v16 != v17)
        {
          int v20 = *(unsigned int **)(*((void *)this + 2) + 40);
          uint64_t v21 = (HALS_NotificationManager *)v20[18];
          if (!v21) {
            uint64_t v21 = (HALS_NotificationManager *)v20[4];
          }
          HALS_Object::PropertiesChanged((HALS_Object *)v20, v21, 0, -1431655765 * ((unint64_t)((char *)v17 - (char *)v16) >> 2), v16);
        }
        if (v16) {
          operator delete(v16);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

Buffer_Size_Notifier *std::unique_ptr<Buffer_Size_Notifier>::reset[abi:ne180100](Buffer_Size_Notifier **a1)
{
  __n128 result = *a1;
  *a1 = 0;
  if (result)
  {
    Buffer_Size_Notifier::~Buffer_Size_Notifier(result);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

unint64_t HALS_IOContext_MCP_Impl::get_simple_mcp_property<1718839674u>(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v2);
    BOOL v3 = v2;
    if (v2)
    {
      uint64_t v2 = (std::__shared_weak_count *)a1[6];
      if (v2)
      {
        unint64_t simple_required = AMCP::Core::Core::get_simple_required_property<1718839674u>((AMCP::Core::Core *)v2);
LABEL_10:
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
        return simple_required;
      }
    }
  }
  else
  {
    BOOL v3 = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  mach_port_t v5 = **(NSObject ***)buf;
  if (*(void *)v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v17);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v7 = pthread_self();
    mach_port_t v8 = pthread_mach_thread_np(v7);
    int v9 = *(_DWORD *)(a1[5] + 16);
    HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&v13, (uint64_t)a1);
    CFStringRef v10 = v13;
    if (!v13)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v13);
    if (v15 >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v8;
    *(_WORD *)int v17 = 2080;
    *(void *)&_OWORD v17[2] = "HALS_IOContext_MCP_Impl.cpp";
    __int16 v18 = 1024;
    int v19 = 107;
    __int16 v20 = 1024;
    int v21 = v9;
    __int16 v22 = 2080;
    int v23 = v11;
    _os_log_debug_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    CFRelease(v10);
  }
  unint64_t simple_required = 0;
  unint64_t result = 0;
  if (v3) {
    goto LABEL_10;
  }
  return result;
}

void sub_1BABC4D00(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

unint64_t HALS_IOContext_MCP_Impl::get_simple_mcp_property<1718843939u>(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v2);
    BOOL v3 = v2;
    if (v2)
    {
      uint64_t v2 = (std::__shared_weak_count *)a1[6];
      if (v2)
      {
        unint64_t simple_required = AMCP::Core::Core::get_simple_required_property<1718843939u>((AMCP::Core::Core *)v2);
        unint64_t v5 = (unint64_t)simple_required & 0xFFFFFFFF00000000;
LABEL_10:
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
        unint64_t v7 = v5;
        unsigned int v8 = simple_required;
        return v7 & 0xFFFFFFFF00000000 | v8;
      }
    }
  }
  else
  {
    BOOL v3 = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  unint64_t v6 = **(NSObject ***)buf;
  if (*(void *)v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v20);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v10 = pthread_self();
    mach_port_t v11 = pthread_mach_thread_np(v10);
    int v12 = *(_DWORD *)(a1[5] + 16);
    HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&v16, (uint64_t)a1);
    CFStringRef v13 = v16;
    if (!v16)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v16);
    if (v18 >= 0) {
      unint64_t v14 = __p;
    }
    else {
      unint64_t v14 = (void **)__p[0];
    }
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v11;
    *(_WORD *)__int16 v20 = 2080;
    *(void *)&v20[2] = "HALS_IOContext_MCP_Impl.cpp";
    __int16 v21 = 1024;
    int v22 = 107;
    __int16 v23 = 1024;
    int v24 = v12;
    __int16 v25 = 2080;
    uint64_t v26 = v14;
    _os_log_debug_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    CFRelease(v13);
  }
  unint64_t v5 = 0;
  LODWORD(simple_required) = 0;
  unint64_t v7 = 0;
  unsigned int v8 = 0;
  if (v3) {
    goto LABEL_10;
  }
  return v7 & 0xFFFFFFFF00000000 | v8;
}

void sub_1BABC4F30(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

AMCP::Log::Scope_Registry *AMCP::Core::Core::get_simple_required_property<1718843939u>(AMCP::Core::Core *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  strcpy(buf, "#zsfbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  unint64_t result = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<std::tuple<unsigned int,unsigned int>,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!v2)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    BOOL v3 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      CFDictionaryRef v4 = pthread_self();
      mach_port_t v5 = pthread_mach_thread_np(v4);
      char v7 = 4;
      strcpy((char *)__p, "fsz#");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v5;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      __int16 v9 = 1024;
      int v10 = 391;
      __int16 v11 = 2080;
      int v12 = "optional_value.operator BOOL() == true";
      __int16 v13 = 2080;
      unint64_t v14 = __p;
      __int16 v15 = 1024;
      int v16 = 1735159650;
      __int16 v17 = 1024;
      int v18 = 0;
      _os_log_error_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  return result;
}

void sub_1BABC50D0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

unint64_t AMCP::Core::Core::get_simple_required_property<1718839674u>(AMCP::Core::Core *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  strcpy(buf, "zisfbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  unint64_t result = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    char v2 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      BOOL v3 = pthread_self();
      mach_port_t v4 = pthread_mach_thread_np(v3);
      char v6 = 4;
      strcpy((char *)__p, "fsiz");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v4;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      __int16 v8 = 1024;
      int v9 = 391;
      __int16 v10 = 2080;
      __int16 v11 = "optional_value.operator BOOL() == true";
      __int16 v12 = 2080;
      __int16 v13 = __p;
      __int16 v14 = 1024;
      int v15 = 1735159650;
      __int16 v16 = 1024;
      int v17 = 0;
      _os_log_error_impl(&dword_1BAA78000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  return result;
}

void sub_1BABC524C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void __destroy_helper_block_e8_48c36_ZTSN10applesauce2CF13DictionaryRefE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 48);
  if (v1) {
    CFRelease(v1);
  }
}

void *__copy_helper_block_e8_48c36_ZTSN10applesauce2CF13DictionaryRefE(void *result, uint64_t a2)
{
  char v2 = result;
  uint64_t v3 = *(void *)(a2 + 48);
  if (v3) {
    unint64_t result = CFRetain(*(CFTypeRef *)(a2 + 48));
  }
  v2[6] = v3;
  return result;
}

void ___ZN23HALS_IOContext_MCP_Impl14SetCompositionEPK14__CFDictionary_block_invoke_2(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  HALS_System::GetInstance(&v4, 0, v3);
  HALS_IOContext_Manager::destroy_context_core_for_hal_object_id(*(HALS_IOContext_Manager **)(v4 + 1392), *(_DWORD *)(a1 + 32));
  char v2 = v5;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1BABC5328(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void *std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100](void *a1)
{
  char v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void HALS_IOContext_MCP_Impl::call_mcp_operation_void_function<std::function<void ()(unsigned int)>>(void *a1, unsigned int *a2, uint64_t a3)
{
  v27[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v4);
    char v7 = v4;
    if (v4)
    {
      __int16 v8 = (AMCP::Address *)a1[6];
      if (v8)
      {
        std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)v27, a3);
        AMCP::Core::Core::call_operation_function<void,std::function<void ()>>(v8, a2, (uint64_t)v27);
        std::__function::__value_func<void ()>::~__value_func[abi:ne180100](v27);
LABEL_10:
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        return;
      }
    }
  }
  else
  {
    char v7 = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  int v9 = **(NSObject ***)buf;
  if (*(void *)v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v20);
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    __int16 v10 = pthread_self();
    mach_port_t v11 = pthread_mach_thread_np(v10);
    int v12 = *(_DWORD *)(a1[5] + 16);
    HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&v16, (uint64_t)a1);
    CFStringRef v13 = v16;
    if (!v16)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v16);
    if (v18 >= 0) {
      __int16 v14 = __p;
    }
    else {
      __int16 v14 = (void **)__p[0];
    }
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v11;
    *(_WORD *)__int16 v20 = 2080;
    *(void *)&v20[2] = "HALS_IOContext_MCP_Impl.cpp";
    __int16 v21 = 1024;
    int v22 = 95;
    __int16 v23 = 1024;
    int v24 = v12;
    __int16 v25 = 2080;
    uint64_t v26 = v14;
    _os_log_debug_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    CFRelease(v13);
  }
  if (v7) {
    goto LABEL_10;
  }
}

void sub_1BABC55F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void HALS_IOContext_MCP_Impl::set_simple_mcp_value<1718839674u>(void *a1, _DWORD *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v3);
    mach_port_t v5 = v3;
    if (v3)
    {
      uint64_t v3 = (std::__shared_weak_count *)a1[6];
      if (v3)
      {
        AMCP::Core::Core::set_simple_property_value<1718839674u>((int8x8_t *)v3, a2);
LABEL_10:
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        return;
      }
    }
  }
  else
  {
    mach_port_t v5 = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  char v6 = **(NSObject ***)buf;
  if (*(void *)v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v17);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    char v7 = pthread_self();
    mach_port_t v8 = pthread_mach_thread_np(v7);
    int v9 = *(_DWORD *)(a1[5] + 16);
    HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&v13, (uint64_t)a1);
    CFStringRef v10 = v13;
    if (!v13)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v13);
    if (v15 >= 0) {
      mach_port_t v11 = __p;
    }
    else {
      mach_port_t v11 = (void **)__p[0];
    }
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v8;
    *(_WORD *)int v17 = 2080;
    *(void *)&_OWORD v17[2] = "HALS_IOContext_MCP_Impl.cpp";
    __int16 v18 = 1024;
    int v19 = 121;
    __int16 v20 = 1024;
    int v21 = v9;
    __int16 v22 = 2080;
    __int16 v23 = v11;
    _os_log_debug_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    CFRelease(v10);
  }
  if (v5) {
    goto LABEL_10;
  }
}

void sub_1BABC5824(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void HALS_IOContext_MCP_Impl::call_mcp_operation_void_function<AMCP::Power_State>(void *a1, unsigned int *a2, int a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v4);
    char v7 = v4;
    if (v4)
    {
      uint64_t v4 = (std::__shared_weak_count *)a1[6];
      if (v4)
      {
        AMCP::Core::Core::call_operation_function<void,AMCP::Power_State>((AMCP::Address *)v4, a2, a3);
LABEL_10:
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        return;
      }
    }
  }
  else
  {
    char v7 = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  mach_port_t v8 = **(NSObject ***)buf;
  if (*(void *)v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v19);
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    int v9 = pthread_self();
    mach_port_t v10 = pthread_mach_thread_np(v9);
    int v11 = *(_DWORD *)(a1[5] + 16);
    HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&v15, (uint64_t)a1);
    CFStringRef v12 = v15;
    if (!v15)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v15);
    if (v17 >= 0) {
      CFStringRef v13 = __p;
    }
    else {
      CFStringRef v13 = (void **)__p[0];
    }
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v10;
    *(_WORD *)int v19 = 2080;
    *(void *)&_OWORD v19[2] = "HALS_IOContext_MCP_Impl.cpp";
    __int16 v20 = 1024;
    int v21 = 95;
    __int16 v22 = 1024;
    int v23 = v11;
    __int16 v24 = 2080;
    __int16 v25 = v13;
    _os_log_debug_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    CFRelease(v12);
  }
  if (v7) {
    goto LABEL_10;
  }
}

void sub_1BABC5A40(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = a2;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    unint64_t v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      uint64_t v21 = 0;
      long long v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (v9 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      std::vector<BOOL>::reserve((uint64_t)&v21, v12);
      CFStringRef v13 = *(char **)a1;
      unint64_t v14 = *(void *)(a1 + 8);
      *(void *)&long long v22 = v14 + v6;
      uint64_t v15 = v21;
      uint64_t v23 = v21;
      int v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>((unint64_t *)&v19, v13, 0, (uint64_t)&v13[8 * (v14 >> 6)], v14 & 0x3F, (uint64_t)&v23);
      uint64_t v17 = v19;
      LODWORD(v1_Block_object_dispose(&a9, 8) = v20;
      CFStringRef v16 = *(char **)a1;
      *(void *)a1 = v15;
      *(_OWORD *)(a1 + _Block_object_dispose(&a9, 8) = v22;
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      uint64_t v17 = *(void *)a1 + 8 * (v5 >> 6);
      uint64_t v18 = *(void *)(a1 + 8) & 0x3FLL;
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        uint64_t v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        uint64_t v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_1BABC5BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(unint64_t *result, char *__src, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  char v7 = result;
  int64_t v8 = a5 - (unint64_t)a3 + 8 * (a4 - (void)__src);
  if (v8 <= 0)
  {
    uint64_t v15 = *(unint64_t **)a6;
  }
  else
  {
    unint64_t v9 = __src;
    unint64_t result = *(unint64_t **)a6;
    if (a3)
    {
      if (v8 >= (unint64_t)(64 - a3)) {
        unint64_t v10 = 64 - a3;
      }
      else {
        unint64_t v10 = a5 - (unint64_t)a3 + 8 * (a4 - (void)__src);
      }
      v8 -= v10;
      unint64_t v9 = __src + 8;
      *unint64_t result = *result & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a3 - v10)) & (-1 << a3)) | *(void *)__src & (0xFFFFFFFFFFFFFFFFLL >> (64 - a3 - v10)) & (-1 << a3);
      unint64_t v11 = v10 + *(unsigned int *)(a6 + 8);
      unint64_t result = (unint64_t *)((char *)result + ((v11 >> 3) & 0x3FFFFFF8));
      *(void *)a6 = result;
      *(_DWORD *)(a6 + _Block_object_dispose(&a9, 8) = v11 & 0x3F;
    }
    if (v8 >= 0) {
      uint64_t v12 = v8;
    }
    else {
      uint64_t v12 = v8 + 63;
    }
    uint64_t v13 = v12 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(result, v9, 8 * v13);
      unint64_t result = *(unint64_t **)a6;
    }
    uint64_t v14 = v8 - (v13 << 6);
    uint64_t v15 = &result[v13];
    *(void *)a6 = v15;
    if (v14 >= 1)
    {
      *uint64_t v15 = *v15 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v13 << 6) - v8)) | *(void *)&v9[8 * v13] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v13 << 6) - v8));
      *(_DWORD *)(a6 + _Block_object_dispose(&a9, 8) = v14;
    }
  }
  *char v7 = v15;
  *((_DWORD *)v7 + 2) = *(_DWORD *)(a6 + 8);
  return result;
}

void *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  unint64_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    *unint64_t result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    unint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    void *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  unint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t AMCP::Core::Core::set_simple_property_value<1885627511u>(int8x8_t *a1, unsigned char *a2)
{
  uint64_t v12 = 0x676C6F6270646477;
  int v13 = 0;
  if (!AMCP::Core::Core::is_property_settable(a1, (const AMCP::Address *)&v12)) {
    return 0;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v10, a1, (unsigned int *)&v12);
  int v4 = v10;
  if (!v10)
  {
LABEL_11:
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    return 0;
  }
  unint64_t v5 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v5))
  {
    unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v7))
    {
      memset(v8, 0, sizeof(v8));
      LOBYTE(v8[0]) = *a2;
      unint64_t v9 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v4, (uint64_t)v8);
      if (v9) {
        v9(0, (uint64_t)v8, 0, 0);
      }
      goto LABEL_5;
    }
    goto LABEL_11;
  }
  AMCP::Core::Operation::call_function<void,BOOL const&>(v4, (uint64_t)a2);
LABEL_5:
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return 1;
}

void sub_1BABC5F94(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BABC5F7CLL);
}

uint64_t AMCP::Core::Core::set_simple_property_value<1885630071u>(int8x8_t *a1, unsigned char *a2)
{
  uint64_t v12 = 0x676C6F6270646E77;
  int v13 = 0;
  if (!AMCP::Core::Core::is_property_settable(a1, (const AMCP::Address *)&v12)) {
    return 0;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v10, a1, (unsigned int *)&v12);
  int v4 = v10;
  if (!v10)
  {
LABEL_11:
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    return 0;
  }
  unint64_t v5 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v5))
  {
    unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v7))
    {
      memset(v8, 0, sizeof(v8));
      LOBYTE(v8[0]) = *a2;
      unint64_t v9 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v4, (uint64_t)v8);
      if (v9) {
        v9(0, (uint64_t)v8, 0, 0);
      }
      goto LABEL_5;
    }
    goto LABEL_11;
  }
  AMCP::Core::Operation::call_function<void,BOOL const&>(v4, (uint64_t)a2);
LABEL_5:
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return 1;
}

void sub_1BABC60D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BABC60C0);
}

void AMCP::Core::Core::call_operation_function<void,AMCP::Power_State>(AMCP::Address *a1, unsigned int *a2, int a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v21 = **(NSObject ***)buf;
    if (*(void *)v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      long long v22 = pthread_self();
      mach_port_t v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v23;
      *(_WORD *)char v41 = 2080;
      *(void *)&v41[2] = "Core.h";
      __int16 v42 = 1024;
      int v43 = 198;
      __int16 v44 = 2080;
      *(void *)CFStringRef v45 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1BAA78000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v24, (int8x8_t *)a1, a2);
  unint64_t v7 = v24;
  if (!v24)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v15 = **(NSObject ***)buf;
    if (*(void *)v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v16 = pthread_self();
      mach_port_t v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v17;
      *(_WORD *)char v41 = 2080;
      *(void *)&v41[2] = "Core.h";
      __int16 v42 = 1024;
      int v43 = 202;
      _os_log_error_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v31);
    std::runtime_error::runtime_error(&v32, &v31);
    std::runtime_error::runtime_error(&v33, &v32);
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    int v38 = -1;
    v33.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::logic_error v34 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v33);
    *(void *)&v45[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = void, Argument_Types = <AMCP::Power_State>]";
    long long v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    int v47 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v26);
    long long v29 = v26;
    uint64_t v30 = v27;
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    long long v28 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v8 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Power_State)>>();
  unint64_t v9 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v8);
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v18 = **(NSObject ***)buf;
    if (*(void *)v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = pthread_self();
      mach_port_t v20 = pthread_mach_thread_np(v19);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v20;
      *(_WORD *)char v41 = 2080;
      *(void *)&v41[2] = "Operation.h";
      __int16 v42 = 1024;
      int v43 = 154;
      _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v31);
    std::runtime_error::runtime_error(&v32, &v31);
    std::runtime_error::runtime_error(&v33, &v32);
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    int v38 = -1;
    v33.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::logic_error v34 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v33);
    *(void *)&v45[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, "
                         "Argument_Types = <AMCP::Power_State>]";
    long long v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v47 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v26);
    long long v29 = v26;
    uint64_t v30 = v27;
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    long long v28 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v10 = v9;
  if (!*((void *)v9 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Power_State)>>(),
        (unint64_t v9 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v10 + 7))(4, (uint64_t)v10 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v12 = **(NSObject ***)buf;
    if (*(void *)v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)char v41 = 2080;
      *(void *)&v41[2] = "Operation.h";
      __int16 v42 = 1024;
      int v43 = 161;
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v31);
    std::runtime_error::runtime_error(&v32, &v31);
    std::runtime_error::runtime_error(&v33, &v32);
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    int v38 = -1;
    v33.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::logic_error v34 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v33);
    *(void *)&v45[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, "
                         "Argument_Types = <AMCP::Power_State>]";
    long long v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v47 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v26);
    long long v29 = v26;
    uint64_t v30 = v27;
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    long long v28 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  *(_DWORD *)buf = a3;
  uint64_t v11 = *((void *)v9 + 3);
  if (!v11) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v11 + 48))(v11, buf);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
}

void sub_1BABC6874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Core::Core::set_simple_property_value<1718839674u>(int8x8_t *a1, _DWORD *a2)
{
  uint64_t v12 = 0x676C6F626673697ALL;
  int v13 = 0;
  if (!AMCP::Core::Core::is_property_settable(a1, (const AMCP::Address *)&v12)) {
    return 0;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v10, a1, (unsigned int *)&v12);
  int v4 = v10;
  if (!v10)
  {
LABEL_11:
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    return 0;
  }
  unint64_t v5 = AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v5))
  {
    unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v7))
    {
      memset(v8, 0, sizeof(v8));
      LODWORD(v8[0]) = *a2;
      unint64_t v9 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
      AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v4, (uint64_t)v8);
      if (v9) {
        v9(0, (uint64_t)v8, 0, 0);
      }
      goto LABEL_5;
    }
    goto LABEL_11;
  }
  AMCP::Core::Operation::call_function<void,unsigned int const&>(v4, (uint64_t)a2);
LABEL_5:
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return 1;
}

void sub_1BABC6A4C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BABC6A34);
}

void *std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3>,void ()(unsigned int)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3>,void ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN23HALS_IOContext_MCP_Impl24attach_ioproc_to_contextEN4AMCP11Power_StateEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3>,void ()(unsigned int)>::operator()(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      int v4 = v3;
      uint64_t v5 = *(void *)(a1 + 8);
      if (v5)
      {
        int v6 = *(_DWORD *)(v5 + 28) - 1;
        *(_DWORD *)(v5 + 2_Block_object_dispose(&a9, 8) = v6;
        if (!v6)
        {
          unint64_t v7 = *(unsigned int **)(v5 + 40);
          unint64_t v8 = (HALS_NotificationManager *)v7[18];
          if (!v8) {
            unint64_t v8 = (HALS_NotificationManager *)v7[4];
          }
          uint64_t v21 = &unk_1F14633B8;
          uint64_t v22 = v5;
          mach_port_t v23 = (uint64_t (*)(uint64_t))v8;
          int v24 = &v21;
          blocuint64_t k = 0x676C6F62676F696ELL;
          LODWORD(v17) = 0;
          HALS_Object::PropertiesChanged_Sync((HALS_Object *)v7, v8, 0, 1u, (const AudioObjectPropertyAddress *)&block);
          std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v21);
          unint64_t v9 = *(HALS_PlatformBehaviors **)(*(void *)(v5 + 40) + 80);
          if (v9)
          {
            (*(void (**)(HALS_PlatformBehaviors *))(*(void *)v9 + 120))(v9);
            unint64_t v9 = (HALS_PlatformBehaviors *)(*(uint64_t (**)(void))(**(void **)(*(void *)(v5 + 40) + 80)
                                                                             + 128))(*(void *)(*(void *)(v5 + 40)
                                                                                                 + 80));
          }
          HALS_IOContext::UpdateInputStreamUsageStatus(v9);
          int v10 = *(_DWORD *)(*(void *)(v5 + 40) + 16);
          uint64_t v11 = *(void *)(v5 + 472);
          blocuint64_t k = MEMORY[0x1E4F143A8];
          uint64_t v17 = 0x40000000;
          uint64_t v18 = ___ZN23HALS_IOContext_MCP_Impl14end_processingEv_block_invoke;
          uint64_t v19 = &__block_descriptor_tmp_26_2796;
          int v20 = v10;
          LOBYTE(v10) = atomic_load((unsigned __int8 *)(v11 + 32));
          if (v10) {
            atomic_store(1u, (unsigned __int8 *)(v11 + 33));
          }
          dispatch_async(*(dispatch_queue_t *)v11, &block);
          std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v14, *(void *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16));
          uint64_t v12 = *(void *)(v5 + 472);
          uint64_t v21 = (void *)MEMORY[0x1E4F143A8];
          uint64_t v22 = 1174405120;
          mach_port_t v23 = ___ZN23HALS_IOContext_MCP_Impl14end_processingEv_block_invoke_2;
          int v24 = (void **)&__block_descriptor_tmp_29_2797;
          uint64_t v25 = v14;
          long long v26 = v15;
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unsigned __int8 v13 = atomic_load((unsigned __int8 *)(v12 + 32));
          if (v13) {
            atomic_store(1u, (unsigned __int8 *)(v12 + 33));
          }
          dispatch_async(*(dispatch_queue_t *)v12, &v21);
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1BABC6D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  _Unwind_Resume(a1);
}

void ___ZN23HALS_IOContext_MCP_Impl14end_processingEv_block_invoke(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  HALS_System::GetInstance(&v4, 0, v3);
  HALS_System::SetIOContextIsRunning(v4, *(_DWORD *)(a1 + 32), 0);
  unint64_t v2 = v5;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1BABC6E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN23HALS_IOContext_MCP_Impl14end_processingEv_block_invoke_2(uint64_t a1)
{
  return HALS_IOContext_MCP_Impl::send_is_running_somewhere_else(*(HALS_IOContext_MCP_Impl **)(a1 + 32));
}

void __destroy_helper_block_e8_32c51_ZTSNSt3__110shared_ptrI23HALS_IOContext_MCP_ImplEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_e8_32c51_ZTSNSt3__110shared_ptrI23HALS_IOContext_MCP_ImplEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t HALS_IOContext_MCP_Impl::send_is_running_somewhere_else(HALS_IOContext_MCP_Impl *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  strcpy(buf, "frbtbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  HALS_IOContext_MCP_Impl::call_mcp_operation_function<AMCP::Graph::Timebase_Set>((uint64_t)v14, (uint64_t)this, (unsigned int *)buf);
  if (!v15)
  {
    AMCP::Log::Scope_Registry::get(v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v3 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "HALS_IOContext_MCP_Impl.cpp";
      __int16 v19 = 1024;
      int v20 = 1384;
      _os_log_debug_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl::send_is_running_somewhere_else - no timebases found", buf, 0x18u);
    }
  }
  uint64_t v4 = *((void *)this + 59);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  void v9[2] = ___ZN23HALS_IOContext_MCP_Impl30send_is_running_somewhere_elseEv_block_invoke;
  v9[3] = &__block_descriptor_tmp_21_2799;
  std::unordered_set<std::shared_ptr<AMCP::Graph::Timebase>>::unordered_set((uint64_t)v10, (uint64_t)v14);
  std::string __p = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request>::__init_with_size[abi:ne180100]<AMCP::IO_Core::Play_State_Manager::Play_Request*,AMCP::IO_Core::Play_State_Manager::Play_Request*>(&__p, v16, (uint64_t)v17, (v17 - (unsigned char *)v16) >> 2);
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v4 + 32));
  if (v5) {
    atomic_store(1u, (unsigned __int8 *)(v4 + 33));
  }
  dispatch_async(*(dispatch_queue_t *)v4, v9);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table((uint64_t)v10);
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
  return std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table((uint64_t)v14);
}

void sub_1BABC703C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  AMCP::Graph::Timebase_Set::~Timebase_Set((AMCP::Graph::Timebase_Set *)va);
  _Unwind_Resume(a1);
}

void HALS_IOContext_MCP_Impl::call_mcp_operation_function<AMCP::Graph::Timebase_Set>(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 56);
  if (v4 && (unint64_t v7 = std::__shared_weak_count::lock(v4)) != 0)
  {
    mach_port_t v8 = v7;
    unint64_t v9 = *(int8x8_t **)(a2 + 48);
    if (v9)
    {
      if (*a3 == 707406378 || a3[1] == 707406378 || a3[2] == -1)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v14 = **(NSObject ***)buf;
        if (*(void *)v34) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v34);
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          uint64_t v15 = pthread_self();
          mach_port_t v16 = pthread_mach_thread_np(v15);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v16;
          *(_WORD *)std::logic_error v34 = 2080;
          *(void *)&v34[2] = "Core.h";
          __int16 v35 = 1024;
          int v36 = 198;
          __int16 v37 = 2080;
          *(void *)int v38 = "!in_address.has_wildcards()";
          _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
        }
        abort();
      }
      operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v31, v9, a3);
      if (!v31)
      {
        AMCP::Log::Scope_Registry::get(operation);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v11 = **(NSObject ***)buf;
        if (*(void *)v34) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v34);
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          uint64_t v12 = pthread_self();
          mach_port_t v13 = pthread_mach_thread_np(v12);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v13;
          *(_WORD *)std::logic_error v34 = 2080;
          *(void *)&v34[2] = "Core.h";
          __int16 v35 = 1024;
          int v36 = 202;
          _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v22);
        std::runtime_error::runtime_error(&v23, &v22);
        std::runtime_error::runtime_error(&v24, &v23);
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        int v29 = -1;
        v24.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        uint64_t v25 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
        *(void *)&v38[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) c"
                             "onst [Return_Type = AMCP::Graph::Timebase_Set, Argument_Types = <>]";
        char v39 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
        int v40 = 202;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v17);
        *(_OWORD *)std::string __p = *(_OWORD *)v17;
        uint64_t v21 = v18;
        v17[0] = 0;
        v17[1] = 0;
        uint64_t v18 = 0;
        __int16 v19 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      AMCP::Core::Operation::call_function<AMCP::Graph::Timebase_Set>(a1, v31);
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
    }
    else
    {
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_DWORD *)(a1 + 32) = 1065353216;
      *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
      *(void *)(a1 + 56) = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)(a1 + 32) = 1065353216;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    *(void *)(a1 + 56) = 0;
  }
}

void sub_1BABC7510(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BABC7518);
  }
  __clang_call_terminate(a1);
}

uint64_t ___ZN23HALS_IOContext_MCP_Impl30send_is_running_somewhere_elseEv_block_invoke(uint64_t a1)
{
  std::unordered_set<std::shared_ptr<AMCP::Graph::Timebase>>::unordered_set((uint64_t)v14, a1 + 32);
  uint64_t v15 = 0;
  mach_port_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request>::__init_with_size[abi:ne180100]<AMCP::IO_Core::Play_State_Manager::Play_Request*,AMCP::IO_Core::Play_State_Manager::Play_Request*>(&v15, *(const void **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 2);
  v21[0] = 0;
  v21[1] = 0;
  HALS_System::GetInstance(&__p, 0, v21);
  HALS_IOContext_Manager::find_contexts_and_devices_with_timebases((HALS_IOContext_Manager *)&v22, *((os_unfair_lock_s **)__p + 174), (uint64_t)v14);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v2 = v22;
  uint64_t v3 = v23;
  if (v22 != v23)
  {
    uint64_t v4 = v22;
    do
    {
      uint64_t v5 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v4);
      unint64_t v7 = (HALS_ObjectMap *)v5;
      if (v5)
      {
        unint64_t v9 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**(unsigned int **)(v5 + 64));
        if (v9)
        {
          int v10 = (int *)v24;
          uint64_t v11 = v25;
          while (v10 != v11)
          {
            int v12 = *v10;
            std::string __p = 0;
            __int16 v19 = 0;
            uint64_t v20 = 0;
            HALS_Client::SendIsRunningSomewhereElse(v9, v12, (uint64_t)&__p);
            if (__p)
            {
              __int16 v19 = (std::__shared_weak_count *)__p;
              operator delete(__p);
            }
            ++v10;
          }
        }
        HALS_ObjectMap::ReleaseObject(v9, v8);
      }
      HALS_ObjectMap::ReleaseObject(v7, v6);
      ++v4;
    }
    while (v4 != v3);
  }
  if (v24) {
    operator delete(v24);
  }
  if (v2) {
    operator delete(v2);
  }
  if (v15)
  {
    mach_port_t v16 = v15;
    operator delete(v15);
  }
  return std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table((uint64_t)v14);
}

void sub_1BABC7684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  AMCP::Graph::Timebase_Set::~Timebase_Set((AMCP::Graph::Timebase_Set *)&a10);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Timebase_Set::~Timebase_Set(AMCP::Graph::Timebase_Set *this)
{
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }

  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table((uint64_t)this);
}

uint64_t __destroy_helper_block_e8_32c31_ZTSN4AMCP5Graph12Timebase_SetE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }

  return std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table(a1 + 32);
}

void *__copy_helper_block_e8_32c31_ZTSN4AMCP5Graph12Timebase_SetE(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  std::unordered_set<std::shared_ptr<AMCP::Graph::Timebase>>::unordered_set((uint64_t)(a1 + 4), a2 + 32);
  v3[9] = 0;
  v3[10] = 0;
  v3 += 9;
  uint64_t v3[2] = 0;
  return std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request>::__init_with_size[abi:ne180100]<AMCP::IO_Core::Play_State_Manager::Play_Request*,AMCP::IO_Core::Play_State_Manager::Play_Request*>(v3, *(const void **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
}

void sub_1BABC77EC(_Unwind_Exception *a1)
{
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::vector<unsigned int>,std::vector<unsigned int>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void *std::__function::__func<HALS_IOContext_MCP_Impl::end_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::end_processing(void)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_MCP_Impl::end_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::end_processing(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN23HALS_IOContext_MCP_Impl14end_processingEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOContext_MCP_Impl::end_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::end_processing(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(HALS_Object **)(*(void *)(a1 + 8) + 40);
  uint64_t v2 = (HALS_NotificationManager *)*(unsigned int *)(a1 + 16);
  *(void *)&v3.signed int mSelector = 0x676C6F62676F696ELL;
  v3.AudioObjectPropertyElement mElement = 0;
  HALS_Object::PropertiesChanged_Sync(v1, v2, 0, 1u, &v3);
}

__n128 std::__function::__func<HALS_IOContext_MCP_Impl::end_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::end_processing(void)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14633B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(&a9, 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_MCP_Impl::end_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::end_processing(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F14633B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(&a9, 8) = result;
  return result;
}

void std::__function::__func<HALS_IOContext_MCP_Impl::end_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::end_processing(void)::$_0>,void ()(void)>::~__func()
{
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3>,void ()(unsigned int)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3>,void ()(unsigned int)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3>,void ()(unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1463260;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F1463260;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3>,void ()(unsigned int)>::~__func(void *a1)
{
  *a1 = &unk_1F1463260;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_3>,void ()(unsigned int)>::~__func(void *a1)
{
  *a1 = &unk_1F1463260;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2>,void ()(unsigned int)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2>,void ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN23HALS_IOContext_MCP_Impl24attach_ioproc_to_contextEN4AMCP11Power_StateEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2>,void ()(unsigned int)>::operator()(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return;
  }
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    int v6 = *(_DWORD *)(v5 + 28);
    *(_DWORD *)(v5 + 2_Block_object_dispose(&a9, 8) = v6 + 1;
    if (!v6)
    {
      int v7 = *(_DWORD *)(*(void *)(v5 + 40) + 16);
      IOStatus = (_OWORD *)HALB_IOBufferManager_Server::GetIOStatus(*(HALB_IOBufferManager_Server **)(v5 + 240));
      if (!IOStatus)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_IOContext_MCP_Impl.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1428;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ", buf, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = off_1F148A5D8;
        exception[2] = 1970171760;
      }
      IOStatus[17] = 0u;
      IOStatus[18] = 0u;
      IOStatus[15] = 0u;
      IOStatus[16] = 0u;
      IOStatus[13] = 0u;
      IOStatus[14] = 0u;
      IOStatus[11] = 0u;
      IOStatus[12] = 0u;
      IOStatus[9] = 0u;
      IOStatus[10] = 0u;
      IOStatus[7] = 0u;
      IOStatus[8] = 0u;
      IOStatus[5] = 0u;
      IOStatus[6] = 0u;
      IOStatus[3] = 0u;
      IOStatus[4] = 0u;
      IOStatus[1] = 0u;
      IOStatus[2] = 0u;
      _OWORD *IOStatus = 0u;
      HALS_IOContext_MCP_Impl::update_status_time_info((HALS_IOContext_MCP_Impl *)v5);
      OSMemoryBarrier();
      unint64_t v9 = *(unsigned int **)(v5 + 40);
      int v10 = (HALS_NotificationManager *)v9[18];
      if (!v10) {
        int v10 = (HALS_NotificationManager *)v9[4];
      }
      *(void *)buf = &unk_1F1463338;
      *(void *)&uint8_t buf[8] = v5;
      *(void *)&buf[16] = v10;
      *(void *)&long long v31 = buf;
      blocuint64_t k = 0x676C6F62676F696ELL;
      LODWORD(v26) = 0;
      HALS_Object::PropertiesChanged_Sync((HALS_Object *)v9, v10, 0, 1u, (const AudioObjectPropertyAddress *)&block);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](buf);
      uint64_t v11 = (AMCP::Log::Scope_Registry *)HALS_IOContext::WaitForClientToBeginTransport(*(std::__shared_weak_count **)(v5 + 40));
      int v12 = (int)v11;
      AMCP::Log::Scope_Registry::get(v11);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v13 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
      if (v14)
      {
        __int16 v19 = pthread_self();
        mach_port_t v20 = pthread_mach_thread_np(v19);
        uint64_t v21 = "NO";
        *(_DWORD *)&uint8_t buf[4] = v20;
        *(_DWORD *)buf = 67109890;
        *(void *)&buf[10] = "HALS_IOContext_MCP_Impl.cpp";
        *(_WORD *)&uint8_t buf[8] = 2080;
        if (v12) {
          uint64_t v21 = "YES";
        }
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = 1445;
        LOWORD(v31) = 2080;
        *(void *)((char *)&v31 + 2) = v21;
        _os_log_debug_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d finished WaitForClientToBeginTransport: did start: %s", buf, 0x22u);
        if (v12) {
          goto LABEL_12;
        }
      }
      else if (v12)
      {
LABEL_12:
        HALS_IOContext::UpdateInputStreamUsageStatus((HALS_PlatformBehaviors *)v14);
        uint64_t v15 = *(void *)(v5 + 472);
        blocuint64_t k = MEMORY[0x1E4F143A8];
        uint64_t v26 = 0x40000000;
        uint64_t v27 = ___ZN23HALS_IOContext_MCP_Impl16begin_processingEv_block_invoke;
        uint64_t v28 = &__block_descriptor_tmp_24_2805;
        int v29 = v7;
        unsigned __int8 v16 = atomic_load((unsigned __int8 *)(v15 + 32));
        if (v16) {
          atomic_store(1u, (unsigned __int8 *)(v15 + 33));
        }
        dispatch_async(*(dispatch_queue_t *)v15, &block);
        std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v23, *(void *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16));
        uint64_t v17 = *(void *)(v5 + 472);
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&uint8_t buf[8] = 1174405120;
        *(void *)&buf[16] = ___ZN23HALS_IOContext_MCP_Impl16begin_processingEv_block_invoke_2;
        *(void *)&long long v31 = &__block_descriptor_tmp_25_2806;
        *((void *)&v31 + 1) = v23;
        std::runtime_error v32 = v24;
        if (v24) {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unsigned __int8 v18 = atomic_load((unsigned __int8 *)(v17 + 32));
        if (v18) {
          atomic_store(1u, (unsigned __int8 *)(v17 + 33));
        }
        dispatch_async(*(dispatch_queue_t *)v17, buf);
        if (v32) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v32);
        }
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        goto LABEL_27;
      }
      HALS_IOContext_MCP_Impl::stop(v5);
    }
  }
LABEL_27:

  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
}

void sub_1BABC7F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void HALS_IOContext_MCP_Impl::update_status_time_info(HALS_IOContext_MCP_Impl *this)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t IOStatus = HALB_IOBufferManager_Server::GetIOStatus(*((HALB_IOBufferManager_Server **)this + 30));
  if (!IOStatus)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_IOContext_MCP_Impl.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1522;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1970171760;
  }
  uint64_t v3 = (int8x16_t *)IOStatus;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v4)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v4);
    uint64_t v5 = v4;
    if (v4 && *((void *)this + 6))
    {
      uint64_t v6 = *((void *)this + 32);
      if (!v6)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_IOContext_MCP_Impl.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1543;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  master timebase not found!", buf, 0x12u);
        }
        uint64_t v28 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v28 = off_1F148A5D8;
        uint64_t v28[2] = 1970171760;
      }
      double v7 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(void *)v6 + 136))(v6));
      if (v8)
      {
        (*(void (**)(void, double))(**((void **)this + 32) + 56))(*((void *)this + 32), v7);
        (*(void (**)(void))(**((void **)this + 32) + 160))(*((void *)this + 32));
      }
      double v30 = (*(double (**)(void))(**((void **)this + 32) + 72))(*((void *)this + 32));
      double v9 = (*(double (**)(void))(**((void **)this + 32) + 160))(*((void *)this + 32));
      double v29 = 1.0 / v30;
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  int v10 = **(NSObject ***)buf;
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v21 = pthread_self();
    mach_port_t v22 = pthread_mach_thread_np(v21);
    int v23 = *(_DWORD *)(*((void *)this + 5) + 16);
    HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&v31, (uint64_t)this);
    CFStringRef v24 = v31;
    if (!v31)
    {
      uint64_t v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v27, "Could not construct");
      __cxa_throw(v27, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v31);
    if (v33 >= 0) {
      uint64_t v25 = __p;
    }
    else {
      uint64_t v25 = (void **)__p[0];
    }
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v22;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = "HALS_IOContext_MCP_Impl.cpp";
    __int16 v35 = 1024;
    int v36 = 1556;
    __int16 v37 = 1024;
    int v38 = v23;
    __int16 v39 = 2080;
    int v40 = v25;
    _os_log_debug_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
    if (v33 < 0) {
      operator delete(__p[0]);
    }
    CFRelease(v24);
  }
  unint64_t v11 = 0;
  if (v5)
  {
    double v29 = 0.0;
    double v9 = 0.0;
    double v30 = 0.0;
LABEL_15:
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    v12.f64[0] = v30;
    v12.f64[1] = v29;
    float64x2_t v13 = vmulq_f64(v12, (float64x2_t)vdupq_n_s64(0x4176E36000000000uLL));
    unint64_t v11 = *(void *)&v9;
    goto LABEL_17;
  }
  float64x2_t v13 = 0uLL;
LABEL_17:
  uint64_t v14 = *(void *)(*((void *)this + 5) + 64);
  int v15 = *(unsigned __int8 *)(v14 + 40);
  int8x16_t v16 = (int8x16_t)vdivq_f64(v13, (float64x2_t)vdupq_n_s64(0x4176E36000000000uLL));
  int32x2_t v17 = vdup_n_s32(*(unsigned char *)(v14 + 40) == 0);
  v18.i64[0] = v17.u32[0];
  v18.i64[1] = v17.u32[1];
  int8x16_t *v3 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v18, 0x3FuLL)), v16, vrev64q_s8(v16));
  unint64_t v19 = v11;
  if (v15)
  {
    unint64_t v19 = bswap64(v11);
    unsigned int v20 = bswap32(*((_DWORD *)this + 62));
  }
  else
  {
    unsigned int v20 = *((_DWORD *)this + 62);
  }
  v3[1].i64[0] = v19;
  v3[1].i32[2] = v20;
}

void sub_1BABC8490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext_MCP_Impl::stop(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 32);
  if (v1)
  {
    uint64_t v2 = this;
    *(_DWORD *)(this + 32) = v1 - 1;
    uint64_t v3 = *(void *)(*(void *)(this + 40) + 80);
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 120))(v3);
      (*(void (**)(void))(**(void **)(*(void *)(v2 + 40) + 80) + 128))(*(void *)(*(void *)(v2 + 40) + 80));
    }
    uint64_t v4 = 0x676C6F6273746F70;
    int v5 = 0;
    return HALS_IOContext_MCP_Impl::call_mcp_operation_function<BOOL>(v2, (unsigned int *)&v4);
  }
  return this;
}

void ___ZN23HALS_IOContext_MCP_Impl16begin_processingEv_block_invoke(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  HALS_System::GetInstance(&v4, 0, v3);
  HALS_System::SetIOContextIsRunning(v4, *(_DWORD *)(a1 + 32), 1);
  uint64_t v2 = v5;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1BABC8618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN23HALS_IOContext_MCP_Impl16begin_processingEv_block_invoke_2(uint64_t a1)
{
  return HALS_IOContext_MCP_Impl::send_is_running_somewhere_else(*(HALS_IOContext_MCP_Impl **)(a1 + 32));
}

uint64_t HALS_IOContext_MCP_Impl::call_mcp_operation_function<BOOL>(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v3) {
    return 0;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  double v7 = *(AMCP::Address **)(a1 + 48);
  if (v7) {
    uint64_t v8 = AMCP::Core::Core::call_operation_function<BOOL>(v7, a2);
  }
  else {
    uint64_t v8 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v8;
}

uint64_t AMCP::Core::Core::call_operation_function<BOOL>(AMCP::Address *a1, unsigned int *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    double v9 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)double v29 = 2080;
      *(void *)&v29[2] = "Core.h";
      __int16 v30 = 1024;
      int v31 = 198;
      __int16 v32 = 2080;
      *(void *)char v33 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v26, (int8x8_t *)a1, a2);
  if (!v26)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v6 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      double v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)double v29 = 2080;
      *(void *)&v29[2] = "Core.h";
      __int16 v30 = 1024;
      int v31 = 202;
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v17);
    std::runtime_error::runtime_error(&v18, &v17);
    std::runtime_error::runtime_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    unsigned int v20 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&v33[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = BOOL, Argument_Types = <>]";
    std::logic_error v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    int v35 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    uint64_t v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v4 = AMCP::Core::Operation::call_function<BOOL>(v26);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  return v4;
}

void sub_1BABC89F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  char v25 = *(std::__shared_weak_count **)(v23 - 136);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN23HALS_IOContext_MCP_Impl16begin_processingEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  int v1 = *(HALS_Object **)(*(void *)(a1 + 8) + 40);
  uint64_t v2 = (HALS_NotificationManager *)*(unsigned int *)(a1 + 16);
  *(void *)&v3.signed int mSelector = 0x676C6F62676F696ELL;
  v3.AudioObjectPropertyElement mElement = 0;
  HALS_Object::PropertiesChanged_Sync(v1, v2, 0, 1u, &v3);
}

__n128 std::__function::__func<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1463338;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(&a9, 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F1463338;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(&a9, 8) = result;
  return result;
}

void std::__function::__func<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0,std::allocator<HALS_IOContext_MCP_Impl::begin_processing(void)::$_0>,void ()(void)>::~__func()
{
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2>,void ()(unsigned int)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2>,void ()(unsigned int)>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2>,void ()(unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14631E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F14631E0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2>,void ()(unsigned int)>::~__func(void *a1)
{
  *a1 = &unk_1F14631E0;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_2>,void ()(unsigned int)>::~__func(void *a1)
{
  *a1 = &unk_1F14631E0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void AMCP::Core::Core::call_operation_function<void,std::function<void ()(unsigned int)>>(AMCP::Address *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v22 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = pthread_self();
      mach_port_t v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v24;
      *(_WORD *)int v43 = 2080;
      *(void *)&v43[2] = "Core.h";
      __int16 v44 = 1024;
      int v45 = 198;
      __int16 v46 = 2080;
      *(void *)int v47 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v25, (int8x8_t *)a1, a2);
  double v7 = v25;
  if (!v25)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v16 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      std::string v17 = pthread_self();
      mach_port_t v18 = pthread_mach_thread_np(v17);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v18;
      *(_WORD *)int v43 = 2080;
      *(void *)&v43[2] = "Core.h";
      __int16 v44 = 1024;
      int v45 = 202;
      _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v32);
    std::runtime_error::runtime_error(&v33, &v32);
    std::runtime_error::runtime_error(&v34, &v33);
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v39 = -1;
    v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v35 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
    *(void *)&v47[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = void, Argument_Types = <std::function<void >>]";
    uint64_t v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    int v49 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
    long long v30 = v27;
    uint64_t v31 = v28;
    long long v27 = 0uLL;
    uint64_t v28 = 0;
    double v29 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)v41, a3);
  unint64_t v8 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()>)>>();
  double v9 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v8);
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    std::runtime_error v19 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      unsigned int v20 = pthread_self();
      mach_port_t v21 = pthread_mach_thread_np(v20);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v21;
      *(_WORD *)int v43 = 2080;
      *(void *)&v43[2] = "Operation.h";
      __int16 v44 = 1024;
      int v45 = 154;
      _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v32);
    std::runtime_error::runtime_error(&v33, &v32);
    std::runtime_error::runtime_error(&v34, &v33);
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v39 = -1;
    v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v35 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
    *(void *)&v47[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, "
                         "Argument_Types = <std::function<void >>]";
    uint64_t v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v49 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
    long long v30 = v27;
    uint64_t v31 = v28;
    long long v27 = 0uLL;
    uint64_t v28 = 0;
    double v29 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  int v10 = v9;
  if (!*((void *)v9 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()>)>>(),
        double v9 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v10 + 7))(4, (uint64_t)v10 + 24, 0, buf), (v11 = v9) == 0))
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v13 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v15;
      *(_WORD *)int v43 = 2080;
      *(void *)&v43[2] = "Operation.h";
      __int16 v44 = 1024;
      int v45 = 161;
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v32);
    std::runtime_error::runtime_error(&v33, &v32);
    std::runtime_error::runtime_error(&v34, &v33);
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v39 = -1;
    v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v35 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
    *(void *)&v47[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, "
                         "Argument_Types = <std::function<void >>]";
    uint64_t v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v49 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
    long long v30 = v27;
    uint64_t v31 = v28;
    long long v27 = 0uLL;
    uint64_t v28 = 0;
    double v29 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)v41);
  uint64_t v12 = *((void *)v11 + 3);
  if (!v12) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v12 + 48))(v12, buf);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100](buf);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100](v41);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
}

void sub_1BABC9564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int)>)>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[60];
}

void *std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1>,void ()(unsigned int)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1>,void ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN23HALS_IOContext_MCP_Impl24attach_ioproc_to_contextEN4AMCP11Power_StateEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1>,void ()(unsigned int)>::operator()(uint64_t a1)
{
  int v1 = (std::__shared_weak_count **)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 8));
  uint64_t v3 = (HALS_ObjectMap *)v1;
  if (v1) {
    HALS_IOContext::SignalOverloadToClient(v1);
  }
  HALS_ObjectMap::ReleaseObject(v3, v2);
}

void sub_1BABC97B0(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1>,void ()(unsigned int)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F1463160;
  *(_DWORD *)(a2 + _Block_object_dispose(&a9, 8) = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F1463160;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_1>,void ()(unsigned int)>::~__func()
{
}

uint64_t std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void AMCP::Core::Core::call_operation_function<void,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Address *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v22 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = pthread_self();
      mach_port_t v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v24;
      *(_WORD *)int v43 = 2080;
      *(void *)&v43[2] = "Core.h";
      __int16 v44 = 1024;
      int v45 = 198;
      __int16 v46 = 2080;
      *(void *)int v47 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v25, (int8x8_t *)a1, a2);
  double v7 = v25;
  if (!v25)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v16 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      std::string v17 = pthread_self();
      mach_port_t v18 = pthread_mach_thread_np(v17);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v18;
      *(_WORD *)int v43 = 2080;
      *(void *)&v43[2] = "Core.h";
      __int16 v44 = 1024;
      int v45 = 202;
      _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v32);
    std::runtime_error::runtime_error(&v33, &v32);
    std::runtime_error::runtime_error(&v34, &v33);
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v39 = -1;
    v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v35 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
    *(void *)&v47[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = void, Argument_Types = <std::function<void (unsigned int, const AMCP::Proc_Cycl"
                         "e_Info &, unsigned long, AMCP::Proc_Stream *, unsigned long, AMCP::Proc_Stream *)>>]";
    uint64_t v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    int v49 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
    long long v30 = v27;
    uint64_t v31 = v28;
    long long v27 = 0uLL;
    uint64_t v28 = 0;
    double v29 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100]((uint64_t)v41, a3);
  unint64_t v8 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>>();
  double v9 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v8);
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    std::runtime_error v19 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      unsigned int v20 = pthread_self();
      mach_port_t v21 = pthread_mach_thread_np(v20);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v21;
      *(_WORD *)int v43 = 2080;
      *(void *)&v43[2] = "Operation.h";
      __int16 v44 = 1024;
      int v45 = 154;
      _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v32);
    std::runtime_error::runtime_error(&v33, &v32);
    std::runtime_error::runtime_error(&v34, &v33);
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v39 = -1;
    v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v35 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
    *(void *)&v47[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, "
                         "Argument_Types = <std::function<void (unsigned int, const AMCP::Proc_Cycle_Info &, unsigned lon"
                         "g, AMCP::Proc_Stream *, unsigned long, AMCP::Proc_Stream *)>>]";
    uint64_t v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v49 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
    long long v30 = v27;
    uint64_t v31 = v28;
    long long v27 = 0uLL;
    uint64_t v28 = 0;
    double v29 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  int v10 = v9;
  if (!*((void *)v9 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>>(),
        double v9 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v10 + 7))(4, (uint64_t)v10 + 24, 0, buf), (v11 = v9) == 0))
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v13 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v15;
      *(_WORD *)int v43 = 2080;
      *(void *)&v43[2] = "Operation.h";
      __int16 v44 = 1024;
      int v45 = 161;
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v32);
    std::runtime_error::runtime_error(&v33, &v32);
    std::runtime_error::runtime_error(&v34, &v33);
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v39 = -1;
    v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v35 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
    *(void *)&v47[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, "
                         "Argument_Types = <std::function<void (unsigned int, const AMCP::Proc_Cycle_Info &, unsigned lon"
                         "g, AMCP::Proc_Stream *, unsigned long, AMCP::Proc_Stream *)>>]";
    uint64_t v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v49 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
    long long v30 = v27;
    uint64_t v31 = v28;
    long long v27 = 0uLL;
    uint64_t v28 = 0;
    double v29 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)v41);
  uint64_t v12 = *((void *)v11 + 3);
  if (!v12) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v12 + 48))(v12, buf);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100](buf);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100](v41);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
}

void sub_1BABCA068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[58];
}

void *std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN23HALS_IOContext_MCP_Impl24attach_ioproc_to_contextEN4AMCP11Power_StateEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5, unint64_t *a6, uint64_t *a7)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8)
  {
    unint64_t v10 = *a4;
    uint64_t v11 = *a5;
    unint64_t v12 = *a6;
    uint64_t v13 = *a7;
    uint64_t v14 = std::__shared_weak_count::lock(v8);
    if (v14)
    {
      mach_port_t v15 = v14;
      uint64_t v16 = *(void *)(a1 + 8);
      if (v16)
      {
        ++*(_DWORD *)(v16 + 24);
        uint64_t IOStatus = (_OWORD *)HALB_IOBufferManager_Server::GetIOStatus(*(HALB_IOBufferManager_Server **)(v16 + 240));
        if (!IOStatus)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            int v39 = 136315394;
            char v40 = "HALS_IOContext_MCP_Impl.cpp";
            __int16 v41 = 1024;
            int v42 = 1567;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ", (uint8_t *)&v39, 0x12u);
          }
          exception = __cxa_allocate_exception(0x10uLL);
          *(void *)exception = off_1F148A5D8;
          exception[2] = 1970171760;
        }
        int v18 = *(unsigned __int8 *)(*(void *)(*(void *)(v16 + 40) + 64) + 40);
        if (*(unsigned char *)(*(void *)(*(void *)(v16 + 40) + 64) + 40))
        {
          *(void *)(v16 + 272) = bswap64(*(void *)a3);
          *(void *)(v16 + 280) = bswap64(*(void *)(a3 + 8));
          *(void *)(v16 + 28_Block_object_dispose(&a9, 8) = bswap64(*(void *)(a3 + 16));
          *(_DWORD *)(v16 + 32_Block_object_dispose(&a9, 8) = bswap32(*(_DWORD *)(a3 + 56));
          std::runtime_error v19 = (long long *)(v16 + 336);
          *(void *)(v16 + 336) = bswap64(*(void *)(a3 + 64));
          *(void *)(v16 + 344) = bswap64(*(void *)(a3 + 72));
          *(void *)(v16 + 352) = bswap64(*(void *)(a3 + 16));
          *(_DWORD *)(v16 + 392) = bswap32(*(_DWORD *)(a3 + 56));
          unsigned int v20 = (long long *)(v16 + 400);
          *(void *)(v16 + 400) = bswap64(*(void *)(a3 + 128));
          unint64_t v21 = bswap64(*(void *)(a3 + 136));
        }
        else
        {
          *(void *)(v16 + 272) = *(void *)a3;
          *(void *)(v16 + 280) = *(void *)(a3 + 8);
          *(void *)(v16 + 28_Block_object_dispose(&a9, 8) = *(void *)(a3 + 16);
          *(_DWORD *)(v16 + 32_Block_object_dispose(&a9, 8) = *(_DWORD *)(a3 + 56);
          std::runtime_error v19 = (long long *)(v16 + 336);
          *(void *)(v16 + 336) = *(void *)(a3 + 64);
          *(void *)(v16 + 344) = *(void *)(a3 + 72);
          *(void *)(v16 + 352) = *(void *)(a3 + 16);
          *(_DWORD *)(v16 + 392) = *(_DWORD *)(a3 + 56);
          unsigned int v20 = (long long *)(v16 + 400);
          *(void *)(v16 + 400) = *(void *)(a3 + 128);
          unint64_t v21 = *(void *)(a3 + 136);
        }
        *(void *)(v16 + 40_Block_object_dispose(&a9, 8) = v21;
        unint64_t v22 = bswap64(*(void *)(a3 + 16));
        unsigned int v23 = bswap32(*(_DWORD *)(a3 + 56));
        BOOL v24 = v18 == 0;
        if (v18) {
          unint64_t v25 = v22;
        }
        else {
          unint64_t v25 = *(void *)(a3 + 16);
        }
        if (v24) {
          unsigned int v26 = *(_DWORD *)(a3 + 56);
        }
        else {
          unsigned int v26 = v23;
        }
        *(void *)(v16 + 416) = v25;
        *(_DWORD *)(v16 + 456) = v26;
        long long v27 = *(_OWORD *)(v16 + 272);
        long long v28 = *(_OWORD *)(v16 + 288);
        long long v29 = *(_OWORD *)(v16 + 320);
        IOStatus[8] = *(_OWORD *)(v16 + 304);
        IOStatus[9] = v29;
        IOStatus[6] = v27;
        IOStatus[7] = v28;
        long long v30 = *v19;
        long long v31 = v19[1];
        long long v32 = v19[3];
        IOStatus[12] = v19[2];
        IOStatus[13] = v32;
        IOStatus[10] = v30;
        IOStatus[11] = v31;
        long long v33 = *v20;
        long long v34 = v20[1];
        long long v35 = v20[3];
        IOStatus[16] = v20[2];
        IOStatus[17] = v35;
        IOStatus[14] = v33;
        IOStatus[15] = v34;
        HALS_IOContext_MCP_Impl::update_status_time_info((HALS_IOContext_MCP_Impl *)v16);
        OSMemoryBarrier();
        uint64_t v37 = *(void *)(v16 + 192);
        uint64_t v36 = *(void *)(v16 + 200);
        if (-991146299 * ((*(void *)(v16 + 224) - *(void *)(v16 + 216)) >> 3)) {
          HALS_IOContext_MCP_Impl::copy_buffers((AMCP::Log::Scope_Registry *)v16, 1u, v10, v11);
        }
        kdebug_trace();
        HALS_IOContext::CallClientIOProc(*(HALS_IOContext **)(v16 + 40), *(_DWORD *)(v16 + 24), *(_DWORD *)(v16 + 248), 0, 0);
        kdebug_trace();
        if (-991146299 * ((unint64_t)(v36 - v37) >> 3)) {
          HALS_IOContext_MCP_Impl::copy_buffers((AMCP::Log::Scope_Registry *)v16, 0, v12, v13);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_1BABCA634(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

AMCP::Log::Scope_Registry *HALS_IOContext_MCP_Impl::copy_buffers(AMCP::Log::Scope_Registry *result, unsigned int a2, unint64_t a3, uint64_t a4)
{
  double v7 = result;
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *(_DWORD **)(a4 + 72);
  if (v8 && *v8 != 1)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    BOOL v24 = **(NSObject ***)buf;
    if (*(void *)v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v34);
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      long long v28 = pthread_self();
      mach_port_t v29 = pthread_mach_thread_np(v28);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v29;
      *(_WORD *)long long v34 = 2080;
      *(void *)&v34[2] = "HALS_IOContext_MCP_Impl.cpp";
      __int16 v35 = 1024;
      int v36 = 1652;
      __int16 v37 = 2080;
      uint64_t v38 = "in_streams[0].m_buffer_list == nullptr or in_streams[0].m_buffer_list->mNumberBuffers == 1";
      long long v27 = "%6u %32s:%-5d Assertion Failed: %s The ABL from the MCP is supposed to have 1 buffer";
LABEL_22:
      _os_log_error_impl(&dword_1BAA78000, v24, OS_LOG_TYPE_ERROR, v27, buf, 0x22u);
    }
LABEL_23:
    abort();
  }
  if (a3)
  {
    unint64_t v9 = 0;
    long long v30 = (void *)((char *)result + 24 * a2 + 192);
    unsigned int v10 = 1;
    do
    {
      uint64_t v11 = a4 + 80 * v9;
      uint64_t v14 = *(_DWORD **)(v11 + 72);
      uint64_t v13 = (uint64_t *)(v11 + 72);
      unint64_t v12 = v14;
      if (v14)
      {
        if (*v12 != 1)
        {
          AMCP::Log::Scope_Registry::get(result);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          BOOL v24 = **(NSObject ***)buf;
          if (*(void *)v34) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v34);
          }
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            unint64_t v25 = pthread_self();
            mach_port_t v26 = pthread_mach_thread_np(v25);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v26;
            *(_WORD *)long long v34 = 2080;
            *(void *)&v34[2] = "HALS_IOContext_MCP_Impl.cpp";
            __int16 v35 = 1024;
            int v36 = 1658;
            __int16 v37 = 2080;
            uint64_t v38 = "in_streams[i].m_buffer_list->mNumberBuffers == 1";
            long long v27 = "%6u %32s:%-5d Assertion Failed: %s The input ABL from the MCP is supposed to have 1 buffer";
            goto LABEL_22;
          }
          goto LABEL_23;
        }
        *(_DWORD *)buf = 0;
        IOBuffer = (byte *)HALB_IOBufferManager_Server::GetIOBuffer(*((HALB_IOBufferManager_Server **)v7 + 30), a2 == 1, v10 - 1, (unsigned int *)buf);
        uint64_t v16 = IOBuffer;
        uint64_t v17 = *v13;
        unsigned int v18 = *(_DWORD *)(*v13 + 12);
        if (v18 >= *(_DWORD *)buf) {
          size_t v19 = *(unsigned int *)buf;
        }
        else {
          size_t v19 = v18;
        }
        if (a2 == 1)
        {
          __n128 result = (AMCP::Log::Scope_Registry *)memcpy(IOBuffer, *(const void **)(v17 + 16), v19);
          if (*(unsigned char *)(*(void *)(*((void *)v7 + 5) + 64) + 40))
          {
            uint64_t v20 = *((void *)v7 + 27) + 104 * v9;
            long long v21 = *(_OWORD *)(v20 + 16);
            *(_OWORD *)&v32.double mSampleRate = *(_OWORD *)v20;
            *(_OWORD *)&v32.mBytesPerPacket = v21;
            *(void *)&v32.mBitsPerChannel = *(void *)(v20 + 32);
            __n128 result = (AMCP::Log::Scope_Registry *)endian_swap_samples(&v32, v16, v19);
          }
        }
        else
        {
          if (*(unsigned char *)(*(void *)(*((void *)v7 + 5) + 64) + 40))
          {
            uint64_t v22 = *v30 + 104 * v9;
            long long v23 = *(_OWORD *)(v22 + 16);
            *(_OWORD *)&v31.double mSampleRate = *(_OWORD *)v22;
            *(_OWORD *)&v31.mBytesPerPacket = v23;
            *(void *)&v31.mBitsPerChannel = *(void *)(v22 + 32);
            endian_swap_samples(&v31, IOBuffer, v19);
            uint64_t v17 = *v13;
          }
          __n128 result = (AMCP::Log::Scope_Registry *)memcpy(*(void **)(v17 + 16), v16, v19);
        }
      }
      unint64_t v9 = v10++;
    }
    while (v9 < a3);
  }
  return result;
}

_DWORD *endian_swap_samples(_DWORD *result, byte *a2, int a3)
{
  if (result[2] == 1819304813)
  {
    unsigned int v3 = result[7];
    int v4 = result[6] / v3;
    uint64_t v5 = v3 * a3;
    if (v4 == 4)
    {
      if (v5)
      {
        do
        {
          *(_DWORD *)a2 = bswap32(*(_DWORD *)a2);
          a2 += 4;
          --v5;
        }
        while (v5);
      }
    }
    else if (v4 == 2 && v5 != 0)
    {
      do
      {
        *(_WORD *)a2 = bswap32(*(unsigned __int16 *)a2) >> 16;
        a2 += 2;
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::destroy_deallocate(void *__p)
{
  int v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14630E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F14630E0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__func(void *a1)
{
  *a1 = &unk_1F14630E0;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0,std::allocator<HALS_IOContext_MCP_Impl::attach_ioproc_to_context(AMCP::Power_State)::$_0>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__func(void *a1)
{
  *a1 = &unk_1F14630E0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t HALS_IOContext_MCP_Impl::GetStreamUsage(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 24 * a4 + 200) - *(void *)(a1 + 24 * a4 + 192)) >> 3);
  uint64_t v5 = 330382100 * ((uint64_t)(*(void *)(a1 + 24 * a4 + 200) - *(void *)(a1 + 24 * a4 + 192)) >> 3)
     + 4;
  if (v5 > a3)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "HALS_IOContext_MCP_Impl.cpp";
      __int16 v15 = 1024;
      int v16 = 951;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_MCP_Impl::GetStreamUsage: bad property data size for kAudioIOContextProperty_StreamUsage", (uint8_t *)&v13, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 561211770;
  }
  *a2 = v4;
  if (v4)
  {
    unint64_t v6 = 0;
    uint64_t v7 = a1 + 64;
    uint64_t v8 = 88;
    if (a4) {
      uint64_t v8 = 64;
    }
    else {
      uint64_t v7 = a1 + 88;
    }
    unint64_t v9 = *(void *)(v7 + 8);
    do
    {
      if (v9 <= v6) {
        LODWORD(v10) = 1;
      }
      else {
        uint64_t v10 = (*(void *)(*(void *)(a1 + v8) + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1;
      }
      a2[++v6] = v10;
    }
    while (v4 != v6);
  }
  return v5;
}

uint64_t HALS_IOContext_MCP_Impl::SetStreamUsage(HALS_IOContext_MCP_Impl *a1, _DWORD *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a3 <= 3)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "HALS_IOContext_MCP_Impl.cpp";
      __int16 v15 = 1024;
      int v16 = 555;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::SetPropertyData: bad property data size for kAudioIOContextProperty_StreamUsage", (uint8_t *)&v13, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 561211770;
  }
  unint64_t v4 = ((unint64_t)a3 + 0x3FFFFFFFCLL) >> 2;
  if (*a2 >= v4) {
    unint64_t v4 = v4;
  }
  else {
    unint64_t v4 = *a2;
  }
  if (-991146299 * ((*((void *)a1 + 3 * a4 + 25) - *((void *)a1 + 3 * a4 + 24)) >> 3) < v4) {
    unint64_t v4 = -991146299 * ((*((void *)a1 + 3 * a4 + 25) - *((void *)a1 + 3 * a4 + 24)) >> 3);
  }
  if (v4)
  {
    unint64_t v5 = 0;
    uint64_t v6 = 88;
    if (a4) {
      uint64_t v6 = 64;
    }
    uint64_t v7 = *(void *)((char *)a1 + v6);
    do
    {
      unint64_t v8 = v5 >> 6;
      uint64_t v9 = 1 << v5;
      if (a2[v5 + 1]) {
        uint64_t v10 = *(void *)(v7 + 8 * v8) | v9;
      }
      else {
        uint64_t v10 = *(void *)(v7 + 8 * v8) & ~v9;
      }
      *(void *)(v7 + 8 * v_Block_object_dispose(&a9, 8) = v10;
      ++v5;
    }
    while (v4 != v5);
  }
  HALS_IOContext_MCP_Impl::UpdateContext(a1);
  return 0;
}

void sub_1BABCAEA4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BABCADC4);
  }
  _Unwind_Resume(a1);
}

uint64_t **HALS_IOContext_MCP_Impl::GetMasterDevice(HALS_IOContext_MCP_Impl *this)
{
  (*(void (**)(void **__return_ptr))(**((void **)this + 32) + 24))(__p);
  v3[0] = 0;
  v3[1] = 0;
  HALS_System::GetInstance(&v4, 0, v3);
  hal_object_id_for_device_uid = HALS_IOContext_Manager::get_hal_object_id_for_device_uid(*(void *)(v4 + 1392), (unsigned __int8 *)__p);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return hal_object_id_for_device_uid;
}

void sub_1BABCAF7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float HALS_IOContext_MCP_Impl::get_simple_mcp_property<1852012899u>(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v2);
    uint64_t v3 = v2;
    if (v2)
    {
      uint64_t v2 = (std::__shared_weak_count *)a1[6];
      if (v2)
      {
        float simple_required = AMCP::Core::Core::get_simple_required_property<1852012899u>((AMCP::Core::Core *)v2);
LABEL_10:
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
        return simple_required;
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  unint64_t v5 = **(NSObject ***)buf;
  if (*(void *)v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v17);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    char v7 = pthread_self();
    mach_port_t v8 = pthread_mach_thread_np(v7);
    int v9 = *(_DWORD *)(a1[5] + 16);
    HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&v13, (uint64_t)a1);
    CFStringRef v10 = v13;
    if (!v13)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v13);
    if (v15 >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v8;
    *(_WORD *)uint64_t v17 = 2080;
    *(void *)&_OWORD v17[2] = "HALS_IOContext_MCP_Impl.cpp";
    __int16 v18 = 1024;
    int v19 = 107;
    __int16 v20 = 1024;
    int v21 = v9;
    __int16 v22 = 2080;
    long long v23 = v11;
    _os_log_debug_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    CFRelease(v10);
  }
  float simple_required = 0.0;
  if (v3) {
    goto LABEL_10;
  }
  return simple_required;
}

void sub_1BABCB1A0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

float AMCP::Core::Core::get_simple_required_property<1852012899u>(AMCP::Core::Core *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  strcpy(buf, "cycnbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  unint64_t v1 = AMCP::Core::Core::get_typed_property_value<float,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(v1))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v3 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = pthread_self();
      mach_port_t v5 = pthread_mach_thread_np(v4);
      char v7 = 4;
      strcpy((char *)__p, "ncyc");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v5;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      __int16 v9 = 1024;
      int v10 = 391;
      __int16 v11 = 2080;
      unint64_t v12 = "optional_value.operator BOOL() == true";
      __int16 v13 = 2080;
      uint64_t v14 = __p;
      __int16 v15 = 1024;
      int v16 = 1735159650;
      __int16 v17 = 1024;
      int v18 = 0;
      _os_log_error_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  return *(float *)&v1;
}

void sub_1BABCB344(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void HALS_IOContext_MCP_Impl::SetIOCycleUsage(HALS_IOContext_MCP_Impl *this, float a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  float v20 = a2;
  float simple_mcp = HALS_IOContext_MCP_Impl::get_simple_mcp_property<1852012899u>(this);
  mach_port_t v5 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v5)
  {
    mach_port_t v5 = std::__shared_weak_count::lock(v5);
    uint64_t v6 = v5;
    if (v5)
    {
      char v7 = (int8x8_t *)*((void *)this + 6);
      if (v7)
      {
        uint64_t v24 = 0x676C6F626E637963;
        int v25 = 0;
        if (AMCP::Core::Core::is_property_settable(v7, (const AMCP::Address *)&v24))
        {
          AMCP::Core::Core::find_operation((AMCP::Core::Core *)&__p, v7, (unsigned int *)&v24);
          mach_port_t v8 = __p;
          if (__p)
          {
            unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
            {
              AMCP::Core::Operation::call_function<void,float const&>(v8, (uint64_t)&v20);
            }
            else
            {
              unint64_t v18 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
              if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v18))
              {
                memset(buf, 0, sizeof(buf));
                *(float *)buf = a2;
                long long v27 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
                AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)buf);
                if (v27) {
                  v27(0, (uint64_t)buf, 0, 0);
                }
              }
            }
          }
          if (v22) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          }
        }
LABEL_15:
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        goto LABEL_16;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  int v10 = **(NSObject ***)buf;
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    __int16 v13 = pthread_self();
    mach_port_t v14 = pthread_mach_thread_np(v13);
    int v15 = *(_DWORD *)(*((void *)this + 5) + 16);
    HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&v24, (uint64_t)this);
    CFStringRef v16 = (const __CFString *)v24;
    if (!v24)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)v24);
    if (v23 >= 0) {
      p_p = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))&__p;
    }
    else {
      p_p = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))__p;
    }
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v14;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = "HALS_IOContext_MCP_Impl.cpp";
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = 121;
    *(_WORD *)&unsigned char buf[24] = 1024;
    *(_DWORD *)&buf[26] = v15;
    *(_WORD *)&buf[30] = 2080;
    long long v27 = p_p;
    _os_log_debug_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
    if (v23 < 0) {
      operator delete(__p);
    }
    CFRelease(v16);
  }
  if (v6) {
    goto LABEL_15;
  }
LABEL_16:
  if (HALS_IOContext_MCP_Impl::get_simple_mcp_property<1852012899u>(this) != simple_mcp)
  {
    __int16 v11 = (unsigned int *)*((void *)this + 5);
    unint64_t v12 = (HALS_NotificationManager *)v11[18];
    if (!v12) {
      unint64_t v12 = (HALS_NotificationManager *)v11[4];
    }
    strcpy(buf, "cycnbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    HALS_Object::PropertiesChanged((HALS_Object *)v11, v12, 0, 1u, (const AudioObjectPropertyAddress *)buf);
  }
}

void sub_1BABCB648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

unint64_t HALS_IOContext_MCP_Impl::SetBufferFrameSize(HALS_IOContext_MCP_Impl *this, int a2, char a3)
{
  int v5 = a2;
  if ((a3 & 1) == 0) {
    operator new();
  }
  HALS_IOContext_MCP_Impl::set_simple_mcp_value<1718839674u>(this, &v5);
  return HALS_IOContext_MCP_Impl::GetIOBufferFrameSize(this);
}

void sub_1BABCB788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, Buffer_Size_Notifier *a9)
{
}

unint64_t HALS_IOContext_MCP_Impl::GetIOBufferFrameSize(HALS_IOContext_MCP_Impl *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (!v2) {
    return *((unsigned int *)this + 62);
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return *((unsigned int *)this + 62);
  }
  uint64_t v4 = v3;
  if (*((void *)this + 6))
  {
    unint64_t simple_mcp = HALS_IOContext_MCP_Impl::get_simple_mcp_property<1718839674u>(this);
    *((_DWORD *)this + 62) = simple_mcp;
  }
  else
  {
    unint64_t simple_mcp = *((unsigned int *)this + 62);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return simple_mcp;
}

double HALS_IOContext_MCP_Impl::GetBufferFrameSizeRange(HALS_IOContext_MCP_Impl *this, AudioValueRange *a2)
{
  unint64_t simple_mcp = HALS_IOContext_MCP_Impl::get_simple_mcp_property<1718843939u>(this);
  double result = (double)simple_mcp;
  a2->Float64 mMinimum = (double)simple_mcp;
  a2->Float64 mMaximum = (double)HIDWORD(simple_mcp);
  return result;
}

uint64_t HALS_IOContext_MCP_Impl::GetComposition(HALS_IOContext_MCP_Impl *this)
{
  return *((void *)this + 14);
}

uint64_t HALS_IOContext_MCP_Impl::GetMuteState()
{
  return 0;
}

uint64_t HALS_IOContext_MCP_Impl::GetTransportState(HALS_IOContext_MCP_Impl *this)
{
  return 2;
}

void HALS_IOContext_MCP_Impl::SleepingIsAllowedChanged(HALS_IOContext_MCP_Impl *this, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  char v13 = a2;
  uint64_t v2 = *(void *)(*((void *)this + 5) + 64);
  if (*(unsigned __int8 *)(v2 + 44) != a2)
  {
    *(unsigned char *)(v2 + 44) = a2;
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 7);
    if (v4)
    {
      uint64_t v4 = std::__shared_weak_count::lock(v4);
      int v5 = v4;
      if (v4)
      {
        uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 6);
        if (v4)
        {
          AMCP::Core::Core::set_simple_property_value<1936484705u>((int8x8_t *)v4, &v13);
LABEL_11:
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
          return;
        }
      }
    }
    else
    {
      int v5 = 0;
    }
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v6 = **(NSObject ***)buf;
    if (*(void *)v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v18);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      char v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      int v9 = *(_DWORD *)(*((void *)this + 5) + 16);
      HALS_IOContext_MCP_Impl::get_debug_device_name((HALS_IOContext_MCP_Impl *)&v14, (uint64_t)this);
      CFStringRef v10 = v14;
      if (!v14)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v14);
      if (v16 >= 0) {
        __int16 v11 = __p;
      }
      else {
        __int16 v11 = (void **)__p[0];
      }
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)unint64_t v18 = 2080;
      *(void *)&v18[2] = "HALS_IOContext_MCP_Impl.cpp";
      __int16 v19 = 1024;
      int v20 = 121;
      __int16 v21 = 1024;
      int v22 = v9;
      __int16 v23 = 2080;
      uint64_t v24 = v11;
      _os_log_debug_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_MCP_Impl core ptr is null: %u\t%s", buf, 0x28u);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      CFRelease(v10);
    }
    if (v5) {
      goto LABEL_11;
    }
  }
}

void sub_1BABCBA5C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Core::Core::set_simple_property_value<1936484705u>(int8x8_t *a1, unsigned char *a2)
{
  uint64_t v12 = 0x676C6F62736C6961;
  int v13 = 0;
  if (!AMCP::Core::Core::is_property_settable(a1, (const AMCP::Address *)&v12)) {
    return 0;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v10, a1, (unsigned int *)&v12);
  uint64_t v4 = v10;
  if (!v10)
  {
LABEL_11:
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    return 0;
  }
  unint64_t v5 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v5))
  {
    unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v7))
    {
      memset(v8, 0, sizeof(v8));
      LOBYTE(v8[0]) = *a2;
      int v9 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v4, (uint64_t)v8);
      if (v9) {
        v9(0, (uint64_t)v8, 0, 0);
      }
      goto LABEL_5;
    }
    goto LABEL_11;
  }
  AMCP::Core::Operation::call_function<void,BOOL const&>(v4, (uint64_t)a2);
LABEL_5:
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return 1;
}

void sub_1BABCBB94(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BABCBB7CLL);
}

uint64_t HALS_IOContext_MCP_Impl::PowerHintChanged(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

void HALS_IOContext_MCP_Impl::PowerChanged(void *a1, int a2)
{
  uint64_t v2 = 0x676C6F6269707073;
  int v3 = 0;
  HALS_IOContext_MCP_Impl::call_mcp_operation_void_function<AMCP::Power_State>(a1, (unsigned int *)&v2, a2);
}

uint64_t HALS_IOContext_MCP_Impl::Server_Internal_StopIOProcID(HALS_IOContext_MCP_Impl *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v3 = *((void *)this + 5);
    if (*(void *)(v3 + 112)
      && *(int (**)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(v3 + 136) != a2)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        v7[0] = 136315394;
        *(void *)&v7[1] = "HALS_IOContext_MCP_Impl.cpp";
        __int16 v8 = 1024;
        int v9 = 740;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::StopIOProcID: failed to stop because the IOProcID wasn't nullptr or wasn't registered", (uint8_t *)v7, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    HALS_IOContext_MCP_Impl::stop((uint64_t)this);
  }
  else
  {
    strcpy((char *)v7, "wppsbolg");
    BYTE1(v7[2]) = 0;
    HIWORD(v7[2]) = 0;
    HALS_IOContext_MCP_Impl::call_mcp_operation_function<BOOL>((uint64_t)this, v7);
  }
  strcpy((char *)v7, "tsrtbolg");
  BYTE1(v7[2]) = 0;
  HIWORD(v7[2]) = 0;
  uint64_t result = HALS_IOContext_MCP_Impl::call_mcp_operation_function<AMCP::Transport_State>((uint64_t)this, v7);
  if (result != 2)
  {
    uint64_t v5 = *(void *)(*((void *)this + 5) + 112);
    if (v5)
    {
      if (*(unsigned char *)(v5 + 32)) {
        *(unsigned char *)(v5 + 32) = 0;
      }
    }
  }
  return result;
}

uint64_t HALS_IOContext_MCP_Impl::call_mcp_operation_function<AMCP::Transport_State>(uint64_t a1, unsigned int *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  unint64_t v7 = *(int8x8_t **)(a1 + 48);
  if (v7)
  {
    if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v12 = **(NSObject ***)buf;
      if (*(void *)v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v33);
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        int v13 = pthread_self();
        mach_port_t v14 = pthread_mach_thread_np(v13);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v14;
        *(_WORD *)long long v33 = 2080;
        *(void *)&v33[2] = "Core.h";
        __int16 v34 = 1024;
        int v35 = 198;
        __int16 v36 = 2080;
        *(void *)__int16 v37 = "!in_address.has_wildcards()";
        _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
      }
      abort();
    }
    AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v30, v7, a2);
    if (!v30)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v9 = **(NSObject ***)buf;
      if (*(void *)v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v33);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v11;
        *(_WORD *)long long v33 = 2080;
        *(void *)&v33[2] = "Core.h";
        __int16 v34 = 1024;
        int v35 = 202;
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v21);
      std::runtime_error::runtime_error(&v22, &v21);
      std::runtime_error::runtime_error(&v23, &v22);
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      int v28 = -1;
      v23.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      uint64_t v24 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
      *(void *)&v37[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) con"
                           "st [Return_Type = AMCP::Transport_State, Argument_Types = <>]";
      uint64_t v38 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
      int v39 = 202;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v16);
      *(_OWORD *)std::string __p = *(_OWORD *)v16;
      uint64_t v20 = v17;
      v16[0] = 0;
      v16[1] = 0;
      uint64_t v17 = 0;
      unint64_t v18 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    uint64_t v8 = AMCP::Core::Operation::call_function<AMCP::Transport_State>(v30);
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v8;
}

void sub_1BABCC1D4(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BABCC1DCLL);
  }
  __clang_call_terminate(a1);
}

void HALS_IOContext_MCP_Impl::Server_Internal_StartIOProcID(HALS_IOContext_MCP_Impl *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), AudioTimeStamp *a3, unsigned int a4)
{
  int v4 = (a4 >> 3) & 1;
  if (!a3) {
    int v4 = 0;
  }
  if (!a2)
  {
    *((_DWORD *)this + 6) = 0;
    uint64_t v7 = 0x676C6F6273747077;
    mach_port_name_t name = 0;
    HALS_IOContext_MCP_Impl::call_mcp_operation_function<BOOL>((uint64_t)this, (unsigned int *)&v7);
    return;
  }
  uint64_t v5 = *(void *)(*((void *)this + 5) + 112);
  if (v5 && !*(unsigned char *)(v5 + 32))
  {
    *(unsigned char *)(v5 + 32) = 1;
    if (v4) {
      goto LABEL_7;
    }
LABEL_10:
    uint64_t v6 = this;
    goto LABEL_11;
  }
  if (!v4) {
    goto LABEL_10;
  }
LABEL_7:
  uint64_t v6 = this;
LABEL_11:
  HALS_IOContext_MCP_Impl::start((uint64_t)&v7, (uint64_t)v6);
  HALB_MachPort::DestroyPort(name, 1, 0);
}

uint64_t HALS_IOContext_MCP_Impl::start(uint64_t a1, uint64_t a2)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  strcpy(buf, "frbtbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  HALS_IOContext_MCP_Impl::call_mcp_operation_function<AMCP::Graph::Timebase_Set>((uint64_t)v47, a2, (unsigned int *)buf);
  if (!v49)
  {
    char v5 = 1;
    goto LABEL_20;
  }
  mach_port_t v58 = 0;
  *(void *)&long long v59 = 0;
  HALS_System::GetInstance(&v63, 0, (uint64_t *)&v58);
  HALS_IOContext_Manager::find_contexts_and_devices_with_timebases((HALS_IOContext_Manager *)buf, (os_unfair_lock_s *)v63.__vftable[58].~logic_error, (uint64_t)v47);
  if (v63.__imp_.__imp_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v63.__imp_.__imp_);
  }
  long long v4 = v75;
  if ((void)v75 == *((void *)&v75 + 1))
  {
    char v5 = 0;
    if ((void)v75) {
LABEL_16:
    }
      operator delete((void *)v4);
  }
  else
  {
    char v5 = 0;
    uint64_t v6 = v75 + 4;
    do
    {
      uint64_t v8 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v6 - 4));
      if (!v8
        || (int v9 = (*(uint64_t (**)(void))(**(void **)(a2 + 40) + 200))(*(void *)(a2 + 40)),
            HALS_Device::GetHogModeOwner(v8) == v9)
        || HALS_Device::GetHogModeOwner(v8) == -1)
      {
        char v10 = 0;
      }
      else
      {
        char v5 = 1;
        char v10 = 1;
      }
      HALS_ObjectMap::ReleaseObject(v8, v7);
      if (v6 == *((void *)&v4 + 1)) {
        char v11 = 1;
      }
      else {
        char v11 = v10;
      }
      v6 += 4;
    }
    while ((v11 & 1) == 0);
    if ((void)v4) {
      goto LABEL_16;
    }
  }
  if (*(void *)buf) {
    operator delete(*(void **)buf);
  }
LABEL_20:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table((uint64_t)v47);
  if ((v5 & 1) == 0)
  {
    uint64_t v45 = 0x676C6F626E646465;
    int v46 = 0;
    mach_port_t v14 = *(std::__shared_weak_count **)(a2 + 56);
    if (v14)
    {
      mach_port_t v14 = std::__shared_weak_count::lock(v14);
      int v15 = v14;
      if (v14)
      {
        char v16 = *(int8x8_t **)(a2 + 48);
        if (v16)
        {
          operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v70, v16, (unsigned int *)&v45);
          if (!v70)
          {
            AMCP::Log::Scope_Registry::get(operation);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            long long v33 = **(NSObject ***)buf;
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
            {
              __int16 v34 = pthread_self();
              mach_port_t v35 = pthread_mach_thread_np(v34);
              *(_DWORD *)buf = 67109634;
              *(_DWORD *)&uint8_t buf[4] = v35;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = "Core.h";
              __int16 v73 = 1024;
              int v74 = 202;
              _os_log_error_impl(&dword_1BAA78000, v33, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v69);
            __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v61);
            std::runtime_error::runtime_error((std::runtime_error *)&v62, &v61);
            std::runtime_error::runtime_error((std::runtime_error *)&v63, (const std::runtime_error *)&v62);
            uint64_t v65 = 0;
            uint64_t v66 = 0;
            uint64_t v67 = 0;
            int v68 = -1;
            v63.__vftable = (std::logic_error_vtbl *)&unk_1F148A9A8;
            long long v64 = &unk_1F148A9D0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v63);
            *((void *)&v75 + 1) = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Type"
                                    "s...) const [Return_Type = AMCP::Node_Description, Argument_Types = <>]";
            unint64_t v76 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
            int v77 = 202;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v56);
            long long v59 = v56;
            uint64_t v36 = v57;
            uint64_t v57 = 0;
            mach_port_t v58 = &unk_1F148AA90;
            uint64_t v60 = v36;
            long long v56 = 0uLL;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
          }
          AMCP::Core::Operation::call_function<AMCP::Node_Description>((uint64_t)v47, v70);
          if (v71) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v71);
          }
LABEL_37:
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          uint64_t v19 = HIBYTE(v49);
          if (v49 < 0) {
            uint64_t v19 = v48;
          }
          if (v19)
          {
            if (*(void *)(a2 + 224) - *(void *)(a2 + 216) == (void)v55 - *((void *)&v54 + 1))
            {
              if (*(void *)(a2 + 200) - *(void *)(a2 + 192) == *((void *)&v53 + 1) - (void)v53)
              {
                char v20 = 0;
                uint64_t v21 = 0;
                ++*(_DWORD *)(a2 + 32);
                std::runtime_error v22 = *(void **)(a2 + 240);
                v22[2] = v22[1];
                v22[5] = v22[4];
                *(void *)buf = 1;
                while (1)
                {
                  char v23 = v20;
                  unsigned int v24 = *(_DWORD *)&buf[4 * v21];
                  uint64_t v25 = (uint64_t *)(a2 + 192 + 24 * v24);
                  uint64_t v26 = *v25;
                  if (v25[1] != *v25)
                  {
                    unint64_t v27 = 0;
                    uint64_t v28 = 24;
                    do
                    {
                      HALB_IOBufferManager_Server::AddIOBuffer(*(HALB_IOBufferManager_Server **)(a2 + 240), v24 == 1, v27++, *(_DWORD *)(v26 + v28) << 12);
                      uint64_t v26 = *v25;
                      v28 += 104;
                    }
                    while (v27 < 0x4EC4EC4EC4EC4EC5 * ((v25[1] - *v25) >> 3));
                  }
                  char v20 = 1;
                  uint64_t v21 = 1;
                  if (v23) {
                    HALB_IOBufferManager_Server::Allocate(*(HALB_IOBufferManager_Server **)(a2 + 240), 0);
                  }
                }
              }
              AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v14);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
              __int16 v41 = **(NSObject ***)buf;
              if (*(void *)&buf[8]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
              }
              if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
              {
                int v42 = pthread_self();
                mach_port_t v43 = pthread_mach_thread_np(v42);
                *(_DWORD *)buf = 67109890;
                *(_DWORD *)&uint8_t buf[4] = v43;
                *(_WORD *)&uint8_t buf[8] = 2080;
                *(void *)&buf[10] = "HALS_IOContext_MCP_Impl.cpp";
                __int16 v73 = 1024;
                int v74 = 161;
                LOWORD(v75) = 2080;
                *(void *)((char *)&v75 + 2) = "not (m_node_description.mTerminals[Direction::output].size() == node_des"
                                                "cription.mTerminals[Direction::output].size())";
                _os_log_error_impl(&dword_1BAA78000, v41, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
              }
              AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v45);
              __cxa_allocate_exception(0x40uLL);
              caulk::make_string((caulk *)"", (uint64_t)&v61);
              std::logic_error::logic_error(&v62, &v61);
              v62.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
              std::logic_error::logic_error(&v63, &v62);
              uint64_t v65 = 0;
              uint64_t v66 = 0;
              uint64_t v67 = 0;
              int v68 = -1;
              v63.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
              long long v64 = &unk_1F1489CF0;
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v63);
              *((void *)&v75 + 1) = "StartIOResult HALS_IOContext_MCP_Impl::start(mach_port_t, std::optional<UInt64>)";
              unint64_t v76 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_MCP_Impl.cpp";
              int v77 = 161;
              applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v56);
              long long v59 = v56;
              uint64_t v44 = v57;
              uint64_t v57 = 0;
              mach_port_t v58 = &unk_1F148AA90;
              uint64_t v60 = v44;
              long long v56 = 0uLL;
              boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
            }
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v14);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            __int16 v37 = **(NSObject ***)buf;
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            {
              uint64_t v38 = pthread_self();
              mach_port_t v39 = pthread_mach_thread_np(v38);
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v39;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = "HALS_IOContext_MCP_Impl.cpp";
              __int16 v73 = 1024;
              int v74 = 160;
              LOWORD(v75) = 2080;
              *(void *)((char *)&v75 + 2) = "not (m_node_description.mTerminals[Direction::input].size() == node_descri"
                                              "ption.mTerminals[Direction::input].size())";
              _os_log_error_impl(&dword_1BAA78000, v37, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v45);
            __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"", (uint64_t)&v61);
            std::logic_error::logic_error(&v62, &v61);
            v62.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
            std::logic_error::logic_error(&v63, &v62);
            uint64_t v65 = 0;
            uint64_t v66 = 0;
            uint64_t v67 = 0;
            int v68 = -1;
            v63.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
            long long v64 = &unk_1F1489CF0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v63);
            *((void *)&v75 + 1) = "StartIOResult HALS_IOContext_MCP_Impl::start(mach_port_t, std::optional<UInt64>)";
            unint64_t v76 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_MCP_Impl.cpp";
            int v77 = 160;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v56);
            long long v59 = v56;
            uint64_t v40 = v57;
            uint64_t v57 = 0;
            mach_port_t v58 = &unk_1F148AA90;
            uint64_t v60 = v40;
            long long v56 = 0uLL;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
          }
LABEL_48:
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v14);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          char v29 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            long long v30 = pthread_self();
            mach_port_t v31 = pthread_mach_thread_np(v30);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v31;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_IOContext_MCP_Impl.cpp";
            __int16 v73 = 1024;
            int v74 = 159;
            LOWORD(v75) = 2080;
            *(void *)((char *)&v75 + 2) = "not (not node_description.mUID.empty())";
            _os_log_error_impl(&dword_1BAA78000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to start with an invalid mcp context", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v45);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Attempt to start with an invalid mcp context", (uint64_t)&v61);
          std::logic_error::logic_error(&v62, &v61);
          v62.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v63, &v62);
          uint64_t v65 = 0;
          uint64_t v66 = 0;
          uint64_t v67 = 0;
          int v68 = -1;
          v63.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          long long v64 = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v63);
          *((void *)&v75 + 1) = "StartIOResult HALS_IOContext_MCP_Impl::start(mach_port_t, std::optional<UInt64>)";
          unint64_t v76 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_MCP_Impl.cpp";
          int v77 = 159;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v56);
          long long v59 = v56;
          uint64_t v32 = v57;
          uint64_t v57 = 0;
          mach_port_t v58 = &unk_1F148AA90;
          uint64_t v60 = v32;
          long long v56 = 0uLL;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
      }
    }
    else
    {
      int v15 = 0;
    }
    v47[0] = 1;
    v47[1] = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0x100000000;
    *(_OWORD *)std::string __p = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    if (!v15) {
      goto LABEL_48;
    }
    goto LABEL_37;
  }
  uint64_t v12 = *(void *)(*(void *)(a2 + 40) + 80);
  if (v12) {
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 96))(v12);
  }
  else {
    int v13 = 0;
  }
  uint64_t result = HALS_IOContext_MCP_Impl::CopyWorkIntervalPort((HALS_IOContext_MCP_Impl *)a2);
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 4) = v13;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = result;
  *(void *)(a1 + 16) = 0;
  return result;
}

void sub_1BABCD088(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1BABCD108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,std::runtime_error a42,char a43)
{
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v45 - 176);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a43);
  MEMORY[0x1C1859090](&a42);
  if (a41 < 0) {
    operator delete(a36);
  }
  if (v44) {
    __cxa_free_exception(v43);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a12);
  AMCP::Node_Description::~Node_Description(&v47);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContext_MCP_Impl::CopyWorkIntervalPort(HALS_IOContext_MCP_Impl *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v2);
    uint64_t v3 = v2;
    if (v2 && *((void *)this + 6))
    {
      HALS_IOContext_MCP_Impl::get_simple_mcp_property<2003267184u>((uint64_t)&v9, this);
      uint64_t v4 = caulk::mach::os_workgroup_managed::copy_mach_port((caulk::mach::os_workgroup_managed *)&v9);
      caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&v9);
LABEL_11:
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      return v4;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  char v5 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = pthread_self();
    mach_port_t v7 = pthread_mach_thread_np(v6);
    LODWORD(v9) = 67109634;
    HIDWORD(v9) = v7;
    *(_WORD *)char v10 = 2080;
    *(void *)&uint64_t v10[2] = "HALS_IOContext_MCP_Impl.cpp";
    __int16 v11 = 1024;
    int v12 = 1053;
    _os_log_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_INFO, "%6u %32s:%-5d HALS_IOContext_MCP_Impl::CopyWorkIntervalPort - Workgroup Context pointer is invalid.", (uint8_t *)&v9, 0x18u);
  }
  uint64_t v4 = 0;
  uint64_t result = 0;
  if (v3) {
    goto LABEL_11;
  }
  return result;
}

void sub_1BABCD3C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Node_Description::~Node_Description(void **this)
{
  for (uint64_t i = 12; i != 6; i -= 3)
  {
    uint64_t v3 = &this[i];
    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t AMCP::Core::Core::call_operation_function<BOOL,unsigned long long>(AMCP::Address *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    char v23 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      unsigned int v24 = pthread_self();
      mach_port_t v25 = pthread_mach_thread_np(v24);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v25;
      *(_WORD *)mach_port_t v43 = 2080;
      *(void *)&v43[2] = "Core.h";
      __int16 v44 = 1024;
      int v45 = 198;
      __int16 v46 = 2080;
      *(void *)int v47 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v26, (int8x8_t *)a1, a2);
  mach_port_t v7 = v26;
  if (!v26)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v17 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      unint64_t v18 = pthread_self();
      mach_port_t v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v19;
      *(_WORD *)mach_port_t v43 = 2080;
      *(void *)&v43[2] = "Core.h";
      __int16 v44 = 1024;
      int v45 = 202;
      _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    int v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v36 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(void *)&v47[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = BOOL, Argument_Types = <unsigned long long>]";
    uint64_t v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    int v49 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v28);
    long long v31 = v28;
    uint64_t v32 = v29;
    long long v28 = 0uLL;
    uint64_t v29 = 0;
    long long v30 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v8 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(unsigned long long)>>();
  int v9 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v8);
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    char v20 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = pthread_self();
      mach_port_t v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v22;
      *(_WORD *)mach_port_t v43 = 2080;
      *(void *)&v43[2] = "Operation.h";
      __int16 v44 = 1024;
      int v45 = 154;
      _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    int v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v36 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(void *)&v47[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, "
                         "Argument_Types = <unsigned long long>]";
    uint64_t v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v49 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v28);
    long long v31 = v28;
    uint64_t v32 = v29;
    long long v28 = 0uLL;
    uint64_t v29 = 0;
    long long v30 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  char v10 = v9;
  if (!*((void *)v9 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<BOOL ()(unsigned long long)>>(),
        (int v9 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v10 + 7))(4, (uint64_t)v10 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v14 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v15 = pthread_self();
      mach_port_t v16 = pthread_mach_thread_np(v15);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v16;
      *(_WORD *)mach_port_t v43 = 2080;
      *(void *)&v43[2] = "Operation.h";
      __int16 v44 = 1024;
      int v45 = 161;
      _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    int v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v36 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(void *)&v47[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, "
                         "Argument_Types = <unsigned long long>]";
    uint64_t v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v49 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v28);
    long long v31 = v28;
    uint64_t v32 = v29;
    long long v28 = 0uLL;
    uint64_t v29 = 0;
    long long v30 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  *(void *)buf = a3;
  uint64_t v11 = *((void *)v9 + 3);
  if (!v11) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v11 + 48))(v11, buf);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  return v12;
}

void sub_1BABCDBAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double HALS_IOContext_MCP_Impl::TranslateTime(HALS_IOContext_MCP_Impl *this, const AudioTimeStamp *a2, AudioTimeStamp *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0x676C6F6274726E74;
  int v13 = 0;
  AudioTimeStamp v11 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v4 && (uint64_t v6 = std::__shared_weak_count::lock(v4)) != 0)
  {
    mach_port_t v7 = v6;
    unint64_t v8 = (int8x8_t *)*((void *)this + 6);
    if (v8)
    {
      AudioTimeStamp v19 = v11;
      AMCP::Core::Core::call_operation_function<std::optional<CA::TimeStamp>,CA::TimeStamp>((AMCP::Log::Scope_Registry *)&v14, v8, (unsigned int *)&v12, (long long *)&v19);
    }
    else
    {
      char v14 = 0;
      char v18 = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    *(_OWORD *)&v19.mSampleTime = v15;
    *(_OWORD *)&v19.mRateScalar = v16;
    *(_OWORD *)&v19.mSMPTETime.mSubframes = *(_OWORD *)v17;
    double result = *(double *)&v17[15];
    *(_OWORD *)((char *)&v19.mSMPTETime.mFlags + 3) = *(_OWORD *)&v17[15];
    if (v18)
    {
      LOBYTE(a3->mSampleTime) = v14;
      long long v10 = *(_OWORD *)&v19.mRateScalar;
      *(_OWORD *)((char *)&a3->mSampleTime + 1) = *(_OWORD *)&v19.mSampleTime;
      *(_OWORD *)((char *)&a3->mRateScalar + 1) = v10;
      *(_OWORD *)((char *)&a3->mSMPTETime.mSubframes + 1) = *(_OWORD *)&v19.mSMPTETime.mSubframes;
      double result = *(double *)((char *)&v19.mSMPTETime.mFlags + 3);
      *(_OWORD *)&a3->mSMPTETime.mHours = *(_OWORD *)((char *)&v19.mSMPTETime.mFlags + 3);
    }
  }
  else
  {
    *(_OWORD *)&v19.mSampleTime = v15;
    *(_OWORD *)&v19.mRateScalar = v16;
    *(_OWORD *)&v19.mSMPTETime.mSubframes = *(_OWORD *)v17;
    double result = *(double *)&v17[15];
    *(_OWORD *)((char *)&v19.mSMPTETime.mFlags + 3) = *(_OWORD *)&v17[15];
  }
  return result;
}

void sub_1BABCDDD0(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BABCDDD4);
  }
  __clang_call_terminate(a1);
}

void AMCP::Core::Core::call_operation_function<std::optional<CA::TimeStamp>,CA::TimeStamp>(AMCP::Log::Scope_Registry *a1, int8x8_t *a2, unsigned int *a3, long long *a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (*a3 == 707406378 || a3[1] == 707406378 || a3[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v22 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      char v23 = pthread_self();
      mach_port_t v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v24;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 198;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v29, a2, a3);
  unint64_t v8 = v29;
  if (!v29)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v16 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = pthread_self();
      mach_port_t v18 = pthread_mach_thread_np(v17);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v18;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 202;
      _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v36);
    std::runtime_error::runtime_error(&v37, &v36);
    std::runtime_error::runtime_error(&v38, &v37);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v43 = -1;
    v38.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v39 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
    *(void *)&unsigned char buf[32] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) cons"
                          "t [Return_Type = std::optional<CA::TimeStamp>, Argument_Types = <CA::TimeStamp>]";
    *(void *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    LODWORD(v46) = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
    long long v34 = v31;
    uint64_t v35 = v32;
    long long v31 = 0uLL;
    uint64_t v32 = 0;
    std::string v33 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  long long v25 = *a4;
  long long v26 = a4[1];
  long long v27 = a4[2];
  long long v28 = a4[3];
  unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>>();
  long long v10 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9);
  if (!v10)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    AudioTimeStamp v19 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = pthread_self();
      mach_port_t v21 = pthread_mach_thread_np(v20);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v21;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Operation.h";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 154;
      _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v36);
    std::runtime_error::runtime_error(&v37, &v36);
    std::runtime_error::runtime_error(&v38, &v37);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v43 = -1;
    v38.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v39 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
    *(void *)&unsigned char buf[32] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::"
                          "optional<CA::TimeStamp>, Argument_Types = <CA::TimeStamp>]";
    *(void *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    LODWORD(v46) = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
    long long v34 = v31;
    uint64_t v35 = v32;
    long long v31 = 0uLL;
    uint64_t v32 = 0;
    std::string v33 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  AudioTimeStamp v11 = v10;
  if (!*((void *)v10 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>>(),
        (long long v10 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, unsigned char *))v11 + 7))(4, (uint64_t)v11 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v13 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      char v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v15;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Operation.h";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 161;
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v36);
    std::runtime_error::runtime_error(&v37, &v36);
    std::runtime_error::runtime_error(&v38, &v37);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v43 = -1;
    v38.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v39 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
    *(void *)&unsigned char buf[32] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::"
                          "optional<CA::TimeStamp>, Argument_Types = <CA::TimeStamp>]";
    *(void *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    LODWORD(v46) = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
    long long v34 = v31;
    uint64_t v35 = v32;
    long long v31 = 0uLL;
    uint64_t v32 = 0;
    std::string v33 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  *(_OWORD *)&unsigned char buf[32] = v27;
  long long v46 = v28;
  *(_OWORD *)buf = v25;
  *(_OWORD *)&buf[16] = v26;
  uint64_t v12 = *((void *)v10 + 3);
  if (!v12) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v12 + 48))(v12, buf);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
}

void sub_1BABCE558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,std::runtime_error a32,char a33)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[96];
}

double HALS_IOContext_MCP_Impl::GetCurrentTime(HALS_IOContext_MCP_Impl *this, AudioTimeStamp *a2)
{
  double result = 0.0;
  *(_OWORD *)&a2->mSMPTETime.mSubframes = 0u;
  *(_OWORD *)&a2->mSMPTETime.mHours = 0u;
  *(_OWORD *)&a2->mSampleTime = 0u;
  *(_OWORD *)&a2->mRateScalar = 0u;
  uint64_t v4 = *((void *)this + 32);
  if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 120))(v4))
  {
    (*(void (**)(_OWORD *__return_ptr))(**((void **)this + 32) + 32))(v8);
    if (*((void *)&v8[0] + 1))
    {
      long long v6 = v8[1];
      *(_OWORD *)&a2->mSampleTime = v8[0];
      *(_OWORD *)&a2->mRateScalar = v6;
      double result = *(double *)&v9;
      long long v7 = v10;
      *(_OWORD *)&a2->mSMPTETime.mSubframes = v9;
      *(_OWORD *)&a2->mSMPTETime.mHours = v7;
    }
  }
  return result;
}

uint64_t HALS_IOContext_MCP_Impl::StopWaitingForTapStart(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

uint64_t HALS_IOContext_MCP_Impl::BlockStartOnTapStart(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

uint64_t HALS_IOContext_MCP_Impl::IsWaitingForTapStart(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

uint64_t HALS_IOContext_MCP_Impl::WaitForTapStart(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

uint64_t HALS_IOContext_MCP_Impl::TapInputIsEnabled(HALS_IOContext_MCP_Impl *this)
{
  return 1;
}

uint64_t HALS_IOContext_MCP_Impl::MicInputIsEnabled(HALS_IOContext_MCP_Impl *this)
{
  return 1;
}

BOOL HALS_IOContext_MCP_Impl::ThreadHasBeenStopped(HALS_IOContext_MCP_Impl *this)
{
  uint64_t v2 = 0x676C6F6274727374;
  int v3 = 0;
  return HALS_IOContext_MCP_Impl::call_mcp_operation_function<AMCP::Transport_State>((uint64_t)this, (unsigned int *)&v2) == 0;
}

uint64_t HALS_IOContext_MCP_Impl::ExecuteWorkWithControlAndIOThreadLocker(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  int v3 = *(uint64_t (**)(void))(*(void *)v2 + 48);

  return v3();
}

uint64_t HALS_IOContext_MCP_Impl::ExecuteWorkWithIOThreadUnlocker(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  int v3 = *(uint64_t (**)(void))(*(void *)v2 + 48);

  return v3();
}

uint64_t HALS_IOContext_MCP_Impl::ExecuteWorkWithIOThreadLocker(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  int v3 = *(uint64_t (**)(void))(*(void *)v2 + 48);

  return v3();
}

void HALS_IOContext_MCP_Impl::SetIOIsRunning(HALS_IOContext_MCP_Impl *this)
{
}

uint64_t HALS_IOContext_MCP_Impl::GetIORunningState(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

unint64_t HALS_IOContext_MCP_Impl::GetIOBufferForStreamAtIndex(HALB_IOBufferManager_Server **this, unsigned int a2, unsigned int a3)
{
  return HALB_IOBufferManager_Server::GetIOBuffer(this[30], a2, a3, &v4);
}

uint64_t HALS_IOContext_MCP_Impl::GetServerIOStatusTimestamps(HALS_IOContext_MCP_Impl *this)
{
  return (uint64_t)this + 272;
}

uint64_t HALS_IOContext_MCP_Impl::AreClientBuffersEmpty(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

uint64_t HALS_IOContext_MCP_Impl::PauseIO(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

uint64_t HALS_IOContext_MCP_Impl::HasThreadError(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

BOOL HALS_IOContext_MCP_Impl::IsIOThreadRunning(HALS_IOContext_MCP_Impl *this)
{
  uint64_t v2 = 0x676C6F6274727374;
  int v3 = 0;
  return HALS_IOContext_MCP_Impl::call_mcp_operation_function<AMCP::Transport_State>((uint64_t)this, (unsigned int *)&v2) != 0;
}

uint64_t HALS_IOContext_Impl::IsIORunningNotInCatchupMode(HALS_IOContext_Impl *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 152))();
}

BOOL HALS_IOContext_MCP_Impl::IsIORunning(HALS_IOContext_MCP_Impl *this)
{
  uint64_t v2 = 0x676C6F6274727374;
  int v3 = 0;
  return HALS_IOContext_MCP_Impl::call_mcp_operation_function<AMCP::Transport_State>((uint64_t)this, (unsigned int *)&v2) != 0;
}

uint64_t HALS_IOContext_MCP_Impl::CreateTapInfo()
{
  return 0;
}

uint64_t HALS_IOContext_MCP_Impl::CreateMicrophoneInfo()
{
  return 0;
}

void HALS_IOContext_MCP_Impl::reassert_description_for_device_change(HALS_IOContext_MCP_Impl *this, const __CFString *a2)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v43 = 0;
  char v44 = 0;
  HALS_System::GetInstance(&v45, 0, &v43);
  unsigned int v4 = *(os_unfair_lock_s **)(v45 + 1392);
  char v5 = (const void *)*((void *)this + 14);
  if (v5) {
    CFRetain(*((CFTypeRef *)this + 14));
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v5);
  if (a2) {
    CFRetain(a2);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v41, a2);
  if (!cf)
  {
    BOOL v16 = 0;
    goto LABEL_78;
  }
  long long v6 = v4 + 4;
  os_unfair_lock_lock(v4 + 4);
  CFTypeRef v7 = cf;
  if (cf) {
    CFRetain(cf);
  }
  CFTypeRef v48 = v7;
  CFTypeRef v8 = v41;
  if (v41) {
    CFRetain(v41);
  }
  CFTypeRef v47 = v8;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)"uid", 3, 0x8000100u, 0);
  if (!v9)
  {
    long long v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v31, "Could not construct");
    __cxa_throw(v31, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v10 = applesauce::CF::details::has_key<applesauce::CF::StringRef>((CFDictionaryRef)v7, v9);
  CFRelease(v9);
  if (!v10)
  {
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v57, "com.apple.coreaudio", "AMCP");
    char v23 = *(NSObject **)v57;
    if (*(void *)v58) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v58);
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v24 = pthread_self();
      mach_port_t v25 = pthread_mach_thread_np(v24);
      LODWORD(v57) = 67109890;
      HIDWORD(v57) = v25;
      *(_WORD *)mach_port_t v58 = 2080;
      *(void *)&v58[2] = "HALS_IOContext_Manager_Impl.cpp";
      __int16 v59 = 1024;
      int v60 = 109;
      __int16 v61 = 2080;
      std::logic_error v62 = "in_aggregate_description->has_key(AMCP::CF::String{kAudioAggregateDeviceUIDKey})";
      _os_log_error_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s We should have already exited if the aggregate UID were missing.", (uint8_t *)&v57, 0x22u);
    }
    abort();
  }
  CFStringRef v12 = CFStringCreateWithBytes(0, (const UInt8 *)"clock", 5, 0x8000100u, 0);
  if (!v12)
  {
    uint64_t v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v32, "Could not construct");
    __cxa_throw(v32, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFTypeRef v57 = 0;
  applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v56, (const __CFDictionary *)v7, v12, &v57);
  if (v57) {
    CFRelease(v57);
  }
  CFRelease(v12);
  CFDictionaryRef v13 = (const __CFDictionary *)v56;
  if (v56
    && applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)v56, (const __CFString **)&v47) == kCFCompareEqualTo)
  {
    BOOL v16 = 1;
  }
  else
  {
    CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)"subdevices", 10, 0x8000100u, 0);
    if (!v14)
    {
      uint64_t v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v35, "Could not construct");
      __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v57, (CFDictionaryRef)v7, v14);
    CFRelease(v14);
    if (!v58[0]) {
      goto LABEL_28;
    }
    if (!v57)
    {
      std::string v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v36, "Could not construct");
      __cxa_throw(v36, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (CFArrayGetCount((CFArrayRef)v57))
    {
      if (!v57)
      {
        std::runtime_error v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v37, "Could not construct");
        __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&v54, (CFArrayRef)v57, 0);
      if (!v57)
      {
        std::runtime_error v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v38, "Could not construct");
        __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::at_as<applesauce::CF::ArrayRef>(v52, (CFArrayRef)v57);
      int v15 = v53;
      if (v53)
      {
        if (!v57)
        {
          uint64_t v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v39, "Could not construct");
          __cxa_throw(v39, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      else if (!v57)
      {
        uint64_t v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v40, "Could not construct");
        __cxa_throw(v40, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unint64_t Count = CFArrayGetCount((CFArrayRef)v57);
      if (Count)
      {
        unint64_t v18 = 0;
        CFDictionaryRef v19 = v13;
        BOOL v16 = 1;
        while (1)
        {
          if (!v57)
          {
            long long v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v26, "Could not construct");
            __cxa_throw(v26, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&v50, (CFArrayRef)v57, v18);
          if (v55 == v51)
          {
            if (v55)
            {
              CFDictionaryRef v20 = v54;
              CFDictionaryRef v54 = v50;
              CFDictionaryRef v50 = v20;
            }
          }
          else if (v55)
          {
            std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::reset[abi:ne180100]((uint64_t)&v54);
          }
          else
          {
            CFDictionaryRef v54 = v50;
            CFDictionaryRef v50 = 0;
            char v55 = 1;
          }
          std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v50);
          if (v15) {
            break;
          }
          if (v55)
          {
            if (!v54)
            {
              long long v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v34, "Could not construct");
              __cxa_throw(v34, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            CFStringRef v22 = CFStringCreateWithBytes(0, (const UInt8 *)"uid", 3, 0x8000100u, 0);
            if (!v22)
            {
              std::string v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v33, "Could not construct");
              __cxa_throw(v33, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            CFTypeRef v49 = 0;
            applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v50, v54, v22, &v49);
            CFTypeRef v56 = v50;
            CFDictionaryRef v50 = v19;
            if (v19) {
              CFRelease(v19);
            }
            if (v49) {
              CFRelease(v49);
            }
            goto LABEL_62;
          }
LABEL_63:
          CFDictionaryRef v13 = (const __CFDictionary *)v56;
          if (v56)
          {
            CFDictionaryRef v19 = (const __CFDictionary *)v56;
            if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)v56, (const __CFString **)&v47) == kCFCompareEqualTo)goto LABEL_70; {
          }
            }
          else
          {
            CFDictionaryRef v19 = 0;
          }
          BOOL v16 = ++v18 < Count;
          if (Count == v18) {
            goto LABEL_70;
          }
        }
        if (!v57)
        {
          long long v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v27, "Could not construct");
          __cxa_throw(v27, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&v50, (CFArrayRef)v57, v18);
        if (v55 == v51)
        {
          if (v55)
          {
            CFDictionaryRef v21 = v54;
            CFDictionaryRef v54 = v50;
            CFDictionaryRef v50 = v21;
          }
        }
        else if (v55)
        {
          std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::reset[abi:ne180100]((uint64_t)&v54);
        }
        else
        {
          CFDictionaryRef v54 = v50;
          CFDictionaryRef v50 = 0;
          char v55 = 1;
        }
        std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v50);
        if (!v54)
        {
          uint64_t v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v29, "Could not construct");
          __cxa_throw(v29, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        CFStringRef v22 = CFStringCreateWithBytes(0, (const UInt8 *)"uid", 3, 0x8000100u, 0);
        if (!v22)
        {
          long long v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v28, "Could not construct");
          __cxa_throw(v28, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        CFTypeRef v49 = 0;
        applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v50, v54, v22, &v49);
        CFTypeRef v56 = v50;
        CFDictionaryRef v50 = v19;
        if (v19) {
          CFRelease(v19);
        }
        if (v49) {
          CFRelease(v49);
        }
LABEL_62:
        CFRelease(v22);
        goto LABEL_63;
      }
      BOOL v16 = 0;
LABEL_70:
      std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v52);
      std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v54);
    }
    else
    {
LABEL_28:
      BOOL v16 = 0;
    }
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v57);
    if (!v13) {
      goto LABEL_73;
    }
  }
  CFRelease(v13);
LABEL_73:
  if (v47) {
    CFRelease(v47);
  }
  if (v48) {
    CFRelease(v48);
  }
  os_unfair_lock_unlock(v6);
LABEL_78:
  if (v41) {
    CFRelease(v41);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (v16) {
    HALS_IOContext_MCP_Impl::UpdateContext(this);
  }
}

void sub_1BABCF34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, const void *a15, const void *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,const void *a24,char a25)
{
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a20);
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a22);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a25);
  applesauce::CF::StringRef::~StringRef(&a24);
  applesauce::CF::StringRef::~StringRef(&a15);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a16);
  os_unfair_lock_unlock(v25);
  applesauce::CF::StringRef::~StringRef(&a9);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a10);
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

void HALS_IOContext_MCP_Impl::DeviceArrived(HALS_IOContext_MCP_Impl *this, HALS_Device *a2)
{
  CFStringRef v3 = (const __CFString *)(*(uint64_t (**)(HALS_Device *))(*(void *)a2 + 200))(a2);

  HALS_IOContext_MCP_Impl::reassert_description_for_device_change(this, v3);
}

uint64_t HALS_IOContext_MCP_Impl::ActiveInputStreamsSecurelyMuted()
{
  return 0;
}

uint64_t HALS_IOContext_MCP_Impl::GetSimpleStreamUsage(int8x8_t **this)
{
  uint64_t v2 = std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(this[8], 0, (uint64_t)&this[8][(unint64_t)this[9] >> 6], this[9] & 0x3F, 1);
  uint64_t v3 = std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(this[11], 0, (uint64_t)&this[11][(unint64_t)this[12] >> 6], this[12] & 0x3F, 1);
  if (v2 >= 1 && v3 > 0) {
    return 6;
  }
  if (v2) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v3 <= 0;
  }
  if (!v5) {
    return 1;
  }
  if (v3) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v2 <= 0;
  }
  if (v6) {
    return 0;
  }
  else {
    return 2;
  }
}

uint64_t std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(int8x8_t *a1, unsigned int a2, uint64_t a3, unsigned int a4, char a5)
{
  uint64_t v5 = a2;
  unint64_t v6 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (a5)
  {
    if (a2)
    {
      if (64 - a2 >= v6) {
        unint64_t v7 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
      }
      else {
        unint64_t v7 = 64 - a2;
      }
      uint64_t v8 = (uint64_t)*a1++;
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v7)) & (-1 << a2) & v8));
      v9.i16[0] = vaddlv_u8(v9);
      uint64_t v5 = v9.u32[0];
      v6 -= v7;
    }
    if (v6 >= 0x40)
    {
      do
      {
        int8x8_t v10 = *a1++;
        uint8x8_t v11 = (uint8x8_t)vcnt_s8(v10);
        v11.i16[0] = vaddlv_u8(v11);
        v5 += v11.u32[0];
        v6 -= 64;
      }
      while (v6 > 0x3F);
    }
    if (v6)
    {
      unint64_t v12 = *(void *)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v6);
LABEL_20:
      uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
      v18.i16[0] = vaddlv_u8(v18);
      v5 += v18.u32[0];
    }
  }
  else
  {
    if (a2)
    {
      if (64 - a2 >= v6) {
        unint64_t v13 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
      }
      else {
        unint64_t v13 = 64 - a2;
      }
      uint64_t v14 = (uint64_t)*a1++;
      uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v13)) & (-1 << a2) & ~v14));
      v15.i16[0] = vaddlv_u8(v15);
      uint64_t v5 = v15.u32[0];
      v6 -= v13;
    }
    if (v6 >= 0x40)
    {
      do
      {
        uint64_t v16 = (uint64_t)*a1++;
        uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)~v16);
        v17.i16[0] = vaddlv_u8(v17);
        v5 += v17.u32[0];
        v6 -= 64;
      }
      while (v6 > 0x3F);
    }
    if (v6)
    {
      unint64_t v12 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v6) & ~*(void *)a1;
      goto LABEL_20;
    }
  }
  return v5;
}

__n128 HALS_IOContext_MCP_Impl::GetStreamInfoAtIndex(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 24 * a2 + 192) + 104 * a3;
  unsigned int owning_device_for_stream = HALS_IOContext_MCP_Impl::get_owning_device_for_stream(a1, a2, a3);
  uint64_t v8 = *(void *)(v6 + 32);
  long long v10 = *(_OWORD *)v6;
  __n128 result = *(__n128 *)(v6 + 16);
  *(_DWORD *)a4 = owning_device_for_stream;
  *(_DWORD *)(a4 + 4) = a2;
  *(void *)(a4 + _Block_object_dispose(&a9, 8) = 0;
  *(void *)(a4 + 4_Block_object_dispose(&a9, 8) = v8;
  *(_OWORD *)(a4 + 16) = v10;
  *(__n128 *)(a4 + 32) = result;
  return result;
}

uint64_t HALS_IOContext_MCP_Impl::GetStreamLatencyAtIndex(HALS_IOContext_MCP_Impl *this)
{
  return 0;
}

uint64_t HALS_IOContext_MCP_Impl::IsStreamEnabledAtIndex(HALS_IOContext_MCP_Impl *this, int a2, unsigned int a3)
{
  uint64_t v3 = (char *)this + 64;
  uint64_t v4 = 88;
  if (a2) {
    uint64_t v4 = 64;
  }
  else {
    uint64_t v3 = (char *)this + 88;
  }
  if (*((void *)v3 + 1) <= (unint64_t)a3) {
    return 1;
  }
  else {
    return (*(void *)(*(void *)((char *)this + v4) + (((unint64_t)a3 >> 3) & 0x1FFFFFF8)) >> a3) & 1;
  }
}

uint64_t HALS_IOContext_MCP_Impl::GetNumberActiveStreams(HALS_IOContext_MCP_Impl *this, int a2)
{
  uint64_t v2 = 96;
  uint64_t v3 = 88;
  if (a2) {
    uint64_t v3 = 64;
  }
  uint64_t v4 = *(int8x8_t **)((char *)this + v3);
  if (a2) {
    uint64_t v2 = 72;
  }
  return std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(v4, 0, (uint64_t)&v4[*(void *)((char *)this + v2) >> 6], *(void *)((unsigned char *)this + v2) & 0x3F, 1);
}

uint64_t HALS_IOContext_MCP_Impl::GetNumberInputStreamsOfType(uint64_t a1)
{
  return -991146299 * ((*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 3);
}

uint64_t HALS_IOContext_MCP_Impl::GetNumberStreams(HALS_IOContext_MCP_Impl *this, unsigned int a2)
{
  return -991146299 * ((*((void *)this + 3 * a2 + 25) - *((void *)this + 3 * a2 + 24)) >> 3);
}

void HALS_IOContext_MCP_Impl::Deactivate(HALS_IOContext_MCP_Impl *this)
{
  v9[0] = 0;
  v9[1] = 0;
  HALS_System::GetInstance(&v10, 0, v9);
  HALS_System::ProcessPropertyChanged(v10, **(_DWORD **)(*((void *)this + 5) + 64), 1885632035, 1869968496, 1);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  v8[0] = 0;
  v8[1] = 0;
  HALS_System::GetInstance(&v10, 0, v8);
  HALS_System::ProcessPropertyChanged(v10, **(_DWORD **)(*((void *)this + 5) + 64), 1885632035, 1768845428, 1);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v2 = *((void *)this + 5);
  uint64_t v3 = *(void *)(v2 + 80);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 120))(v3);
    uint64_t v2 = *((void *)this + 5);
  }
  int v4 = *(_DWORD *)(v2 + 16);
  uint64_t v5 = *((void *)this + 58);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN23HALS_IOContext_MCP_Impl10DeactivateEv_block_invoke;
  block[3] = &__block_descriptor_tmp_2832;
  int v7 = v4;
  LOBYTE(v4) = atomic_load((unsigned __int8 *)(v5 + 32));
  if (v4) {
    atomic_store(1u, (unsigned __int8 *)(v5 + 33));
  }
  dispatch_async(*(dispatch_queue_t *)v5, block);
}

void sub_1BABCFA18(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN23HALS_IOContext_MCP_Impl10DeactivateEv_block_invoke(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  HALS_System::GetInstance(&v4, 0, v3);
  HALS_IOContext_Manager::destroy_context_core_for_hal_object_id(*(HALS_IOContext_Manager **)(v4 + 1392), *(_DWORD *)(a1 + 32));
  uint64_t v2 = v5;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1BABCFAB4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_IOContext_MCP_Impl::Initialize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24_Block_object_dispose(&a9, 8) = a2;
  return this;
}

void HALS_IOContext_MCP_Impl::~HALS_IOContext_MCP_Impl(HALS_IOContext_MCP_Impl *this)
{
  HALS_IOContext_MCP_Impl::~HALS_IOContext_MCP_Impl(this);

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v2;
  uint64_t i;
  const void *v4;
  void *v5;
  void *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void **v9;

  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100]((AMCP::Utility::Dispatch_Queue **)this + 59, 0);
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100]((AMCP::Utility::Dispatch_Queue **)this + 58, 0);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::unique_ptr<HALB_IOBufferManager_Server>::reset[abi:ne180100]((HALB_IOBufferManager_Server **)this + 30, 0);
  for (uint64_t i = 216; i != 168; i -= 24)
  {
    uint8x8_t v9 = (void **)((char *)this + i);
    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](&v9);
  }
  if (*((char *)this + 183) < 0) {
    operator delete(*((void **)this + 20));
  }
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  uint64_t v4 = (const void *)*((void *)this + 14);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 11);
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 8);
  if (v6) {
    operator delete(v6);
  }
  int v7 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
}

HALB_IOBufferManager_Server *std::unique_ptr<HALB_IOBufferManager_Server>::reset[abi:ne180100](HALB_IOBufferManager_Server **a1, HALB_IOBufferManager_Server *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    HALB_IOBufferManager_Server::~HALB_IOBufferManager_Server(result);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void HALS_IORawClock::~HALS_IORawClock(void **this)
{
  HALS_IORawClock::~HALS_IORawClock(this);

  JUMPOUT(0x1C1859840);
}

{
  *this = &unk_1F1463438;
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  std::__function::__value_func<unsigned long long ()(void)>::~__value_func[abi:ne180100](this + 1);
}

void *std::__function::__value_func<unsigned long long ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void HALS_IOClock::~HALS_IOClock(HALS_IOClock *this)
{
  HALS_IOClock::~HALS_IOClock(this);

  JUMPOUT(0x1C1859840);
}

{
  void *v2;

  *(void *)this = &unk_1F1463458;
  std::__function::__value_func<unsigned long long ()(void)>::~__value_func[abi:ne180100]((void *)this + 76);
  uint64_t v2 = (void *)*((void *)this + 67);
  if (v2)
  {
    *((void *)this + 6_Block_object_dispose(&a9, 8) = v2;
    operator delete(v2);
  }
  HALS_IORawClock::~HALS_IORawClock((void **)this + 2);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IORawClock::CheckHostTimeOutOfBounds(unsigned long long)::$_0,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)uint8x8_t v11 = 2080;
    *(void *)&_OWORD v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 2048;
    uint64_t v15 = v7;
    __int16 v16 = 2048;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Out of bounds host time detected, host time %llu, out of bound time %llu", (uint8_t *)&v10, 0x2Cu);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 64, 8);
}

void sub_1BABCFF68(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IORawClock::CheckHostTimeOutOfBounds(unsigned long long)::$_0,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_3,std::tuple<unsigned int,char const*,int,char const*,char const*,double,double,double>>::perform(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v13;
  if (*(void *)v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 64);
    uint64_t v10 = *(void *)(a1 + 72);
    uint64_t v11 = *(void *)(a1 + 80);
    LODWORD(v13) = 67110914;
    HIDWORD(v13) = v4;
    *(_WORD *)__int16 v14 = 2080;
    *(void *)&uint64_t v14[2] = v5;
    __int16 v15 = 1024;
    int v16 = v6;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    __int16 v19 = 2080;
    uint64_t v20 = v8;
    __int16 v21 = 2048;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = v10;
    __int16 v25 = 2048;
    uint64_t v26 = v11;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HALS_IORawClock::Update: Re-anchoring IO timeline. Sample time %s consecutive, HostTime %s increasing, Ring buffer size: %f, sample diff: %f, host diff %f", (uint8_t *)&v13, 0x4Au);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 88, 8);
}

void sub_1BABD0120(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_3,std::tuple<unsigned int,char const*,int,char const*,char const*,double,double,double>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_2,std::tuple<unsigned int,char const*,int,char const*,char const*>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)uint64_t v11 = 2080;
    *(void *)&_OWORD v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 2080;
    uint64_t v15 = v7;
    __int16 v16 = 2080;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HALS_IORawClock::Update: Re-anchoring IO timeline. Sample time is%s consecutive, host time is%s consecutive.", (uint8_t *)&v10, 0x2Cu);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 64, 8);
}

void sub_1BABD02B4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_2,std::tuple<unsigned int,char const*,int,char const*,char const*>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_1,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)uint64_t v11 = 2080;
    *(void *)&_OWORD v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 2048;
    uint64_t v15 = v7;
    __int16 v16 = 2048;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HALS_IORawClock::Update: Re-anchoring IO timeline. Initial host time is out of bounds. ZTS Host Time: %llu, OoB Time: %llu", (uint8_t *)&v10, 0x2Cu);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 64, 8);
}

void sub_1BABD044C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_1,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_0,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v8;
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    LODWORD(v_Block_object_dispose(&a9, 8) = 67109634;
    HIDWORD(v_Block_object_dispose(&a9, 8) = v4;
    *(_WORD *)uint64_t v9 = 2080;
    *(void *)&uint64_t v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HALS_IORawClock::Update: Re-anchoring IO timeline. Zero timestamp seed changed", (uint8_t *)&v8, 0x18u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BABD05CC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IORawClock::Update(HALS_ZeroTimeStamp,double,BOOL &,unsigned int &)::$_0,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__value_func<unsigned long long ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<unsigned long long ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    int v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1BABD090C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<HALS_IOClock::HALS_IOClock(unsigned int,unsigned int,std::string const&)::$_0,std::allocator<HALS_IOClock::HALS_IOClock(unsigned int,unsigned int,std::string const&)::$_0>,unsigned long long ()(void)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOClock::HALS_IOClock(unsigned int,unsigned int,std::string const&)::$_0,std::allocator<HALS_IOClock::HALS_IOClock(unsigned int,unsigned int,std::string const&)::$_0>,unsigned long long ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN12HALS_IOClockC1EjjRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOClock::HALS_IOClock(unsigned int,unsigned int,std::string const&)::$_0,std::allocator<HALS_IOClock::HALS_IOClock(unsigned int,unsigned int,std::string const&)::$_0>,unsigned long long ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1463650;
}

void *std::__function::__func<HALS_IOClock::HALS_IOClock(unsigned int,unsigned int,std::string const&)::$_0,std::allocator<HALS_IOClock::HALS_IOClock(unsigned int,unsigned int,std::string const&)::$_0>,unsigned long long ()(void)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F1463650;
  return result;
}

void std::__function::__func<HALS_IOClock::HALS_IOClock(unsigned int,unsigned int,std::string const&)::$_0,std::allocator<HALS_IOClock::HALS_IOClock(unsigned int,unsigned int,std::string const&)::$_0>,unsigned long long ()(void)>::~__func()
{
}

uint64_t HALS_IOClock::HALS_IOClock(uint64_t a1, int a2, int a3, long long *a4)
{
  v10[4] = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F1463458;
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(void *)(a1 + 16) = &unk_1F1463438;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  *(_DWORD *)(a1 + 56) = a2;
  *(_DWORD *)(a1 + 60) = a3;
  uint64_t v5 = (std::string *)(a1 + 64);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v6 = *a4;
    v5->__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_DWORD *)(a1 + 8_Block_object_dispose(&a9, 8) = 1;
  *(unsigned char *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 16_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 176) = 0x6969726600000001;
  *(unsigned char *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 18_Block_object_dispose(&a9, 8) = 8;
  uint64_t v7 = 200;
  *(_DWORD *)(a1 + 192) = 0;
  do
  {
    uint64_t v8 = (void *)(a1 + v7);
    *uint64_t v8 = 0;
    v8[1] = 0;
    void v8[3] = 0;
    void v8[4] = 0;
    uint64_t v8[2] = 0x3FF0000000000000;
    v7 += 40;
  }
  while (v8 + 5 != (void *)(a1 + 520));
  *(void *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 52_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 556) = 0u;
  *(_DWORD *)(a1 + 572) = 12;
  *(void *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 584) = 0;
  *(void *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 24_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 32_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 40_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 48_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  v10[0] = &unk_1F1463650;
  void v10[3] = v10;
  std::__function::__value_func<unsigned long long ()(void)>::swap[abi:ne180100](v10, (void *)(a1 + 608));
  std::__function::__value_func<unsigned long long ()(void)>::~__value_func[abi:ne180100](v10);
  return a1;
}

void sub_1BABD0BA4(_Unwind_Exception *a1)
{
  std::__function::__value_func<unsigned long long ()(void)>::~__value_func[abi:ne180100]((void *)(v1 + 24));
  _Unwind_Resume(a1);
}

void *HALS_IOClock::Reset(HALS_IOClock *this, double a2, int a3, int a4, char a5, int a6)
{
  char v15[4] = *MEMORY[0x1E4F143B8];
  void v14[3] = 0;
  if (a6)
  {
    v15[0] = &unk_1F14636E0;
    v15[1] = (char *)this + 608;
    void v15[3] = v15;
    std::__function::__value_func<unsigned long long ()(void)>::swap[abi:ne180100](v15, v14);
    std::__function::__value_func<unsigned long long ()(void)>::~__value_func[abi:ne180100](v15);
  }
  std::__function::__value_func<unsigned long long ()(void)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)v14);
  *((_DWORD *)this + 22) = a3;
  *((unsigned char *)this + 92) = a5;
  std::__function::__value_func<unsigned long long ()(void)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v13);
  std::__function::__value_func<unsigned long long ()(void)>::swap[abi:ne180100](v15, (void *)this + 3);
  std::__function::__value_func<unsigned long long ()(void)>::~__value_func[abi:ne180100](v15);
  *((_DWORD *)this + 24) = 0;
  *((void *)this + 13) = 0;
  *((double *)this + 14) = 24000000.0 / a2;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((unsigned char *)this + 16_Block_object_dispose(&a9, 8) = 0;
  std::__function::__value_func<unsigned long long ()(void)>::~__value_func[abi:ne180100](v13);
  *((_DWORD *)this + 44) = a3;
  *((_DWORD *)this + 45) = a4;
  *((unsigned char *)this + 184) = a5;
  *((_DWORD *)this + 4_Block_object_dispose(&a9, 8) = 0;
  *((void *)this + 65) = 0;
  bzero((char *)this + 200, 40 * *((unsigned int *)this + 47));
  HALS_IOClock::ResetFilter(this, *((double *)this + 14), v11);
  *((_DWORD *)this + 146) = 0;
  *((_OWORD *)this + 37) = 0u;
  return std::__function::__value_func<unsigned long long ()(void)>::~__value_func[abi:ne180100](v14);
}

void sub_1BABD0D1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<unsigned long long ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<unsigned long long ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0,std::allocator<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0>,unsigned long long ()(void)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0,std::allocator<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0>,unsigned long long ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN12HALS_IOClock5ResetEdjjjbbE3$_0")) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0,std::allocator<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0>,unsigned long long ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1) + 24000;
}

uint64_t std::__function::__func<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0,std::allocator<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0>,unsigned long long ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14636E0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0,std::allocator<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0>,unsigned long long ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F14636E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0,std::allocator<HALS_IOClock::Reset(double,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0>,unsigned long long ()(void)>::~__func()
{
}

void AMCP::IOAudio2::Device::Device(uint64_t a1, uint64_t a2, unsigned int *a3, CFDictionaryRef *a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = a2;
  if (*a4)
  {
    applesauce::CF::details::find_at_key<applesauce::CF::StringRef,__CFString const*>((applesauce::CF::StringRef *)(a1 + 8), *a4, @"device UID");
    *(_DWORD *)(a1 + 16) = 0;
    CFStringRef v7 = *(const __CFString **)(a1 + 8);
    if (v7)
    {
      applesauce::CF::convert_to<std::string,0>((uint64_t)queue, v7);
      if (v29 >= 0) {
        uint64_t v8 = queue;
      }
      else {
        uint64_t v8 = (dispatch_queue_t *)queue[0];
      }
      caulk::make_string((caulk *)"%s Work Queue", (uint64_t)__p, v8);
      if (v31 >= 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      __int16 v10 = dispatch_queue_create((const char *)v9, 0);
      AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(a1 + 24), v10);
      if (v10) {
        dispatch_release(v10);
      }
      if (SHIBYTE(v31) < 0) {
        operator delete(__p[0]);
      }
      if (v29 < 0) {
        operator delete(queue[0]);
      }
      double v11 = (AMCP::Utility::Mach_Port *)*a3;
      *(_DWORD *)(a1 + 344) = v11;
      if (!v11 || (v11 = (AMCP::Utility::Mach_Port *)IOObjectRetain((io_object_t)v11), uint64_t v12 = v11, !v11))
      {
        *(void *)(a1 + 352) = 0;
        *(void *)(a1 + 360) = 0;
        *(_DWORD *)(a1 + 36_Block_object_dispose(&a9, 8) = AMCP::Utility::Mach_Port::create_port(v11);
        *(_WORD *)(a1 + 372) = 257;
        *(void *)(a1 + 376) = 850045863;
        *(_OWORD *)(a1 + 384) = 0u;
        *(_OWORD *)(a1 + 400) = 0u;
        *(_OWORD *)(a1 + 416) = 0u;
        *(_OWORD *)(a1 + 432) = 0u;
        *(void *)(a1 + 44_Block_object_dispose(&a9, 8) = *a4;
        *a4 = 0;
        *(_OWORD *)(a1 + 504) = 0u;
        int v13 = (void **)(a1 + 504);
        *(void *)(a1 + 520) = 0;
        *(_OWORD *)(a1 + 472) = 0u;
        *(_OWORD *)(a1 + 48_Block_object_dispose(&a9, 8) = 0u;
        *(_OWORD *)(a1 + 456) = 0u;
        CFDictionaryRef v14 = *(const __CFDictionary **)(a1 + 448);
        if (v14)
        {
          __p[0] = 0;
          applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&v26, v14, @"input streams", __p);
          if (__p[0]) {
            CFRelease(__p[0]);
          }
          AMCP::IOAudio2::Stream::create_from_dictionary_list((uint64_t *)__p, a1, 1, (CFArrayRef *)&v26);
          std::vector<std::shared_ptr<AMCP::IOAudio2::Stream>>::__vdeallocate((uint64_t *)(a1 + 480));
          *(_OWORD *)(a1 + 480) = *(_OWORD *)__p;
          *(void *)(a1 + 496) = v31;
          uint64_t v31 = 0;
          __p[1] = 0;
          __p[0] = 0;
          queue[0] = (dispatch_queue_t)__p;
          std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)queue);
          CFDictionaryRef v15 = *(const __CFDictionary **)(a1 + 448);
          if (v15)
          {
            __p[0] = 0;
            applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&v25, v15, @"output streams", __p);
            if (__p[0]) {
              CFRelease(__p[0]);
            }
            AMCP::IOAudio2::Stream::create_from_dictionary_list((uint64_t *)__p, a1, 0, (CFArrayRef *)&v25);
            std::vector<std::shared_ptr<AMCP::IOAudio2::Stream>>::__vdeallocate((uint64_t *)(a1 + 456));
            *(_OWORD *)(a1 + 456) = *(_OWORD *)__p;
            *(void *)(a1 + 472) = v31;
            uint64_t v31 = 0;
            __p[1] = 0;
            __p[0] = 0;
            queue[0] = (dispatch_queue_t)__p;
            std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)queue);
            CFDictionaryRef v16 = *(const __CFDictionary **)(a1 + 448);
            if (v16)
            {
              __p[0] = 0;
              applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&cf, v16, @"controls", __p);
              if (__p[0]) {
                CFRelease(__p[0]);
              }
              AMCP::IOAudio2::Control::create_from_dictionary_list((AMCP::IOAudio2::Control *)__p, (AMCP::IOAudio2::Device *)a1, (CFArrayRef *)&cf);
              if (*v13)
              {
                std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100]((uint64_t *)(a1 + 504));
                operator delete(*v13);
                *int v13 = 0;
                *(void *)(a1 + 512) = 0;
                *(void *)(a1 + 520) = 0;
              }
              *(_OWORD *)int v13 = *(_OWORD *)__p;
              *(void *)(a1 + 520) = v31;
              uint64_t v31 = 0;
              __p[1] = 0;
              __p[0] = 0;
              queue[0] = (dispatch_queue_t)__p;
              std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)queue);
              AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)__p, *(dispatch_object_t *)(*(void *)(*(void *)(*(void *)a1 + 32) + 32) + 352));
              AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)queue, *(dispatch_object_t *)(*(void *)(*(void *)(*(void *)a1 + 32) + 32) + 672));
              AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)object, (dispatch_object_t)__p[0]);
              dispatch_set_target_queue(object[0], queue[0]);
              AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)object);
              operator new();
            }
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          uint64_t v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v20, "Could not construct");
          __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        __int16 v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v19, "Could not construct");
        __cxa_throw(v19, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v22 = __cxa_allocate_exception(0x20uLL);
      __int16 v23 = std::system_category();
      MEMORY[0x1C1859250](v22, v12, v23, "Error on Retain");
      __cxa_throw(v22, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
    uint64_t v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v18, "Could not construct");
    __cxa_throw(v18, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  applesauce::CF::construct_error(v17);
  __cxa_throw(v17, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1BABD2338(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  __cxa_free_exception(v40);
  uint64_t v42 = *(std::__shared_weak_count **)(v41 - 128);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  JUMPOUT(0x1BABD2898);
}

void sub_1BABD239C(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  JUMPOUT(0x1BABD2938);
}

void sub_1BABD23A4(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  JUMPOUT(0x1BABD2938);
}

void sub_1BABD23C8()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x1BABD2808);
}

void sub_1BABD23E4()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x1BABD28B0);
}

void sub_1BABD23F8()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x1BABD28B8);
}

void sub_1BABD2408()
{
}

void sub_1BABD2410()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x1BABD28C0);
}

void sub_1BABD2420()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x1BABD2930);
}

void sub_1BABD2430()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x1BABD2938);
}

void sub_1BABD2440(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  JUMPOUT(0x1BABD2938);
}

void sub_1BABD2448(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  JUMPOUT(0x1BABD2938);
}

void sub_1BABD2450(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  JUMPOUT(0x1BABD2938);
}

void sub_1BABD2458(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  JUMPOUT(0x1BABD2938);
}

void sub_1BABD2460(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  JUMPOUT(0x1BABD2938);
}

void sub_1BABD2468(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  JUMPOUT(0x1BABD2938);
}

void sub_1BABD2470(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  JUMPOUT(0x1BABD2938);
}

void sub_1BABD2478(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  JUMPOUT(0x1BABD2938);
}

void sub_1BABD2480()
{
}

void sub_1BABD248C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (!*(void *)(v40 - 128))
  {
    std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100](&a23);
    applesauce::CF::StringRef::~StringRef((applesauce::CF::StringRef *)&a40);
    std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table(&a27);
    JUMPOUT(0x1BABD2898);
  }
  JUMPOUT(0x1BABD2508);
}

void sub_1BABD24D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,const void *a40)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a23);
  applesauce::CF::StringRef::~StringRef(&a40);
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table((uint64_t)&a27);
  JUMPOUT(0x1BABD2898);
}

void sub_1BABD2518()
{
  if (!*(void *)(v0 - 128)) {
    JUMPOUT(0x1BABD2808);
  }
  JUMPOUT(0x1BABD2580);
}

void sub_1BABD252C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BABD2530);
  }
  JUMPOUT(0x1BABD2938);
}

void sub_1BABD2534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,const void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42)
{
  if (a42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a42);
  }
  applesauce::CF::StringRef::~StringRef(&a23);
  JUMPOUT(0x1BABD2808);
}

void sub_1BABD2574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42)
{
  if (a42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a42);
  }
  JUMPOUT(0x1BABD2808);
}

void sub_1BABD2588()
{
}

void sub_1BABD2594(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,NSObject **buf,std::__shared_weak_count *a42,__int16 a43,__int16 a44,int a45,__int16 a46)
{
  if (a2)
  {
    MEMORY[0x1C1859840](v46, 0x1000C4052888210);
    CFDictionaryRef v50 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
    if (a2 == 2)
    {
      char v51 = v50;
      AMCP::Log::Scope_Registry::get(v50);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      long long v52 = *buf;
      if (a42) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a42);
      }
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        unsigned __int8 v53 = pthread_self();
        mach_port_t v54 = pthread_mach_thread_np(v53);
        uint64_t v55 = (*(uint64_t (**)(AMCP::Log::Scope_Registry *))(*(void *)v51 + 16))(v51);
        LODWORD(buf) = 67109890;
        HIDWORD(buf) = v54;
        LOWORD(a42) = 2080;
        *(void *)(v47 + 10) = "IOAudio2_Device.cpp";
        a44 = 1024;
        a45 = 86;
        a46 = 2080;
        *(void *)(v47 + 26) = v55;
        _os_log_error_impl(&dword_1BAA78000, v52, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d failed to open a connect to the driver: %s", (uint8_t *)&buf, 0x22u);
      }
      __cxa_rethrow();
    }
    AMCP::Log::Scope_Registry::get(v50);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    CFTypeRef v56 = *buf;
    if (a42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a42);
    }
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef v57 = pthread_self();
      mach_port_t v58 = pthread_mach_thread_np(v57);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v58;
      LOWORD(a42) = 2080;
      *(void *)(v47 + 10) = "IOAudio2_Device.cpp";
      a44 = 1024;
      a45 = 91;
      _os_log_error_impl(&dword_1BAA78000, v56, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d failed to open a connect to the driver", (uint8_t *)&buf, 0x18u);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x1BABD2938);
}

void sub_1BABD2760()
{
}

void sub_1BABD2780(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BABD2784);
  }
  __clang_call_terminate();
}

void sub_1BABD278C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
}

void sub_1BABD279C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  std::__function::__value_func<void ()(unsigned int,void *)>::~__value_func[abi:ne180100](&a41);
  if (v42) {
    dispatch_release(v42);
  }
  MEMORY[0x1C1859840](v41, 0x1020C40DCC910D7);
  JUMPOUT(0x1BABD2898);
}

void sub_1BABD27D4()
{
}

void sub_1BABD27DC()
{
}

void sub_1BABD27E4()
{
}

void sub_1BABD27EC()
{
}

void sub_1BABD27F4()
{
}

void sub_1BABD2828(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,int a41,__int16 a42,char a43,char a44)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl((uint64_t)&a42);
  boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector((uint64_t)&a27);
  std::runtime_error::~runtime_error((std::runtime_error *)(v46 - 136));
  if (v45) {
    __cxa_free_exception(v44);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a40);
  JUMPOUT(0x1BABD2898);
}

void sub_1BABD2894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, AMCP::Utility::Dispatch_Queue *a11, io_object_t *a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, AMCP::Utility::Mach_Port *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,const void *a37,const void *a38,const void *a39)
{
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&STACK[0x2B0]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&STACK[0x3F0]);
  applesauce::CF::ArrayRef::~ArrayRef(&a37);
  applesauce::CF::ArrayRef::~ArrayRef(&a38);
  applesauce::CF::ArrayRef::~ArrayRef(&a39);
  STACK[0x3F0] = v43;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3F0]);
  STACK[0x3F0] = a14;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3F0]);
  STACK[0x3F0] = v41;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3F0]);
  applesauce::CF::DictionaryRef::~DictionaryRef(v42);
  AMCP::Utility::Mach_Port::~Mach_Port(a18);
  int v45 = *(io_connect_t **)(v40 + 360);
  *(void *)(v40 + 360) = 0;
  if (v45) {
    std::default_delete<applesauce::iokit::io_connect_holder>::operator()[abi:ne180100](v45);
  }
  uint64_t v46 = *a13;
  *a13 = 0;
  if (v46) {
    std::default_delete<applesauce::iokit::io_service_notifications>::operator()[abi:ne180100](v46);
  }
  applesauce::iokit::io_object_holder::~io_object_holder(a12);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(a11);
  applesauce::CF::StringRef::~StringRef(v39);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<AMCP::IOAudio2::Stream>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t applesauce::iokit::io_service_notifications::io_service_notifications(uint64_t a1, io_service_t a2, NSObject **a3, const char *a4, uint64_t a5)
{
  applesauce::iokit::details::io_notificationport_holder::io_notificationport_holder((applesauce::iokit::details::io_notificationport_holder *)a1);
  __int16 v10 = *a3;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = *a3;
  if (v10) {
    dispatch_retain(v10);
  }
  uint64_t v11 = *(void *)(a5 + 24);
  if (!v11) {
    goto LABEL_6;
  }
  if (v11 != a5)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
LABEL_6:
    *(void *)(a1 + 40) = v11;
    goto LABEL_8;
  }
  *(void *)(a1 + 40) = a1 + 16;
  (*(void (**)(void, uint64_t))(**(void **)(a5 + 24) + 24))(*(void *)(a5 + 24), a1 + 16);
LABEL_8:
  *(_DWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  uint64_t v12 = (io_object_t *)(a1 + 48);
  IONotificationPortSetDispatchQueue(*(IONotificationPortRef *)a1, *(dispatch_queue_t *)(a1 + 8));
  io_object_t notification = 0;
  uint64_t v13 = IOServiceAddInterestNotification(*(IONotificationPortRef *)a1, a2, a4, (IOServiceInterestCallback)applesauce::iokit::io_service_notifications::notification_callback_, (void *)a1, &notification);
  if (v13)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v17 = std::system_category();
    MEMORY[0x1C1859250](exception, v13, v17, "Error on IOServiceAddInterestNotification");
    __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  io_object_t v14 = *v12;
  *uint64_t v12 = notification;
  if (v14) {
    IOObjectRelease(v14);
  }
  return a1;
}

void sub_1BABD2AF0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v4);
  applesauce::iokit::io_object_holder::~io_object_holder(v3);
  std::__function::__value_func<void ()(unsigned int,void *)>::~__value_func[abi:ne180100](v2);
  uint64_t v6 = *(NSObject **)(v1 + 8);
  if (v6) {
    dispatch_release(v6);
  }
  applesauce::iokit::details::io_notificationport_holder::~io_notificationport_holder((IONotificationPortRef *)v1);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(unsigned int,void *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::default_delete<applesauce::iokit::io_service_notifications>::operator()[abi:ne180100](uint64_t a1)
{
  io_object_t v2 = *(_DWORD *)(a1 + 48);
  if (v2) {
    IOObjectRelease(v2);
  }
  std::__function::__value_func<void ()(unsigned int,void *)>::~__value_func[abi:ne180100]((void *)(a1 + 16));
  uint64_t v3 = *(NSObject **)(a1 + 8);
  if (v3) {
    dispatch_release(v3);
  }
  IONotificationPortDestroy(*(IONotificationPortRef *)a1);

  JUMPOUT(0x1C1859840);
}

io_connect_t *applesauce::iokit::io_connect_holder::io_connect_holder(io_connect_t *connect, io_service_t service)
{
  kern_return_t v3;
  mach_error_t v5;
  char *v6;
  std::runtime_error *exception;
  std::runtime_error *v8;
  std::string __p;
  std::string v10;

  *connect = 0;
  uint64_t v3 = IOServiceOpen(service, *MEMORY[0x1E4F14960], 0, connect);
  if (v3)
  {
    uint64_t v5 = v3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "Could not create ioconnect for service ");
    uint64_t v6 = mach_error_string(v5);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v10, &__p, v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v10);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!*connect)
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "Could not create ioservice for service ");
    uint64_t v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v8, &v10);
    __cxa_throw(v8, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return connect;
}

void sub_1BABD2D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::default_delete<applesauce::iokit::io_connect_holder>::operator()[abi:ne180100](io_connect_t *a1)
{
  IOConnectRelease(*a1);

  JUMPOUT(0x1C1859840);
}

void AMCP::Utility::Mach_Port::~Mach_Port(AMCP::Utility::Mach_Port *this)
{
  AMCP::Utility::Mach_Port::reset(this);
  io_object_t v2 = *((void *)this + 9);
  if (v2) {
    dispatch_release(v2);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

uint64_t AMCP::IOAudio2::Device::update_core_common(uint64_t a1, uint64_t a2)
{
  uint64_t v220 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 448);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v4 = a1;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(&v204, v3, @"device name");
  if (!v205)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v206, "com.apple.coreaudio", "AMCP");
    uint64_t v121 = **(NSObject ***)v206;
    if (*(void *)&v206[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v206[8]);
    }
    if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
    {
      uint64_t v122 = pthread_self();
      mach_port_t v123 = pthread_mach_thread_np(v122);
      *(_DWORD *)v206 = 67109890;
      *(_DWORD *)&v206[4] = v123;
      *(_WORD *)&v206[8] = 2080;
      *(void *)&v206[10] = "IOAudio2_Device.cpp";
      *(_WORD *)&v206[18] = 1024;
      *(_DWORD *)&v206[20] = 124;
      *(_WORD *)&v206[24] = 2080;
      *(void *)&v206[26] = "device_name_opt.operator BOOL() == true";
      _os_log_error_impl(&dword_1BAA78000, v121, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Devices have to have a name", v206, 0x22u);
    }
    abort();
  }
  strcpy((char *)&__x, "manlbolg");
  BYTE9(__x) = 0;
  WORD5(__x) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v206, (uint64_t)&__x, v204);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v206 + 40), v206);
  uint64_t v6 = (CFDictionaryRef *)(v4 + 448);
  if (*(void *)&v206[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v206[8]);
  }
  if (!*v6)
  {
    long long v140 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v140, "Could not construct");
    __cxa_throw(v140, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(&cf, *v6, @"device manufacturer");
  if (v203)
  {
    CFStringRef v7 = cf;
    if (cf) {
      CFRetain(cf);
    }
    uint64_t valuePtr = (uint64_t)v7;
  }
  else
  {
    CFStringRef v7 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.AudioMIDISetup", 30, 0x8000100u, 0);
    uint64_t valuePtr = (uint64_t)v7;
    if (!v7)
    {
      long long v162 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v162, "Could not construct");
      __cxa_throw(v162, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  strcpy((char *)&__x, "kamlbolg");
  BYTE9(__x) = 0;
  WORD5(__x) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v206, (uint64_t)&__x, v7);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v206 + 40), v206);
  if (*(void *)&v206[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v206[8]);
  }
  if (v7) {
    CFRelease(v7);
  }
  CFStringRef v8 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.AudioMIDISetup", 30, 0x8000100u, 0);
  uint64_t valuePtr = (uint64_t)v8;
  if (!v8)
  {
    uint64_t v141 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v141, "Could not construct");
    __cxa_throw(v141, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  strcpy((char *)&__x, "ppacbolg");
  BYTE9(__x) = 0;
  WORD5(__x) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v206, (uint64_t)&__x, v8);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v206 + 40), v206);
  if (*(void *)&v206[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v206[8]);
  }
  CFRelease(v8);
  if (!*v6)
  {
    uint64_t v142 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v142, "Could not construct");
    __cxa_throw(v142, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v200, *v6, @"clock domain");
  if (v201)
  {
    if (!v200)
    {
      long long v157 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v157, "Could not construct");
      __cxa_throw(v157, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v9 = applesauce::CF::convert_to<unsigned int,0>(v200);
  }
  else
  {
    int v9 = 0;
  }
  LODWORD(__x) = v9;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v206, 0, (int *)&__x, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v206 + 40), v206);
  if (*(void *)&v206[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v206[8]);
  }
  if (!*v6)
  {
    long long v143 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v143, "Could not construct");
    __cxa_throw(v143, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v198, *v6, @"input latency");
  if (v199)
  {
    if (!v198)
    {
      long long v158 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v158, "Could not construct");
      __cxa_throw(v158, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v10 = applesauce::CF::convert_to<unsigned int,0>(v198);
  }
  else
  {
    int v10 = 0;
  }
  LODWORD(__x) = v10;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v206, 0, (int *)&__x, 7.28117498e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v206 + 40), v206);
  if (*(void *)&v206[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v206[8]);
  }
  if (!*v6)
  {
    long long v144 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v144, "Could not construct");
    __cxa_throw(v144, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v196, *v6, @"output latency");
  if (v197)
  {
    if (!v196)
    {
      long long v159 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v159, "Could not construct");
      __cxa_throw(v159, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v11 = applesauce::CF::convert_to<unsigned int,0>(v196);
  }
  else
  {
    int v11 = 0;
  }
  LODWORD(__x) = v11;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v206, 0, (int *)&__x, 8.13208691e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v206 + 40), v206);
  if (*(void *)&v206[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v206[8]);
  }
  if (!*v6)
  {
    long long v145 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v145, "Could not construct");
    __cxa_throw(v145, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v194, *v6, @"input safety offset");
  if (v195)
  {
    if (!v194)
    {
      long long v160 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v160, "Could not construct");
      __cxa_throw(v160, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unsigned int v12 = applesauce::CF::convert_to<unsigned int,0>(v194);
  }
  else
  {
    unsigned int v12 = 0;
  }
  unsigned int v173 = v12;
  LODWORD(__x) = v12;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v206, 0, (int *)&__x, 7.28117508e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v206 + 40), v206);
  if (*(void *)&v206[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v206[8]);
  }
  if (!*v6)
  {
    int64_t v146 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v146, "Could not construct");
    __cxa_throw(v146, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v192, *v6, @"output safety offset");
  if (v193)
  {
    if (!v192)
    {
      long long v161 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v161, "Could not construct");
      __cxa_throw(v161, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unsigned int v13 = applesauce::CF::convert_to<unsigned int,0>(v192);
  }
  else
  {
    unsigned int v13 = 0;
  }
  unsigned int v171 = v13;
  LODWORD(__x) = v13;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v206, 0, (int *)&__x, 8.13208706e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v206 + 40), v206);
  if (*(void *)&v206[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v206[8]);
  }
  if (!*v6)
  {
    v147 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v147, "Could not construct");
    __cxa_throw(v147, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  LODWORD(valuePtr) = 0;
  int v167 = v11;
  int v168 = v10;
  int v169 = v9;
  *(void *)&long long __x = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!(void)__x)
  {
    uint64_t v148 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v148, "Could not construct");
    __cxa_throw(v148, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(v206, *v6, @"sample rate", &__x);
  io_object_t v14 = *(const void **)v206;
  if (!*(void *)v206)
  {
    long long v149 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v149, "Could not construct");
    __cxa_throw(v149, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int64_t v15 = applesauce::CF::convert_to<long long,0>(*(const __CFNumber **)v206);
  CFRelease(v14);
  if ((void)__x) {
    CFRelease((CFTypeRef)__x);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&valuePtr, 0, 1.5836601e190);
  double v16 = (double)v15 * 2.32830644e-10 + (float)(v15 >> 32);
  uint64_t v17 = (unsigned int *)valuePtr;
  unint64_t v18 = AMCP::Implementation::get_type_marker<std::function<double ()(void)>>();
  *(void *)&long long __x = &unk_1F1463860;
  *((double *)&__x + 1) = v16;
  *((void *)&v218 + 1) = &__x;
  memset(v206, 0, 40);
  std::__function::__value_func<double ()(void)>::__value_func[abi:ne180100]((uint64_t)v206, (uint64_t)&__x);
  *(void *)&v206[32] = AMCP::Implementation::In_Place_Storage<std::function<double ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v17, v18, (AMCP *)v206);
  if (*(void *)&v206[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v206[32])(0, v206, 0, 0);
  }
  std::__function::__value_func<double ()(void)>::~__value_func[abi:ne180100](&__x);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<double>((uint64_t)v17);
  unint64_t v19 = AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>();
  *(void *)&long long __x = &unk_1F14638E0;
  *((void *)&__x + 1) = v4;
  *((void *)&v218 + 1) = &__x;
  memset(v206, 0, 40);
  std::__function::__value_func<void ()(double const&)>::__value_func[abi:ne180100]((uint64_t)v206, (uint64_t)&__x);
  *(void *)&v206[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(double const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v17, v19, (AMCP *)v206);
  if (*(void *)&v206[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v206[32])(0, v206, 0, 0);
  }
  std::__function::__value_func<void ()(double const&)>::~__value_func[abi:ne180100](&__x);
  AMCP::Core::Operation_Utilities::add_generic_property_setter<double>((uint64_t)v17);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, v17 + 10, &valuePtr);
  if (v215) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v215);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>(&v190, 0, 1.58366007e190);
  unint64_t v187 = 0;
  unint64_t v188 = 0;
  unint64_t v189 = 0;
  uint64_t v20 = *(void *)(v4 + 456);
  uint64_t v21 = *(void *)(v4 + 464);
  uint64_t v175 = a2;
  long long v176 = (const __CFDictionary **)(v4 + 448);
  if (v20 == v21)
  {
    char v52 = 0;
  }
  else
  {
    std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::reserve(&v187, (v21 - v20) >> 4);
    uint64_t v22 = *(AMCP::IOAudio2::Stream ***)(v4 + 456);
    *(void *)long long v178 = *(void *)(v4 + 464);
    if (v22 == *(AMCP::IOAudio2::Stream ***)v178)
    {
      char v52 = 0;
      a2 = v175;
      uint64_t v6 = (CFDictionaryRef *)(v4 + 448);
    }
    else
    {
      uint64_t v165 = v4;
      LODWORD(v23) = 0;
      unint64_t v24 = v188;
      unint64_t v25 = v189;
      CFTypeRef v26 = v187;
      do
      {
        int v27 = *((_DWORD *)*v22 + 13);
        int v28 = *((_DWORD *)*v22 + 9);
        int mapping_options = AMCP::IOAudio2::Stream::get_mapping_options(*v22);
        AMCP::IOAudio2::get_stream_format((AMCP::IOAudio2 *)&__x, *((const applesauce::CF::DictionaryRef **)*v22 + 5));
        int v30 = HIDWORD(v218);
        if (v24 >= v25)
        {
          unint64_t v33 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v24 - (void)v26) >> 3) + 1;
          if (v33 > 0x492492492492492)
          {
            unint64_t v187 = v26;
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v25 - (void)v26) >> 3) > v33) {
            unint64_t v33 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v25 - (void)v26) >> 3);
          }
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v25 - (void)v26) >> 3)) >= 0x249249249249249) {
            unint64_t v34 = 0x492492492492492;
          }
          else {
            unint64_t v34 = v33;
          }
          if (v34) {
            unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v34);
          }
          else {
            uint64_t v35 = 0;
          }
          unint64_t v36 = v34 + 8 * ((uint64_t)(v24 - (void)v26) >> 3);
          *(_DWORD *)unint64_t v36 = v27;
          *(_DWORD *)(v36 + 4) = v28;
          *(_DWORD *)(v36 + _Block_object_dispose(&a9, 8) = mapping_options;
          *(_OWORD *)(v36 + 16) = __x;
          *(_OWORD *)(v36 + 32) = v218;
          *(void *)(v36 + 4_Block_object_dispose(&a9, 8) = v219;
          if ((void *)v24 == v26)
          {
            unint64_t v41 = (void *)(v34 + 8 * ((uint64_t)(v24 - (void)v26) >> 3));
          }
          else
          {
            unint64_t v37 = v34 + 8 * ((uint64_t)(v24 - (void)v26) >> 3);
            do
            {
              long long v38 = *(_OWORD *)(v24 - 56);
              long long v39 = *(_OWORD *)(v24 - 40);
              long long v40 = *(_OWORD *)(v24 - 24);
              unint64_t v41 = (void *)(v37 - 56);
              *(void *)(v37 - _Block_object_dispose(&a9, 8) = *(void *)(v24 - 8);
              *(_OWORD *)(v37 - 24) = v40;
              *(_OWORD *)(v37 - 40) = v39;
              *(_OWORD *)(v37 - 56) = v38;
              v24 -= 56;
              v37 -= 56;
            }
            while ((void *)v24 != v26);
          }
          unint64_t v25 = v34 + 56 * v35;
          unint64_t v24 = v36 + 56;
          if (v26) {
            operator delete(v26);
          }
          CFTypeRef v26 = v41;
        }
        else
        {
          *(_OWORD *)v206 = __x;
          *(_OWORD *)&v206[16] = v218;
          *(void *)&v206[32] = v219;
          *(_DWORD *)unint64_t v24 = v27;
          *(_DWORD *)(v24 + 4) = v28;
          *(_DWORD *)(v24 + _Block_object_dispose(&a9, 8) = mapping_options;
          uint64_t v31 = *(void *)&v206[32];
          long long v32 = *(_OWORD *)&v206[16];
          *(_OWORD *)(v24 + 16) = *(_OWORD *)v206;
          *(_OWORD *)(v24 + 32) = v32;
          *(void *)(v24 + 4_Block_object_dispose(&a9, 8) = v31;
          v24 += 56;
        }
        unint64_t v23 = (v30 + v23);
        v22 += 2;
      }
      while (v22 != *(AMCP::IOAudio2::Stream ***)v178);
      unint64_t v188 = v24;
      unint64_t v189 = v25;
      unint64_t v187 = v26;
      if (v23)
      {
        a2 = v175;
        if (!*v176)
        {
          long long v163 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v163, "Could not construct");
          __cxa_throw(v163, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        CFArrayRef v42 = CFArrayCreate(0, 0, 0, MEMORY[0x1E4F1D518]);
        applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)v206, v42);
        applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&v184, *v176, @"output channel layout", v206);
        if (*(void *)v206) {
          CFRelease(*(CFTypeRef *)v206);
        }
        LOBYTE(__x) = 0;
        std::vector<char>::vector((std::vector<char> *)v206, 20 * v23 + 12, (const std::vector<char>::value_type *)&__x);
        uint64_t v43 = *(void *)v206;
        **(void **)v206 = 0;
        *(_DWORD *)(v43 + _Block_object_dispose(&a9, 8) = v23;
        if (v23 > (*(void *)&v206[8] - v43 - 12) / 0x14uLL) {
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        }
        uint64_t v44 = 0;
        unint64_t v45 = 0;
        CFArrayRef v46 = v184;
        do
        {
          if (!v46)
          {
            int64_t v129 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v129, "Could not construct");
            __cxa_throw(v129, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          LODWORD(v182) = -1;
          uint64_t valuePtr = (uint64_t)CFNumberCreate(0, kCFNumberIntType, &v182);
          if (!valuePtr)
          {
            int64_t v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v130, "Could not construct");
            __cxa_throw(v130, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          applesauce::CF::at_or<applesauce::CF::NumberRef>(&__x, v46, v45, &valuePtr);
          uint64_t v47 = (const void *)__x;
          if (!(void)__x)
          {
            uint64_t v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v131, "Could not construct");
            __cxa_throw(v131, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          int v48 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)__x);
          unint64_t v49 = *(unsigned int *)(*(void *)v206 + 8);
          if (v49 > (*(void *)&v206[8] - *(void *)v206 - 12) / 0x14uLL) {
            __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
          }
          if (v45 >= v49)
          {
            unint64_t v132 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v132, "accessing a CA::ChannelLayout with an out-of-range index");
            v132->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
            __cxa_throw(v132, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
          }
          *(_DWORD *)(*(void *)v206 + v44 + 12) = v48;
          CFRelease(v47);
          if (valuePtr) {
            CFRelease((CFTypeRef)valuePtr);
          }
          unint64_t v50 = *(unsigned int *)(*(void *)v206 + 8);
          if (v50 > (*(void *)&v206[8] - *(void *)v206 - 12) / 0x14uLL) {
            __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
          }
          if (v45 >= v50)
          {
            unint64_t v133 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v133, "accessing a CA::ChannelLayout with an out-of-range index");
            v133->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
            __cxa_throw(v133, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
          }
          uint64_t v51 = *(void *)v206 + v44;
          ++v45;
          *(void *)(v51 + 16) = 0;
          *(void *)(v51 + 24) = 0;
          v44 += 20;
        }
        while (v45 < v50);
        uint64_t valuePtr = 0x6F75747073726E64;
        LODWORD(v215) = 0;
        AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>((uint64_t *)&__x, (uint64_t)&valuePtr, *(const void **)v206, *(uint64_t *)&v206[8]);
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v175, (unsigned int *)(__x + 40), &__x);
        uint64_t v4 = v165;
        uint64_t v6 = v176;
        if (*((void *)&__x + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__x + 1));
        }
        if (*(void *)v206)
        {
          *(void *)&v206[8] = *(void *)v206;
          operator delete(*(void **)v206);
        }
        CFRelease(v46);
        char v52 = 1;
      }
      else
      {
        char v52 = 0;
        a2 = v175;
        uint64_t v6 = v176;
        uint64_t v4 = v165;
      }
    }
  }
  CFArrayRef v184 = 0;
  unint64_t v185 = 0;
  unint64_t v186 = 0;
  uint64_t v53 = *(void *)(v4 + 480);
  uint64_t v54 = *(void *)(v4 + 488);
  if (v53 == v54)
  {
    char v87 = 0;
    LODWORD(v57) = 0;
  }
  else
  {
    std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::reserve((void **)&v184, (v54 - v53) >> 4);
    uint64_t v55 = *(AMCP::IOAudio2::Stream ***)(v4 + 480);
    CFTypeRef v56 = *(AMCP::IOAudio2::Stream ***)(v4 + 488);
    if (v55 == v56)
    {
      char v87 = 0;
      LODWORD(v57) = 0;
      uint64_t v6 = v176;
    }
    else
    {
      char v179 = v52;
      uint64_t v166 = v4;
      LODWORD(v57) = 0;
      unint64_t v59 = v185;
      unint64_t v58 = v186;
      CFArrayRef v60 = v184;
      do
      {
        int v61 = *((_DWORD *)*v55 + 13);
        int v62 = *((_DWORD *)*v55 + 9);
        int v63 = AMCP::IOAudio2::Stream::get_mapping_options(*v55);
        AMCP::IOAudio2::get_stream_format((AMCP::IOAudio2 *)&__x, *((const applesauce::CF::DictionaryRef **)*v55 + 5));
        int v64 = HIDWORD(v218);
        if (v59 >= v58)
        {
          unint64_t v67 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v59 - (void)v60) >> 3) + 1;
          if (v67 > 0x492492492492492)
          {
            CFArrayRef v184 = v60;
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v58 - (void)v60) >> 3) > v67) {
            unint64_t v67 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v58 - (void)v60) >> 3);
          }
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v58 - (void)v60) >> 3)) >= 0x249249249249249) {
            unint64_t v68 = 0x492492492492492;
          }
          else {
            unint64_t v68 = v67;
          }
          if (v68) {
            unint64_t v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v68);
          }
          else {
            uint64_t v69 = 0;
          }
          unint64_t v70 = v68 + 8 * ((uint64_t)(v59 - (void)v60) >> 3);
          *(_DWORD *)unint64_t v70 = v61;
          *(_DWORD *)(v70 + 4) = v62;
          *(_DWORD *)(v70 + _Block_object_dispose(&a9, 8) = v63;
          *(_OWORD *)(v70 + 16) = __x;
          *(_OWORD *)(v70 + 32) = v218;
          *(void *)(v70 + 4_Block_object_dispose(&a9, 8) = v219;
          if ((const __CFArray *)v59 == v60)
          {
            CFArrayRef v75 = (const __CFArray *)(v68 + 8 * ((uint64_t)(v59 - (void)v60) >> 3));
          }
          else
          {
            unint64_t v71 = v68 + 8 * ((uint64_t)(v59 - (void)v60) >> 3);
            do
            {
              long long v72 = *(_OWORD *)(v59 - 56);
              long long v73 = *(_OWORD *)(v59 - 40);
              long long v74 = *(_OWORD *)(v59 - 24);
              CFArrayRef v75 = (const __CFArray *)(v71 - 56);
              *(void *)(v71 - _Block_object_dispose(&a9, 8) = *(void *)(v59 - 8);
              *(_OWORD *)(v71 - 24) = v74;
              *(_OWORD *)(v71 - 40) = v73;
              *(_OWORD *)(v71 - 56) = v72;
              v59 -= 56;
              v71 -= 56;
            }
            while ((const __CFArray *)v59 != v60);
          }
          unint64_t v76 = v68 + 56 * v69;
          unint64_t v59 = v70 + 56;
          if (v60) {
            operator delete(v60);
          }
          CFArrayRef v60 = v75;
          unint64_t v58 = v76;
        }
        else
        {
          *(_OWORD *)v206 = __x;
          *(_OWORD *)&v206[16] = v218;
          *(void *)&v206[32] = v219;
          *(_DWORD *)unint64_t v59 = v61;
          *(_DWORD *)(v59 + 4) = v62;
          *(_DWORD *)(v59 + _Block_object_dispose(&a9, 8) = v63;
          uint64_t v65 = *(void *)&v206[32];
          long long v66 = *(_OWORD *)&v206[16];
          *(_OWORD *)(v59 + 16) = *(_OWORD *)v206;
          *(_OWORD *)(v59 + 32) = v66;
          *(void *)(v59 + 4_Block_object_dispose(&a9, 8) = v65;
          v59 += 56;
        }
        unint64_t v57 = (v64 + v57);
        v55 += 2;
      }
      while (v55 != v56);
      unint64_t v185 = v59;
      unint64_t v186 = v58;
      CFArrayRef v184 = v60;
      if (v57)
      {
        a2 = v175;
        char v52 = v179;
        if (!*v176)
        {
          long long v164 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v164, "Could not construct");
          __cxa_throw(v164, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        CFArrayRef v77 = CFArrayCreate(0, 0, 0, MEMORY[0x1E4F1D518]);
        applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)v206, v77);
        applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&v182, *v176, @"input channel layout", v206);
        if (*(void *)v206) {
          CFRelease(*(CFTypeRef *)v206);
        }
        LOBYTE(__x) = 0;
        std::vector<char>::vector((std::vector<char> *)v206, 20 * v57 + 12, (const std::vector<char>::value_type *)&__x);
        uint64_t v78 = *(void *)v206;
        **(void **)v206 = 0;
        *(_DWORD *)(v78 + _Block_object_dispose(&a9, 8) = v57;
        if (v57 > (*(void *)&v206[8] - v78 - 12) / 0x14uLL) {
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        }
        uint64_t v79 = 0;
        unint64_t v80 = 0;
        CFArrayRef v81 = v182;
        do
        {
          if (!v81)
          {
            long long v134 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v134, "Could not construct");
            __cxa_throw(v134, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          LODWORD(v181) = -1;
          uint64_t valuePtr = (uint64_t)CFNumberCreate(0, kCFNumberIntType, &v181);
          if (!valuePtr)
          {
            long long v135 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v135, "Could not construct");
            __cxa_throw(v135, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          applesauce::CF::at_or<applesauce::CF::NumberRef>(&__x, v81, v80, &valuePtr);
          long long v82 = (const void *)__x;
          if (!(void)__x)
          {
            long long v136 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v136, "Could not construct");
            __cxa_throw(v136, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          int v83 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)__x);
          unint64_t v84 = *(unsigned int *)(*(void *)v206 + 8);
          if (v84 > (*(void *)&v206[8] - *(void *)v206 - 12) / 0x14uLL) {
            __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
          }
          if (v80 >= v84)
          {
            unint64_t v137 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v137, "accessing a CA::ChannelLayout with an out-of-range index");
            v137->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
            __cxa_throw(v137, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
          }
          *(_DWORD *)(*(void *)v206 + v79 + 12) = v83;
          CFRelease(v82);
          if (valuePtr) {
            CFRelease((CFTypeRef)valuePtr);
          }
          unint64_t v85 = *(unsigned int *)(*(void *)v206 + 8);
          if (v85 > (*(void *)&v206[8] - *(void *)v206 - 12) / 0x14uLL) {
            __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
          }
          if (v80 >= v85)
          {
            long long v138 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v138, "accessing a CA::ChannelLayout with an out-of-range index");
            v138->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
            __cxa_throw(v138, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
          }
          uint64_t v86 = *(void *)v206 + v79;
          ++v80;
          *(void *)(v86 + 16) = 0;
          *(void *)(v86 + 24) = 0;
          v79 += 20;
        }
        while (v80 < v85);
        uint64_t valuePtr = 0x696E707473726E64;
        LODWORD(v215) = 0;
        AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>((uint64_t *)&__x, (uint64_t)&valuePtr, *(const void **)v206, *(uint64_t *)&v206[8]);
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v175, (unsigned int *)(__x + 40), &__x);
        uint64_t v4 = v166;
        uint64_t v6 = v176;
        if (*((void *)&__x + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__x + 1));
        }
        if (*(void *)v206)
        {
          *(void *)&v206[8] = *(void *)v206;
          operator delete(*(void **)v206);
        }
        CFRelease(v81);
        char v87 = 1;
      }
      else
      {
        char v87 = 0;
        a2 = v175;
        uint64_t v6 = v176;
        uint64_t v4 = v166;
        char v52 = v179;
      }
    }
  }
  if (!*v6)
  {
    long long v150 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v150, "Could not construct");
    __cxa_throw(v150, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*>(&v182, *v6, @"input channel layout");
  if (v183)
  {
    if (v57 <= 1) {
      unsigned int v88 = 1;
    }
    else {
      unsigned int v88 = v57;
    }
    LOBYTE(__x) = 0;
    std::vector<char>::vector((std::vector<char> *)v206, 20 * v88 + 12, (const std::vector<char>::value_type *)&__x);
    long long v89 = *(_DWORD **)v206;
    **(void **)v206 = 0;
    v89[2] = v57;
    uint64_t v90 = *(void *)&v206[8];
    if (v57 > (*(void *)&v206[8] - (void)v89 - 12) / 0x14uLL) {
      __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
    }
    if (v57)
    {
      uint64_t v91 = 0;
      unint64_t v92 = 0;
      do
      {
        if (!v182)
        {
          uint64_t v124 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v124, "Could not construct");
          __cxa_throw(v124, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v181) = -1;
        uint64_t valuePtr = (uint64_t)CFNumberCreate(0, kCFNumberIntType, &v181);
        if (!valuePtr)
        {
          long long v125 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v125, "Could not construct");
          __cxa_throw(v125, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef>(&__x, v182, v92, &valuePtr);
        __int16 v93 = (const void *)__x;
        if (!(void)__x)
        {
          long long v126 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v126, "Could not construct");
          __cxa_throw(v126, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        int v94 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)__x);
        unint64_t v95 = *(unsigned int *)(*(void *)v206 + 8);
        if (v95 > (*(void *)&v206[8] - *(void *)v206 - 12) / 0x14uLL) {
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        }
        if (v92 >= v95)
        {
          long long v127 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v127, "accessing a CA::ChannelLayout with an out-of-range index");
          v127->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
          __cxa_throw(v127, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
        }
        *(_DWORD *)(*(void *)v206 + v91 + 12) = v94;
        CFRelease(v93);
        if (valuePtr) {
          CFRelease((CFTypeRef)valuePtr);
        }
        unint64_t v96 = *(unsigned int *)(*(void *)v206 + 8);
        if (v96 > (*(void *)&v206[8] - *(void *)v206 - 12) / 0x14uLL) {
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        }
        if (v92 >= v96)
        {
          int64_t v128 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v128, "accessing a CA::ChannelLayout with an out-of-range index");
          v128->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
          __cxa_throw(v128, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
        }
        uint64_t v97 = *(void *)v206 + v91;
        ++v92;
        *(void *)(v97 + 16) = 0;
        *(void *)(v97 + 24) = 0;
        v91 += 20;
      }
      while (v92 < v96);
      long long v89 = *(_DWORD **)v206;
      uint64_t v90 = *(void *)&v206[8];
      uint64_t v6 = v176;
    }
    uint64_t valuePtr = 0x696E707473726E64;
    LODWORD(v215) = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>((uint64_t *)&__x, (uint64_t)&valuePtr, v89, v90);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(__x + 40), &__x);
    if (*((void *)&__x + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__x + 1));
    }
    if (*(void *)v206)
    {
      *(void *)&v206[8] = *(void *)v206;
      operator delete(*(void **)v206);
    }
  }
  LOBYTE(__x) = v87;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)v206, 0, (char *)&__x, 7.28117486e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v206 + 40), v206);
  if (*(void *)&v206[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v206[8]);
  }
  LOBYTE(__x) = v52;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)v206, 0, (char *)&__x, 8.13208672e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v206 + 40), v206);
  if (*(void *)&v206[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v206[8]);
  }
  LOBYTE(__x) = v52;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)v206, 0, (char *)&__x, 8.13208706e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v206 + 40), v206);
  if (*(void *)&v206[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v206[8]);
  }
  io_connect_t v98 = **(_DWORD **)(v4 + 360);
  uint64_t v99 = IOConnectAddRef(v98);
  if (v99)
  {
    long long v151 = __cxa_allocate_exception(0x20uLL);
    unint64_t v152 = std::system_category();
    MEMORY[0x1C1859250](v151, v99, v152, "Error on IOConnectAddRef");
    __cxa_throw(v151, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  uint64_t v100 = *(const void **)(v4 + 8);
  if (v100) {
    CFRetain(*(CFTypeRef *)(v4 + 8));
  }
  v181 = v100;
  *(void *)v206 = @"supports prewarming";
  BOOL BOOL_from = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(v6, (const void **)v206);
  *(void *)v206 = @"wants input trap";
  BOOL v102 = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(v6, (const void **)v206);
  *(void *)v206 = @"wants output trap";
  BOOL v103 = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(v6, (const void **)v206);
  io_connect_t v177 = v98;
  if (!*v6)
  {
    uint64_t v153 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v153, "Could not construct");
    __cxa_throw(v153, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v104 = v103;
  applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)v206, *v6, @"io buffer frame size");
  if (!*(void *)v206)
  {
    uint64_t v154 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v154, "Could not construct");
    __cxa_throw(v154, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v105 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)v206);
  if (*(void *)v206) {
    CFRelease(*(CFTypeRef *)v206);
  }
  uint64_t v180 = v190;
  uint64_t v106 = *(void *)(*(void *)v4 + 32);
  uint64_t v107 = *(void *)(*(void *)v4 + 40);
  *(void *)v206 = v106;
  *(void *)&v206[8] = v107;
  if (v107) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v107 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)&v206[16] = v98;
  uint64_t v108 = IOConnectAddRef(v98);
  if (v108)
  {
    uint64_t v155 = __cxa_allocate_exception(0x20uLL);
    long long v156 = std::system_category();
    MEMORY[0x1C1859250](v155, v108, v156, "Error on IOConnectAddRef");
    __cxa_throw(v155, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  if (v100) {
    CFRetain(v100);
  }
  *(void *)&v206[24] = v100;
  *(double *)&v206[32] = v16;
  *(_DWORD *)&v206[40] = v105;
  *(_DWORD *)&v206[44] = v169;
  LOBYTE(v207) = BOOL_from;
  *(void *)((char *)&v207 + 4) = __PAIR64__(v171, v173);
  HIDWORD(v207) = v168;
  int v208 = v167;
  uint64_t v210 = 0;
  long long v209 = 0uLL;
  CFArrayRef v109 = v184;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(&v209, v184, v185, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v185 - (void)v184) >> 3));
  long long __p = 0uLL;
  uint64_t v212 = 0;
  long long v110 = v187;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(&__p, v187, v188, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v188 - (void)v187) >> 3));
  LOBYTE(v213) = v102;
  HIBYTE(v213) = v104;
  unint64_t v111 = AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>();
  long long v112 = *(_OWORD *)v206;
  memset(v206, 0, 20);
  int v113 = *(_DWORD *)&v206[16];
  uint64_t v114 = *(void *)&v206[24];
  uint64_t v115 = v210;
  *(void *)&v206[24] = 0;
  long long v172 = v209;
  long long v174 = v112;
  uint64_t v210 = 0;
  long long v209 = 0uLL;
  long long v170 = __p;
  uint64_t v116 = v212;
  uint64_t v212 = 0;
  long long __p = 0uLL;
  __int16 v117 = v213;
  v216 = 0;
  long long v118 = (char *)operator new(0x88uLL);
  *(_OWORD *)(v118 + _Block_object_dispose(&a9, 8) = v174;
  long long v119 = v207;
  *(_OWORD *)(v118 + 40) = *(_OWORD *)&v206[32];
  *(void *)long long v118 = &unk_1F1463960;
  *((_DWORD *)v118 + 6) = v113;
  *((void *)v118 + 4) = v114;
  *(_OWORD *)(v118 + 56) = v119;
  *((_DWORD *)v118 + 1_Block_object_dispose(&a9, 8) = v208;
  *((_OWORD *)v118 + 5) = v172;
  *((void *)v118 + 12) = v115;
  *(_OWORD *)(v118 + 104) = v170;
  *((void *)v118 + 15) = v116;
  *((_WORD *)v118 + 64) = v117;
  v216 = v118;
  long long __x = 0u;
  long long v218 = 0u;
  v219 = 0;
  std::__function::__value_func<std::shared_ptr<AMCP::Core::Engine> ()(void)>::__value_func[abi:ne180100]((uint64_t)&__x, (uint64_t)&valuePtr);
  v219 = AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v180, v111, (AMCP *)&__x);
  if (v219) {
    v219(0, (uint64_t)&__x, 0, 0);
  }
  std::__function::__value_func<std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__value_func[abi:ne180100](&valuePtr);
  IOConnectRelease(0);
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if ((void)v209)
  {
    *((void *)&v209 + 1) = v209;
    operator delete((void *)v209);
  }
  if (*(void *)&v206[24]) {
    CFRelease(*(CFTypeRef *)&v206[24]);
  }
  IOConnectRelease(*(io_connect_t *)&v206[16]);
  if (*(void *)&v206[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v206[8]);
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v175, (unsigned int *)(v180 + 40), &v190);
  if (v100) {
    CFRelease(v100);
  }
  IOConnectRelease(v177);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v182);
  if (v109) {
    operator delete(v109);
  }
  if (v110) {
    operator delete(v110);
  }
  if (v191) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v191);
  }
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v192);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v194);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v196);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v198);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v200);
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v204);
}

void sub_1BABD4E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, io_connect_t connect, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,char a40,uint64_t a41,char a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,void *a48,uint64_t a49,io_connect_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58)
{
}

uint64_t AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>(uint64_t *a1, int a2, uint64_t *a3, double a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, a2, a4);
  uint64_t v6 = *a1;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  long long v11 = *(_OWORD *)((char *)a3 + 28);
  long long v12 = *(_OWORD *)((char *)a3 + 12);
  double v16 = 0;
  CFStringRef v8 = (char *)operator new(0x38uLL);
  uint64_t v9 = *a3;
  *(void *)CFStringRef v8 = &unk_1F14791E8;
  *((void *)v8 + 1) = v9;
  *((_DWORD *)v8 + 4) = *((_DWORD *)a3 + 2);
  *(_OWORD *)(v8 + 20) = v12;
  *(_OWORD *)(v8 + 36) = v11;
  double v16 = v8;
  memset(v13, 0, sizeof(v13));
  io_object_t v14 = 0;
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)v15);
  io_object_t v14 = AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v13);
  if (v14) {
    v14(0, (uint64_t)v13, 0, 0);
  }
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::~__value_func[abi:ne180100](v15);
  return AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(v6);
}

void sub_1BABD5578(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

BOOL applesauce::CF::details::has_key<__CFString const*>(const __CFDictionary *a1, const void *a2)
{
  return a2 && CFDictionaryContainsKey(a1, a2) != 0;
}

void *std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26Device10build_coreEvE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::operator()(uint64_t a1, const __CFDictionary **a2)
{
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    goto LABEL_27;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  LODWORD(valuePtr) = 0;
  cf[0] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf[0]) {
    goto LABEL_26;
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(v30, *a2, @"kind", cf);
  uint64_t v4 = v30[0];
  if (!v30[0])
  {
    unsigned int v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v13, "Could not construct");
    __cxa_throw(v13, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v5 = applesauce::CF::convert_to<unsigned long long,0>((const __CFNumber *)v30[0]);
  CFRelease(v4);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    goto LABEL_27;
  }
  LODWORD(valuePtr) = 0;
  cf[0] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf[0])
  {
LABEL_26:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_27:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(v30, *a2, @"UsageCaseSampleRate", cf);
  uint64_t v6 = v30[0];
  if (!v30[0])
  {
    io_object_t v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
    __cxa_throw(v14, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double v7 = applesauce::CF::convert_to<double,0>((const __CFNumber *)v30[0]);
  CFRelease(v6);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v5 - 2 >= 4) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = qword_1BB0455B8[v5 - 2];
  }
  AMCP::IOAudio2::Device::get_device_connection((AMCP::IOAudio2::Device *)&connection, **(_DWORD **)(v3 + 360));
  io_connect_t v9 = connection;
  if (!connection)
  {
    int64_t v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v15, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(v15, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  input[0] = v8;
  input[1] = vcvtd_n_u64_f64(v7 - (double)(unint64_t)floor(v7), 0x20uLL) + (vcvtmd_u64_f64(v7) << 32);
  memset(v30, 0, sizeof(v30));
  uint32_t outputCnt = 0;
  memset(cf, 0, sizeof(cf));
  size_t v27 = 0;
  uint64_t v10 = IOConnectCallMethod(connection, 0xCu, input, 2u, 0, 0, 0, &outputCnt, 0, &v27);
  if (v10)
  {
    double v16 = __cxa_allocate_exception(0x20uLL);
    uint64_t v17 = std::system_category();
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v24.__r_.__value_.__r.__words[1] = xmmword_1BAFF94D0;
    strcpy(v24.__r_.__value_.__l.__data_, "Error on IOConnectCallScalarMethod for selector ");
    std::to_string(&v23, 0xCu);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v18 = &v23;
    }
    else {
      unint64_t v18 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v23.__r_.__value_.__l.__size_;
    }
    uint64_t v20 = std::string::append(&v24, (const std::string::value_type *)v18, size);
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    std::string::size_type v26 = v20->__r_.__value_.__r.__words[2];
    long long valuePtr = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1C1859260](v16, v10, v17, &valuePtr);
    __cxa_throw(v16, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  std::vector<unsigned long long>::resize(v30, outputCnt);
  if (v27)
  {
    std::vector<unsigned char>::__append((unint64_t *)cf, v27);
    if (cf[0]) {
      operator delete((void *)cf[0]);
    }
  }
  if (v30[0]) {
    operator delete(v30[0]);
  }
  return IOConnectRelease(v9);
}

void sub_1BABD5A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,CFTypeRef cf)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v35 & 1) == 0)
    {
LABEL_10:
      long long v38 = *(void **)(v36 - 120);
      if (v38) {
        operator delete(v38);
      }
      IOConnectRelease(v33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v34);
  goto LABEL_10;
}

uint64_t AMCP::IOAudio2::Device::get_device_connection(AMCP::IOAudio2::Device *this, io_connect_t a2)
{
  *(_DWORD *)this = a2;
  uint64_t result = IOConnectAddRef(a2);
  if (result)
  {
    uint64_t v3 = result;
    exception = __cxa_allocate_exception(0x20uLL);
    unint64_t v5 = std::system_category();
    MEMORY[0x1C1859250](exception, v3, v5, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  return result;
}

void sub_1BABD5BF8(void *a1)
{
  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

void std::vector<unsigned long long>::resize(char **a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    unint64_t v19 = &v3[8 * a2];
    goto LABEL_15;
  }
  unint64_t v6 = a2 - v5;
  double v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    unint64_t v19 = &v4[8 * v6];
LABEL_15:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  long long v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10);
  long long v12 = *a1;
  unsigned int v13 = a1[1];
  io_object_t v14 = &v11[8 * v5];
  double v16 = &v11[8 * v15];
  bzero(v14, 8 * v6);
  uint64_t v17 = &v14[8 * v6];
  while (v13 != v12)
  {
    uint64_t v18 = *((void *)v13 - 1);
    v13 -= 8;
    *((void *)v14 - 1) = v18;
    v14 -= 8;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
  {
    operator delete(v12);
  }
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1463B60;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1463B60;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::~__func()
{
}

void *std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26Device10build_coreEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::operator()(CFDictionaryRef *a1@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  CFStringRef v2 = CFStringCreateWithBytes(0, (const UInt8 *)"kind", 4, 0x8000100u, 0);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v3 = v2;
  int valuePtr = 0;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v4)
  {
    unint64_t v6 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v6, "Could not construct");
    __cxa_throw(v6, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v3);
  CFTypeRef v9 = v3;
  CFRetain(v4);
  CFTypeRef cf = v4;
  v7[0] = &v9;
  v7[1] = 1;
  *a1 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v7);
  if (cf) {
    CFRelease(cf);
  }
  if (v9) {
    CFRelease(v9);
  }
  CFRelease(v4);
  CFRelease(v3);
}

void sub_1BABD5F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef a12, CFTypeRef cf)
{
  CFRelease(v13);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1463AE0;
}

void *std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F1463AE0;
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::~__func()
{
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities47make_owned_object_with_properties_list_propertyIjJNS_7AddressEjEEENSt3__110shared_ptrINS0_9OperationEEERNS0_6BrokerEjRKS3_SB_RKT_DpRKT0_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  void v8[4] = *MEMORY[0x1E4F143B8];
  CFNumberRef v4 = *(std::__shared_mutex_base **)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 16);
  unint64_t v6 = operator new(0x28uLL);
  *unint64_t v6 = &unk_1F1479258;
  v6[1] = a1 + 20;
  _OWORD v6[2] = a1 + 32;
  v6[3] = a1 + 36;
  void v6[4] = a1 + 48;
  void v8[3] = v6;
  AMCP::Core::Broker::fetch_owned_object_ids_if (a2, v4, v5, (uint64_t)v8);
  return std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](v8);
}

void sub_1BABD6184(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKjENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSL_E_NSE_ISP_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE11target_typeEv()
{
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKjENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSL_E_NSE_ISP_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS_7AddressERKjENSt3__19enable_ifILb1EvEEEENS8_6vectorIjNS8_9allocatorIjEEEERNS0_6BrokerEjS5_RKT_DpOT0_EUlSJ_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKjENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSL_E_NSE_ISP_EEFbRKNS_10shared_ptrINS3_4CoreEEEEEclESV_(void *a1, AMCP::Core::Core **a2)
{
  CFStringRef v2 = *a2;
  CFStringRef v3 = (const AMCP::Address *)a1[1];
  CFNumberRef v4 = (_DWORD *)a1[2];
  int v5 = (const AMCP::Address *)a1[3];
  unint64_t v6 = (_DWORD *)a1[4];
  unint64_t v7 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(*a2, v3);
  if (!HIDWORD(v7)) {
    return 0;
  }
  if (*(_DWORD *)v3 == 1668047219 || *(_DWORD *)v3 == 1650682995)
  {
    if ((AMCP::is_base_of((AMCP *)*v4, v7) & 1) == 0) {
      return 0;
    }
  }
  else if (*v4 != v7)
  {
    return 0;
  }

  return _ZN4AMCP4Core4Core26has_properties_with_valuesIjJENSt3__19enable_ifILb1EvEEEEbRKNS_7AddressERKT_DpOT0_(v2, v5, v6);
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKjENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSL_E_NSE_ISP_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE7__cloneEPNS0_6__baseISW_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1479258;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(&a9, 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKjENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSL_E_NSE_ISP_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE7__cloneEv(uint64_t a1)
{
  CFStringRef v2 = (char *)operator new(0x28uLL);
  *(void *)CFStringRef v2 = &unk_1F1479258;
  *(_OWORD *)(v2 + _Block_object_dispose(&a9, 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKjENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSL_E_NSE_ISP_EEFbRKNS_10shared_ptrINS3_4CoreEEEEED0Ev()
{
}

__n128 std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14791E8;
  uint64_t v2 = *(void *)(a1 + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  *(void *)(a2 + _Block_object_dispose(&a9, 8) = v2;
  *(_OWORD *)(a2 + 20) = *(_OWORD *)(a1 + 20);
  __n128 result = *(__n128 *)(a1 + 36);
  *(__n128 *)(a2 + 36) = result;
  return result;
}

__n128 std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v2 = &unk_1F14791E8;
  *((void *)v2 + 1) = v3;
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 20) = *(_OWORD *)(a1 + 20);
  __n128 result = *(__n128 *)(a1 + 36);
  *(__n128 *)(v2 + 36) = result;
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::~__func()
{
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(unsigned char *a1, CFDictionaryRef theDict, const void *a3)
{
  CFNumberRef v4 = applesauce::CF::details::at_key<__CFString const*>(theDict, a3);
  if (!v4) {
    goto LABEL_5;
  }
  int v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFStringGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    char v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(void *)a1 = v5;
  char v7 = 1;
LABEL_6:
  a1[8] = v7;
}

void AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(uint64_t *a1, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v11, a3, a4, a4 - (void)a3);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, *(_DWORD *)(a2 + 8), *(double *)a2);
  uint64_t v6 = *a1;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>();
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  io_object_t v14 = 0;
  uint64_t v8 = v11;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v14, v11, v12, v12 - (void)v11);
  uint64_t v20 = 0;
  CFTypeRef v9 = operator new(0x20uLL);
  *CFTypeRef v9 = &unk_1F1478DC8;
  uint64_t v9[2] = 0;
  v9[3] = 0;
  v9[1] = 0;
  unint64_t v10 = v14;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(v9 + 1, v14, v15, v15 - (void)v14);
  uint64_t v20 = v9;
  memset(v17, 0, sizeof(v17));
  uint64_t v18 = 0;
  std::__function::__value_func<CA::ChannelLayout ()(void)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v19);
  uint64_t v18 = AMCP::Implementation::In_Place_Storage<std::function<CA::ChannelLayout ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v17);
  if (v18) {
    v18(0, (uint64_t)v17, 0, 0);
  }
  std::__function::__value_func<CA::ChannelLayout ()(void)>::~__value_func[abi:ne180100](v19);
  if (v10) {
    operator delete(v10);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(v6);
  if (v8) {
    operator delete(v8);
  }
}

void sub_1BABD6604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

BOOL AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(CFDictionaryRef *a1, const void **a2)
{
  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_16;
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::BooleanRef,__CFString const*>(&v9, *a1, *a2);
  if (!v10)
  {
    if (*a1)
    {
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v7, *a1, *a2);
      if (v8)
      {
        if (!v7)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_16:
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        BOOL v4 = applesauce::CF::convert_to<BOOL,0>(v7);
      }
      else
      {
        BOOL v4 = 0;
      }
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v7);
      goto LABEL_11;
    }
LABEL_13:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_16;
  }
  if (!v9) {
    goto LABEL_13;
  }
  BOOL v4 = applesauce::CF::convert_to<BOOL,0>(v9);
LABEL_11:
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v9);
  return v4;
}

{
  BOOL v4;
  std::runtime_error *exception;
  CFNumberRef v7;
  char v8;
  CFBooleanRef v9;
  char v10;

  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_16;
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::BooleanRef,__CFString const*>(&v9, *a1, *a2);
  if (!v10)
  {
    if (*a1)
    {
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v7, *a1, *a2);
      if (v8)
      {
        if (!v7)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_16:
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        BOOL v4 = applesauce::CF::convert_to<BOOL,0>(v7);
      }
      else
      {
        BOOL v4 = 0;
      }
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v7);
      goto LABEL_11;
    }
LABEL_13:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_16;
  }
  if (!v9) {
    goto LABEL_13;
  }
  BOOL v4 = applesauce::CF::convert_to<BOOL,0>(v9);
LABEL_11:
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v9);
  return v4;
}

{
  BOOL v4;
  std::runtime_error *exception;
  CFNumberRef v7;
  char v8;
  CFBooleanRef v9;
  char v10;

  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_16;
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::BooleanRef,__CFString const*>(&v9, *a1, *a2);
  if (!v10)
  {
    if (*a1)
    {
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v7, *a1, *a2);
      if (v8)
      {
        if (!v7)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_16:
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        BOOL v4 = applesauce::CF::convert_to<BOOL,0>(v7);
      }
      else
      {
        BOOL v4 = 0;
      }
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v7);
      goto LABEL_11;
    }
LABEL_13:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_16;
  }
  if (!v9) {
    goto LABEL_13;
  }
  BOOL v4 = applesauce::CF::convert_to<BOOL,0>(v9);
LABEL_11:
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v9);
  return v4;
}

void sub_1BABD679C(void *a1)
{
  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

applesauce::CF::NumberRef *applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>(applesauce::CF::NumberRef *a1, CFDictionaryRef theDict, const void *a3)
{
  BOOL v4 = applesauce::CF::details::at_key<__CFString const*>(theDict, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v5 = v4;
  CFRetain(v4);

  return applesauce::CF::NumberRef::NumberRef(a1, v5);
}

void sub_1BABD6844(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v4 = result;
    if (a4 >= 0x492492492492493) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    __n128 result = std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(a4);
    CFNumberRef v7 = result;
    *BOOL v4 = result;
    v4[1] = result;
    v4[2] = &result[7 * v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      __n128 result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1BABD68EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>()
{
  uint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[128];
}

uint64_t std::__function::__value_func<std::shared_ptr<AMCP::Core::Engine> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::shared_ptr<AMCP::Core::Engine> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      uint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26Device18update_core_commonERNS_4Core13Operation_SetEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::operator()(uint64_t a1)
{
  unsigned char v10[40] = *(dispatch_queue_t *)MEMORY[0x1E4F143B8];
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v10, *(dispatch_object_t *)(*(void *)(*(void *)(a1 + 8) + 32) + 672));
  int v2 = operator new(0x330uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_1F1468240;
  io_connect_t connect = *(_DWORD *)(a1 + 24);
  uint64_t v3 = IOConnectAddRef(connect);
  if (!v3)
  {
    uint64_t v4 = *(const void **)(a1 + 32);
    if (v4) {
      CFRetain(*(CFTypeRef *)(a1 + 32));
    }
    v8[0] = v4;
    LOWORD(v7) = *(_WORD *)(a1 + 128);
    AMCP::IOAudio2::Engine::Engine((uint64_t)(v2 + 3), *(double *)(a1 + 40), (uint64_t)&connect, v8, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), *(unsigned char *)(a1 + 56), *(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 68), *(_DWORD *)(a1 + 72), a1 + 80, a1 + 104, v7, v10);
  }
  exception = __cxa_allocate_exception(0x20uLL);
  uint64_t v6 = std::system_category();
  MEMORY[0x1C1859250](exception, v3, v6, "Error on IOConnectAddRef");
  __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
}

void sub_1BABD6E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, int a17, io_connect_t connect, char a19)
{
  __cxa_free_exception(v20);
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v22);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a19);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<AMCP::IOAudio2::Engine>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::IOAudio2::Engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1468240;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::IOAudio2::Engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1468240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  int v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(void *)(a1 + 80) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 24);
  if (v4) {
    CFRelease(v4);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 16));
  int v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1463960;
  return std::__compressed_pair_elem<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  io_connect_t v5 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  uint64_t v6 = IOConnectAddRef(v5);
  if (v6)
  {
    uint64_t v12 = v6;
    exception = __cxa_allocate_exception(0x20uLL);
    io_object_t v14 = std::system_category();
    MEMORY[0x1C1859250](exception, v12, v14, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7) {
    CFRetain(*(CFTypeRef *)(a2 + 24));
  }
  *(void *)(a1 + 24) = v7;
  long long v8 = *(_OWORD *)(a2 + 32);
  long long v9 = *(_OWORD *)(a2 + 48);
  int v10 = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = v9;
  *(_OWORD *)(a1 + 32) = v8;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = 0;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>((void *)(a1 + 72), *(const void **)(a2 + 72), *(void *)(a2 + 80), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>((void *)(a1 + 96), *(const void **)(a2 + 96), *(void *)(a2 + 104), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 3));
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  return a1;
}

void sub_1BABD7134(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  int v2 = operator new(0x88uLL);
  void *v2 = &unk_1F1463960;
  std::__compressed_pair_elem<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BABD71F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1463960;
  int v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4) {
    CFRelease(v4);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 24));
  io_connect_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1463960;
  int v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4) {
    CFRelease(v4);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 24));
  io_connect_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return a1;
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::BooleanRef,__CFString const*>(unsigned char *a1, CFDictionaryRef theDict, const void *a3)
{
  uint64_t v4 = applesauce::CF::details::at_key<__CFString const*>(theDict, a3);
  if (!v4) {
    goto LABEL_5;
  }
  io_connect_t v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFBooleanGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    char v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(void *)a1 = v5;
  char v7 = 1;
LABEL_6:
  a1[8] = v7;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyIN2CA13ChannelLayoutEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::operator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a2, *(const void **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 16) - *(void *)(a1 + 8));
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::destroy_deallocate(void *__p)
{
  int v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::destroy(uint64_t a1)
{
  int v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1478DC8;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  return std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a2 + 1, *(const void **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 16) - *(void *)(a1 + 8));
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::__clone(uint64_t a1)
{
  int v2 = operator new(0x20uLL);
  void *v2 = &unk_1F1478DC8;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(v2 + 1, *(const void **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 16) - *(void *)(a1 + 8));
  return v2;
}

void sub_1BABD7510(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1478DC8;
  int v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>(AMCP::Address const&,CA::ChannelLayout const&)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1478DC8;
  int v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26Device18update_core_commonERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::operator()(uint64_t a1, double *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t inputStruct = vcvtd_n_s64_f64(*a2 - (double)(uint64_t)floor(*a2), 0x20uLL) + (vcvtmd_s64_f64(*a2) << 32);
  AMCP::IOAudio2::Device::get_device_connection((AMCP::IOAudio2::Device *)&v6, **(_DWORD **)(v2 + 360));
  io_connect_t v3 = v6;
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone>(v6, 4u, &inputStruct, 8uLL);
  return IOConnectRelease(v3);
}

void sub_1BABD76F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  IOConnectRelease(v1);
  _Unwind_Resume(a1);
}

void applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone>(mach_port_t a1, uint32_t a2, void *inputStruct, size_t inputStructCnt)
{
  memset(v19, 0, sizeof(v19));
  uint32_t outputCnt = 0;
  memset(__p, 0, sizeof(__p));
  size_t v16 = 0;
  uint64_t v5 = IOConnectCallMethod(a1, a2, 0, 0, inputStruct, inputStructCnt, 0, &outputCnt, 0, &v16);
  if (v5)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    char v7 = std::system_category();
    v13.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v13.__r_.__value_.__r.__words[1] = xmmword_1BAFF94D0;
    strcpy(v13.__r_.__value_.__l.__data_, "Error on IOConnectCallScalarMethod for selector ");
    std::to_string(&v12, a2);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v8 = &v12;
    }
    else {
      long long v8 = (std::string *)v12.__r_.__value_.__r.__words[0];
    }
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v12.__r_.__value_.__l.__size_;
    }
    int v10 = std::string::append(&v13, (const std::string::value_type *)v8, size);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v10->__r_.__value_.__r.__words[2];
    long long v14 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1C1859260](exception, v5, v7, &v14);
    __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  std::vector<unsigned long long>::resize(v19, outputCnt);
  if (v16)
  {
    std::vector<unsigned char>::__append((unint64_t *)__p, v16);
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
  if (v19[0]) {
    operator delete(v19[0]);
  }
}

void sub_1BABD78A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v31 & 1) == 0)
    {
LABEL_10:
      int v35 = *(void **)(v33 - 72);
      if (v35) {
        operator delete(v35);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v32);
  goto LABEL_10;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14638E0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F14638E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::~__func()
{
}

void *std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26Device18update_core_commonERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::operator()(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1463860;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1463860;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26Device10build_coreEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_mutex_base **)(*(void *)(**(void **)(a1 + 8) + 32) + 16);
  int v4 = *(_DWORD *)(a1 + 16);
  std::string v12 = (double **)&unk_1F1463A50;
  LODWORD(v13) = v4;
  long long v14 = (void **)&v12;
  AMCP::Core::Broker::fetch_first_core_if (&v9, v3, (uint64_t)&v12);
  std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](&v12);
  AMCP::Core::Core::get_simple_required_property<1718449187u>(&v12, v9);
  *(void *)a2 = 0;
  *(void *)(a2 + _Block_object_dispose(&a9, 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v5 = v12;
  int v6 = v13;
  while (v5 != v6)
  {
    char v7 = *v5;
    long long v8 = v5[1];
    while (v7 != v8)
    {
      CA::ValueRangeList::AddRange((double **)a2, v7);
      v7 += 2;
    }
    v5 += 8;
  }
  long long v11 = &v12;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1BABD7BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, void **a11, char a12)
{
  long long v14 = *(void **)v12;
  if (*(void *)v12)
  {
    *(void *)(v12 + _Block_object_dispose(&a9, 8) = v14;
    operator delete(v14);
  }
  a11 = (void **)&a12;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&a11);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void AMCP::Core::Core::get_simple_required_property<1718449187u>(void *a1, AMCP::Core::Core *this)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = 0x676C6F62666D7423;
  int v14 = 0;
  has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::has_property(this, (const AMCP::Address *)&v13);
  if (!has_property) {
    goto LABEL_14;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v20, (int8x8_t *)this, (unsigned int *)&v13);
  uint64_t v5 = v20;
  if (v20)
  {
    unint64_t v6 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v6))
    {
      AMCP::Core::Operation::call_function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>((uint64_t)buf, v5);
      uint64_t v12 = *(void **)&buf[8];
      long long v15 = *(_OWORD *)buf;
      uint64_t v16 = *(void *)&buf[16];
      memset(buf, 0, sizeof(buf));
      char v17 = 1;
      __p[0] = buf;
      std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_5:
      char v7 = 0;
      uint64_t v5 = v12;
      goto LABEL_10;
    }
    unint64_t v8 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v8))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)buf, v5);
      AMCP::Thing::convert_to<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(__p, (uint64_t)buf);
      uint64_t v12 = __p[1];
      long long v15 = *(_OWORD *)__p;
      uint64_t v16 = v19;
      __p[1] = 0;
      uint64_t v19 = 0;
      __p[0] = 0;
      char v17 = 1;
      uint64_t v22 = __p;
      std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v22);
      if (*(void *)&v25[6]) {
        (*(void (**)(void, uint8_t *, void, void))&v25[6])(0, buf, 0, 0);
      }
      goto LABEL_5;
    }
  }
  char v7 = 1;
LABEL_10:
  has_property = (AMCP::Log::Scope_Registry *)v21;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v7)
  {
LABEL_14:
    LOBYTE(v15) = 0;
    char v17 = 0;
    AMCP::Log::Scope_Registry::get(has_property);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v9 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      HIBYTE(v19) = 4;
      strcpy((char *)__p, "fmt#");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 391;
      __int16 v24 = 2080;
      *(void *)unint64_t v25 = "optional_value.operator BOOL() == true";
      *(_WORD *)&v25[8] = 2080;
      *(void *)&v25[10] = __p;
      __int16 v26 = 1024;
      int v27 = 1735159650;
      __int16 v28 = 1024;
      int v29 = 0;
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (SHIBYTE(v19) < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)a1, v15, (uint64_t)v5, (uint64_t)((uint64_t)v5 - v15) >> 6);
  *(void *)buf = &v15;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1BABD7F00(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::Core::Operation::call_function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>();
  int v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)int v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 154;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    long long v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::vector<std::tupl"
          "e<CA::ValueRangeList, CA::StreamDescription>>, Argument_Types = <>]";
    uint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    uint64_t v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v5 = v4;
  if (!*((void *)v4 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>(),
        (int v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v8 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      long long v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)int v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 161;
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    long long v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::vector<std::tupl"
          "e<CA::ValueRangeList, CA::StreamDescription>>, Argument_Types = <>]";
    uint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    uint64_t v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = *((void *)v4 + 3);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
}

void sub_1BABD83AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>()
{
  uint64_t v0 = &unk_1E9F79000;
  {
    uint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      uint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[348];
}

void *_ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio26Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE11target_typeEv()
{
  return &_ZTIZZN4AMCP8IOAudio26Device10build_coreEvENK3__0clEvEUlRKT_E_;
}

uint64_t _ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio26Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN4AMCP8IOAudio26Device10build_coreEvENK3$_0clEvEUlRKT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZZN4AMCP8IOAudio26Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEEclESH_(uint64_t a1, AMCP::Core::Core **a2)
{
  int simple_required = AMCP::Core::Core::get_simple_required_property<1870098034u>(*a2);
  int v5 = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  return *(_DWORD *)(a1 + 8) == simple_required && v5 == 1634956402;
}

uint64_t _ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio26Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE7__cloneEPNS0_6__baseISI_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F1463A50;
  *(_DWORD *)(a2 + _Block_object_dispose(&a9, 8) = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *_ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio26Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F1463A50;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void _ZNSt3__110__function6__funcIZZN4AMCP8IOAudio26Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEED0Ev()
{
}

__n128 std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14639E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(&a9, 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x18uLL);
  *(void *)int v2 = &unk_1F14639E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(&a9, 8) = result;
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio2::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::~__func()
{
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(std::string *a1, std::string *a2, char *__s)
{
  size_t v6 = strlen(__s);
  char v7 = (__n128 *)std::string::append(a2, __s, v6);
  __n128 result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void *std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26DeviceC1ERNS0_6DriverERKN10applesauce5iokit16io_object_holderENS4_2CF13DictionaryRefEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  v78[2] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  int v2 = (AMCP::Utility::Kernel_Error_Category *)AMCP::Utility::Mach_Port::receive_message(*(_DWORD *)(v1 + 368), 0x88u, &msg, 0);
  int v3 = (int)v2;
  AMCP::Utility::Kernel_Error_Category::get(v2);
  if (!v3)
  {
    unint64_t v5 = v72;
    if (v72)
    {
      uint64_t v6 = 0;
      for (uint64_t i = &v73; *((_DWORD *)i + 1) != 1668247142; i += 4)
      {
LABEL_64:
        if (++v6 >= v5) {
          return;
        }
      }
      AMCP::Log::Scope_Registry::get(v4);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v60, "com.apple.coreaudio", "AMCP");
      int v9 = *((_DWORD *)v60 + 4);
      switch(v9)
      {
        case 3:
          AMCP::Log::Scope_Registry::get(v8);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          int v24 = **(NSObject ***)buf;
          if (*(void *)v75) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v75);
          }
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            uint64_t v25 = pthread_self();
            mach_port_t v26 = pthread_mach_thread_np(v25);
            CFStringRef v27 = *(const __CFString **)(v1 + 8);
            if (!v27) {
              goto LABEL_66;
            }
            mach_port_t v28 = v26;
            applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v27);
            int v29 = __p;
            if (v69 < 0) {
              int v29 = (void **)__p[0];
            }
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v28;
            *(_WORD *)CFArrayRef v75 = 2080;
            *(void *)&v75[2] = "IOAudio2_Device.cpp";
            __int16 v76 = 1024;
            int v77 = 557;
            LOWORD(v78[0]) = 2080;
            *(void *)((char *)v78 + 2) = v29;
            uint64_t v16 = v24;
            os_log_type_t v17 = OS_LOG_TYPE_INFO;
            goto LABEL_29;
          }
          break;
        case 2:
          AMCP::Log::Scope_Registry::get(v8);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v18 = **(NSObject ***)buf;
          if (*(void *)v75) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v75);
          }
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            std::string v19 = pthread_self();
            mach_port_t v20 = pthread_mach_thread_np(v19);
            CFStringRef v21 = *(const __CFString **)(v1 + 8);
            if (!v21) {
              goto LABEL_66;
            }
            mach_port_t v22 = v20;
            applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v21);
            uint64_t v23 = __p;
            if (v69 < 0) {
              uint64_t v23 = (void **)__p[0];
            }
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v22;
            *(_WORD *)CFArrayRef v75 = 2080;
            *(void *)&v75[2] = "IOAudio2_Device.cpp";
            __int16 v76 = 1024;
            int v77 = 557;
            LOWORD(v78[0]) = 2080;
            *(void *)((char *)v78 + 2) = v23;
            _os_log_debug_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Begin configuration change for device '%s'", buf, 0x22u);
            goto LABEL_30;
          }
          break;
        case 1:
          AMCP::Log::Scope_Registry::get(v8);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          mach_port_t v10 = **(NSObject ***)buf;
          if (*(void *)v75) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v75);
          }
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            mach_port_t v11 = pthread_self();
            mach_port_t v12 = pthread_mach_thread_np(v11);
            CFStringRef v13 = *(const __CFString **)(v1 + 8);
            if (!v13) {
              goto LABEL_66;
            }
            mach_port_t v14 = v12;
            applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v13);
            uint64_t v15 = __p;
            if (v69 < 0) {
              uint64_t v15 = (void **)__p[0];
            }
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v14;
            *(_WORD *)CFArrayRef v75 = 2080;
            *(void *)&v75[2] = "IOAudio2_Device.cpp";
            __int16 v76 = 1024;
            int v77 = 557;
            LOWORD(v78[0]) = 2080;
            *(void *)((char *)v78 + 2) = v15;
            uint64_t v16 = v10;
            os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
LABEL_29:
            _os_log_impl(&dword_1BAA78000, v16, v17, "%6u %32s:%-5d Begin configuration change for device '%s'", buf, 0x22u);
LABEL_30:
            if (v69 < 0) {
              operator delete(__p[0]);
            }
          }
          break;
      }
      if (v61) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v61);
      }
      kdebug_trace();
      __int16 v30 = operator new(0x20uLL);
      v30[1] = 0;
      v30[2] = 0;
      *__int16 v30 = &unk_1F1488C30;
      *((unsigned char *)v30 + 24) = 0;
      __p[0] = v30 + 3;
      __p[1] = v30;
      int v68 = 0;
      int v70 = 0;
      uint64_t v31 = *(void *)(*(void *)(*(void *)v1 + 32) + 32);
      unsigned int v32 = *(_DWORD *)(*(void *)v1 + 48);
      unsigned int v33 = *(_DWORD *)(v1 + 16);
      AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)v65, (uint64_t *)__p);
      *(void *)&long long v66 = v1;
      *((void *)&v66 + 1) = i;
      v78[0] = 0;
      int v34 = (char *)operator new(0x38uLL);
      *(void *)int v34 = &unk_1F1463BE0;
      AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v34 + 8), v65);
      *(_OWORD *)(v34 + 40) = v66;
      v78[0] = v34;
      AMCP::Core::Conductor::enqueue_config_change(v31, v32, v33, 9, (uint64_t)buf);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](buf);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v65);
      uint64_t v35 = (AMCP::Log::Scope_Registry *)kdebug_trace();
      AMCP::Log::Scope_Registry::get(v35);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v63, "com.apple.coreaudio", "AMCP");
      int v37 = *(_DWORD *)(v63 + 16);
      switch(v37)
      {
        case 3:
          AMCP::Log::Scope_Registry::get(v36);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          char v52 = **(NSObject ***)buf;
          if (*(void *)v75) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v75);
          }
          if (!os_log_type_enabled(v52, OS_LOG_TYPE_INFO)) {
            goto LABEL_61;
          }
          uint64_t v53 = pthread_self();
          mach_port_t v54 = pthread_mach_thread_np(v53);
          CFStringRef v55 = *(const __CFString **)(v1 + 8);
          if (!v55)
          {
LABEL_66:
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            unint64_t v59 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], v59);
          }
          mach_port_t v56 = v54;
          applesauce::CF::convert_to<std::string,0>((uint64_t)&v60, v55);
          unint64_t v57 = &v60;
          if (v62 < 0) {
            unint64_t v57 = v60;
          }
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v56;
          *(_WORD *)CFArrayRef v75 = 2080;
          *(void *)&v75[2] = "IOAudio2_Device.cpp";
          __int16 v76 = 1024;
          int v77 = 662;
          LOWORD(v78[0]) = 2080;
          *(void *)((char *)v78 + 2) = v57;
          uint64_t v44 = v52;
          os_log_type_t v45 = OS_LOG_TYPE_INFO;
          break;
        case 2:
          AMCP::Log::Scope_Registry::get(v36);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          CFArrayRef v46 = **(NSObject ***)buf;
          if (*(void *)v75) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v75);
          }
          if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_61;
          }
          uint64_t v47 = pthread_self();
          mach_port_t v48 = pthread_mach_thread_np(v47);
          CFStringRef v49 = *(const __CFString **)(v1 + 8);
          if (!v49) {
            goto LABEL_66;
          }
          mach_port_t v50 = v48;
          applesauce::CF::convert_to<std::string,0>((uint64_t)&v60, v49);
          uint64_t v51 = &v60;
          if (v62 < 0) {
            uint64_t v51 = v60;
          }
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v50;
          *(_WORD *)CFArrayRef v75 = 2080;
          *(void *)&v75[2] = "IOAudio2_Device.cpp";
          __int16 v76 = 1024;
          int v77 = 662;
          LOWORD(v78[0]) = 2080;
          *(void *)((char *)v78 + 2) = v51;
          _os_log_debug_impl(&dword_1BAA78000, v46, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d End configuration change for device '%s'", buf, 0x22u);
          goto LABEL_59;
        case 1:
          AMCP::Log::Scope_Registry::get(v36);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          long long v38 = **(NSObject ***)buf;
          if (*(void *)v75) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v75);
          }
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_61;
          }
          long long v39 = pthread_self();
          mach_port_t v40 = pthread_mach_thread_np(v39);
          CFStringRef v41 = *(const __CFString **)(v1 + 8);
          if (!v41) {
            goto LABEL_66;
          }
          mach_port_t v42 = v40;
          applesauce::CF::convert_to<std::string,0>((uint64_t)&v60, v41);
          uint64_t v43 = &v60;
          if (v62 < 0) {
            uint64_t v43 = v60;
          }
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v42;
          *(_WORD *)CFArrayRef v75 = 2080;
          *(void *)&v75[2] = "IOAudio2_Device.cpp";
          __int16 v76 = 1024;
          int v77 = 662;
          LOWORD(v78[0]) = 2080;
          *(void *)((char *)v78 + 2) = v43;
          uint64_t v44 = v38;
          os_log_type_t v45 = OS_LOG_TYPE_DEFAULT;
          break;
        default:
          goto LABEL_61;
      }
      _os_log_impl(&dword_1BAA78000, v44, v45, "%6u %32s:%-5d End configuration change for device '%s'", buf, 0x22u);
LABEL_59:
      if (v62 < 0) {
        operator delete(v60);
      }
LABEL_61:
      if (v64) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v64);
      }
      int v4 = (AMCP::Log::Scope_Registry *)std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)__p);
      unint64_t v5 = v72;
      goto LABEL_64;
    }
  }
}

void sub_1BABD8F84(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0,std::allocator<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0,std::allocator<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26Device34handle_driver_configuration_changeERK20IOAudio2NotificationE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0,std::allocator<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  properties[5] = *(CFMutableDictionaryRef *)MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  BOOL is_valid = AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 8));
  if (!is_valid)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)properties, "com.apple.coreaudio", "AMCP");
    unint64_t v80 = *(NSObject **)properties[0];
    if (properties[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)properties[1]);
    }
    if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
    {
      CFArrayRef v81 = pthread_self();
      mach_port_t v82 = pthread_mach_thread_np(v81);
      LODWORD(properties[0]) = 67109890;
      HIDWORD(properties[0]) = v82;
      LOWORD(properties[1]) = 2080;
      *(CFMutableDictionaryRef *)((char *)&properties[1] + 2) = (CFMutableDictionaryRef)"IOAudio2_Device.cpp";
      WORD1(properties[2]) = 1024;
      HIDWORD(properties[2]) = 564;
      LOWORD(properties[3]) = 2080;
      *(CFMutableDictionaryRef *)((char *)&properties[3] + 2) = (CFMutableDictionaryRef)"expiration_check.is_valid()";
      _os_log_error_impl(&dword_1BAA78000, v80, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", (uint8_t *)properties, 0x22u);
    }
    abort();
  }
  AMCP::IOAudio2::Device::get_device_connection((AMCP::IOAudio2::Device *)properties, **(_DWORD **)(v2 + 360));
  io_connect_t v4 = (io_connect_t)properties[0];
  if (!LODWORD(properties[0]))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone>((mach_port_t)properties[0], 3u, *(void **)(a1 + 48), 0x20uLL);
  IOConnectRelease(v4);
  io_registry_entry_t v5 = *(_DWORD *)(v2 + 344);
  if (!v5)
  {
    char v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v87, "cannot create io_object_proxy from null io_object");
    __cxa_throw(v87, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  properties[0] = 0;
  uint64_t CFProperties = IORegistryEntryCreateCFProperties(v5, properties, 0, 0);
  if (CFProperties)
  {
    unsigned int v88 = __cxa_allocate_exception(0x20uLL);
    long long v89 = std::system_category();
    MEMORY[0x1C1859250](v88, CFProperties, v89, "Error on get_properties");
    __cxa_throw(v88, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)v102, properties[0]);
  char v7 = *(const void **)(v2 + 448);
  CFDictionaryRef v8 = (const __CFDictionary *)v102[0];
  *(void *)(v2 + 44_Block_object_dispose(&a9, 8) = v102[0];
  v102[0] = (uint64_t)v7;
  if (v7)
  {
    CFRelease(v7);
    CFDictionaryRef v8 = *(const __CFDictionary **)(v2 + 448);
  }
  if (!v8)
  {
    uint64_t v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v90);
    __cxa_throw(v90, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  properties[0] = 0;
  applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&v103, v8, @"input streams", properties);
  if (properties[0]) {
    CFRelease(properties[0]);
  }
  AMCP::IOAudio2::Stream::create_from_dictionary_list(v102, v2, 1, (CFArrayRef *)&v103);
  CFDictionaryRef v9 = *(const __CFDictionary **)(v2 + 448);
  if (!v9)
  {
    uint64_t v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v91, "Could not construct");
    __cxa_throw(v91, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  properties[0] = 0;
  applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&v101, v9, @"output streams", properties);
  if (properties[0]) {
    CFRelease(properties[0]);
  }
  AMCP::IOAudio2::Stream::create_from_dictionary_list(v100, v2, 0, (CFArrayRef *)&v101);
  _ZNSt3__16invokeB8ne180100IRZZN4AMCP8IOAudio26Device34handle_driver_configuration_changeERK20IOAudio2NotificationENK3__0clEvEUlRT_E_JRNS_5tupleIJRNS_6vectorINS_10shared_ptrINS2_6StreamEEENS_9allocatorISG_EEEESK_EEEEEENS_13invoke_resultIS8_JDpT0_EE4typeEOS8_DpOSO_(v2, (uint64_t *)(v2 + 456), v100);
  _ZNSt3__16invokeB8ne180100IRZZN4AMCP8IOAudio26Device34handle_driver_configuration_changeERK20IOAudio2NotificationENK3__0clEvEUlRT_E_JRNS_5tupleIJRNS_6vectorINS_10shared_ptrINS2_6StreamEEENS_9allocatorISG_EEEESK_EEEEEENS_13invoke_resultIS8_JDpT0_EE4typeEOS8_DpOSO_(v2, (uint64_t *)(v2 + 480), v102);
  CFDictionaryRef v10 = *(const __CFDictionary **)(v2 + 448);
  if (!v10)
  {
    unint64_t v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v92, "Could not construct");
    __cxa_throw(v92, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  properties[0] = 0;
  applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&v99, v10, @"controls", properties);
  if (properties[0]) {
    CFRelease(properties[0]);
  }
  uint64_t v95 = v2;
  AMCP::IOAudio2::Control::create_from_dictionary_list((AMCP::IOAudio2::Control *)&v97, (AMCP::IOAudio2::Device *)v2, (CFArrayRef *)&v99);
  mach_port_t v12 = v97;
  mach_port_t v11 = v98;
  if (v97 == v98)
  {
    mach_port_t v14 = 0;
    int v94 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    unint64_t v13 = 0;
    mach_port_t v14 = 0;
    int v94 = 0;
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(v95 + 504);
      uint64_t v17 = *(void *)(v95 + 512);
      if (v16 != v17)
      {
        while (*(_DWORD *)(*(void *)v16 + 36) != *(_DWORD *)(*v12 + 36))
        {
          v16 += 16;
          if (v16 == v17) {
            goto LABEL_23;
          }
        }
      }
      if (v16 == v17)
      {
LABEL_23:
        if ((unint64_t)v15 >= v13)
        {
          uint64_t v18 = (v15 - v94) >> 3;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61) {
LABEL_172:
          }
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v13 - (void)v94) >> 2 > v19) {
            unint64_t v19 = (uint64_t)(v13 - (void)v94) >> 2;
          }
          if (v13 - (unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v19;
          }
          if (v20) {
            unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v20);
          }
          else {
            uint64_t v21 = 0;
          }
          mach_port_t v22 = (char *)(v20 + 8 * v18);
          *(void *)mach_port_t v22 = v12;
          uint64_t v15 = v22 + 8;
          if (v14 != v94)
          {
            do
            {
              uint64_t v23 = *((void *)v14 - 1);
              v14 -= 8;
              *((void *)v22 - 1) = v23;
              v22 -= 8;
            }
            while (v14 != v94);
            mach_port_t v14 = v94;
          }
          int v94 = v22;
          unint64_t v13 = v20 + 8 * v21;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v15 = v12;
          v15 += 8;
        }
        mach_port_t v11 = v98;
        mach_port_t v14 = v15;
      }
      v12 += 2;
    }
    while (v12 != v11);
  }
  uint64_t v25 = *(uint64_t **)(v95 + 504);
  int v24 = *(uint64_t **)(v95 + 512);
  if (v25 == v24)
  {
    __int16 v93 = 0;
    mach_port_t v14 = v15;
  }
  else
  {
    unint64_t v26 = 0;
    CFStringRef v27 = 0;
    __int16 v93 = 0;
    mach_port_t v28 = 0;
    do
    {
      int v29 = v97;
      if (v97 != v98)
      {
        while (*(_DWORD *)(*v29 + 36) != *(_DWORD *)(*v25 + 36))
        {
          v29 += 2;
          if (v29 == v98)
          {
            int v29 = v98;
            break;
          }
        }
      }
      if (v29 == v24)
      {
        if ((unint64_t)v28 >= v26)
        {
          uint64_t v30 = (v28 - v93) >> 3;
          unint64_t v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 61) {
            goto LABEL_172;
          }
          if ((uint64_t)(v26 - (void)v93) >> 2 > v31) {
            unint64_t v31 = (uint64_t)(v26 - (void)v93) >> 2;
          }
          if (v26 - (unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v31;
          }
          if (v32) {
            unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v32);
          }
          else {
            uint64_t v33 = 0;
          }
          int v34 = (char *)(v32 + 8 * v30);
          *(void *)int v34 = v25;
          mach_port_t v28 = v34 + 8;
          if (v27 != v93)
          {
            do
            {
              uint64_t v35 = *((void *)v27 - 1);
              v27 -= 8;
              *((void *)v34 - 1) = v35;
              v34 -= 8;
            }
            while (v27 != v93);
            CFStringRef v27 = v93;
          }
          __int16 v93 = v34;
          unint64_t v26 = v32 + 8 * v33;
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *(void *)mach_port_t v28 = v25;
          v28 += 8;
        }
        int v24 = *(uint64_t **)(v95 + 512);
        CFStringRef v27 = v28;
      }
      v25 += 2;
    }
    while (v25 != v24);
    uint64_t v36 = v93;
    if (v93 == v28)
    {
      uint64_t v25 = v24;
    }
    else
    {
      do
      {
        int v37 = *(uint64_t **)v36;
        v36 += 8;
        uint64_t v38 = *v37;
        AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*(void *)(**(void **)(*v37 + 24) + 32) + 16), *(_DWORD *)(*v37 + 32));
        *(_DWORD *)(v38 + 32) = 0;
      }
      while (v36 != v28);
      mach_port_t v40 = *(uint64_t **)(v95 + 504);
      long long v39 = *(uint64_t **)(v95 + 512);
      if (v40 == v39)
      {
        uint64_t v25 = *(uint64_t **)(v95 + 504);
      }
      else
      {
        while (2)
        {
          CFStringRef v41 = v93;
          while (*v40 != **(void **)v41)
          {
            v41 += 8;
            if (v41 == v28) {
              goto LABEL_76;
            }
          }
          if (v28 == v41)
          {
LABEL_76:
            v40 += 2;
            if (v40 != v39) {
              continue;
            }
            goto LABEL_77;
          }
          break;
        }
        if (v40 == v39) {
          goto LABEL_77;
        }
        uint64_t v73 = v40 + 2;
        if (v40 + 2 == v39)
        {
          uint64_t v25 = v40;
        }
        else
        {
          uint64_t v25 = v40;
          do
          {
            long long v74 = v40;
            mach_port_t v40 = v73;
            uint64_t v75 = v74[2];
            __int16 v76 = v93;
            while (v75 != **(void **)v76)
            {
              v76 += 8;
              if (v76 == v28) {
                goto LABEL_150;
              }
            }
            if (v28 != v76) {
              goto LABEL_153;
            }
LABEL_150:
            uint64_t v77 = v74[3];
            *mach_port_t v40 = 0;
            v40[1] = 0;
            uint64_t v78 = (std::__shared_weak_count *)v25[1];
            *uint64_t v25 = v75;
            v25[1] = v77;
            if (v78) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v78);
            }
            v25 += 2;
LABEL_153:
            uint64_t v73 = v40 + 2;
          }
          while (v40 + 2 != v39);
          long long v39 = *(uint64_t **)(v95 + 512);
        }
        if (v25 == v39)
        {
LABEL_77:
          uint64_t v25 = v39;
          goto LABEL_81;
        }
        while (v39 != v25)
        {
          uint64_t v79 = (std::__shared_weak_count *)*(v39 - 1);
          if (v79) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v79);
          }
          v39 -= 2;
        }
        *(void *)(v95 + 512) = v25;
      }
    }
  }
LABEL_81:
  mach_port_t v42 = v94;
  uint64_t v43 = (uint64_t **)(v95 + 504);
  if (v94 != v14)
  {
    uint64_t v44 = (void *)(v95 + 520);
    do
    {
      uint64_t v45 = *(void *)v42;
      if ((unint64_t)v25 >= *v44)
      {
        uint64_t v47 = ((char *)v25 - (char *)*v43) >> 4;
        if ((unint64_t)(v47 + 1) >> 60) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v48 = *v44 - (void)*v43;
        uint64_t v49 = v48 >> 3;
        if (v48 >> 3 <= (unint64_t)(v47 + 1)) {
          uint64_t v49 = v47 + 1;
        }
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v50 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v49;
        }
        properties[4] = (CFMutableDictionaryRef)(v95 + 520);
        uint64_t v51 = (__CFDictionary *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v50);
        char v52 = (char *)v51 + 16 * v47;
        properties[0] = v51;
        properties[1] = (CFMutableDictionaryRef)v52;
        properties[3] = (__CFDictionary *)((char *)v51 + 16 * v53);
        *(_OWORD *)char v52 = *(_OWORD *)v45;
        *(void *)uint64_t v45 = 0;
        *(void *)(v45 + _Block_object_dispose(&a9, 8) = 0;
        properties[2] = (CFMutableDictionaryRef)(v52 + 16);
        std::vector<std::shared_ptr<DSP_Host_Types::FormatDescription>>::__swap_out_circular_buffer(v43, properties);
        uint64_t v46 = v95;
        uint64_t v25 = *(uint64_t **)(v95 + 512);
        std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)properties);
      }
      else
      {
        *(_OWORD *)uint64_t v25 = *(_OWORD *)v45;
        v25 += 2;
        *(void *)uint64_t v45 = 0;
        *(void *)(v45 + _Block_object_dispose(&a9, 8) = 0;
        uint64_t v46 = v95;
        *(void *)(v95 + 512) = v25;
      }
      *(void *)(v46 + 512) = v25;
      v42 += 8;
    }
    while (v42 != v14);
  }
  for (uint64_t i = *v43; i != v25; i += 2)
  {
    CFDictionaryRef v55 = *(const __CFDictionary **)(v95 + 448);
    if (!v55) {
      goto LABEL_170;
    }
    uint64_t v56 = *i;
    int v57 = *(_DWORD *)(*i + 36);
    properties[0] = 0;
    applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&theArray, v55, @"controls", properties);
    if (properties[0]) {
      CFRelease(properties[0]);
    }
    CFArrayRef v58 = theArray;
    if (!theArray)
    {
LABEL_170:
      unint64_t v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v85, "Could not construct");
      __cxa_throw(v85, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (CFArrayGetCount(theArray))
    {
      CFIndex Count = CFArrayGetCount(v58);
      CFIndex v60 = CFArrayGetCount(v58);
      if (Count)
      {
        CFIndex v61 = v60;
        unint64_t v62 = 0;
        while (v61 != v62)
        {
          applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v96, v58, v62);
          if (!v96) {
            goto LABEL_169;
          }
          LODWORD(properties[0]) = 0;
          CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, properties);
          if (!cf)
          {
            int v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v83, "Could not construct");
            __cxa_throw(v83, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(properties, (const __CFDictionary *)v96, @"control ID", &cf);
          CFMutableDictionaryRef v63 = properties[0];
          if (!properties[0])
          {
LABEL_169:
            unint64_t v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v84, "Could not construct");
            __cxa_throw(v84, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          int v64 = applesauce::CF::convert_to<unsigned int,0>(properties[0]);
          CFRelease(v63);
          if (cf) {
            CFRelease(cf);
          }
          if (v64 == v57) {
            goto LABEL_112;
          }
          if (v96) {
            CFRelease(v96);
          }
          if (Count == ++v62) {
            break;
          }
        }
      }
    }
    CFTypeRef v96 = 0;
LABEL_112:
    CFRelease(v58);
    uint64_t v65 = *(const void **)(v56 + 40);
    *(void *)(v56 + 40) = v96;
    CFTypeRef v96 = v65;
    unsigned int v66 = *(_DWORD *)(v56 + 32);
    if (v66)
    {
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&theArray, *(std::__shared_mutex_base **)(*(void *)(**(void **)(v56 + 24) + 32) + 16), v66);
      CFArrayRef v67 = theArray;
      if (theArray)
      {
        memset(properties, 0, 32);
        LODWORD(properties[4]) = 1065353216;
        AMCP::IOAudio2::Control::update_value(v56, (uint64_t)properties);
        AMCP::IOAudio2::Control::update_range(v56, (uint64_t)properties);
        CFTypeRef cf = (char *)v67 + 48;
        LOBYTE(v107) = 1;
        caulk::concurrent::shared_spin_lock::lock((atomic_uint *)v67 + 12);
        for (CFMutableDictionaryRef j = properties[2]; j; CFMutableDictionaryRef j = *(CFMutableDictionaryRef *)j)
          std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v67 + 8, (unsigned int *)(*((void *)j + 4) + 40), (void *)j + 4);
        std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&cf);
        CFTypeRef cf = (CFTypeRef)0x676C6F626F776E72;
        int v107 = 0;
        *((_DWORD *)v67 + 1) = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v67, (const AMCP::Address *)&cf, &AMCP::k_object_id_unknown);
        std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((void *)properties[2]);
        CFMutableDictionaryRef v69 = properties[0];
        properties[0] = 0;
        if (v69) {
          operator delete(v69);
        }
      }
      if (v105) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v105);
      }
    }
    else
    {
      AMCP::IOAudio2::Control::build_core((AMCP::IOAudio2::Control *)v56);
    }
    if (v96) {
      CFRelease(v96);
    }
  }
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&theArray, *(std::__shared_mutex_base **)(*(void *)(*(void *)v95 + 32) + 16), *(_DWORD *)(v95 + 16));
  CFArrayRef v70 = theArray;
  if (theArray)
  {
    memset(properties, 0, 32);
    LODWORD(properties[4]) = 1065353216;
    AMCP::IOAudio2::Device::update_core_common(v95, (uint64_t)properties);
    CFTypeRef cf = (char *)v70 + 48;
    LOBYTE(v107) = 1;
    caulk::concurrent::shared_spin_lock::lock((atomic_uint *)v70 + 12);
    for (CFMutableDictionaryRef k = properties[2]; k; CFMutableDictionaryRef k = *(CFMutableDictionaryRef *)k)
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v70 + 8, (unsigned int *)(*((void *)k + 4) + 40), (void *)k + 4);
    std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&cf);
    CFTypeRef cf = (CFTypeRef)0x676C6F626F776E72;
    int v107 = 0;
    *((_DWORD *)v70 + 1) = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v70, (const AMCP::Address *)&cf, &AMCP::k_object_id_unknown);
    std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((void *)properties[2]);
    CFMutableDictionaryRef v72 = properties[0];
    properties[0] = 0;
    if (v72) {
      operator delete(v72);
    }
  }
  if (v105) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v105);
  }
  if (v93) {
    operator delete(v93);
  }
  if (v94) {
    operator delete(v94);
  }
  properties[0] = (CFMutableDictionaryRef)&v97;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)properties);
  if (v99) {
    CFRelease(v99);
  }
  properties[0] = (CFMutableDictionaryRef)v100;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)properties);
  if (v101) {
    CFRelease(v101);
  }
  properties[0] = (CFMutableDictionaryRef)v102;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)properties);
  if (v103) {
    CFRelease(v103);
  }
}

void sub_1BABD9D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, void *a10, uint64_t a11, CFTypeRef a12, char **a13, uint64_t a14, uint64_t a15, CFTypeRef a16, char *a17, uint64_t a18, uint64_t a19, CFTypeRef cf,char a21,uint64_t a22,uint64_t a23,CFTypeRef a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  a13 = &a17;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (cf) {
    CFRelease(cf);
  }
  a17 = &a21;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (a24) {
    CFRelease(a24);
  }
  _Unwind_Resume(a1);
}

void _ZNSt3__16invokeB8ne180100IRZZN4AMCP8IOAudio26Device34handle_driver_configuration_changeERK20IOAudio2NotificationENK3__0clEvEUlRT_E_JRNS_5tupleIJRNS_6vectorINS_10shared_ptrINS2_6StreamEEENS_9allocatorISG_EEEESK_EEEEEENS_13invoke_resultIS8_JDpT0_EE4typeEOS8_DpOSO_(uint64_t a1, uint64_t *a2, void *a3)
{
  io_connect_t v4 = a2;
  uint64_t v6 = (void *)*a3;
  io_registry_entry_t v5 = (void *)a3[1];
  if ((void *)*a3 == v5)
  {
    CFDictionaryRef v8 = 0;
    CFDictionaryRef v9 = 0;
    CFDictionaryRef v10 = 0;
  }
  else
  {
    unint64_t v7 = 0;
    CFDictionaryRef v8 = 0;
    CFDictionaryRef v9 = 0;
    CFDictionaryRef v10 = 0;
    do
    {
      mach_port_t v11 = (void *)*v4;
      mach_port_t v12 = (void *)v4[1];
      if ((void *)*v4 != v12)
      {
        while (*(_DWORD *)(*v11 + 36) != *(_DWORD *)(*v6 + 36))
        {
          v11 += 2;
          if (v11 == v12) {
            goto LABEL_8;
          }
        }
      }
      if (v11 == v12)
      {
LABEL_8:
        if ((unint64_t)v10 >= v7)
        {
          uint64_t v13 = (v10 - v9) >> 3;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
LABEL_176:
          }
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v7 - (void)v9) >> 2 > v14) {
            unint64_t v14 = (uint64_t)(v7 - (void)v9) >> 2;
          }
          if (v7 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v14;
          }
          if (v15) {
            unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v15);
          }
          else {
            uint64_t v16 = 0;
          }
          uint64_t v17 = (char *)(v15 + 8 * v13);
          *(void *)uint64_t v17 = v6;
          CFDictionaryRef v10 = v17 + 8;
          if (v8 == v9)
          {
            CFDictionaryRef v9 = (char *)(v15 + 8 * v13);
            io_connect_t v4 = a2;
          }
          else
          {
            io_connect_t v4 = a2;
            do
            {
              uint64_t v18 = *((void *)v8 - 1);
              v8 -= 8;
              *((void *)v17 - 1) = v18;
              v17 -= 8;
            }
            while (v8 != v9);
            CFDictionaryRef v8 = v9;
            CFDictionaryRef v9 = v17;
          }
          unint64_t v7 = v15 + 8 * v16;
          if (v8) {
            operator delete(v8);
          }
        }
        else
        {
          *(void *)CFDictionaryRef v10 = v6;
          v10 += 8;
        }
        io_registry_entry_t v5 = (void *)a3[1];
        CFDictionaryRef v8 = v10;
      }
      v6 += 2;
    }
    while (v6 != v5);
  }
  unint64_t v20 = (void *)*v4;
  unint64_t v19 = (void *)v4[1];
  if ((void *)*v4 == v19)
  {
    uint64_t v23 = 0;
    CFDictionaryRef v8 = v10;
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = 0;
    do
    {
      uint64_t v25 = (void *)*a3;
      unint64_t v26 = (void *)a3[1];
      if ((void *)*a3 != v26)
      {
        while (*(_DWORD *)(*v25 + 36) != *(_DWORD *)(*v20 + 36))
        {
          v25 += 2;
          if (v25 == v26)
          {
            uint64_t v25 = (void *)a3[1];
            break;
          }
        }
      }
      if (v25 == v19)
      {
        if ((unint64_t)v24 >= v22)
        {
          uint64_t v27 = (v24 - v23) >> 3;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 61) {
            goto LABEL_176;
          }
          if ((uint64_t)(v22 - (void)v23) >> 2 > v28) {
            unint64_t v28 = (uint64_t)(v22 - (void)v23) >> 2;
          }
          if (v22 - (unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v28;
          }
          if (v29) {
            unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v29);
          }
          else {
            uint64_t v30 = 0;
          }
          unint64_t v31 = (char *)(v29 + 8 * v27);
          *(void *)unint64_t v31 = v20;
          int v24 = v31 + 8;
          if (v21 != v23)
          {
            do
            {
              uint64_t v32 = *((void *)v21 - 1);
              v21 -= 8;
              *((void *)v31 - 1) = v32;
              v31 -= 8;
            }
            while (v21 != v23);
            uint64_t v21 = v23;
          }
          uint64_t v23 = v31;
          unint64_t v22 = v29 + 8 * v30;
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(void *)int v24 = v20;
          v24 += 8;
        }
        unint64_t v19 = (void *)a2[1];
        uint64_t v21 = v24;
      }
      v20 += 2;
    }
    while (v20 != v19);
    if (v23 == v24)
    {
      unint64_t v20 = v19;
    }
    else
    {
      uint64_t v33 = v23;
      do
      {
        int v34 = *(uint64_t **)v33;
        v33 += 8;
        uint64_t v35 = *v34;
        AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*(void *)(**(void **)(*v34 + 24) + 32) + 16), *(_DWORD *)(*v34 + 32));
        *(_DWORD *)(v35 + 32) = 0;
      }
      while (v33 != v24);
      uint64_t v36 = (void *)*a2;
      int v37 = (void *)a2[1];
      if ((void *)*a2 == v37)
      {
        unint64_t v20 = (void *)*a2;
      }
      else
      {
        while (2)
        {
          uint64_t v38 = v23;
          while (*v36 != **(void **)v38)
          {
            v38 += 8;
            if (v38 == v24) {
              goto LABEL_64;
            }
          }
          if (v24 == v38)
          {
LABEL_64:
            v36 += 2;
            if (v36 != v37) {
              continue;
            }
            goto LABEL_65;
          }
          break;
        }
        if (v36 == v37) {
          goto LABEL_65;
        }
        CFTypeRef v103 = v36 + 2;
        if (v36 + 2 == v37)
        {
          unint64_t v20 = v36;
        }
        else
        {
          unint64_t v20 = v36;
          do
          {
            BOOL v104 = v36;
            uint64_t v36 = v103;
            uint64_t v105 = v104[2];
            uint64_t v106 = v23;
            while (v105 != **(void **)v106)
            {
              v106 += 8;
              if (v106 == v24) {
                goto LABEL_161;
              }
            }
            if (v24 != v106) {
              goto LABEL_164;
            }
LABEL_161:
            uint64_t v107 = v104[3];
            *uint64_t v36 = 0;
            v36[1] = 0;
            uint64_t v108 = (std::__shared_weak_count *)v20[1];
            *unint64_t v20 = v105;
            v20[1] = v107;
            if (v108) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v108);
            }
            v20 += 2;
LABEL_164:
            CFTypeRef v103 = v36 + 2;
          }
          while (v36 + 2 != v37);
          int v37 = (void *)a2[1];
        }
        if (v20 == v37)
        {
LABEL_65:
          unint64_t v20 = v37;
          goto LABEL_69;
        }
        while (v37 != v20)
        {
          CFArrayRef v109 = (std::__shared_weak_count *)*(v37 - 1);
          if (v109) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v109);
          }
          v37 -= 2;
        }
        a2[1] = (uint64_t)v20;
      }
    }
  }
LABEL_69:
  long long __p = v23;
  int v113 = v9;
  long long v39 = a2;
  if (v9 != v8)
  {
    uint64_t v115 = a2 + 2;
    mach_port_t v40 = v9;
    do
    {
      CFStringRef v41 = *(uint64_t **)v40;
      uint64_t v43 = (char *)*v39;
      mach_port_t v42 = (char *)v39[1];
      uint64_t v44 = **(void **)v40;
      uint64_t v45 = v42 - v43;
      if (v42 == v43)
      {
        uint64_t v47 = v42;
      }
      else
      {
        unint64_t v46 = v45 >> 4;
        uint64_t v47 = v43;
        do
        {
          unint64_t v48 = v46 >> 1;
          uint64_t v49 = &v47[16 * (v46 >> 1)];
          uint64_t v51 = *(void *)v49;
          unint64_t v50 = v49 + 16;
          v46 += ~(v46 >> 1);
          if (*(_DWORD *)(v51 + 52) < *(_DWORD *)(v44 + 52)) {
            uint64_t v47 = v50;
          }
          else {
            unint64_t v46 = v48;
          }
        }
        while (v46);
      }
      uint64_t v52 = v47 - v43;
      uint64_t v53 = (v47 - v43) >> 4;
      mach_port_t v54 = &v43[(v47 - v43) & 0xFFFFFFFFFFFFFFF0];
      uint64_t v55 = *v115;
      if ((unint64_t)v42 >= *v115)
      {
        unint64_t v59 = (v45 >> 4) + 1;
        if (v59 >> 60) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v60 = v55 - (void)v43;
        unint64_t v61 = (v55 - (uint64_t)v43) >> 3;
        if (v61 > v59) {
          unint64_t v59 = v61;
        }
        if (v60 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v62 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v62 = v59;
        }
        long long v120 = a2 + 2;
        if (v62) {
          unint64_t v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v62);
        }
        else {
          uint64_t v63 = 0;
        }
        CFMutableDictionaryRef v72 = (_OWORD *)(v62 + 16 * v53);
        CFTypeRef cf = (CFTypeRef)v62;
        *(void *)&long long v118 = v72;
        *((void *)&v118 + 1) = v72;
        CFArrayRef v119 = (const __CFArray *)(v62 + 16 * v63);
        if (v53 == v63)
        {
          if (v52 < 1)
          {
            if (v47 == v43) {
              unint64_t v74 = 1;
            }
            else {
              unint64_t v74 = v52 >> 3;
            }
            uint64_t v122 = v120;
            uint64_t v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v74);
            uint64_t v77 = v118;
            uint64_t v78 = *((void *)&v118 + 1) - v118;
            if (*((void *)&v118 + 1) == (void)v118)
            {
              int64x2_t v83 = vdupq_n_s64(v118);
              unint64_t v80 = (unint64_t)&v75[16 * (v74 >> 2)];
            }
            else
            {
              uint64_t v79 = v78 >> 4;
              unint64_t v80 = (unint64_t)&v75[16 * (v74 >> 2) + (v78 & 0xFFFFFFFFFFFFFFF0)];
              uint64_t v81 = 16 * v79;
              mach_port_t v82 = &v75[16 * (v74 >> 2)];
              do
              {
                *(_OWORD *)mach_port_t v82 = *(_OWORD *)v77;
                v82 += 16;
                *(void *)uint64_t v77 = 0;
                *(void *)(v77 + _Block_object_dispose(&a9, 8) = 0;
                v77 += 16;
                v81 -= 16;
              }
              while (v81);
              int64x2_t v83 = (int64x2_t)v118;
            }
            CFArrayRef v84 = v119;
            theArray[0] = (CFArrayRef)cf;
            CFTypeRef cf = v75;
            *(void *)&long long v118 = &v75[16 * (v74 >> 2)];
            *(int64x2_t *)&theArray[1] = v83;
            *((void *)&v118 + 1) = v80;
            CFArrayRef v119 = (const __CFArray *)&v75[16 * v76];
            theArray[3] = v84;
            std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)theArray);
            CFMutableDictionaryRef v72 = (_OWORD *)*((void *)&v118 + 1);
          }
          else
          {
            unint64_t v73 = v53 + 2;
            if (v53 >= -1) {
              unint64_t v73 = v53 + 1;
            }
            v72 -= v73 >> 1;
            *(void *)&long long v118 = v72;
            *((void *)&v118 + 1) = v72;
          }
        }
        *CFMutableDictionaryRef v72 = *(_OWORD *)v41;
        *CFStringRef v41 = 0;
        v41[1] = 0;
        *((void *)&v118 + 1) += 16;
        long long v39 = a2;
        *(void *)&long long v118 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<AMCP::IOAudio2::Stream>>,std::reverse_iterator<std::shared_ptr<AMCP::IOAudio2::Stream>*>,std::reverse_iterator<std::shared_ptr<AMCP::IOAudio2::Stream>*>,std::reverse_iterator<std::shared_ptr<AMCP::IOAudio2::Stream>*>>((uint64_t)v115, (uint64_t)v54, v54, *a2, (void *)*a2, v118, v118);
        unint64_t v85 = (char *)a2[1];
        uint64_t v86 = (_OWORD *)*((void *)&v118 + 1);
        if (v54 != v85)
        {
          do
          {
            *v86++ = *(_OWORD *)v54;
            *(void *)mach_port_t v54 = 0;
            *((void *)v54 + 1) = 0;
            v54 += 16;
          }
          while (v54 != v85);
          mach_port_t v54 = (char *)a2[1];
        }
        char v87 = (const void *)*a2;
        uint64_t v88 = (uint64_t)v119;
        *a2 = v118;
        a2[1] = (uint64_t)v86;
        uint64_t v89 = a2[2];
        a2[2] = v88;
        *((void *)&v118 + 1) = v54;
        CFArrayRef v119 = (const __CFArray *)v89;
        CFTypeRef cf = v87;
        *(void *)&long long v118 = v87;
        std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&cf);
      }
      else if (v54 == v42)
      {
        *(void *)mach_port_t v42 = v44;
        *(void *)&v43[16 * v53 + 8] = v41[1];
        *CFStringRef v41 = 0;
        v41[1] = 0;
        long long v39 = a2;
        a2[1] = (uint64_t)(v42 + 16);
      }
      else
      {
        uint64_t v112 = v41[1];
        *CFStringRef v41 = 0;
        v41[1] = 0;
        uint64_t v56 = (char *)a2[1];
        int v57 = v56 - 16;
        CFArrayRef v58 = v56;
        while (v57 < v56)
        {
          *(_OWORD *)CFArrayRef v58 = *(_OWORD *)v57;
          v58 += 16;
          *(void *)int v57 = 0;
          *((void *)v57 + 1) = 0;
          v57 += 16;
        }
        a2[1] = (uint64_t)v58;
        if (v56 != v54 + 16)
        {
          int v64 = (std::__shared_weak_count **)(v56 - 8);
          uint64_t v65 = 16 * ((v56 - (v54 + 16)) >> 4);
          uint64_t v66 = (uint64_t)&v43[16 * v53 - 16];
          do
          {
            CFArrayRef v67 = (void *)(v66 + v65);
            long long v68 = *(_OWORD *)(v66 + v65);
            void *v67 = 0;
            v67[1] = 0;
            CFMutableDictionaryRef v69 = *v64;
            *(_OWORD *)(v64 - 1) = v68;
            if (v69) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v69);
            }
            v64 -= 2;
            v65 -= 16;
          }
          while (v65);
        }
        *(void *)mach_port_t v54 = v44;
        CFArrayRef v70 = &v43[16 * v53];
        unint64_t v71 = (std::__shared_weak_count *)*((void *)v70 + 1);
        *((void *)v70 + 1) = v112;
        long long v39 = a2;
        if (v71) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v71);
        }
      }
      v40 += 8;
    }
    while (v40 != v8);
    unint64_t v20 = (void *)v39[1];
  }
  uint64_t v90 = (void *)*v39;
  if ((void *)*v39 != v20)
  {
    while (1)
    {
      CFDictionaryRef v91 = *(const __CFDictionary **)(a1 + 448);
      if (!v91) {
        break;
      }
      uint64_t v92 = *v90;
      int v93 = *(_DWORD *)(*v90 + 36);
      CFTypeRef cf = 0;
      applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(theArray, v91, @"input streams", &cf);
      if (cf) {
        CFRelease(cf);
      }
      CFArrayRef v94 = theArray[0];
      if (!theArray[0]) {
        break;
      }
      if (CFArrayGetCount(theArray[0])
        && (AMCP::IOAudio2::Stream::find_stream_dictionary_by_driver_id((AMCP::IOAudio2::Stream *)&cf, theArray, v93),
            (CFTypeRef v95 = cf) != 0))
      {
        CFArrayRef v96 = v94;
      }
      else
      {
        CFDictionaryRef v97 = *(const __CFDictionary **)(a1 + 448);
        if (!v97) {
          break;
        }
        CFTypeRef v123 = 0;
        applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&cf, v97, @"output streams", &v123);
        CFArrayRef v96 = (const __CFArray *)cf;
        theArray[0] = (CFArrayRef)cf;
        CFTypeRef cf = v94;
        CFRelease(v94);
        if (v123) {
          CFRelease(v123);
        }
        if (!v96) {
          break;
        }
        if (CFArrayGetCount(v96))
        {
          AMCP::IOAudio2::Stream::find_stream_dictionary_by_driver_id((AMCP::IOAudio2::Stream *)&cf, theArray, v93);
          CFTypeRef v95 = cf;
        }
        else
        {
          CFTypeRef v95 = 0;
        }
      }
      CFRelease(v96);
      io_connect_t v98 = *(const void **)(v92 + 40);
      *(void *)(v92 + 40) = v95;
      unsigned int v99 = *(_DWORD *)(v92 + 32);
      if (v99)
      {
        AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v123, *(std::__shared_mutex_base **)(*(void *)(**(void **)(v92 + 24) + 32) + 16), v99);
        uint64_t v100 = v123;
        if (v123)
        {
          memset(theArray, 0, sizeof(theArray));
          LODWORD(v122) = 1065353216;
          AMCP::IOAudio2::Device::get_device_connection((AMCP::IOAudio2::Device *)&cf, **(_DWORD **)(*(void *)(v92 + 24) + 360));
          AMCP::IOAudio2::update_stream_core((uint64_t)theArray, (const applesauce::CF::DictionaryRef *)&cf, (CFDictionaryRef *)(v92 + 40), *(_DWORD *)(v92 + 36));
          IOConnectRelease((io_connect_t)cf);
          CFTypeRef cf = v100 + 12;
          LOBYTE(v11_Block_object_dispose(&a9, 8) = 1;
          caulk::concurrent::shared_spin_lock::lock(v100 + 12);
          for (CFArrayRef i = theArray[2]; i; CFArrayRef i = *(CFArrayRef *)i)
            std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)(v100 + 2), (unsigned int *)(*((void *)i + 4) + 40), (void *)i + 4);
          std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&cf);
          CFTypeRef cf = (CFTypeRef)0x676C6F626F776E72;
          LODWORD(v11_Block_object_dispose(&a9, 8) = 0;
          v100[1] = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)v100, (const AMCP::Address *)&cf, &AMCP::k_object_id_unknown);
          std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((void *)theArray[2]);
          CFArrayRef v102 = theArray[0];
          theArray[0] = 0;
          if (v102) {
            operator delete(v102);
          }
        }
        CFDictionaryRef v9 = v113;
        if (v124) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v124);
        }
      }
      else
      {
        CFDictionaryRef v9 = v113;
        AMCP::IOAudio2::Stream::build_core((AMCP::IOAudio2::Stream *)v92);
      }
      if (v98) {
        CFRelease(v98);
      }
      v90 += 2;
      if (v90 == v20) {
        goto LABEL_148;
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_148:
  if (__p) {
    operator delete(__p);
  }
  if (v9) {
    operator delete(v9);
  }
}

void sub_1BABDA994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, io_connect_t connect, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<AMCP::IOAudio2::Stream>>,std::reverse_iterator<std::shared_ptr<AMCP::IOAudio2::Stream>*>,std::reverse_iterator<std::shared_ptr<AMCP::IOAudio2::Stream>*>,std::reverse_iterator<std::shared_ptr<AMCP::IOAudio2::Stream>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = a7;
  while (a3 != a5)
  {
    long long v8 = *((_OWORD *)a3 - 1);
    a3 -= 2;
    *(_OWORD *)(result - 16) = v8;
    result -= 16;
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0,std::allocator<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0,std::allocator<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

__n128 std::__function::__func<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0,std::allocator<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1463BE0;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

char *std::__function::__func<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0,std::allocator<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  int v3 = (char *)operator new(0x38uLL);
  *(void *)int v3 = &unk_1F1463BE0;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  return v3;
}

void sub_1BABDABAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0,std::allocator<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1463BE0;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0,std::allocator<AMCP::IOAudio2::Device::handle_driver_configuration_change(IOAudio2Notification const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1463BE0;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14637E0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F14637E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::~__func()
{
}

uint64_t applesauce::iokit::io_service_notifications::notification_callback_(uint64_t this, void *a2, int a3, uint64_t a4, void *a5)
{
  if (this)
  {
    int v7 = a3;
    uint64_t v6 = a4;
    uint64_t v5 = *(void *)(this + 40);
    if (!v5) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    return (*(uint64_t (**)(uint64_t, int *, uint64_t *, uint64_t, void *))(*(void *)v5 + 48))(v5, &v7, &v6, a4, a5);
  }
  return this;
}

void *std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26DeviceC1ERNS0_6DriverERKN10applesauce5iokit16io_object_holderENS4_2CF13DictionaryRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::operator()(uint64_t result, _DWORD *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*a2 == -536870896)
  {
    uint64_t v2 = *(void *)(result + 8);
    uint64_t v3 = *(void **)(v2 + 64);
    io_connect_t v4 = *(void **)(v2 + 72);
    if (v3 != v4)
    {
      while (*v3 != *(void *)(result + 16))
      {
        if (++v3 == v4) {
          return result;
        }
      }
    }
    unint64_t v14 = v3;
    if (v3 != v4)
    {
      uint64_t v5 = operator new(0x20uLL);
      v5[1] = 0;
      v5[2] = 0;
      void *v5 = &unk_1F1488C30;
      *((unsigned char *)v5 + 24) = 0;
      v11[0] = (uint64_t)(v5 + 3);
      v11[1] = (uint64_t)v5;
      int v12 = 0;
      int v13 = 0;
      uint64_t v6 = *(void *)(*(void *)(v2 + 32) + 32);
      unsigned int v7 = *(_DWORD *)(v2 + 48);
      AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)v9, v11);
      *(void *)&long long v10 = v2;
      *((void *)&v10 + 1) = &v14;
      uint64_t v16 = 0;
      long long v8 = (char *)operator new(0x38uLL);
      *(void *)long long v8 = &unk_1F145EA30;
      AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v8 + 8), v9);
      *(_OWORD *)(v8 + 40) = v10;
      uint64_t v16 = v8;
      AMCP::Core::Conductor::enqueue_config_change(v6, v7, v7, 9, (uint64_t)v15);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v15);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v9);
      return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v11);
    }
  }
  return result;
}

void sub_1BABDAF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2)
  {
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v15 - 72));
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a9);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a15);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BABDAEE8);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1463760;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + _Block_object_dispose(&a9, 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F1463760;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(&a9, 8) = result;
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio2::Device::Device(AMCP::IOAudio2::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::~__func()
{
}

void AMCP::IOAudio2::Device::~Device(AMCP::IOAudio2::Device *this)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 480;
  std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100]((uint64_t *)this + 60);
  std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100]((uint64_t *)this + 57);
  std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100]((uint64_t *)this + 63);
  uint64_t v3 = (io_connect_t *)*((void *)this + 45);
  *((void *)this + 45) = 0;
  if (v3) {
    std::default_delete<applesauce::iokit::io_connect_holder>::operator()[abi:ne180100](v3);
  }
  AMCP::Utility::Mach_Port::reset((AMCP::IOAudio2::Device *)((char *)this + 368));
  uint64_t v4 = *((void *)this + 44);
  *((void *)this + 44) = 0;
  if (v4) {
    std::default_delete<applesauce::iokit::io_service_notifications>::operator()[abi:ne180100](v4);
  }
  uint64_t v5 = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*(void *)(*(void *)this + 32) + 16), *((_DWORD *)this + 4));
  AMCP::Log::Scope_Registry::get(v5);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v40, "com.apple.coreaudio", "AMCP");
  int v7 = *(_DWORD *)(v40 + 16);
  switch(v7)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v24 = **(NSObject ***)buf;
      if (*(void *)v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        uint64_t v25 = pthread_self();
        mach_port_t v26 = pthread_mach_thread_np(v25);
        CFStringRef v27 = (const __CFString *)*((void *)this + 1);
        if (v27)
        {
          mach_port_t v28 = v26;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v27);
          if (v39 >= 0) {
            unint64_t v29 = __p;
          }
          else {
            unint64_t v29 = (void **)__p[0];
          }
          int v30 = *((_DWORD *)this + 4);
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v28;
          *(_WORD *)uint64_t v43 = 2080;
          *(void *)&v43[2] = "IOAudio2_Device.cpp";
          __int16 v44 = 1024;
          int v45 = 117;
          __int16 v46 = 2080;
          uint64_t v47 = v29;
          __int16 v48 = 1024;
          int v49 = v30;
          uint64_t v15 = v24;
          os_log_type_t v16 = OS_LOG_TYPE_INFO;
          goto LABEL_32;
        }
LABEL_48:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        int v37 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], v37);
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v17 = **(NSObject ***)buf;
      if (*(void *)v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v18 = pthread_self();
        mach_port_t v19 = pthread_mach_thread_np(v18);
        CFStringRef v20 = (const __CFString *)*((void *)this + 1);
        if (v20)
        {
          mach_port_t v21 = v19;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v20);
          if (v39 >= 0) {
            unint64_t v22 = __p;
          }
          else {
            unint64_t v22 = (void **)__p[0];
          }
          int v23 = *((_DWORD *)this + 4);
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v21;
          *(_WORD *)uint64_t v43 = 2080;
          *(void *)&v43[2] = "IOAudio2_Device.cpp";
          __int16 v44 = 1024;
          int v45 = 117;
          __int16 v46 = 2080;
          uint64_t v47 = v22;
          __int16 v48 = 1024;
          int v49 = v23;
          _os_log_debug_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Tore down device '%s' with object id %u", buf, 0x28u);
LABEL_33:
          if (v39 < 0) {
            operator delete(__p[0]);
          }
          break;
        }
        goto LABEL_48;
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      long long v8 = **(NSObject ***)buf;
      if (*(void *)v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        CFDictionaryRef v9 = pthread_self();
        mach_port_t v10 = pthread_mach_thread_np(v9);
        CFStringRef v11 = (const __CFString *)*((void *)this + 1);
        if (v11)
        {
          mach_port_t v12 = v10;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v11);
          if (v39 >= 0) {
            int v13 = __p;
          }
          else {
            int v13 = (void **)__p[0];
          }
          int v14 = *((_DWORD *)this + 4);
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v12;
          *(_WORD *)uint64_t v43 = 2080;
          *(void *)&v43[2] = "IOAudio2_Device.cpp";
          __int16 v44 = 1024;
          int v45 = 117;
          __int16 v46 = 2080;
          uint64_t v47 = v13;
          __int16 v48 = 1024;
          int v49 = v14;
          uint64_t v15 = v8;
          os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
LABEL_32:
          _os_log_impl(&dword_1BAA78000, v15, v16, "%6u %32s:%-5d Tore down device '%s' with object id %u", buf, 0x28u);
          goto LABEL_33;
        }
        goto LABEL_48;
      }
      break;
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  *(void *)buf = (char *)this + 504;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)buf = v2;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)buf = (char *)this + 456;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  unint64_t v31 = (const void *)*((void *)this + 56);
  if (v31) {
    CFRelease(v31);
  }
  AMCP::Utility::Mach_Port::~Mach_Port((AMCP::IOAudio2::Device *)((char *)this + 368));
  uint64_t v32 = (io_connect_t *)*((void *)this + 45);
  *((void *)this + 45) = 0;
  if (v32) {
    std::default_delete<applesauce::iokit::io_connect_holder>::operator()[abi:ne180100](v32);
  }
  uint64_t v33 = *((void *)this + 44);
  *((void *)this + 44) = 0;
  if (v33) {
    std::default_delete<applesauce::iokit::io_service_notifications>::operator()[abi:ne180100](v33);
  }
  io_object_t v34 = *((_DWORD *)this + 86);
  if (v34) {
    IOObjectRelease(v34);
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::IOAudio2::Device *)((char *)this + 24));
  uint64_t v35 = (const void *)*((void *)this + 1);
  if (v35) {
    CFRelease(v35);
  }
}

void sub_1BABDB4F0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t AMCP::DAL::Resampler2_Resampler::get_latency(AMCP::DAL::Resampler2_Resampler *this)
{
  uint64_t v1 = **((void **)this + 12);
  if ((*(_DWORD *)(v1 + 112) | 2) != 2) {
    return 0;
  }
  double v2 = 0.5;
  if (*(_DWORD *)(v1 + 108) != 1818848869) {
    double v2 = *(double *)(v1 + 160) + (double)*(int *)(*(void *)(v1 + 48) + 20);
  }
  return (unint64_t)(v2 / *(double *)(v1 + 88));
}

uint64_t AMCP::DAL::Resampler2_Resampler::get_expected_output_samples_for_input_samples(Resampler2 ***this, unsigned int a2, unint64_t *a3)
{
  unsigned int v5 = 100 * a2;
  unsigned int v6 = a2;
  Resampler2::PreFlight(*this[12], &v6, &v5);
  uint64_t result = v5;
  *a3 = v6;
  return result;
}

uint64_t AMCP::DAL::Resampler2_Resampler::get_required_input_samples_for_output_samples(Resampler2 ***this, unsigned int a2)
{
  unsigned int v4 = a2;
  unsigned int v3 = 100 * a2;
  Resampler2::PreFlight(*this[12], &v3, &v4);
  return v3;
}

double AMCP::DAL::Resampler2_Resampler::process(uint64_t a1, void *a2, uint64_t *a3, void *a4, double a5, double a6, double a7)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 96) == *(void *)(a1 + 104))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    int v49 = *(NSObject **)__p;
    if (*(void *)v80) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v80);
    }
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      uint64_t v50 = pthread_self();
      mach_port_t v51 = pthread_mach_thread_np(v50);
      LODWORD(__p) = 67109890;
      HIDWORD(__p) = v51;
      *(_WORD *)unint64_t v80 = 2080;
      *(void *)&v80[2] = "Resampler2_Resampler.cpp";
      __int16 v81 = 1024;
      int v82 = 47;
      __int16 v83 = 2080;
      *(void *)CFArrayRef v84 = "not (not m_resamplers.empty())";
      _os_log_error_impl(&dword_1BAA78000, v49, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v67);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v72);
    std::logic_error::logic_error(&v65, &v72);
    v65.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v73, &v65);
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    int v78 = -1;
    v73.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unint64_t v74 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v73);
    *(void *)&v84[6] = "virtual Sample_Time_Range AMCP::DAL::Resampler2_Resampler::process(const Sample_Group<float> &,"
                         " Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
    *(void *)&v84[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Resampler2_Resampler.cpp";
    *(_DWORD *)&v84[22] = 47;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v69.__r_.__value_.__l.__data_);
    CFArrayRef v70 = &unk_1F148AA90;
    std::string v71 = v69;
    memset(&v69, 0, sizeof(v69));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*a2 == a2[1])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    uint64_t v52 = *(NSObject **)__p;
    if (*(void *)v80) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v80);
    }
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      uint64_t v53 = pthread_self();
      mach_port_t v54 = pthread_mach_thread_np(v53);
      LODWORD(__p) = 67109890;
      HIDWORD(__p) = v54;
      *(_WORD *)unint64_t v80 = 2080;
      *(void *)&v80[2] = "Resampler2_Resampler.cpp";
      __int16 v81 = 1024;
      int v82 = 48;
      __int16 v83 = 2080;
      *(void *)CFArrayRef v84 = "not (not source.empty())";
      _os_log_error_impl(&dword_1BAA78000, v52, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v67);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v72);
    std::logic_error::logic_error(&v65, &v72);
    v65.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v73, &v65);
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    int v78 = -1;
    v73.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unint64_t v74 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v73);
    *(void *)&v84[6] = "virtual Sample_Time_Range AMCP::DAL::Resampler2_Resampler::process(const Sample_Group<float> &,"
                         " Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
    *(void *)&v84[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Resampler2_Resampler.cpp";
    *(_DWORD *)&v84[22] = 48;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v69.__r_.__value_.__l.__data_);
    CFArrayRef v70 = &unk_1F148AA90;
    std::string v71 = v69;
    memset(&v69, 0, sizeof(v69));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "scale ratio");
  int v14 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a4, (unsigned __int8 *)&__p);
  if (v14) {
    double v15 = AMCP::Thing::convert_to<double>((uint64_t)(v14 + 40));
  }
  else {
    double v15 = 1.0;
  }
  if (SHIBYTE(v82) < 0) {
    operator delete(__p);
  }
  double v16 = a7 - a6;
  uint64_t v17 = *(uint64_t **)(a1 + 96);
  uint64_t v18 = *(uint64_t **)(a1 + 104);
  if (v17 != v18)
  {
    int v19 = vcvtmd_s64_f64(v16);
    int v20 = vcvtmd_s64_f64(a5);
    do
    {
      Resampler2::SetVarispeedRate(*v17, v15);
      if (*(_DWORD *)(a1 + 88) == 1)
      {
        LODWORD(__p) = v20;
        LODWORD(v73.__vftable) = 100 * v20;
        mach_port_t v21 = (AMCP::Log::Scope_Registry *)Resampler2::PreFlight(**(Resampler2 ***)(a1 + 96), (unsigned int *)&__p, (unsigned int *)&v73);
        if (!LODWORD(v73.__vftable))
        {
          AMCP::Log::Scope_Registry::get(v21);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
          uint64_t v43 = *(NSObject **)__p;
          if (*(void *)v80) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v80);
          }
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            __int16 v44 = pthread_self();
            mach_port_t v45 = pthread_mach_thread_np(v44);
            LODWORD(__p) = 67109890;
            HIDWORD(__p) = v45;
            *(_WORD *)unint64_t v80 = 2080;
            *(void *)&v80[2] = "Resampler2_Resampler.cpp";
            __int16 v81 = 1024;
            int v82 = 60;
            __int16 v83 = 2080;
            *(void *)CFArrayRef v84 = "not (output_length > 0)";
            _os_log_error_impl(&dword_1BAA78000, v43, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&__p, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v67);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v72);
          std::logic_error::logic_error(&v65, &v72);
          v65.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v73, &v65);
          uint64_t v75 = 0;
          uint64_t v76 = 0;
          uint64_t v77 = 0;
          int v78 = -1;
          v73.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          unint64_t v74 = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v73);
          *(void *)&v84[6] = "virtual Sample_Time_Range AMCP::DAL::Resampler2_Resampler::process(const Sample_Group<flo"
                               "at> &, Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
          *(void *)&v84[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Resampler2_Resampler.cpp";
          *(_DWORD *)&v84[22] = 60;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v69.__r_.__value_.__l.__data_);
          CFArrayRef v70 = &unk_1F148AA90;
          std::string v71 = v69;
          memset(&v69, 0, sizeof(v69));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        double v16 = (double)LODWORD(v73.__vftable);
      }
      else
      {
        LODWORD(__p) = v19;
        LODWORD(v73.__vftable) = 100 * v19;
        unint64_t v22 = (AMCP::Log::Scope_Registry *)Resampler2::PreFlight(**(Resampler2 ***)(a1 + 96), (unsigned int *)&v73, (unsigned int *)&__p);
        uint64_t v23 = LODWORD(v73.__vftable);
        if (vabdd_f64((double)LODWORD(v73.__vftable), a5) > 1.0)
        {
          AMCP::Log::Scope_Registry::get(v22);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
          __int16 v46 = *(NSObject **)__p;
          if (*(void *)v80) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v80);
          }
          if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
          {
            uint64_t v47 = pthread_self();
            mach_port_t v48 = pthread_mach_thread_np(v47);
            LODWORD(__p) = 67110402;
            HIDWORD(__p) = v48;
            *(_WORD *)unint64_t v80 = 2080;
            *(void *)&v80[2] = "Resampler2_Resampler.cpp";
            __int16 v81 = 1024;
            int v82 = 66;
            __int16 v83 = 2080;
            *(void *)CFArrayRef v84 = "not (std::abs(static_cast<double>(actual_input_consumed) - number_of_samples.get_double()) <= 1.0)";
            *(_WORD *)&v84[8] = 2048;
            *(void *)&v84[10] = v23;
            *(_WORD *)&v84[18] = 2048;
            *(double *)&v84[20] = a5;
            _os_log_error_impl(&dword_1BAA78000, v46, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s process failed: %llu < %f", (uint8_t *)&__p, 0x36u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v67);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"process failed: %llu < %f", (uint64_t)&v72, v23, *(void *)&a5);
          std::logic_error::logic_error(&v65, &v72);
          v65.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v73, &v65);
          uint64_t v75 = 0;
          uint64_t v76 = 0;
          uint64_t v77 = 0;
          int v78 = -1;
          v73.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          unint64_t v74 = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v73);
          *(void *)&v84[6] = "virtual Sample_Time_Range AMCP::DAL::Resampler2_Resampler::process(const Sample_Group<flo"
                               "at> &, Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
          *(void *)&v84[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Resampler2_Resampler.cpp";
          *(_DWORD *)&v84[22] = 66;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v69.__r_.__value_.__l.__data_);
          CFArrayRef v70 = &unk_1F148AA90;
          std::string v71 = v69;
          memset(&v69, 0, sizeof(v69));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
      }
      ++v17;
    }
    while (v17 != v18);
  }
  int v24 = (AMCP::DAL::PCM_Data_Handler *)*a3;
  AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(*a3);
  AMCP::DAL::PCM_Data_Handler::get_other_data<float>((unint64_t *)&v72, v24, a6, a6 + v16);
  uint64_t v26 = *a3;
  if (*a3)
  {
    int v27 = *(_DWORD *)(v26 + 20);
    unsigned int v28 = *(_DWORD *)(v26 + 36);
  }
  else
  {
    LOBYTE(v27) = 0;
    unsigned int v28 = 0;
  }
  if ((v27 & 0x20) != 0) {
    unsigned int v29 = 1;
  }
  else {
    unsigned int v29 = v28;
  }
  uint64_t v30 = a2[1] - *a2;
  unint64_t v31 = v30 >> 4;
  if (v30 >> 4 != (uint64_t)(v72.__r_.__value_.__l.__size_ - v72.__r_.__value_.__r.__words[0]) >> 4)
  {
    AMCP::Log::Scope_Registry::get(v25);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    uint64_t v55 = *(NSObject **)__p;
    if (*(void *)v80) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v80);
    }
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      uint64_t v56 = pthread_self();
      mach_port_t v57 = pthread_mach_thread_np(v56);
      LODWORD(__p) = 67109890;
      HIDWORD(__p) = v57;
      *(_WORD *)unint64_t v80 = 2080;
      *(void *)&v80[2] = "Resampler2_Resampler.cpp";
      __int16 v81 = 1024;
      int v82 = 75;
      __int16 v83 = 2080;
      *(void *)CFArrayRef v84 = "not (stream_count == dest.size())";
      _os_log_error_impl(&dword_1BAA78000, v55, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v68);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v69);
    std::logic_error::logic_error(&v67, &v69);
    v67.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v73, &v67);
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    int v78 = -1;
    v73.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unint64_t v74 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v73);
    *(void *)&v84[6] = "virtual Sample_Time_Range AMCP::DAL::Resampler2_Resampler::process(const Sample_Group<float> &,"
                         " Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
    *(void *)&v84[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Resampler2_Resampler.cpp";
    *(_DWORD *)&v84[22] = 75;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v65);
    CFArrayRef v70 = &unk_1F148AA90;
    *(std::logic_error *)&v71.__r_.__value_.__l.__data_ = v65;
    v71.__r_.__value_.__r.__words[2] = v66;
    v65.__vftable = 0;
    v65.__imp_.__imp_ = 0;
    std::string::size_type v66 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if ((*(unsigned char *)(a1 + 60) & 0x20) != 0)
  {
    if (v29 != 1)
    {
      AMCP::Log::Scope_Registry::get(v25);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
      CFArrayRef v58 = *(NSObject **)__p;
      if (*(void *)v80) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v80);
      }
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
      {
        unint64_t v59 = pthread_self();
        mach_port_t v60 = pthread_mach_thread_np(v59);
        LODWORD(__p) = 67109890;
        HIDWORD(__p) = v60;
        *(_WORD *)unint64_t v80 = 2080;
        *(void *)&v80[2] = "Resampler2_Resampler.cpp";
        __int16 v81 = 1024;
        int v82 = 108;
        __int16 v83 = 2080;
        *(void *)CFArrayRef v84 = "not (number_of_channels == 1)";
        _os_log_error_impl(&dword_1BAA78000, v58, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&__p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v68);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v69);
      std::logic_error::logic_error(&v67, &v69);
      v67.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v73, &v67);
      uint64_t v75 = 0;
      uint64_t v76 = 0;
      uint64_t v77 = 0;
      int v78 = -1;
      v73.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      unint64_t v74 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v73);
      *(void *)&v84[6] = "virtual Sample_Time_Range AMCP::DAL::Resampler2_Resampler::process(const Sample_Group<float> "
                           "&, Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
      *(void *)&v84[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Resampler2_Resampler.cpp";
      *(_DWORD *)&v84[22] = 108;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v65);
      CFArrayRef v70 = &unk_1F148AA90;
      *(std::logic_error *)&v71.__r_.__value_.__l.__data_ = v65;
      v71.__r_.__value_.__r.__words[2] = v66;
      v65.__vftable = 0;
      v65.__imp_.__imp_ = 0;
      std::string::size_type v66 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    if (v26)
    {
      int v37 = *(_DWORD *)(v26 + 20);
      LODWORD(v26) = *(_DWORD *)(v26 + 36);
    }
    else
    {
      LOBYTE(v37) = 0;
    }
    if ((v37 & 0x20) != 0) {
      uint64_t v26 = v26;
    }
    else {
      uint64_t v26 = 1;
    }
    if (v31 != v26)
    {
      AMCP::Log::Scope_Registry::get(v25);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
      unint64_t v61 = *(NSObject **)__p;
      if (*(void *)v80) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v80);
      }
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        unint64_t v62 = pthread_self();
        mach_port_t v63 = pthread_mach_thread_np(v62);
        LODWORD(__p) = 67109890;
        HIDWORD(__p) = v63;
        *(_WORD *)unint64_t v80 = 2080;
        *(void *)&v80[2] = "Resampler2_Resampler.cpp";
        __int16 v81 = 1024;
        int v82 = 109;
        __int16 v83 = 2080;
        *(void *)CFArrayRef v84 = "not (stream_count == dest_container.get_format().GetNumberChannelStreams())";
        _os_log_error_impl(&dword_1BAA78000, v61, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&__p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v68);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v69);
      std::logic_error::logic_error(&v67, &v69);
      v67.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v73, &v67);
      uint64_t v75 = 0;
      uint64_t v76 = 0;
      uint64_t v77 = 0;
      int v78 = -1;
      v73.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      unint64_t v74 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v73);
      *(void *)&v84[6] = "virtual Sample_Time_Range AMCP::DAL::Resampler2_Resampler::process(const Sample_Group<float> "
                           "&, Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
      *(void *)&v84[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Resampler2_Resampler.cpp";
      *(_DWORD *)&v84[22] = 109;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v65);
      CFArrayRef v70 = &unk_1F148AA90;
      *(std::logic_error *)&v71.__r_.__value_.__l.__data_ = v65;
      v71.__r_.__value_.__r.__words[2] = v66;
      v65.__vftable = 0;
      v65.__imp_.__imp_ = 0;
      std::string::size_type v66 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    LODWORD(__p) = vcvtmd_s64_f64(a5);
    LODWORD(v73.__vftable) = vcvtmd_s64_f64(v16);
    if ((unint64_t)v30 >= 0x20)
    {
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      if (v31 >> 1 <= 1) {
        uint64_t v40 = 1;
      }
      else {
        uint64_t v40 = v31 >> 1;
      }
      do
      {
        uint64_t v41 = *(void *)(a1 + 96);
        if (v39 >= (*(void *)(a1 + 104) - v41) >> 3) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        Resampler2::PushConvert(*(Resampler2 **)(v41 + 8 * v39++), *(const float **)(*a2 + v38), *(const float **)(*a2 + v38 + 16), *(float **)(v72.__r_.__value_.__r.__words[0] + v38), *(float **)(v72.__r_.__value_.__r.__words[0] + v38 + 16), (unsigned int *)&__p, (unsigned int *)&v73, 1, 1u, v64);
        v38 += 32;
      }
      while (v40 != v39);
    }
    if ((v30 & 0x10) != 0) {
      Resampler2::PushConvert(*(Resampler2 **)(*(void *)(a1 + 104) - 8), *(const float **)(*a2 + 16 * v31 - 16), 0, *(float **)(v72.__r_.__value_.__r.__words[0] + 16 * v31 - 16), 0, (unsigned int *)&__p, (unsigned int *)&v73, 1, 1u, v64);
    }
  }
  else
  {
    if (v29 >= 2)
    {
      uint64_t v32 = 0;
      unint64_t v33 = 0;
      int v34 = vcvtmd_s64_f64(a5);
      int v35 = vcvtmd_s64_f64(v16);
      do
      {
        LODWORD(__p) = v34;
        LODWORD(v73.__vftable) = v35;
        uint64_t v36 = *(void *)(a1 + 96);
        if (v33 >= (*(void *)(a1 + 104) - v36) >> 3) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        Resampler2::PushConvert(*(Resampler2 **)(v36 + v32), (const float *)(*(void *)*a2 + v32), (const float *)(*(void *)*a2 + v32 + 4), (float *)(*(void *)v72.__r_.__value_.__l.__data_ + v32), (float *)(*(void *)v72.__r_.__value_.__l.__data_ + v32 + 4), (unsigned int *)&__p, (unsigned int *)&v73, v29, v29, v64);
        ++v33;
        v32 += 8;
      }
      while (8 * (v29 >> 1) != v32);
    }
    if (v29)
    {
      LODWORD(__p) = vcvtmd_s64_f64(a5);
      LODWORD(v73.__vftable) = vcvtmd_s64_f64(v16);
      Resampler2::PushConvert(*(Resampler2 **)(*(void *)(a1 + 104) - 8), (const float *)(*(void *)*a2 + 4 * (v29 - 1)), 0, (float *)(*(void *)v72.__r_.__value_.__l.__data_ + 4 * (v29 - 1)), 0, (unsigned int *)&__p, (unsigned int *)&v73, v29, v29, v64);
    }
  }
  if (v72.__r_.__value_.__r.__words[0])
  {
    v72.__r_.__value_.__l.__size_ = v72.__r_.__value_.__r.__words[0];
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v72.__r_.__value_.__l.__data_, (uint64_t)(v72.__r_.__value_.__r.__words[2] - v72.__r_.__value_.__r.__words[0]) >> 4);
  }
  return a6;
}

void sub_1BABDC8A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,caulk::rt_safe_memory_resource *a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a31) {
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](a31, (a33 - (uint64_t)a31) >> 4);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::Resampler2_Resampler::~Resampler2_Resampler(AMCP::DAL::Resampler2_Resampler *this)
{
  AMCP::DAL::Resampler2_Resampler::~Resampler2_Resampler(this);

  JUMPOUT(0x1C1859840);
}

{
  void **v2;

  Resampler2::ShutdownVarispeedMode((Resampler2 *)*((unsigned int *)this + 30));
  double v2 = (void **)((char *)this + 96);
  std::vector<std::unique_ptr<Resampler2>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<std::unique_ptr<Resampler2>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  double v2 = (Resampler2 **)**a1;
  if (v2)
  {
    unsigned int v4 = (Resampler2 **)v1[1];
    unsigned int v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<Resampler2>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

Resampler2 *std::unique_ptr<Resampler2>::reset[abi:ne180100](Resampler2 **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    Resampler2::~Resampler2(result);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

uint64_t AMCP::Thing::convert_to<AMCP::Resampler_Quality>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t v2 = AMCP::Implementation::get_type_marker<AMCP::Resampler_Quality>();
  unsigned int v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  int v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    unsigned int v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))v2)
  {
    uint64_t v18 = v2;
    unsigned int v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4) {
      return *v4;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFDictionaryRef v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<AMCP::Resampler_Quality>();
  memset(v16, 0, sizeof(v16));
  uint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    mach_port_t v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFStringRef v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = v2;
  unsigned int v6 = (unsigned int *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    mach_port_t v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5;
}

void sub_1BABDCD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<AMCP::Resampler_Quality>()
{
  uint64_t v0 = &unk_1E9F79000;
  {
    uint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      uint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[259];
}

uint64_t HALS_IOStreamInfo::write_to_engine(HALS_IOStreamInfo *this, uint64_t a2)
{
  if (!*((_DWORD *)this + 27)
    || ((unsigned int v4 = (void *)*((void *)this + 14), *((void **)this + 15) != v4) ? (v5 = v4 == 0) : (v5 = 1), v5))
  {
    unsigned int v4 = (void *)((char *)this + 408);
  }
  uint64_t v6 = *v4;
  uint64_t result = (*(uint64_t (**)(void))(*(void *)*v4 + 16))(*v4);
  if (result)
  {
    if (*(unsigned char *)(v6 + 751))
    {
      int v8 = *((_DWORD *)this + 6);
      int v9 = *(_DWORD *)(v6 + 672);
      uint64_t v10 = *((void *)this + 2);
      int v11 = 0;
      int v12 = v8;
      int v13 = v9;
      return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v6 + 88))(v6, a2, *((unsigned int *)this + 3));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t HALS_IOStreamInfo::write_to_hosted_dsp(uint64_t a1, uint64_t a2, int a3)
{
  HostedDSP_StreamProcessor::StreamProcessInfo::StreamProcessInfo((uint64_t)&v11, 1869968496, a2, a1, a3);
  if (v11 != 1869968496) {
    return 0;
  }
  unsigned int v3 = *(uint64_t **)(v13 + 112);
  unsigned int v4 = *(uint64_t **)(v13 + 120);
  if (v3 == v4) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    uint64_t v6 = *v3;
    if (*v3)
    {
      if (*(unsigned char *)(v6 + 751))
      {
        int v7 = *((_DWORD *)v3 + 6);
        unsigned int v8 = *(_DWORD *)(v6 + 672);
        uint64_t v14 = v3[2];
        int v15 = 0;
        int v16 = v7;
        unsigned int v17 = v8;
        uint64_t v9 = *(void *)(v6 + 8);
        uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 80))(v12);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t *))(*(void *)v9 + 800))(v9, v10, *((unsigned int *)v3 + 24), v17, *v3, &v14);
      }
    }
    v3 += 16;
  }
  while (v3 != v4);
  return result;
}

void HALS_IOStreamInfo::~HALS_IOStreamInfo(HALS_IOStreamInfo *this)
{
  HALS_IOStreamInfo::~HALS_IOStreamInfo(this);

  JUMPOUT(0x1C1859840);
}

{
  void *v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;
  void *v6;
  void *v7;
  void *v8;

  *(void *)this = &unk_1F1489938;
  int v2 = (void *)*((void *)this + 36);
  if (v2)
  {
    *((void *)this + 37) = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)*((void *)this + 33);
  if (v3)
  {
    *((void *)this + 34) = v3;
    operator delete(v3);
  }
  if (*((unsigned char *)this + 248))
  {
    unsigned int v4 = (void *)*((void *)this + 28);
    if (v4)
    {
      *((void *)this + 29) = v4;
      operator delete(v4);
    }
  }
  BOOL v5 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 22));
  uint64_t v6 = (void *)*((void *)this + 17);
  if (v6)
  {
    *((void *)this + 1_Block_object_dispose(&a9, 8) = v6;
    operator delete(v6);
  }
  int v7 = (void *)*((void *)this + 14);
  if (v7)
  {
    *((void *)this + 15) = v7;
    operator delete(v7);
  }
  unsigned int v8 = (void *)*((void *)this + 9);
  if (v8)
  {
    *((void *)this + 10) = v8;
    operator delete(v8);
  }
}

void non-virtual thunk to'HALS_IOUADriver::~HALS_IOUADriver(HALS_IOUADriver *this)
{
  HALS_IOUADriver::~HALS_IOUADriver((HALS_IOUADriver *)((char *)this - 328));

  JUMPOUT(0x1C1859840);
}

{
  HALS_IOUADriver::~HALS_IOUADriver((HALS_IOUADriver *)((char *)this - 328));
}

void HALS_IOUADriver::~HALS_IOUADriver(HALS_IOUADriver *this)
{
  *(void *)this = &unk_1F1463CC8;
  int v2 = (HALS_IOUADriver *)((char *)this + 328);
  *((void *)this + 41) = &unk_1F1463E08;
  unsigned int v3 = (void *)*((void *)this + 107);
  if (v3)
  {
    *((void *)this + 10_Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)*((void *)this + 104);
  if (v4)
  {
    *((void *)this + 105) = v4;
    operator delete(v4);
  }
  BOOL v5 = (void *)*((void *)this + 101);
  if (v5)
  {
    *((void *)this + 102) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_IOUADriver *)((char *)this + 472));
  HALB_Mutex::~HALB_Mutex((HALS_IOUADriver *)((char *)this + 376));
  HALS_IOUAObject::~HALS_IOUAObject(v2, v7);
  *(void *)this = &unk_1F14725F8;
  CACFString::~CACFString((HALS_IOUADriver *)((char *)this + 48));

  HALS_Object::~HALS_Object(this);
}

{
  uint64_t vars8;

  HALS_IOUADriver::~HALS_IOUADriver(this);

  JUMPOUT(0x1C1859840);
}

void HALS_IOUADriver::_CopyDeviceList(uint64_t a1, void **a2)
{
  int v2 = *(HALS_ObjectMap ***)(a1 + 808);
  unsigned int v3 = *(HALS_ObjectMap ***)(a1 + 816);
  if (v2 != v3)
  {
    unsigned int v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, (HALS_Object *)a2);
      BOOL v5 = *v2;
      int v7 = (HALS_ObjectMap **)v4[1];
      unint64_t v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = ((char *)v7 - (unsigned char *)*v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v6 - (void)*v4;
        uint64_t v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        }
        else {
          a2 = 0;
        }
        uint64_t v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        *uint64_t v13 = v5;
        unsigned int v8 = v13 + 1;
        int v15 = (char *)*v4;
        uint64_t v14 = (char *)v4[1];
        if (v14 != *v4)
        {
          do
          {
            int v16 = (HALS_ObjectMap *)*((void *)v14 - 1);
            v14 -= 8;
            *--uint64_t v13 = v16;
          }
          while (v14 != v15);
          uint64_t v14 = (char *)*v4;
        }
        *unsigned int v4 = v13;
        v4[1] = v8;
        v4[2] = (void *)(v12 + 8 * (void)a2);
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *int v7 = v5;
        unsigned int v8 = v7 + 1;
      }
      v4[1] = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

void HALS_IOUADriver::_CopyIODeviceList(void *a1, void **a2)
{
  int v2 = a2;
  unsigned int v4 = (HALS_ObjectMap **)a1[104];
  for (CFArrayRef i = (HALS_ObjectMap **)a1[105]; v4 != i; ++v4)
  {
    HALS_ObjectMap::RetainObject(*v4, (HALS_Object *)a2);
    unint64_t v6 = *v4;
    unsigned int v8 = (HALS_ObjectMap **)v2[1];
    unint64_t v7 = (unint64_t)v2[2];
    if ((unint64_t)v8 >= v7)
    {
      uint64_t v10 = ((char *)v8 - (unsigned char *)*v2) >> 3;
      if ((unint64_t)(v10 + 1) >> 61) {
LABEL_38:
      }
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      uint64_t v11 = v7 - (void)*v2;
      uint64_t v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
        uint64_t v12 = v10 + 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13) {
        unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v13);
      }
      else {
        a2 = 0;
      }
      uint64_t v14 = (HALS_ObjectMap **)(v13 + 8 * v10);
      *uint64_t v14 = v6;
      uint64_t v9 = v14 + 1;
      int v16 = (char *)*v2;
      int v15 = (char *)v2[1];
      if (v15 != *v2)
      {
        do
        {
          unsigned int v17 = (HALS_ObjectMap *)*((void *)v15 - 1);
          v15 -= 8;
          *--uint64_t v14 = v17;
        }
        while (v15 != v16);
        int v15 = (char *)*v2;
      }
      HALS_IOUAObject *v2 = v14;
      v2[1] = v9;
      v2[2] = (void *)(v13 + 8 * (void)a2);
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *unsigned int v8 = v6;
      uint64_t v9 = v8 + 1;
    }
    v2[1] = v9;
  }
  uint64_t v18 = (HALS_ObjectMap **)a1[101];
  for (CFMutableDictionaryRef j = (HALS_ObjectMap **)a1[102]; v18 != j; ++v18)
  {
    HALS_ObjectMap::RetainObject(*v18, (HALS_Object *)a2);
    int v20 = *v18;
    unint64_t v22 = (HALS_ObjectMap **)v2[1];
    unint64_t v21 = (unint64_t)v2[2];
    if ((unint64_t)v22 >= v21)
    {
      uint64_t v24 = ((char *)v22 - (unsigned char *)*v2) >> 3;
      if ((unint64_t)(v24 + 1) >> 61) {
        goto LABEL_38;
      }
      uint64_t v25 = v21 - (void)*v2;
      uint64_t v26 = v25 >> 2;
      if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
        uint64_t v26 = v24 + 1;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v26;
      }
      if (v27) {
        unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v27);
      }
      else {
        a2 = 0;
      }
      unsigned int v28 = (HALS_ObjectMap **)(v27 + 8 * v24);
      char *v28 = v20;
      uint64_t v23 = v28 + 1;
      uint64_t v30 = (char *)*v2;
      unsigned int v29 = (char *)v2[1];
      if (v29 != *v2)
      {
        do
        {
          unint64_t v31 = (HALS_ObjectMap *)*((void *)v29 - 1);
          v29 -= 8;
          *--unsigned int v28 = v31;
        }
        while (v29 != v30);
        unsigned int v29 = (char *)*v2;
      }
      HALS_IOUAObject *v2 = v28;
      v2[1] = v23;
      v2[2] = (void *)(v27 + 8 * (void)a2);
      if (v29) {
        operator delete(v29);
      }
    }
    else
    {
      *unint64_t v22 = v20;
      uint64_t v23 = v22 + 1;
    }
    v2[1] = v23;
  }
}

void HALS_IOUADriver::_CopyClockDeviceList(uint64_t a1, void **a2)
{
  int v2 = *(HALS_ObjectMap ***)(a1 + 832);
  unsigned int v3 = *(HALS_ObjectMap ***)(a1 + 840);
  if (v2 != v3)
  {
    unsigned int v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, (HALS_Object *)a2);
      BOOL v5 = *v2;
      unint64_t v7 = (HALS_ObjectMap **)v4[1];
      unint64_t v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = ((char *)v7 - (unsigned char *)*v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v6 - (void)*v4;
        uint64_t v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        }
        else {
          a2 = 0;
        }
        unint64_t v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        *unint64_t v13 = v5;
        unsigned int v8 = v13 + 1;
        int v15 = (char *)*v4;
        uint64_t v14 = (char *)v4[1];
        if (v14 != *v4)
        {
          do
          {
            int v16 = (HALS_ObjectMap *)*((void *)v14 - 1);
            v14 -= 8;
            *--unint64_t v13 = v16;
          }
          while (v14 != v15);
          uint64_t v14 = (char *)*v4;
        }
        *unsigned int v4 = v13;
        v4[1] = v8;
        v4[2] = (void *)(v12 + 8 * (void)a2);
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *unint64_t v7 = v5;
        unsigned int v8 = v7 + 1;
      }
      v4[1] = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

void HALS_IOUADriver::_CopyBoxList(uint64_t a1, void **a2)
{
  int v2 = *(HALS_ObjectMap ***)(a1 + 856);
  unsigned int v3 = *(HALS_ObjectMap ***)(a1 + 864);
  if (v2 != v3)
  {
    unsigned int v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, (HALS_Object *)a2);
      BOOL v5 = *v2;
      unint64_t v7 = (HALS_ObjectMap **)v4[1];
      unint64_t v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = ((char *)v7 - (unsigned char *)*v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v6 - (void)*v4;
        uint64_t v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        }
        else {
          a2 = 0;
        }
        unint64_t v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        *unint64_t v13 = v5;
        unsigned int v8 = v13 + 1;
        int v15 = (char *)*v4;
        uint64_t v14 = (char *)v4[1];
        if (v14 != *v4)
        {
          do
          {
            int v16 = (HALS_ObjectMap *)*((void *)v14 - 1);
            v14 -= 8;
            *--unint64_t v13 = v16;
          }
          while (v14 != v15);
          uint64_t v14 = (char *)*v4;
        }
        *unsigned int v4 = v13;
        v4[1] = v8;
        v4[2] = (void *)(v12 + 8 * (void)a2);
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *unint64_t v7 = v5;
        unsigned int v8 = v7 + 1;
      }
      v4[1] = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

uint64_t HALS_DeviceManager::DoAnyQueuesHaveWorkAfterFlush(HALS_DeviceManager *this)
{
  return 0;
}

void HALS_IOUADriver::SetPropertyData(HALS_IOUADriver *this, HALS_Client *a2, const AudioObjectPropertyAddress *a3, unsigned int a4, const AudioObjectPropertyAddress *a5, unsigned int a6, CFTypeRef *a7, HALS_Client *a8)
{
  if (HALS_DeviceManager::HasProperty(this, a2, a3, a8)) {
    HALS_Object::SetPropertyData((uint64_t)this, (uint64_t)a2, (uint64_t)a3, v14, (uint64_t)v15, v16, (uint64_t)v17, (uint64_t)a8);
  }

  HALS_IOUAObject::SetPropertyData((HALS_IOUADriver *)((char *)this + 328), &a3->mSelector, a5, a7, v15, v16, v17, v18);
}

void HALS_IOUADriver::GetPropertyData(HALS_IOUADriver *this, HALS_Client *a2, AudioObjectPropertyAddress *a3, unsigned int a4, AudioObjectPropertyAddress *a5, char *a6, unsigned int a7, void *a8, HALS_Client *a9)
{
  if (a3->mSelector == 1668641652)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 45) - *((void *)this + 44)) >> 2) >= a4 / 0xCuLL) {
      unint64_t v13 = a4 / 0xCuLL;
    }
    else {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 45) - *((void *)this + 44)) >> 2);
    }
    if (v13)
    {
      uint64_t v14 = 0;
      unint64_t v15 = 0;
      do
      {
        uint64_t v16 = *((void *)this + 44);
        if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 45) - v16) >> 2) > v15)
        {
          unsigned int v17 = &a6[v14];
          uint64_t v18 = (uint64_t *)(v16 + v14);
          uint64_t v19 = *v18;
          *((_DWORD *)v17 + 2) = *((_DWORD *)v18 + 2);
          *(void *)unsigned int v17 = v19;
        }
        ++v15;
        v14 += 12;
      }
      while (12 * v13 != v14);
    }
    a5->signed int mSelector = 12 * v13;
  }
  else if (HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(*((void *)this + 99) + 4), a3, 1u))
  {
    unint64_t v27 = a4;
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(*((void *)this + 99) + 4), a3, 1u, a8, a7, a6, &v27);
    a5->signed int mSelector = v27;
  }
  else if (HALS_DeviceManager::HasProperty(this, a2, a3, a9))
  {
    HALS_DeviceManager::GetPropertyData(this, (uint64_t)a2, a3, a4, &a5->mSelector, (uint64_t *)a6, a7, (const __CFString **)a8, a9);
  }
  else
  {
    HALS_IOUAObject::GetPropertyData((HALS_IOUADriver *)((char *)this + 328), &a3->mSelector, a5, (AMCP::Log::Scope_Registry **)a6, (unsigned int *)a8, v24, v25, v26, a9);
  }
}

uint64_t HALS_IOUADriver::GetPropertyDataSize(HALS_IOUADriver *this, HALS_Client *a2, AudioObjectPropertyAddress *a3, unsigned int a4, _DWORD *a5, HALS_Client *a6)
{
  if (a3->mSelector == 1668641652) {
    return (*((_DWORD *)this + 90) - *((_DWORD *)this + 88)) & 0xFFFFFFFC;
  }
  if (HALS_DeviceManager::HasProperty(this, a2, a3, a6))
  {
    return HALS_DeviceManager::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
  }
  else
  {
    return HALS_IOUAObject::GetPropertyDataSize((HALS_IOUADriver *)((char *)this + 328), a3, v13, v14, v15, v16);
  }
}

uint64_t HALS_IOUADriver::IsPropertySettable(HALS_IOUADriver *this, HALS_Client *a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  if (a3->mSelector == 1668641652) {
    return 0;
  }
  if (HALS_DeviceManager::HasProperty(this, a2, a3, a4))
  {
    return HALS_DeviceManager::IsPropertySettable((uint64_t)this, (uint64_t)a2, (int *)a3);
  }
  else
  {
    return HALS_IOUAObject::IsPropertySettable((HALS_IOUADriver *)((char *)this + 328), a3, v8, v9);
  }
}

uint64_t HALS_IOUADriver::HasProperty(HALS_IOUADriver *this, HALS_Client *a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  if (a3->mSelector == 1668641652) {
    return *((void *)this + 45) != *((void *)this + 44);
  }
  if (HALS_DeviceManager::HasProperty(this, a2, a3, a4)) {
    return 1;
  }
  unint64_t v6 = *(uint64_t (**)(void))(*((void *)this + 41) + 16);

  return v6();
}

uint64_t HALS_IOUADriver::GetMIGDispatchQueue(HALS_IOUADriver *this)
{
  return (uint64_t)this + 472;
}

{
  return (uint64_t)this + 472;
}

uint64_t HALS_IOUADriver::GetCommandGate(HALS_IOUADriver *this)
{
  return (uint64_t)this + 376;
}

{
  return (uint64_t)this + 376;
}

uint64_t HALS_IOUADriver::_Deactivate(uint64_t this)
{
  *(_DWORD *)(this + _Block_object_dispose(&a9, 8) = 0;
  return this;
}

void HALS_IOUADriver::Activate(HALS_IOUADriver *this)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 99);
  unsigned int v3 = (AMCP::Log::Scope_Registry *)IOServiceOpen(*(_DWORD *)v2, *MEMORY[0x1E4F14960], 0x43417564u, (io_connect_t *)(v2 + 4));
  if (!v3)
  {
    unsigned int v4 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod(*(_DWORD *)(v2 + 4), 0, 0, 0, 0, 0, 0, 0, 0, 0);
    if (!v4)
    {
      reference_8[0] = (uint64_t)HALS_IOUAUCDriver::properties_changed_callback;
      reference_8[1] = v2;
      mach_port_t v5 = *(_DWORD *)(v2 + 4);
      mach_port_t MachPort = IONotificationPortGetMachPort(*(IONotificationPortRef *)(v2 + 328));
      unint64_t v7 = (AMCP::Log::Scope_Registry *)IOConnectCallAsyncMethod(v5, 2u, MachPort, (uint64_t *)&reference, 8u, 0, 0, 0, 0, 0, 0, 0, 0);
      int v8 = (int)v7;
      if (!v7)
      {
        reference_8[0] = (uint64_t)HALS_IOUAUCDriver::request_config_change_callback;
        reference_8[1] = v2;
        mach_port_t v9 = *(_DWORD *)(v2 + 4);
        mach_port_t v10 = IONotificationPortGetMachPort(*(IONotificationPortRef *)(v2 + 656));
        uint64_t v11 = (AMCP::Log::Scope_Registry *)IOConnectCallAsyncMethod(v9, 3u, v10, (uint64_t *)&reference, 8u, 0, 0, 0, 0, 0, 0, 0, 0);
        int v13 = (int)v11;
        if (!v11)
        {
          HALS_Object::Activate(this, v12);
          (*(void (**)(void))(*((void *)this + 41) + 24))();
          HALS_IOUADriver::RebuildDeviceList((HALS_IOUADriver *)&v39, this);
        }
        AMCP::Log::Scope_Registry::get(v11);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v39, "com.apple.coreaudio", "AMCP");
        uint64_t v25 = *v39;
        if (v40.__vftable) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v40.__vftable);
        }
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          uint64_t v26 = pthread_self();
          mach_port_t v27 = pthread_mach_thread_np(v26);
          LODWORD(v39) = 67110146;
          HIDWORD(v39) = v27;
          LOWORD(v40.__vftable) = 2080;
          *(std::runtime_error_vtbl **)((char *)&v40.__vftable + 2) = (std::runtime_error_vtbl *)"HALS_IOUAUCDriver.cpp";
          WORD1(v40.__imp_.__imp_) = 1024;
          HIDWORD(v40.__imp_.__imp_) = 74;
          LOWORD(v41) = 2080;
          *(void *)((char *)&v41 + 2) = "ret != kIOReturnSuccess";
          WORD5(v41) = 1024;
          HIDWORD(v41) = v13;
          _os_log_error_impl(&dword_1BAA78000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to set request config change async callback %u", (uint8_t *)&v39, 0x28u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v38);
        __cxa_allocate_exception(0x40uLL);
        std::runtime_error::runtime_error(&v32, "Failed to set request config change async callback");
        std::runtime_error::runtime_error((std::runtime_error *)v33, &v32);
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        int v37 = -1;
        *(void *)unint64_t v33 = &unk_1F148A9A8;
        *(void *)&v33[16] = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v39, (uint64_t)v33);
        *((void *)&v41 + 1) = "void HALS_IOUAUCDriver::Activate()";
        mach_port_t v42 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
        int v43 = 74;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v28);
        *(void *)uint64_t v30 = &unk_1F148AA90;
        *(std::runtime_error *)&v30[8] = v28;
        uint64_t v31 = v29;
        v28.__vftable = 0;
        v28.__imp_.__imp_ = 0;
        uint64_t v29 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      AMCP::Log::Scope_Registry::get(v7);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v39, "com.apple.coreaudio", "AMCP");
      unint64_t v22 = *v39;
      if (v40.__vftable) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v40.__vftable);
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = pthread_self();
        mach_port_t v24 = pthread_mach_thread_np(v23);
        LODWORD(v39) = 67110146;
        HIDWORD(v39) = v24;
        LOWORD(v40.__vftable) = 2080;
        *(std::runtime_error_vtbl **)((char *)&v40.__vftable + 2) = (std::runtime_error_vtbl *)"HALS_IOUAUCDriver.cpp";
        WORD1(v40.__imp_.__imp_) = 1024;
        HIDWORD(v40.__imp_.__imp_) = 64;
        LOWORD(v41) = 2080;
        *(void *)((char *)&v41 + 2) = "ret != kIOReturnSuccess";
        WORD5(v41) = 1024;
        HIDWORD(v41) = v8;
        _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to set properties changed async callback %u", (uint8_t *)&v39, 0x28u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v38);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v32, "Failed to set properties changed async callback");
      std::runtime_error::runtime_error((std::runtime_error *)v33, &v32);
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      int v37 = -1;
      *(void *)unint64_t v33 = &unk_1F148A9A8;
      *(void *)&v33[16] = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v39, (uint64_t)v33);
      *((void *)&v41 + 1) = "void HALS_IOUAUCDriver::Activate()";
      mach_port_t v42 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
      int v43 = 64;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v28);
      *(void *)uint64_t v30 = &unk_1F148AA90;
      *(std::runtime_error *)&v30[8] = v28;
      uint64_t v31 = v29;
      v28.__vftable = 0;
      v28.__imp_.__imp_ = 0;
      uint64_t v29 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    int v18 = (int)v4;
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&reference, "com.apple.coreaudio", "AMCP");
    uint64_t v19 = *reference;
    if (reference_8[0]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)reference_8[0]);
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v20 = pthread_self();
      mach_port_t v21 = pthread_mach_thread_np(v20);
      LODWORD(reference) = 67110146;
      HIDWORD(reference) = v21;
      LOWORD(reference_8[0]) = 2080;
      *(uint64_t *)((char *)reference_8 + 2) = (uint64_t)"HALS_IOUAUCDriver.cpp";
      WORD1(reference_8[1]) = 1024;
      HIDWORD(reference_8[1]) = 54;
      __int16 v46 = 2080;
      *(void *)uint64_t v47 = "ret != kIOReturnSuccess";
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)&v47[10] = v18;
      _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to open connection %u", (uint8_t *)&reference, 0x28u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v28, "failed to open connection");
    std::runtime_error::runtime_error((std::runtime_error *)&v39, &v28);
    long long v41 = 0uLL;
    mach_port_t v42 = 0;
    int v43 = -1;
    unint64_t v39 = (NSObject **)&unk_1F148A9A8;
    v40.__imp_.__imp_ = (const char *)&unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&reference, (uint64_t)&v39);
    *(void *)&v47[6] = "void HALS_IOUAUCDriver::Activate()";
    mach_port_t v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v49 = 54;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v30);
    *(void *)unint64_t v33 = &unk_1F148AA90;
    *(_OWORD *)&v33[8] = *(_OWORD *)v30;
    uint64_t v34 = *(void *)&v30[16];
    memset(v30, 0, sizeof(v30));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  int v14 = (int)v3;
  AMCP::Log::Scope_Registry::get(v3);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&reference, "com.apple.coreaudio", "AMCP");
  unint64_t v15 = *reference;
  if (reference_8[0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)reference_8[0]);
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    uint64_t v16 = pthread_self();
    mach_port_t v17 = pthread_mach_thread_np(v16);
    LODWORD(reference) = 67110146;
    HIDWORD(reference) = v17;
    LOWORD(reference_8[0]) = 2080;
    *(uint64_t *)((char *)reference_8 + 2) = (uint64_t)"HALS_IOUAUCDriver.cpp";
    WORD1(reference_8[1]) = 1024;
    HIDWORD(reference_8[1]) = 49;
    __int16 v46 = 2080;
    *(void *)uint64_t v47 = "error";
    *(_WORD *)&v47[8] = 1024;
    *(_DWORD *)&v47[10] = v14;
    _os_log_error_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to open connection %u", (uint8_t *)&reference, 0x28u);
  }
  AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
  __cxa_allocate_exception(0x40uLL);
  std::runtime_error::runtime_error(&v28, "failed to open connection");
  std::runtime_error::runtime_error((std::runtime_error *)&v39, &v28);
  long long v41 = 0uLL;
  mach_port_t v42 = 0;
  int v43 = -1;
  unint64_t v39 = (NSObject **)&unk_1F148A9A8;
  v40.__imp_.__imp_ = (const char *)&unk_1F148A9D0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&reference, (uint64_t)&v39);
  *(void *)&v47[6] = "void HALS_IOUAUCDriver::Activate()";
  mach_port_t v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
  int v49 = 49;
  applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v30);
  *(void *)unint64_t v33 = &unk_1F148AA90;
  *(_OWORD *)&v33[8] = *(_OWORD *)v30;
  uint64_t v34 = *(void *)&v30[16];
  memset(v30, 0, sizeof(v30));
  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
}

void sub_1BABDE66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::runtime_error a17, uint64_t a18, uint64_t a19, void *a20,void *__p,uint64_t a22,uint64_t a23,std::runtime_error a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  uint64_t v29 = *(void **)(v27 - 128);
  if (v29) {
    operator delete(v29);
  }
  uint64_t v30 = *(void **)(v27 - 192);
  if (v30) {
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOUADriver::RebuildDeviceList(HALS_IOUADriver *this, HALS_DeviceManager *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  uint64_t v3 = *((void *)a2 + 99);
  uint64_t PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v3 + 4), (const AudioObjectPropertyAddress *)"#vedbolg", 1u, 0, 0);
  std::vector<unsigned int>::vector(&v6, PropertySize >> 2);
  unint64_t v7 = (char *)v6.__end_ - (char *)v6.__begin_;
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v3 + 4), (const AudioObjectPropertyAddress *)"#vedbolg", 1u, 0, 0, v6.__begin_, &v7);
  memset(v5, 0, sizeof(v5));
  HALS_DeviceManager::CopyDeviceList(a2, (HALS_DeviceManager::BasicDeviceList *)v5, 1, 0);
  operator new[]();
}

void sub_1BABDEE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, HALS_ObjectMap **a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  MEMORY[0x1C1859810](a10, 0x1000C8052888210);
  MEMORY[0x1C1859810](v19, 0x1000C8052888210);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&a15, v22);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  uint64_t v23 = *(void **)v20;
  if (*(void *)v20)
  {
    *(void *)(v20 + _Block_object_dispose(&a9, 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void HALS_IOUADriver::RebuildClockDeviceList(HALS_IOUADriver *this)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 99);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v2 + 4), (const AudioObjectPropertyAddress *)"#klcbolg", 1u, 0, 0);
  std::vector<unsigned int>::vector(&v46, PropertySize >> 2);
  *(void *)buf = (char *)v46.__end_ - (char *)v46.__begin_;
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v2 + 4), (const AudioObjectPropertyAddress *)"#klcbolg", 1u, 0, 0, v46.__begin_, (unint64_t *)buf);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int v43 = 0;
  __int16 v44 = 0;
  uint64_t v45 = 0;
  HALS_DeviceManager::CopyClockDeviceList((uint64_t)this, (uint64_t)&v43);
  std::runtime_error v40 = this;
  std::vector<unsigned int>::pointer begin = v46.__begin_;
  std::vector<unsigned int>::pointer end = v46.__end_;
  if (v46.__begin_ == v46.__end_)
  {
    int v8 = 0;
    long long v41 = 0;
  }
  else
  {
    int v8 = 0;
    long long v41 = 0;
    unint64_t v9 = 0;
    mach_port_t v10 = 0;
    do
    {
      uint64_t v11 = v43;
      if (v43 == v44)
      {
LABEL_10:
        if ((unint64_t)v10 >= v9)
        {
          uint64_t v12 = v10 - v8;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v9 - (void)v8) >> 1 > v13) {
            unint64_t v13 = (uint64_t)(v9 - (void)v8) >> 1;
          }
          if (v9 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v13;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v14);
            mach_port_t v10 = v41;
          }
          else
          {
            mach_port_t v5 = 0;
          }
          unint64_t v15 = (unsigned int *)(v14 + 4 * v12);
          *unint64_t v15 = *begin;
          long long v41 = v15 + 1;
          while (v10 != v8)
          {
            unsigned int v16 = *--v10;
            *--unint64_t v15 = v16;
          }
          unint64_t v9 = v14 + 4 * (void)v5;
          if (v8) {
            operator delete(v8);
          }
          int v8 = v15;
          mach_port_t v10 = v41;
        }
        else
        {
          *v10++ = *begin;
          long long v41 = v10;
        }
      }
      else
      {
        while (*((_DWORD *)*v11 + 11) != *begin)
        {
          if (++v11 == v44) {
            goto LABEL_10;
          }
        }
      }
      ++begin;
    }
    while (begin != end);
  }
  mach_port_t v17 = v43;
  unint64_t v18 = (unint64_t)v44;
  if (v43 == v44)
  {
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    unint64_t v22 = 0;
    do
    {
      uint64_t v23 = v46.__begin_;
      if (v46.__begin_ == v46.__end_)
      {
LABEL_35:
        int v24 = *((_DWORD *)*v17 + 11);
        if ((unint64_t)v22 >= v21)
        {
          uint64_t v25 = v22 - v19;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 62) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v21 - (void)v19) >> 1 > v26) {
            unint64_t v26 = (uint64_t)(v21 - (void)v19) >> 1;
          }
          if (v21 - (unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v26;
          }
          if (v27)
          {
            unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v27);
            unint64_t v22 = v20;
          }
          else
          {
            mach_port_t v5 = 0;
          }
          std::runtime_error v28 = (int *)(v27 + 4 * v25);
          int *v28 = v24;
          uint64_t v20 = v28 + 1;
          while (v22 != v19)
          {
            int v29 = *--v22;
            *--std::runtime_error v28 = v29;
          }
          unint64_t v21 = v27 + 4 * (void)v5;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v19 = v28;
          unint64_t v22 = v20;
        }
        else
        {
          *v22++ = v24;
          uint64_t v20 = v22;
        }
      }
      else
      {
        while (*((_DWORD *)*v17 + 11) != *v23)
        {
          if (++v23 == v46.__end_) {
            goto LABEL_35;
          }
        }
      }
      ++v17;
    }
    while (v17 != (HALS_ObjectMap **)v18);
    if (v19 != v22)
    {
      uint64_t v30 = v19;
      do
      {
        uint64_t v31 = (unsigned int *)HALS_IOUADriver::CopyObjectByUCID(v40, *v30);
        unint64_t v33 = (HALS_IOUAClockDevice *)v31;
        if (v31)
        {
          uint64_t v34 = (HALS_System *)*((void *)v40 + 40);
          uint64_t v35 = (const BOOL *)v31[4];
          unint64_t v18 = v31[7];
          CFStringRef v36 = (const __CFString *)(*(uint64_t (**)(unsigned int *))(*(void *)v31 + 200))(v31);
          HALS_System::ClockDeviceDied(v34, v35, v18, v36);
          (*(void (**)(HALS_IOUAClockDevice *))(*(void *)v33 + 8))(v33);
          HALS_IOUADriver::RemoveClockDevice(v40, v33);
        }
        HALS_ObjectMap::ReleaseObject(v33, v32);
        ++v30;
      }
      while (v30 != v22);
    }
  }
  if (v8 != v41)
  {
    int v37 = v8;
    do
    {
      unint64_t v39 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v37);
      if (!v39)
      {
        *(void *)&long long v49 = *v37;
        *((void *)&v49 + 1) = 0x676C6F6275696420;
        HALS_IOUAUCDriver::get_string_property((HALS_IOUAUCDriver *)&cf, *((void *)v40 + 99), v49, (void *)(v18 & 0xFFFFFFFF00000000), 0, 0);
        operator new();
      }
      HALS_ObjectMap::ReleaseObject(v39, v38);
      ++v37;
    }
    while (v37 != v41);
  }
  if (v19) {
    operator delete(v19);
  }
  if (v8) {
    operator delete(v8);
  }
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v43, v5);
  if (v46.__begin_)
  {
    v46.__end_ = v46.__begin_;
    operator delete(v46.__begin_);
  }
}

void sub_1BABDFABC(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,HALS_ObjectMap **a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (v35) {
    operator delete(v35);
  }
  if (v36) {
    operator delete(v36);
  }
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&a31, a2);
  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1BABDFB6C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BABDFB78);
  }
  JUMPOUT(0x1BABDFB80);
}

void HALS_IOUADriver::RebuildBoxList(HALS_IOUADriver *this)
{
  v11[0] = 0;
  v11[1] = v11;
  uint64_t v11[2] = 0x2000000000;
  char v12 = 0;
  uint64_t v2 = *((void *)this + 99);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v2 + 4), (const AudioObjectPropertyAddress *)"#xobbolg", 1u, 0, 0);
  std::vector<unsigned int>::vector(&v10, PropertySize >> 2);
  unint64_t v13 = (char *)v10.__end_ - (char *)v10.__begin_;
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v2 + 4), (const AudioObjectPropertyAddress *)"#xobbolg", 1u, 0, 0, v10.__begin_, &v13);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1174405120;
  _OWORD v6[2] = ___ZN15HALS_IOUADriver14RebuildBoxListEv_block_invoke;
  v6[3] = &unk_1F1463E30;
  void v6[4] = v11;
  v6[5] = this;
  int v8 = 0;
  uint64_t v9 = 0;
  long long __p = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v10.__begin_, (uint64_t)v10.__end_, v10.__end_ - v10.__begin_);
  mach_port_t v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUADriver *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v6);
  if (__p)
  {
    int v8 = __p;
    operator delete(__p);
  }
  if (v10.__begin_)
  {
    v10.__end_ = v10.__begin_;
    operator delete(v10.__begin_);
  }
  _Block_object_dispose(v11, 8);
}

void sub_1BABDFD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v20 - 72), 8);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_IOUADriver14RebuildBoxListEv_block_invoke(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[5];
  uint64_t v1 = (_DWORD *)a1[6];
  uint64_t v3 = (_DWORD *)a1[7];
  if (v1 == v3)
  {
    unsigned int v4 = 0;
    mach_port_t v5 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    unsigned int v4 = 0;
    mach_port_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = v2[107];
      uint64_t v9 = v2[108];
      if (v8 == v9)
      {
LABEL_6:
        if ((unint64_t)v7 >= v6)
        {
          uint64_t v10 = (v7 - v4) >> 2;
          unint64_t v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 62) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v6 - (void)v4) >> 1 > v11) {
            unint64_t v11 = (uint64_t)(v6 - (void)v4) >> 1;
          }
          if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v12 = v11;
          }
          if (v12)
          {
            unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v12);
            unint64_t v7 = v5;
          }
          else
          {
            uint64_t v13 = 0;
          }
          unint64_t v14 = (char *)(v12 + 4 * v10);
          *(_DWORD *)unint64_t v14 = *v1;
          mach_port_t v5 = v14 + 4;
          while (v7 != v4)
          {
            int v15 = *((_DWORD *)v7 - 1);
            v7 -= 4;
            *((_DWORD *)v14 - 1) = v15;
            v14 -= 4;
          }
          unint64_t v6 = v12 + 4 * v13;
          if (v4) {
            operator delete(v4);
          }
          unsigned int v4 = v14;
          unint64_t v7 = v5;
        }
        else
        {
          *(_DWORD *)unint64_t v7 = *v1;
          v7 += 4;
          mach_port_t v5 = v7;
        }
      }
      else
      {
        while (*(_DWORD *)(*(void *)v8 + 44) != *v1)
        {
          v8 += 8;
          if (v8 == v9) {
            goto LABEL_6;
          }
        }
      }
      ++v1;
    }
    while (v1 != v3);
  }
  long long v41 = (unsigned int *)v5;
  long long __p = (unsigned int *)v4;
  uint64_t v16 = v2[107];
  uint64_t v17 = v2[108];
  if (v16 == v17)
  {
    unint64_t v18 = 0;
    unint64_t v21 = 0;
    int v37 = v41;
  }
  else
  {
    unint64_t v18 = 0;
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    unint64_t v21 = 0;
    do
    {
      unint64_t v22 = (_DWORD *)a1[6];
      uint64_t v23 = (_DWORD *)a1[7];
      if (v22 == v23)
      {
LABEL_31:
        int v24 = *(_DWORD *)(*(void *)v16 + 44);
        if ((unint64_t)v21 >= v20)
        {
          uint64_t v25 = (v21 - v18) >> 2;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 62) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v20 - (void)v18) >> 1 > v26) {
            unint64_t v26 = (uint64_t)(v20 - (void)v18) >> 1;
          }
          if (v20 - (unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v26;
          }
          if (v27)
          {
            unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v27);
            unint64_t v21 = v19;
          }
          else
          {
            uint64_t v28 = 0;
          }
          int v29 = (char *)(v27 + 4 * v25);
          *(_DWORD *)int v29 = v24;
          uint64_t v19 = v29 + 4;
          while (v21 != v18)
          {
            int v30 = *((_DWORD *)v21 - 1);
            v21 -= 4;
            *((_DWORD *)v29 - 1) = v30;
            v29 -= 4;
          }
          unint64_t v20 = v27 + 4 * v28;
          if (v18) {
            operator delete(v18);
          }
          unint64_t v18 = v29;
          unint64_t v21 = v19;
        }
        else
        {
          *(_DWORD *)unint64_t v21 = v24;
          v21 += 4;
          uint64_t v19 = v21;
        }
      }
      else
      {
        while (*(_DWORD *)(*(void *)v16 + 44) != *v22)
        {
          if (++v22 == v23) {
            goto LABEL_31;
          }
        }
      }
      v16 += 8;
    }
    while (v16 != v17);
    if (v18 == v21)
    {
      int v37 = v41;
      unint64_t v7 = (char *)v41;
      unint64_t v21 = v18;
    }
    else
    {
      uint64_t v31 = (HALS_ObjectMap **)v2[108];
      std::runtime_error v32 = v18;
      do
      {
        unint64_t v33 = (HALS_ObjectMap **)v2[107];
        if (v33 != v31)
        {
          while (*((_DWORD *)*v33 + 11) != *(_DWORD *)v32)
          {
            if (++v33 == v31) {
              goto LABEL_58;
            }
          }
          (*(void (**)(HALS_ObjectMap *))(*(void *)*v33 + 8))(*v33);
          HALS_ObjectMap::ReleaseObject(*v33, v34);
          uint64_t v35 = (HALS_ObjectMap **)v2[108];
          int64_t v36 = (char *)v35 - (char *)(v33 + 1);
          if (v35 != v33 + 1) {
            memmove(v33, v33 + 1, (char *)v35 - (char *)(v33 + 1));
          }
          uint64_t v31 = (HALS_ObjectMap **)((char *)v33 + v36);
          v2[108] = (uint64_t)v33 + v36;
        }
LABEL_58:
        v32 += 4;
      }
      while (v32 != v21);
      int v37 = v41;
      unint64_t v7 = (char *)v41;
    }
  }
  if (__p != v37)
  {
    *(void *)&long long v44 = *__p;
    *((void *)&v44 + 1) = 0x676C6F6262756964;
    HALS_IOUAUCDriver::get_string_property((HALS_IOUAUCDriver *)&cf, v2[99], v44, 0, 0, 0);
    operator new();
  }
  if (v18) {
    operator delete(v18);
  }
  if (__p) {
    operator delete(__p);
  }
  BOOL v39 = v7 != (char *)__p || v21 != v18;
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = v39;
}

void sub_1BABE03D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a10) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

HALS_ObjectMap *HALS_IOUADriver::CopyObjectByUCID(HALS_IOUADriver *this, int a2)
{
  std::runtime_error v32 = 0;
  unint64_t v33 = 0;
  uint64_t v34 = 0;
  HALS_DeviceManager::CopyDeviceList(this, (HALS_DeviceManager::BasicDeviceList *)&v32, 1, 0);
  unsigned int v4 = v32;
  mach_port_t v5 = v33;
  while (v4 != v5)
  {
    unint64_t v6 = *v4;
    if (*((_DWORD *)*v4 + 330) == a2)
    {
      HALS_ObjectMap::RetainObject(*v4, v3);
      unint64_t v14 = v6;
      goto LABEL_42;
    }
    char v7 = 0;
    char v8 = 1;
    do
    {
      unsigned int NumberStreams = HALS_IODevice::GetNumberStreams(v6, v7 & 1);
      if (NumberStreams)
      {
        unsigned int v10 = 1;
        do
        {
          unint64_t v11 = (HALS_ObjectMap *)HALS_IODevice::CopyStreamByIndex(v6, v7 & 1, v10 - 1);
          uint64_t v13 = v11;
          if (v11 && *((_DWORD *)v11 + 20) == a2)
          {
            HALS_ObjectMap::RetainObject(v11, v12);
            unint64_t v14 = v13;
          }
          else
          {
            unint64_t v14 = 0;
          }
          HALS_ObjectMap::ReleaseObject(v13, v12);
          if (v14) {
            break;
          }
          BOOL v15 = v10++ >= NumberStreams;
        }
        while (!v15);
      }
      else
      {
        unint64_t v14 = 0;
      }
      char v16 = (v14 == 0) & v8;
      char v7 = 1;
      char v8 = 0;
    }
    while ((v16 & 1) != 0);
    if (v14) {
      goto LABEL_42;
    }
    unsigned int v17 = (*(uint64_t (**)(HALS_IODevice *))(*(void *)v6 + 624))(v6);
    if (v17)
    {
      unsigned int v18 = 1;
      do
      {
        uint64_t v19 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_IODevice *, void))(*(void *)v6 + 632))(v6, v18 - 1);
        unint64_t v21 = v19;
        if (v19 && *((_DWORD *)v19 + 22) == a2)
        {
          HALS_ObjectMap::RetainObject(v19, v20);
          unint64_t v14 = v21;
        }
        else
        {
          unint64_t v14 = 0;
        }
        HALS_ObjectMap::ReleaseObject(v21, v20);
        if (v14) {
          break;
        }
        BOOL v15 = v18++ >= v17;
      }
      while (!v15);
      if (v14) {
        goto LABEL_42;
      }
    }
    ++v4;
  }
  int v29 = 0;
  int v30 = 0;
  uint64_t v31 = 0;
  HALS_DeviceManager::CopyClockDeviceList((uint64_t)this, (uint64_t)&v29);
  for (CFArrayRef i = v29; i != v30; ++i)
  {
    unint64_t v14 = *i;
    if (*((_DWORD *)*i + 96) == a2)
    {
      HALS_ObjectMap::RetainObject(*i, v22);
      HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v29, v26);
      goto LABEL_42;
    }
  }
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v29, v22);
  int v29 = 0;
  int v30 = 0;
  uint64_t v31 = 0;
  HALS_DeviceManager::CopyBoxList((uint64_t)this, (uint64_t)&v29, 0);
  for (CFMutableDictionaryRef j = v29; ; ++j)
  {
    if (j == v30)
    {
      unint64_t v14 = 0;
      goto LABEL_41;
    }
    unint64_t v14 = *j;
    if (*((_DWORD *)*j + 88) == a2) {
      break;
    }
  }
  HALS_ObjectMap::RetainObject(*j, v24);
LABEL_41:
  HALS_DeviceManager::BasicBoxList::~BasicBoxList(&v29, v24);
LABEL_42:
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v32, v3);
  return v14;
}

void sub_1BABE06EC(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  unint64_t v6 = va_arg(va1, HALS_ObjectMap **);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  HALS_DeviceManager::BasicBoxList::~BasicBoxList((HALS_ObjectMap ***)va, a2);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va1, v5);
  _Unwind_Resume(a1);
}

void HALS_IOUADriver::RemoveClockDevice(HALS_IOUADriver *this, HALS_IOUAClockDevice *a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  uint64_t v3[2] = ___ZN15HALS_IOUADriver17RemoveClockDeviceEP20HALS_IOUAClockDevice_block_invoke;
  v3[3] = &__block_descriptor_tmp_9_3057;
  v3[4] = this;
  void v3[5] = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUADriver *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

void ___ZN15HALS_IOUADriver14AddClockDeviceEP20HALS_IOUAClockDevice_block_invoke(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (HALS_IOUADriver *)a1[5];
  uint64_t v3 = (int *)a1[6];
  mach_port_t v5 = HALS_IOUADriver::_CopyClockDeviceByUCID(v2, v3[96]);
  if (v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = (*(uint64_t (**)(int *))(*(void *)v3 + 216))(v3);
      int v19 = 136315394;
      unint64_t v20 = "_AddClockDevice";
      __int16 v21 = 2082;
      uint64_t v22 = v6;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s: HALS_PlugInManager::_AddClockDevice: there is already a clcok device with the UID, %{public}s\n", (uint8_t *)&v19, 0x16u);
    }
    int v7 = 1852797029;
  }
  else
  {
    uint64_t v8 = (int **)*((void *)v2 + 105);
    unint64_t v9 = *((void *)v2 + 106);
    if ((unint64_t)v8 >= v9)
    {
      unint64_t v11 = (void *)*((void *)v2 + 104);
      uint64_t v12 = v8 - (int **)v11;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v9 - (void)v11;
      if (v14 >> 2 > v13) {
        unint64_t v13 = v14 >> 2;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        if (v15 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v16 = (char *)operator new(8 * v15);
      }
      else
      {
        char v16 = 0;
      }
      unsigned int v17 = (int **)&v16[8 * v12];
      *unsigned int v17 = v3;
      unsigned int v10 = v17 + 1;
      if (v8 != v11)
      {
        do
        {
          unsigned int v18 = *--v8;
          *--unsigned int v17 = v18;
        }
        while (v8 != v11);
        uint64_t v8 = (int **)*((void *)v2 + 104);
      }
      *((void *)v2 + 104) = v17;
      *((void *)v2 + 105) = v10;
      *((void *)v2 + 106) = &v16[8 * v15];
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      *uint64_t v8 = v3;
      unsigned int v10 = v8 + 1;
    }
    int v7 = 0;
    *((void *)v2 + 105) = v10;
  }
  HALS_ObjectMap::ReleaseObject(v5, v4);
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = v7;
}

void sub_1BABE09F4(_Unwind_Exception *exception_object, HALS_Object *a2)
{
  if (a2)
  {
    HALS_ObjectMap::ReleaseObject(v2, a2);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BABE09A0);
  }
  _Unwind_Resume(exception_object);
}

HALS_ObjectMap *HALS_IOUADriver::_CopyClockDeviceByUCID(HALS_IOUADriver *this, int a2)
{
  unsigned int v10 = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  HALS_DeviceManager::CopyClockDeviceList((uint64_t)this, (uint64_t)&v10);
  unsigned int v4 = v10;
  if (v10 == v11)
  {
    mach_port_t v5 = 0;
  }
  else
  {
    mach_port_t v5 = 0;
    do
    {
      int v7 = *v4++;
      uint64_t v6 = v7;
      if (*((_DWORD *)v7 + 96) == a2) {
        mach_port_t v5 = v6;
      }
    }
    while (v4 != v11);
  }
  HALS_ObjectMap::RetainObject(v5, v3);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v10, v8);
  return v5;
}

void sub_1BABE0AC4(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_IOUADriver17RemoveClockDeviceEP20HALS_IOUAClockDevice_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(HALS_ObjectMap **)(a1 + 40);
  uint64_t v3 = *(HALS_ObjectMap ***)(v2 + 832);
  unsigned int v4 = *(HALS_ObjectMap ***)(v2 + 840);
  if (v3 != v4)
  {
    while (*v3 != v1)
    {
      if (++v3 == v4)
      {
        uint64_t v3 = *(HALS_ObjectMap ***)(v2 + 840);
        break;
      }
    }
  }
  if (v4 != v3)
  {
    mach_port_t v5 = v3 + 1;
    int64_t v6 = (char *)v4 - (char *)(v3 + 1);
    if (v4 != v3 + 1) {
      memmove(v3, v5, (char *)v4 - (char *)(v3 + 1));
    }
    *(void *)(v2 + 840) = (char *)v3 + v6;
    HALS_ObjectMap::ReleaseObject(v1, (HALS_Object *)v5);
  }
}

uint64_t HALS_IOUADriver::CopyDeviceByUCID(HALS_IOUADriver *this, int a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  uint64_t v10 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZN15HALS_IOUADriver16CopyDeviceByUCIDEj_block_invoke;
  void v5[3] = &unk_1E6231008;
  v5[4] = &v7;
  void v5[5] = this;
  int v6 = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUADriver *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  uint64_t v3 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1BABE0C44(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void HALS_IOUADriver::RemoveDevice(HALS_IOUADriver *this, HALS_IOUADevice *a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  uint64_t v3[2] = ___ZN15HALS_IOUADriver12RemoveDeviceEP15HALS_IOUADevice_block_invoke;
  v3[3] = &__block_descriptor_tmp_6_3060;
  v3[4] = this;
  void v3[5] = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUADriver *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

void ___ZN15HALS_IOUADriver9AddDeviceEP15HALS_IOUADevice_block_invoke(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (HALS_DeviceManager *)a1[5];
  uint64_t v3 = a1[6];
  CFStringRef v4 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 200))(v3);
  mach_port_t v5 = HALS_DeviceManager::CopyDeviceByUID(v2, v4, 0);
  if (v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 216))(v3);
      int v20 = 136315394;
      __int16 v21 = "_AddDevice";
      __int16 v22 = 2082;
      uint64_t v23 = v7;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s: HALS_PlugInManager::_AddDevice: there is already a device with the UID, %{public}s\n", (uint8_t *)&v20, 0x16u);
    }
    HALS_ObjectMap::ReleaseObject(v5, v6);
    int v8 = 1852797029;
  }
  else
  {
    uint64_t v9 = (void *)*((void *)v2 + 102);
    unint64_t v10 = *((void *)v2 + 103);
    if ((unint64_t)v9 >= v10)
    {
      uint64_t v12 = (void *)*((void *)v2 + 101);
      uint64_t v13 = v9 - v12;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = v10 - (void)v12;
      if (v15 >> 2 > v14) {
        unint64_t v14 = v15 >> 2;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16)
      {
        if (v16 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unsigned int v17 = (char *)operator new(8 * v16);
      }
      else
      {
        unsigned int v17 = 0;
      }
      unsigned int v18 = &v17[8 * v13];
      *(void *)unsigned int v18 = v3;
      unint64_t v11 = v18 + 8;
      if (v9 != v12)
      {
        do
        {
          uint64_t v19 = *--v9;
          *((void *)v18 - 1) = v19;
          v18 -= 8;
        }
        while (v9 != v12);
        uint64_t v9 = (void *)*((void *)v2 + 101);
      }
      *((void *)v2 + 101) = v18;
      *((void *)v2 + 102) = v11;
      *((void *)v2 + 103) = &v17[8 * v16];
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *uint64_t v9 = v3;
      unint64_t v11 = v9 + 1;
    }
    int v8 = 0;
    *((void *)v2 + 102) = v11;
  }
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = v8;
}

void sub_1BABE0F10(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BABE0EBCLL);
  }
  _Unwind_Resume(a1);
}

void ___ZN15HALS_IOUADriver12RemoveDeviceEP15HALS_IOUADevice_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(HALS_ObjectMap **)(a1 + 40);
  uint64_t v3 = *(HALS_ObjectMap ***)(v2 + 808);
  CFStringRef v4 = *(HALS_ObjectMap ***)(v2 + 816);
  if (v3 != v4)
  {
    while (*v3 != v1)
    {
      if (++v3 == v4)
      {
        uint64_t v3 = *(HALS_ObjectMap ***)(v2 + 816);
        break;
      }
    }
  }
  if (v3 != v4)
  {
    mach_port_t v5 = v3 + 1;
    int64_t v6 = (char *)v4 - (char *)(v3 + 1);
    if (v4 != v3 + 1) {
      memmove(v3, v5, (char *)v4 - (char *)(v3 + 1));
    }
    *(void *)(v2 + 816) = (char *)v3 + v6;
    HALS_ObjectMap::ReleaseObject(v1, (HALS_Object *)v5);
  }
}

void ___ZN15HALS_IOUADriver16CopyDeviceByUCIDEj_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(HALS_DeviceManager **)(a1 + 40);
  int v3 = *(_DWORD *)(a1 + 48);
  unint64_t v10 = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  HALS_DeviceManager::CopyDeviceList(v2, (HALS_DeviceManager::BasicDeviceList *)&v10, 1, 0);
  mach_port_t v5 = v10;
  if (v10 == v11)
  {
    int64_t v6 = 0;
  }
  else
  {
    int64_t v6 = 0;
    do
    {
      int v8 = *v5++;
      uint64_t v7 = v8;
      if (*((_DWORD *)v8 + 330) == v3) {
        int64_t v6 = v7;
      }
    }
    while (v5 != v11);
  }
  HALS_ObjectMap::RetainObject(v6, v4);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v10, v9);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v6;
}

void sub_1BABE1070(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(unsigned int,std::vector<AudioObjectPropertyAddress> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(unsigned int,unsigned long long,unsigned long long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1>,void ()(unsigned int,unsigned long long,unsigned long long)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1>,void ()(unsigned int,unsigned long long,unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN15HALS_IOUADriverC1EP11HALS_SystemN10applesauce5iokit16io_object_holderEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1>,void ()(unsigned int,unsigned long long,unsigned long long)>::operator()(uint64_t a1, int *a2, std::runtime_error_vtbl **a3, uint64_t *a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *a2;
  mach_port_t v5 = *a3;
  uint64_t v6 = *a4;
  uint64_t v7 = *(HALS_IOUADriver **)(a1 + 8);
  uint64_t v8 = HALS_IOUADriver::CopyDeviceByUCID(v7, *a2);
  uint64_t v9 = (HALS_ObjectMap *)v8;
  if (v8)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 40))(v8))
    {
      v45.__vftable = v5;
      v45.__imp_.__imp_ = (const char *)v6;
      LOBYTE(v46) = 1;
      unint64_t v10 = (AMCP::Log::Scope_Registry *)HALS_IOUADevice::HandleConfigurationChangeRequest((uint64_t)v9, (long long *)&v45, 0);
      if (v10)
      {
        AMCP::Log::Scope_Registry::get(v10);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v12 = **(NSObject ***)buf;
        if (*(void *)v48) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v48);
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          uint64_t v13 = pthread_self();
          mach_port_t v14 = pthread_mach_thread_np(v13);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v14;
          *(_WORD *)uint64_t v48 = 2080;
          *(void *)&v48[2] = "HALS_IOUADriver.cpp";
          __int16 v49 = 1024;
          int v50 = 1116;
          __int16 v51 = 2080;
          *(void *)uint64_t v52 = "config_change_error != kIOReturnSuccess";
          _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to handle config change", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
        __cxa_allocate_exception(0x40uLL);
        std::runtime_error::runtime_error(&v37, "Failed to handle config change");
        std::runtime_error::runtime_error(&v38, &v37);
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        int v43 = -1;
        v38.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        BOOL v39 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
        *(void *)&v52[6] = "void HALS_IOUADriver::HandleConfigurationChangeRequest(AudioObjectID, uint64_t, uint64_t, BOOL)";
        uint64_t v53 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUADriver.cpp";
        int v54 = 1116;
        std::vector<void *>::vector(&v32);
        int v15 = backtrace((void **)&v32.~runtime_error, (unint64_t)(v32.__imp_.__imp_ - (const char *)v32.__vftable) >> 3);
        std::vector<void *>::resize((char **)&v32, v15);
        uint64_t v34 = &unk_1F148AA90;
        std::runtime_error v35 = v32;
        uint64_t v36 = v33;
        v32.__vftable = 0;
        v32.__imp_.__imp_ = 0;
        uint64_t v33 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
    }
    else
    {
      uint64_t v24 = *((void *)v7 + 99);
      uint64_t v25 = (std::__shared_weak_count *)*((void *)v7 + 100);
      if (v25)
      {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        HALS_IOUAUCDriver::abort_configuration_change((HALS_IOUAUCDriver *)*(unsigned int *)(v24 + 4), v4, v6, v6);
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      else
      {
        HALS_IOUAUCDriver::abort_configuration_change((HALS_IOUAUCDriver *)*(unsigned int *)(v24 + 4), v4, v6, v6);
      }
    }
  }
  else
  {
    uint64_t v16 = HALS_IOUADriver::CopyClockDeviceByUCID(v7, v4);
    unsigned int v17 = (HALS_ObjectMap *)v16;
    if (!v16)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v28 = **(NSObject ***)buf;
      if (*(void *)v48) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v48);
      }
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        int v29 = pthread_self();
        mach_port_t v30 = pthread_mach_thread_np(v29);
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v30;
        *(_WORD *)uint64_t v48 = 2080;
        *(void *)&v48[2] = "HALS_IOUADriver.cpp";
        __int16 v49 = 1024;
        int v50 = 1129;
        __int16 v51 = 2080;
        *(void *)uint64_t v52 = "!theClockDevice.IsValid()";
        *(_WORD *)&char v52[8] = 1024;
        *(_DWORD *)&v52[10] = v4;
        _os_log_error_impl(&dword_1BAA78000, v28, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s can't find device with object ID %u", buf, 0x28u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v37);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v32, "Can't find device with that object ID");
      std::runtime_error::runtime_error(&v38, &v32);
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      int v43 = -1;
      v38.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      BOOL v39 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
      *(void *)&v52[6] = "void HALS_IOUADriver::HandleConfigurationChangeRequest(AudioObjectID, uint64_t, uint64_t, BOOL)";
      uint64_t v53 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUADriver.cpp";
      int v54 = 1129;
      std::vector<void *>::vector(&v45);
      int v31 = backtrace((void **)&v45.~runtime_error, (unint64_t)(v45.__imp_.__imp_ - (const char *)v45.__vftable) >> 3);
      std::vector<void *>::resize((char **)&v45, v31);
      uint64_t v34 = &unk_1F148AA90;
      std::runtime_error v35 = v45;
      uint64_t v36 = v46;
      std::runtime_error v45 = (std::runtime_error)0;
      uint64_t v46 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 40))(v16))
    {
      v45.__vftable = v5;
      v45.__imp_.__imp_ = (const char *)v6;
      LOBYTE(v46) = 1;
      unsigned int v18 = (AMCP::Log::Scope_Registry *)HALS_IOUAClockDevice::HandleConfigurationChangeRequest((uint64_t)v17, (long long *)&v45, 0);
      if (v18)
      {
        AMCP::Log::Scope_Registry::get(v18);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        int v20 = **(NSObject ***)buf;
        if (*(void *)v48) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v48);
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          __int16 v21 = pthread_self();
          mach_port_t v22 = pthread_mach_thread_np(v21);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v22;
          *(_WORD *)uint64_t v48 = 2080;
          *(void *)&v48[2] = "HALS_IOUADriver.cpp";
          __int16 v49 = 1024;
          int v50 = 1138;
          __int16 v51 = 2080;
          *(void *)uint64_t v52 = "config_change_error != kIOReturnSuccess";
          _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to handle config change", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
        __cxa_allocate_exception(0x40uLL);
        std::runtime_error::runtime_error(&v37, "Failed to handle config change");
        std::runtime_error::runtime_error(&v38, &v37);
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        int v43 = -1;
        v38.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        BOOL v39 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
        *(void *)&v52[6] = "void HALS_IOUADriver::HandleConfigurationChangeRequest(AudioObjectID, uint64_t, uint64_t, BOOL)";
        uint64_t v53 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUADriver.cpp";
        int v54 = 1138;
        std::vector<void *>::vector(&v32);
        int v23 = backtrace((void **)&v32.~runtime_error, (unint64_t)(v32.__imp_.__imp_ - (const char *)v32.__vftable) >> 3);
        std::vector<void *>::resize((char **)&v32, v23);
        uint64_t v34 = &unk_1F148AA90;
        std::runtime_error v35 = v32;
        uint64_t v36 = v33;
        v32.__vftable = 0;
        v32.__imp_.__imp_ = 0;
        uint64_t v33 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
    }
    else
    {
      uint64_t v26 = *((void *)v7 + 99);
      unint64_t v27 = (std::__shared_weak_count *)*((void *)v7 + 100);
      if (v27)
      {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        HALS_IOUAUCDriver::abort_configuration_change((HALS_IOUAUCDriver *)*(unsigned int *)(v26 + 4), v4, v6, v6);
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      else
      {
        HALS_IOUAUCDriver::abort_configuration_change((HALS_IOUAUCDriver *)*(unsigned int *)(v26 + 4), v4, v6, v6);
      }
    }
    HALS_ObjectMap::ReleaseObject(v17, v19);
  }
  HALS_ObjectMap::ReleaseObject(v9, v11);
}

void sub_1BABE1C74(_Unwind_Exception *exception_object, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, std::runtime_error a20,std::runtime_error a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32)
{
  if (a2)
  {
    HALS_ObjectMap::ReleaseObject(v37, a2);
    HALS_ObjectMap::ReleaseObject(v36, v41);
    uint64_t v42 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v42);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v39 - 176), "com.apple.coreaudio", "AMCP");
    int v43 = *(std::__shared_weak_count **)(v39 - 168);
    char v44 = **(NSObject ***)(v39 - 176);
    if (v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    }
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      uint64_t v47 = pthread_self();
      mach_port_t v48 = pthread_mach_thread_np(v47);
      *(_DWORD *)(v39 - 176) = 67109634;
      *(_DWORD *)(v39 - 172) = v48;
      *(_WORD *)(v39 - 16_Block_object_dispose(&a9, 8) = 2080;
      *(void *)(v38 + 10) = "HALS_IOUADriver.cpp";
      *(_WORD *)(v39 - 15_Block_object_dispose(&a9, 8) = 1024;
      *(_DWORD *)(v39 - 156) = 1149;
      _os_log_error_impl(&dword_1BAA78000, v44, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception handling config change request", (uint8_t *)(v39 - 176), 0x18u);
    }
    uint64_t v45 = *(void *)(v35 + 792);
    uint64_t v46 = *(std::__shared_weak_count **)(v35 + 800);
    if (v46)
    {
      atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
      HALS_IOUAUCDriver::abort_configuration_change((HALS_IOUAUCDriver *)*(unsigned int *)(v45 + 4), v33, v34, v32);
      std::__shared_weak_count::__release_shared[abi:ne180100](v46);
    }
    else
    {
      HALS_IOUAUCDriver::abort_configuration_change((HALS_IOUAUCDriver *)*(unsigned int *)(v45 + 4), v33, v34, v32);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BABE1948);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BABE20B8()
{
}

void sub_1BABE20C0()
{
}

uint64_t HALS_IOUADriver::CopyClockDeviceByUCID(HALS_IOUADriver *this, int a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  uint64_t v10 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK15HALS_IOUADriver21CopyClockDeviceByUCIDEj_block_invoke;
  void v5[3] = &unk_1E6230FE0;
  v5[4] = &v7;
  void v5[5] = this;
  int v6 = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUADriver *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  uint64_t v3 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1BABE219C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

HALS_ObjectMap *___ZNK15HALS_IOUADriver21CopyClockDeviceByUCIDEj_block_invoke(uint64_t a1)
{
  uint64_t result = HALS_IOUADriver::_CopyClockDeviceByUCID(*(HALS_IOUADriver **)(a1 + 40), *(_DWORD *)(a1 + 48));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1>,void ()(unsigned int,unsigned long long,unsigned long long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1463F88;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1>,void ()(unsigned int,unsigned long long,unsigned long long)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1463F88;
  result[1] = v3;
  return result;
}

void std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_1>,void ()(unsigned int,unsigned long long,unsigned long long)>::~__func()
{
}

void *std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0>,void ()(unsigned int,std::vector<AudioObjectPropertyAddress> const&)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0>,void ()(unsigned int,std::vector<AudioObjectPropertyAddress> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN15HALS_IOUADriverC1EP11HALS_SystemN10applesauce5iokit16io_object_holderEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0>,void ()(unsigned int,std::vector<AudioObjectPropertyAddress> const&)>::operator()(uint64_t a1, int *a2, uint64_t a3)
{
  _OWORD v50[2] = *MEMORY[0x1E4F143B8];
  int v26 = *a2;
  uint64_t v3 = *(_DWORD **)(a1 + 8);
  char v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&v44, *(const void **)a3, *(void *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2));
  int v6 = (_anonymous_namespace_ *)v44;
  mach_port_t v5 = v45;
  if (v44 != v45)
  {
    {
LABEL_3:
      int v6 = (_anonymous_namespace_ *)((char *)v6 + 12);
      if (v6 == v5) {
        goto LABEL_9;
      }
    }
    while (1)
    {
      mach_port_t v5 = (_anonymous_namespace_ *)((char *)v5 - 12);
      if (v5 == v6) {
        break;
      }
      {
        uint64_t v7 = *(void *)v6;
        LODWORD(v29) = *((_DWORD *)v6 + 2);
        uint64_t v28 = v7;
        uint64_t v8 = *(void *)v5;
        *((_DWORD *)v6 + 2) = *((_DWORD *)v5 + 2);
        *(void *)int v6 = v8;
        uint64_t v9 = v28;
        *((_DWORD *)v5 + 2) = v29;
        *(void *)mach_port_t v5 = v9;
        goto LABEL_3;
      }
    }
  }
  mach_port_t v5 = v6;
LABEL_9:
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v41 = 0;
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<std::__wrap_iter<AudioObjectPropertyAddress*>,std::__wrap_iter<AudioObjectPropertyAddress*>>(&v41, v44, (uint64_t)v5, 0xAAAAAAAAAAAAAAABLL * ((v5 - (_anonymous_namespace_ *)v44) >> 2));
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v38 = 0;
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<std::__wrap_iter<AudioObjectPropertyAddress*>,std::__wrap_iter<AudioObjectPropertyAddress*>>(&v38, v5, (uint64_t)v45, 0xAAAAAAAAAAAAAAABLL * ((v45 - v5) >> 2));
  memset(v48, 0, sizeof(v48));
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(v48, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - (uint64_t)v41) >> 2));
  uint64_t v49 = 0;
  v50[0] = 0;
  v50[1] = 0;
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&v49, v38, v39, 0xAAAAAAAAAAAAAAABLL * ((v39 - (uint64_t)v38) >> 2));
  char v10 = 0;
  uint64_t v11 = 0;
  char v12 = 1;
  do
  {
    char v13 = v10;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&v35, (const void *)v48[3 * v11], v48[3 * v11 + 1], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48[3 * v11 + 1] - v48[3 * v11]) >> 2));
    mach_port_t v14 = v35;
    uint64_t v15 = v36;
    if (v35 != (void *)v36)
    {
      int v16 = v3[4];
      unsigned int v17 = (std::__shared_weak_count *)operator new(0x30uLL);
      *(_OWORD *)&v17->__shared_owners_ = 0u;
      v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1464018;
      v17[1].__vftable = 0;
      *(_OWORD *)&v17[1].__shared_owners_ = 0u;
      std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&v17[1].__vftable, v14, v15, 0xAAAAAAAAAAAAAAABLL * ((v15 - (uint64_t)v14) >> 2));
      LODWORD(v2_Block_object_dispose(&a9, 8) = v16;
      int v29 = v17 + 1;
      mach_port_t v30 = v17;
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      int v31 = v26;
      unsigned int v33 = 0;
      uint64_t v34 = 0;
      long long __p = 0;
      std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&__p, *(const void **)a3, *(void *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2));
      unsigned int v18 = *(uint64_t (**)(_DWORD *))(*(void *)v3 + 64);
      if ((v12 & 1) == 0)
      {
        uint64_t v22 = v18(v3);
        unsigned __int8 v23 = atomic_load((unsigned __int8 *)(v22 + 32));
        if (v23) {
          atomic_store(1u, (unsigned __int8 *)(v22 + 33));
        }
        operator new();
      }
      uint64_t v19 = v18(v3);
      unsigned __int8 v20 = atomic_load((unsigned __int8 *)(v19 + 32));
      if (v20) {
        atomic_store(1u, (unsigned __int8 *)(v19 + 33));
      }
      __int16 v21 = *(NSObject **)v19;
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = ___ZN10applesauce8dispatch2v19sync_implIRZN15HALS_IOUADriver22HandlePropertiesChangeEjRKNSt3__16vectorI26AudioObjectPropertyAddressNS4_9allocatorIS6_EEEEE3__0EEvP16dispatch_queue_sOT_NS4_17integral_constantIbLb1EEE_block_invoke;
      block[3] = &__block_descriptor_tmp_84;
      void block[4] = &v28;
      dispatch_sync(v21, block);
      if (__p)
      {
        unsigned int v33 = __p;
        operator delete(__p);
      }
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      mach_port_t v14 = v35;
    }
    if (v14) {
      operator delete(v14);
    }
    char v12 = 0;
    char v10 = 1;
    uint64_t v11 = 1;
  }
  while ((v13 & 1) == 0);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    uint64_t v25 = (void *)v48[i + 3];
    if (v25)
    {
      v50[i] = v25;
      operator delete(v25);
    }
  }
  if (v38) {
    operator delete(v38);
  }
  if (v41) {
    operator delete(v41);
  }
  if (v44) {
    operator delete(v44);
  }
}

void sub_1BABE2764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29)
{
  int v31 = *(void **)(v29 - 160);
  if (v31)
  {
    *(void *)(v29 - 152) = v31;
    operator delete(v31);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10applesauce8dispatch2v19sync_implIRZN15HALS_IOUADriver22HandlePropertiesChangeEjRKNSt3__16vectorI26AudioObjectPropertyAddressNS4_9allocatorIS6_EEEEE3__0EEvP16dispatch_queue_sOT_NS4_17integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
}

void *std::unique_ptr<HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0,std::default_delete<HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0>>::~unique_ptr[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)*a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (void *)v2[4];
    if (v3)
    {
      v2[5] = v3;
      operator delete(v3);
    }
    unsigned int v4 = (std::__shared_weak_count *)v2[2];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    MEMORY[0x1C1859840](v2, 0x1020C4023EB4E86);
  }
  return a1;
}

void *applesauce::dispatch::v1::async<HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0 &>(dispatch_queue_s *,HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0 &)::{lambda(void *)#1}::__invoke(unsigned int *a1)
{
  uint64_t v2 = a1;
  HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0::operator()(a1);
  return std::unique_ptr<HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0,std::default_delete<HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0>>::~unique_ptr[abi:ne180100](&v2);
}

void sub_1BABE2918(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0,std::default_delete<HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void HALS_IOUADriver::HandlePropertiesChange(unsigned int,std::vector<AudioObjectPropertyAddress> const&)::$_0::operator()(unsigned int *a1)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (HALS_IOUADriver *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*a1);
  unsigned int v4 = (unsigned int *)v2;
  if (!v2) {
    goto LABEL_69;
  }
  uint64_t v5 = *((void *)a1 + 1);
  int v6 = *(const AudioObjectPropertyAddress **)v5;
  uint64_t v7 = (unsigned __int128)((uint64_t)(*(void *)(v5 + 8) - *(void *)v5) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  uint64_t v8 = (v7 >> 1) + ((unint64_t)v7 >> 63);
  int v9 = a1[6];
  if (v9 != 1)
  {
    unsigned int v18 = HALS_IOUADriver::CopyObjectByUCID(v2, v9);
    unsigned __int8 v20 = (unsigned int *)v18;
    if (!v18)
    {
LABEL_68:
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v20, v19);
      goto LABEL_69;
    }
    __int16 v21 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(HALS_ObjectMap *))(*(void *)v18 + 40))(v18);
    if (!v21)
    {
      AMCP::Log::Scope_Registry::get(v21);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v30 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        int v31 = pthread_self();
        mach_port_t v32 = pthread_mach_thread_np(v31);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v32;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "HALS_IOUADriver.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = 974;
        _os_log_impl(&dword_1BAA78000, v30, OS_LOG_TYPE_INFO, "%6u %32s:%-5d HALS_IOUADriver::HandlePropertiesChanged: the object is not active yet", buf, 0x18u);
      }
      goto LABEL_68;
    }
    uint64_t v22 = (HALS_Object *)v20[5];
    unsigned __int8 v23 = (HALB_Info *)v20[6];
    if (v22 == v23 || v22 == 1633841016)
    {
      BOOL v25 = v22 == v23;
      if (v22 == 1633841016) {
        BOOL v25 = 0;
      }
      if (!v25) {
        goto LABEL_44;
      }
    }
    else if (v23 == 1633841016)
    {
LABEL_44:
      if (v8)
      {
        char v33 = 0;
        uint64_t v34 = v8;
        uint64_t v35 = v6;
        do
        {
          AudioObjectPropertySelector mSelector = v35->mSelector;
          ++v35;
          v33 |= mSelector == 1668575852;
          --v34;
        }
        while (v34);
        if (v33) {
          HALS_IOUABox::UpdateControls((HALS_IOUABox *)v20);
        }
      }
LABEL_85:
      HALS_Object::PropertiesChanged((HALS_Object *)v20, (HALS_NotificationManager *)v20[4], 0, v8, v6);
      goto LABEL_68;
    }
    if ((int)v22 <= 1701078389)
    {
      if (v22 == 1633773415)
      {
LABEL_58:
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v37 = v20[4];
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "HALS_IOUADevice.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1494;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v37;
          *(_WORD *)&uint8_t buf[24] = 2080;
          *(void *)&buf[26] = v20 + 39;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUADevice::HandlePropertiesChanged: Object: %d: %s", buf, 0x22u);
        }
        if (v8)
        {
          uint64_t v38 = v8;
          p_AudioObjectPropertyElement mElement = &v6->mElement;
          uint64_t v40 = MEMORY[0x1E4F14500];
          v41.i32[1] = 0;
          do
          {
            v41.i32[0] = *(p_mElement - 2);
            int16x8_t v42 = (int16x8_t)vmovl_u8(v41);
            *(int16x4_t *)v42.i8 = vrev64_s16(*(int16x4_t *)v42.i8);
            *(int8x8_t *)v42.i8 = vmovn_s16(v42);
            __int32 v47 = v42.i32[0];
            char v48 = 0;
            v42.i32[0] = *(p_mElement - 1);
            int16x8_t v43 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v42.i8);
            *(int16x4_t *)v43.i8 = vrev64_s16(*(int16x4_t *)v43.i8);
            unsigned __int32 v49 = vmovn_s16(v43).u32[0];
            char v50 = 0;
            if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v44 = *p_mElement;
              *(_DWORD *)buf = 136316162;
              *(void *)&uint8_t buf[4] = "HALS_IOUADevice.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1499;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = &v47;
              *(_WORD *)&buf[28] = 2080;
              *(void *)&buf[30] = &v49;
              __int16 v52 = 2048;
              uint64_t v53 = v44;
              _os_log_impl(&dword_1BAA78000, v40, OS_LOG_TYPE_DEFAULT, "%25s:%-5d    '%s', '%s', %lu", buf, 0x30u);
            }
            p_mElement += 3;
            --v38;
          }
          while (v38);
          unsigned int v45 = v8;
        }
        else
        {
          unsigned int v45 = 0;
        }
        HALS_Object::PropertiesChanged((HALS_Object *)v20, (HALS_NotificationManager *)v20[4], 0, v45, v6);
        goto LABEL_68;
      }
      int v26 = 1633969526;
    }
    else
    {
      if (v22 == 1701078390 || v22 == 1701733488) {
        goto LABEL_58;
      }
      int v26 = 1919182198;
    }
    if (v22 == v26) {
      goto LABEL_58;
    }
    if (v22 == v23)
    {
      if (v22 == 1634956402)
      {
LABEL_72:
        HALS_IOUAStream::HandlePropertiesChanged((HALS_IOUAStream *)v20, v8, v6);
        goto LABEL_68;
      }
    }
    else
    {
      if ((int)v23 <= 1701078389)
      {
        if (v23 == 1633773415) {
          goto LABEL_58;
        }
        int v46 = 1633969526;
      }
      else
      {
        if (v23 == 1701078390 || v23 == 1919182198) {
          goto LABEL_58;
        }
        int v46 = 1701733488;
      }
      if (v23 == v46) {
        goto LABEL_58;
      }
      if (v22 == v23 || v22 == 1634956402 || v23 == 1634956402) {
        goto LABEL_72;
      }
    }
    if (!HALS_Object::IsSubClass((HALS_Object *)v20[5], (HALB_Info *)v20[6], 1633907820)
      && !HALS_Object::IsSubClass(v22, v23, 1633905771))
    {
      goto LABEL_68;
    }
    goto LABEL_85;
  }
  char v10 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(HALS_IOUADriver *))(*(void *)v2 + 40))(v2);
  if (v10)
  {
    memset(buf, 0, 24);
    if (v8)
    {
      uint64_t v11 = 0;
      char v12 = 0;
      char v13 = 0;
      char v14 = 0;
      uint64_t v15 = *((void *)a1 + 4);
LABEL_6:
      int v16 = (int *)(v15 + 12 * v11);
      do
      {
        if (0xAAAAAAAAAAAAAAABLL * ((*((void *)a1 + 5) - v15) >> 2) <= (v8 - 1)) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        int v17 = *v16;
        if (*v16 == 1651472419)
        {
          char v14 = 1;
        }
        else if (v17 == 1668049699)
        {
          char v13 = 1;
        }
        else if (v17 == 1684370979)
        {
          ++v11;
          char v12 = 1;
          if (v11 == v8) {
LABEL_41:
          }
            HALS_IOUADriver::RebuildDeviceList((HALS_IOUADriver *)&v47, (HALS_DeviceManager *)v4);
          goto LABEL_6;
        }
        ++v11;
        v16 += 3;
      }
      while (v8 != v11);
      if (v12) {
        goto LABEL_41;
      }
      if (v13) {
        HALS_IOUADriver::RebuildClockDeviceList((HALS_IOUADriver *)v4);
      }
      if (v14) {
        HALS_IOUADriver::RebuildBoxList((HALS_IOUADriver *)v4);
      }
    }
    HALS_Object::PropertiesChanged((HALS_Object *)v4, (HALS_NotificationManager *)v4[4], 0, v8, v6);
  }
  else
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v27 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      uint64_t v28 = pthread_self();
      mach_port_t v29 = pthread_mach_thread_np(v28);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v29;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "HALS_IOUADriver.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 934;
      _os_log_impl(&dword_1BAA78000, v27, OS_LOG_TYPE_INFO, "%6u %32s:%-5d HALS_IOUADriver::HandlePropertiesChanged: the object is not active yet", buf, 0x18u);
    }
  }
LABEL_69:
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v4, v3);
}

void sub_1BABE309C(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  HALS_ObjectMap::ReleaseObject(v17, a2);
  HALS_ObjectMap::ReleaseObject(v16, v19);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0>,void ()(unsigned int,std::vector<AudioObjectPropertyAddress> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1463EF8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0>,void ()(unsigned int,std::vector<AudioObjectPropertyAddress> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1463EF8;
  result[1] = v3;
  return result;
}

void std::__function::__func<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0,std::allocator<HALS_IOUADriver::HALS_IOUADriver(HALS_System *,applesauce::iokit::io_object_holder)::$_0>,void ()(unsigned int,std::vector<AudioObjectPropertyAddress> const&)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<HALS_IOUAUCDriver>::__on_zero_shared(uint64_t a1)
{
  std::__function::__value_func<void ()(unsigned int,unsigned long long,unsigned long long)>::~__value_func[abi:ne180100]((void *)(a1 + 720));
  std::__function::__value_func<void ()(unsigned int,std::vector<AudioObjectPropertyAddress> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 688));
  IONotificationPortDestroy(*(IONotificationPortRef *)(a1 + 680));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(a1 + 360));
  IONotificationPortDestroy(*(IONotificationPortRef *)(a1 + 352));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(a1 + 32));
  uint64_t result = *(unsigned int *)(a1 + 24);
  if (result) {
    return IOObjectRelease(result);
  }
  return result;
}

void std::__shared_ptr_emplace<HALS_IOUAUCDriver>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1463EA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_IOUAUCDriver>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1463EA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ___ZN15HALS_IOUADriver25RemoveAllDevicesAndNotifyEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(HALS_System ***)(a1 + 32);
  uint64_t v29 = 0;
  mach_port_t v30 = &v29;
  uint64_t v31 = 0x4002000000;
  mach_port_t v32 = __Block_byref_object_copy__3085;
  char v33 = __Block_byref_object_dispose__3086;
  memset(v34, 0, sizeof(v34));
  uint64_t v2 = (HALB_Mutex *)(*((uint64_t (**)(HALS_System **))*v1 + 6))(v1);
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 0x40000000;
  uint64_t v28[2] = ___ZN15HALS_IOUADriver17_RemoveAllDevicesEv_block_invoke;
  v28[3] = &unk_1E6230F08;
  v28[4] = &v29;
  v28[5] = v1;
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v28);
  uint64_t v3 = v30[5];
  uint64_t v4 = v30[6];
  while (v3 != v4)
  {
    if (*(void *)v3)
    {
      int v6 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(*(void *)v3 + 16));
      if (v6)
      {
        HALS_System::DeviceDied(v1[40], v6);
        (*(void (**)(HALS_Device *))(*(void *)v6 + 456))(v6);
        (*(void (**)(HALS_Device *))(*(void *)v6 + 8))(v6);
        HALS_IOUADriver::RemoveDevice((HALS_IOUADriver *)v1, v6);
      }
      HALS_ObjectMap::ReleaseObject(v6, v5);
    }
    v3 += 8;
  }
  BOOL v25 = 0;
  int v26 = 0;
  uint64_t v27 = 0;
  HALS_DeviceManager::CopyClockDeviceList((uint64_t)v1, (uint64_t)&v25);
  uint64_t v7 = v25;
  uint64_t v8 = v26;
  while (v7 != v8)
  {
    int v9 = *v7;
    char v10 = v1[40];
    uint64_t v11 = (const BOOL *)*((unsigned int *)*v7 + 4);
    unsigned int v12 = *((_DWORD *)*v7 + 7);
    CFStringRef v13 = (const __CFString *)(*(uint64_t (**)(HALS_ObjectMap *))(*(void *)*v7 + 200))(*v7);
    HALS_System::ClockDeviceDied(v10, v11, v12, v13);
    (*(void (**)(HALS_IOUAClockDevice *))(*(void *)v9 + 8))(v9);
    HALS_IOUADriver::RemoveClockDevice((HALS_IOUADriver *)v1, v9);
    ++v7;
  }
  uint64_t v22 = 0;
  unsigned __int8 v23 = 0;
  uint64_t v24 = 0;
  HALS_DeviceManager::CopyBoxList((uint64_t)v1, (uint64_t)&v22, 0);
  uint64_t v15 = v22;
  for (uint64_t i = v23; v15 != i; ++v15)
  {
    int v17 = *v15;
    (*(void (**)(HALS_ObjectMap *))(*(void *)*v15 + 8))(*v15);
    v35[0] = MEMORY[0x1E4F143A8];
    v35[1] = 0x40000000;
    v35[2] = ___ZN15HALS_IOUADriver9RemoveBoxEP12HALS_IOUABox_block_invoke;
    v35[3] = &__block_descriptor_tmp_8_3088;
    v35[4] = v1;
    v35[5] = v17;
    unsigned int v18 = (HALB_Mutex *)(*((uint64_t (**)(HALS_System **))*v1 + 7))(v1);
    HALB_CommandGate::ExecuteCommand(v18, (uint64_t)v35);
  }
  HALS_DeviceManager::BasicBoxList::~BasicBoxList(&v22, v14);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v25, v19);
  _Block_object_dispose(&v29, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v34, v20);
  __int16 v21 = (HALS_NotificationManager *)*((unsigned int *)v1 + 4);
  uint64_t v29 = 0x676C6F6264657623;
  LODWORD(v30) = 0;
  HALS_Object::PropertiesChanged((HALS_Object *)v1, v21, 0, 1u, (const AudioObjectPropertyAddress *)&v29);
  HALS_System::CheckForDefaultDeviceChanges(v1[40]);
}

void sub_1BABE365C(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, HALS_ObjectMap **);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList((HALS_ObjectMap ***)va, a2);
  _Block_object_dispose(va1, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v5, v7);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3085(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 4_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__3086(uint64_t a1, HALS_Object *a2)
{
}

uint64_t ___ZN15HALS_IOUADriver17_RemoveAllDevicesEv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 264))(*(void *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 8) + 40);
}

void ___ZN15HALS_IOUADriver9RemoveBoxEP12HALS_IOUABox_block_invoke(uint64_t a1, HALS_Object *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(HALS_ObjectMap ***)(v2 + 856);
  uint64_t v4 = *(HALS_ObjectMap ***)(v2 + 864);
  if (v3 != v4)
  {
    while (*v3 != *(HALS_ObjectMap **)(a1 + 40))
    {
      if (++v3 == v4)
      {
        uint64_t v3 = *(HALS_ObjectMap ***)(v2 + 864);
        break;
      }
    }
  }
  if (v3 != v4)
  {
    HALS_ObjectMap::ReleaseObject(*v3, a2);
    uint64_t v5 = *(HALS_ObjectMap ***)(v2 + 864);
    int64_t v6 = (char *)v5 - (char *)(v3 + 1);
    if (v5 != v3 + 1) {
      memmove(v3, v3 + 1, (char *)v5 - (char *)(v3 + 1));
    }
    *(void *)(v2 + 864) = (char *)v3 + v6;
  }
}

void *std::unique_ptr<CASettingsStorage>::reset[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = (void *)*result;
  *__n128 result = a2;
  if (v2)
  {
    if (*v2) {
      MEMORY[0x1C1859810](*v2, 0x1000C8077774924);
    }
    uint64_t v3 = (const void *)v2[2];
    if (v3) {
      CFRelease(v3);
    }
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void HALS_SettingsManager::_InitSettings()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1BABE3B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  CACFNumber::~CACFNumber((CACFNumber *)va);
  _Unwind_Resume(a1);
}

void *std::vector<__CFString const*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<__CFString const*>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1BABE3BEC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK20HALS_SettingsManager16CopySettingsKeysEjRjPPK10__CFString_block_invoke(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(_DWORD **)(a1 + 40);
  uint64_t v4 = *(const void ***)(a1 + 48);
  _DWORD *v3 = 0;
  uint64_t v5 = *(void *)(v2 + 24);
  if (v5)
  {
    CASettingsStorage::RefreshSettings(*(CASettingsStorage **)(v2 + 24));
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v5 + 16), v4, 0);
    _DWORD *v3 = v1;
    if (v1)
    {
      unint64_t v6 = 0;
      do
        CFRetain(v4[v6++]);
      while (v6 < *v3);
    }
  }
}

void sub_1BABE3C80(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](std::regex_traits<char> *a1, const char *a2)
{
  uint64_t v3 = std::regex_traits<char>::regex_traits(a1);
  v3[2].__ct_ = 0;
  *(_OWORD *)&v3[1].__col_ = 0u;
  *(_OWORD *)&v3[1].__loc_.__locale_ = 0u;
  strlen(a2);
  std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>();
}

void sub_1BABE3D18(_Unwind_Exception *a1)
{
  locale = (std::__shared_weak_count *)v1[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::basic_regex<char,std::regex_traits<char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (std::locale *)**a1;
  if (v2)
  {
    uint64_t v4 = (std::locale *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        locale = (std::__shared_weak_count *)v4[-2].__locale_;
        if (locale) {
          std::__shared_weak_count::__release_shared[abi:ne180100](locale);
        }
        v4 -= 8;
        std::locale::~locale(v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  locale = this[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)locale);
  }

  std::locale::~locale(this);
}

void HALS_SettingsManager::DeleteSetting(HALS_SettingsManager *this, CFTypeRef cf)
{
  if (cf)
  {
    CFRetain(cf);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, cf);
  }
  else
  {
    CFTypeRef cfa = 0;
  }
  uint64_t v4 = *((void *)this + 2);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(v7, *(void *)this, *((std::__shared_weak_count **)this + 1));
  CFTypeRef v5 = cfa;
  if (cfa) {
    CFRetain(cfa);
  }
  void v7[2] = v5;
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v4 + 32));
  if (v6) {
    atomic_store(1u, (unsigned __int8 *)(v4 + 33));
  }
  operator new();
}

void sub_1BABE3F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<HALS_SettingsManager::DeleteSetting(__CFString const*)::$_0,std::default_delete<HALS_SettingsManager::DeleteSetting(__CFString const*)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(const void **)(v2 + 16);
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    MEMORY[0x1C1859840](v2, 0x60C40149E097CLL);
  }
  return a1;
}

uint64_t *applesauce::dispatch::v1::async<HALS_SettingsManager::DeleteSetting(__CFString const*)::$_0 &>(dispatch_queue_s *,HALS_SettingsManager::DeleteSetting(__CFString const*)::$_0 &)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v4 = a1;
  uint64_t v1 = *(CFMutableDictionaryRef **)(*a1 + 24);
  if (v1)
  {
    uint64_t v2 = (const void *)a1[2];
    CASettingsStorage::RefreshSettings(*(CASettingsStorage **)(*a1 + 24));
    CFDictionaryRemoveValue(v1[2], v2);
    CASettingsStorage::SaveSettings((CASettingsStorage *)v1);
  }
  return std::unique_ptr<HALS_SettingsManager::DeleteSetting(__CFString const*)::$_0,std::default_delete<HALS_SettingsManager::DeleteSetting(__CFString const*)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v4);
}

void sub_1BABE401C(void *a1)
{
}

void sub_1BABE4028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<HALS_SettingsManager::DeleteSetting(__CFString const*)::$_0,std::default_delete<HALS_SettingsManager::DeleteSetting(__CFString const*)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  int v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  uint64_t v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0) {
    this[4].__end_ = a2;
  }
  LOBYTE(this[4].__begin_) = 1;
  if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (a2 == a3 || (v9 & 0x40) != 0) {
      goto LABEL_18;
    }
    int v18 = v9 | 0x80;
    uint64_t v19 = (char *)&a2->first + 1;
    if (v19 != (const char *)a3)
    {
      do
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        int v20 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v19, (const char *)a3, (uint64_t *)this, v18, 0);
        std::vector<std::csub_match>::pointer begin = this->__begin_;
        std::vector<std::csub_match>::pointer end = this->__end_;
        if (v20) {
          goto LABEL_8;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), v11);
      }
      while (++v19 != (const char *)a3);
    }
    std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
    if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v18, 0))
    {
LABEL_18:
      uint64_t result = 0;
      this->__end_ = this->__begin_;
      return result;
    }
  }
  std::vector<std::csub_match>::pointer begin = this->__begin_;
  std::vector<std::csub_match>::pointer end = this->__end_;
LABEL_8:
  if (end == begin) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = begin;
  }
  first = (std::sub_match<const char *> *)v14->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)v14->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)v14->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  uint64_t v12 = *(char **)a1;
  uint64_t v13 = *(char **)(a1 + 8);
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*(void *)a1] >> 3);
  unint64_t v15 = v11 - v14;
  if (v11 <= v14)
  {
    uint64_t v22 = *(char **)(a1 + 8);
    if (v11 >= v14) {
      goto LABEL_22;
    }
    uint64_t v22 = &v12[8 * ((a4[1] - *a4) >> 3)];
    goto LABEL_21;
  }
  uint64_t v16 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v13) >> 3) >= v15)
  {
    uint64_t v22 = &v13[24 * v15];
    uint64_t v27 = 8 * ((a4[1] - *a4) >> 3) - 8 * ((uint64_t)&v13[-*(void *)a1] >> 3);
    do
    {
      *(void *)uint64_t v13 = 0;
      *((void *)v13 + 1) = 0;
      unsigned char v13[16] = 0;
      v13 += 24;
      v27 -= 24;
    }
    while (v27);
LABEL_21:
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = v22;
    goto LABEL_22;
  }
  if (v11 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v12) >> 3);
  uint64_t v18 = 2 * v17;
  if (2 * v17 <= v11) {
    uint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  }
  if (v17 >= 0x555555555555555) {
    unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v19 = v18;
  }
  if (v19 > 0xAAAAAAAAAAAAAAALL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  int v20 = (char *)operator new(24 * v19);
  __int16 v21 = &v20[24 * v14];
  uint64_t v22 = &v20[24 * v11];
  unsigned __int8 v23 = v21;
  uint64_t v24 = 24 * v11 - 24 * v14;
  do
  {
    *(void *)unsigned __int8 v23 = 0;
    *((void *)v23 + 1) = 0;
    v23[16] = 0;
    v23 += 24;
    v24 -= 24;
  }
  while (v24);
  BOOL v25 = *(char **)a1;
  if (v13 != *(char **)a1)
  {
    do
    {
      long long v26 = *(_OWORD *)(v13 - 24);
      *((void *)v21 - 1) = *((void *)v13 - 1);
      *(_OWORD *)(v21 - 24) = v26;
      v21 -= 24;
      v13 -= 24;
    }
    while (v13 != v25);
    uint64_t v13 = *(char **)a1;
  }
  *(void *)a1 = v21;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v22;
  *(void *)(a1 + 16) = &v20[24 * v19];
  if (v13)
  {
    operator delete(v13);
    uint64_t v22 = *(char **)(a1 + 8);
  }
LABEL_22:
  uint64_t v28 = *(char **)a1;
  if (v22 != *(char **)a1)
  {
    uint64_t v29 = 0;
    unint64_t v30 = 0;
    uint64_t v32 = *a4;
    uint64_t v31 = a4[1];
    do
    {
      unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v32) >> 3);
      uint64_t v34 = (void *)(v32 + v29);
      if (v33 <= v30) {
        uint64_t v35 = a4 + 3;
      }
      else {
        uint64_t v35 = v34;
      }
      *(void *)&v28[v29] = a2 + *v35 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v30) {
        uint64_t v36 = a4 + 3;
      }
      else {
        uint64_t v36 = (uint64_t *)(*a4 + v29);
      }
      *(void *)(*(void *)a1 + v29 + _Block_object_dispose(&a9, 8) = a2 + v36[1] - v10;
      uint64_t v32 = *a4;
      uint64_t v31 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v31 - *a4) >> 3) <= v30) {
        unsigned int v37 = a4 + 3;
      }
      else {
        unsigned int v37 = (uint64_t *)(*a4 + v29);
      }
      char v38 = *((unsigned char *)v37 + 16);
      uint64_t v28 = *(char **)a1;
      uint64_t v39 = *(void *)(a1 + 8);
      *(unsigned char *)(*(void *)a1 + v29 + 16) = v38;
      ++v30;
      v29 += 24;
    }
    while (v30 < 0xAAAAAAAAAAAAAAABLL * ((v39 - (uint64_t)v28) >> 3));
  }
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t v40 = a2 + a4[6] - v10;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v40;
  *(void *)(a1 + 56) = a2 + a4[7] - v10;
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a4 + 64);
  *(void *)(a1 + 72) = a2 + a4[9] - v10;
  *(void *)(a1 + 80) = a2 + a4[10] - v10;
  *(unsigned char *)(a1 + 8_Block_object_dispose(&a9, 8) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    *(void *)(a1 + 104) = v40;
  }
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int v7 = a5;
  int v9 = a3;
  uint64_t v10 = a2;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
  {
    long long v164 = (const char *)(a3 - a2);
    __int16 v163 = a5;
    if (*(_DWORD *)(a1 + 28))
    {
      v165[0] = 0;
      v165[1] = 0;
      *(void *)&long long v166 = 0;
      uint64_t v12 = *(void *)(a1 + 40);
      if (v12)
      {
        __x.first = a3;
        __x.second = a3;
        __x.matched = 0;
        *(_DWORD *)int v168 = 0;
        memset(&v168[8], 0, 48);
        *(_OWORD *)long long __p = 0u;
        memset(v170, 0, 21);
        v165[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v165, (uint64_t)v168);
        if (__p[0]) {
          operator delete(__p[0]);
        }
        if (*(void *)&v168[32]) {
          operator delete(*(void **)&v168[32]);
        }
        long long v150 = a4;
        uint64_t v13 = v165[1];
        *((_DWORD *)v165[1] - 24) = 0;
        *(v13 - 11) = v10;
        *(v13 - 10) = v10;
        long long v160 = v9;
        *(v13 - 9) = v9;
        std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 8), *(unsigned int *)(a1 + 28), &__x);
        std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v165[1] - 40), *(unsigned int *)(a1 + 32));
        long long v156 = 0;
        long long v158 = 0;
        uint64_t v152 = 0;
        uint64_t v153 = 0;
        uint64_t v154 = 0;
        uint64_t v155 = 0;
        unint64_t v14 = 0;
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v17 = v165[1];
        *((void *)v165[1] - 2) = v12;
        *(v17 - 2) = v7;
        *((unsigned char *)v17 - 4) = a6;
        do
        {
          BOOL v18 = (++v16 & 0xFFF) != 0 || (int)(v16 >> 12) < (int)v164;
          if (!v18) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
          }
          int v20 = v17 - 4;
          uint64_t v19 = *((void *)v17 - 2);
          __int16 v21 = v17 - 24;
          if (v19) {
            (*(void (**)(uint64_t, _DWORD *))(*(void *)v19 + 16))(v19, v17 - 24);
          }
          switch(*(_DWORD *)v21)
          {
            case 0xFFFFFC18:
              uint64_t v22 = (const char *)*((void *)v17 - 10);
              if ((v163 & 0x20) != 0 && v22 == v10 || (v163 & 0x1000) != 0 && v22 != v160) {
                goto LABEL_21;
              }
              if ((v15 & ((uint64_t)v14 >= (uint64_t)&v22[-*((void *)v17 - 11)])) != 0)
              {
                uint64_t v29 = v158;
                unint64_t v30 = v154;
              }
              else
              {
                uint64_t v32 = (long long *)*((void *)v17 - 8);
                uint64_t v31 = (long long *)*((void *)v17 - 7);
                unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v32) >> 3);
                uint64_t v34 = v158;
                long long v149 = &v22[-*((void *)v17 - 11)];
                if (0xAAAAAAAAAAAAAAABLL * ((v153 - (uint64_t)v155) >> 3) >= v33)
                {
                  if (0xAAAAAAAAAAAAAAABLL * ((v158 - v155) >> 3) >= v33)
                  {
                    if (v32 == v31)
                    {
                      int v46 = v155;
                      __int32 v47 = v155;
                    }
                    else
                    {
                      int v46 = v155;
                      __int32 v47 = v155;
                      do
                      {
                        *(_OWORD *)__int32 v47 = *v32;
                        v47[16] = *((unsigned char *)v32 + 16);
                        v47 += 24;
                        uint64_t v32 = (long long *)((char *)v32 + 24);
                      }
                      while (v32 != v31);
                    }
                    int64_t v45 = v47 - v46;
                    uint64_t v34 = v46;
                  }
                  else
                  {
                    uint8x8_t v41 = (long long *)((char *)v32 + 8 * ((v158 - v155) >> 3));
                    if (v158 != v155)
                    {
                      int16x8_t v42 = v155;
                      do
                      {
                        *(_OWORD *)int16x8_t v42 = *v32;
                        v42[16] = *((unsigned char *)v32 + 16);
                        uint64_t v32 = (long long *)((char *)v32 + 24);
                        v42 += 24;
                      }
                      while (v32 != v41);
                    }
                    int16x8_t v43 = v158;
                    while (v41 != v31)
                    {
                      long long v44 = *v41;
                      *((void *)v43 + 2) = *((void *)v41 + 2);
                      *(_OWORD *)int16x8_t v43 = v44;
                      v43 += 24;
                      uint8x8_t v41 = (long long *)((char *)v41 + 24);
                    }
                    int64_t v45 = v43 - v158;
                  }
                }
                else
                {
                  if (v155)
                  {
                    operator delete(v155);
                    uint64_t v153 = 0;
                  }
                  if (v33 > 0xAAAAAAAAAAAAAAALL) {
                    goto LABEL_220;
                  }
                  unint64_t v35 = 0x5555555555555556 * (v153 >> 3);
                  if (v35 <= v33) {
                    unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v32) >> 3);
                  }
                  unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (v153 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v35;
                  if (v36 > 0xAAAAAAAAAAAAAAALL) {
LABEL_220:
                  }
                    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                  unsigned int v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v36);
                  uint64_t v34 = v37;
                  uint64_t v39 = v37;
                  while (v32 != v31)
                  {
                    long long v40 = *v32;
                    *((void *)v39 + 2) = *((void *)v32 + 2);
                    *(_OWORD *)uint64_t v39 = v40;
                    v39 += 24;
                    uint64_t v32 = (long long *)((char *)v32 + 24);
                  }
                  uint64_t v153 = (uint64_t)&v37[24 * v38];
                  int64_t v45 = v39 - v37;
                  uint64_t v155 = v37;
                }
                unsigned __int32 v49 = (char *)*((void *)v17 - 5);
                char v48 = (char *)*((void *)v17 - 4);
                unint64_t v50 = (v48 - v49) >> 4;
                if (v50 <= (v152 - (uint64_t)v156) >> 4)
                {
                  unint64_t v57 = (v154 - v156) >> 4;
                  if (v57 >= v50)
                  {
                    if (v49 == v48)
                    {
                      mach_port_t v63 = v156;
                      unint64_t v62 = v156;
                      unint64_t v14 = v149;
                    }
                    else
                    {
                      unint64_t v62 = v156;
                      unint64_t v14 = v149;
                      do
                      {
                        *(void *)unint64_t v62 = *(void *)v49;
                        *((void *)v62 + 1) = *((void *)v49 + 1);
                        v62 += 16;
                        v49 += 16;
                      }
                      while (v49 != v48);
                      mach_port_t v63 = v156;
                    }
                    unsigned int v64 = (char *)(v62 - v63);
                    uint64_t v53 = v63;
                  }
                  else
                  {
                    CFArrayRef v58 = &v49[16 * v57];
                    if (v154 != v156)
                    {
                      unint64_t v59 = v156;
                      do
                      {
                        *(void *)unint64_t v59 = *(void *)v49;
                        *((void *)v59 + 1) = *((void *)v49 + 1);
                        v49 += 16;
                        v59 += 16;
                      }
                      while (v49 != v58);
                    }
                    unint64_t v14 = v149;
                    if (v58 == v48)
                    {
                      uint64_t v53 = v154;
                      mach_port_t v60 = v154;
                    }
                    else
                    {
                      uint64_t v53 = v154;
                      mach_port_t v60 = v154;
                      do
                      {
                        long long v61 = *(_OWORD *)v58;
                        v58 += 16;
                        *(_OWORD *)mach_port_t v60 = v61;
                        v60 += 16;
                      }
                      while (v58 != v48);
                    }
                    unsigned int v64 = (char *)(v60 - v53);
                  }
                }
                else
                {
                  if (v156)
                  {
                    operator delete(v156);
                    uint64_t v152 = 0;
                  }
                  if (v48 - v49 < 0) {
                    goto LABEL_219;
                  }
                  uint64_t v51 = v152 >> 3;
                  if (v152 >> 3 <= v50) {
                    uint64_t v51 = (v48 - v49) >> 4;
                  }
                  unint64_t v52 = (unint64_t)v152 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v51;
                  if (v52 >> 60) {
LABEL_219:
                  }
                    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                  uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v52);
                  uint64_t v55 = v53;
                  if (v49 == v48)
                  {
                    unint64_t v14 = v149;
                  }
                  else
                  {
                    unint64_t v14 = v149;
                    do
                    {
                      long long v56 = *(_OWORD *)v49;
                      v49 += 16;
                      *(_OWORD *)uint64_t v55 = v56;
                      v55 += 16;
                    }
                    while (v49 != v48);
                  }
                  uint64_t v152 = (uint64_t)&v53[16 * v54];
                  unsigned int v64 = (char *)(v55 - v53);
                  long long v156 = v53;
                }
                uint64_t v29 = &v34[v45];
                unint64_t v30 = &v64[(void)v53];
              }
              long long v158 = v29;
              std::logic_error v65 = v165[1];
              uint64_t v154 = v30;
              if (v14 == v164)
              {
                std::string::size_type v66 = v165[0];
                while (v65 != v66)
                {
                  v65 -= 12;
                  std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v65);
                }
                v165[1] = v66;
                char v15 = 1;
                unint64_t v14 = v164;
              }
              else
              {
                std::logic_error v67 = (char *)v165[1] - 96;
                std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)v165[1] - 12);
                v165[1] = v67;
                char v15 = 1;
              }
              break;
            case 0xFFFFFC1D:
            case 0xFFFFFC1E:
            case 0xFFFFFC21:
              break;
            case 0xFFFFFC1F:
LABEL_21:
              unsigned __int8 v23 = (char *)v165[1] - 96;
              std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)v165[1] - 12);
              v165[1] = v23;
              break;
            case 0xFFFFFC20:
              long long v24 = *((_OWORD *)v17 - 5);
              *(_OWORD *)int v168 = *v21;
              *(_OWORD *)&v168[16] = v24;
              memset(&v168[32], 0, 24);
              std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v168[32], *((long long **)v17 - 8), *((long long **)v17 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v17 - 7) - *((void *)v17 - 8)) >> 3));
              __p[0] = 0;
              __p[1] = 0;
              v170[0] = 0;
              std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v17 - 5), *((long long **)v17 - 4), (uint64_t)(*((void *)v17 - 4) - *((void *)v17 - 5)) >> 4);
              uint64_t v25 = *v20;
              *(void *)((char *)&v170[1] + 5) = *(void *)((char *)v17 - 11);
              v170[1] = v25;
              (*(void (**)(void, uint64_t, _DWORD *))(*(void *)*v20 + 24))(*v20, 1, v17 - 24);
              (*(void (**)(void, void, unsigned char *))(*(void *)v170[1] + 24))(v170[1], 0, v168);
              long long v26 = (char *)v165[1];
              if (v165[1] >= (void *)v166)
              {
                v165[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v165, (uint64_t)v168);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
              }
              else
              {
                long long v27 = *(_OWORD *)&v168[16];
                *(_OWORD *)v165[1] = *(_OWORD *)v168;
                *((_OWORD *)v26 + 1) = v27;
                *((void *)v26 + 4) = 0;
                *((void *)v26 + 5) = 0;
                *((void *)v26 + 6) = 0;
                *((void *)v26 + 7) = 0;
                *((_OWORD *)v26 + 2) = *(_OWORD *)&v168[32];
                *((void *)v26 + 6) = *(void *)&v168[48];
                memset(&v168[32], 0, 24);
                *((void *)v26 + _Block_object_dispose(&a9, 8) = 0;
                *((void *)v26 + 9) = 0;
                *(_OWORD *)(v26 + 56) = *(_OWORD *)__p;
                *((void *)v26 + 9) = v170[0];
                __p[0] = 0;
                __p[1] = 0;
                v170[0] = 0;
                uint64_t v28 = v170[1];
                *(void *)(v26 + 85) = *(void *)((char *)&v170[1] + 5);
                *((void *)v26 + 10) = v28;
                v165[1] = v26 + 96;
              }
              if (*(void *)&v168[32])
              {
                *(void *)&v168[40] = *(void *)&v168[32];
                operator delete(*(void **)&v168[32]);
              }
              break;
            default:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
          }
          unint64_t v17 = v165[1];
        }
        while (v165[0] != v165[1]);
        if (v15)
        {
          uint64_t v69 = *v150;
          *(void *)uint64_t v69 = v10;
          *(void *)(v69 + _Block_object_dispose(&a9, 8) = &v14[(void)v10];
          *(unsigned char *)(v69 + 16) = 1;
          CFArrayRef v70 = v155;
          if (v158 != v155)
          {
            std::string v71 = v155 + 16;
            unsigned int v72 = 1;
            do
            {
              uint64_t v73 = v69 + 24 * v72;
              *(_OWORD *)uint64_t v73 = *((_OWORD *)v71 - 1);
              char v74 = *v71;
              v71 += 24;
              *(unsigned char *)(v73 + 16) = v74;
              BOOL v18 = 0xAAAAAAAAAAAAAAABLL * ((v158 - v155) >> 3) > v72++;
            }
            while (v18);
          }
          uint64_t v75 = 1;
        }
        else
        {
          uint64_t v75 = 0;
          CFArrayRef v70 = v155;
        }
        if (v156) {
          operator delete(v156);
        }
        if (v70) {
          operator delete(v70);
        }
      }
      else
      {
        uint64_t v75 = 0;
      }
      *(void *)int v168 = v165;
      std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v168);
    }
    else
    {
      long long v166 = 0u;
      int64x2_t v167 = 0u;
      *(_OWORD *)uint64_t v165 = 0u;
      uint64_t v75 = *(void *)(a1 + 40);
      if (v75)
      {
        *(_DWORD *)int v168 = 0;
        memset(&v168[8], 0, 48);
        *(_OWORD *)long long __p = 0uLL;
        memset(v170, 0, 21);
        std::deque<std::__state<char>>::push_back(v165, (uint64_t)v168);
        if (__p[0]) {
          operator delete(__p[0]);
        }
        if (*(void *)&v168[32]) {
          operator delete(*(void **)&v168[32]);
        }
        long long v151 = a4;
        uint64_t v76 = v165[1];
        unint64_t v77 = v167.i64[1] + v167.i64[0] - 1;
        unint64_t v78 = v77 / 0x2A;
        uint64_t v79 = *((void *)v165[1] + v77 / 0x2A);
        unint64_t v80 = 3 * (v77 % 0x2A);
        uint64_t v81 = v79 + 32 * v80;
        *(_DWORD *)uint64_t v81 = 0;
        *(void *)(v81 + _Block_object_dispose(&a9, 8) = v10;
        *(void *)(v76[v78] + 32 * v80 + 16) = v10;
        *(void *)(v76[v78] + 32 * v80 + 24) = v9;
        std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v76[v78] + 32 * v80 + 56), *(unsigned int *)(a1 + 32));
        char v159 = 0;
        unsigned int v82 = 0;
        uint64_t v83 = v167.i64[1];
        CFArrayRef v84 = v165[1];
        unint64_t v85 = v167.i64[1] + v167.i64[0] - 1;
        unint64_t v86 = v85 / 0x2A;
        unint64_t v87 = 3 * (v85 % 0x2A);
        *(void *)(*((void *)v165[1] + v86) + 32 * v87 + 80) = v75;
        uint64_t v88 = v84[v86] + 32 * v87;
        *(_DWORD *)(v88 + 8_Block_object_dispose(&a9, 8) = v7;
        *(unsigned char *)(v88 + 92) = a6;
        long long v157 = 0;
        while (2)
        {
          if ((++v82 & 0xFFF) == 0 && (int)(v82 >> 12) >= (int)v164) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
          }
          unint64_t v90 = v83 + v167.i64[0] - 1;
          uint64_t v91 = *((void *)v165[1] + v90 / 0x2A);
          unint64_t v92 = v90 % 0x2A;
          uint64_t v93 = v91 + 96 * (v90 % 0x2A);
          CFTypeRef v95 = (void *)(v93 + 80);
          uint64_t v94 = *(void *)(v93 + 80);
          if (v94) {
            (*(void (**)(uint64_t, unint64_t))(*(void *)v94 + 16))(v94, v91 + 96 * v92);
          }
          switch(*(_DWORD *)v93)
          {
            case 0xFFFFFC18:
              CFArrayRef v96 = *(const char **)(v91 + 96 * v92 + 16);
              BOOL v97 = (v7 & 0x1000) == 0 || v96 == v9;
              char v98 = v97;
              BOOL v99 = v96 != v10 || (v7 & 0x20) == 0;
              if (!v99 || (v98 & 1) == 0) {
                goto LABEL_203;
              }
              uint64_t v100 = (uint64_t)&v96[-*(void *)(v91 + 96 * v92 + 8)];
              CFTypeRef v101 = v157;
              if ((v159 & ((uint64_t)v157 >= v100)) == 0) {
                CFTypeRef v101 = (char *)v100;
              }
              if (v101 != v164)
              {
                long long v157 = v101;
                std::deque<std::__state<char>>::pop_back(v165);
                char v159 = 1;
                goto LABEL_204;
              }
              CFArrayRef v102 = (void **)v165[1];
              CFTypeRef v103 = (unsigned char *)v166;
              if ((void *)v166 == v165[1])
              {
                CFTypeRef v103 = v165[1];
              }
              else
              {
                BOOL v104 = v10;
                uint64_t v105 = (char *)v165[1] + 8 * (v167.i64[0] / 0x2AuLL);
                uint64_t v106 = (void *)(*v105 + 96 * (v167.i64[0] % 0x2AuLL));
                unint64_t v107 = *((void *)v165[1] + (v167.i64[1] + v167.i64[0]) / 0x2AuLL)
                     + 96 * ((v167.i64[1] + v167.i64[0]) % 0x2AuLL);
                if (v106 != (void *)v107)
                {
                  do
                  {
                    std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v106);
                    v106 += 12;
                    if ((void *)((char *)v106 - *v105) == (void *)4032)
                    {
                      uint64_t v108 = (void *)v105[1];
                      ++v105;
                      uint64_t v106 = v108;
                    }
                  }
                  while (v106 != (void *)v107);
                  CFArrayRef v102 = (void **)v165[1];
                  CFTypeRef v103 = (unsigned char *)v166;
                }
                uint64_t v10 = v104;
              }
              v167.i64[1] = 0;
              unint64_t v139 = v103 - (unsigned char *)v102;
              if (v139 >= 0x11)
              {
                do
                {
                  operator delete(*v102);
                  CFArrayRef v102 = (void **)((char *)v165[1] + 8);
                  v165[1] = v102;
                  unint64_t v139 = v166 - (void)v102;
                }
                while ((void)v166 - (void)v102 > 0x10uLL);
              }
              if (v139 >> 3 == 1)
              {
                uint64_t v140 = 21;
              }
              else
              {
                if (v139 >> 3 != 2) {
                  goto LABEL_191;
                }
                uint64_t v140 = 42;
              }
              v167.i64[0] = v140;
LABEL_191:
              char v159 = 1;
              long long v157 = (char *)v164;
LABEL_204:
              uint64_t v83 = v167.i64[1];
              if (v167.i64[1]) {
                continue;
              }
              if (v159)
              {
                uint64_t v148 = *v151;
                *(void *)uint64_t v148 = v10;
                *(void *)(v148 + _Block_object_dispose(&a9, 8) = &v157[(void)v10];
                uint64_t v75 = 1;
                *(unsigned char *)(v148 + 16) = 1;
              }
              else
              {
                uint64_t v75 = 0;
              }
              break;
            case 0xFFFFFC19:
            case 0xFFFFFC1E:
            case 0xFFFFFC21:
              goto LABEL_204;
            case 0xFFFFFC1D:
              unint64_t v109 = v167.i64[0];
              long long v110 = (char *)v165[1];
              unint64_t v111 = (char *)v166;
              if (!v167.i64[0])
              {
                unint64_t v114 = (uint64_t)(v166 - (unint64_t)v165[1]) >> 3;
                uint64_t v115 = 42 * v114 - 1;
                if ((void *)v166 == v165[1]) {
                  uint64_t v115 = 0;
                }
                if ((unint64_t)(v115 - v167.i64[1]) < 0x2A)
                {
                  if (v114 >= (uint64_t)(*((void *)&v166 + 1) - (unint64_t)v165[0]) >> 3)
                  {
                    if (*((void **)&v166 + 1) == v165[0]) {
                      unint64_t v116 = 1;
                    }
                    else {
                      unint64_t v116 = (uint64_t)(*((void *)&v166 + 1) - (unint64_t)v165[0]) >> 2;
                    }
                    *(void *)&v168[32] = (char *)&v166 + 8;
                    *(void *)int v168 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v116);
                    *(void *)&v168[8] = *(void *)v168;
                    *(void *)&v168[16] = *(void *)v168;
                    *(void *)&v168[24] = *(void *)v168 + 8 * v117;
                    long long v162 = v10;
                    __x.first = (const char *)operator new(0xFC0uLL);
                    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v168, &__x);
                    long long v118 = (uint64_t *)v165[1];
                    CFArrayRef v119 = *(char **)&v168[16];
                    for (uint64_t i = v9; v118 != (uint64_t *)v166; *(void *)&v168[16] += 8)
                    {
                      if (v119 == *(char **)&v168[24])
                      {
                        long long v120 = *(char **)&v168[8];
                        uint64_t v121 = *(void **)v168;
                        if (*(void *)&v168[8] <= *(void *)v168)
                        {
                          if (v119 == *(char **)v168) {
                            unint64_t v128 = 1;
                          }
                          else {
                            unint64_t v128 = (uint64_t)&v119[-*(void *)v168] >> 2;
                          }
                          int64_t v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v128);
                          uint64_t v131 = &v129[8 * (v128 >> 2)];
                          uint64_t v132 = v119 - v120;
                          BOOL v97 = v119 == v120;
                          CFArrayRef v119 = v131;
                          int v9 = i;
                          if (!v97)
                          {
                            CFArrayRef v119 = &v131[v132 & 0xFFFFFFFFFFFFFFF8];
                            uint64_t v133 = 8 * (v132 >> 3);
                            long long v134 = v131;
                            do
                            {
                              uint64_t v135 = *(void *)v120;
                              v120 += 8;
                              *(void *)long long v134 = v135;
                              v134 += 8;
                              v133 -= 8;
                            }
                            while (v133);
                          }
                          *(void *)int v168 = v129;
                          *(void *)&v168[8] = v131;
                          *(void *)&v168[16] = v119;
                          *(void *)&v168[24] = &v129[8 * v130];
                          if (v121) {
                            operator delete(v121);
                          }
                        }
                        else
                        {
                          uint64_t v122 = (uint64_t)(*(void *)&v168[8] - *(void *)v168) >> 3;
                          if (v122 >= -1) {
                            uint64_t v123 = v122 + 1;
                          }
                          else {
                            uint64_t v123 = v122 + 2;
                          }
                          uint64_t v124 = *(void *)&v168[8] - 8 * (v123 >> 1);
                          size_t v125 = (size_t)&v119[-*(void *)&v168[8]];
                          if (v119 != *(char **)&v168[8])
                          {
                            long long v126 = (void *)(*(void *)&v168[8] - 8 * (v123 >> 1));
                            memmove(v126, *(const void **)&v168[8], v125);
                            uint64_t v124 = (uint64_t)v126;
                            CFArrayRef v119 = v120;
                          }
                          long long v127 = &v119[-8 * (v123 >> 1)];
                          CFArrayRef v119 = (char *)(v124 + v125);
                          *(void *)&v168[8] = v127;
                          *(void *)&v168[16] = v124 + v125;
                          int v9 = i;
                        }
                      }
                      uint64_t v136 = *v118++;
                      *(void *)CFArrayRef v119 = v136;
                      CFArrayRef v119 = (char *)(*(void *)&v168[16] + 8);
                    }
                    unint64_t v137 = v165[0];
                    *(_OWORD *)uint64_t v165 = *(_OWORD *)v168;
                    *(void *)&long long v166 = v119;
                    *((void *)&v166 + 1) = *(void *)&v168[24];
                    uint64_t v138 = 21;
                    if (&v119[-*(void *)&v168[8]] != (char *)8) {
                      uint64_t v138 = v167.i64[0] + 42;
                    }
                    v167.i64[0] = v138;
                    uint64_t v10 = v162;
                    if (v137) {
                      operator delete(v137);
                    }
                    LOWORD(v7) = v163;
                  }
                  else
                  {
                    if (v165[1] == v165[0])
                    {
                      *(void *)int v168 = operator new(0xFC0uLL);
                      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v165, v168);
                      *(void *)int v168 = *(void *)(v166 - 8);
                      *(void *)&long long v166 = v166 - 8;
                    }
                    else
                    {
                      *(void *)int v168 = operator new(0xFC0uLL);
                    }
                    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v165, v168);
                    uint64_t v141 = 21;
                    if ((void)v166 - (unint64_t)v165[1] != 8) {
                      uint64_t v141 = v167.i64[0] + 42;
                    }
                    v167.i64[0] = v141;
                  }
                }
                else
                {
                  v167.i64[0] = 42;
                  *(void *)int v168 = *(void *)(v166 - 8);
                  *(void *)&long long v166 = v166 - 8;
                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v165, v168);
                }
                unint64_t v109 = v167.i64[0];
                long long v110 = (char *)v165[1];
                unint64_t v111 = (char *)v166;
              }
              uint64_t v142 = &v110[8 * (v109 / 0x2A)];
              unint64_t v143 = *(void *)v142 + 96 * (v109 % 0x2A);
              if (v111 == v110) {
                uint64_t v144 = 0;
              }
              else {
                uint64_t v144 = v143;
              }
              if (v144 == *(void *)v142) {
                uint64_t v144 = *((void *)v142 - 1) + 4032;
              }
              long long v145 = *(_OWORD *)(v93 + 16);
              *(_OWORD *)(v144 - 96) = *(_OWORD *)v93;
              *(_OWORD *)(v144 - 80) = v145;
              uint64_t v146 = v91 + 96 * v92;
              *(void *)(v144 - 56) = 0;
              *(void *)(v144 - 4_Block_object_dispose(&a9, 8) = 0;
              *(void *)(v144 - 64) = 0;
              *(_OWORD *)(v144 - 64) = *(_OWORD *)(v146 + 32);
              *(void *)(v144 - 4_Block_object_dispose(&a9, 8) = *(void *)(v146 + 48);
              *(void *)(v146 + 32) = 0;
              *(void *)(v146 + 40) = 0;
              *(void *)(v146 + 4_Block_object_dispose(&a9, 8) = 0;
              *(void *)(v144 - 40) = 0;
              *(void *)(v144 - 32) = 0;
              *(void *)(v144 - 24) = 0;
              *(_OWORD *)(v144 - 40) = *(_OWORD *)(v146 + 56);
              *(void *)(v144 - 24) = *(void *)(v146 + 72);
              *(void *)(v146 + 56) = 0;
              *(void *)(v146 + 64) = 0;
              *(void *)(v146 + 72) = 0;
              uint64_t v147 = *v95;
              *(void *)(v144 - 11) = *(void *)(v93 + 85);
              *(void *)(v144 - 16) = v147;
              int64x2_t v167 = vaddq_s64(v167, (int64x2_t)xmmword_1BAFF94E0);
              goto LABEL_203;
            case 0xFFFFFC1F:
LABEL_203:
              std::deque<std::__state<char>>::pop_back(v165);
              goto LABEL_204;
            case 0xFFFFFC20:
              long long v112 = *(_OWORD *)(v93 + 16);
              *(_OWORD *)int v168 = *(_OWORD *)v93;
              *(_OWORD *)&v168[16] = v112;
              memset(&v168[32], 0, 24);
              std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v168[32], *(long long **)(v91 + 96 * v92 + 32), *(long long **)(v91 + 96 * v92 + 40), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(v91 + 96 * v92 + 40) - *(void *)(v91 + 96 * v92 + 32)) >> 3));
              __p[0] = 0;
              __p[1] = 0;
              v170[0] = 0;
              std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(long long **)(v91 + 96 * v92 + 56), *(long long **)(v91 + 96 * v92 + 64), (uint64_t)(*(void *)(v91 + 96 * v92 + 64) - *(void *)(v91 + 96 * v92 + 56)) >> 4);
              uint64_t v113 = *v95;
              *(void *)((char *)&v170[1] + 5) = *(void *)(v93 + 85);
              v170[1] = v113;
              (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v95 + 24))(*v95, 1, v93);
              (*(void (**)(void, void, unsigned char *))(*(void *)v170[1] + 24))(v170[1], 0, v168);
              std::deque<std::__state<char>>::push_back(v165, (uint64_t)v168);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              if (*(void *)&v168[32])
              {
                *(void *)&v168[40] = *(void *)&v168[32];
                operator delete(*(void **)&v168[32]);
              }
              goto LABEL_204;
            default:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
          }
          break;
        }
      }
      std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)v165);
    }
    return v75;
  }
  else
  {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  }
}

void sub_1BABE5558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  operator delete(v37);
  if (__p) {
    operator delete(__p);
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  value = this->__end_cap_.__value_;
  std::vector<std::csub_match>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    std::vector<std::csub_match>::pointer end = this->__end_;
    std::vector<std::csub_match>::size_type v16 = end - begin;
    if (v16 >= __n) {
      std::vector<std::csub_match>::size_type v17 = __n;
    }
    else {
      std::vector<std::csub_match>::size_type v17 = end - begin;
    }
    if (v17)
    {
      BOOL v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      uint64_t v19 = &end[__n - v16];
      std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
      do
      {
        std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<std::string>::__vallocate[abi:ne180100](this, v10);
    std::vector<std::csub_match>::pointer v11 = this->__end_;
    uint64_t v12 = &v11[__n];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    do
    {
      std::pair<const char *, const char *> v14 = __u->std::pair<const char *, const char *>;
      *(void *)&v11->matched = *(void *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  long long v44 = 0;
  int64_t v45 = 0;
  unint64_t v46 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)long long v40 = 0;
    memset(&v40[8], 0, 48);
    *(_OWORD *)long long __p = 0u;
    memset(v42, 0, 21);
    int64_t v45 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v44, (uint64_t)v40);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (*(void *)&v40[32]) {
      operator delete(*(void **)&v40[32]);
    }
    uint64_t v38 = a4;
    std::vector<std::csub_match>::size_type v13 = v45;
    *((_DWORD *)v45 - 24) = 0;
    *((void *)v13 - 11) = a2;
    *((void *)v13 - 10) = a2;
    *((void *)v13 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 64), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v45 - 40), *(unsigned int *)(a1 + 32));
    std::pair<const char *, const char *> v14 = v45;
    *((void *)v45 - 2) = v6;
    uint64_t v39 = a3;
    signed int v15 = a3 - a2;
    *((_DWORD *)v14 - 2) = a5;
    *(v14 - 4) = a6;
    unsigned int v16 = 1;
    while (2)
    {
      if ((v16 & 0xFFF) != 0 || (int)(v16 >> 12) < v15)
      {
        BOOL v18 = v14 - 16;
        uint64_t v17 = *((void *)v14 - 2);
        uint64_t v19 = v14 - 96;
        if (v17) {
          (*(void (**)(uint64_t, char *))(*(void *)v17 + 16))(v17, v14 - 96);
        }
        switch(*(_DWORD *)v19)
        {
          case 0xFFFFFC18:
            std::vector<std::csub_match>::size_type v20 = (const char *)*((void *)v14 - 10);
            if ((a5 & 0x20) != 0 && v20 == a2 || (a5 & 0x1000) != 0 && v20 != v39) {
              goto LABEL_16;
            }
            uint64_t v29 = *v38;
            *(void *)uint64_t v29 = a2;
            *(void *)(v29 + _Block_object_dispose(&a9, 8) = v20;
            *(unsigned char *)(v29 + 16) = 1;
            uint64_t v30 = *((void *)v14 - 8);
            uint64_t v31 = *((void *)v14 - 7) - v30;
            if (v31)
            {
              unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v31 >> 3);
              unint64_t v33 = (unsigned char *)(v30 + 16);
              unsigned int v34 = 1;
              do
              {
                uint64_t v35 = v29 + 24 * v34;
                *(_OWORD *)uint64_t v35 = *((_OWORD *)v33 - 1);
                char v36 = *v33;
                v33 += 24;
                *(unsigned char *)(v35 + 16) = v36;
              }
              while (v32 > v34++);
            }
            uint64_t v27 = 1;
            goto LABEL_25;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_23;
          case 0xFFFFFC1F:
LABEL_16:
            std::pair<const char *, const char *> v21 = v45 - 96;
            std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)v45 - 12);
            int64_t v45 = v21;
            goto LABEL_23;
          case 0xFFFFFC20:
            long long v22 = *((_OWORD *)v14 - 5);
            *(_OWORD *)long long v40 = *(_OWORD *)v19;
            *(_OWORD *)&v40[16] = v22;
            memset(&v40[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v40[32], *((long long **)v14 - 8), *((long long **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v14 - 7) - *((void *)v14 - 8)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v42[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v14 - 5), *((long long **)v14 - 4), (uint64_t)(*((void *)v14 - 4) - *((void *)v14 - 5)) >> 4);
            uint64_t v23 = *(void *)v18;
            *(void *)((char *)&v42[1] + 5) = *(void *)(v14 - 11);
            v42[1] = v23;
            (*(void (**)(void, uint64_t, char *))(**(void **)v18 + 24))(*(void *)v18, 1, v14 - 96);
            (*(void (**)(void, void, unsigned char *))(*(void *)v42[1] + 24))(v42[1], 0, v40);
            long long v24 = v45;
            if ((unint64_t)v45 >= v46)
            {
              int64_t v45 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v44, (uint64_t)v40);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v25 = *(_OWORD *)&v40[16];
              *(_OWORD *)int64_t v45 = *(_OWORD *)v40;
              *((_OWORD *)v24 + 1) = v25;
              *((void *)v24 + 4) = 0;
              *((void *)v24 + 5) = 0;
              *((void *)v24 + 6) = 0;
              *((void *)v24 + 7) = 0;
              *((_OWORD *)v24 + 2) = *(_OWORD *)&v40[32];
              *((void *)v24 + 6) = *(void *)&v40[48];
              memset(&v40[32], 0, 24);
              *((void *)v24 + _Block_object_dispose(&a9, 8) = 0;
              *((void *)v24 + 9) = 0;
              *(_OWORD *)(v24 + 56) = *(_OWORD *)__p;
              *((void *)v24 + 9) = v42[0];
              __p[0] = 0;
              __p[1] = 0;
              v42[0] = 0;
              uint64_t v26 = v42[1];
              *(void *)(v24 + 85) = *(void *)((char *)&v42[1] + 5);
              *((void *)v24 + 10) = v26;
              int64_t v45 = v24 + 96;
            }
            if (*(void *)&v40[32])
            {
              *(void *)&v40[40] = *(void *)&v40[32];
              operator delete(*(void **)&v40[32]);
            }
LABEL_23:
            std::pair<const char *, const char *> v14 = v45;
            ++v16;
            if (v44 == v45) {
              goto LABEL_24;
            }
            continue;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
      }
      break;
    }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
  }
LABEL_24:
  uint64_t v27 = 0;
LABEL_25:
  *(void *)long long v40 = &v44;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
  return v27;
}

void sub_1BABE5C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  std::__state<char>::~__state(&a11);
  a11 = v16 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v7 = (char *)operator new(96 * v6);
  }
  else
  {
    int v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  std::vector<std::csub_match>::size_type v9 = &v7[96 * v2];
  *(_OWORD *)std::vector<std::csub_match>::size_type v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  unint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 4_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a2 + 56) = 0;
  std::vector<std::csub_match>::size_type v13 = v9 + 96;
  std::pair<const char *, const char *> v14 = (char *)*a1;
  signed int v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = &v9[v16];
      BOOL v18 = &v15[v16];
      long long v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((void *)v17 - 6) = *(void *)&v15[v16 - 48];
      *((void *)v18 - _Block_object_dispose(&a9, 8) = 0;
      *((void *)v18 - 7) = 0;
      *((void *)v18 - 6) = 0;
      *((void *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((void *)v17 - 3) = *(void *)&v15[v16 - 24];
      *((void *)v18 - 5) = 0;
      *((void *)v18 - 4) = 0;
      *((void *)v18 - 3) = 0;
      uint64_t v20 = *(void *)&v15[v16 - 16];
      *(void *)(v17 - 11) = *(void *)&v15[v16 - 11];
      *((void *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    signed int v15 = (char *)*a1;
    std::pair<const char *, const char *> v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v21 -= 96;
      std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v21);
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer begin = this->__begin_;
  std::vector<std::csub_match>::pointer end = this->__end_;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  unint64_t v8 = __sz - v7;
  if (__sz <= v7)
  {
    if (__sz < v7) {
      this->__end_ = &begin[__sz];
    }
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v8)
    {
      long long v25 = &end[v8];
      std::vector<std::csub_match>::size_type v26 = 24 * __sz - 8 * (((char *)end - (char *)this->__begin_) >> 3);
      do
      {
        std::pair<const char *, const char *> v27 = __x->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__x->matched;
        end->std::pair<const char *, const char *> = v27;
        ++end;
        v26 -= 24;
      }
      while (v26);
      this->__end_ = v25;
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      std::vector<std::csub_match>::size_type v12 = 2 * v11;
      if (2 * v11 <= __sz) {
        std::vector<std::csub_match>::size_type v12 = __sz;
      }
      if (v11 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v12;
      }
      std::pair<const char *, const char *> v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v13);
      uint64_t v16 = (std::sub_match<const char *> *)&v14[24 * v7];
      uint64_t v17 = (std::sub_match<const char *> *)&v14[24 * __sz];
      BOOL v18 = v16;
      std::vector<std::csub_match>::size_type v19 = 24 * __sz - 24 * v7;
      do
      {
        std::pair<const char *, const char *> v20 = __x->std::pair<const char *, const char *>;
        v18[1].first = *(const char **)&__x->matched;
        *BOOL v18 = v20;
        BOOL v18 = (std::pair<const char *, const char *> *)((char *)v18 + 24);
        v19 -= 24;
      }
      while (v19);
      std::pair<const char *, const char *> v21 = (std::sub_match<const char *> *)&v14[24 * v15];
      std::vector<std::csub_match>::pointer v23 = this->__begin_;
      long long v22 = this->__end_;
      if (v22 != this->__begin_)
      {
        do
        {
          std::pair<const char *, const char *> v24 = v22[-1].std::pair<const char *, const char *>;
          *(void *)&v16[-1].matched = *(void *)&v22[-1].matched;
          v16[-1].std::pair<const char *, const char *> = v24;
          --v16;
          --v22;
        }
        while (v22 != v23);
        long long v22 = this->__begin_;
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = v21;
      if (v22)
      {
        operator delete(v22);
      }
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
  std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
  std::vector<std::pair<unsigned long, const char *>>::size_type v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5) {
      return;
    }
    BOOL v18 = &begin[__sz];
    goto LABEL_19;
  }
  std::vector<std::pair<unsigned long, const char *>>::size_type v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 16 * v6);
    BOOL v18 = &end[v6];
LABEL_19:
    this->__end_ = v18;
    return;
  }
  if (__sz >> 60) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (char *)value - (char *)begin;
  std::vector<std::pair<unsigned long, const char *>>::size_type v9 = v8 >> 3;
  if (v8 >> 3 <= __sz) {
    std::vector<std::pair<unsigned long, const char *>>::size_type v9 = __sz;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v10);
  std::vector<std::csub_match>::size_type v12 = (std::pair<unsigned long, const char *> *)&v11[16 * v5];
  std::pair<const char *, const char *> v14 = (std::pair<unsigned long, const char *> *)&v11[16 * v13];
  bzero(v12, 16 * v6);
  uint64_t v15 = &v12[v6];
  std::vector<std::pair<unsigned long, const char *>>::pointer v17 = this->__begin_;
  uint64_t v16 = this->__end_;
  if (v16 != this->__begin_)
  {
    do
    {
      v12[-1] = v16[-1];
      --v12;
      --v16;
    }
    while (v16 != v17);
    uint64_t v16 = this->__begin_;
  }
  this->__begin_ = v12;
  this->__end_ = v15;
  this->__end_cap_.__value_ = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C1859160](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BABE6134(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__state<char>::~__state(void *a1)
{
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::__state<char>,0>(void *a1)
{
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<std::pair<unsigned long, const char *>>::size_type v6 = result;
    uint64_t result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BABE6248(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<std::pair<unsigned long, const char *>>::size_type v6 = result;
    uint64_t result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BABE62BC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C1859160](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BABE631C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    std::vector<std::pair<unsigned long, const char *>>::size_type v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v4);
      }
      while (v4 != v2);
      std::vector<std::pair<unsigned long, const char *>>::size_type v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

__n128 std::deque<std::__state<char>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[2];
  std::vector<std::pair<unsigned long, const char *>>::size_type v5 = (char *)a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 42 * ((v4 - v5) >> 3) - 1;
  }
  unint64_t v7 = a1[4];
  unint64_t v8 = a1[5] + v7;
  if (v6 == v8)
  {
    if (v7 < 0x2A)
    {
      unint64_t v22 = (v4 - v5) >> 3;
      std::vector<std::csub_match>::pointer v23 = (char *)a1[3];
      uint64_t v24 = (uint64_t)&v23[-*a1];
      if (v22 >= v24 >> 3)
      {
        if (v23 == (char *)*a1) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = v24 >> 2;
        }
        unint64_t v87 = a1 + 3;
        *(void *)&long long v85 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v25);
        *((void *)&v85 + 1) = v85 + 8 * v22;
        *(void *)&long long v86 = *((void *)&v85 + 1);
        *((void *)&v86 + 1) = v85 + 8 * v26;
        CFArrayRef v84 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(&v85, &v84);
        uint64_t v27 = a1[2];
        uint64_t v29 = (char *)*((void *)&v85 + 1);
        uint64_t v28 = (char *)v85;
        uint64_t v31 = (char *)*((void *)&v86 + 1);
        uint64_t v30 = (char *)v86;
        while (v27 != a1[1])
        {
          if (v29 == v28)
          {
            if (v30 >= v31)
            {
              if (v31 == v28) {
                unint64_t v37 = 1;
              }
              else {
                unint64_t v37 = (v31 - v28) >> 2;
              }
              uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v37);
              long long v40 = v38;
              uint64_t v29 = &v38[(2 * v37 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v41 = v30 - v28;
              BOOL v35 = v30 == v28;
              uint64_t v30 = v29;
              if (!v35)
              {
                uint64_t v30 = &v29[v41 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v42 = 8 * (v41 >> 3);
                int16x8_t v43 = v29;
                long long v44 = v28;
                do
                {
                  uint64_t v45 = *(void *)v44;
                  v44 += 8;
                  *(void *)int16x8_t v43 = v45;
                  v43 += 8;
                  v42 -= 8;
                }
                while (v42);
              }
              uint64_t v31 = &v38[8 * v39];
              if (v28) {
                operator delete(v28);
              }
              uint64_t v28 = v40;
            }
            else
            {
              uint64_t v32 = (v31 - v30) >> 3;
              if (v32 >= -1) {
                unint64_t v33 = v32 + 1;
              }
              else {
                unint64_t v33 = v32 + 2;
              }
              unsigned int v34 = &v30[8 * (v33 >> 1)];
              uint64_t v29 = &v34[-(v30 - v28)];
              size_t v36 = v30 - v28;
              BOOL v35 = v30 == v28;
              uint64_t v30 = v34;
              if (!v35) {
                memmove(v29, v28, v36);
              }
            }
          }
          uint64_t v46 = *(void *)(v27 - 8);
          v27 -= 8;
          *((void *)v29 - 1) = v46;
          v29 -= 8;
        }
        *(void *)&long long v85 = v28;
        *((void *)&v85 + 1) = v29;
        *(void *)&long long v86 = v30;
        *((void *)&v86 + 1) = v31;
        long long v48 = v85;
        long long v49 = v86;
        *(void *)&long long v85 = *a1;
        __int32 v47 = (void *)v85;
        *((void *)&v85 + 1) = v27;
        *(_OWORD *)a1 = v48;
        *((_OWORD *)a1 + 1) = v49;
        if (v47) {
          operator delete(v47);
        }
        goto LABEL_60;
      }
      if (v23 != v4)
      {
        *(void *)&long long v85 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v85);
LABEL_60:
        std::vector<std::pair<unsigned long, const char *>>::size_type v5 = (char *)a1[1];
        unint64_t v8 = a1[5] + a1[4];
        goto LABEL_61;
      }
      *(void *)&long long v85 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v85);
      long long v61 = (void *)a1[1];
      uint64_t v4 = (char *)a1[2];
      uint64_t v63 = *v61;
      unint64_t v62 = (char *)(v61 + 1);
      uint64_t v10 = v63;
      a1[1] = v62;
      if (v4 == (char *)a1[3])
      {
        uint64_t v64 = (uint64_t)&v62[-*a1];
        if ((unint64_t)v62 > *a1)
        {
          uint64_t v65 = v64 >> 3;
          BOOL v14 = v64 >> 3 < -1;
          uint64_t v66 = (v64 >> 3) + 2;
          if (v14) {
            uint64_t v67 = v66;
          }
          else {
            uint64_t v67 = v65 + 1;
          }
          uint64_t v68 = -(v67 >> 1);
          uint64_t v69 = v67 >> 1;
          CFArrayRef v70 = &v62[-8 * v69];
          int64_t v71 = v4 - v62;
          if (v4 != v62)
          {
            memmove(&v62[-8 * v69], v62, v4 - v62);
            unint64_t v62 = (char *)a1[1];
          }
          uint64_t v4 = &v70[v71];
          unsigned int v72 = &v62[8 * v68];
          goto LABEL_58;
        }
        if (v4 == (char *)*a1) {
          unint64_t v77 = 1;
        }
        else {
          unint64_t v77 = (uint64_t)&v4[-*a1] >> 2;
        }
        uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v77);
        unint64_t v52 = &v51[8 * (v77 >> 2)];
        uint64_t v54 = &v51[8 * v78];
        uint64_t v79 = (uint64_t *)a1[1];
        uint64_t v4 = v52;
        uint64_t v80 = a1[2] - (void)v79;
        if (v80)
        {
          uint64_t v4 = &v52[v80 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v81 = 8 * (v80 >> 3);
          unsigned int v82 = &v51[8 * (v77 >> 2)];
          do
          {
            uint64_t v83 = *v79++;
            *(void *)unsigned int v82 = v83;
            v82 += 8;
            v81 -= 8;
          }
          while (v81);
        }
LABEL_46:
        mach_port_t v60 = (void *)*a1;
        *a1 = v51;
        a1[1] = v52;
        a1[2] = v4;
        a1[3] = v54;
        if (v60)
        {
          operator delete(v60);
          uint64_t v4 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v7 - 42;
      uint64_t v11 = *(void *)v5;
      std::vector<std::pair<unsigned long, const char *>>::size_type v9 = v5 + 8;
      uint64_t v10 = v11;
      a1[1] = v9;
      if ((char *)a1[3] == v4)
      {
        uint64_t v12 = (uint64_t)&v9[-*a1];
        if ((unint64_t)v9 > *a1)
        {
          uint64_t v13 = v12 >> 3;
          BOOL v14 = v12 >> 3 < -1;
          uint64_t v15 = (v12 >> 3) + 2;
          if (v14) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = v13 + 1;
          }
          uint64_t v17 = -(v16 >> 1);
          uint64_t v18 = v16 >> 1;
          std::vector<std::csub_match>::size_type v19 = &v9[-8 * v18];
          int64_t v20 = v4 - v9;
          if (v4 == v9)
          {
            std::pair<const char *, const char *> v21 = v4;
          }
          else
          {
            memmove(&v9[-8 * v18], v9, v4 - v9);
            std::pair<const char *, const char *> v21 = (char *)a1[1];
          }
          uint64_t v4 = &v19[v20];
          unsigned int v72 = &v21[8 * v17];
LABEL_58:
          a1[1] = v72;
          a1[2] = v4;
          goto LABEL_59;
        }
        if (v4 == (char *)*a1) {
          unint64_t v50 = 1;
        }
        else {
          unint64_t v50 = (uint64_t)&v4[-*a1] >> 2;
        }
        uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v50);
        unint64_t v52 = &v51[8 * (v50 >> 2)];
        uint64_t v54 = &v51[8 * v53];
        uint64_t v55 = (uint64_t *)a1[1];
        uint64_t v4 = v52;
        uint64_t v56 = a1[2] - (void)v55;
        if (v56)
        {
          uint64_t v4 = &v52[v56 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v57 = 8 * (v56 >> 3);
          CFArrayRef v58 = &v51[8 * (v50 >> 2)];
          do
          {
            uint64_t v59 = *v55++;
            *(void *)CFArrayRef v58 = v59;
            v58 += 8;
            v57 -= 8;
          }
          while (v57);
        }
        goto LABEL_46;
      }
    }
LABEL_59:
    *(void *)uint64_t v4 = v10;
    a1[2] += 8;
    goto LABEL_60;
  }
LABEL_61:
  unint64_t v73 = *(void *)&v5[8 * (v8 / 0x2A)] + 96 * (v8 % 0x2A);
  long long v74 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v73 = *(_OWORD *)a2;
  *(_OWORD *)(v73 + 16) = v74;
  *(void *)(v73 + 40) = 0;
  *(void *)(v73 + 4_Block_object_dispose(&a9, 8) = 0;
  *(void *)(v73 + 32) = 0;
  *(_OWORD *)(v73 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v73 + 4_Block_object_dispose(&a9, 8) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 4_Block_object_dispose(&a9, 8) = 0;
  *(void *)(v73 + 56) = 0;
  *(void *)(v73 + 64) = 0;
  *(void *)(v73 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v73 + 56) = result;
  *(void *)(v73 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v76 = *(void *)(a2 + 80);
  *(void *)(v73 + 85) = *(void *)(a2 + 85);
  *(void *)(v73 + 80) = v76;
  ++a1[5];
  return result;
}

void sub_1BABE6860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)(*(void *)(a1[1] + 8 * (v2 / 0x2A))
                                                                 + 96 * (v2 % 0x2A)));
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  if (v3 == v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * ((v3 - v4) >> 3) - 1;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5] - 1;
  a1[5] = v7;
  if ((unint64_t)(v5 - (v7 + v6)) >= 0x54)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 / 0x2A];
    uint64_t v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0x2A] + 96 * ((*(void *)(a1 + 40) + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v7);
        v7 += 96;
        if (v7 - (unsigned char *)*v6 == 4032)
        {
          std::vector<std::pair<unsigned long, const char *>>::size_type v9 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      unint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *uint64_t v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 21;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 42;
LABEL_14:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v11);
      unint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      uint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        uint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        std::vector<std::csub_match>::size_type v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)std::vector<std::csub_match>::size_type v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      std::pair<const char *, const char *> v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        unint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      unint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    unint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    unint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v16);
      std::vector<std::csub_match>::size_type v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        std::vector<std::csub_match>::pointer v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)std::vector<std::csub_match>::pointer v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  unint64_t v2 = (const std::locale *)MEMORY[0x1C1859640]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x1E4FBA258]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1E4FBA280]);
  return this;
}

void sub_1BABE6D40(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>()
{
}

void sub_1BABE718C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C1859160](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BABE7234(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer end = a1->__end_;
  uint64_t v7 = a2;
  do
  {
    BOOL v8 = v7;
    uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2) {
    operator new();
  }
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    uint64_t v9 = a1->__end_;
    uint64_t v10 = v8 + 1;
    uint64_t v11 = v8 + 1;
    do
    {
      BOOL v8 = v11;
      uint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v11, a3);
    }
    while (v11 != v8);
    if (v8 == v10) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v4 = a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != v4)
  {
    do
    {
      uint64_t v6 = v3;
      uint64_t v3 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(this, v3, v4);
    }
    while (v3 != v6);
    if (v6 != v4)
    {
      if (v6 + 1 != v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  std::vector<std::pair<unsigned long, const char *>>::pointer end = a1->__end_;
  uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  BOOL v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    uint64_t v9 = a1->__end_;
    uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, (char *)v8 + 1, v3);
    if (v10 == v8 + 1) {
      goto LABEL_9;
    }
    BOOL v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C1859160](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BABE7540(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x1C1859840);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F14825D8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x1C1859840);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C1859160](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BABE7988(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
  unsigned int marked_count = this->__marked_count_;
  if (a2 == a3)
  {
LABEL_24:
    uint64_t v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    goto LABEL_25;
  }
  int v8 = *a2;
  uint64_t v9 = (v8 - 36);
  if (v9 > 0x3A) {
    goto LABEL_13;
  }
  if (((1 << (v8 - 36)) & 0x5800000080004D1) != 0) {
    goto LABEL_4;
  }
  if (v9 == 5)
  {
    if (!this->__open_count_) {
      goto LABEL_14;
    }
  }
  else
  {
LABEL_13:
    if ((v8 - 123) >= 2)
    {
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, *a2);
LABEL_32:
      int64_t v14 = (unsigned __int8 *)(a2 + 1);
      goto LABEL_37;
    }
  }
LABEL_4:
  uint64_t v10 = a2 + 1;
  if (a2 + 1 == a3)
  {
LABEL_21:
    int v11 = *a2;
LABEL_22:
    if (v11 == 46) {
      operator new();
    }
    goto LABEL_24;
  }
  int v11 = *a2;
  if (v11 != 92) {
    goto LABEL_22;
  }
  int v12 = *v10;
  char v13 = *v10;
  if (((v12 - 36) > 0x3A || ((1 << (v12 - 36)) & 0x5800000080004F1) == 0)
    && (v12 - 123) >= 3)
  {
    if ((this->__flags_ & 0x1F0) == 0x40)
    {
      uint64_t v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(this, a2 + 1, a3, 0);
    }
    else
    {
      BOOL v16 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(this, v13);
      uint64_t v17 = 2;
      if (!v16) {
        uint64_t v17 = 0;
      }
      uint64_t v15 = &a2[v17];
    }
    if (v15 != a2)
    {
LABEL_25:
      if (v15 == a2 && v15 != a3)
      {
        int v18 = *a2;
        if (v18 == 36)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
          goto LABEL_32;
        }
        if (v18 != 40)
        {
          if (v18 == 94)
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
            goto LABEL_32;
          }
          return (unsigned __int8 *)a2;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
        unsigned int v19 = this->__marked_count_;
        ++this->__open_count_;
        uint64_t v20 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(this, a2 + 1, a3);
        if (v20 == a3 || (uint64_t v21 = v20, *v20 != 41)) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v19);
        --this->__open_count_;
        uint64_t v15 = v21 + 1;
      }
      int64_t v14 = (unsigned __int8 *)v15;
      if (v15 != a2) {
        goto LABEL_37;
      }
      return (unsigned __int8 *)a2;
    }
    goto LABEL_21;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v13);
  int64_t v14 = (unsigned __int8 *)(a2 + 2);
LABEL_37:
  size_t v22 = this->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v14, (unsigned __int8 *)a3, end, marked_count + 1, v22);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C1859160](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BABE7E38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      char v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        char v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123) {
      return a2;
    }
    uint64_t v15 = a2 + 1;
    BOOL v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            char v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              char v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              uint64_t v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            uint64_t v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        std::vector<std::csub_match>::pointer v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          char v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            char v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        unint64_t v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            char v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                char v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            uint64_t v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    char v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      char v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    char v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      char v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
}

void sub_1BABE831C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(unsigned __int8 *result, unsigned __int8 *a2, int *a3)
{
  if (result != a2)
  {
    int v3 = *result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      int v4 = v3 - 48;
      *a3 = v4;
      if (++result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          int v5 = *result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38) {
            break;
          }
          if (v4 >= 214748364) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          }
          int v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          if (++result == a2) {
            return a2;
          }
        }
      }
    }
  }
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C1859160](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BABE8434(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C1859160](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BABE848C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16 * result[10] + _Block_object_dispose(&a9, 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    unsigned int v7 = (unsigned char *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((void *)v7 - 2) = v5;
      *((void *)v7 - 1) = v5;
      *unsigned int v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  uint64_t v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    *uint64_t v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *uint64_t v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + _Block_object_dispose(&a9, 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1C1859840);
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1C1859840);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((v3 = *v2, v3 != 13) ? (BOOL v4 = v3 == 10) : (BOOL v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1C1859840);
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 80) = v4;
  return result;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1C1859840);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_232;
    }
    uint64_t v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3) {
      goto LABEL_232;
    }
    uint64_t v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(unsigned char *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3) {
      goto LABEL_232;
    }
    uint64_t v67 = (char **)(v7 + 88);
    uint64_t v68 = v7 + 16;
    uint64_t v69 = a3 - 4;
    while (1)
    {
      BOOL v8 = (char *)v5;
      uint64_t v9 = a3;
      if ((char *)v5 == a3) {
        goto LABEL_135;
      }
      int v10 = *(unsigned __int8 *)v5;
      uint64_t v9 = (char *)v5;
      if (v10 == 93) {
        goto LABEL_135;
      }
      int v11 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v77 = 0;
      int v12 = 0;
      uint64_t v9 = (char *)v5;
      if ((char *)(v5 + 1) != a3 && v10 == 91)
      {
        int v13 = *(unsigned __int8 *)(v5 + 1);
        switch(v13)
        {
          case '.':
            uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, (char *)(v5 + 2), a3, (uint64_t)__p);
            int v12 = (void *)HIBYTE(v77);
            int v11 = __p[1];
            break;
          case ':':
            if ((uint64_t)&a3[-v5 - 2] < 2) {
              goto LABEL_231;
            }
            for (unint64_t i = 0; ; ++i)
            {
              uint64_t v15 = (char *)(v5 + i + 2);
              if (*v15 == 58 && *(unsigned char *)(v5 + i + 3) == 93) {
                break;
              }
              if (&v69[-v5] == (char *)i) {
                goto LABEL_231;
              }
            }
            if (v15 == a3) {
LABEL_231:
            }
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
            int v20 = *(_DWORD *)(a1 + 24);
            std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&v82, (char *)(v5 + 2), (char *)(v5 + i + 2), i);
            uint64_t v21 = HIBYTE(v83);
            if (v83 >= 0) {
              BOOL v22 = &v82;
            }
            else {
              BOOL v22 = (long long *)v82;
            }
            if (v83 < 0) {
              uint64_t v21 = *((void *)&v82 + 1);
            }
            (*(void (**)(void, long long *, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v22, (char *)v22 + v21);
            if (v83 >= 0) {
              std::vector<std::csub_match>::pointer v23 = (const char *)&v82;
            }
            else {
              std::vector<std::csub_match>::pointer v23 = (const char *)v82;
            }
            classmach_port_name_t name = std::__get_classname(v23, v20 & 1);
            if (SHIBYTE(v83) < 0) {
              operator delete((void *)v82);
            }
            if (!classname) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
            }
            char v25 = 0;
            *(_DWORD *)(v7 + 160) |= classname;
            goto LABEL_131;
          case '=':
            if ((uint64_t)&a3[-v5 - 2] < 2) {
              goto LABEL_231;
            }
            for (CFMutableDictionaryRef j = 0; ; ++j)
            {
              uint64_t v15 = &j[v5 + 2];
              if (*v15 == 61 && j[v5 + 3] == 93) {
                break;
              }
              if (&v69[-v5] == j) {
                goto LABEL_231;
              }
            }
            if (v15 == a3) {
              goto LABEL_231;
            }
            std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v80, a1, (char *)(v5 + 2), &j[v5 + 2]);
            if (SHIBYTE(v81) < 0)
            {
              unint64_t v26 = *((void *)&v80 + 1);
              if (!*((void *)&v80 + 1)) {
LABEL_233:
              }
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              int v27 = (char *)v80;
            }
            else
            {
              unint64_t v26 = HIBYTE(v81);
              if (!HIBYTE(v81)) {
                goto LABEL_233;
              }
              int v27 = (char *)&v80;
            }
            std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&v82, v27, &v27[v26], v26);
            (*(void (**)(std::string::value_type **__return_ptr))(**(void **)(a1 + 16) + 32))(__s);
            uint64_t v29 = (std::string::value_type *)HIBYTE(v79);
            if (v79 < 0) {
              uint64_t v29 = __s[1];
            }
            if (v29 != (std::string::value_type *)1)
            {
              if (v29 == (std::string::value_type *)12)
              {
                uint64_t v30 = __s;
                if (v79 < 0) {
                  uint64_t v30 = (std::string::value_type **)__s[0];
                }
                *((unsigned char *)v30 + 11) = *((unsigned char *)v30 + 3);
              }
              else if (SHIBYTE(v79) < 0)
              {
                *__s[0] = 0;
                __s[1] = 0;
              }
              else
              {
                LOBYTE(__s[0]) = 0;
                HIBYTE(v79) = 0;
              }
            }
            if (SHIBYTE(v83) < 0) {
              operator delete((void *)v82);
            }
            size_t v36 = (std::string::value_type *)HIBYTE(v79);
            if (v79 < 0) {
              size_t v36 = __s[1];
            }
            if (v36)
            {
              unint64_t v37 = *(void *)(v7 + 144);
              if (v37 >= *(void *)(v7 + 152))
              {
                std::vector<std::string>::pointer v41 = std::vector<std::string>::__push_back_slow_path<std::string const&>((std::vector<std::string> *)(v7 + 136), (long long *)__s);
              }
              else
              {
                if (SHIBYTE(v79) < 0)
                {
                  std::string::__init_copy_ctor_external(*(std::string **)(v7 + 144), __s[0], (std::string::size_type)__s[1]);
                }
                else
                {
                  long long v38 = *(_OWORD *)__s;
                  *(void *)(v37 + 16) = v79;
                  *(_OWORD *)unint64_t v37 = v38;
                }
                std::vector<std::string>::pointer v41 = (std::vector<std::string>::pointer)(v37 + 24);
                *(void *)(v7 + 144) = v37 + 24;
              }
              *(void *)(v7 + 144) = v41;
            }
            else
            {
              uint64_t v39 = HIBYTE(v81);
              if (v81 < 0) {
                uint64_t v39 = *((void *)&v80 + 1);
              }
              if (v39 == 2)
              {
                uint64_t v42 = &v80;
                if (v81 < 0) {
                  uint64_t v42 = (long long *)v80;
                }
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *(char *)v42, *((char *)v42 + 1));
              }
              else
              {
                if (v39 != 1) {
                  std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
                }
                long long v40 = &v80;
                if (v81 < 0) {
                  long long v40 = (long long *)v80;
                }
                std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *(char *)v40);
              }
            }
            if (SHIBYTE(v79) < 0) {
              operator delete(__s[0]);
            }
            if (SHIBYTE(v81) < 0) {
              operator delete((void *)v80);
            }
            char v25 = 0;
LABEL_131:
            uint64_t v5 = (uint64_t)(v15 + 2);
            unsigned int v34 = v8;
            goto LABEL_132;
          default:
            int v11 = 0;
            int v12 = 0;
            uint64_t v9 = (char *)v5;
            break;
        }
      }
      uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if ((char)v12 >= 0) {
        int v11 = v12;
      }
      if (!v11)
      {
        if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) == 0x40)
        {
          int v17 = *v9;
          if (v17 == 92)
          {
            size_t v18 = v9 + 1;
            if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0) {
              BOOL v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v18, a3, (uint64_t *)__p);
            }
            else {
              BOOL v19 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v18, (unsigned __int8 *)a3, (uint64_t)__p, v7);
            }
            uint64_t v9 = v19;
            goto LABEL_76;
          }
        }
        else
        {
          LOBYTE(v17) = *v9;
        }
        if ((char)v12 < 0)
        {
          uint64_t v28 = (void **)__p[0];
          __p[1] = (void *)1;
        }
        else
        {
          HIBYTE(v77) = 1;
          uint64_t v28 = __p;
        }
        *(unsigned char *)uint64_t v28 = v17;
        *((unsigned char *)v28 + 1) = 0;
        ++v9;
      }
LABEL_76:
      if (v9 != a3)
      {
        int v31 = *v9;
        if (v31 != 93)
        {
          unint64_t v33 = v9 + 1;
          if (v9 + 1 != a3 && v31 == 45 && *v33 != 93)
          {
            v74[0] = 0;
            v74[1] = 0;
            uint64_t v75 = 0;
            unsigned int v34 = v9 + 2;
            if (v9 + 2 != a3 && *v33 == 91 && *v34 == 46)
            {
              BOOL v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v9 + 3, a3, (uint64_t)v74);
              goto LABEL_139;
            }
            if ((v5 | 0x40) == 0x40)
            {
              LODWORD(v33) = *v33;
              if (v33 == 92)
              {
                if (v5) {
                  BOOL v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v9 + 2, a3, (uint64_t *)v74);
                }
                else {
                  BOOL v35 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v9 + 2, (unsigned __int8 *)a3, (uint64_t)v74, v7);
                }
LABEL_139:
                unsigned int v34 = v35;
LABEL_140:
                *(_OWORD *)unsigned int v72 = *(_OWORD *)__p;
                uint64_t v73 = v77;
                __p[1] = 0;
                uint64_t v77 = 0;
                *(_OWORD *)CFArrayRef v70 = *(_OWORD *)v74;
                uint64_t v71 = v75;
                v74[0] = 0;
                v74[1] = 0;
                uint64_t v75 = 0;
                __p[0] = 0;
                if (*(unsigned char *)(v7 + 170))
                {
                  if (*(unsigned char *)(v7 + 169))
                  {
                    for (CFMutableDictionaryRef k = 0; ; ++k)
                    {
                      if (SHIBYTE(v73) < 0)
                      {
                        if (k >= v72[1])
                        {
LABEL_152:
                          for (m = 0; ; ++m)
                          {
                            if (SHIBYTE(v71) < 0)
                            {
                              if (m >= v70[1]) {
                                goto LABEL_198;
                              }
                              long long v48 = (void **)v70[0];
                            }
                            else
                            {
                              if ((unint64_t)m >= HIBYTE(v71)) {
                                goto LABEL_198;
                              }
                              long long v48 = v70;
                            }
                            char v49 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), m[(void)v48]);
                            if (v71 >= 0) {
                              unint64_t v50 = v70;
                            }
                            else {
                              unint64_t v50 = (void **)v70[0];
                            }
                            m[(void)v50] = v49;
                          }
                        }
                        long long v44 = (void **)v72[0];
                      }
                      else
                      {
                        if ((unint64_t)k >= HIBYTE(v73)) {
                          goto LABEL_152;
                        }
                        long long v44 = v72;
                      }
                      char v45 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), k[(void)v44]);
                      if (v73 >= 0) {
                        uint64_t v46 = v72;
                      }
                      else {
                        uint64_t v46 = (void **)v72[0];
                      }
                      k[(void)v46] = v45;
                    }
                  }
                  mach_port_t v60 = 0;
                  if (v73 < 0) {
                    goto LABEL_189;
                  }
                  while ((unint64_t)v60 < HIBYTE(v73))
                  {
                    while (1)
                    {
                      ++v60;
                      if ((v73 & 0x8000000000000000) == 0) {
                        break;
                      }
LABEL_189:
                      if (v60 >= v72[1]) {
                        goto LABEL_192;
                      }
                    }
                  }
LABEL_192:
                  long long v61 = 0;
                  if (v71 < 0) {
                    goto LABEL_195;
                  }
                  while ((unint64_t)v61 < HIBYTE(v71))
                  {
                    while (1)
                    {
                      ++v61;
                      if ((v71 & 0x8000000000000000) == 0) {
                        break;
                      }
LABEL_195:
                      if (v61 >= v70[1]) {
                        goto LABEL_198;
                      }
                    }
                  }
LABEL_198:
                  unint64_t v62 = (char *)HIBYTE(v73);
                  if (v73 >= 0) {
                    uint64_t v63 = (char *)v72;
                  }
                  else {
                    uint64_t v63 = (char *)v72[0];
                  }
                  if (v73 < 0) {
                    unint64_t v62 = (char *)v72[1];
                  }
                  std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&v80, v68, v63, &v62[(void)v63]);
                  uint64_t v64 = (char *)HIBYTE(v71);
                  if (v71 >= 0) {
                    uint64_t v65 = (char *)v70;
                  }
                  else {
                    uint64_t v65 = (char *)v70[0];
                  }
                  if (v71 < 0) {
                    uint64_t v64 = (char *)v70[1];
                  }
                  std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)__s, v68, v65, &v64[(void)v65]);
                  long long v82 = v80;
                  uint64_t v83 = v81;
                  uint64_t v81 = 0;
                  long long v80 = 0uLL;
                  long long v84 = *(_OWORD *)__s;
                  uint64_t v85 = v79;
                  __s[0] = 0;
                  __s[1] = 0;
                  uint64_t v79 = 0;
                  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v67, &v82);
                  if (SHIBYTE(v85) < 0) {
                    operator delete((void *)v84);
                  }
                  if (SHIBYTE(v83) < 0) {
                    operator delete((void *)v82);
                  }
                  if (SHIBYTE(v79) < 0) {
                    operator delete(__s[0]);
                  }
                  if (SHIBYTE(v81) < 0)
                  {
                    uint64_t v59 = (void *)v80;
LABEL_216:
                    operator delete(v59);
                  }
                }
                else
                {
                  uint64_t v51 = (void *)HIBYTE(v73);
                  if (v73 < 0) {
                    uint64_t v51 = v72[1];
                  }
                  if (v51 != (void *)1) {
                    goto LABEL_235;
                  }
                  unint64_t v52 = (void *)HIBYTE(v71);
                  if (v71 < 0) {
                    unint64_t v52 = v70[1];
                  }
                  if (v52 != (void *)1) {
LABEL_235:
                  }
                    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
                  if (*(unsigned char *)(v7 + 169))
                  {
                    if (v73 >= 0) {
                      uint64_t v53 = v72;
                    }
                    else {
                      uint64_t v53 = (void **)v72[0];
                    }
                    char v54 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)v53);
                    if (v73 >= 0) {
                      uint64_t v55 = v72;
                    }
                    else {
                      uint64_t v55 = (void **)v72[0];
                    }
                    *(unsigned char *)uint64_t v55 = v54;
                    if (v71 >= 0) {
                      uint64_t v56 = v70;
                    }
                    else {
                      uint64_t v56 = (void **)v70[0];
                    }
                    char v57 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)v56);
                    if (v71 >= 0) {
                      CFArrayRef v58 = v70;
                    }
                    else {
                      CFArrayRef v58 = (void **)v70[0];
                    }
                    *(unsigned char *)CFArrayRef v58 = v57;
                  }
                  long long v82 = *(_OWORD *)v72;
                  uint64_t v83 = v73;
                  v72[0] = 0;
                  v72[1] = 0;
                  uint64_t v73 = 0;
                  long long v84 = *(_OWORD *)v70;
                  uint64_t v85 = v71;
                  v70[0] = 0;
                  v70[1] = 0;
                  uint64_t v71 = 0;
                  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v67, &v82);
                  if (SHIBYTE(v85) < 0) {
                    operator delete((void *)v84);
                  }
                  if (SHIBYTE(v83) < 0)
                  {
                    uint64_t v59 = (void *)v82;
                    goto LABEL_216;
                  }
                }
                if (SHIBYTE(v71) < 0) {
                  operator delete(v70[0]);
                }
                if (SHIBYTE(v73) < 0) {
                  operator delete(v72[0]);
                }
                if (SHIBYTE(v75) < 0) {
                  operator delete(v74[0]);
                }
                char v25 = 1;
LABEL_132:
                if (SHIBYTE(v77) < 0) {
                  operator delete(__p[0]);
                }
                uint64_t v9 = v34;
                if ((v25 & 1) == 0) {
                  goto LABEL_136;
                }
                goto LABEL_135;
              }
            }
            else
            {
              LOBYTE(v33) = *v33;
            }
            HIBYTE(v75) = 1;
            LOWORD(v74[0]) = v33;
            goto LABEL_140;
          }
        }
      }
      if (SHIBYTE(v77) < 0)
      {
        if (__p[1])
        {
          if (__p[1] == (void *)1)
          {
            uint64_t v32 = (void **)__p[0];
LABEL_85:
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *(char *)v32);
LABEL_96:
            char v25 = 1;
            unsigned int v34 = v9;
            goto LABEL_132;
          }
          uint64_t v32 = (void **)__p[0];
LABEL_95:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *(char *)v32, *((char *)v32 + 1));
          goto LABEL_96;
        }
        operator delete(__p[0]);
      }
      else if (HIBYTE(v77))
      {
        uint64_t v32 = __p;
        if (HIBYTE(v77) == 1) {
          goto LABEL_85;
        }
        goto LABEL_95;
      }
LABEL_135:
      uint64_t v5 = (uint64_t)v9;
LABEL_136:
      if ((char *)v5 == v8)
      {
        if (v8 != a3)
        {
          if (*v8 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v8;
          }
          if (v8 != a3 && *v8 == 93) {
            return v8 + 1;
          }
        }
LABEL_232:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
  }
  return a2;
}

void sub_1BABE9638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  *(void *)(v46 + 144) = v47;
  if (a46 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v48 - 145) < 0) {
    operator delete(*(void **)(v48 - 168));
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C1859160](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BABE979C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
}

void sub_1BABE9938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  uint64_t v15 = (void *)v10[14];
  if (v15)
  {
    v10[15] = v15;
    operator delete(v15);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  BOOL v16 = (void *)v10[8];
  if (v16)
  {
    v10[9] = v16;
    operator delete(v16);
  }
  int v17 = *v13;
  if (*v13)
  {
    v10[6] = v17;
    operator delete(v17);
  }
  std::locale::~locale(v12);
  *int v10 = v11;
  uint64_t v18 = v10[1];
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  MEMORY[0x1C1859840](v10, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    uint64_t v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      unint64_t v6 = *(void *)(a1 + 40);
      uint64_t v7 = &v5[-v6];
      uint64_t v8 = (uint64_t)&v5[-v6 + 1];
      if (v8 >= 0)
      {
        unint64_t v9 = v4 - v6;
        if (2 * v9 > v8) {
          uint64_t v8 = 2 * v9;
        }
        if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v10 = v8;
        }
        if (v10) {
          uint64_t v11 = operator new(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        BOOL v19 = &v7[(void)v11];
        int v20 = (char *)v11 + v10;
        v7[(void)v11] = v2;
        uint64_t v18 = (uint64_t)&v7[(void)v11 + 1];
        if (v5 != (unsigned char *)v6)
        {
          uint64_t v21 = &v5[~v6];
          do
          {
            char v22 = *--v5;
            (v21--)[(void)v11] = v22;
          }
          while (v5 != (unsigned char *)v6);
LABEL_45:
          uint64_t v5 = *(unsigned char **)(a1 + 40);
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  uint64_t v5 = *(unsigned char **)(a1 + 48);
  unint64_t v12 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v12)
    {
      unint64_t v23 = *(void *)(a1 + 40);
      uint64_t v24 = &v5[-v23];
      uint64_t v25 = (uint64_t)&v5[-v23 + 1];
      if (v25 >= 0)
      {
        unint64_t v26 = v12 - v23;
        if (2 * v26 > v25) {
          uint64_t v25 = 2 * v26;
        }
        if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v27 = v25;
        }
        if (v27) {
          uint64_t v11 = operator new(v27);
        }
        else {
          uint64_t v11 = 0;
        }
        BOOL v19 = &v24[(void)v11];
        int v20 = (char *)v11 + v27;
        v24[(void)v11] = v2;
        uint64_t v18 = (uint64_t)&v24[(void)v11 + 1];
        if (v5 != (unsigned char *)v23)
        {
          uint64_t v30 = &v5[~v23];
          do
          {
            char v31 = *--v5;
            (v30--)[(void)v11] = v31;
          }
          while (v5 != (unsigned char *)v23);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    unsigned char *v5 = v2;
    uint64_t v18 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v12) {
    goto LABEL_22;
  }
  unint64_t v13 = *(void *)(a1 + 40);
  size_t v14 = &v5[-v13];
  uint64_t v15 = (uint64_t)&v5[-v13 + 1];
  if (v15 < 0) {
    goto LABEL_50;
  }
  unint64_t v16 = v12 - v13;
  if (2 * v16 > v15) {
    uint64_t v15 = 2 * v16;
  }
  if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v17 = v15;
  }
  if (v17) {
    uint64_t v11 = operator new(v17);
  }
  else {
    uint64_t v11 = 0;
  }
  BOOL v19 = &v14[(void)v11];
  int v20 = (char *)v11 + v17;
  v14[(void)v11] = v2;
  uint64_t v18 = (uint64_t)&v14[(void)v11 + 1];
  if (v5 != (unsigned char *)v13)
  {
    uint64_t v28 = &v5[~v13];
    do
    {
      char v29 = *--v5;
      (v28--)[(void)v11] = v29;
    }
    while (v5 != (unsigned char *)v13);
    goto LABEL_45;
  }
LABEL_46:
  uint64_t v11 = v19;
LABEL_47:
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v18;
  *(void *)(a1 + 56) = v20;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  for (uint64_t i = 0; ; ++i)
  {
    unint64_t v6 = &a2[i];
    if (a2[i] == 46 && v6[1] == 93) {
      break;
    }
    if (a3 - a2 - 2 == i) {
      goto LABEL_15;
    }
  }
  if (v6 == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v10, a1, a2, &a2[i]);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v10;
  unint64_t v7 = v11;
  *(void *)(a4 + 16) = v11;
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v7 = (char)*a2;
  if (v7 > 97)
  {
    if (v7 > 114)
    {
      if (v7 != 115)
      {
        if (v7 == 119)
        {
          *(_DWORD *)(a5 + 160) |= 0x500u;
          std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
          return a2 + 1;
        }
        goto LABEL_27;
      }
      int v9 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v7 == 98)
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + _Block_object_dispose(&a9, 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      if (v7 != 100) {
        goto LABEL_27;
      }
      int v9 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v9;
    return a2 + 1;
  }
  if (v7 <= 82)
  {
    if (!*a2)
    {
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + _Block_object_dispose(&a9, 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 1) = 0;
      return a2 + 1;
    }
    if (v7 == 68)
    {
      int v8 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_24:
      *(_DWORD *)(a5 + 164) = v8;
      return a2 + 1;
    }
    goto LABEL_27;
  }
  if (v7 == 83)
  {
    int v8 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_24;
  }
  if (v7 == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    if (*(unsigned char *)(a5 + 169))
    {
      char v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a5 + 24) + 40))(*(void *)(a5 + 24), 95);
      char v11 = v10;
      unint64_t v13 = *(unsigned char **)(a5 + 72);
      unint64_t v12 = *(void *)(a5 + 80);
      if ((unint64_t)v13 < v12)
      {
        *unint64_t v13 = v10;
        uint64_t v14 = (uint64_t)(v13 + 1);
LABEL_62:
        *(void *)(a5 + 72) = v14;
        return a2 + 1;
      }
      unint64_t v24 = *(void *)(a5 + 64);
      uint64_t v25 = &v13[-v24];
      uint64_t v26 = (uint64_t)&v13[-v24 + 1];
      if (v26 >= 0)
      {
        unint64_t v27 = v12 - v24;
        if (2 * v27 > v26) {
          uint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          char v29 = operator new(v28);
        }
        else {
          char v29 = 0;
        }
        char v31 = &v29[v28];
        v25[(void)v29] = v11;
        uint64_t v14 = (uint64_t)&v25[(void)v29 + 1];
        if (v13 == (unsigned char *)v24)
        {
          char v29 = &v25[(void)v29];
        }
        else
        {
          uint64_t v32 = &v13[~v24];
          do
          {
            char v33 = *--v13;
            (v32--)[(void)v29] = v33;
          }
          while (v13 != (unsigned char *)v24);
          unint64_t v13 = *(unsigned char **)(a5 + 64);
        }
        *(void *)(a5 + 64) = v29;
        *(void *)(a5 + 72) = v14;
        *(void *)(a5 + 80) = v31;
        if (v13) {
          operator delete(v13);
        }
        goto LABEL_62;
      }
LABEL_87:
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    size_t v17 = *(unsigned char **)(a5 + 72);
    unint64_t v16 = *(void *)(a5 + 80);
    if (*(unsigned char *)(a5 + 170))
    {
      if ((unint64_t)v17 >= v16)
      {
        unint64_t v18 = *(void *)(a5 + 64);
        BOOL v19 = &v17[-v18];
        uint64_t v20 = (uint64_t)&v17[-v18 + 1];
        if (v20 < 0) {
          goto LABEL_87;
        }
        unint64_t v21 = v16 - v18;
        if (2 * v21 > v20) {
          uint64_t v20 = 2 * v21;
        }
        if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v22 = v20;
        }
        if (v22) {
          unint64_t v23 = operator new(v22);
        }
        else {
          unint64_t v23 = 0;
        }
        uint64_t v39 = &v19[(void)v23];
        long long v40 = (char *)v23 + v22;
        v19[(void)v23] = 95;
        uint64_t v30 = (uint64_t)&v19[(void)v23 + 1];
        if (v17 != (unsigned char *)v18)
        {
          std::vector<std::string>::pointer v41 = &v17[~v18];
          do
          {
            char v42 = *--v17;
            (v41--)[(void)v23] = v42;
          }
          while (v17 != (unsigned char *)v18);
LABEL_80:
          size_t v17 = *(unsigned char **)(a5 + 64);
          goto LABEL_82;
        }
        goto LABEL_81;
      }
    }
    else if ((unint64_t)v17 >= v16)
    {
      unint64_t v34 = *(void *)(a5 + 64);
      BOOL v35 = &v17[-v34];
      uint64_t v36 = (uint64_t)&v17[-v34 + 1];
      if (v36 < 0) {
        goto LABEL_87;
      }
      unint64_t v37 = v16 - v34;
      if (2 * v37 > v36) {
        uint64_t v36 = 2 * v37;
      }
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v38 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v38 = v36;
      }
      if (v38) {
        unint64_t v23 = operator new(v38);
      }
      else {
        unint64_t v23 = 0;
      }
      uint64_t v39 = &v35[(void)v23];
      long long v40 = (char *)v23 + v38;
      v35[(void)v23] = 95;
      uint64_t v30 = (uint64_t)&v35[(void)v23 + 1];
      if (v17 != (unsigned char *)v34)
      {
        int16x8_t v43 = &v17[~v34];
        do
        {
          char v44 = *--v17;
          (v43--)[(void)v23] = v44;
        }
        while (v17 != (unsigned char *)v34);
        goto LABEL_80;
      }
LABEL_81:
      unint64_t v23 = v39;
LABEL_82:
      *(void *)(a5 + 64) = v23;
      *(void *)(a5 + 72) = v30;
      *(void *)(a5 + 80) = v40;
      if (v17) {
        operator delete(v17);
      }
      goto LABEL_84;
    }
    *size_t v17 = 95;
    uint64_t v30 = (uint64_t)(v17 + 1);
LABEL_84:
    *(void *)(a5 + 72) = v30;
    return a2 + 1;
  }
LABEL_27:

  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_80:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  std::basic_regex<char>::value_type v6 = *a2;
  if (v5 > 97)
  {
    switch(*a2)
    {
      case 'n':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 10;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 10;
        goto LABEL_77;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_25;
      case 'r':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 13;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 13;
        goto LABEL_77;
      case 't':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 9;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 9;
        goto LABEL_77;
      case 'v':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 11;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 11;
        goto LABEL_77;
      default:
        if (v5 == 98)
        {
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + 23) = 1;
            }
            __int16 v13 = 8;
            goto LABEL_77;
          }
          std::basic_regex<char>::value_type v7 = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_25;
          }
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + 23) = 1;
            }
            __int16 v13 = 12;
            goto LABEL_77;
          }
          std::basic_regex<char>::value_type v7 = 12;
        }
        break;
    }
LABEL_62:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
    return a2 + 1;
  }
  if (v5 > 91)
  {
    if (v5 == 92)
    {
LABEL_16:
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v6;
        *((unsigned char *)a4 + 1) = 0;
        return a2 + 1;
      }
      std::basic_regex<char>::value_type v7 = *a2;
      goto LABEL_62;
    }
    if (v5 != 97) {
      goto LABEL_25;
    }
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      __int16 v13 = 7;
LABEL_77:
      *(_WORD *)a4 = v13;
      return a2 + 1;
    }
    std::basic_regex<char>::value_type v7 = 7;
    goto LABEL_62;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_16;
  }
LABEL_25:
  if ((v6 & 0xF8) != 0x30) {
    goto LABEL_80;
  }
  std::basic_regex<char>::value_type v8 = v5 - 48;
  int v9 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v9 & 0xF8) != 0x30) {
      goto LABEL_49;
    }
    std::basic_regex<char>::value_type v8 = *v9 + 8 * v8 - 48;
    if (a2 + 2 != a3)
    {
      char v10 = a2[2];
      int v11 = v10 & 0xF8;
      std::basic_regex<char>::value_type v12 = v10 + 8 * v8 - 48;
      if (v11 == 48) {
        int v9 = a2 + 3;
      }
      else {
        int v9 = a2 + 2;
      }
      if (v11 == 48) {
        std::basic_regex<char>::value_type v8 = v12;
      }
      goto LABEL_49;
    }
  }
  int v9 = a3;
LABEL_49:
  if (a4)
  {
    if (*((char *)a4 + 23) < 0)
    {
      a4[1] = 1;
      a4 = (uint64_t *)*a4;
    }
    else
    {
      *((unsigned char *)a4 + 23) = 1;
    }
    *(unsigned char *)a4 = v8;
    *((unsigned char *)a4 + 1) = 0;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
  }
  return v9;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    std::basic_regex<char>::value_type v8 = *(_WORD **)(a1 + 120);
    unint64_t v16 = *(void *)(a1 + 128);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v8 < v16) {
        goto LABEL_24;
      }
      uint64_t v17 = *(void *)(a1 + 112);
      uint64_t v18 = (uint64_t)v8 - v17;
      if ((uint64_t)v8 - v17 > -3)
      {
        uint64_t v19 = v18 >> 1;
        unint64_t v20 = v16 - v17;
        if (v20 <= (v18 >> 1) + 1) {
          unint64_t v21 = v19 + 1;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v20 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v22 = v21;
        }
        if (v22) {
          uint64_t v22 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v22);
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v25 = (_WORD *)(v22 + 2 * v19);
        uint64_t v26 = v22 + 2 * v23;
        *uint64_t v25 = v6;
        unint64_t v24 = v25 + 1;
        unint64_t v37 = *(char **)(a1 + 112);
        unint64_t v27 = *(char **)(a1 + 120);
        if (v27 == v37) {
          goto LABEL_46;
        }
        do
        {
          __int16 v38 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--uint64_t v25 = v38;
        }
        while (v27 != v37);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v8 < v16) {
        goto LABEL_24;
      }
      uint64_t v30 = *(void *)(a1 + 112);
      uint64_t v31 = (uint64_t)v8 - v30;
      if ((uint64_t)v8 - v30 > -3)
      {
        uint64_t v32 = v31 >> 1;
        unint64_t v33 = v16 - v30;
        if (v33 <= (v31 >> 1) + 1) {
          unint64_t v34 = v32 + 1;
        }
        else {
          unint64_t v34 = v33;
        }
        if (v33 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v35 = v34;
        }
        if (v35) {
          uint64_t v35 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v35);
        }
        else {
          uint64_t v36 = 0;
        }
        uint64_t v25 = (_WORD *)(v35 + 2 * v32);
        uint64_t v26 = v35 + 2 * v36;
        *uint64_t v25 = v6;
        unint64_t v24 = v25 + 1;
        uint64_t v39 = *(char **)(a1 + 112);
        unint64_t v27 = *(char **)(a1 + 120);
        if (v27 == v39) {
          goto LABEL_46;
        }
        do
        {
          __int16 v40 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--uint64_t v25 = v40;
        }
        while (v27 != v39);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
  std::basic_regex<char>::value_type v8 = *(_WORD **)(a1 + 120);
  unint64_t v7 = *(void *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
LABEL_24:
    *std::basic_regex<char>::value_type v8 = v6;
    unint64_t v24 = v8 + 1;
    goto LABEL_48;
  }
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = (uint64_t)v8 - v9;
  if ((uint64_t)v8 - v9 <= -3) {
    goto LABEL_49;
  }
  uint64_t v11 = v10 >> 1;
  unint64_t v12 = v7 - v9;
  if (v12 <= (v10 >> 1) + 1) {
    unint64_t v13 = v11 + 1;
  }
  else {
    unint64_t v13 = v12;
  }
  if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v14 = v13;
  }
  if (v14) {
    uint64_t v14 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v14);
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v25 = (_WORD *)(v14 + 2 * v11);
  uint64_t v26 = v14 + 2 * v15;
  *uint64_t v25 = v6;
  unint64_t v24 = v25 + 1;
  size_t v28 = *(char **)(a1 + 112);
  unint64_t v27 = *(char **)(a1 + 120);
  if (v27 == v28) {
    goto LABEL_46;
  }
  do
  {
    __int16 v29 = *((_WORD *)v27 - 1);
    v27 -= 2;
    *--uint64_t v25 = v29;
  }
  while (v27 != v28);
LABEL_45:
  unint64_t v27 = *(char **)(a1 + 112);
LABEL_46:
  *(void *)(a1 + 112) = v25;
  *(void *)(a1 + 120) = v24;
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = v26;
  if (v27) {
    operator delete(v27);
  }
LABEL_48:
  *(void *)(a1 + 120) = v24;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, a3, a4, a4 - a3);
  unint64_t v5 = v8;
  if ((v8 & 0x80u) == 0) {
    __int16 v6 = __p;
  }
  else {
    __int16 v6 = (void **)__p[0];
  }
  if ((v8 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1BABEA6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](char **a1, long long *a2)
{
  unint64_t v4 = (unint64_t)a1[1];
  unint64_t v5 = (unint64_t)a1[2];
  if (v4 >= v5)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)*a1) >> 4);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0x555555555555555) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)*a1) >> 4);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0x555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v13 = (char *)operator new(48 * v12);
    }
    else
    {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[48 * v9];
    *(_OWORD *)uint64_t v14 = *a2;
    *((void *)v14 + 2) = *((void *)a2 + 2);
    long long v15 = *(long long *)((char *)a2 + 24);
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *(_OWORD *)(v14 + 24) = v15;
    *((void *)v14 + 5) = *((void *)a2 + 5);
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    uint64_t v17 = *a1;
    unint64_t v16 = (unint64_t)a1[1];
    if ((char *)v16 == *a1)
    {
      int64x2_t v21 = vdupq_n_s64(v16);
      uint64_t v18 = &v13[48 * v9];
    }
    else
    {
      uint64_t v18 = &v13[48 * v9];
      do
      {
        long long v19 = *(_OWORD *)(v16 - 48);
        *((void *)v18 - 4) = *(void *)(v16 - 32);
        *((_OWORD *)v18 - 3) = v19;
        *(void *)(v16 - 40) = 0;
        *(void *)(v16 - 32) = 0;
        *(void *)(v16 - 4_Block_object_dispose(&a9, 8) = 0;
        long long v20 = *(_OWORD *)(v16 - 24);
        *((void *)v18 - 1) = *(void *)(v16 - 8);
        *(_OWORD *)(v18 - 24) = v20;
        v18 -= 48;
        *(void *)(v16 - 16) = 0;
        *(void *)(v16 - _Block_object_dispose(&a9, 8) = 0;
        *(void *)(v16 - 24) = 0;
        v16 -= 48;
      }
      while ((char *)v16 != v17);
      int64x2_t v21 = *(int64x2_t *)a1;
    }
    unsigned __int8 v8 = v14 + 48;
    *a1 = v18;
    a1[1] = v14 + 48;
    a1[2] = &v13[48 * v12];
    uint64_t v23 = v21.i64[1];
    uint64_t v22 = (void *)v21.i64[0];
    while ((void *)v23 != v22)
    {
      v23 -= 48;
      std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v23);
    }
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    long long v6 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v4 = v6;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v7 = *(long long *)((char *)a2 + 24);
    *(void *)(v4 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v4 + 24) = v7;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    unsigned __int8 v8 = (char *)(v4 + 48);
  }
  a1[1] = v8;
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C1859160](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BABEA938(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    char v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(void *result, char *a2, char *a3, unint64_t a4)
{
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v7 = result;
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    __n128 result = operator new(v8 + 1);
    v7[1] = a4;
    void v7[2] = v9 | 0x8000000000000000;
    *long long v7 = result;
    long long v7 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)long long v7 = v10;
    long long v7 = (void *)((char *)v7 + 1);
  }
  *(unsigned char *)long long v7 = 0;
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C1859160](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BABEAA8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1BABEAC14(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  unint64_t v4 = v1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  MEMORY[0x1C1859840](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  char v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1C1859840);
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F1482338;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1C1859840);
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F1482338;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        __n128 result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F14822F0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1C1859840);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F14822F0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v4 = a2;
  if (a2 != a3)
  {
    uint64_t v5 = *a2;
    std::basic_regex<char>::value_type v6 = v5;
    if ((char)v5 > 109)
    {
      switch((char)v5)
      {
        case 'n':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 10;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 10;
          goto LABEL_79;
        case 'r':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 13;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 13;
          goto LABEL_79;
        case 't':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 9;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 9;
          goto LABEL_79;
        case 'u':
          if (v4 + 1 != a3)
          {
            int v7 = v4[1];
            if ((v7 & 0xF8) == 0x30 || (v7 & 0xFE) == 0x38 || (v7 | 0x20u) - 97 < 6)
            {
              v4 += 2;
              if (v4 != a3)
              {
                int v8 = *v4;
                if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6) {
                  goto LABEL_27;
                }
              }
            }
          }
          goto LABEL_89;
        case 'v':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 11;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 11;
          break;
        case 'x':
LABEL_27:
          if (v4 + 1 == a3) {
            goto LABEL_89;
          }
          unsigned __int8 v9 = v4[1];
          char v10 = -48;
          if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38) {
            goto LABEL_32;
          }
          v9 |= 0x20u;
          if ((v9 - 97) >= 6u) {
            goto LABEL_89;
          }
          char v10 = -87;
LABEL_32:
          if (v4 + 2 == a3) {
            goto LABEL_89;
          }
          unsigned __int8 v11 = v4[2];
          char v12 = -48;
          if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38) {
            goto LABEL_37;
          }
          v11 |= 0x20u;
          if ((v11 - 97) >= 6u) {
            goto LABEL_89;
          }
          char v12 = -87;
LABEL_37:
          std::basic_regex<char>::value_type v13 = v12 + v11 + 16 * (v10 + v9);
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + 23) = 1;
            }
            *(unsigned char *)a4 = v13;
            *((unsigned char *)a4 + 1) = 0;
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v13);
          }
          v4 += 3;
          return v4;
        default:
          goto LABEL_51;
      }
      goto LABEL_79;
    }
    if ((char)v5 == 48)
    {
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return ++v4;
      }
      std::basic_regex<char>::value_type v6 = 0;
      goto LABEL_67;
    }
    if ((char)v5 != 99)
    {
      if ((char)v5 == 102)
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 12;
LABEL_79:
          *(_WORD *)a4 = v16;
          return ++v4;
        }
        std::basic_regex<char>::value_type v6 = 12;
LABEL_67:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return ++v4;
      }
LABEL_51:
      if ((char)v5 != 95 && ((char)v5 < 0 || (a1->__traits_.__ct_->__tab_[v5] & 0x500) == 0))
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          *(unsigned char *)a4 = v5;
          *((unsigned char *)a4 + 1) = 0;
          return ++v4;
        }
        goto LABEL_67;
      }
LABEL_89:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if (v4 + 1 == a3) {
      goto LABEL_89;
    }
    unsigned __int8 v14 = v4[1];
    if (((v14 & 0xDF) - 65) > 0x19u) {
      goto LABEL_89;
    }
    std::basic_regex<char>::value_type v15 = v14 & 0x1F;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v15;
      *((unsigned char *)a4 + 1) = 0;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v15);
    }
    v4 += 2;
  }
  return v4;
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&__s, a3, a4, a4 - a3);
  *(void *)a1 = 0;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v11);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = v11;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a1 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a1 = 0;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_1BABEB68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C1859160](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BABEB704(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C1859160](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BABEB75C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::vector<std::string>::pointer std::vector<std::string>::__push_back_slow_path<std::string const&>(std::vector<std::string> *a1, long long *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_ - (char *)a1->__begin_) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  if (0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  __v.__end_cap_.__value_ = p_end_cap;
  if (v7)
  {
    int v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7);
  }
  else
  {
    int v9 = 0;
    uint64_t v8 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v9 + v2;
  __v.__first_ = v9;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v9[v8];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v11 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
  std::vector<std::string>::pointer v12 = a1->__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v12;
}

void sub_1BABEB880(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v8 = 0;
    BOOL negate = this->__negate_;
    goto LABEL_170;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_35;
  }
  char v6 = *current;
  LOBYTE(v85) = *current;
  char v7 = current[1];
  HIBYTE(v85) = v7;
  if (this->__icase_)
  {
    LOBYTE(v85) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(v85) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = v85;
  __s.__r_.__value_.__s.__data_[2] = 0;
  memset(&__p, 0, sizeof(__p));
  std::__get_collation_name(&v86, (const char *)&__s);
  std::string __p = v86;
  std::string::size_type size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
  int v11 = SHIBYTE(v86.__r_.__value_.__r.__words[2]);
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v86.__r_.__value_.__l.__size_;
  }
  if (size) {
    goto LABEL_11;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_11;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    goto LABEL_15;
  }
  (*(void (**)(std::string *__return_ptr))(*(void *)this->__traits_.__col_ + 32))(&v86);
  if (v11 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v86;
  if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v86.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v86.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_11;
    }
    goto LABEL_113;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_113:
    std::string::operator=(&__p, &__s);
    goto LABEL_11;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_11:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
LABEL_15:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v22 = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v22) {
      goto LABEL_17;
    }
LABEL_35:
    BOOL negate = 0;
    uint64_t v8 = 1;
    goto LABEL_36;
  }
  if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
    goto LABEL_35;
  }
LABEL_17:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v13 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v13)
  {
    uint64_t v14 = v13 >> 1;
    if ((unint64_t)(v13 >> 1) <= 1) {
      uint64_t v14 = 1;
    }
    p_second = &begin->second;
    while (v85 != *(p_second - 1) || HIBYTE(v85) != *p_second)
    {
      p_second += 2;
      if (!--v14) {
        goto LABEL_26;
      }
    }
    goto LABEL_167;
  }
LABEL_26:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    BOOL negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v85, (char *)&v86);
    std::vector<std::pair<std::string, std::string>>::pointer v17 = this->__ranges_.__begin_;
    uint64_t v18 = (char *)this->__ranges_.__end_ - (char *)v17;
    if (v18)
    {
      unint64_t v19 = 0;
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (v18 >> 4);
      while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, &__s) << 24) > 0xFFFFFF|| (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s, v17->second.__r_.__value_.__r.__words) << 24) >= 0x1000000)
      {
        ++v19;
        ++v17;
        if (v19 >= v20) {
          goto LABEL_33;
        }
      }
      BOOL negate = 1;
      int v21 = 5;
    }
    else
    {
LABEL_33:
      BOOL negate = 0;
      int v21 = 0;
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (negate) {
      goto LABEL_145;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_149:
    if ((char)v85 < 0)
    {
      neg_masCFMutableDictionaryRef k = this->__neg_mask_;
    }
    else
    {
      masCFMutableDictionaryRef k = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      std::ctype_base::mask v75 = tab[v85];
      if (((v75 & mask) != 0 || v85 == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(v85) & 0x80000000) == 0
        && ((tab[HIBYTE(v85)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(v85) == 95))
      {
        goto LABEL_167;
      }
      neg_masCFMutableDictionaryRef k = this->__neg_mask_;
      if ((v75 & neg_mask) != 0 || v85 == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_166:
        int v77 = negate;
LABEL_168:
        BOOL negate = v77;
        goto LABEL_169;
      }
    }
    if ((SHIBYTE(v85) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(v85)] & neg_mask) == 0)
      {
        int v77 = 1;
        if (HIBYTE(v85) != 95 || (neg_mask & 0x80) == 0) {
          goto LABEL_168;
        }
      }
      goto LABEL_166;
    }
LABEL_167:
    int v77 = 1;
    goto LABEL_168;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v85, (char *)&v86);
  std::vector<std::string>::pointer v57 = this->__equivalences_.__begin_;
  uint64_t v58 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  int64_t v59 = (char *)this->__equivalences_.__end_ - (char *)v57;
  if (!v59)
  {
    if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) != 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    goto LABEL_149;
  }
  uint64_t v60 = 0;
  unint64_t v61 = v59 / 24;
  long long v62 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v63 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v63 = __s.__r_.__value_.__l.__size_;
  }
  if (v61 <= 1) {
    uint64_t v64 = 1;
  }
  else {
    uint64_t v64 = v59 / 24;
  }
  BOOL v65 = 1;
  while (1)
  {
    uint64_t v66 = &v57[v60];
    std::string::size_type v67 = HIBYTE(v66->__r_.__value_.__r.__words[2]);
    int v68 = (char)v67;
    if ((v67 & 0x80u) != 0) {
      std::string::size_type v67 = v66->__r_.__value_.__l.__size_;
    }
    if (v63 != v67) {
      goto LABEL_140;
    }
    uint64_t v69 = v68 >= 0 ? &v57[v60] : (std::string *)v66->__r_.__value_.__r.__words[0];
    if ((v58 & 0x80) == 0) {
      break;
    }
    unint64_t v82 = v61;
    uint64_t v83 = v58;
    int v72 = memcmp((const void *)v62, v69, *((size_t *)&v62 + 1));
    unint64_t v61 = v82;
    uint64_t v58 = v83;
    if (!v72)
    {
      int v21 = 5;
      BOOL negate = 1;
      goto LABEL_143;
    }
LABEL_140:
    BOOL v65 = ++v60 < v61;
    if (v60 == v64)
    {
      int v21 = 0;
      goto LABEL_142;
    }
  }
  if (!v58)
  {
    BOOL negate = 1;
    if (v65) {
      goto LABEL_169;
    }
    goto LABEL_149;
  }
  p_s = &__s;
  uint64_t v71 = v58;
  do
  {
    if (p_s->__r_.__value_.__s.__data_[0] != v69->__r_.__value_.__s.__data_[0]) {
      goto LABEL_140;
    }
    p_s = (std::string *)((char *)p_s + 1);
    uint64_t v69 = (std::string *)((char *)v69 + 1);
    --v71;
  }
  while (v71);
  BOOL negate = 1;
  int v21 = 5;
LABEL_142:
  if ((v58 & 0x80) != 0) {
LABEL_143:
  }
    operator delete(__s.__r_.__value_.__l.__data_);
  if (!v65) {
    goto LABEL_149;
  }
LABEL_145:
  if (v21)
  {
LABEL_169:
    uint64_t v8 = 2;
    goto LABEL_170;
  }
  uint64_t v8 = 2;
LABEL_36:
  unsigned __int8 v23 = *a2->__current_;
  v86.__r_.__value_.__s.__data_[0] = v23;
  if (this->__icase_)
  {
    unsigned __int8 v23 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v23);
    v86.__r_.__value_.__s.__data_[0] = v23;
  }
  std::vector<char>::pointer v24 = this->__chars_.__begin_;
  unint64_t v25 = this->__chars_.__end_ - v24;
  if (v25)
  {
    if (v25 <= 1) {
      unint64_t v25 = 1;
    }
    while (1)
    {
      int v26 = *v24++;
      if (v26 == v23) {
        break;
      }
      if (!--v25) {
        goto LABEL_43;
      }
    }
LABEL_103:
    BOOL negate = 1;
    goto LABEL_170;
  }
LABEL_43:
  std::regex_traits<char>::char_class_type v27 = this->__neg_mask_;
  if (v27 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v23 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v23] & v27) == 0) {
      int v28 = (v23 == 95) & (v27 >> 7);
    }
    else {
      LOBYTE(v2_Block_object_dispose(&a9, 8) = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v30 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v23, end - this->__neg_chars_.__begin_);
    uint64_t v31 = v30 ? v30 : end;
    if ((v28 & 1) == 0 && v31 == end) {
      goto LABEL_103;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v33 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v32 = this->__ranges_.__end_;
  if (v33 != v32)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v86, &v86.__r_.__value_.__s.__data_[1]);
      std::vector<std::pair<std::string, std::string>>::pointer v33 = this->__ranges_.__begin_;
      std::vector<std::pair<std::string, std::string>>::pointer v32 = this->__ranges_.__end_;
    }
    else
    {
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v23;
    }
    uint64_t v34 = (char *)v32 - (char *)v33;
    if (v34)
    {
      unint64_t v35 = 0;
      unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (v34 >> 4);
      while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v33, &__s) << 24) > 0xFFFFFF|| (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s, v33->second.__r_.__value_.__r.__words) << 24) >= 0x1000000)
      {
        ++v35;
        ++v33;
        if (v35 >= v36) {
          goto LABEL_64;
        }
      }
      char v37 = 1;
      BOOL negate = 1;
    }
    else
    {
LABEL_64:
      char v37 = 0;
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (v37) {
      goto LABEL_170;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_98;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v86, &v86.__r_.__value_.__s.__data_[1]);
  std::vector<std::string>::pointer v38 = this->__equivalences_.__begin_;
  uint64_t v39 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  int64_t v40 = (char *)this->__equivalences_.__end_ - (char *)v38;
  if (!v40)
  {
    if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) != 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    goto LABEL_98;
  }
  uint64_t v41 = 0;
  unint64_t v42 = v40 / 24;
  long long v43 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v44 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v44 = __s.__r_.__value_.__l.__size_;
  }
  if (v42 <= 1) {
    uint64_t v45 = 1;
  }
  else {
    uint64_t v45 = v40 / 24;
  }
  BOOL v46 = 1;
  while (2)
  {
    uint64_t v47 = &v38[v41];
    std::string::size_type v48 = HIBYTE(v47->__r_.__value_.__r.__words[2]);
    int v49 = (char)v48;
    if ((v48 & 0x80u) != 0) {
      std::string::size_type v48 = v47->__r_.__value_.__l.__size_;
    }
    if (v44 != v48)
    {
LABEL_91:
      BOOL v46 = ++v41 < v42;
      if (v41 == v45)
      {
LABEL_92:
        if ((v39 & 0x80) == 0) {
          goto LABEL_94;
        }
        goto LABEL_93;
      }
      continue;
    }
    break;
  }
  if (v49 >= 0) {
    unint64_t v50 = &v38[v41];
  }
  else {
    unint64_t v50 = (std::string *)v47->__r_.__value_.__r.__words[0];
  }
  if ((v39 & 0x80) != 0)
  {
    BOOL v81 = negate;
    std::string::size_type v53 = v44;
    long long v80 = v38;
    int v54 = memcmp((const void *)v43, v50, *((size_t *)&v43 + 1));
    std::vector<std::string>::pointer v38 = v80;
    std::string::size_type v44 = v53;
    BOOL negate = v81;
    if (!v54)
    {
      BOOL negate = 1;
LABEL_93:
      operator delete(__s.__r_.__value_.__l.__data_);
      goto LABEL_94;
    }
    goto LABEL_91;
  }
  if (v39)
  {
    uint64_t v51 = &__s;
    uint64_t v52 = v39;
    while (v51->__r_.__value_.__s.__data_[0] == v50->__r_.__value_.__s.__data_[0])
    {
      uint64_t v51 = (std::string *)((char *)v51 + 1);
      unint64_t v50 = (std::string *)((char *)v50 + 1);
      if (!--v52)
      {
        BOOL negate = 1;
        goto LABEL_92;
      }
    }
    goto LABEL_91;
  }
  BOOL negate = 1;
LABEL_94:
  if (!v46)
  {
LABEL_98:
    if (v86.__r_.__value_.__s.__data_[0] < 0) {
      goto LABEL_170;
    }
    std::regex_traits<char>::char_class_type v55 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v86.__r_.__value_.__s.__data_[0]] & v55) == 0)
    {
      int v56 = (v55 >> 7) & 1;
      if (v86.__r_.__value_.__s.__data_[0] != 95) {
        int v56 = 0;
      }
      if (v56 != 1) {
        goto LABEL_170;
      }
    }
    goto LABEL_103;
  }
LABEL_170:
  if (negate == this->__negate_)
  {
    first = 0;
    int v79 = -993;
  }
  else
  {
    a2->__current_ += v8;
    first = this->__first_;
    int v79 = -995;
  }
  a2->__do_ = v79;
  a2->__node_ = first;
}

void sub_1BABEC1F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, a3, a4, a4 - a3);
  unint64_t v5 = v8;
  if ((v8 & 0x80u) == 0) {
    char v6 = __p;
  }
  else {
    char v6 = (void **)__p[0];
  }
  if ((v8 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1BABEC2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, a3, a4, a4 - a3);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    char v7 = __p;
  }
  else {
    char v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        uint64_t v10 = (unsigned char *)a1;
      }
      else {
        uint64_t v10 = *(unsigned char **)a1;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a1 = 0;
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1BABEC3F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);

  JUMPOUT(0x1C1859840);
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  char v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  char v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  unint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  unint64_t v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1C1859840);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C1859160](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BABEC714(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (unint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        __n128 result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (__n128 result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v10;
  return result;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1C1859840);
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2);
    unsigned int v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      uint64_t v9 = v6;
      uint64_t v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v10++;
        if (v11 != v13) {
          break;
        }
        if (!--v9) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 80) = v8;
  return result;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F1482410;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1C1859840);
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F1482410;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        __n128 result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 80) = v6;
  return result;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F14823C8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1C1859840);
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F14823C8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = (char *)a2;
  if (a2 != a3)
  {
    std::vector<char>::pointer end = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    int v9 = a2 + 1;
    int v8 = *a2;
    if ((a2 + 1 != a3 || v8 != 36)
      && ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0))
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
      goto LABEL_29;
    }
    int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(a1, a2, a3);
    if (v11 == v3)
    {
      if (*v3 == 46) {
        operator new();
      }
      int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, v3, (char *)a3);
    }
    if (v11 == v3 && v11 != (char *)a3)
    {
      if (v9 == a3 || *v3 != 92) {
        return v3;
      }
      int v12 = *v9;
      if (v12 == 40)
      {
        uint64_t v13 = (uint64_t)(v3 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int v14 = a1->__marked_count_;
        do
        {
          std::basic_regex<char>::value_type v15 = (unsigned __int8 *)v13;
          uint64_t v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v13, a3);
        }
        while ((unsigned __int8 *)v13 != v15);
        if (v15 == a3 || v15 + 1 == a3 || *v15 != 92 || v15[1] != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        int v11 = (char *)(v15 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v14);
      }
      else
      {
        BOOL v16 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v12);
        uint64_t v17 = 2;
        if (!v16) {
          uint64_t v17 = 0;
        }
        int v11 = &v3[v17];
      }
    }
    int v9 = (unsigned __int8 *)v11;
    if (v11 != v3)
    {
LABEL_29:
      if (v9 == a3) {
        return (char *)a3;
      }
      size_t v18 = a1->__marked_count_ + 1;
      int v19 = *v9;
      if (v19 == 42)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
        return (char *)(v9 + 1);
      }
      if (v9 + 1 == a3 || v19 != 92 || v9[1] != 123) {
        return (char *)v9;
      }
      int v29 = 0;
      unint64_t v20 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v9 + 2, a3, &v29);
      if (v20 == v9 + 2) {
LABEL_45:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
      if (v20 != a3)
      {
        int v21 = v20 + 1;
        int v22 = *v20;
        if (v22 == 44)
        {
          int v28 = -1;
          unsigned __int8 v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v20 + 1, a3, &v28);
          if (v23 != a3 && v23 + 1 != a3 && *v23 == 92 && v23[1] == 125)
          {
            size_t v25 = v28;
            size_t v24 = v29;
            if (v28 == -1)
            {
              size_t v25 = -1;
            }
            else if (v28 < v29)
            {
              goto LABEL_45;
            }
            uint64_t v3 = (char *)&v23[2 * (v23[1] == 125)];
            int v26 = a1;
LABEL_53:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v26, v24, v25, end, marked_count + 1, v18, 1);
            return v3;
          }
        }
        else if (v21 != a3 && v22 == 92 && *v21 == 125)
        {
          uint64_t v3 = (char *)(v20 + 2);
          size_t v24 = v29;
          int v26 = a1;
          size_t v25 = v29;
          goto LABEL_53;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v3;
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(std::basic_regex<char> *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    int v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, char *a3)
{
  if (a2 == (unsigned __int8 *)a3) {
    return a2;
  }
  int v6 = (char)*a2;
  int v7 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == (unsigned __int8 *)a3) {
        goto LABEL_32;
      }
      int v16 = a2[1];
      if (v16 == 66)
      {
        BOOL v17 = 1;
      }
      else
      {
        if (v16 != 98) {
          goto LABEL_31;
        }
        BOOL v17 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v17);
      return a2 + 2;
    }
    if (v6 != 94) {
      goto LABEL_32;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    return a2 + 1;
  }
  BOOL v9 = v6 == 40;
  int v8 = (char *)(a2 + 1);
  BOOL v9 = !v9 || v8 == a3;
  if (!v9)
  {
    uint64_t v10 = (char *)(a2 + 2);
    if (*v8 == 63 && v10 != a3)
    {
      int v12 = *v10;
      if (v12 == 33)
      {
        std::regex_traits<char>::regex_traits(&v44.__traits_);
        memset(&v44.__flags_, 0, 40);
        v44.__flags_ = this->__flags_;
        uint64_t v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v44, a2 + 3, a3);
        unsigned int marked_count = v44.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v44, 1, this->__marked_count_);
        this->__marked_count_ += marked_count;
        if (v13 == a3 || *v13 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
LABEL_30:
        std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v44.__traits_.__loc_);
        __n128 result = (unsigned __int8 *)(v13 + 1);
        if (v13 + 1 != (char *)a2) {
          return result;
        }
        goto LABEL_31;
      }
      if (v12 == 61)
      {
        std::regex_traits<char>::regex_traits(&v44.__traits_);
        memset(&v44.__flags_, 0, 40);
        v44.__flags_ = this->__flags_;
        uint64_t v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v44, a2 + 3, a3);
        unsigned int v14 = v44.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v44, 0, this->__marked_count_);
        this->__marked_count_ += v14;
        if (v13 == a3 || *v13 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        goto LABEL_30;
      }
    }
LABEL_31:
    int v7 = *a2;
  }
LABEL_32:
  std::vector<char>::pointer end = this->__end_;
  unsigned int v20 = this->__marked_count_;
  if ((char)v7 <= 91)
  {
    __n128 result = a2;
    switch((char)v7)
    {
      case '$':
      case ')':
        return result;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_60;
      case '(':
        if (a2 + 1 == (unsigned __int8 *)a3) {
          goto LABEL_98;
        }
        if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
        {
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          int v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
          if (v22 == a3) {
            goto LABEL_98;
          }
          unsigned __int8 v23 = v22;
          if (*v22 != 41) {
            goto LABEL_98;
          }
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
          unsigned int v29 = this->__marked_count_;
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          std::vector<char>::pointer v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 1, a3);
          if (v30 == a3 || (unsigned __int8 v23 = v30, *v30 != 41)) {
LABEL_98:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v29);
        }
        --*p_open_count;
        size_t v25 = (unsigned __int8 *)(v23 + 1);
        goto LABEL_57;
      case '*':
      case '+':
        goto LABEL_65;
      case '.':
        operator new();
      default:
        if ((char)v7 == 91)
        {
          size_t v25 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, a3);
          goto LABEL_57;
        }
        if ((char)v7 != 63) {
          goto LABEL_60;
        }
        goto LABEL_65;
    }
  }
  uint64_t v24 = ((char)v7 - 92);
  if (v24 <= 0x21)
  {
    if (((1 << (v7 - 92)) & 0x300000006) != 0) {
      return a2;
    }
    if ((char)v7 == 92)
    {
      if (v7 != 92) {
        return a2;
      }
      int v26 = a2 + 1;
      if (a2 + 1 == (unsigned __int8 *)a3) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
      }
      int v27 = *v26;
      unsigned int v28 = v27 - 48;
      if (v27 == 48)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v28);
LABEL_97:
        size_t v25 = a2 + 2;
        goto LABEL_61;
      }
      if ((v27 - 49) <= 8)
      {
        size_t v25 = a2 + 2;
        if (a2 + 2 == (unsigned __int8 *)a3)
        {
          size_t v25 = (unsigned __int8 *)a3;
        }
        else
        {
          while (1)
          {
            int v32 = *v25;
            if ((v32 - 48) > 9) {
              break;
            }
            if (v28 >= 0x19999999) {
              goto LABEL_99;
            }
            ++v25;
            unsigned int v28 = v32 + 10 * v28 - 48;
            if (v25 == (unsigned __int8 *)a3)
            {
              size_t v25 = (unsigned __int8 *)a3;
              break;
            }
          }
          if (!v28) {
LABEL_99:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
        }
        if (v28 > v20) {
          goto LABEL_99;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v28);
        if (v25 != v26)
        {
LABEL_57:
          __n128 result = a2;
          if (v25 == a2) {
            return result;
          }
          goto LABEL_61;
        }
      }
      int v33 = (char)*v26;
      if (v33 > 99)
      {
        if (v33 == 119)
        {
          uint64_t v34 = this;
          BOOL v35 = 0;
          goto LABEL_89;
        }
        if (v33 == 115)
        {
          unint64_t v42 = this;
          BOOL v43 = 0;
LABEL_95:
          started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v42, v43);
          int v39 = started->__mask_ | 0x4000;
          goto LABEL_96;
        }
        if (v33 != 100)
        {
LABEL_90:
          uint64_t v41 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, (unsigned __int8 *)a3, 0);
          if (v41 == v26) {
            size_t v25 = a2;
          }
          else {
            size_t v25 = v41;
          }
          goto LABEL_57;
        }
        unint64_t v36 = this;
        BOOL v37 = 0;
      }
      else
      {
        if (v33 != 68)
        {
          if (v33 != 83)
          {
            if (v33 == 87)
            {
              uint64_t v34 = this;
              BOOL v35 = 1;
LABEL_89:
              int64_t v40 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v34, v35);
              v40->__mask_ |= 0x500u;
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v40, 95);
              goto LABEL_97;
            }
            goto LABEL_90;
          }
          unint64_t v42 = this;
          BOOL v43 = 1;
          goto LABEL_95;
        }
        unint64_t v36 = this;
        BOOL v37 = 1;
      }
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v36, v37);
      int v39 = started->__mask_ | 0x400;
LABEL_96:
      started->__mask_ = v39;
      goto LABEL_97;
    }
    if (v24 == 31) {
LABEL_65:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
  }
LABEL_60:
  std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v7);
  size_t v25 = a2 + 1;
LABEL_61:
  size_t v31 = this->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v25, (unsigned __int8 *)a3, end, v20 + 1, v31);
}

void sub_1BABED7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C1859160](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BABED854(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1C1859840);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  char v22 = 0;
  memset(&v23, 0, 17);
  char v24 = 0;
  uint64_t v25 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v5 = *(void *)(a2 + 16);
  v19.first = *(const char **)(a2 + 24);
  v19.second = v19.first;
  v19.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v19);
  uint64_t v20 = v5;
  uint64_t v21 = v5;
  char v22 = 0;
  std::vector<std::csub_match>::value_type v23 = v19;
  uint64_t v25 = v5;
  char v24 = 1;
  int v6 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v7 = v6 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    std::vector<std::csub_match>::pointer begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  std::vector<std::csub_match>::pointer begin = __p.__begin_;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v11 = *(_DWORD *)(a1 + 80);
  uint64_t v12 = *(void *)(a2 + 32);
  unsigned int v13 = 2;
  uint64_t v14 = 1;
  do
  {
    std::basic_regex<char>::value_type v15 = &begin[v14];
    uint64_t v16 = v12 + 24 * (v11 + v13 - 2);
    *(std::pair<const char *, const char *> *)uint64_t v16 = v15->std::pair<const char *, const char *>;
    *(unsigned char *)(v16 + 16) = v15->matched;
    uint64_t v14 = v13;
  }
  while (v10 > v13++);
LABEL_14:

  operator delete(begin);
}

void sub_1BABEDC50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F1482260;
  unsigned int v2 = (std::locale *)(a1 + 2);
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  std::vector<std::csub_match>::size_type v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }

  JUMPOUT(0x1C1859840);
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F1482260;
  unsigned int v2 = (std::locale *)(a1 + 2);
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  std::vector<std::csub_match>::size_type v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  return a1;
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 **)(a2 + 8);
  uint64_t v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  std::vector<std::csub_match>::size_type v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 80) = v12;
  return result;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F1482218;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1C1859840);
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F1482218;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001BB039744)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1C1859840);
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__end_state<char>::~__end_state()
{
}

char *std::vector<__CFString const*>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(8 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * a2];
  return result;
}

CFIndex ___ZNK20HALS_SettingsManager21GetNumberSettingsKeysEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3)
  {
    CASettingsStorage::RefreshSettings(*(CASettingsStorage **)(v2 + 24));
    CFIndex result = CFDictionaryGetCount(*(CFDictionaryRef *)(v3 + 16));
  }
  else
  {
    CFIndex result = 0;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

CFPropertyListRef HALS_SettingsManager::_ReadSetting(CFDictionaryRef *this, const __CFString *a2, uint64_t a3, const void *a4)
{
  if (!this) {
    return 0;
  }
  CFPropertyListRef propertyList = 0;
  CASettingsStorage::CopyCFTypeValue(this, a2, &propertyList, a4);
  CFPropertyListRef DeepCopy = CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF88], propertyList, 0);
  if (propertyList) {
    CFRelease(propertyList);
  }
  return DeepCopy;
}

void sub_1BABEE300(void *a1)
{
}

void HALS_SettingsManager::_WriteSetting(CFMutableDictionaryRef **this, const __CFString *a2, CFPropertyListRef propertyList)
{
  if (this[3])
  {
    CFPropertyListRef DeepCopy = CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF88], propertyList, 0);
    CASettingsStorage::SetCFTypeValue(this[3], a2, DeepCopy);
    CFRelease(DeepCopy);
  }
}

void sub_1BABEE390(void *a1)
{
}

void CACFNumber::~CACFNumber(CACFNumber *this)
{
  if (*((unsigned char *)this + 8))
  {
    uint64_t v2 = *(const void **)this;
    if (*(void *)this) {
      CFRelease(v2);
    }
  }
}

uint64_t ___ZN20HALS_SettingsManager12ForceRefreshEv_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 32) + 4_Block_object_dispose(&a9, 8) = 1;
  return result;
}

uint64_t HALS_SettingsManager::ReadSetting(HALS_SettingsManager *this, const __CFString *a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  uint64_t v10 = 0;
  uint64_t v2 = *((void *)this + 2);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN20HALS_SettingsManager11ReadSettingEPK10__CFString_block_invoke;
  block[3] = &unk_1E6231070;
  void block[4] = &v7;
  void block[5] = this;
  block[6] = a2;
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(v2 + 32));
  if (v3) {
    atomic_store(1u, (unsigned __int8 *)(v2 + 33));
  }
  dispatch_sync(*(dispatch_queue_t *)v2, block);
  uint64_t v4 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

CFPropertyListRef ___ZN20HALS_SettingsManager11ReadSettingEPK10__CFString_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CFPropertyListRef result = HALS_SettingsManager::_ReadSetting(*(CFDictionaryRef **)(*(void *)(a1 + 40) + 24), *(const __CFString **)(a1 + 48), a3, a4);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void HALS_SettingsManager::WriteSetting(HALS_SettingsManager *this, CFTypeRef cf, const void *a3)
{
  if (cf)
  {
    CFRetain(cf);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, cf);
  }
  else
  {
    CFTypeRef cfa = 0;
  }
  mcp_applesauce::CF::PropertyListRef::from_get((mcp_applesauce::CF::PropertyListRef *)&v11, a3);
  uint64_t v6 = *((void *)this + 2);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(v10, *(void *)this, *((std::__shared_weak_count **)this + 1));
  CFTypeRef v7 = cfa;
  if (cfa) {
    CFRetain(cfa);
  }
  uint64_t v10[2] = v7;
  CFTypeRef v8 = v11;
  if (v11) {
    CFRetain(v11);
  }
  void v10[3] = v8;
  unsigned __int8 v9 = atomic_load((unsigned __int8 *)(v6 + 32));
  if (v9) {
    atomic_store(1u, (unsigned __int8 *)(v6 + 33));
  }
  operator new();
}

void sub_1BABEE68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  CFTypeRef v7 = va_arg(va1, const void *);
  mcp_applesauce::CF::PropertyListRef::~PropertyListRef((const void **)va);
  applesauce::CF::StringRef::~StringRef((const void **)va1);
  _Unwind_Resume(a1);
}

void *std::unique_ptr<HALS_SettingsManager::WriteSetting(__CFString const*,void const*)::$_0,std::default_delete<HALS_SettingsManager::WriteSetting(__CFString const*,void const*)::$_0>>::~unique_ptr[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)*a1;
  *a1 = 0;
  if (v2)
  {
    unsigned __int8 v3 = (const void *)v2[3];
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = (const void *)v2[2];
    if (v4) {
      CFRelease(v4);
    }
    int v5 = (std::__shared_weak_count *)v2[1];
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    MEMORY[0x1C1859840](v2, 0xE0C402E8C7BDELL);
  }
  return a1;
}

void *applesauce::dispatch::v1::async<HALS_SettingsManager::WriteSetting(__CFString const*,void const*)::$_0 &>(dispatch_queue_s *,HALS_SettingsManager::WriteSetting(__CFString const*,void const*)::$_0 &)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = a1;
  HALS_SettingsManager::_WriteSetting(*(CFMutableDictionaryRef ***)a1, *(const __CFString **)(a1 + 16), *(CFPropertyListRef *)(a1 + 24));
  return std::unique_ptr<HALS_SettingsManager::WriteSetting(__CFString const*,void const*)::$_0,std::default_delete<HALS_SettingsManager::WriteSetting(__CFString const*,void const*)::$_0>>::~unique_ptr[abi:ne180100](&v2);
}

void sub_1BABEE764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<HALS_SettingsManager::WriteSetting(__CFString const*,void const*)::$_0,std::default_delete<HALS_SettingsManager::WriteSetting(__CFString const*,void const*)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_SettingsManager::HasServerSetting(HALS_SettingsManager *this, const __CFString *a2)
{
  uint64_t v7 = 0;
  CFTypeRef v8 = &v7;
  uint64_t v9 = 0x2000000000;
  char v10 = 0;
  uint64_t v2 = *((void *)this + 2);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN20HALS_SettingsManager16HasServerSettingEPK10__CFString_block_invoke;
  block[3] = &unk_1E62310E0;
  void block[4] = &v7;
  void block[5] = this;
  block[6] = @"AirPlayIsAlwaysTransient";
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(v2 + 32));
  if (v3) {
    atomic_store(1u, (unsigned __int8 *)(v2 + 33));
  }
  dispatch_sync(*(dispatch_queue_t *)v2, block);
  uint64_t v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

CFIndex ___ZN20HALS_SettingsManager16HasServerSettingEPK10__CFString_block_invoke(CFIndex result)
{
  CFIndex v1 = result;
  uint64_t v2 = *(void *)(result + 40);
  uint64_t v3 = *(void *)(v2 + 32);
  if (v3)
  {
    uint64_t v4 = *(const void **)(result + 48);
    CASettingsStorage::RefreshSettings(*(CASettingsStorage **)(v2 + 32));
    CFPropertyListRef result = CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v3 + 16), v4);
    BOOL v5 = result > 0;
  }
  else
  {
    BOOL v5 = 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = v5;
  return result;
}

uint64_t HALS_SettingsManager::ReadServerSetting(HALS_SettingsManager *this, const __CFString *a2)
{
  uint64_t v7 = 0;
  CFTypeRef v8 = &v7;
  uint64_t v9 = 0x2000000000;
  uint64_t v10 = 0;
  uint64_t v2 = *((void *)this + 2);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN20HALS_SettingsManager17ReadServerSettingEPK10__CFString_block_invoke;
  block[3] = &unk_1E6231108;
  void block[4] = &v7;
  void block[5] = this;
  block[6] = a2;
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(v2 + 32));
  if (v3) {
    atomic_store(1u, (unsigned __int8 *)(v2 + 33));
  }
  dispatch_sync(*(dispatch_queue_t *)v2, block);
  uint64_t v4 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

CFDictionaryRef *___ZN20HALS_SettingsManager17ReadServerSettingEPK10__CFString_block_invoke(void *a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v6 = a1[5];
  CFStringRef v5 = (const __CFString *)a1[6];
  CFTypeRef v8 = 0;
  CFPropertyListRef result = *(CFDictionaryRef **)(v6 + 32);
  if (result) {
    CFPropertyListRef result = (CFDictionaryRef *)CASettingsStorage::CopyCFTypeValue(result, v5, (const void **)&v8, a4);
  }
  *(void *)(*(void *)(a1[4] + 8) + 24) = v8;
  return result;
}

void sub_1BABEE9D0(void *a1)
{
}

uint64_t HALS_SettingsManager::ReadServerIntSetting(HALS_SettingsManager *this, const __CFString *a2)
{
  unsigned int valuePtr = 0;
  CFNumberRef ServerSetting = (const __CFNumber *)HALS_SettingsManager::ReadServerSetting(this, @"RingBufferMode");
  CFNumberRef number = ServerSetting;
  char v8 = 1;
  if (ServerSetting && (CFTypeID v3 = CFGetTypeID(ServerSetting), v3 == CFNumberGetTypeID()))
  {
    CFNumberType Type = CFNumberGetType(number);
    CFNumberGetValue(number, Type, &valuePtr);
    uint64_t v5 = valuePtr;
  }
  else
  {
    uint64_t v5 = 0;
  }
  CACFObject<void const*>::~CACFObject((uint64_t)&number);
  return v5;
}

void sub_1BABEEA68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CACFObject<void const*>::~CACFObject((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_SettingsManager::ReadServerBooleanSetting(HALS_SettingsManager *this, const __CFString *a2, uint64_t a3)
{
  CFBooleanRef ServerSetting = (const __CFBoolean *)HALS_SettingsManager::ReadServerSetting(this, a2);
  CFBooleanRef BOOLean = ServerSetting;
  char v11 = 1;
  if (ServerSetting)
  {
    CFTypeID v5 = CFGetTypeID(ServerSetting);
    if (v5 == CFBooleanGetTypeID())
    {
      BOOL v6 = CFBooleanGetValue(BOOLean) == 0;
    }
    else
    {
      CFTypeID v7 = CFGetTypeID(BOOLean);
      if (v7 != CFNumberGetTypeID()) {
        goto LABEL_9;
      }
      uint64_t valuePtr = 0;
      CFNumberGetValue(BOOLean, kCFNumberSInt64Type, &valuePtr);
      BOOL v6 = valuePtr == 0;
    }
    a3 = !v6;
  }
LABEL_9:
  CACFObject<void const*>::~CACFObject((uint64_t)&BOOLean);
  return a3;
}

void sub_1BABEEB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  CACFObject<void const*>::~CACFObject((uint64_t)va);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest_Counter::start(uint64_t a1, AMCP::DAL::DAL_Time *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)a2 + 3);
  uint64_t v4 = (atomic_ullong *)*((void *)a2 + 4);
  if (!v4)
  {
    if (v5 == *(void *)(a1 + 24)) {
      goto LABEL_3;
    }
LABEL_5:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    char v8 = **(NSObject ***)buf;
    if (*(void *)v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v26);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)int v26 = 2080;
      *(void *)&v26[2] = "Manifest_Counter.cpp";
      __int16 v27 = 1024;
      int v28 = 22;
      __int16 v29 = 2080;
      *(void *)std::vector<char>::pointer v30 = "not (anchor_time.get_clock() == m_master_timebase)";
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v16);
    std::logic_error::logic_error(&v17, &v16);
    v17.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v18, &v17);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v23 = -1;
    v18.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    std::vector<std::csub_match>::value_type v19 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v18);
    *(void *)&v30[6] = "void AMCP::Graph::Manifest_Counter::start(const DAL_Time &)";
    size_t v31 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Counter.cpp";
    int v32 = 22;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
    long long v14 = v11;
    uint64_t v15 = v12;
    long long v11 = 0uLL;
    uint64_t v12 = 0;
    int v13 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  atomic_fetch_add_explicit(v4 + 1, 1uLL, memory_order_relaxed);
  uint64_t v6 = *(void *)(a1 + 24);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4);
  if (v5 != v6) {
    goto LABEL_5;
  }
LABEL_3:
  double sample_time = AMCP::DAL::DAL_Time::get_sample_time(a2);
  *(double *)(a1 + _Block_object_dispose(&a9, 8) = sample_time;
  *(double *)(a1 + 16) = sample_time;
  *(unsigned char *)a1 = 1;
}

void sub_1BABEEE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 128);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 129));
  _Unwind_Resume(a1);
}

double AMCP::Graph::Manifest_Counter::advance(uint64_t a1, double a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)a1)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    CFTypeID v3 = **(NSObject ***)buf;
    if (*(void *)v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v21);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = pthread_self();
      mach_port_t v5 = pthread_mach_thread_np(v4);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v5;
      *(_WORD *)uint64_t v21 = 2080;
      *(void *)&uint64_t v21[2] = "Manifest_Counter.cpp";
      __int16 v22 = 1024;
      int v23 = 58;
      __int16 v24 = 2080;
      *(void *)uint64_t v25 = "not (is_running())";
      _os_log_error_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v19);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v11);
    std::logic_error::logic_error(&v12, &v11);
    v12.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v13, &v12);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = -1;
    v13.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v14 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v13);
    *(void *)&v25[6] = "void AMCP::Graph::Manifest_Counter::advance(Sample_Time)";
    int v26 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Counter.cpp";
    int v27 = 58;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v6);
    long long v9 = v6;
    uint64_t v10 = v7;
    long long v6 = 0uLL;
    uint64_t v7 = 0;
    char v8 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double result = a2 + *(double *)(a1 + 16);
  *(double *)(a1 + 16) = result;
  ++*(_DWORD *)(a1 + 40);
  return result;
}

void sub_1BABEF11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

double AMCP::Graph::Manifest_Counter::adjust_cycle_anchor_for_buffer_size_change(double *a1, double a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)a1)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    CFTypeID v3 = **(NSObject ***)buf;
    if (*(void *)v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v21);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = pthread_self();
      mach_port_t v5 = pthread_mach_thread_np(v4);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v5;
      *(_WORD *)uint64_t v21 = 2080;
      *(void *)&uint64_t v21[2] = "Manifest_Counter.cpp";
      __int16 v22 = 1024;
      int v23 = 67;
      __int16 v24 = 2080;
      *(void *)uint64_t v25 = "not (is_running())";
      _os_log_error_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v19);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v11);
    std::logic_error::logic_error(&v12, &v11);
    v12.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v13, &v12);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = -1;
    v13.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v14 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v13);
    *(void *)&v25[6] = "void AMCP::Graph::Manifest_Counter::adjust_cycle_anchor_for_buffer_size_change(Sample_Time)";
    int v26 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Counter.cpp";
    int v27 = 67;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v6);
    long long v9 = v6;
    uint64_t v10 = v7;
    long long v6 = 0uLL;
    uint64_t v7 = 0;
    char v8 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double result = a2 + a1[2];
  a1[2] = result;
  return result;
}

void sub_1BABEF42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Manifest_Counter::get_anchor_time(uint64_t this, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)a2)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v5 = **(NSObject ***)buf;
    if (*(void *)v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v23);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      long long v6 = pthread_self();
      mach_port_t v7 = pthread_mach_thread_np(v6);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)int v23 = 2080;
      *(void *)&void v23[2] = "Manifest_Counter.cpp";
      __int16 v24 = 1024;
      int v25 = 75;
      __int16 v26 = 2080;
      *(void *)int v27 = "not (is_running())";
      _os_log_error_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v21);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v13);
    std::logic_error::logic_error(&v14, &v13);
    v14.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v15, &v14);
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v20 = -1;
    v15.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v16 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v15);
    *(void *)&v27[6] = "DAL_Time AMCP::Graph::Manifest_Counter::get_anchor_time() const";
    uint64_t v28 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Counter.cpp";
    int v29 = 75;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v8);
    long long v11 = v8;
    uint64_t v12 = v9;
    long long v8 = 0uLL;
    uint64_t v9 = 0;
    uint64_t v10 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v2 = *(void *)(a2 + 8);
  long long v3 = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)this = 2;
  *(void *)(this + _Block_object_dispose(&a9, 8) = v2;
  *(void *)(this + 16) = 0;
  *(_OWORD *)(this + 24) = v3;
  return this;
}

void sub_1BABEF760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Manifest_Counter::get_current_cycle_anchor_time(uint64_t this, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)a2)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v5 = **(NSObject ***)buf;
    if (*(void *)v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v23);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      long long v6 = pthread_self();
      mach_port_t v7 = pthread_mach_thread_np(v6);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)int v23 = 2080;
      *(void *)&void v23[2] = "Manifest_Counter.cpp";
      __int16 v24 = 1024;
      int v25 = 83;
      __int16 v26 = 2080;
      *(void *)int v27 = "not (is_running())";
      _os_log_error_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v21);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v13);
    std::logic_error::logic_error(&v14, &v13);
    v14.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v15, &v14);
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v20 = -1;
    v15.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v16 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v15);
    *(void *)&v27[6] = "DAL_Time AMCP::Graph::Manifest_Counter::get_current_cycle_anchor_time() const";
    uint64_t v28 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Counter.cpp";
    int v29 = 83;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v8);
    long long v11 = v8;
    uint64_t v12 = v9;
    long long v8 = 0uLL;
    uint64_t v9 = 0;
    uint64_t v10 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v2 = *(void *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)this = 2;
  *(void *)(this + _Block_object_dispose(&a9, 8) = v2;
  *(void *)(this + 16) = 0;
  *(_OWORD *)(this + 24) = v3;
  return this;
}

void sub_1BABEFA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

double AMCP::Graph::Manifest_Counter::get_cycle_anchor_for_timebase(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a2 + 16);
  long long v6 = *(_OWORD *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  LODWORD(v14) = 2;
  *((void *)&v14 + 1) = v5;
  uint64_t v15 = 0;
  long long v16 = v6;
  uint64_t v9 = *(void *)(a2 + 24);
  long long v8 = *(std::__shared_weak_count **)(a2 + 32);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v10 = *a3;
    long long v13 = v6;
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    long long v6 = v13;
    if (v10 != v9) {
      goto LABEL_5;
    }
LABEL_10:
    double result = *(double *)&v14;
    *(_OWORD *)a1 = v14;
    *(void *)(a1 + 16) = v15;
    *(_OWORD *)(a1 + 24) = v6;
    return result;
  }
  if (*a3 == v9) {
    goto LABEL_10;
  }
LABEL_5:
  AMCP::DAL::DAL_Time::translate_time(a1, (AMCP::DAL::DAL_Time *)&v14, a3);
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1))
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return result;
}

void sub_1BABEFC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

double AMCP::DAL::DAL_Time::floor(AMCP::DAL::DAL_Time *this, uint64_t a2)
{
  double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a2);
  long long v5 = *(_OWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)this = 2;
  double result = floor(sample_time);
  *((double *)this + 1) = result;
  *((void *)this + 2) = 0;
  *(_OWORD *)((char *)this + 24) = v5;
  return result;
}

AMCP::DAL::DAL_Time *boost::operators_impl::operator-(AMCP::DAL::DAL_Time *a1, uint64_t a2, AMCP::DAL::DAL_Time_Delta *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *((void *)a1 + 2) = *(void *)(a2 + 16);
  *((void *)a1 + 3) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *((void *)a1 + 4) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return AMCP::DAL::DAL_Time::operator-=(a1, a3);
}

void sub_1BABEFCD8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Manifest_Counter::calculate_buffer_start(AMCP::DAL::DAL_Time *a1, uint64_t a2, uint64_t *a3, uint64_t a4, AMCP::DAL::DAL_Time_Delta *a5, float a6)
{
  int v8 = a4;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a3 + 144))(*a3, a4);
  unsigned int v13 = v12;
  unint64_t v14 = HIDWORD(v12);
  if (v8)
  {
    AMCP::Graph::Manifest_Counter::get_cycle_anchor_for_timebase((uint64_t)v29, a2, a3);
    AMCP::DAL::DAL_Time::floor((AMCP::DAL::DAL_Time *)buf, (uint64_t)v29);
    boost::operators_impl::operator-(a1, (uint64_t)buf, a5);
    if (*((void *)&v34 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
    }
    long long v15 = *(_OWORD *)a3;
    uint64_t v16 = a3[1];
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    *(_DWORD *)buf = 2;
    double v32 = (double)v13;
    uint64_t v33 = 0;
    long long v34 = v15;
    AMCP::DAL::DAL_Time::operator-=(a1, (AMCP::DAL::DAL_Time_Delta *)buf);
    if (*((void *)&v34 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
    }
    long long v17 = *(_OWORD *)a3;
    uint64_t v18 = a3[1];
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    *(_DWORD *)buf = 2;
    double v32 = (double)v14;
    uint64_t v33 = 0;
    long long v34 = v17;
    AMCP::DAL::DAL_Time::operator-=(a1, (AMCP::DAL::DAL_Time_Delta *)buf);
    if (*((void *)&v34 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
    }
    if ((*(_DWORD *)a1 & 0xFFFFFFFE) == 2) {
      AMCP::DAL::DAL_Time::get_sample_time(a1);
    }
  }
  else
  {
    AMCP::Graph::Manifest_Counter::get_cycle_anchor_for_timebase((uint64_t)v29, a2, a3);
    AMCP::DAL::DAL_Time::floor(a1, (uint64_t)v29);
    long long v19 = *(_OWORD *)a3;
    uint64_t v20 = a3[1];
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
    }
    *(_DWORD *)buf = 2;
    double v32 = (double)v13;
    uint64_t v33 = 0;
    long long v34 = v19;
    AMCP::DAL::DAL_Time::operator+=(a1, (uint64_t)buf);
    if (*((void *)&v34 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
    }
    long long v21 = *(_OWORD *)a3;
    uint64_t v22 = a3[1];
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    *(_DWORD *)buf = 2;
    double v32 = (double)v14;
    uint64_t v33 = 0;
    long long v34 = v21;
    AMCP::DAL::DAL_Time::operator+=(a1, (uint64_t)buf);
    if (*((void *)&v34 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
    }
    uint64_t v24 = *((void *)a5 + 3);
    int v23 = (std::__shared_weak_count *)*((void *)a5 + 4);
    long long v25 = *(_OWORD *)a5;
    uint64_t v26 = *((void *)a5 + 2);
    uint64_t v27 = v24;
    uint64_t v28 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v25) {
      uint64_t v26 = (uint64_t)(a6 * (double)v26);
    }
    if ((v25 & 2) != 0) {
      *((double *)&v25 + 1) = *((double *)&v25 + 1) * a6;
    }
    AMCP::DAL::DAL_Time::operator+=(a1, (uint64_t)&v25);
    if ((*(_DWORD *)a1 & 0xFFFFFFFE) == 2) {
      AMCP::DAL::DAL_Time::get_sample_time(a1);
    }
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
}

void sub_1BABF0624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  std::string::size_type v48 = *(std::__shared_weak_count **)(v46 + 32);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::IOAudio1::Engine::release_power_assertions(AMCP::IOAudio1::Engine *this)
{
  return AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions((uint64_t)this + 120);
}

uint64_t AMCP::IOAudio1::Engine::take_power_assertions(AMCP::IOAudio1::Engine *this)
{
  return AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions((uint64_t)this + 120);
}

double AMCP::IOAudio1::Engine::convert_host_to_sample_time(os_unfair_lock_s *this, unint64_t a2)
{
  uint64_t v3 = (AMCP::IO_Clock *)&this[140];
  uint64_t v4 = this + 160;
  os_unfair_lock_lock(this + 160);
  double v5 = AMCP::IO_Clock::convert_host_to_sample_time_internal(v3, a2);
  os_unfair_lock_unlock(v4);
  return v5;
}

unint64_t AMCP::IOAudio1::Engine::convert_sample_to_host_time(os_unfair_lock_s *this, double a2)
{
  return AMCP::IO_Clock::convert_sample_to_host_time(this + 140, a2);
}

double AMCP::IOAudio1::Engine::get_current_host_ticks_per_frame(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 160;
  os_unfair_lock_lock(this + 160);
  double v3 = *(double *)&this[156]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2);
  return v3;
}

void AMCP::IOAudio1::Engine::get_current_time(AMCP::IOAudio1::Engine *this@<X0>, AMCP::IO_Clock *a2@<X8>)
{
}

BOOL AMCP::IOAudio1::Engine::has_time(os_unfair_lock_s *this)
{
  return AMCP::IO_Clock::has_time(this + 140);
}

BOOL AMCP::IOAudio1::Engine::reset_time(os_unfair_lock_s *this)
{
  return AMCP::IO_Clock::reset_time(this + 140);
}

uint64_t AMCP::IOAudio1::Engine::update_time(AMCP::IOAudio1::Engine *this)
{
  return AMCP::IO_Clock::update_time((AMCP::IOAudio1::Engine *)((char *)this + 560));
}

double AMCP::IOAudio1::Engine::get_zero_time_stamp@<D0>(AMCP::IOAudio1::Engine *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 91);
  if (v2 && (double v3 = *(long long **)(v2 + 16)) != 0)
  {
    long long v4 = *v3;
    *(double *)a2 = (double)(*((unsigned int *)this + 10) * (unint64_t)HIDWORD(*(void *)v3));
    *(void *)(a2 + _Block_object_dispose(&a9, 8) = *((void *)&v4 + 1);
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(void *)(a2 + 4_Block_object_dispose(&a9, 8) = 0;
  }
  else
  {
    *(void *)(a2 + 4_Block_object_dispose(&a9, 8) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  *(void *)&double result = 3;
  *(void *)(a2 + 56) = 3;
  return result;
}

BOOL AMCP::IOAudio1::Engine::end_writing(AMCP::IOAudio1::Engine *this, unint64_t a2, unint64_t a3, double a4, int a5, int a6)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 12) == *((void *)this + 13)) {
    return 1;
  }
  uint64_t v10 = (os_unfair_lock_s *)((char *)this + 720);
  os_unfair_lock_lock((os_unfair_lock_t)this + 180);
  uint64_t v11 = *((void *)this + 12);
  uint64_t v12 = *((void *)this + 13) - v11;
  if (v12)
  {
    unint64_t v13 = v12 / 56;
    uint64_t v14 = *((void *)this + 96);
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 97) - v14) >> 3);
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    uint64_t v16 = (_DWORD *)(v14 + 8);
    long long v17 = (int *)(v11 + 40);
    do
    {
      if (!v15) {
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v18 = (_DWORD *)*((void *)v16 - 1);
      int v20 = *v17;
      v17 += 14;
      int v19 = v20;
      *uint64_t v18 = v20 * a5;
      v18[1] = a5;
      int v21 = *v16;
      v16 += 6;
      v18[2] = v21 - v18 - 16;
      v18[3] = v19 * a6;
      --v15;
      --v13;
    }
    while (v13);
  }
  float v22 = AMCP::Core::Engine::calculate_safety_violation_write(this, a4);
  if (v22 < 0.0) {
    kdebug_trace();
  }
  kdebug_trace();
  AMCP::IO_Clock::get_current_zts((AMCP::IO_Clock *)buf, (uint64_t)this + 560);
  unint64_t v23 = *((unsigned int *)this + 10);
  unint64_t v24 = (unint64_t)(a4 - *(double *)buf) % v23;
  unint64_t v25 = (unint64_t)a4 / v23;
  os_unfair_lock_lock((os_unfair_lock_t)this + 160);
  double v26 = *((double *)this + 78);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 160);
  unsigned int v27 = vcvtmd_u64_f64(v26);
  unsigned int v28 = vcvtd_n_u64_f64(v26 - floor(v26), 0x20uLL);
  if (*((unsigned char *)this + 792)) {
    unint64_t v29 = v27;
  }
  else {
    unint64_t v29 = (unint64_t)v26 >> 32;
  }
  if (*((unsigned char *)this + 792)) {
    uint64_t v30 = v28;
  }
  else {
    uint64_t v30 = (unint64_t)v26;
  }
  size_t v31 = (AMCP::Log::Scope_Registry *)MEMORY[0x1C1858890](*((unsigned int *)this + 181), 0, v24, v25, 0, *((unsigned int *)this + 184), v29, v30);
  int v32 = (int)v31;
  BOOL v33 = v31 == 0;
  if (v31)
  {
    AMCP::Log::Scope_Registry::get(v31);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v49, "com.apple.coreaudio", "AMCP");
    int v35 = *(_DWORD *)(v49 + 16);
    switch(v35)
    {
      case 3:
        AMCP::Log::Scope_Registry::get(v34);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        std::basic_regex<char> v44 = **(NSObject ***)buf;
        if (*(void *)v52) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v52);
        }
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_INFO)) {
          goto LABEL_34;
        }
        uint64_t v45 = pthread_self();
        mach_port_t v46 = pthread_mach_thread_np(v45);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v46;
        *(_WORD *)uint64_t v52 = 2080;
        *(void *)&v52[2] = "IOAudio1_Engine.cpp";
        __int16 v53 = 1024;
        int v54 = 352;
        __int16 v55 = 1024;
        int v56 = v32;
        int v39 = v44;
        os_log_type_t v40 = OS_LOG_TYPE_INFO;
        break;
      case 2:
        AMCP::Log::Scope_Registry::get(v34);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v41 = **(NSObject ***)buf;
        if (*(void *)v52) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v52);
        }
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v42 = pthread_self();
          mach_port_t v43 = pthread_mach_thread_np(v42);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v43;
          *(_WORD *)uint64_t v52 = 2080;
          *(void *)&v52[2] = "IOAudio1_Engine.cpp";
          __int16 v53 = 1024;
          int v54 = 352;
          __int16 v55 = 1024;
          int v56 = v32;
          _os_log_debug_impl(&dword_1BAA78000, v41, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d IOAudio1 engine end_writing got an error from the kernel trap: %d", buf, 0x1Eu);
        }
        goto LABEL_34;
      case 1:
        AMCP::Log::Scope_Registry::get(v34);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        unint64_t v36 = **(NSObject ***)buf;
        if (*(void *)v52) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v52);
        }
        if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
LABEL_34:
          if (v50) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v50);
          }
          goto LABEL_36;
        }
        BOOL v37 = pthread_self();
        mach_port_t v38 = pthread_mach_thread_np(v37);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v38;
        *(_WORD *)uint64_t v52 = 2080;
        *(void *)&v52[2] = "IOAudio1_Engine.cpp";
        __int16 v53 = 1024;
        int v54 = 352;
        __int16 v55 = 1024;
        int v56 = v32;
        int v39 = v36;
        os_log_type_t v40 = OS_LOG_TYPE_DEFAULT;
        break;
      default:
        goto LABEL_34;
    }
    _os_log_impl(&dword_1BAA78000, v39, v40, "%6u %32s:%-5d IOAudio1 engine end_writing got an error from the kernel trap: %d", buf, 0x1Eu);
    goto LABEL_34;
  }
LABEL_36:
  kdebug_trace();
  float v47 = AMCP::Core::Engine::calculate_safety_violation_write(this, a4);
  if ((int)v47 < 0) {
    kdebug_trace();
  }
  os_unfair_lock_unlock(v10);
  return v33;
}

void sub_1BABF0E84(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::IOAudio1::Engine::write_data_to_stream(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, size_t **a7)
{
  if (*(void *)(a1 + 768) != *(void *)(a1 + 776))
  {
    uint64_t v11 = (os_unfair_lock_s *)(a1 + 720);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 720));
    uint64_t v12 = *(void *)(a1 + 768);
    if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 776) - v12) >> 3) > a4)
    {
      unint64_t v13 = (void *)(v12 + 24 * a4);
      size_t v14 = **a7;
      if (v14 + a5 <= v13[1] - *v13 - 16) {
        memcpy((void *)(*v13 + a5 + 16), (const void *)(*a7)[1], v14);
      }
    }
    os_unfair_lock_unlock(v11);
  }
  return 1;
}

uint64_t AMCP::IOAudio1::Engine::begin_writing(AMCP::IOAudio1::Engine *this, double a2)
{
  return 1;
}

uint64_t AMCP::IOAudio1::Engine::end_reading(AMCP::IOAudio1::Engine *this, double a2)
{
  return 1;
}

uint64_t AMCP::IOAudio1::Engine::read_data_from_stream(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, size_t **a7)
{
  uint64_t v11 = (os_unfair_lock_s *)(a1 + 720);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 720));
  uint64_t v12 = *(void *)(a1 + 744);
  uint64_t v13 = *(void *)(a1 + 752);
  if (v12 != v13 && 0xAAAAAAAAAAAAAAABLL * ((v13 - v12) >> 3) > a4)
  {
    size_t v14 = (void *)(v12 + 24 * a4);
    size_t v15 = **a7;
    if (v15 + a5 <= v14[1] - *v14 - 16) {
      memcpy((void *)(*a7)[1], (const void *)(*v14 + a5 + 16), v15);
    }
  }
  os_unfair_lock_unlock(v11);
  return 1;
}

BOOL AMCP::IOAudio1::Engine::begin_reading(os_unfair_lock_s *this, unint64_t a2, unint64_t a3, double a4, int a5, int a6)
{
  kern_return_t v28;
  AMCP::Log::Scope_Registry *v29;
  float v30;
  BOOL v31;
  AMCP::Log::Scope_Registry *v32;
  int v33;
  NSObject *v34;
  _opaque_pthread_t *v35;
  mach_port_t v36;
  NSObject *v37;
  os_log_type_t v38;
  NSObject *v39;
  _opaque_pthread_t *v40;
  mach_port_t v41;
  NSObject *v42;
  _opaque_pthread_t *v43;
  mach_port_t v44;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint8_t buf[8];
  unsigned char v49[10];
  __int16 v50;
  int v51;
  __int16 v52;
  kern_return_t v53;
  uint64_t v54;

  int v54 = *MEMORY[0x1E4F143B8];
  if (*(void *)&this[18]._os_unfair_lock_opaque != *(void *)&this[20]._os_unfair_lock_opaque)
  {
    uint64_t v10 = this + 180;
    os_unfair_lock_lock(this + 180);
    uint64_t v11 = *(void *)&this[18]._os_unfair_lock_opaque;
    uint64_t v12 = *(void *)&this[20]._os_unfair_lock_opaque - v11;
    if (v12)
    {
      unint64_t v13 = v12 / 56;
      uint64_t v14 = *(void *)&this[186]._os_unfair_lock_opaque;
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)&this[188]._os_unfair_lock_opaque - v14) >> 3);
      if (v13 <= 1) {
        unint64_t v13 = 1;
      }
      uint64_t v16 = (_DWORD *)(v14 + 8);
      long long v17 = (int *)(v11 + 40);
      do
      {
        if (!v15) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v18 = (_DWORD *)*((void *)v16 - 1);
        int v20 = *v17;
        v17 += 14;
        int v19 = v20;
        *uint64_t v18 = v20 * a5;
        v18[1] = a5;
        int v21 = *v16;
        v16 += 6;
        v18[2] = v21 - v18 - 16;
        v18[3] = v19 * a6;
        --v15;
        --v13;
      }
      while (v13);
    }
    AMCP::IO_Clock::get_current_zts((AMCP::IO_Clock *)buf, (uint64_t)&this[140]);
    double v22 = *(double *)buf;
    unint64_t os_unfair_lock_opaque = this[10]._os_unfair_lock_opaque;
    double v24 = AMCP::Core::Engine::calculate_safety_violation_read((AMCP::Core::Engine *)this, a4);
    double v25 = (double)os_unfair_lock_opaque;
    double v26 = fmod(a4 - v22, (double)os_unfair_lock_opaque);
    if (v26 >= 0.0) {
      double v25 = -0.0;
    }
    float v27 = v24;
    if (v27 <= -5.0) {
      kdebug_trace();
    }
    kdebug_trace();
    unsigned int v28 = IOConnectTrap4(this[181]._os_unfair_lock_opaque, 0, (unint64_t)(v26 + v25), ((unint64_t)a4 / os_unfair_lock_opaque), 1uLL, this[184]._os_unfair_lock_opaque);
    kdebug_trace();
    uint64_t v30 = AMCP::Core::Engine::calculate_safety_violation_read((AMCP::Core::Engine *)this, a4);
    if ((int)v30 <= -5) {
      unint64_t v29 = (AMCP::Log::Scope_Registry *)kdebug_trace();
    }
    size_t v31 = v28 == 0;
    if (!v28) {
      goto LABEL_34;
    }
    AMCP::Log::Scope_Registry::get(v29);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v46, "com.apple.coreaudio", "AMCP");
    BOOL v33 = *(_DWORD *)(v46 + 16);
    switch(v33)
    {
      case 3:
        AMCP::Log::Scope_Registry::get(v32);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        unint64_t v42 = **(NSObject ***)buf;
        if (*(void *)v49) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v49);
        }
        if (!os_log_type_enabled(v42, OS_LOG_TYPE_INFO)) {
          goto LABEL_32;
        }
        mach_port_t v43 = pthread_self();
        std::basic_regex<char> v44 = pthread_mach_thread_np(v43);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v44;
        *(_WORD *)uint64_t v49 = 2080;
        *(void *)&v49[2] = "IOAudio1_Engine.cpp";
        unint64_t v50 = 1024;
        uint64_t v51 = 252;
        uint64_t v52 = 1024;
        __int16 v53 = v28;
        BOOL v37 = v42;
        mach_port_t v38 = OS_LOG_TYPE_INFO;
        break;
      case 2:
        AMCP::Log::Scope_Registry::get(v32);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        int v39 = **(NSObject ***)buf;
        if (*(void *)v49) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v49);
        }
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
        {
          os_log_type_t v40 = pthread_self();
          uint64_t v41 = pthread_mach_thread_np(v40);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v41;
          *(_WORD *)uint64_t v49 = 2080;
          *(void *)&v49[2] = "IOAudio1_Engine.cpp";
          unint64_t v50 = 1024;
          uint64_t v51 = 252;
          uint64_t v52 = 1024;
          __int16 v53 = v28;
          _os_log_debug_impl(&dword_1BAA78000, v39, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d IOAudio1 engine begin_reading got an error from the kernel trap: %d", buf, 0x1Eu);
        }
        goto LABEL_32;
      case 1:
        AMCP::Log::Scope_Registry::get(v32);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        long long v34 = **(NSObject ***)buf;
        if (*(void *)v49) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v49);
        }
        if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
LABEL_32:
          if (v47) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v47);
          }
LABEL_34:
          os_unfair_lock_unlock(v10);
          return v31;
        }
        int v35 = pthread_self();
        unint64_t v36 = pthread_mach_thread_np(v35);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v36;
        *(_WORD *)uint64_t v49 = 2080;
        *(void *)&v49[2] = "IOAudio1_Engine.cpp";
        unint64_t v50 = 1024;
        uint64_t v51 = 252;
        uint64_t v52 = 1024;
        __int16 v53 = v28;
        BOOL v37 = v34;
        mach_port_t v38 = OS_LOG_TYPE_DEFAULT;
        break;
      default:
        goto LABEL_32;
    }
    _os_log_impl(&dword_1BAA78000, v37, v38, "%6u %32s:%-5d IOAudio1 engine begin_reading got an error from the kernel trap: %d", buf, 0x1Eu);
    goto LABEL_32;
  }
  return 1;
}

void sub_1BABF14D0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::IOAudio1::Engine::end_io_cycle(AMCP::IOAudio1::Engine *this)
{
  return 1;
}

uint64_t AMCP::IOAudio1::Engine::begin_io_cycle(AMCP::IOAudio1::Engine *this)
{
  return 1;
}

uint64_t AMCP::IOAudio1::Engine::end_io_thread(AMCP::IOAudio1::Engine *this)
{
  return 1;
}

uint64_t AMCP::IOAudio1::Engine::begin_io_thread(AMCP::IOAudio1::Engine *this)
{
  return 1;
}

uint64_t AMCP::IOAudio1::Engine::maximum_past_data(AMCP::IOAudio1::Engine *this)
{
  return 0;
}

uint64_t AMCP::IOAudio1::Engine::available_past_data(AMCP::IOAudio1::Engine *this)
{
  return 0;
}

uint64_t AMCP::IOAudio1::Engine::set_past_data_enabled(AMCP::IOAudio1::Engine *this)
{
  return 0;
}

uint64_t AMCP::IOAudio1::Engine::is_past_data_enabled(AMCP::IOAudio1::Engine *this)
{
  return 0;
}

uint64_t AMCP::IOAudio1::Engine::supports_past_data(AMCP::IOAudio1::Engine *this)
{
  return 0;
}

void AMCP::IOAudio1::Engine::set_output_stream_active_list(uint64_t a1, uint64_t a2)
{
  AMCP::Core::Implementation::Simple_Engine_IO_State::set_output_stream_active_list(&__p, a1 + 120, a2);
  if (__p) {
    operator delete(__p);
  }
}

void AMCP::IOAudio1::Engine::get_output_stream_active_list(os_unfair_lock_s *this@<X0>, AMCP::Core::Implementation::Simple_Engine_IO_State *a2@<X8>)
{
}

void AMCP::IOAudio1::Engine::set_input_stream_active_list(uint64_t a1, uint64_t a2)
{
  AMCP::Core::Implementation::Simple_Engine_IO_State::set_input_stream_active_list(&__p, a1 + 120, a2);
  if (__p) {
    operator delete(__p);
  }
}

void AMCP::IOAudio1::Engine::get_input_stream_active_list(os_unfair_lock_s *this@<X0>, AMCP::Core::Implementation::Simple_Engine_IO_State *a2@<X8>)
{
}

uint64_t AMCP::IOAudio1::Engine::set_transport_state(os_unfair_lock_s *a1, signed int a2)
{
  int v4 = atomic_load(&a1[34]._os_unfair_lock_opaque);
  int v5 = MEMORY[0x1C18597F0]();
  os_unfair_lock_lock(a1 + 180);
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a2 < 1;
  }
  if (!v6)
  {
    AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions((uint64_t)&a1[30]);
    AMCP::IO_Clock::reset_time(a1 + 140);
    operator new();
  }
  if (v4 >= 1 && a2 == 0) {
    AMCP::IOAudio1::Engine::stop((AMCP::IOAudio1::Engine *)a1);
  }
  os_unfair_lock_unlock(a1 + 180);
  atomic_store(a2, &a1[34]._os_unfair_lock_opaque);
  uint64_t result = MEMORY[0x1C18597F0](v8, v9);
  if ((int)result > v5)
  {
    atomic_store(0, &a1[34]._os_unfair_lock_opaque);
    return AMCP::IOAudio1::Engine::stop((AMCP::IOAudio1::Engine *)a1);
  }
  return result;
}

void sub_1BABF1984(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_free_exception(v11);
  __clang_call_terminate(a1);
}

void sub_1BABF19B8()
{
  MEMORY[0x1C1859840](v0, 0x1000C4017768742);
  JUMPOUT(0x1BABF1A48);
}

void sub_1BABF19D8()
{
}

void sub_1BABF19E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if ((int)MEMORY[0x1C18597F0]() > v17) {
    AMCP::IOAudio1::Engine::release_buffers(v16);
  }
  applesauce::raii::v1::detail::ScopeGuard<AMCP::IOAudio1::Engine::start(void)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&a11);
  os_unfair_lock_unlock(v15);
  applesauce::raii::v1::detail::ScopeGuard<AMCP::IOAudio1::Engine::set_transport_state(AMCP::Transport_State)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BABF1A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (a14) {
    operator delete(a14);
  }
  JUMPOUT(0x1BABF1A2CLL);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<AMCP::IOAudio1::Engine::set_transport_state(AMCP::Transport_State)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  if ((int)MEMORY[0x1C18597F0]() > *(_DWORD *)a1)
  {
    uint64_t v2 = *(unsigned int **)(a1 + 8);
    atomic_store(0, v2 + 34);
    AMCP::IOAudio1::Engine::stop((AMCP::IOAudio1::Engine *)v2);
  }
  return a1;
}

uint64_t AMCP::IOAudio1::Engine::stop(AMCP::IOAudio1::Engine *this)
{
  kdebug_trace();
  mach_port_t v2 = *((_DWORD *)this + 181);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone>(v2, 4u, 0, 0);
  kdebug_trace();
  AMCP::IOAudio1::Engine::release_buffers(this);
  double v3 = (unsigned int *)*((void *)this + 91);
  *((void *)this + 91) = 0;
  if (v3) {
    std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](v3);
  }
  (*(void (**)(AMCP::IOAudio1::Engine *))(*(void *)this + 320))(this);
  return AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions((uint64_t)this + 120);
}

void sub_1BABF1BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, NSObject **a9, long long a10)
{
  if (a2)
  {
    __cxa_free_exception(v10);
    uint64_t v12 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    unint64_t v13 = *a9;
    if ((void)a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a10);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      LODWORD(a9) = 67109634;
      HIDWORD(a9) = v15;
      LOWORD(a10) = 2080;
      *(void *)((char *)&a10 + 2) = "IOAudio1_Engine.cpp";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 489;
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception while telling driver to stop!", (uint8_t *)&a9, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BABF1B04);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::IOAudio1::Engine::release_buffers(AMCP::IOAudio1::Engine *this)
{
  mach_port_t v2 = (uint64_t *)*((void *)this + 93);
  double v3 = (uint64_t *)*((void *)this + 94);
  while (v2 != v3)
  {
    mach_port_t v4 = *((_DWORD *)this + 181);
    if (!v4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone,unsigned long,unsigned int &>(v4, *v2, *((_DWORD *)this + 184));
    v2 += 3;
  }
  int v5 = (uint64_t *)*((void *)this + 96);
  BOOL v6 = (uint64_t *)*((void *)this + 97);
  while (v5 != v6)
  {
    mach_port_t v7 = *((_DWORD *)this + 181);
    if (!v7)
    {
      uint64_t v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v9, "cannot create io_connect_proxy from null io_object");
      __cxa_throw(v9, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone,unsigned long,unsigned int &>(v7, *v5, *((_DWORD *)this + 184));
    v5 += 3;
  }
  std::vector<std::vector<std::byte>>::__clear[abi:ne180100]((uint64_t *)this + 93);
  std::vector<std::vector<std::byte>>::__clear[abi:ne180100]((uint64_t *)this + 96);
}

void sub_1BABF1EE0(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BABF1EE8);
  }
  __clang_call_terminate(a1);
}

void std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](unsigned int *a1)
{
  if (*((void *)a1 + 2)) {
    MEMORY[0x1C18588A0](*a1, a1[1], a1[2]);
  }
  IOConnectRelease(*a1);

  JUMPOUT(0x1C1859840);
}

void applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone,unsigned long,unsigned int &>(mach_port_t a1, uint64_t a2, unsigned int a3)
{
  input[0] = a2;
  input[1] = a3;
  memset(v17, 0, sizeof(v17));
  uint32_t outputCnt = 0;
  memset(__p, 0, sizeof(__p));
  size_t v14 = 0;
  uint64_t v3 = IOConnectCallMethod(a1, 1u, input, 2u, 0, 0, 0, &outputCnt, 0, &v14);
  if (v3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    int v5 = std::system_category();
    v11.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v11.__r_.__value_.__r.__words[1] = xmmword_1BAFF94D0;
    strcpy(v11.__r_.__value_.__l.__data_, "Error on IOConnectCallScalarMethod for selector ");
    std::to_string(&v10, 1u);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v6 = &v10;
    }
    else {
      BOOL v6 = (std::string *)v10.__r_.__value_.__r.__words[0];
    }
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v10.__r_.__value_.__l.__size_;
    }
    uint64_t v8 = std::string::append(&v11, (const std::string::value_type *)v6, size);
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v8->__r_.__value_.__r.__words[2];
    long long v12 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1C1859260](exception, v3, v5, &v12);
    __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  std::vector<unsigned long long>::resize(v17, outputCnt);
  if (v14)
  {
    std::vector<unsigned char>::__append((unint64_t *)__p, v14);
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
  if (v17[0]) {
    operator delete(v17[0]);
  }
}

void sub_1BABF20EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v32 & 1) == 0)
    {
LABEL_10:
      int v35 = *(void **)(v33 - 88);
      if (v35) {
        operator delete(v35);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v31);
  goto LABEL_10;
}

void std::vector<std::vector<std::byte>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      BOOL v6 = *(void **)(v4 - 24);
      v4 -= 24;
      int v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

unsigned int *applesauce::iokit::mapped_memory::mapped_memory(unsigned int *a1, io_connect_t connect, uint64_t a3)
{
  *a1 = connect;
  uint64_t v5 = IOConnectAddRef(connect);
  if (v5)
  {
    uint64_t v9 = v5;
    exception = __cxa_allocate_exception(0x20uLL);
    std::string v11 = std::system_category();
    MEMORY[0x1C1859250](exception, v9, v11, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  unsigned int v6 = *MEMORY[0x1E4F14960];
  a1[1] = a3;
  a1[2] = v6;
  *((void *)a1 + 3) = 0;
  *((void *)a1 + 2) = 0;
  uint64_t v7 = MEMORY[0x1C1858840](*a1, a3);
  if (v7)
  {
    long long v12 = __cxa_allocate_exception(0x20uLL);
    std::string::size_type v13 = std::system_category();
    v19.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = xmmword_1BAFF94F0;
    strcpy(v19.__r_.__value_.__l.__data_, "Error, could not create memory type ");
    std::to_string(&v18, a3);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v14 = &v18;
    }
    else {
      size_t v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v18.__r_.__value_.__l.__size_;
    }
    uint64_t v16 = std::string::append(&v19, (const std::string::value_type *)v14, size);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    std::string::size_type v21 = v16->__r_.__value_.__r.__words[2];
    long long v20 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1C1859260](v12, v7, v13, &v20);
    __cxa_throw(v12, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  return a1;
}

void sub_1BABF2390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v27 & 1) == 0)
    {
LABEL_10:
      applesauce::iokit::io_connect_holder::~io_connect_holder(v26);
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v28);
  goto LABEL_10;
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<AMCP::IOAudio1::Engine::start(void)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  if ((int)MEMORY[0x1C18597F0]() > *(_DWORD *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    uint64_t v3 = *(unsigned int **)(v2 + 728);
    *(void *)(v2 + 72_Block_object_dispose(&a9, 8) = 0;
    if (v3) {
      std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](v3);
    }
  }
  return a1;
}

void applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone,unsigned int const&,unsigned long,unsigned long,unsigned int &>(mach_port_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  input[0] = a2;
  input[1] = a3;
  uint64_t input[2] = a4;
  input[3] = a5;
  memset(v19, 0, sizeof(v19));
  uint32_t outputCnt = 0;
  memset(__p, 0, sizeof(__p));
  size_t v16 = 0;
  uint64_t v5 = IOConnectCallMethod(a1, 0, input, 4u, 0, 0, 0, &outputCnt, 0, &v16);
  if (v5)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v7 = std::system_category();
    v13.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v13.__r_.__value_.__r.__words[1] = xmmword_1BAFF94D0;
    strcpy(v13.__r_.__value_.__l.__data_, "Error on IOConnectCallScalarMethod for selector ");
    std::to_string(&v12, 0);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &v12;
    }
    else {
      uint64_t v8 = (std::string *)v12.__r_.__value_.__r.__words[0];
    }
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v12.__r_.__value_.__l.__size_;
    }
    std::string v10 = std::string::append(&v13, (const std::string::value_type *)v8, size);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v10->__r_.__value_.__r.__words[2];
    long long v14 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1C1859260](exception, v5, v7, &v14);
    __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  std::vector<unsigned long long>::resize(v19, outputCnt);
  if (v16)
  {
    std::vector<unsigned char>::__append((unint64_t *)__p, v16);
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
  if (v19[0]) {
    operator delete(v19[0]);
  }
}

void sub_1BABF2600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v32 & 1) == 0)
    {
LABEL_10:
      int v35 = *(void **)(v33 - 104);
      if (v35) {
        operator delete(v35);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v31);
  goto LABEL_10;
}

void std::vector<std::vector<std::byte>>::push_back[abi:ne180100](char **a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v5)
  {
    *(void *)uint64_t v4 = 0;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
    *((void *)v4 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + _Block_object_dispose(&a9, 8) = 0;
    *(void *)(a2 + 16) = 0;
    unsigned int v6 = v4 + 24;
    goto LABEL_18;
  }
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)*a1) >> 3);
  if (2 * v9 > v8) {
    unint64_t v8 = 2 * v9;
  }
  if (v9 >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  if (v8 > 0xAAAAAAAAAAAAAAALL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v10 = 3 * v8;
  long long v11 = (char *)operator new(24 * v8);
  std::string v12 = &v11[24 * v7];
  std::string v13 = &v11[8 * v10];
  *(_OWORD *)std::string v12 = *(_OWORD *)a2;
  *((void *)v12 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + _Block_object_dispose(&a9, 8) = 0;
  *(void *)(a2 + 16) = 0;
  unsigned int v6 = v12 + 24;
  long long v14 = *a1;
  std::string::size_type v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    if (!v15) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  do
  {
    *((void *)v12 - 3) = 0;
    *((void *)v12 - 2) = 0;
    v12 -= 24;
    *((void *)v12 + 2) = 0;
    long long v16 = *(_OWORD *)(v15 - 24);
    v15 -= 24;
    *(_OWORD *)std::string v12 = v16;
    *((void *)v12 + 2) = *((void *)v15 + 2);
    *(void *)std::string::size_type v15 = 0;
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 2) = 0;
  }
  while (v15 != v14);
  std::string::size_type v15 = *a1;
  long long v17 = a1[1];
  *a1 = v12;
  a1[1] = v6;
  a1[2] = v13;
  if (v17 != v15)
  {
    std::string v18 = v17;
    do
    {
      long long v20 = (void *)*((void *)v18 - 3);
      v18 -= 24;
      std::string v19 = v20;
      if (v20)
      {
        *((void *)v17 - 2) = v19;
        operator delete(v19);
      }
      long long v17 = v18;
    }
    while (v18 != v15);
  }
  if (v15) {
LABEL_17:
  }
    operator delete(v15);
LABEL_18:
  a1[1] = v6;
}

void applesauce::iokit::io_connect_holder::~io_connect_holder(io_connect_t *this)
{
}

uint64_t AMCP::IOAudio1::Engine::get_transport_state(AMCP::IOAudio1::Engine *this)
{
  return atomic_load((unsigned int *)this + 34);
}

__n128 AMCP::IOAudio1::Engine::get_stream_format@<Q0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a1 + 72;
  uint64_t v5 = 72;
  if (!a2)
  {
    uint64_t v5 = 96;
    uint64_t v4 = a1 + 96;
  }
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(v4 + 8);
  while (1)
  {
    if (v6 == v7)
    {
      *(void *)(a4 + 32) = 0;
      result.n128_u64[0] = 0;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      return result;
    }
    if (*(_DWORD *)v6 == a3) {
      break;
    }
    v6 += 56;
  }
  __n128 result = *(__n128 *)(v6 + 16);
  long long v9 = *(_OWORD *)(v6 + 32);
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v9;
  *(void *)(a4 + 32) = *(void *)(v6 + 48);
  return result;
}

void AMCP::IOAudio1::Engine::get_output_format_list(AMCP::IOAudio1::Engine *this@<X0>, AMCP::Core::Implementation::Simple_Engine_Data *a2@<X8>)
{
}

void AMCP::Core::Implementation::Simple_Engine_Data::get_output_format_list(AMCP::Core::Implementation::Simple_Engine_Data *this, uint64_t a2, uint64_t a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = (long long *)(v4 + 16);
      unint64_t v8 = *((void *)this + 2);
      if ((unint64_t)v6 >= v8)
      {
        long long v11 = *(_OWORD **)this;
        unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v6 - *(void *)this) >> 3);
        unint64_t v13 = v12 + 1;
        if (v12 + 1 > 0x666666666666666) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (void)v11) >> 3);
        if (2 * v14 > v13) {
          unint64_t v13 = 2 * v14;
        }
        if (v14 >= 0x333333333333333) {
          unint64_t v15 = 0x666666666666666;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15) {
          unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v15);
        }
        else {
          uint64_t v16 = 0;
        }
        unint64_t v17 = v15 + 40 * v12;
        long long v18 = *v7;
        long long v19 = *(_OWORD *)(v4 + 32);
        *(void *)(v17 + 32) = *(void *)(v4 + 48);
        *(_OWORD *)unint64_t v17 = v18;
        *(_OWORD *)(v17 + 16) = v19;
        if (v6 == v11)
        {
          unint64_t v23 = v15 + 40 * v12;
        }
        else
        {
          unint64_t v20 = v15 + 40 * v12;
          do
          {
            long long v21 = *(_OWORD *)((char *)v6 - 40);
            long long v22 = *(_OWORD *)((char *)v6 - 24);
            unint64_t v23 = v20 - 40;
            *(void *)(v20 - _Block_object_dispose(&a9, 8) = *((void *)v6 - 1);
            *(_OWORD *)(v20 - 24) = v22;
            *(_OWORD *)(v20 - 40) = v21;
            uint64_t v6 = (_OWORD *)((char *)v6 - 40);
            v20 -= 40;
          }
          while (v6 != v11);
        }
        uint64_t v6 = (_OWORD *)(v17 + 40);
        *(void *)this = v23;
        *((void *)this + 2) = v15 + 40 * v16;
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        long long v9 = *v7;
        long long v10 = *(_OWORD *)(v4 + 32);
        *((void *)v6 + 4) = *(void *)(v4 + 48);
        *uint64_t v6 = v9;
        v6[1] = v10;
        uint64_t v6 = (_OWORD *)((char *)v6 + 40);
      }
      *((void *)this + 1) = v6;
      v4 += 56;
    }
    while (v4 != a3);
  }
}

void AMCP::IOAudio1::Engine::get_input_format_list(AMCP::IOAudio1::Engine *this@<X0>, AMCP::Core::Implementation::Simple_Engine_Data *a2@<X8>)
{
}

void AMCP::Core::Implementation::Simple_Engine_Data::get_input_format_list(AMCP::Core::Implementation::Simple_Engine_Data *this, uint64_t a2, uint64_t a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = (long long *)(v4 + 16);
      unint64_t v8 = *((void *)this + 2);
      if ((unint64_t)v6 >= v8)
      {
        long long v11 = *(_OWORD **)this;
        unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v6 - *(void *)this) >> 3);
        unint64_t v13 = v12 + 1;
        if (v12 + 1 > 0x666666666666666) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (void)v11) >> 3);
        if (2 * v14 > v13) {
          unint64_t v13 = 2 * v14;
        }
        if (v14 >= 0x333333333333333) {
          unint64_t v15 = 0x666666666666666;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15) {
          unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v15);
        }
        else {
          uint64_t v16 = 0;
        }
        unint64_t v17 = v15 + 40 * v12;
        long long v18 = *v7;
        long long v19 = *(_OWORD *)(v4 + 32);
        *(void *)(v17 + 32) = *(void *)(v4 + 48);
        *(_OWORD *)unint64_t v17 = v18;
        *(_OWORD *)(v17 + 16) = v19;
        if (v6 == v11)
        {
          unint64_t v23 = v15 + 40 * v12;
        }
        else
        {
          unint64_t v20 = v15 + 40 * v12;
          do
          {
            long long v21 = *(_OWORD *)((char *)v6 - 40);
            long long v22 = *(_OWORD *)((char *)v6 - 24);
            unint64_t v23 = v20 - 40;
            *(void *)(v20 - _Block_object_dispose(&a9, 8) = *((void *)v6 - 1);
            *(_OWORD *)(v20 - 24) = v22;
            *(_OWORD *)(v20 - 40) = v21;
            uint64_t v6 = (_OWORD *)((char *)v6 - 40);
            v20 -= 40;
          }
          while (v6 != v11);
        }
        uint64_t v6 = (_OWORD *)(v17 + 40);
        *(void *)this = v23;
        *((void *)this + 2) = v15 + 40 * v16;
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        long long v9 = *v7;
        long long v10 = *(_OWORD *)(v4 + 32);
        *((void *)v6 + 4) = *(void *)(v4 + 48);
        *uint64_t v6 = v9;
        v6[1] = v10;
        uint64_t v6 = (_OWORD *)((char *)v6 + 40);
      }
      *((void *)this + 1) = v6;
      v4 += 56;
    }
    while (v4 != a3);
  }
}

uint64_t AMCP::IOAudio1::Engine::get_output_latency(AMCP::IOAudio1::Engine *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t AMCP::IOAudio1::Engine::get_input_latency(AMCP::IOAudio1::Engine *this)
{
  return *((unsigned int *)this + 15);
}

uint64_t AMCP::IOAudio1::Engine::get_output_safety_offset(AMCP::IOAudio1::Engine *this)
{
  return *((unsigned int *)this + 14);
}

uint64_t AMCP::IOAudio1::Engine::get_input_safety_offset(AMCP::IOAudio1::Engine *this)
{
  return *((unsigned int *)this + 13);
}

BOOL AMCP::IOAudio1::Engine::has_output_streams(AMCP::IOAudio1::Engine *this)
{
  return *((void *)this + 12) != *((void *)this + 13);
}

BOOL AMCP::IOAudio1::Engine::has_input_streams(AMCP::IOAudio1::Engine *this)
{
  return *((void *)this + 9) != *((void *)this + 10);
}

uint64_t AMCP::IOAudio1::Engine::supports_prewarming(AMCP::IOAudio1::Engine *this)
{
  return *((unsigned __int8 *)this + 48);
}

uint64_t AMCP::IOAudio1::Engine::get_clock_domain(AMCP::IOAudio1::Engine *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t AMCP::IOAudio1::Engine::get_suggested_ring_buffer_frame_size(AMCP::IOAudio1::Engine *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t AMCP::IOAudio1::Engine::get_max_io_buffer_frame_size(AMCP::IOAudio1::Engine *this)
{
  return (3 * *((_DWORD *)this + 10)) >> 3;
}

double AMCP::IOAudio1::Engine::get_sample_rate(AMCP::IOAudio1::Engine *this)
{
  return *((double *)this + 4);
}

void *AMCP::IOAudio1::Engine::get_device_uid@<X0>(const void **this@<X0>, void *a2@<X8>)
{
  return AMCP::Core::Implementation::Simple_Engine_Data::get_device_uid(a2, this[3]);
}

void *AMCP::Core::Implementation::Simple_Engine_Data::get_device_uid(void *this, const void *a2)
{
  uint64_t v3 = this;
  if (a2) {
    this = CFRetain(a2);
  }
  void *v3 = a2;
  return this;
}

void AMCP::IOAudio1::Engine::~Engine(os_unfair_lock_s *this)
{
  AMCP::IOAudio1::Engine::~Engine(this);

  JUMPOUT(0x1C1859840);
}

{
  unsigned int *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  os_unfair_lock_s *v11;

  *(void *)&this->_unint64_t os_unfair_lock_opaque = &unk_1F1464068;
  AMCP::IOAudio1::Engine::set_transport_state(this, 0);
  long long v11 = this + 192;
  std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  long long v11 = this + 186;
  std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  uint64_t v2 = *(unsigned int **)&this[182]._os_unfair_lock_opaque;
  *(void *)&this[182]._unint64_t os_unfair_lock_opaque = 0;
  if (v2) {
    std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](v2);
  }
  IOConnectRelease(this[181]._os_unfair_lock_opaque);
  AMCP::IO_Clock::~IO_Clock((AMCP::IO_Clock *)&this[140]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&this[60]);
  uint64_t v3 = *(std::__shared_weak_count **)&this[58]._os_unfair_lock_opaque;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)&this[54]._os_unfair_lock_opaque;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(void **)&this[44]._os_unfair_lock_opaque;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = *(void **)&this[36]._os_unfair_lock_opaque;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void **)&this[24]._os_unfair_lock_opaque;
  if (v7)
  {
    *(void *)&this[26]._unint64_t os_unfair_lock_opaque = v7;
    operator delete(v7);
  }
  unint64_t v8 = *(void **)&this[18]._os_unfair_lock_opaque;
  if (v8)
  {
    *(void *)&this[20]._unint64_t os_unfair_lock_opaque = v8;
    operator delete(v8);
  }
  long long v9 = *(const void **)&this[6]._os_unfair_lock_opaque;
  if (v9) {
    CFRelease(v9);
  }
  long long v10 = *(std::__shared_weak_count **)&this[4]._os_unfair_lock_opaque;
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
}

void std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<std::byte>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::__function::__func<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16EngineC1EN10applesauce5iokit17io_connect_holderENS2_2CF9StringRefEbdbjjjjjjRKNSt3__16vectorINS_4Core14Implementation18Simple_Engine_Data11Stream_InfoENS7_9allocatorISC_EEEESH_RKNS_7Utility14Dispatch_QueueEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 304))();
}

uint64_t std::__function::__func<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1464220;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F1464220;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio1::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,BOOL,double,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::~__func()
{
}

uint64_t HALS_IOStreamGroup::FilterClocklessReferenceStreamOnlyEngines::should_exclude(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  if (*(_DWORD *)(*(void *)a2 + 108))
  {
    uint64_t v3 = (void *)v2[14];
    if ((void *)v2[15] == v3 || v3 == 0)
    {
      if (v2[51]) {
        goto LABEL_12;
      }
    }
    else if (*v3)
    {
LABEL_12:
      uint64_t v5 = (void *)v2[14];
      if ((void *)v2[15] != v5 && v5 != 0) {
        return (*(unsigned int (**)(void))(*(void *)*v5 + 320))(*v5) ^ 1;
      }
      goto LABEL_17;
    }
  }
  else if (v2[51])
  {
LABEL_17:
    uint64_t v5 = v2 + 51;
    return (*(unsigned int (**)(void))(*(void *)*v5 + 320))(*v5) ^ 1;
  }
  return 1;
}

void HALS_IOStreamGroup::FilterClocklessReferenceStreamOnlyEngines::~FilterClocklessReferenceStreamOnlyEngines(HALS_IOStreamGroup::FilterClocklessReferenceStreamOnlyEngines *this)
{
}

uint64_t VisitableVector<HALS_IOStreamInfo>::apply<>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v8 = *a3;
  uint64_t v9 = *((void *)a3 + 2);
  if (a1 == a2) {
    return 0;
  }
  uint64_t v4 = a1;
  uint64_t v5 = 0;
  for (char i = 1; ; char i = 0)
  {
    if (i) {
      uint64_t v5 = 0;
    }
    else {
      ++v5;
    }
    v10[0] = v4;
    v10[1] = v5;
    uint64_t result = ((uint64_t (*)(char *, void *))v8)((char *)&v8 + 8, v10);
    if (result) {
      break;
    }
    v4 += 424;
    if (v4 == a2) {
      return 0;
    }
  }
  return result;
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOStreamGroup::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo&)>)::$_0>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = **a1;
  uint64_t v3 = *a2;
  uint64_t v6 = (*a1)[1];
  uint64_t v4 = *(void *)(v2 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v4 + 48))(v4, &v6, v3);
}

void AMCP::Clock::~Clock(AMCP::Clock *this)
{
  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t AMCP::Clock::Clock(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (AMCP::Object *)AMCP::Object::Object(a1, a2, a3);
  *(void *)uint64_t v4 = &unk_1F14642B8;
  uint64_t v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x61636C6B);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    uint64_t v7 = *v10;
    if (*(void *)v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      long long v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      *(_WORD *)long long v11 = 2080;
      *(void *)&uint64_t v11[2] = "Clock.cpp";
      __int16 v12 = 1024;
      int v13 = 27;
      __int16 v14 = 2080;
      unint64_t v15 = "constructed_correct_class(k_class_id_clock)";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1BABF32BC(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F145F4E8;
  uint64_t v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Clock::Clock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v19[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(std::__shared_mutex_base **)(**(void **)a2 + 16);
  *(void *)buf = &unk_1F14642F0;
  *(void *)uint64_t v16 = a3;
  v19[0] = buf;
  AMCP::Core::Broker::fetch_first_core_if (v14, v5, (uint64_t)buf);
  *(void *)a1 = &unk_1F145F4E8;
  uint64_t v6 = v14[0];
  if (v14[0]) {
    int v7 = *(_DWORD *)v14[0];
  }
  else {
    int v7 = 0;
  }
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v7;
  long long v8 = (std::__shared_weak_count *)v14[1];
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 32) = a2;
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    *(void *)(a1 + 32) = a2;
  }
  std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](buf);
  *(void *)a1 = &unk_1F14642B8;
  uint64_t v9 = AMCP::Object::constructed_correct_class((AMCP::Object *)a1, (AMCP *)0x61636C6B);
  if ((v9 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v11 = **(NSObject ***)buf;
    if (*(void *)v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v16);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      __int16 v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)uint64_t v16 = 2080;
      *(void *)&_OWORD v16[2] = "Clock.cpp";
      __int16 v17 = 1024;
      int v18 = 43;
      LOWORD(v19[0]) = 2080;
      *(void *)((char *)v19 + 2) = "constructed_correct_class(k_class_id_clock)";
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", buf, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1BABF34E4(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  uint64_t v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP5ClockC1ERNS_14System_ContextEN10applesauce2CF9StringRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  if (!AMCP::is_base_of((AMCP *)0x61636C6B, simple_required)) {
    return 0;
  }
  AMCP::Core::Core::get_simple_required_property<1969841184u>(&cf, *a2);
  BOOL v5 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(**(const __CFString ***)(a1 + 8), (const __CFString **)&cf) == kCFCompareEqualTo;
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

uint64_t std::__function::__func<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14642F0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F14642F0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Clock::Clock(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
}

uint64_t AMCP::Clock::Clock(uint64_t result, uint64_t a2, int **a3)
{
  *(void *)uint64_t result = &unk_1F145F4E8;
  uint64_t v3 = *a3;
  if (*a3) {
    int v4 = *v3;
  }
  else {
    int v4 = 0;
  }
  *(_DWORD *)(result + _Block_object_dispose(&a9, 8) = v4;
  BOOL v5 = a3[1];
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 2, 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 32) = a2;
  *(void *)uint64_t result = &unk_1F14642B8;
  return result;
}

{
  int *v3;
  int v4;
  int *v5;

  *(void *)uint64_t result = &unk_1F145F4E8;
  uint64_t v3 = *a3;
  if (*a3) {
    int v4 = *v3;
  }
  else {
    int v4 = 0;
  }
  *(_DWORD *)(result + _Block_object_dispose(&a9, 8) = v4;
  BOOL v5 = a3[1];
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 2, 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 32) = a2;
  *(void *)uint64_t result = &unk_1F14642B8;
  return result;
}

void AMCP::Clock::get_device_uid(AMCP::Clock *this@<X0>, void *a2@<X8>)
{
  int v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    int v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7) {
      AMCP::Core::Core::get_simple_required_property<1969841184u>(a2, v7);
    }
    else {
      *a2 = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
  }
}

void AMCP::Clock::get_model_uid(AMCP::Clock *this@<X0>, unsigned char *a2@<X8>)
{
  int v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    int v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      uint64_t v8 = 0x676C6F626D756964;
      int v9 = 0;
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a2, v7, (const AMCP::Address *)&v8);
    }
    else
    {
      *a2 = 0;
      a2[8] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
}

void AMCP::Clock::get_model_uid(AMCP::Clock *this@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v6)
  {
    int v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      uint64_t v8 = (AMCP::Core::Core *)*((void *)this + 2);
      if (v8)
      {
        uint64_t v10 = 0x676C6F626D756964;
        int v11 = 0;
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a3, v8, (AMCP::Address *)&v10, a2);
LABEL_9:
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        return;
      }
    }
  }
  else
  {
    int v7 = 0;
  }
  int v9 = *a2;
  if (v9) {
    CFRetain(v9);
  }
  *a3 = v9;
  if (v7) {
    goto LABEL_9;
  }
}

unint64_t AMCP::Clock::get_transport_type(AMCP::Clock *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  int v4 = v3;
  BOOL v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5) {
    unint64_t simple_required = AMCP::Core::Core::get_simple_required_property<1953653102u>(v5);
  }
  else {
    unint64_t simple_required = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return simple_required;
}

unint64_t AMCP::Core::Core::get_simple_required_property<1953653102u>(AMCP::Core::Core *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  strcpy(buf, "nartbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  unint64_t result = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v2 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = pthread_self();
      mach_port_t v4 = pthread_mach_thread_np(v3);
      char v6 = 4;
      strcpy((char *)__p, "tran");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v4;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      __int16 v8 = 1024;
      int v9 = 391;
      __int16 v10 = 2080;
      int v11 = "optional_value.operator BOOL() == true";
      __int16 v12 = 2080;
      mach_port_t v13 = __p;
      __int16 v14 = 1024;
      int v15 = 1735159650;
      __int16 v16 = 1024;
      int v17 = 0;
      _os_log_error_impl(&dword_1BAA78000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  return result;
}

void sub_1BABF3B48(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

BOOL AMCP::Clock::is_hidden(AMCP::Clock *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  mach_port_t v4 = v3;
  BOOL v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5)
  {
    strcpy(buf, "ndihbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    char v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v9 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        __int16 v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        char v13 = 4;
        strcpy((char *)__p, "hidn");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&uint8_t buf[4] = v11;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Core.h";
        __int16 v15 = 1024;
        int v16 = 391;
        __int16 v17 = 2080;
        uint64_t v18 = "optional_value.operator BOOL() == true";
        __int16 v19 = 2080;
        unint64_t v20 = __p;
        __int16 v21 = 1024;
        int v22 = 1735159650;
        __int16 v23 = 1024;
        int v24 = 0;
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
      abort();
    }
    BOOL v7 = v6 != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v7;
}

void sub_1BABF3D0C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

unint64_t AMCP::Clock::get_clock_domain(AMCP::Clock *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  mach_port_t v4 = v3;
  BOOL v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5) {
    unint64_t simple_required = AMCP::Core::Core::get_simple_required_property<1668049764u>(v5);
  }
  else {
    unint64_t simple_required = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return simple_required;
}

unint64_t AMCP::Core::Core::get_simple_required_property<1668049764u>(AMCP::Core::Core *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  strcpy(buf, "dklcbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  unint64_t result = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v2 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = pthread_self();
      mach_port_t v4 = pthread_mach_thread_np(v3);
      char v6 = 4;
      strcpy((char *)__p, "clkd");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v4;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      __int16 v8 = 1024;
      int v9 = 391;
      __int16 v10 = 2080;
      mach_port_t v11 = "optional_value.operator BOOL() == true";
      __int16 v12 = 2080;
      char v13 = __p;
      __int16 v14 = 1024;
      int v15 = 1735159650;
      __int16 v16 = 1024;
      int v17 = 0;
      _os_log_error_impl(&dword_1BAA78000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  return result;
}

void sub_1BABF3EE8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

unint64_t AMCP::Clock::get_input_latency(AMCP::Clock *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  mach_port_t v4 = v3;
  BOOL v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5) {
    unint64_t simple_required = AMCP::Core::Core::get_simple_required_property<1819569763u>(v5, 1768845428);
  }
  else {
    unint64_t simple_required = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return simple_required;
}

unint64_t AMCP::Core::Core::get_simple_required_property<1819569763u>(AMCP::Core::Core *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)buf = 1819569763;
  *(_DWORD *)&uint8_t buf[4] = a2;
  *(_DWORD *)__int16 v10 = 0;
  unint64_t result = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v4 = **(NSObject ***)buf;
    if (*(void *)v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      BOOL v5 = pthread_self();
      mach_port_t v6 = pthread_mach_thread_np(v5);
      char v8 = 4;
      strcpy((char *)__p, "ltnc");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)__int16 v10 = 2080;
      *(void *)&void v10[2] = "Core.h";
      __int16 v11 = 1024;
      int v12 = 391;
      __int16 v13 = 2080;
      __int16 v14 = "optional_value.operator BOOL() == true";
      __int16 v15 = 2080;
      __int16 v16 = __p;
      __int16 v17 = 1024;
      int v18 = a2;
      __int16 v19 = 1024;
      int v20 = 0;
      _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  return result;
}

void sub_1BABF40C8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

unint64_t AMCP::Clock::get_output_latency(AMCP::Clock *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  mach_port_t v4 = v3;
  BOOL v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5) {
    unint64_t simple_required = AMCP::Core::Core::get_simple_required_property<1819569763u>(v5, 1869968496);
  }
  else {
    unint64_t simple_required = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return simple_required;
}

double AMCP::Clock::get_sample_rate(AMCP::Clock *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  double simple_required = 0.0;
  if (v2)
  {
    mach_port_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      BOOL v5 = v4;
      mach_port_t v6 = (AMCP::Core::Core *)*((void *)this + 2);
      if (v6) {
        double simple_required = AMCP::Core::Core::get_simple_required_property<1853059700u>(v6);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  return simple_required;
}

double AMCP::Core::Core::get_simple_required_property<1853059700u>(AMCP::Core::Core *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  strcpy(buf, "trsnbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  uint64_t v1 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<double,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!v2)
  {
    AMCP::Log::Scope_Registry::get(v1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v4 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      BOOL v5 = pthread_self();
      mach_port_t v6 = pthread_mach_thread_np(v5);
      char v8 = 4;
      strcpy((char *)__p, "nsrt");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      __int16 v10 = 1024;
      int v11 = 391;
      __int16 v12 = 2080;
      __int16 v13 = "optional_value.operator BOOL() == true";
      __int16 v14 = 2080;
      __int16 v15 = __p;
      __int16 v16 = 1024;
      int v17 = 1735159650;
      __int16 v18 = 1024;
      int v19 = 0;
      _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  return *(double *)&v1;
}

void sub_1BABF430C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Core::Core::get_typed_property_value<double,std::enable_if<true,void>>(AMCP::Core::Core *a1, const AMCP::Address *a2)
{
  if (!AMCP::Core::Core::has_property(a1, a2))
  {
LABEL_13:
    *(void *)&v2 &= 0xFFFFFFFFFFFFFF00;
    return *(void *)&v2;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v13, (int8x8_t *)a1, (unsigned int *)a2);
  BOOL v5 = v13;
  if (v13)
  {
    unint64_t v6 = AMCP::Implementation::get_type_marker<std::function<double ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v6))
    {
      AMCP::Core::Operation::call_function<double>(v5);
      double v2 = v7;
LABEL_5:
      int v8 = 0;
      goto LABEL_10;
    }
    unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v9))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v11, v5);
      double v2 = AMCP::Thing::convert_to<double>((uint64_t)v11);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      goto LABEL_5;
    }
  }
  int v8 = 1;
LABEL_10:
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v8) {
    goto LABEL_13;
  }
  return *(void *)&v2;
}

uint64_t AMCP::Clock::set_sample_rate(AMCP::Clock *this, double a2)
{
  double v15 = a2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    BOOL v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      unint64_t v6 = v5;
      uint64_t v7 = *((void *)this + 2);
      if (!v7)
      {
LABEL_19:
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        return v7;
      }
      uint64_t v13 = 0x676C6F626E737274;
      int v14 = 0;
      if (!AMCP::Core::Core::is_property_settable((int8x8_t *)v7, (const AMCP::Address *)&v13))
      {
LABEL_17:
        uint64_t v7 = 0;
        goto LABEL_19;
      }
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v18, (int8x8_t *)v7, (unsigned int *)&v13);
      int v8 = v18;
      if (v18)
      {
        unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
        {
          AMCP::Core::Operation::call_function<void,double const&>(v8, (uint64_t)&v15);
LABEL_8:
          char v10 = 0;
          goto LABEL_14;
        }
        unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v11))
        {
          memset(&v16[1], 0, 24);
          *(double *)__int16 v16 = a2;
          int v17 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
          AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v16);
          if (v17) {
            v17(0, (uint64_t)v16, 0, 0);
          }
          goto LABEL_8;
        }
      }
      char v10 = 1;
LABEL_14:
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      if ((v10 & 1) == 0)
      {
        uint64_t v7 = 1;
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
  return 0;
}

void sub_1BABF455C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void (*a16)(void, char *, void, void))
{
  if (a16) {
    a16(0, &a12, 0, 0);
  }
  __int16 v18 = *(std::__shared_weak_count **)(v16 - 40);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BABF452CLL);
}

uint64_t AMCP::Clock::set_sample_rate_and_wait(AMCP::Clock *this, double a2)
{
  double v15 = a2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    BOOL v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      unint64_t v6 = v5;
      uint64_t v7 = *((void *)this + 2);
      if (!v7)
      {
LABEL_19:
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        return v7;
      }
      uint64_t v13 = 0x676C6F626E737274;
      int v14 = 0;
      if (!AMCP::Core::Core::is_property_settable((int8x8_t *)v7, (const AMCP::Address *)&v13))
      {
LABEL_17:
        uint64_t v7 = 0;
        goto LABEL_19;
      }
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v18, (int8x8_t *)v7, (unsigned int *)&v13);
      int v8 = v18;
      if (v18)
      {
        unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
        {
          AMCP::Core::Operation::call_function<void,double const&>(v8, (uint64_t)&v15);
LABEL_8:
          char v10 = 0;
          goto LABEL_14;
        }
        unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v11))
        {
          memset(&v16[1], 0, 24);
          *(double *)uint64_t v16 = a2;
          int v17 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
          AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v16);
          if (v17) {
            v17(0, (uint64_t)v16, 0, 0);
          }
          goto LABEL_8;
        }
      }
      char v10 = 1;
LABEL_14:
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      if ((v10 & 1) == 0)
      {
        uint64_t v7 = 1;
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
  return 0;
}

void sub_1BABF46F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void (*a16)(void, char *, void, void))
{
  if (a16) {
    a16(0, &a12, 0, 0);
  }
  __int16 v18 = *(std::__shared_weak_count **)(v16 - 40);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BABF46C4);
}

void AMCP::Clock::get_available_sample_rate_list(AMCP::Clock *this@<X0>, void *a2@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  mach_port_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v4 || (BOOL v5 = std::__shared_weak_count::lock(v4)) == 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  unint64_t v6 = v5;
  uint64_t v7 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v7)
  {
    uint64_t v18 = 0x676C6F626E737223;
    int v19 = 0;
    has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::has_property(v7, (const AMCP::Address *)&v18);
    if (!has_property) {
      goto LABEL_24;
    }
    AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v23, (int8x8_t *)v7, (unsigned int *)&v18);
    unint64_t v9 = v23;
    if (v23)
    {
      unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRangeList ()(void)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10))
      {
        AMCP::Core::Operation::call_function<CA::ValueRangeList>((uint64_t)buf, v9);
        char v11 = 0;
        __int16 v12 = *(char **)&buf[8];
        *(_OWORD *)std::vector<std::csub_match> __p = *(_OWORD *)buf;
LABEL_14:
        unint64_t v9 = v12;
        goto LABEL_16;
      }
      unint64_t v13 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v13))
      {
        AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)buf, v9);
        AMCP::Thing::convert_to<CA::ValueRangeList>(v21, (uint64_t)buf);
        int v17 = (char *)v21[1];
        *(_OWORD *)std::vector<std::csub_match> __p = *(_OWORD *)v21;
        if (*(void *)&v29[6]) {
          (*(void (**)(void, unsigned char *, void, void))&v29[6])(0, buf, 0, 0);
        }
        char v11 = 0;
        __int16 v12 = v17;
        goto LABEL_14;
      }
    }
    char v11 = 1;
LABEL_16:
    has_property = (AMCP::Log::Scope_Registry *)v24;
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    if ((v11 & 1) == 0)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(a2, __p[0], (uint64_t)v9, (v9 - (char *)__p[0]) >> 4);
      if (__p[0]) {
        operator delete(__p[0]);
      }
      goto LABEL_21;
    }
LABEL_24:
    LOBYTE(__p[0]) = 0;
    AMCP::Log::Scope_Registry::get(has_property);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v14 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      double v15 = pthread_self();
      mach_port_t v16 = pthread_mach_thread_np(v15);
      char v22 = 4;
      strcpy((char *)v21, "nsr#");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v16;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      __int16 v26 = 1024;
      int v27 = 391;
      __int16 v28 = 2080;
      *(void *)unint64_t v29 = "optional_value.operator BOOL() == true";
      *(_WORD *)&v29[8] = 2080;
      *(void *)&unsigned char v29[10] = v21;
      __int16 v30 = 1024;
      int v31 = 1735159650;
      __int16 v32 = 1024;
      int v33 = 0;
      _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v22 < 0) {
        operator delete(v21[0]);
      }
    }
    abort();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
LABEL_21:

  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_1BABF4A28(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *> *,long>>(uint64_t a1, void *a2, void *a3)
{
  if (*(void *)(a1 + 16))
  {
    unint64_t v6 = *(uint64_t **)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    if (!v8)
    {
      uint64_t v18 = 0;
LABEL_27:
      std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(v18);
      goto LABEL_28;
    }
    unint64_t v9 = std::__tree<DSP_Host_Types::AudioProcessingType>::_DetachedTreeCache::__detach_next((uint64_t)v8);
    if (a2 != a3)
    {
      unint64_t v10 = v8;
      char v11 = a2;
      do
      {
        int v8 = v9;
        __int16 v12 = (const void *)v10[4];
        unint64_t v13 = (const void *)v11[4];
        CFTypeRef v10[4] = (uint64_t)v13;
        if (v13) {
          CFRetain(v13);
        }
        if (v12) {
          CFRelease(v12);
        }
        *((unsigned char *)v10 + 40) = *((unsigned char *)v11 + 40);
        leaf_high = (uint64_t **)std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::__find_leaf_high(a1, v24, (const __CFString **)v10 + 4);
        std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at((uint64_t **)a1, v24[0], leaf_high, v10);
        if (v8) {
          unint64_t v9 = std::__tree<DSP_Host_Types::AudioProcessingType>::_DetachedTreeCache::__detach_next((uint64_t)v8);
        }
        else {
          unint64_t v9 = 0;
        }
        double v15 = (void *)v11[1];
        if (v15)
        {
          do
          {
            a2 = v15;
            double v15 = (void *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            a2 = (void *)v11[2];
            BOOL v16 = *a2 == (void)v11;
            char v11 = a2;
          }
          while (!v16);
        }
        if (!v8) {
          break;
        }
        unint64_t v10 = v8;
        char v11 = a2;
      }
      while (a2 != a3);
    }
    std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(v8);
    if (v9)
    {
      for (char i = (uint64_t *)v9[2]; i; char i = (uint64_t *)i[2])
        unint64_t v9 = i;
      uint64_t v18 = v9;
      goto LABEL_27;
    }
  }
LABEL_28:
  if (a2 != a3)
  {
    do
    {
      int v19 = (const __CFString **)operator new(0x30uLL);
      v24[1] = a1 + 8;
      std::pair<applesauce::CF::StringRef const,BOOL>::pair[abi:ne180100]((uint64_t)(v19 + 4), (uint64_t)(a2 + 4));
      char v25 = 1;
      uint64_t v20 = (uint64_t **)std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::__find_leaf_high(a1, &v23, v19 + 4);
      std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at((uint64_t **)a1, v23, v20, (uint64_t *)v19);
      v24[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *>>>>::reset[abi:ne180100]((uint64_t)v24);
      uint64_t v21 = (void *)a2[1];
      if (v21)
      {
        do
        {
          char v22 = v21;
          uint64_t v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          char v22 = (void *)a2[2];
          BOOL v16 = *v22 == (void)a2;
          a2 = v22;
        }
        while (!v16);
      }
      a2 = v22;
    }
    while (v22 != a3);
  }
}

void std::vector<MutationItinerary::Device>::__assign_with_size[abi:ne180100]<MutationItinerary::Device*,MutationItinerary::Device*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  int v8 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    std::vector<MutationItinerary::Device>::__vdeallocate((void **)a1);
    if (a4 > 0x555555555555555) {
      goto LABEL_20;
    }
    unint64_t v9 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v9 <= a4) {
      unint64_t v9 = a4;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL
        ? 0x555555555555555
        : v9;
    if (v10 > 0x555555555555555) {
LABEL_20:
    }
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    char v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MutationItinerary::Device>>(v10);
    *(void *)a1 = v11;
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = v11;
    *(void *)(a1 + 16) = &v11[48 * v12];
    while (v6 != a3)
    {
      uint64_t v13 = std::construct_at[abi:ne180100]<MutationItinerary::Device,MutationItinerary::Device&,MutationItinerary::Device*>((uint64_t)v11, v6);
      v6 += 48;
      char v11 = (char *)(v13 + 48);
    }
    goto LABEL_16;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 4) < a4)
  {
    uint64_t v14 = a2 + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 4);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<MutationItinerary::Device *,MutationItinerary::Device *,MutationItinerary::Device *>(a2, v14, (uint64_t)v8);
    char v11 = *(char **)(a1 + 8);
    while (v14 != a3)
    {
      uint64_t v15 = std::construct_at[abi:ne180100]<MutationItinerary::Device,MutationItinerary::Device&,MutationItinerary::Device*>((uint64_t)v11, v14);
      v14 += 48;
      char v11 = (char *)(v15 + 48);
    }
LABEL_16:
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = v11;
    return;
  }
  uint64_t v16 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<MutationItinerary::Device *,MutationItinerary::Device *,MutationItinerary::Device *>(a2, a3, (uint64_t)v8);
  for (uint64_t i = *(void *)(a1 + 8); i != v16; i -= 48)
  {
    uint64_t v18 = *(const void **)(i - 48);
    std::__destroy_at[abi:ne180100]<MutationItinerary::Device,0>(v18);
  }
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v16;
}

void *std::vector<CAStreamBasicDescription>::__assign_with_size[abi:ne180100]<CAStreamBasicDescription*,CAStreamBasicDescription*>(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 3) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 > 0x666666666666666) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0x333333333333333 ? 0x666666666666666 : v11;
    if (v12 > 0x666666666666666) {
LABEL_23:
    }
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = 5 * v12;
    unint64_t result = operator new(40 * v12);
    unint64_t v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    void v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      unint64_t result = memcpy(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  uint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v9) >> 3) >= a4)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    uint64_t v18 = (void *)*result;
LABEL_21:
    unint64_t result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  int v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    unint64_t result = memmove((void *)*result, __src, v16 - v9);
    unint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v17;
  if (v14)
  {
    uint64_t v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *uint64_t v15 = &v9[v14];
  return result;
}

void MutationItinerary::~MutationItinerary(MutationItinerary *this)
{
  double v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + _Block_object_dispose(&a9, 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 32);
  std::vector<MutationItinerary::Device>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*((void **)this + 2));
}

void std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  double v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__clear[abi:ne180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  double v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    mach_port_t v4 = (void *)*--v3;
    unint64_t result = v4;
    void *v3 = 0;
    if (v4) {
      unint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void std::vector<MutationItinerary::Device>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  double v2 = (char *)**a1;
  if (v2)
  {
    mach_port_t v4 = (char *)v1[1];
    BOOL v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (const void *)*((void *)v4 - 6);
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<MutationItinerary::Device,0>(v6);
      }
      while (v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*a1);
    std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef const,BOOL>,0>((const void *)a1[4]);
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef const,BOOL>,0>(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

void std::__destroy_at[abi:ne180100]<MutationItinerary::Device,0>(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<MutationItinerary::Device *,MutationItinerary::Device *,MutationItinerary::Device *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      uint64_t v6 = *(const void **)a3;
      uint64_t v7 = *(const void **)v5;
      *(void *)a3 = *(void *)v5;
      if (v7) {
        CFRetain(v7);
      }
      if (v6) {
        CFRelease(v6);
      }
      long long v8 = *(_OWORD *)(v5 + 8);
      long long v9 = *(_OWORD *)(v5 + 24);
      *(void *)(a3 + 37) = *(void *)(v5 + 37);
      *(_OWORD *)(a3 + 24) = v9;
      *(_OWORD *)(a3 + _Block_object_dispose(&a9, 8) = v8;
      a3 += 48;
      v5 += 48;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t std::construct_at[abi:ne180100]<MutationItinerary::Device,MutationItinerary::Device&,MutationItinerary::Device*>(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4 = *(CFTypeRef *)a2;
  if (*(void *)a2) {
    CFRetain(*(CFTypeRef *)a2);
  }
  *(void *)a1 = v4;
  long long v5 = *(_OWORD *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 37) = *(void *)(a2 + 37);
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + _Block_object_dispose(&a9, 8) = v5;
  return a1;
}

void std::vector<MutationItinerary::Device>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    CFTypeRef v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        long long v5 = (const void *)*((void *)v3 - 6);
        v3 -= 48;
        std::__destroy_at[abi:ne180100]<MutationItinerary::Device,0>(v5);
      }
      while (v3 != v1);
      CFTypeRef v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MutationItinerary::Device>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a1);
}

void *std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::__find_leaf_high(uint64_t a1, void *a2, const __CFString **a3)
{
  long long v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        long long v5 = (void *)v4;
        if ((unint64_t)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*a3, (const __CFString **)(v4 + 32)) < 2)break; {
        uint64_t v4 = *v5;
        }
        unint64_t result = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    unint64_t result = v5 + 1;
  }
  else
  {
    unint64_t result = (void *)(a1 + 8);
  }
LABEL_8:
  *a2 = v5;
  return result;
}

uint64_t std::pair<applesauce::CF::StringRef const,BOOL>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  CFTypeRef v4 = *(CFTypeRef *)a2;
  if (*(void *)a2) {
    CFRetain(*(CFTypeRef *)a2);
  }
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + _Block_object_dispose(&a9, 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(const void ***)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef const,BOOL>,0>(v1[4]);
    }
    operator delete(v1);
  }
}

void HALS_MutationChangeSynchronizer::~HALS_MutationChangeSynchronizer(HALS_MutationChangeSynchronizer *this)
{
  double v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 56);
  std::vector<MutationItinerary::Device>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*((void **)this + 5));
  uint64_t v3 = (void **)this;
  std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void *HALS_MutationChangeSynchronizer::SetItinerary(HALS_MutationChangeSynchronizer *this, const MutationItinerary *a2)
{
  unint64_t result = std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__clear[abi:ne180100](this);
  *((_WORD *)this + 12) = *(_WORD *)a2;
  if ((HALS_MutationChangeSynchronizer *)((char *)this + 24) != a2)
  {
    std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *> *,long>>((uint64_t)this + 32, *((void **)a2 + 1), (void *)a2 + 2);
    std::vector<MutationItinerary::Device>::__assign_with_size[abi:ne180100]<MutationItinerary::Device*,MutationItinerary::Device*>((uint64_t)this + 56, *((void *)a2 + 4), *((void *)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 4));
    long long v5 = (char *)*((void *)a2 + 7);
    long long v6 = (char *)*((void *)a2 + 8);
    return std::vector<CAStreamBasicDescription>::__assign_with_size[abi:ne180100]<CAStreamBasicDescription*,CAStreamBasicDescription*>((void *)this + 10, v5, v6, 0xCCCCCCCCCCCCCCCDLL * ((v6 - v5) >> 3));
  }
  return result;
}

void HALS_MutationChangeSynchronizer::Wait(atomic_uint **this, HALS_MutationChangeSynchronizer *a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (this == (atomic_uint **)a2) {
    return;
  }
  uint64_t v3 = this;
  do
  {
    CFTypeRef v4 = *v3;
    if (!HALB_ChangeSynchronizer::SetStateIf(*v3, 2u, 3u)) {
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(atomic_uint *))(*(void *)v4 + 16))(v4))
    {
      BOOL v5 = HALB_ChangeSynchronizer::SetStateIf(v4, 3u, 4u);
      if (!v5)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        long long v6 = **(NSObject ***)buf;
        if (*(void *)v41) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
        }
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          int v17 = pthread_self();
          mach_port_t v18 = pthread_mach_thread_np(v17);
          unsigned int v19 = v4[39];
          v20.i32[0] = bswap32(v4[38]);
          int8x8_t v21 = vzip1_s8(v20, v20);
          v22.i64[0] = 0x1F0000001FLL;
          v22.i64[1] = 0x1F0000001FLL;
          v23.i64[0] = 0x5F0000005FLL;
          v23.i64[1] = 0x5F0000005FLL;
          *(int8x8_t *)v24.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v23, (uint32x4_t)vsraq_n_s32(v22, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v21), 0x18uLL), 0x18uLL))), v21, (int8x8_t)0x2E002E002E002ELL);
          char v39 = 4;
          *(int8x8_t *)v24.i8 = vmovn_s16(v24);
          LODWORD(v38[0]) = v24.i32[0];
          BYTE4(v38[0]) = 0;
          v24.i32[0] = bswap32(v19);
          *(int8x8_t *)v24.i8 = vzip1_s8(*(int8x8_t *)v24.i8, *(int8x8_t *)v24.i8);
          v22.i64[0] = 0x1F0000001FLL;
          v22.i64[1] = 0x1F0000001FLL;
          *(int8x8_t *)v24.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v23, (uint32x4_t)vsraq_n_s32(v22, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v24.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v24.i8, (int8x8_t)0x2E002E002E002ELL);
          char v37 = 4;
          *(int8x8_t *)v24.i8 = vmovn_s16(v24);
          LODWORD(v36[0]) = v24.i32[0];
          BYTE4(v36[0]) = 0;
          v24.i32[0] = bswap32(v4[40]);
          *(int8x8_t *)v24.i8 = vzip1_s8(*(int8x8_t *)v24.i8, *(int8x8_t *)v24.i8);
          v22.i64[0] = 0x1F0000001FLL;
          v22.i64[1] = 0x1F0000001FLL;
          char v35 = 4;
          *(int8x8_t *)v24.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v23, (uint32x4_t)vsraq_n_s32(v22, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v24.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v24.i8, (int8x8_t)0x2E002E002E002ELL);
          LODWORD(__p[0]) = vmovn_s16(v24).u32[0];
          BYTE4(__p[0]) = 0;
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&uint8_t buf[4] = v18;
          *(_WORD *)uint64_t v41 = 2080;
          *(void *)&v41[2] = "HALB_ChangeSynchronizer.cpp";
          __int16 v42 = 1024;
          int v43 = 190;
          __int16 v44 = 2048;
          uint64_t v45 = v4;
          __int16 v46 = 2080;
          float v47 = v38;
          __int16 v48 = 2080;
          uint64_t v49 = v36;
          __int16 v50 = 2080;
          uint64_t v51 = __p;
          _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] HALB_ChangeSynchronizer::WaitForChangeCompletion: Change synchronizer (%p) about to wait for change, discovered that it is already done, but unable to transition from state Waiting to state Completed [%s, %s, %s]", buf, 0x40u);
          if (v35 < 0) {
            operator delete(__p[0]);
          }
          if (v37 < 0) {
            operator delete(v36[0]);
          }
          if (v39 < 0) {
            operator delete(v38[0]);
          }
        }
      }
LABEL_9:
      atomic_load((unsigned int *)v4 + 2);
      goto LABEL_10;
    }
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 10);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 10));
    unsigned __int32 v7 = v4[9];
    v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * v7;
    while (1)
    {
      int v9 = atomic_load((unsigned int *)v4 + 2);
      if (v9 > 3) {
        break;
      }
      if (v8.__d_.__rep_ <= std::chrono::steady_clock::now().__d_.__rep_) {
        goto LABEL_29;
      }
      v10.__d_.__rep_ = v8.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
      if (v10.__d_.__rep_ >= 1)
      {
        std::chrono::steady_clock::now();
        v11.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v11.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0;
          goto LABEL_24;
        }
        if (v11.__d_.__rep_ < 1)
        {
          if ((unint64_t)v11.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
            goto LABEL_23;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v11.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_24;
          }
LABEL_23:
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = 1000 * v11.__d_.__rep_;
LABEL_24:
          if (v12 > (v10.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v13.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_27:
            std::condition_variable::__do_timed_wait((std::condition_variable *)(v4 + 26), &__lk, v13);
            std::chrono::steady_clock::now();
            goto LABEL_28;
          }
        }
        v13.__d_.__rep_ = v12 + v10.__d_.__rep_;
        goto LABEL_27;
      }
LABEL_28:
      if (std::chrono::steady_clock::now().__d_.__rep_ >= v8.__d_.__rep_)
      {
LABEL_29:
        int v14 = atomic_load((unsigned int *)v4 + 2);
        if (v14 <= 3)
        {
          BOOL v15 = HALB_ChangeSynchronizer::SetStateIf(v4, 3u, 5u);
          if (!v15)
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v15);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            uint64_t v16 = **(NSObject ***)buf;
            if (*(void *)v41) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
            }
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              char v25 = pthread_self();
              mach_port_t v26 = pthread_mach_thread_np(v25);
              unsigned int v27 = v4[39];
              v28.i32[0] = bswap32(v4[38]);
              int8x8_t v29 = vzip1_s8(v28, v28);
              v30.i64[0] = 0x1F0000001FLL;
              v30.i64[1] = 0x1F0000001FLL;
              v31.i64[0] = 0x5F0000005FLL;
              v31.i64[1] = 0x5F0000005FLL;
              *(int8x8_t *)v32.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v31, (uint32x4_t)vsraq_n_s32(v30, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v29), 0x18uLL), 0x18uLL))), v29, (int8x8_t)0x2E002E002E002ELL);
              char v39 = 4;
              *(int8x8_t *)v32.i8 = vmovn_s16(v32);
              LODWORD(v38[0]) = v32.i32[0];
              BYTE4(v38[0]) = 0;
              v32.i32[0] = bswap32(v27);
              *(int8x8_t *)v32.i8 = vzip1_s8(*(int8x8_t *)v32.i8, *(int8x8_t *)v32.i8);
              v30.i64[0] = 0x1F0000001FLL;
              v30.i64[1] = 0x1F0000001FLL;
              *(int8x8_t *)v32.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v31, (uint32x4_t)vsraq_n_s32(v30, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v32.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v32.i8, (int8x8_t)0x2E002E002E002ELL);
              char v37 = 4;
              *(int8x8_t *)v32.i8 = vmovn_s16(v32);
              LODWORD(v36[0]) = v32.i32[0];
              BYTE4(v36[0]) = 0;
              v32.i32[0] = bswap32(v4[40]);
              *(int8x8_t *)v32.i8 = vzip1_s8(*(int8x8_t *)v32.i8, *(int8x8_t *)v32.i8);
              v30.i64[0] = 0x1F0000001FLL;
              v30.i64[1] = 0x1F0000001FLL;
              char v35 = 4;
              *(int8x8_t *)v32.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v31, (uint32x4_t)vsraq_n_s32(v30, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v32.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v32.i8, (int8x8_t)0x2E002E002E002ELL);
              LODWORD(__p[0]) = vmovn_s16(v32).u32[0];
              BYTE4(__p[0]) = 0;
              *(_DWORD *)buf = 67110658;
              *(_DWORD *)&uint8_t buf[4] = v26;
              *(_WORD *)uint64_t v41 = 2080;
              *(void *)&v41[2] = "HALB_ChangeSynchronizer.cpp";
              __int16 v42 = 1024;
              int v43 = 217;
              __int16 v44 = 2048;
              uint64_t v45 = v4;
              __int16 v46 = 2080;
              float v47 = v38;
              __int16 v48 = 2080;
              uint64_t v49 = v36;
              __int16 v50 = 2080;
              uint64_t v51 = __p;
              _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] HALB_ChangeSynchronizer::WaitForChangeCompletion: Change synchronizer (%p) waiting for change to execute timed out, but unable to transition from state Waiting to state Timeout [%s, %s, %s]", buf, 0x40u);
              if (v35 < 0) {
                operator delete(__p[0]);
              }
              if (v37 < 0) {
                operator delete(v36[0]);
              }
              if (v39 < 0) {
                operator delete(v38[0]);
              }
            }
          }
        }
        break;
      }
    }
    atomic_load((unsigned int *)v4 + 2);
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
LABEL_10:
    ++v3;
  }
  while (v3 != (atomic_uint **)a2);
}

void sub_1BABF5AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, char a13)
{
  if (a13) {
    std::mutex::unlock(a12);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Utility::OSStatus_Error_Category::message(uint64_t a1@<X1>, uint64_t a2@<X8>, int16x8_t a3@<Q0>)
{
  a3.i32[0] = bswap32(a1);
  *(int8x8_t *)a3.i8 = vzip1_s8(*(int8x8_t *)a3.i8, *(int8x8_t *)a3.i8);
  v4.i64[0] = 0x1F0000001FLL;
  v4.i64[1] = 0x1F0000001FLL;
  v5.i64[0] = 0x5F0000005FLL;
  v5.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)a3.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v5, (uint32x4_t)vsraq_n_s32(v4, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a3.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a3.i8, (int8x8_t)0x2E002E002E002ELL);
  char v7 = 4;
  LODWORD(__p) = vmovn_s16(a3).u32[0];
  BYTE4(__p) = 0;
  caulk::make_string((caulk *)"OSStatus Code: '%s' %d 0x%X", a2, &__p, a1, a1);
  if (v7 < 0) {
    operator delete(__p);
  }
}

const char *AMCP::Utility::OSStatus_Error_Category::name(AMCP::Utility::OSStatus_Error_Category *this)
{
  return "OSStatus";
}

void AMCP::Utility::OSStatus_Error_Category::~OSStatus_Error_Category(std::error_category *this)
{
  std::error_category::~error_category(this);

  JUMPOUT(0x1C1859840);
}

void AMCP::Utility::OSStatus_Error_Category::get(AMCP::Utility::OSStatus_Error_Category *this)
{
  {
    AMCP::Utility::OSStatus_Error_Category::get(void)::s_category = (uint64_t)&unk_1F1464370;
  }
}

uint64_t OS::CF::UntypedObject::operator=(uint64_t a1, CFTypeRef cf)
{
  uint64_t v3 = *(const void **)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::find<AMCP::Wire_Identifier>(void *a1, unsigned __int8 **a2)
{
  unint64_t v4 = std::hash<AMCP::Wire_Identifier>::operator()((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  std::chrono::steady_clock::time_point v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  std::chrono::system_clock::time_point v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v12 == v6)
      {
        if (std::equal_to<AMCP::Wire_Identifier>::operator()[abi:ne180100]((uint64_t)(v11 + 2), a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(void *)&v5) {
            v12 %= *(void *)&v5;
          }
        }
        else
        {
          v12 &= *(void *)&v5 - 1;
        }
        if (v12 != v9) {
          return 0;
        }
      }
      std::chrono::system_clock::time_point v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t AMCP::Graph::Wire_Index::add_to_index(uint64_t a1, uint64_t a2, long long *a3)
{
  uint8x8_t v7 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>((void *)a1, (unsigned __int8 **)a2);
  if (v7) {
    goto LABEL_79;
  }
  long long v51 = 0uLL;
  uint64_t v52 = 0;
  unint64_t v8 = std::hash<AMCP::Terminal_Identifier>::operator()(a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v13 = *(void ****)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (void **)*i)
      {
        unint64_t v15 = (unint64_t)i[1];
        if (v15 == v9)
        {
          int v54 = i + 2;
          __int16 v55 = (std::string *)(i + 5);
          int v56 = (std::string *)(i + 6);
          v53[0] = (unsigned __int8 **)a2;
          v53[1] = (unsigned __int8 **)(a2 + 24);
          long long v53[2] = (unsigned __int8 **)(a2 + 32);
          if (std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v54, v53))
          {
            __int16 v48 = 0;
            long long v50 = 0u;
            goto LABEL_78;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = (char *)operator new(0x50uLL);
  int v17 = (void *)(a1 + 16);
  int v54 = (void **)v16;
  __int16 v55 = (std::string *)(a1 + 16);
  LOBYTE(v56) = 0;
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = v9;
  mach_port_t v18 = (std::string *)(v16 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v16 + 4) = *(void *)(a2 + 16);
  }
  *((void *)v16 + 5) = *(void *)(a2 + 24);
  *((_DWORD *)v16 + 12) = *(_DWORD *)(a2 + 32);
  *((void *)v16 + _Block_object_dispose(&a9, 8) = 0;
  *((void *)v16 + 9) = 0;
  *((void *)v16 + 7) = 0;
  LOBYTE(v56) = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if (*(void *)&prime > v10) {
      goto LABEL_34;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          char v25 = operator new(8 * *(void *)&prime);
          mach_port_t v26 = *(void **)a1;
          *(void *)a1 = v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          *(int8x8_t *)(a1 + _Block_object_dispose(&a9, 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v27++) = 0;
          while (*(void *)&prime != v27);
          int8x8_t v28 = (void *)*v17;
          if (*v17)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v29) = v17;
            uint64_t v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v35))
                  {
                    *(void *)(*(void *)a1 + 8 * v35) = v28;
                    goto LABEL_59;
                  }
                  void *v28 = *v34;
                  *uint64_t v34 = **(void **)(*(void *)a1 + 8 * v35);
                  **(void **)(*(void *)a1 + 8 * v35) = v34;
                  uint64_t v34 = v28;
                }
                unint64_t v35 = v29;
LABEL_59:
                int8x8_t v28 = v34;
                uint64_t v34 = (void *)*v34;
                unint64_t v29 = v35;
              }
              while (v34);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_63;
        }
        uint64_t v49 = *(void **)a1;
        *(void *)a1 = 0;
        if (v49) {
          operator delete(v49);
        }
        unint64_t v10 = 0;
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
      }
    }
LABEL_63:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v36 = *(void ***)(*(void *)a1 + 8 * v3);
  uint64_t i = v54;
  if (v36)
  {
    *int v54 = *v36;
  }
  else
  {
    *int v54 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = i;
    *(void *)(*(void *)a1 + 8 * v3) = v17;
    if (!*i) {
      goto LABEL_77;
    }
    unint64_t v37 = *((void *)*i + 1);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v37 >= v10) {
        v37 %= v10;
      }
    }
    else
    {
      v37 &= v10 - 1;
    }
    unint64_t v36 = (void **)(*(void *)a1 + 8 * v37);
  }
  *unint64_t v36 = i;
LABEL_77:
  int v54 = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v54);
  long long v50 = v51;
  __int16 v48 = v52;
LABEL_78:
  std::vector<AMCP::Wire_Identifier>::__vdeallocate(i + 7);
  *(_OWORD *)(i + 7) = v50;
  i[9] = v48;
  uint64_t v52 = 0;
  long long v51 = 0uLL;
  int v54 = (void **)&v51;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100](&v54);
  uint8x8_t v7 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>((void *)a1, (unsigned __int8 **)a2);
LABEL_79:
  unint64_t v38 = v7[9];
  unint64_t v39 = v7[8];
  if (v39 >= v38)
  {
    uint64_t v42 = v7[7];
    unint64_t v43 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v42) >> 4);
    if (v43 + 1 > 0x333333333333333) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v44 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v38 - v42) >> 4);
    uint64_t v45 = 2 * v44;
    if (2 * v44 <= v43 + 1) {
      uint64_t v45 = v43 + 1;
    }
    if (v44 >= 0x199999999999999) {
      unint64_t v46 = 0x333333333333333;
    }
    else {
      unint64_t v46 = v45;
    }
    uint64_t v58 = v7 + 9;
    if (v46) {
      unint64_t v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Identifier>>(v46);
    }
    else {
      uint64_t v47 = 0;
    }
    int v54 = (void **)v46;
    __int16 v55 = (std::string *)(v46 + 80 * v43);
    int v56 = v55;
    unint64_t v57 = v46 + 80 * v47;
    std::construct_at[abi:ne180100]<AMCP::Wire_Identifier,AMCP::Wire_Identifier const&,AMCP::Wire_Identifier*>(v55, a3);
    int v56 = (std::string *)((char *)v56 + 80);
    std::vector<AMCP::Wire_Identifier>::__swap_out_circular_buffer(v7 + 7, &v54);
    unint64_t v41 = v7[8];
    uint64_t result = std::__split_buffer<AMCP::Wire_Identifier>::~__split_buffer((uint64_t)&v54);
  }
  else
  {
    uint64_t result = (uint64_t)std::construct_at[abi:ne180100]<AMCP::Wire_Identifier,AMCP::Wire_Identifier const&,AMCP::Wire_Identifier*>((std::string *)v7[8], a3);
    unint64_t v41 = v39 + 80;
    unsigned char v7[8] = v39 + 80;
  }
  unsigned char v7[8] = v41;
  return result;
}

void sub_1BABF6350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint8x8_t v11 = va_arg(va2, void **);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,void *>>>>::reset[abi:ne180100]((uint64_t)va2);
  va_copy((va_list)v11, va);
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<AMCP::Wire_Identifier,AMCP::Wire_Description>::~pair(uint64_t a1)
{
  int8x8_t v5 = (void **)(a1 + 248);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  double v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(void *)(a1 + 192) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 160);
  if (v3)
  {
    *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void AMCP::Wire_Identifier::~Wire_Identifier(void **this)
{
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

unint64_t std::hash<AMCP::Wire_Identifier>::operator()(uint64_t a1)
{
  unint64_t v2 = std::hash<AMCP::Terminal_Identifier>::operator()(a1);
  unint64_t v3 = 0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v2) ^ ((0xC6A4A7935BD1E995 * v2) >> 47)) + 3864292196u;
  unint64_t v4 = std::hash<AMCP::Terminal_Identifier>::operator()(a1 + 40);
  return 3864292196u
       - 0x395B586CA42E166BLL
       * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v4) ^ ((0xC6A4A7935BD1E995 * v4) >> 47))) ^ v3);
}

BOOL std::equal_to<AMCP::Wire_Identifier>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v8 = a1;
  uint64_t v9 = a1 + 24;
  uint64_t v10 = a1 + 32;
  int8x8_t v5 = a2;
  uint64_t v6 = a2 + 3;
  uint8x8_t v7 = a2 + 4;
  BOOL result = std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v8, &v5);
  if (result)
  {
    uint64_t v8 = a1 + 40;
    uint64_t v9 = a1 + 64;
    uint64_t v10 = a1 + 72;
    int8x8_t v5 = a2 + 5;
    uint64_t v6 = a2 + 8;
    uint8x8_t v7 = a2 + 9;
    return std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v8, &v5);
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::Wire_Identifier const,AMCP::Graph::Graph_Wire>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<AMCP::Wire_Identifier const,AMCP::Graph::Graph_Wire>,0>(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 520);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 504);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__optional_destruct_base<AMCP::Graph::Graph_Wire::Connection,false>::~__optional_destruct_base[abi:ne180100](a1 + 272);
  uint8x8_t v7 = (void **)(a1 + 248);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  unint64_t v4 = *(void **)(a1 + 184);
  if (v4)
  {
    *(void *)(a1 + 192) = v4;
    operator delete(v4);
  }
  int8x8_t v5 = *(void **)(a1 + 160);
  if (v5)
  {
    *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v6 = *(void **)a1;
    operator delete(v6);
  }
}

std::string *AMCP::Wire_Description::Wire_Description(std::string *this, const AMCP::Wire_Description *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v5 = *((void *)a2 + 3);
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 8);
  this[1].__r_.__value_.__r.__words[0] = v5;
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 40);
    this[2].__r_.__value_.__l.__size_ = *((void *)a2 + 7);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v6;
  }
  std::string::size_type v7 = *((void *)a2 + 8);
  int v8 = *((_DWORD *)a2 + 18);
  this[3].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[3].__r_.__value_.__l.__data_) = v8;
  this[2].__r_.__value_.__r.__words[2] = v7;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[3].__r_.__value_.__l.__size_, *((const void **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
  this[4].__r_.__value_.__l.__size_ = 0;
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&this[4].__r_.__value_.__l.__size_, *((const void **)a2 + 13), *((void *)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 2);
  long long v9 = *((_OWORD *)a2 + 8);
  long long v10 = *((_OWORD *)a2 + 9);
  std::string::value_type v11 = *((unsigned char *)a2 + 160);
  this[7].__r_.__value_.__r.__words[0] = 0;
  this[6].__r_.__value_.__s.__data_[16] = v11;
  *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = v10;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = v9;
  this[7].__r_.__value_.__l.__size_ = 0;
  this[7].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 7, *((long long **)a2 + 21), *((long long **)a2 + 22), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 22) - *((void *)a2 + 21)) >> 3));
  return this;
}

void sub_1BABF67E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>(void *a1, unsigned __int8 **a2)
{
  unint64_t v4 = std::hash<AMCP::Wire_Identifier>::operator()((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  long long v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  std::string::value_type v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v6 == v12)
      {
        if (std::equal_to<AMCP::Wire_Identifier>::operator()[abi:ne180100]((uint64_t)(v11 + 2), a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(void *)&v5) {
            v12 %= *(void *)&v5;
          }
        }
        else
        {
          v12 &= *(void *)&v5 - 1;
        }
        if (v12 != v9) {
          return 0;
        }
      }
      std::string::value_type v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::pair<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>::~pair(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::Wire_Identifier const,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<AMCP::Wire_Identifier const,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,0>(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::__shared_ptr_emplace<AMCP::Graph::Wire_Volume_Connection>::__on_zero_shared_weak()
{
}

void std::__shared_ptr_emplace<AMCP::Graph::Wire_Volume_Connection>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14643D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859830);
}

void std::__shared_ptr_emplace<AMCP::Graph::Wire_Volume_Connection>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14643D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>(void *a1, unsigned __int8 **a2)
{
  unint64_t v4 = std::hash<AMCP::Terminal_Identifier>::operator()((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  long long v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  std::string::value_type v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v12 == v6)
      {
        v15[0] = v11 + 2;
        v15[1] = v11 + 5;
        v15[2] = v11 + 6;
        v14[0] = a2;
        v14[1] = a2 + 3;
        void v14[2] = a2 + 4;
        if (std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)v15, v14))
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(void *)&v5) {
            v12 %= *(void *)&v5;
          }
        }
        else
        {
          v12 &= *(void *)&v5 - 1;
        }
        if (v12 != v9) {
          return 0;
        }
      }
      std::string::value_type v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  unint64_t v12;
  unsigned __int8 **v14[3];
  void v15[3];

  unint64_t v4 = std::hash<AMCP::Terminal_Identifier>::operator()((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  long long v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  std::string::value_type v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v6 == v12)
      {
        v15[0] = v11 + 2;
        v15[1] = v11 + 5;
        v15[2] = v11 + 6;
        v14[0] = a2;
        v14[1] = a2 + 3;
        void v14[2] = a2 + 4;
        if (std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)v15, v14))
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(void *)&v5) {
            v12 %= *(void *)&v5;
          }
        }
        else
        {
          v12 &= *(void *)&v5 - 1;
        }
        if (v12 != v9) {
          return 0;
        }
      }
      std::string::value_type v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

void std::vector<AMCP::Wire_Identifier>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 80;
        std::__destroy_at[abi:ne180100]<AMCP::Wire_Identifier,0>(v3);
      }
      while ((void *)v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *std::construct_at[abi:ne180100]<AMCP::Wire_Identifier,AMCP::Wire_Identifier const&,AMCP::Wire_Identifier*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v5 = *((void *)a2 + 3);
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 8);
  this[1].__r_.__value_.__r.__words[0] = v5;
  unint64_t v6 = (std::string *)((char *)this + 40);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 40);
    this[2].__r_.__value_.__l.__size_ = *((void *)a2 + 7);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  std::string::size_type v8 = *((void *)a2 + 8);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  this[2].__r_.__value_.__r.__words[2] = v8;
  return this;
}

void sub_1BABF6CF4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Identifier>>(unint64_t a1)
{
  if (a1 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(80 * a1);
}

uint64_t *std::vector<AMCP::Wire_Identifier>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 80;
      long long v6 = *(_OWORD *)(v3 - 80);
      *(void *)(v4 - 64) = *(void *)(v3 - 64);
      *(_OWORD *)(v4 - 80) = v6;
      *(void *)(v3 - 72) = 0;
      *(void *)(v3 - 64) = 0;
      *(void *)(v3 - 80) = 0;
      uint64_t v7 = *(void *)(v3 - 56);
      *(_DWORD *)(v4 - 4_Block_object_dispose(&a9, 8) = *(_DWORD *)(v3 - 48);
      *(void *)(v4 - 56) = v7;
      long long v8 = *(_OWORD *)(v3 - 40);
      *(void *)(v4 - 24) = *(void *)(v3 - 24);
      *(_OWORD *)(v4 - 40) = v8;
      *(void *)(v3 - 32) = 0;
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 40) = 0;
      uint64_t v9 = *(void *)(v3 - 16);
      *(_DWORD *)(v4 - _Block_object_dispose(&a9, 8) = *(_DWORD *)(v3 - 8);
      *(void *)(v4 - 16) = v9;
      v3 -= 80;
      v4 -= 80;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v10 = *result;
  *BOOL result = v5;
  a2[1] = v10;
  uint64_t v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<AMCP::Wire_Identifier>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    std::__destroy_at[abi:ne180100]<AMCP::Wire_Identifier,0>(i - 80);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::Terminal_Identifier const,std::vector<AMCP::Wire_Identifier>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<AMCP::Terminal_Identifier const,std::vector<AMCP::Wire_Identifier>>,0>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 40);
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void AMCP::Graph::Wire_Index::remove_from_index(void *a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  uint64_t v4 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>(a1, a2);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v7 = v4[7];
    uint64_t v6 = v4[8];
    if (v7 == v6)
    {
      uint64_t v8 = v4[7];
    }
    else
    {
      uint64_t v8 = v4[7];
      while (1)
      {
        float v19 = (_DWORD *)v8;
        float v20 = (_DWORD *)(v8 + 24);
        BOOL v21 = (_DWORD *)(v8 + 32);
        uint64_t v16 = a3;
        int v17 = a3 + 3;
        mach_port_t v18 = a3 + 4;
        if (std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v19, &v16))
        {
          float v19 = (_DWORD *)(v8 + 40);
          float v20 = (_DWORD *)(v8 + 64);
          BOOL v21 = (_DWORD *)(v8 + 72);
          uint64_t v16 = a3 + 5;
          int v17 = a3 + 8;
          mach_port_t v18 = a3 + 9;
          if (std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v19, &v16))
          {
            break;
          }
        }
        v8 += 80;
        if (v8 == v6)
        {
          uint64_t v8 = v6;
          break;
        }
      }
    }
    if (v8 != v6)
    {
      if (v8 + 80 != v6)
      {
        uint64_t v9 = (_DWORD *)(v7 + 16 * ((v8 - v7) >> 4) + 152);
        do
        {
          float v19 = v9 - 18;
          float v20 = v9 - 12;
          BOOL v21 = v9 - 10;
          uint64_t v16 = a3;
          int v17 = a3 + 3;
          mach_port_t v18 = a3 + 4;
          if (!std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v19, &v16)|| (v19 = v9 - 8, v20 = v9 - 2, v21 = v9, uint64_t v16 = a3 + 5, v17 = a3 + 8, v18 = a3 + 9, !std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v19, &v16)))
          {
            if (*(char *)(v8 + 23) < 0) {
              operator delete(*(void **)v8);
            }
            long long v10 = *(_OWORD *)(v9 - 18);
            *(void *)(v8 + 16) = *((void *)v9 - 7);
            *(_OWORD *)uint64_t v8 = v10;
            *((unsigned char *)v9 - 49) = 0;
            *((unsigned char *)v9 - 72) = 0;
            int v11 = *(v9 - 10);
            *(void *)(v8 + 24) = *((void *)v9 - 6);
            *(_DWORD *)(v8 + 32) = v11;
            uint64_t v12 = (void **)(v8 + 40);
            if (*(char *)(v8 + 63) < 0) {
              operator delete(*v12);
            }
            long long v13 = *((_OWORD *)v9 - 2);
            *(void *)(v8 + 56) = *((void *)v9 - 2);
            *(_OWORD *)uint64_t v12 = v13;
            *((unsigned char *)v9 - 9) = 0;
            *((unsigned char *)v9 - 32) = 0;
            uint64_t v14 = *((void *)v9 - 1);
            *(_DWORD *)(v8 + 72) = *v9;
            *(void *)(v8 + 64) = v14;
            v8 += 80;
          }
          unint64_t v15 = v9 + 2;
          v9 += 20;
        }
        while (v15 != (_DWORD *)v6);
        uint64_t v6 = v5[8];
      }
      if (v8 != v6)
      {
        while (v6 != v8)
        {
          v6 -= 80;
          std::__destroy_at[abi:ne180100]<AMCP::Wire_Identifier,0>(v6);
        }
        void v5[8] = v8;
      }
    }
  }
}

void AMCP::Graph::Wire_Index::get_wires_for_terminal(void *a1, void *a2, unsigned __int8 **a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v5 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>(a2, a3);
  if (v5)
  {
    uint64_t v6 = (unsigned __int8 **)v5[7];
    uint64_t v7 = (unsigned __int8 **)v5[8];
    if (v6 != v7)
    {
      uint64_t v8 = 0;
      uint64_t v9 = a2 + 5;
      do
      {
        long long v10 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>(v9, v6);
        if (v10)
        {
          int v11 = v10 + 12;
          unint64_t v12 = a1[2];
          if ((unint64_t)v8 >= v12)
          {
            uint64_t v14 = (void *)*a1;
            uint64_t v15 = ((uint64_t)v8 - *a1) >> 3;
            unint64_t v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 61) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v17 = v12 - (void)v14;
            if (v17 >> 2 > v16) {
              unint64_t v16 = v17 >> 2;
            }
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v18 = v16;
            }
            if (v18) {
              unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v18);
            }
            else {
              uint64_t v19 = 0;
            }
            float v20 = (void *)(v18 + 8 * v15);
            *float v20 = v11;
            long long v13 = v20 + 1;
            if (v8 != v14)
            {
              do
              {
                uint64_t v21 = *--v8;
                *--float v20 = v21;
              }
              while (v8 != v14);
              uint64_t v8 = (void *)*a1;
            }
            *a1 = v20;
            a1[1] = v13;
            a1[2] = v18 + 8 * v19;
            if (v8) {
              operator delete(v8);
            }
          }
          else
          {
            *uint64_t v8 = v11;
            long long v13 = v8 + 1;
          }
          a1[1] = v13;
          uint64_t v8 = v13;
        }
        v6 += 10;
      }
      while (v6 != v7);
    }
  }
}

void sub_1BABF7344(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Wire_Index::get_wires_for_terminal(char **a1, void *a2, unsigned __int8 **a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v5 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>(a2, a3);
  if (v5)
  {
    uint64_t v6 = (unsigned __int8 **)v5[7];
    uint64_t v7 = (unsigned __int8 **)v5[8];
    if (v6 != v7)
    {
      uint64_t v8 = 0;
      uint64_t v9 = a2 + 5;
      do
      {
        long long v10 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::find<AMCP::Wire_Identifier>(v9, v6);
        if (v10)
        {
          int v11 = v10 + 12;
          unint64_t v12 = (unint64_t)a1[2];
          if ((unint64_t)v8 >= v12)
          {
            uint64_t v14 = *a1;
            uint64_t v15 = (v8 - *a1) >> 3;
            unint64_t v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 61) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v17 = v12 - (void)v14;
            if (v17 >> 2 > v16) {
              unint64_t v16 = v17 >> 2;
            }
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v18 = v16;
            }
            if (v18)
            {
              if (v18 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v19 = (char *)operator new(8 * v18);
            }
            else
            {
              uint64_t v19 = 0;
            }
            float v20 = &v19[8 * v15];
            *(void *)float v20 = v11;
            long long v13 = v20 + 8;
            if (v8 != v14)
            {
              do
              {
                uint64_t v21 = *((void *)v8 - 1);
                v8 -= 8;
                *((void *)v20 - 1) = v21;
                v20 -= 8;
              }
              while (v8 != v14);
              uint64_t v8 = *a1;
            }
            *a1 = v20;
            a1[1] = v13;
            a1[2] = &v19[8 * v18];
            if (v8) {
              operator delete(v8);
            }
          }
          else
          {
            *(void *)uint64_t v8 = v11;
            long long v13 = v8 + 8;
          }
          a1[1] = v13;
          uint64_t v8 = v13;
        }
        v6 += 10;
      }
      while (v6 != v7);
    }
  }
}

void sub_1BABF75E8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::Wire_Identifier const,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::Wire_Identifier const,AMCP::Graph::Graph_Wire>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::Terminal_Identifier const,std::vector<AMCP::Wire_Identifier>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void AMCP::Graph::Wire_Index::get_wires(AMCP::Graph::Wire_Index *this, uint64_t a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + _Block_object_dispose(&a9, 8) = 1065353216;
  uint64_t v2 = *(void **)(a2 + 16);
  if (v2)
  {
    uint64_t v4 = (void *)(a2 + 40);
    do
    {
      uint64_t v5 = (unsigned __int8 **)v2[7];
      uint64_t v6 = (unsigned __int8 **)v2[8];
      while (v5 != v6)
      {
        uint64_t v7 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>(v4, v5);
        if (v7)
        {
          AMCP::Graph::Graph_Wire::get_description((AMCP::Graph::Graph_Wire *)v8, (uint64_t)(v7 + 12));
          std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__emplace_unique_key_args<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)this, (uint64_t)v8, (long long *)v8);
          uint64_t v17 = (void **)&v16;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
          if (__p)
          {
            uint64_t v15 = __p;
            operator delete(__p);
          }
          if (v12)
          {
            long long v13 = v12;
            operator delete(v12);
          }
          if (v11 < 0) {
            operator delete(v10);
          }
          if (v9 < 0) {
            operator delete(v8[0]);
          }
        }
        v5 += 10;
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
}

void sub_1BABF77D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AMCP::Wire_Description::~Wire_Description((AMCP::Wire_Description *)va);
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void *std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__emplace_unique_key_args<AMCP::Wire_Description,AMCP::Wire_Description>(uint64_t a1, uint64_t a2, long long *a3)
{
  unint64_t v6 = std::hash<AMCP::Terminal_Identifier>::operator()(a2);
  unint64_t v7 = std::hash<AMCP::Terminal_Identifier>::operator()(a2 + 40);
  uint64_t v8 = *(unsigned int **)(a2 + 80);
  char v9 = *(unsigned int **)(a2 + 88);
  int v72 = a3;
  if (v8 == v9)
  {
    unint64_t v12 = 0;
  }
  else
  {
    unint64_t v10 = 0;
    do
    {
      unsigned int v11 = *v8++;
      unint64_t v10 = 3864292196u
          - 0x395B586CA42E166BLL
          * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v11) ^ ((0xC6A4A7935BD1E995 * v11) >> 47))) ^ v10);
    }
    while (v8 != v9);
    unint64_t v12 = 0xC6A4A7935BD1E995 * v10;
  }
  uint64_t v13 = *(int *)(a2 + 128);
  uint64_t v69 = *(int *)(a2 + 132);
  uint64_t v68 = *(int *)(a2 + 136);
  uint64_t v65 = *(int *)(a2 + 140);
  uint64_t v63 = *(int *)(a2 + 148);
  uint64_t v64 = *(int *)(a2 + 144);
  uint64_t v66 = *(int *)(a2 + 156);
  uint64_t v67 = *(int *)(a2 + 152);
  uint64_t v62 = *(unsigned __int8 *)(a2 + 160);
  unint64_t v14 = 3864292196u
      - 0x395B586CA42E166BLL
      * ((3864292196u
        - 0x395B586CA42E166BLL
        * ((3864292196u
          - 0x395B586CA42E166BLL
          * ((3864292196u
            - 0x395B586CA42E166BLL
            * ((3864292196u
              - 0x395B586CA42E166BLL
              * ((3864292196u
                - 0x395B586CA42E166BLL
                * ((3864292196u
                  - 0x395B586CA42E166BLL
                  * ((3864292196u
                    - 0x395B586CA42E166BLL
                    * ((3864292196u
                      - 0x395B586CA42E166BLL
                      * ((3864292196u
                        - 0x395B586CA42E166BLL
                        * ((0xC6A4A7935BD1E995 * (v12 ^ (v12 >> 47))) ^ (3864292196u
                                                                         - 0x395B586CA42E166BLL
                                                                         * ((0xC6A4A7935BD1E995
                                                                           * ((0xC6A4A7935BD1E995 * v7) ^ ((0xC6A4A7935BD1E995 * v7) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47)) + 3864292196u))))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v13) ^ ((0xC6A4A7935BD1E995 * v13) >> 47))))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v69) ^ ((0xC6A4A7935BD1E995 * v69) >> 47))))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v68) ^ ((0xC6A4A7935BD1E995 * v68) >> 47))))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v65) ^ ((0xC6A4A7935BD1E995 * v65) >> 47))))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v64) ^ ((0xC6A4A7935BD1E995 * v64) >> 47))))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v63) ^ ((0xC6A4A7935BD1E995 * v63) >> 47))))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v67) ^ ((0xC6A4A7935BD1E995 * v67) >> 47))))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v66) ^ ((0xC6A4A7935BD1E995 * v66) >> 47))))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v62) ^ ((0xC6A4A7935BD1E995 * v62) >> 47))));
  uint64_t v15 = *(void *)(a2 + 168);
  uint64_t v16 = *(void *)(a2 + 176);
  uint64_t v71 = (unsigned __int8 *)v15;
  for (unint64_t i = 0; v15 != v16; v15 += 24)
  {
    unint64_t v18 = std::__string_hash<char>::operator()[abi:ne180100](v15);
    unint64_t i = 3864292196u
      - 0x395B586CA42E166BLL
      * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v18) ^ ((0xC6A4A7935BD1E995 * v18) >> 47))) ^ i);
  }
  unint64_t v19 = v14 ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * i) ^ ((0xC6A4A7935BD1E995 * i) >> 47)));
  unint64_t v20 = 3864292196u - 0x395B586CA42E166BLL * v19;
  unint64_t v21 = *(void *)(a1 + 8);
  if (v21)
  {
    int v61 = v13;
    uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
    v22.i16[0] = vaddlv_u8(v22);
    unint64_t v23 = v22.u32[0];
    if (v22.u32[0] > 1uLL)
    {
      uint64_t v13 = 3864292196u - 0x395B586CA42E166BLL * v19;
      if (v20 >= v21) {
        uint64_t v13 = v20 % v21;
      }
    }
    else
    {
      uint64_t v13 = (v21 - 1) & v20;
    }
    int16x8_t v24 = *(void **)(*(void *)a1 + 8 * v13);
    if (v24)
    {
      char v25 = (void *)*v24;
      if (*v24)
      {
        __s2 = *(void **)(a2 + 80);
        size_t __n = *(void *)(a2 + 88) - (void)__s2;
        uint64_t v58 = *(const void **)(a2 + 104);
        size_t v59 = *(void *)(a2 + 112) - (void)v58;
        uint64_t v57 = v16 - (void)v71;
        do
        {
          unint64_t v26 = v25[1];
          if (v26 == v20)
          {
            uint64_t v76 = v25 + 2;
            int v77 = v25 + 5;
            uint64_t v78 = v25 + 6;
            uint64_t v73 = (unsigned __int8 **)a2;
            uint64_t v74 = a2 + 24;
            uint64_t v75 = a2 + 32;
            if (std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v76, &v73))
            {
              uint64_t v76 = v25 + 7;
              int v77 = v25 + 10;
              uint64_t v78 = v25 + 11;
              uint64_t v73 = (unsigned __int8 **)(a2 + 40);
              uint64_t v74 = a2 + 64;
              uint64_t v75 = a2 + 72;
              if (std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v76, &v73))
              {
                uint64_t v27 = (const void *)v25[12];
                if (v25[13] - (void)v27 == __n && !memcmp(v27, __s2, __n))
                {
                  int8x8_t v28 = (const void *)v25[15];
                  if (v25[16] - (void)v28 == v59
                    && !memcmp(v28, v58, v59)
                    && *((_DWORD *)v25 + 36) == v61
                    && *((_DWORD *)v25 + 37) == v69
                    && *((_DWORD *)v25 + 38) == v68
                    && *((_DWORD *)v25 + 42) == v67
                    && *((_DWORD *)v25 + 43) == v66
                    && *((_DWORD *)v25 + 39) == v65
                    && *((_DWORD *)v25 + 40) == v64
                    && *((_DWORD *)v25 + 41) == v63
                    && *((unsigned __int8 *)v25 + 176) == v62)
                  {
                    unint64_t v29 = (unsigned __int8 *)v25[23];
                    __int16 v55 = (unsigned __int8 *)v25[24];
                    if (v55 - v29 == v57)
                    {
                      if (v29 == v55) {
                        return v25;
                      }
                      uint8x8_t v30 = v71;
                      do
                      {
                        int v56 = v29;
                        BOOL v31 = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v29, v30);
                        if (!v31) {
                          break;
                        }
                        unint64_t v29 = v56 + 24;
                        v30 += 24;
                      }
                      while (v56 + 24 != v55);
                      if (v31) {
                        return v25;
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            if (v23 > 1)
            {
              if (v26 >= v21) {
                v26 %= v21;
              }
            }
            else
            {
              v26 &= v21 - 1;
            }
            if (v26 != v13) {
              break;
            }
          }
          char v25 = (void *)*v25;
        }
        while (v25);
      }
    }
  }
  uint8x8_t v32 = (void *)(a1 + 16);
  uint64_t v33 = operator new(0xD0uLL);
  uint64_t v76 = v33;
  int v77 = (void *)(a1 + 16);
  void *v33 = 0;
  v33[1] = v20;
  std::construct_at[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description,AMCP::Wire_Description*>((uint64_t)(v33 + 2), v72);
  LOBYTE(v7_Block_object_dispose(&a9, 8) = 1;
  float v34 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v35 = *(float *)(a1 + 32);
  if (!v21 || (float)(v35 * (float)v21) < v34)
  {
    BOOL v36 = 1;
    if (v21 >= 3) {
      BOOL v36 = (v21 & (v21 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v21);
    unint64_t v38 = vcvtps_u32_f32(v34 / v35);
    if (v37 <= v38) {
      int8x8_t prime = (int8x8_t)v38;
    }
    else {
      int8x8_t prime = (int8x8_t)v37;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v21 = *(void *)(a1 + 8);
    if (*(void *)&prime > v21) {
      goto LABEL_58;
    }
    if (*(void *)&prime < v21)
    {
      unint64_t v46 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v21 < 3 || (uint8x8_t v47 = (uint8x8_t)vcnt_s8((int8x8_t)v21), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
      {
        unint64_t v46 = std::__next_prime(v46);
      }
      else
      {
        uint64_t v48 = 1 << -(char)__clz(v46 - 1);
        if (v46 >= 2) {
          unint64_t v46 = v48;
        }
      }
      if (*(void *)&prime <= v46) {
        int8x8_t prime = (int8x8_t)v46;
      }
      if (*(void *)&prime >= v21)
      {
        unint64_t v21 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_58:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          os_log_type_t v40 = operator new(8 * *(void *)&prime);
          unint64_t v41 = *(void **)a1;
          *(void *)a1 = v40;
          if (v41) {
            operator delete(v41);
          }
          uint64_t v42 = 0;
          *(int8x8_t *)(a1 + _Block_object_dispose(&a9, 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v42++) = 0;
          while (*(void *)&prime != v42);
          unint64_t v43 = (void *)*v32;
          if (*v32)
          {
            unint64_t v44 = v43[1];
            uint8x8_t v45 = (uint8x8_t)vcnt_s8(prime);
            v45.i16[0] = vaddlv_u8(v45);
            if (v45.u32[0] > 1uLL)
            {
              if (v44 >= *(void *)&prime) {
                v44 %= *(void *)&prime;
              }
            }
            else
            {
              v44 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v44) = v32;
            uint64_t v49 = (void *)*v43;
            if (*v43)
            {
              do
              {
                unint64_t v50 = v49[1];
                if (v45.u32[0] > 1uLL)
                {
                  if (v50 >= *(void *)&prime) {
                    v50 %= *(void *)&prime;
                  }
                }
                else
                {
                  v50 &= *(void *)&prime - 1;
                }
                if (v50 != v44)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v50))
                  {
                    *(void *)(*(void *)a1 + 8 * v50) = v43;
                    goto LABEL_83;
                  }
                  *unint64_t v43 = *v49;
                  void *v49 = **(void **)(*(void *)a1 + 8 * v50);
                  **(void **)(*(void *)a1 + 8 * v50) = v49;
                  uint64_t v49 = v43;
                }
                unint64_t v50 = v44;
LABEL_83:
                unint64_t v43 = v49;
                uint64_t v49 = (void *)*v49;
                unint64_t v44 = v50;
              }
              while (v49);
            }
          }
          unint64_t v21 = (unint64_t)prime;
          goto LABEL_87;
        }
        int v54 = *(void **)a1;
        *(void *)a1 = 0;
        if (v54) {
          operator delete(v54);
        }
        unint64_t v21 = 0;
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
      }
    }
LABEL_87:
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v20 >= v21) {
        uint64_t v13 = v20 % v21;
      }
      else {
        uint64_t v13 = v20;
      }
    }
    else
    {
      uint64_t v13 = (v21 - 1) & v20;
    }
  }
  long long v51 = *(void **)(*(void *)a1 + 8 * v13);
  char v25 = v76;
  if (v51)
  {
    void *v76 = *v51;
LABEL_100:
    *long long v51 = v25;
    goto LABEL_101;
  }
  void *v76 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v25;
  *(void *)(*(void *)a1 + 8 * v13) = v32;
  if (*v25)
  {
    unint64_t v52 = *(void *)(*v25 + 8);
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v52 >= v21) {
        v52 %= v21;
      }
    }
    else
    {
      v52 &= v21 - 1;
    }
    long long v51 = (void *)(*(void *)a1 + 8 * v52);
    goto LABEL_100;
  }
LABEL_101:
  uint64_t v76 = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<AMCP::Wire_Description,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<AMCP::Wire_Description,void *>>>>::reset[abi:ne180100]((uint64_t)&v76);
  return v25;
}

void sub_1BABF7FAC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<AMCP::Wire_Description,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<AMCP::Wire_Description,void *>>>>::reset[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      std::__destroy_at[abi:ne180100]<AMCP::Wire_Description,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

__n128 std::construct_at[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description,AMCP::Wire_Description*>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  uint64_t v3 = *((void *)a2 + 3);
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *(void *)(a1 + 24) = v3;
  long long v4 = *(long long *)((char *)a2 + 40);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *(_OWORD *)(a1 + 40) = v4;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 5) = 0;
  uint64_t v5 = *((void *)a2 + 8);
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 80) = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = *(long long *)((char *)a2 + 104);
  *(void *)(a1 + 120) = *((void *)a2 + 15);
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  long long v6 = a2[8];
  long long v7 = a2[9];
  *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
  *(_OWORD *)(a1 + 12_Block_object_dispose(&a9, 8) = v6;
  *(_OWORD *)(a1 + 144) = v7;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = 0;
  __n128 result = *(__n128 *)((char *)a2 + 168);
  *(__n128 *)(a1 + 16_Block_object_dispose(&a9, 8) = result;
  *(void *)(a1 + 184) = *((void *)a2 + 23);
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  *((void *)a2 + 23) = 0;
  return result;
}

void std::unique_ptr<std::__hash_node<AMCP::Wire_Description,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<AMCP::Wire_Description,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<AMCP::Wire_Description,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void AMCP::Graph::Wire_Index::get_wires_for_node(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint8x8_t v22 = 0;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  if (a4)
  {
    for (uint64_t i = 0; i != a4; ++i)
    {
      if (*(char *)(a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string v21 = *(std::string *)a3;
      }
      *(_OWORD *)std::vector<std::csub_match> __p = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
      std::string::size_type v11 = v21.__r_.__value_.__r.__words[2];
      memset(&v21, 0, sizeof(v21));
      std::string::size_type v26 = v11;
      uint64_t v27 = i;
      int v28 = 1;
      AMCP::Graph::Wire_Index::get_wires_for_terminal(&v19, a2, (unsigned __int8 **)__p);
      unint64_t v12 = v19;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::reference_wrapper<AMCP::Graph::Graph_Wire const> *>,std::__wrap_iter<std::reference_wrapper<AMCP::Graph::Graph_Wire const> *>,std::back_insert_iterator<std::vector<std::reference_wrapper<AMCP::Graph::Graph_Wire const>>>,0>(v19, v20, (void **)&v22);
      if (v12) {
        operator delete(v12);
      }
      if (SHIBYTE(v26) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (a5)
  {
    uint64_t v13 = 0;
    do
    {
      if (*(char *)(a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string v18 = *(std::string *)a3;
      }
      *(_OWORD *)std::vector<std::csub_match> __p = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
      std::string::size_type v14 = v18.__r_.__value_.__r.__words[2];
      memset(&v18, 0, sizeof(v18));
      std::string::size_type v26 = v14;
      uint64_t v27 = v13;
      int v28 = 0;
      AMCP::Graph::Wire_Index::get_wires_for_terminal(&v19, a2, (unsigned __int8 **)__p);
      uint64_t v15 = v19;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::reference_wrapper<AMCP::Graph::Graph_Wire const> *>,std::__wrap_iter<std::reference_wrapper<AMCP::Graph::Graph_Wire const> *>,std::back_insert_iterator<std::vector<std::reference_wrapper<AMCP::Graph::Graph_Wire const>>>,0>(v19, v20, (void **)&v22);
      if (v15) {
        operator delete(v15);
      }
      if (SHIBYTE(v26) < 0) {
        operator delete(__p[0]);
      }
      ++v13;
    }
    while (a5 != v13);
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  uint64_t v16 = v22;
  uint64_t v17 = v23;
  if (v22 != v23)
  {
    do
    {
      AMCP::Graph::Graph_Wire::get_description((AMCP::Graph::Graph_Wire *)__p, *v16);
      std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__emplace_unique_key_args<AMCP::Wire_Description,AMCP::Wire_Description>(a1, (uint64_t)__p, (long long *)__p);
      unint64_t v19 = (void **)&v35;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
      if (v33)
      {
        float v34 = v33;
        operator delete(v33);
      }
      if (v31)
      {
        uint8x8_t v32 = v31;
        operator delete(v31);
      }
      if (v30 < 0) {
        operator delete(v29);
      }
      if (SHIBYTE(v26) < 0) {
        operator delete(__p[0]);
      }
      ++v16;
    }
    while (v16 != v17);
    uint64_t v16 = v22;
  }
  if (v16)
  {
    unint64_t v23 = v16;
    operator delete(v16);
  }
}

void sub_1BABF8394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::reference_wrapper<AMCP::Graph::Graph_Wire const> *>,std::__wrap_iter<std::reference_wrapper<AMCP::Graph::Graph_Wire const> *>,std::back_insert_iterator<std::vector<std::reference_wrapper<AMCP::Graph::Graph_Wire const>>>,0>(void *a1, void *a2, void **a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    long long v6 = (char *)a3[1];
    do
    {
      unint64_t v7 = (unint64_t)a3[2];
      if ((unint64_t)v6 >= v7)
      {
        uint64_t v8 = (v6 - (unsigned char *)*a3) >> 3;
        if ((unint64_t)(v8 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v9 = v7 - (void)*a3;
        uint64_t v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
          uint64_t v10 = v8 + 1;
        }
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v11);
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v13 = (char *)(v11 + 8 * v8);
        *(void *)uint64_t v13 = *v5;
        long long v6 = v13 + 8;
        uint64_t v15 = (char *)*a3;
        std::string::size_type v14 = (char *)a3[1];
        if (v14 != *a3)
        {
          do
          {
            uint64_t v16 = *((void *)v14 - 1);
            v14 -= 8;
            *((void *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          std::string::size_type v14 = (char *)*a3;
        }
        *a3 = v13;
        a3[1] = v6;
        a3[2] = (void *)(v11 + 8 * v12);
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(void *)long long v6 = *v5;
        v6 += 8;
      }
      a3[1] = v6;
      ++v5;
    }
    while (v5 != a2);
  }
}

void AMCP::Graph::Wire_Index::get_tgid_for_wire(AMCP::Graph::Wire_Index *this, const AMCP::Wire_Identifier *a2, unsigned __int8 **a3)
{
  long long v4 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>((void *)a2 + 5, a3);
  if (v4 && *((unsigned char *)v4 + 504))
  {
    AMCP::Graph::Graph_Wire::Connection::Connection(&v6, (const AMCP::Graph::Graph_Wire::Connection *)(v4 + 36));
    *(_OWORD *)this = *(_OWORD *)v9;
    uint64_t v5 = __p;
    *((void *)this + 2) = v10;
    v9[0] = 0;
    v9[1] = 0;
    uint64_t v10 = 0;
    if (v5)
    {
      uint64_t v15 = v5;
      operator delete(v5);
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    if (v11)
    {
      uint64_t v12 = v11;
      operator delete(v11);
    }
    if (SHIBYTE(v10) < 0) {
      operator delete(v9[0]);
    }
    if (v8 < 0) {
      operator delete(v7);
    }
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v6.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
  }
}

void *std::__tree<std::string>::find<std::string>(uint64_t a1, void *a2)
{
  long long v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    char v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0) {
      unint64_t v7 = v3;
    }
    else {
      unint64_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

void HALB_FormatList::~HALB_FormatList(HALB_FormatList *this)
{
  HALB_FormatList::~HALB_FormatList(this);

  JUMPOUT(0x1C1859840);
}

{
  void *v2;
  void *v3;

  *(void *)this = &unk_1F1464420;
  long long v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

void HALB_FormatList::GetFormatListWithUpdatedSampleRate(HALB_FormatList *this, const HALB_FormatList *a2, HALB_FormatList *a3, Float64 a4)
{
  if (this != a2)
  {
    uint64_t v14 = v7;
    uint64_t v15 = v6;
    uint64_t v16 = v4;
    uint64_t v17 = v5;
    unint64_t v11 = this;
    do
    {
      long long v12 = *((_OWORD *)v11 + 1);
      *(_OWORD *)&v13.mFormat.double mSampleRate = *(_OWORD *)v11;
      *(_OWORD *)&v13.mFormat.mBytesPerPacket = v12;
      *(void *)&v13.mFormat.mBitsPerChannel = *((void *)v11 + 4);
      v13.mFormat.double mSampleRate = a4;
      v13.mSampleRateRange.Float64 mMinimum = a4;
      v13.mSampleRateRange.Float64 mMaximum = a4;
      HALB_FormatList::AddPhysicalFormat(a3, &v13, (const AudioStreamRangedDescription *)a3);
      unint64_t v11 = (HALB_FormatList *)((char *)v11 + 56);
    }
    while (v11 != a2);
  }
}

void HALB_FormatList::AddPhysicalFormat(HALB_FormatList *this, const AudioStreamRangedDescription *a2, const AudioStreamRangedDescription *a3)
{
  uint64_t v6 = (CAStreamRangedDescription *)*((void *)this + 4);
  uint64_t v7 = (CAStreamRangedDescription *)*((void *)this + 5);
  uint64_t v5 = (void **)((char *)this + 32);
  long long v8 = *(_OWORD *)&a2->mFormat.mBytesPerPacket;
  *(_OWORD *)&v26.mFormat.double mSampleRate = *(_OWORD *)&a2->mFormat.mSampleRate;
  *(_OWORD *)&v26.mFormat.mBytesPerPacket = v8;
  *(_OWORD *)&v26.mFormat.mBitsPerChannel = *(_OWORD *)&a2->mFormat.mBitsPerChannel;
  v26.mSampleRateRange.Float64 mMaximum = a2->mSampleRateRange.mMaximum;
  if (v6 != v7)
  {
    uint64_t v9 = v6;
    while (!CAStreamRangedDescription::IsExactlyEqual(v9, &v26, a3))
    {
      uint64_t v9 = (CAStreamRangedDescription *)((char *)v9 + 56);
      if (v9 == v7) {
        goto LABEL_7;
      }
    }
    if (v9 != v7) {
      return;
    }
LABEL_7:
    if (v7 == v6)
    {
      uint64_t v6 = v7;
    }
    else
    {
      unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v7 - v6) >> 3);
      do
      {
        unint64_t v11 = (CAStreamRangedDescription *)((char *)v6 + 56 * (v10 >> 1));
        int v12 = CAStreamRangedDescription::Sorter(v11, a2, a3);
        if (v12) {
          v10 += ~(v10 >> 1);
        }
        else {
          v10 >>= 1;
        }
        if (v12) {
          uint64_t v6 = (CAStreamRangedDescription *)((char *)v11 + 56);
        }
      }
      while (v10);
    }
  }
  long long v13 = *(_OWORD *)&a2->mFormat.mBytesPerPacket;
  *(_OWORD *)&v25.mFormat.double mSampleRate = *(_OWORD *)&a2->mFormat.mSampleRate;
  *(_OWORD *)&v25.mFormat.mBytesPerPacket = v13;
  *(void *)&v25.mFormat.mBitsPerChannel = *(void *)&a2->mFormat.mBitsPerChannel;
  v25.mSampleRateRange = a2->mSampleRateRange;
  std::vector<CAStreamRangedDescription>::insert(v5, v6, (long long *)&v25);
  long long v15 = *(_OWORD *)&a2->mFormat.mBytesPerPacket;
  *(_OWORD *)&v25.mFormat.double mSampleRate = *(_OWORD *)&a2->mFormat.mSampleRate;
  *(_OWORD *)&v25.mFormat.mBytesPerPacket = v15;
  *(_OWORD *)&v25.mFormat.mBitsPerChannel = *(_OWORD *)&a2->mFormat.mBitsPerChannel;
  v25.mSampleRateRange.Float64 mMaximum = a2->mSampleRateRange.mMaximum;
  if (v25.mFormat.mFormatID == 1819304813 && (v25.mFormat.mFormatFlags & 0x40) == 0)
  {
    v25.mFormat.mFormatFlags = 9;
    v25.mFormat.mBytesPerPacket = 4 * v25.mFormat.mChannelsPerFrame;
    v25.mFormat.mFramesPerPacket = 1;
    v25.mFormat.mBytesPerFrame = 4 * v25.mFormat.mChannelsPerFrame;
    v25.mFormat.mBitsPerChannel = 32;
  }
  uint64_t v17 = (CAStreamRangedDescription *)*((void *)this + 1);
  std::string v18 = (CAStreamRangedDescription *)*((void *)this + 2);
  uint64_t v16 = (void **)((char *)this + 8);
  AudioStreamRangedDescription v24 = v25;
  if (v17 != v18)
  {
    unint64_t v19 = v17;
    while (!CAStreamRangedDescription::IsExactlyEqual(v19, &v24, v14))
    {
      unint64_t v19 = (CAStreamRangedDescription *)((char *)v19 + 56);
      if (v19 == v18) {
        goto LABEL_26;
      }
    }
    if (v19 != v18) {
      return;
    }
LABEL_26:
    if (v18 == v17)
    {
      uint64_t v17 = v18;
    }
    else
    {
      unint64_t v20 = 0x6DB6DB6DB6DB6DB7 * ((v18 - v17) >> 3);
      do
      {
        std::string v21 = (CAStreamRangedDescription *)((char *)v17 + 56 * (v20 >> 1));
        int v22 = CAStreamRangedDescription::Sorter(v21, &v25, v14);
        if (v22) {
          v20 += ~(v20 >> 1);
        }
        else {
          v20 >>= 1;
        }
        if (v22) {
          uint64_t v17 = (CAStreamRangedDescription *)((char *)v21 + 56);
        }
      }
      while (v20);
    }
  }
  AudioStreamRangedDescription v23 = v25;
  std::vector<CAStreamRangedDescription>::insert(v16, v17, (long long *)&v23);
}

BOOL CAStreamRangedDescription::IsExactlyEqual(CAStreamRangedDescription *this, const AudioStreamRangedDescription *a2, const AudioStreamRangedDescription *a3)
{
  if (*(double *)this != a2->mFormat.mSampleRate) {
    return 0;
  }
  if (*((_DWORD *)this + 2) != a2->mFormat.mFormatID) {
    return 0;
  }
  if (*((_DWORD *)this + 3) != a2->mFormat.mFormatFlags) {
    return 0;
  }
  if (*((_DWORD *)this + 4) != a2->mFormat.mBytesPerPacket) {
    return 0;
  }
  if (*((_DWORD *)this + 5) != a2->mFormat.mFramesPerPacket) {
    return 0;
  }
  if (*((_DWORD *)this + 6) != a2->mFormat.mBytesPerFrame) {
    return 0;
  }
  if (*((_DWORD *)this + 7) != a2->mFormat.mChannelsPerFrame) {
    return 0;
  }
  if (*((_DWORD *)this + 8) != a2->mFormat.mBitsPerChannel) {
    return 0;
  }
  double v3 = *((double *)this + 6);
  double mMinimum = a2->mSampleRateRange.mMinimum;
  if (v3 < mMinimum) {
    return 0;
  }
  double v5 = *((double *)this + 5);
  double mMaximum = a2->mSampleRateRange.mMaximum;
  if (v5 < mMinimum && v3 <= mMaximum) {
    return 0;
  }
  if (v5 < mMinimum && v3 > mMaximum) {
    return 0;
  }
  if (v3 == mMaximum) {
    return v5 == mMinimum;
  }
  return 0;
}

void std::vector<CAStreamRangedDescription>::insert(void **a1, unsigned char *a2, long long *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 / 56;
  uint64_t v9 = (uint64_t)*a1 + 56 * (v7 / 56);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 >= v10)
  {
    unint64_t v17 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - (void)v6) >> 3) + 1;
    if (v17 > 0x492492492492492) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v19 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v10 - (void)v6) >> 3);
    if (2 * v19 > v17) {
      unint64_t v17 = 2 * v19;
    }
    if (v19 >= 0x249249249249249) {
      unint64_t v20 = 0x492492492492492;
    }
    else {
      unint64_t v20 = v17;
    }
    if (v20)
    {
      int v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v20);
    }
    else
    {
      int v22 = 0;
      uint64_t v21 = 0;
    }
    AudioStreamRangedDescription v25 = &v22[56 * v8];
    AudioStreamRangedDescription v26 = &v22[56 * v21];
    if (v8 == v21)
    {
      if (v7 < 1)
      {
        if (v6 == a2) {
          unint64_t v35 = 1;
        }
        else {
          unint64_t v35 = 2 * v8;
        }
        BOOL v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v35);
        AudioStreamRangedDescription v25 = &v36[56 * (v35 >> 2)];
        AudioStreamRangedDescription v26 = &v36[56 * v37];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        uint64_t v27 = 0x6DB6DB6DB6DB6DB7 * ((56 * v8) >> 3);
        if (v27 >= -1) {
          uint64_t v28 = v27 + 1;
        }
        else {
          uint64_t v28 = v27 + 2;
        }
        v25 -= 56 * (v28 >> 1);
      }
    }
    long long v38 = *a3;
    long long v39 = a3[1];
    *((void *)v25 + 4) = *((void *)a3 + 4);
    *(_OWORD *)AudioStreamRangedDescription v25 = v38;
    *((_OWORD *)v25 + 1) = v39;
    *(_OWORD *)(v25 + 40) = *(long long *)((char *)a3 + 40);
    os_log_type_t v40 = v25 + 56;
    unint64_t v41 = *a1;
    if (*a1 == (void *)v9)
    {
      unint64_t v43 = v25;
    }
    else
    {
      uint64_t v42 = v9;
      do
      {
        unint64_t v43 = v25 - 56;
        long long v44 = *(_OWORD *)(v42 - 56);
        long long v45 = *(_OWORD *)(v42 - 40);
        *((void *)v25 - 3) = *(void *)(v42 - 24);
        *(_OWORD *)(v25 - 40) = v45;
        *(_OWORD *)(v25 - 56) = v44;
        *((_OWORD *)v25 - 1) = *(_OWORD *)(v42 - 16);
        v42 -= 56;
        v25 -= 56;
      }
      while ((void *)v42 != v41);
    }
    for (uint64_t i = a1[1]; (void *)v9 != i; v9 += 56)
    {
      long long v47 = *(_OWORD *)v9;
      long long v48 = *(_OWORD *)(v9 + 16);
      *((void *)v40 + 4) = *(void *)(v9 + 32);
      *(_OWORD *)os_log_type_t v40 = v47;
      *((_OWORD *)v40 + 1) = v48;
      *(_OWORD *)(v40 + 40) = *(_OWORD *)(v9 + 40);
      v40 += 56;
    }
    uint64_t v49 = *a1;
    *a1 = v43;
    a1[1] = v40;
    a1[2] = v26;
    if (v49)
    {
      operator delete(v49);
    }
  }
  else if (v9 == v5)
  {
    long long v23 = *a3;
    long long v24 = a3[1];
    *(void *)(v9 + 32) = *((void *)a3 + 4);
    *(_OWORD *)uint64_t v9 = v23;
    *(_OWORD *)(v9 + 16) = v24;
    *(_OWORD *)(v9 + 40) = *(long long *)((char *)a3 + 40);
    a1[1] = (void *)(v9 + 56);
  }
  else
  {
    uint64_t v11 = v9 + 56;
    unint64_t v12 = v5 - 56;
    if (v5 < 0x38)
    {
      uint64_t v14 = (char *)a1[1];
    }
    else
    {
      unint64_t v13 = v5 - 56;
      uint64_t v14 = (char *)a1[1];
      do
      {
        long long v15 = *(_OWORD *)v13;
        long long v16 = *(_OWORD *)(v13 + 16);
        *((void *)v14 + 4) = *(void *)(v13 + 32);
        *(_OWORD *)uint64_t v14 = v15;
        *((_OWORD *)v14 + 1) = v16;
        *(_OWORD *)(v14 + 40) = *(_OWORD *)(v13 + 40);
        v14 += 56;
        v13 += 56;
      }
      while (v13 < v5);
    }
    a1[1] = v14;
    if (v5 != v11)
    {
      uint64_t v29 = 8 * ((uint64_t)(v5 - v11) >> 3);
      uint64_t v30 = (uint64_t)&v6[56 * v8 - 16];
      do
      {
        long long v31 = *(_OWORD *)(v30 + v29 - 40);
        long long v32 = *(_OWORD *)(v30 + v29 - 24);
        *(void *)(v12 + 32) = *(void *)(v30 + v29 - 8);
        *(_OWORD *)unint64_t v12 = v31;
        *(_OWORD *)(v12 + 16) = v32;
        *(_OWORD *)(v12 + 40) = *(_OWORD *)(v30 + v29);
        v12 -= 56;
        v29 -= 56;
      }
      while (v29);
    }
    long long v33 = *a3;
    long long v34 = a3[1];
    *(void *)(v9 + 32) = *((void *)a3 + 4);
    *(_OWORD *)uint64_t v9 = v33;
    *(_OWORD *)(v9 + 16) = v34;
    *(_OWORD *)(v9 + 40) = *(long long *)((char *)a3 + 40);
  }
}

void sub_1BABF8E10(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL HALB_FormatList::IsVirtualFormatSupported(const AudioStreamBasicDescription *this, AudioStreamBasicDescription *a2, uint64_t a3)
{
  double v3 = (HALB_FormatList *)this;
  long long v4 = *(_OWORD *)(a3 + 16);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v4;
  uint64_t v10 = *(void *)(a3 + 32);
  int v11 = 3;
  if (this == a2)
  {
    unint64_t v5 = (HALB_FormatList *)this;
  }
  else
  {
    unint64_t v5 = (HALB_FormatList *)a2;
    double v6 = *(double *)v9;
    while (!CA::StreamDescription::IsEquivalent((CA::Implementation *)v9, (const AudioStreamBasicDescription *)v3, 3u)
         || *((double *)v3 + 5) > v6
         || *((double *)v3 + 6) < v6)
    {
      double v3 = (HALB_FormatList *)((char *)v3 + 56);
      if (v3 == v5)
      {
        double v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

BOOL CA::StreamDescription::IsEquivalent(CA::Implementation *a1, const AudioStreamBasicDescription *a2, unsigned int a3)
{
  double v3 = *(double *)a1;
  if (a3)
  {
    if (v3 != 0.0 && a2->mSampleRate != 0.0 && v3 != a2->mSampleRate) {
      return 0;
    }
    int v5 = *((_DWORD *)a1 + 2);
    if (v5)
    {
      AudioFormatID mFormatID = a2->mFormatID;
      if (mFormatID)
      {
        if (v5 != mFormatID) {
          return 0;
        }
      }
    }
    int v7 = *((_DWORD *)a1 + 4);
    if (v7)
    {
      UInt32 mBytesPerPacket = a2->mBytesPerPacket;
      if (mBytesPerPacket)
      {
        if (v7 != mBytesPerPacket) {
          return 0;
        }
      }
    }
    int v9 = *((_DWORD *)a1 + 5);
    if (v9)
    {
      UInt32 mFramesPerPacket = a2->mFramesPerPacket;
      if (mFramesPerPacket)
      {
        if (v9 != mFramesPerPacket) {
          return 0;
        }
      }
    }
    int v11 = *((_DWORD *)a1 + 6);
    if (v11)
    {
      UInt32 mBytesPerFrame = a2->mBytesPerFrame;
      if (mBytesPerFrame)
      {
        if (v11 != mBytesPerFrame) {
          return 0;
        }
      }
    }
    int v13 = *((_DWORD *)a1 + 7);
    if (v13)
    {
      UInt32 mChannelsPerFrame = a2->mChannelsPerFrame;
      if (mChannelsPerFrame)
      {
        if (v13 != mChannelsPerFrame) {
          return 0;
        }
      }
    }
    int v15 = *((_DWORD *)a1 + 8);
    if (!v15) {
      return CA::Implementation::EquivalentFormatFlags(a1, a2, (const AudioStreamBasicDescription *)((a3 >> 1) & 1), a3 & 1);
    }
    UInt32 mBitsPerChannel = a2->mBitsPerChannel;
    if (!mBitsPerChannel) {
      return CA::Implementation::EquivalentFormatFlags(a1, a2, (const AudioStreamBasicDescription *)((a3 >> 1) & 1), a3 & 1);
    }
  }
  else
  {
    if (v3 != a2->mSampleRate
      || *((_DWORD *)a1 + 2) != a2->mFormatID
      || *((_DWORD *)a1 + 4) != a2->mBytesPerPacket
      || *((_DWORD *)a1 + 5) != a2->mFramesPerPacket
      || *((_DWORD *)a1 + 7) != a2->mChannelsPerFrame)
    {
      return 0;
    }
    int v15 = *((_DWORD *)a1 + 8);
    UInt32 mBitsPerChannel = a2->mBitsPerChannel;
  }
  if (v15 != mBitsPerChannel) {
    return 0;
  }
  return CA::Implementation::EquivalentFormatFlags(a1, a2, (const AudioStreamBasicDescription *)((a3 >> 1) & 1), a3 & 1);
}

void HALB_FormatList::BestMatchForVirtualFormat(HALB_FormatList *this, const AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3, AudioStreamBasicDescription *a4, double mSampleRate)
{
  AudioFormatID mFormatID = a2->mFormatID;
  if (a2->mSampleRate != 0.0) {
    double mSampleRate = a2->mSampleRate;
  }
  int v7 = (long long *)*((void *)this + 1);
  uint64_t v8 = (long long *)*((void *)this + 2);
  double v21 = mSampleRate;
  AudioFormatID v22 = mFormatID;
  *(_OWORD *)long long v23 = *(_OWORD *)&a2->mFormatFlags;
  *(_OWORD *)&v23[12] = *(_OWORD *)&a2->mBytesPerFrame;
  int v24 = 3;
  if (v7 == v8) {
LABEL_19:
  }
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  int v11 = v7;
  while (1)
  {
    BOOL IsEquivalent = CA::StreamDescription::IsEquivalent((CA::Implementation *)&v21, (const AudioStreamBasicDescription *)v11, 3u);
    if (IsEquivalent && *((double *)v11 + 5) <= mSampleRate && *((double *)v11 + 6) >= mSampleRate) {
      break;
    }
    int v11 = (long long *)((char *)v11 + 56);
    if (v11 == v8) {
      goto LABEL_13;
    }
  }
  if (v11 != v8)
  {
    long long v19 = *v11;
    long long v20 = v11[1];
    *(void *)&a3->UInt32 mBitsPerChannel = *((void *)v11 + 4);
    *(_OWORD *)&a3->double mSampleRate = v19;
    *(_OWORD *)&a3->UInt32 mBytesPerPacket = v20;
    goto LABEL_24;
  }
LABEL_13:
  if (v7 == v8) {
    goto LABEL_19;
  }
  uint64_t v14 = v7;
  do
  {
    if (*((_DWORD *)v14 + 2) == mFormatID)
    {
      long long v17 = *v14;
      long long v18 = v14[1];
      *(void *)&a3->UInt32 mBitsPerChannel = *((void *)v14 + 4);
      *(_OWORD *)&a3->double mSampleRate = v17;
      *(_OWORD *)&a3->UInt32 mBytesPerPacket = v18;
      goto LABEL_21;
    }
    uint64_t v14 = (long long *)((char *)v14 + 56);
  }
  while (v14 != v8);
  if (v8 == v7) {
    goto LABEL_19;
  }
  long long v15 = *v7;
  long long v16 = v7[1];
  *(void *)&a3->UInt32 mBitsPerChannel = *((void *)v7 + 4);
  *(_OWORD *)&a3->double mSampleRate = v15;
  *(_OWORD *)&a3->UInt32 mBytesPerPacket = v16;
  uint64_t v14 = (long long *)*((void *)this + 1);
  if (*((long long **)this + 2) == v14) {
    goto LABEL_19;
  }
LABEL_21:
  double mSampleRate = HALB_FormatList::GetCommonSampleRateInRangeByIndex((HALB_FormatList *)IsEquivalent, *((double *)v14 + 5), *((double *)v14 + 6));
LABEL_24:
  a3->double mSampleRate = mSampleRate;
}

double HALB_FormatList::GetCommonSampleRateInRangeByIndex(HALB_FormatList *this, double a2, double a3)
{
  uint64_t v3 = 0;
  while (HALB_FormatList::sCommonSampleRates[v3] < a2)
  {
    if (++v3 == 15)
    {
      LODWORD(v4) = 15;
      goto LABEL_11;
    }
  }
  if (v3 > 0xE)
  {
    LODWORD(v4) = v3;
  }
  else
  {
    uint64_t v4 = v3;
    do
    {
      if (HALB_FormatList::sCommonSampleRates[v4] >= a3) {
        break;
      }
      ++v4;
    }
    while (v4 != 15);
  }
LABEL_11:
  unint64_t v5 = 0;
  do
  {
    double v6 = HALB_FormatList::sCommonSampleRates[v5];
    if (v5 > 0xD) {
      break;
    }
    ++v5;
  }
  while (v6 != a2);
  int v7 = v4 - v3;
  if (v6 == a2) {
    goto LABEL_19;
  }
  unint64_t v8 = 0;
  do
  {
    double v9 = HALB_FormatList::sCommonSampleRates[v8];
    if (v8 > 0xD) {
      break;
    }
    ++v8;
  }
  while (v9 != a3);
  if (v9 == a3) {
LABEL_19:
  }
    ++v7;
  if (v7) {
    return HALB_FormatList::sCommonSampleRates[v3];
  }
  else {
    return 0.0;
  }
}

uint64_t HALB_FormatList::GetVirtualFormats(uint64_t this, char a2, unint64_t a3, unint64_t *a4, AudioStreamRangedDescription *a5)
{
  *a4 = 0;
  if (a3)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    uint64_t v7 = -1;
    do
    {
      uint64_t v8 = *(void *)(this + 8);
      if (++v7 >= (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((*(void *)(this + 16) - v8) >> 3))) {
        break;
      }
      double v9 = (Float64 *)(v8 + v5);
      uint64_t v10 = &a5[v6];
      long long v11 = *(_OWORD *)v9;
      long long v12 = *((_OWORD *)v9 + 1);
      long long v13 = *((_OWORD *)v9 + 2);
      v10->mSampleRateRange.double mMaximum = v9[6];
      *(_OWORD *)&v10->mFormat.UInt32 mBytesPerPacket = v12;
      *(_OWORD *)&v10->mFormat.UInt32 mBitsPerChannel = v13;
      *(_OWORD *)&v10->mFormat.double mSampleRate = v11;
      uint64_t v14 = *a4;
      if ((a2 & 1) == 0) {
        a5[v14].mFormat.mFormatFlags |= 2u;
      }
      v5 += 56;
      unint64_t v6 = v14 + 1;
      *a4 = v6;
    }
    while (v6 < a3);
  }
  return this;
}

uint64_t HALB_FormatList::GetVirtualFormats(uint64_t this, char a2, unint64_t a3, unint64_t *a4, AudioStreamBasicDescription *a5)
{
  *a4 = 0;
  if (a3)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    uint64_t v7 = *(void *)(this + 8);
    uint64_t v8 = *(void *)(this + 16);
    unint64_t v9 = -1;
    do
    {
      if (++v9 >= 0x6DB6DB6DB6DB6DB7 * ((v8 - v7) >> 3)) {
        break;
      }
      uint64_t v10 = (long long *)(v7 + v5);
      long long v11 = &a5[v6];
      long long v12 = *v10;
      long long v13 = v10[1];
      *(void *)&v11->UInt32 mBitsPerChannel = *((void *)v10 + 4);
      *(_OWORD *)&v11->double mSampleRate = v12;
      *(_OWORD *)&v11->UInt32 mBytesPerPacket = v13;
      uint64_t v7 = *(void *)(this + 8);
      uint64_t v8 = *(void *)(this + 16);
      if (0x6DB6DB6DB6DB6DB7 * ((v8 - v7) >> 3) <= v9) {
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      }
      double v14 = *(double *)(v7 + v5 + 40);
      if (v14 != *(double *)(v7 + v5 + 48)) {
        double v14 = 0.0;
      }
      uint64_t v15 = *a4;
      a5[*a4].double mSampleRate = v14;
      if ((a2 & 1) == 0) {
        a5[v15].mFormatFlags |= 2u;
      }
      v5 += 56;
      unint64_t v6 = v15 + 1;
      *a4 = v6;
    }
    while (v6 < a3);
  }
  return this;
}

void HALB_FormatList::BestMatchForPhysicalFormat(HALB_FormatList *this, const AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3, AudioStreamBasicDescription *a4, double mSampleRate)
{
  AudioFormatID mFormatID = a2->mFormatID;
  if (a2->mSampleRate != 0.0) {
    double mSampleRate = a2->mSampleRate;
  }
  uint64_t v7 = (long long *)*((void *)this + 4);
  uint64_t v8 = (long long *)*((void *)this + 5);
  double v21 = mSampleRate;
  AudioFormatID v22 = mFormatID;
  *(_OWORD *)long long v23 = *(_OWORD *)&a2->mFormatFlags;
  *(_OWORD *)&v23[12] = *(_OWORD *)&a2->mBytesPerFrame;
  int v24 = 3;
  if (v7 == v8) {
LABEL_19:
  }
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  long long v11 = v7;
  while (1)
  {
    BOOL IsEquivalent = CA::StreamDescription::IsEquivalent((CA::Implementation *)&v21, (const AudioStreamBasicDescription *)v11, 3u);
    if (IsEquivalent && *((double *)v11 + 5) <= mSampleRate && *((double *)v11 + 6) >= mSampleRate) {
      break;
    }
    long long v11 = (long long *)((char *)v11 + 56);
    if (v11 == v8) {
      goto LABEL_13;
    }
  }
  if (v11 != v8)
  {
    long long v19 = *v11;
    long long v20 = v11[1];
    *(void *)&a3->UInt32 mBitsPerChannel = *((void *)v11 + 4);
    *(_OWORD *)&a3->double mSampleRate = v19;
    *(_OWORD *)&a3->UInt32 mBytesPerPacket = v20;
    goto LABEL_24;
  }
LABEL_13:
  if (v7 == v8) {
    goto LABEL_19;
  }
  double v14 = v7;
  do
  {
    if (*((_DWORD *)v14 + 2) == mFormatID)
    {
      long long v17 = *v14;
      long long v18 = v14[1];
      *(void *)&a3->UInt32 mBitsPerChannel = *((void *)v14 + 4);
      *(_OWORD *)&a3->double mSampleRate = v17;
      *(_OWORD *)&a3->UInt32 mBytesPerPacket = v18;
      goto LABEL_21;
    }
    double v14 = (long long *)((char *)v14 + 56);
  }
  while (v14 != v8);
  if (v8 == v7) {
    goto LABEL_19;
  }
  long long v15 = *v7;
  long long v16 = v7[1];
  *(void *)&a3->UInt32 mBitsPerChannel = *((void *)v7 + 4);
  *(_OWORD *)&a3->double mSampleRate = v15;
  *(_OWORD *)&a3->UInt32 mBytesPerPacket = v16;
  double v14 = (long long *)*((void *)this + 4);
  if (*((long long **)this + 5) == v14) {
    goto LABEL_19;
  }
LABEL_21:
  double mSampleRate = HALB_FormatList::GetCommonSampleRateInRangeByIndex((HALB_FormatList *)IsEquivalent, *((double *)v14 + 5), *((double *)v14 + 6));
LABEL_24:
  a3->double mSampleRate = mSampleRate;
}

uint64_t HALB_FormatList::GetPhysicalFormats(uint64_t this, unint64_t a2, unint64_t *a3, AudioStreamBasicDescription *a4)
{
  *a3 = 0;
  if (a2)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = *(void *)(this + 32);
    uint64_t v7 = *(void *)(this + 40);
    unint64_t v8 = -1;
    do
    {
      if (++v8 >= 0x6DB6DB6DB6DB6DB7 * ((v7 - v6) >> 3)) {
        break;
      }
      unint64_t v9 = (long long *)(v6 + v4);
      uint64_t v10 = &a4[v5];
      long long v11 = *v9;
      long long v12 = v9[1];
      *(void *)&v10->UInt32 mBitsPerChannel = *((void *)v9 + 4);
      *(_OWORD *)&v10->double mSampleRate = v11;
      *(_OWORD *)&v10->UInt32 mBytesPerPacket = v12;
      uint64_t v6 = *(void *)(this + 32);
      uint64_t v7 = *(void *)(this + 40);
      if (0x6DB6DB6DB6DB6DB7 * ((v7 - v6) >> 3) <= v8) {
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v13 = v6 + v4;
      v4 += 56;
      double v14 = *(double *)(v13 + 40);
      if (v14 != *(double *)(v13 + 48)) {
        double v14 = 0.0;
      }
      uint64_t v15 = *a3;
      a4[*a3].double mSampleRate = v14;
      unint64_t v5 = v15 + 1;
      *a3 = v5;
    }
    while (v5 < a2);
  }
  return this;
}

void sub_1BABF9888(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BABF9908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0::operator() const(NSString *,NSXPCConnection *)::{lambda(void)#1},std::default_delete<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0::operator() const(NSString *,NSXPCConnection *)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100]((id **)va);
  _Unwind_Resume(a1);
}

void sub_1BABF99B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  long long v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1BABF9A9C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1BABF9B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1BABF9CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1BABF9EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_32c77_ZTSKZ64__Core_Audio_Driver_Service_Client_load_driver_driver_endpoint__E3__6(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

void __destroy_helper_block_ea8_32c77_ZTSKZ64__Core_Audio_Driver_Service_Client_load_driver_driver_endpoint__E3__5(uint64_t a1)
{
}

id __copy_helper_block_ea8_32c77_ZTSKZ64__Core_Audio_Driver_Service_Client_load_driver_driver_endpoint__E3__5(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  id result = v3;
  *(void *)(a1 + 40) = result;
  return result;
}

void ___ZN10applesauce8dispatch2v19sync_implIZ56__Core_Audio_Driver_Service_Client_get_lazy_connection__E3__4EEvPU28objcproto17OS_dispatch_queue8NSObjectOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  long long v2 = objc_msgSend(*(id *)v1, "connection_to_driver_service");

  if (!v2)
  {
    id v3 = *(id *)v1;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
    uint64_t v5 = *(void *)(v1 + 8);
    uint64_t v6 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    objc_msgSend(v3, "connect_to_driver_service:", &v5);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1BABFA0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BABFA32C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BABFA388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  JUMPOUT(0x1BABFA380);
}

void ___ZZ62__Core_Audio_Driver_Service_Client_connect_to_driver_service__ENK3__2cvU13block_pointerFvvEEv_block_invoke(uint64_t a1)
{
  NSLog(&cfstr_ConnectionToDr.isa);
  long long v2 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(v2, "driver_service_undertaker");
    uint64_t v3 = v7;
    if (v7)
    {
      uint64_t v4 = *(void **)(a1 + 32);
      if (v4)
      {
        [v4 queue];
        uint64_t v3 = v7;
      }
      else
      {
        unint64_t v9 = 0;
      }
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v5 = *(void **)(a1 + 32);
      if (v5) {
        objc_msgSend(v5, "driver_file", v3, v8);
      }
      id v6 = v9;
      operator new();
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1BABFA53C(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::__shared_weak_count *a8, uint64_t a9, ...)
{
  va_start(va, a9);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)va);
  if (a8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a8);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZZ62__Core_Audio_Driver_Service_Client_connect_to_driver_service__ENK3__3cvU13block_pointerFvvEEv_block_invoke(uint64_t a1)
{
  NSLog(&cfstr_ConnectionToDr_0.isa);
  long long v2 = *(void **)(a1 + 32);

  return [v2 invalidate];
}

void __destroy_helper_block_ea8_32c75_ZTSKZ62__Core_Audio_Driver_Service_Client_connect_to_driver_service__E3__3(uint64_t a1)
{
}

id __copy_helper_block_ea8_32c75_ZTSKZ62__Core_Audio_Driver_Service_Client_connect_to_driver_service__E3__3(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_ea8_32c75_ZTSKZ62__Core_Audio_Driver_Service_Client_connect_to_driver_service__E3__2(uint64_t a1)
{
}

id __copy_helper_block_ea8_32c75_ZTSKZ62__Core_Audio_Driver_Service_Client_connect_to_driver_service__E3__2(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  return result;
}

void sub_1BABFA720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::unique_ptr<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1},std::default_delete<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_1BABFA858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c80_ZTSKZ67__Core_Audio_Driver_Service_Client_send_endpoint_to_driver_service_E3__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c80_ZTSKZ67__Core_Audio_Driver_Service_Client_send_endpoint_to_driver_service_E3__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_1BABFA954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BABFAA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)Core_Audio_Driver_Service_Client;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1BABFAA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1BABFABCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BABFAD5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BABFADE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c70_ZTSKZ57__Core_Audio_Driver_Service_Client_get_driver_name_list__E3__8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void AMCP::Portal::IPC::IO_Sender::~IO_Sender(AMCP::Portal::IPC::IO_Sender *this)
{
  AMCP::Portal::IPC::IO_Sender::~IO_Sender(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1F1464640;
  long long v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    MEMORY[0x1C1859840](v2, 0x1020C401EC519C5);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

BOOL caulk::ipc::synchronous_messenger::semaphore_sender::is_valid(caulk::ipc::synchronous_messenger::semaphore_sender *this)
{
  return *(void *)this
      && *((void *)this + 1)
      && *((void *)this + 3)
      && *((void *)this + 4)
      && *((_DWORD *)this + 12)
      && *((_DWORD *)this + 14) != 0;
}

uint64_t std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::semaphore_sender>::__on_zero_shared(uint64_t a1)
{
  long long v2 = (caulk::ipc::mapped_memory *)(a1 + 24);
  MEMORY[0x1C1858E50](a1 + 80);
  MEMORY[0x1C1858E50](a1 + 72);
  caulk::ipc::mapped_memory::reset((caulk::ipc::mapped_memory *)(a1 + 48));

  return caulk::ipc::mapped_memory::reset(v2);
}

void std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::semaphore_sender>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14646C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::semaphore_sender>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14646C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::eventlink_sender>::__on_zero_shared(caulk::mach::details **a1, void *a2)
{
  uint64_t v3 = (caulk::ipc::mapped_memory *)(a1 + 3);
  caulk::mach::details::release_os_object(a1[9], a2);
  caulk::ipc::mapped_memory::reset((caulk::ipc::mapped_memory *)(a1 + 6));

  return caulk::ipc::mapped_memory::reset(v3);
}

void std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::eventlink_sender>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1464670;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<caulk::ipc::synchronous_messenger::eventlink_sender>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1464670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(uint64_t a1, const BOOL *a2, _OWORD *a3, double *a4)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 1768911973;
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a1 + 65));
  if (v5) {
    return v4;
  }
  if (AMCP::Feature_Flags::access_event_link_oop_io(0, a2))
  {
    uint64_t v10 = *(AMCP::Log::Scope_Registry **)(a1 + 8);
    if (!*(void *)v10 || (unint64_t v11 = *((void *)v10 + 1)) == 0)
    {
      AMCP::Log::Scope_Registry::get(v10);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      long long v12 = **(NSObject ***)buf;
      if (*(void *)v79) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v79);
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = pthread_self();
        mach_port_t v14 = pthread_mach_thread_np(v13);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v14;
        *(_WORD *)int v79 = 2080;
        *(void *)&v79[2] = "IO_Sender.cpp";
        __int16 v80 = 1024;
        int v81 = 157;
        __int16 v82 = 2080;
        *(void *)uint64_t v83 = "payload_data.empty()";
        _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to get io sender payload", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v77);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v70, "Failed to get io sender payload");
      std::runtime_error::runtime_error(&v71, &v70);
      uint64_t v73 = 0;
      uint64_t v74 = 0;
      uint64_t v75 = 0;
      int v76 = -1;
      v71.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      int v72 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v71);
      *(void *)&v83[6] = "OSStatus AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(const sender_data_t &, rec"
                           "eiver_data_t &, const double &)";
      long long v84 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Server/IO_Sender.cpp";
      int v85 = 157;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v65);
      uint64_t v67 = &unk_1F148AA90;
      long long v68 = v65;
      uint64_t v69 = v66;
      long long v65 = 0uLL;
      uint64_t v66 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
  }
  else
  {
    uint64_t v10 = *(AMCP::Log::Scope_Registry **)(a1 + 24);
    if (!*(void *)v10 || (unint64_t v11 = *((void *)v10 + 1)) == 0)
    {
LABEL_65:
      AMCP::Log::Scope_Registry::get(v10);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v62 = **(NSObject ***)buf;
      if (*(void *)v79) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v79);
      }
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        uint64_t v63 = pthread_self();
        mach_port_t v64 = pthread_mach_thread_np(v63);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v64;
        *(_WORD *)int v79 = 2080;
        *(void *)&v79[2] = "IO_Sender.cpp";
        __int16 v80 = 1024;
        int v81 = 163;
        __int16 v82 = 2080;
        *(void *)uint64_t v83 = "payload_data.empty()";
        _os_log_error_impl(&dword_1BAA78000, v62, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to get io sender payload", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v77);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v70, "Failed to get io sender payload");
      std::runtime_error::runtime_error(&v71, &v70);
      uint64_t v73 = 0;
      uint64_t v74 = 0;
      uint64_t v75 = 0;
      int v76 = -1;
      v71.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      int v72 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v71);
      *(void *)&v83[6] = "OSStatus AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(const sender_data_t &, rec"
                           "eiver_data_t &, const double &)";
      long long v84 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Server/IO_Sender.cpp";
      int v85 = 163;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v65);
      uint64_t v67 = &unk_1F148AA90;
      long long v68 = v65;
      uint64_t v69 = v66;
      long long v65 = 0uLL;
      uint64_t v66 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
  }
  if (v11 <= 0x13F)
  {
    _os_assert_log();
    uint64_t v10 = (AMCP::Log::Scope_Registry *)_os_crash();
    __break(1u);
    goto LABEL_65;
  }
  uint64_t raw_ptr = caulk::ipc::mapped_memory::get_raw_ptr(v10);
  memcpy((void *)raw_ptr, a2, 0x110uLL);
  if (*(void *)a2 == 6)
  {
    int v17 = *((_DWORD *)a2 + 2);
    if (v17 == 1919513701 || v17 == 1919246692 || v17 == 1835628655) {
      kdebug_trace();
    }
  }
  uint64_t v19 = 0;
  if (AMCP::Feature_Flags::access_collect_io_perfdata(0, v16)) {
    uint64_t v19 = mach_absolute_time();
  }
  int v20 = AMCP::Feature_Flags::access_event_link_oop_io(0, v18);
  double v21 = *a4;
  if (v20) {
    AudioFormatID v22 = (AMCP::Log::Scope_Registry *)caulk::ipc::synchronous_messenger::eventlink_sender::send(*(caulk::ipc::synchronous_messenger::eventlink_sender **)(a1 + 8), v21);
  }
  else {
    AudioFormatID v22 = (AMCP::Log::Scope_Registry *)caulk::ipc::synchronous_messenger::semaphore_sender::send(*(caulk::ipc::synchronous_messenger::semaphore_sender **)(a1 + 24), v21);
  }
  int v24 = v22;
  if (*(void *)a2 == 6)
  {
    int v25 = *((_DWORD *)a2 + 2);
    if (v25 == 1919513701 || v25 == 1919246692 || v25 == 1835628655) {
      AudioFormatID v22 = (AMCP::Log::Scope_Registry *)kdebug_trace();
    }
  }
  if (((unint64_t)v24 & 0xFF00000000) == 0 || !(_BYTE)v24)
  {
    AMCP::Log::Scope_Registry::get(v22);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    AudioStreamRangedDescription v26 = *(caulk::concurrent::messenger **)(*(void *)buf + 8);
    uint64_t v27 = pthread_self();
    mach_port_t v28 = pthread_mach_thread_np(v27);
    uint64_t v29 = (void *)MEMORY[0x1E4FB7E90];
    uint64_t v30 = *(void *)a2;
    uint64_t v31 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
    *(_DWORD *)(v31 + 16) = 0;
    *(unsigned char *)(v31 + 20) = 16;
    *(_DWORD *)(v31 + 24) = v28;
    *(void *)(v31 + 32) = "IO_Sender.cpp";
    *(_DWORD *)(v31 + 40) = 188;
    *(void *)(v31 + 4_Block_object_dispose(&a9, 8) = v30;
    *(void *)uint64_t v31 = &unk_1F1464710;
    *(void *)(v31 + _Block_object_dispose(&a9, 8) = 0;
    caulk::concurrent::messenger::enqueue(v26, (caulk::concurrent::message *)v31);
    BOOL is_valid = *(AMCP::Log::Scope_Registry **)v79;
    if (*(void *)v79) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v79);
    }
    unsigned int v33 = 0;
    while (1)
    {
      unsigned __int8 v34 = atomic_load((unsigned __int8 *)(a1 + 65));
      if (v34)
      {
        AMCP::Log::Scope_Registry::get(is_valid);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        long long v39 = *(caulk::concurrent::messenger **)(*(void *)buf + 8);
        os_log_type_t v40 = pthread_self();
        mach_port_t v41 = pthread_mach_thread_np(v40);
        uint64_t v42 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v29 + 16))(*v29, 48, 8);
        *(_DWORD *)(v42 + 16) = 0;
        *(unsigned char *)(v42 + 20) = 2;
        *(_DWORD *)(v42 + 24) = v41;
        *(void *)(v42 + 32) = "IO_Sender.cpp";
        *(_DWORD *)(v42 + 40) = 200;
        *(void *)uint64_t v42 = &unk_1F1464768;
        *(void *)(v42 + _Block_object_dispose(&a9, 8) = 0;
        caulk::concurrent::messenger::enqueue(v39, (caulk::concurrent::message *)v42);
        goto LABEL_51;
      }
      if (AMCP::Feature_Flags::access_event_link_oop_io(0, v23))
      {
        uint64_t v35 = caulk::ipc::synchronous_messenger::eventlink_sender::resynch(*(caulk::ipc::synchronous_messenger::eventlink_sender **)(a1 + 8), 1.0);
        BOOL v36 = *(void **)(a1 + 8);
        if (*v36 && v36[1] && v36[3] && v36[4]) {
          BOOL is_valid = (AMCP::Log::Scope_Registry *)(v36[6] != 0);
        }
        else {
          BOOL is_valid = 0;
        }
      }
      else
      {
        uint64_t v35 = caulk::ipc::synchronous_messenger::semaphore_sender::resynch(*(caulk::ipc::synchronous_messenger::semaphore_sender **)(a1 + 24), 1.0);
        BOOL is_valid = (AMCP::Log::Scope_Registry *)caulk::ipc::synchronous_messenger::semaphore_sender::is_valid(*(caulk::ipc::synchronous_messenger::semaphore_sender **)(a1 + 24));
      }
      if ((v35 & 0xFF00000000) == 0)
      {
        AMCP::Log::Scope_Registry::get(is_valid);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        size_t v59 = **(NSObject ***)buf;
        if (*(void *)v79) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v79);
        }
        if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
        {
          uint64_t v60 = pthread_self();
          mach_port_t v61 = pthread_mach_thread_np(v60);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v61;
          *(_WORD *)int v79 = 2080;
          *(void *)&v79[2] = "IO_Sender.cpp";
          __int16 v80 = 1024;
          int v81 = 215;
          __int16 v82 = 2080;
          *(void *)uint64_t v83 = "resynch_result.has_value() != true";
          _os_log_error_impl(&dword_1BAA78000, v59, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to resynch io sender/receiver after message failed to send", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v77);
        __cxa_allocate_exception(0x40uLL);
        std::runtime_error::runtime_error(&v70, "Failed to resynch io sender/receiver after message failed to send");
        std::runtime_error::runtime_error(&v71, &v70);
        uint64_t v73 = 0;
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        int v76 = -1;
        v71.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        int v72 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v71);
        *(void *)&v83[6] = "OSStatus AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(const sender_data_t &, r"
                             "eceiver_data_t &, const double &)";
        long long v84 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Server/IO_Sender.cpp";
        int v85 = 215;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v65);
        uint64_t v67 = &unk_1F148AA90;
        long long v68 = v65;
        uint64_t v69 = v66;
        long long v65 = 0uLL;
        uint64_t v66 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      if ((_BYTE)v35) {
        break;
      }
      if (v33++ >= 4) {
        char v38 = 0;
      }
      else {
        char v38 = (char)is_valid;
      }
      if ((v38 & 1) == 0) {
        goto LABEL_53;
      }
    }
    AMCP::Log::Scope_Registry::get(is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v43 = *(caulk::concurrent::messenger **)(*(void *)buf + 8);
    long long v44 = pthread_self();
    mach_port_t v45 = pthread_mach_thread_np(v44);
    uint64_t v46 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v29 + 16))(*v29, 48, 8);
    *(_DWORD *)(v46 + 16) = 0;
    *(unsigned char *)(v46 + 20) = 16;
    *(_DWORD *)(v46 + 24) = v45;
    *(void *)(v46 + 32) = "IO_Sender.cpp";
    *(_DWORD *)(v46 + 40) = 218;
    *(void *)uint64_t v46 = &unk_1F14647C0;
    *(void *)(v46 + _Block_object_dispose(&a9, 8) = 0;
    caulk::concurrent::messenger::enqueue(v43, (caulk::concurrent::message *)v46);
LABEL_51:
    if (*(void *)v79) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v79);
    }
  }
LABEL_53:
  long long v47 = *(_OWORD *)(raw_ptr + 272);
  long long v48 = *(_OWORD *)(raw_ptr + 304);
  a3[1] = *(_OWORD *)(raw_ptr + 288);
  a3[2] = v48;
  *a3 = v47;
  uint64_t v4 = *(unsigned int *)(raw_ptr + 272);
  if (AMCP::Feature_Flags::access_collect_io_perfdata(0, v23))
  {
    if (*(void *)a2 == 6)
    {
      unint64_t v49 = *(void *)(raw_ptr + 312);
      uint64_t v50 = v49 - v19;
      if (v49 > v19)
      {
        uint64_t v51 = *(void *)(a1 + 40);
        int v52 = *(_DWORD *)(raw_ptr + 240);
        __int16 v53 = (unint64_t *)(v51 + 16);
        unint64_t v54 = atomic_load((unint64_t *)(v51 + 16));
        if (v54 <= 0xFFF)
        {
          double v55 = (double)v50 * 0.0000000416666667;
          unint64_t v56 = atomic_load(v53);
          *(double *)(v51 + 8 * v56 + 24) = v55;
          unint64_t v57 = atomic_load(v53);
          *(_DWORD *)(v51 + 4 * v57 + 32792) = v52;
          atomic_fetch_add((atomic_ullong *volatile)v53, 1uLL);
        }
      }
    }
  }
  return v4;
}

void sub_1BABFBB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BABFB780);
  }
  _Unwind_Resume(a1);
}

void sub_1BABFBC90()
{
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(AMCP::Portal::IPC::sender_data_t const&,AMCP::Portal::IPC::receiver_data_t &,double const&)::$_2,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  long long v2 = *v8;
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    LODWORD(v_Block_object_dispose(&a9, 8) = 67109634;
    HIDWORD(v_Block_object_dispose(&a9, 8) = v4;
    *(_WORD *)unint64_t v9 = 2080;
    *(void *)&_OWORD v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Successfully resynched io sender/receiver", (uint8_t *)&v8, 0x18u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BABFBDD0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(AMCP::Portal::IPC::sender_data_t const&,AMCP::Portal::IPC::receiver_data_t &,double const&)::$_2,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(AMCP::Portal::IPC::sender_data_t const&,AMCP::Portal::IPC::receiver_data_t &,double const&)::$_1,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  long long v2 = *v8;
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    LODWORD(v_Block_object_dispose(&a9, 8) = 67109634;
    HIDWORD(v_Block_object_dispose(&a9, 8) = v4;
    *(_WORD *)unint64_t v9 = 2080;
    *(void *)&_OWORD v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Connection was invalidated, cannot resynch!", (uint8_t *)&v8, 0x18u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BABFBF50(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(AMCP::Portal::IPC::sender_data_t const&,AMCP::Portal::IPC::receiver_data_t &,double const&)::$_1,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(AMCP::Portal::IPC::sender_data_t const&,AMCP::Portal::IPC::receiver_data_t &,double const&)::$_0,std::tuple<unsigned int,char const*,int,unsigned long long>>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  long long v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v4;
    *(_WORD *)__int16 v10 = 2080;
    *(void *)&void v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 2048;
    uint64_t v14 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to send io sender message id %llu, need to resynch", (uint8_t *)&v9, 0x22u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BABFC0E0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(AMCP::Portal::IPC::sender_data_t const&,AMCP::Portal::IPC::receiver_data_t &,double const&)::$_0,std::tuple<unsigned int,char const*,int,unsigned long long>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::ipc::mapped_memory::get_raw_ptr(caulk::ipc::mapped_memory *this)
{
  if (*((void *)this + 1)) {
    return *(void *)this;
  }
  _os_assert_log();
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t AMCP::Portal::IPC::IO_Sender::will_do_io_operation(AMCP::Portal::IPC::IO_Sender *this, AudioServerPlugInIOOperation a2, BOOL *a3, BOOL *a4)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)this + 65);
  if (v4) {
    return 1768911973;
  }
  uint64_t v14 = 0;
  int v15 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v12 = 4;
  AudioServerPlugInIOOperation v13 = a2;
  *(void *)((char *)&v29 + 4) = *((void *)this + 6);
  *((void *)&v8 + 1) = 0;
  uint64_t v9 = 0;
  __int16 v11 = 0;
  uint64_t v10 = 0;
  uint64_t result = AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message((uint64_t)this, (const BOOL *)&v12, &v8, &AMCP::Portal::IPC::k_default_timeout);
  *a3 = (_BYTE)v11 != 0;
  *a4 = HIBYTE(v11) != 0;
  return result;
}

void sub_1BABFC22C(void *a1)
{
  __cxa_begin_catch(a1);
  unsigned char *v2 = 0;
  unsigned char *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BABFC218);
}

uint64_t AMCP::Portal::IPC::IO_Sender::begin_io_operation(AMCP::Portal::IPC::IO_Sender *this, int a2, AMCP::Portal::IPC::IO_Sender *a3, const AudioServerPlugInIOCycleInfo *a4)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)this + 65);
  if (v4) {
    return 1768911973;
  }
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v10 = 5;
  int v11 = a2;
  AMCP::Portal::IPC::IO_Sender::translate_to_driver_IO_cycle_info(a3, &v12, (AudioServerPlugInIOCycleInfo *)a3);
  double v6 = *((double *)this + 7);
  uint64_t v14 = *((void *)this + 6);
  int v15 = 0;
  int v13 = 0;
  double v8 = 0.0 / v6;
  return AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message((uint64_t)this, (const BOOL *)&v10, &v9, &v8);
}

void sub_1BABFC2DC(void *a1)
{
}

Float64 AMCP::Portal::IPC::IO_Sender::translate_to_driver_IO_cycle_info(AMCP::Portal::IPC::IO_Sender *this, const AudioServerPlugInIOCycleInfo *a2, AudioServerPlugInIOCycleInfo *a3)
{
  a2->mIOCycleCounter = *(void *)this;
  a2->mNominalIOBufferFrameSize = *((_DWORD *)this + 2);
  a2->mCurrentTime.mSampleTime = *((Float64 *)this + 2);
  a2->mCurrentTime.mHostTime = *((void *)this + 3);
  a2->mCurrentTime.mRateScalar = *((Float64 *)this + 4);
  a2->mCurrentTime.mWordClockTime = *((void *)this + 5);
  long long v3 = *((_OWORD *)this + 3);
  *(void *)&a2->mCurrentTime.mSMPTETime.mHours = *((void *)this + 8);
  *(_OWORD *)&a2->mCurrentTime.mSMPTETime.mSubframes = v3;
  a2->mCurrentTime.mFlags = *((_DWORD *)this + 18);
  a2->mInputTime.mSampleTime = *((Float64 *)this + 10);
  a2->mInputTime.mHostTime = *((void *)this + 11);
  a2->mInputTime.mRateScalar = *((Float64 *)this + 12);
  a2->mInputTime.mWordClockTime = *((void *)this + 13);
  long long v4 = *((_OWORD *)this + 7);
  *(void *)&a2->mInputTime.mSMPTETime.mHours = *((void *)this + 16);
  *(_OWORD *)&a2->mInputTime.mSMPTETime.mSubframes = v4;
  a2->mInputTime.mFlags = *((_DWORD *)this + 34);
  a2->mOutputTime.mSampleTime = *((Float64 *)this + 18);
  a2->mOutputTime.mHostTime = *((void *)this + 19);
  a2->mOutputTime.mRateScalar = *((Float64 *)this + 20);
  a2->mOutputTime.mWordClockTime = *((void *)this + 21);
  long long v5 = *((_OWORD *)this + 11);
  *(void *)&a2->mOutputTime.mSMPTETime.mHours = *((void *)this + 24);
  *(_OWORD *)&a2->mOutputTime.mSMPTETime.mSubframes = v5;
  a2->mOutputTime.mFlags = *((_DWORD *)this + 50);
  a2->mMainHostTicksPerFrame = *((double *)this + 26) * 24000000.0 / 24000000.0;
  Float64 result = *((double *)this + 27) * 24000000.0 / 24000000.0;
  a2->mDeviceHostTicksPerFrame = result;
  return result;
}

uint64_t AMCP::Portal::IPC::IO_Sender::do_io_operation(uint64_t a1, int a2, AudioServerPlugInIOCycleInfo *a3, AMCP::Portal::IPC::IO_Sender *this, unsigned int a5, int a6, int a7, int a8, int a9)
{
  unsigned __int8 v9 = atomic_load((unsigned __int8 *)(a1 + 65));
  if (v9) {
    return 1768911973;
  }
  uint64_t v20 = 6;
  int v21 = (int)a3;
  AMCP::Portal::IPC::IO_Sender::translate_to_driver_IO_cycle_info(this, &v22, a3);
  double v16 = *(double *)(a1 + 56);
  uint64_t v24 = *(void *)(a1 + 48);
  unsigned int v23 = a5;
  int v25 = a2;
  int v26 = a6;
  int v27 = a7;
  int v28 = a8;
  int v29 = a9;
  double v18 = (double)a5 / v16;
  return AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(a1, (const BOOL *)&v20, &v19, &v18);
}

void sub_1BABFC4A4(void *a1)
{
}

uint64_t AMCP::Portal::IPC::IO_Sender::end_io_operation(AMCP::Portal::IPC::IO_Sender *this, int a2, AMCP::Portal::IPC::IO_Sender *a3, const AudioServerPlugInIOCycleInfo *a4)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)this + 65);
  if (v4) {
    return 1768911973;
  }
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v10 = 7;
  int v11 = a2;
  AMCP::Portal::IPC::IO_Sender::translate_to_driver_IO_cycle_info(a3, &v12, (AudioServerPlugInIOCycleInfo *)a3);
  double v6 = *((double *)this + 7);
  uint64_t v14 = *((void *)this + 6);
  int v15 = 0;
  int v13 = 0;
  double v8 = 0.0 / v6;
  return AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message((uint64_t)this, (const BOOL *)&v10, &v9, &v8);
}

void sub_1BABFC54C(void *a1)
{
}

uint64_t *std::unordered_map<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>::insert_or_assign[abi:ne180100]<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v7 = a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (!v8) {
    goto LABEL_18;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v3 = a2;
    if (v8 <= a2) {
      unint64_t v3 = a2 % v8;
    }
  }
  else
  {
    unint64_t v3 = (v8 - 1) & a2;
  }
  uint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
  if (!v10 || (int v11 = *v10) == 0)
  {
LABEL_18:
    int v13 = (void *)(a1 + 16);
    uint64_t v14 = operator new(0x60uLL);
    v42[0] = v14;
    v42[1] = a1 + 16;
    *uint64_t v14 = 0;
    v14[1] = v7;
    *((_DWORD *)v14 + 4) = a2;
    *((_DWORD *)v14 + 6) = *(_DWORD *)a3;
    *((_OWORD *)v14 + 2) = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(a3 + _Block_object_dispose(&a9, 8) = 0u;
    v14[6] = *(void *)(a3 + 24);
    *(void *)(a3 + 24) = 0;
    *((_OWORD *)v14 + 4) = *(_OWORD *)(a3 + 40);
    *(_OWORD *)(a3 + 40) = 0u;
    unsigned char v14[10] = *(void *)(a3 + 56);
    *(void *)(a3 + 56) = 0;
    char v43 = 1;
    float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
    float v16 = *(float *)(a1 + 32);
    if (v8 && (float)(v16 * (float)v8) >= v15)
    {
      unint64_t v7 = v3;
      goto LABEL_64;
    }
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime <= v8)
    {
      if (*(void *)&prime >= v8) {
        goto LABEL_60;
      }
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *(void *)(a1 + 8);
        goto LABEL_60;
      }
      if (!*(void *)&prime)
      {
        mach_port_t v41 = *(void **)a1;
        *(void *)a1 = 0;
        if (v41) {
          operator delete(v41);
        }
        unint64_t v8 = 0;
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
        goto LABEL_60;
      }
    }
    if (*(void *)&prime >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v21 = operator new(8 * *(void *)&prime);
    AudioServerPlugInIOCycleInfo v22 = *(void **)a1;
    *(void *)a1 = v21;
    if (v22) {
      operator delete(v22);
    }
    uint64_t v23 = 0;
    *(int8x8_t *)(a1 + _Block_object_dispose(&a9, 8) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v23++) = 0;
    while (*(void *)&prime != v23);
    uint64_t v24 = (void *)*v13;
    if (*v13)
    {
      unint64_t v25 = v24[1];
      uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
      v26.i16[0] = vaddlv_u8(v26);
      if (v26.u32[0] > 1uLL)
      {
        if (v25 >= *(void *)&prime) {
          v25 %= *(void *)&prime;
        }
      }
      else
      {
        v25 &= *(void *)&prime - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v13;
      long long v30 = (void *)*v24;
      if (*v24)
      {
        do
        {
          unint64_t v31 = v30[1];
          if (v26.u32[0] > 1uLL)
          {
            if (v31 >= *(void *)&prime) {
              v31 %= *(void *)&prime;
            }
          }
          else
          {
            v31 &= *(void *)&prime - 1;
          }
          if (v31 != v25)
          {
            if (!*(void *)(*(void *)a1 + 8 * v31))
            {
              *(void *)(*(void *)a1 + 8 * v31) = v24;
              goto LABEL_56;
            }
            *uint64_t v24 = *v30;
            *long long v30 = **(void **)(*(void *)a1 + 8 * v31);
            **(void **)(*(void *)a1 + 8 * v31) = v30;
            long long v30 = v24;
          }
          unint64_t v31 = v25;
LABEL_56:
          uint64_t v24 = v30;
          long long v30 = (void *)*v30;
          unint64_t v25 = v31;
        }
        while (v30);
      }
    }
    unint64_t v8 = (unint64_t)prime;
LABEL_60:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        v7 %= v8;
      }
    }
    else
    {
      unint64_t v7 = (v8 - 1) & v7;
    }
LABEL_64:
    long long v32 = *(void **)(*(void *)a1 + 8 * v7);
    int v11 = (uint64_t *)v42[0];
    if (v32)
    {
      *(void *)v42[0] = *v32;
    }
    else
    {
      *(void *)v42[0] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v11;
      *(void *)(*(void *)a1 + 8 * v7) = v13;
      if (!*v11)
      {
LABEL_73:
        v42[0] = 0;
        ++*(void *)(a1 + 24);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v42);
        return v11;
      }
      unint64_t v33 = *(void *)(*v11 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v33 >= v8) {
          v33 %= v8;
        }
      }
      else
      {
        v33 &= v8 - 1;
      }
      long long v32 = (void *)(*(void *)a1 + 8 * v33);
    }
    *long long v32 = v11;
    goto LABEL_73;
  }
  while (1)
  {
    unint64_t v12 = v11[1];
    if (v12 == a2) {
      break;
    }
    if (v9.u32[0] > 1uLL)
    {
      if (v12 >= v8) {
        v12 %= v8;
      }
    }
    else
    {
      v12 &= v8 - 1;
    }
    if (v12 != v3) {
      goto LABEL_18;
    }
LABEL_17:
    int v11 = (uint64_t *)*v11;
    if (!v11) {
      goto LABEL_18;
    }
  }
  if (*((_DWORD *)v11 + 4) != a2) {
    goto LABEL_17;
  }
  *((_DWORD *)v11 + 6) = *(_DWORD *)a3;
  uint64_t v35 = v11[4];
  v11[4] = *(void *)(a3 + 8);
  *(void *)(a3 + _Block_object_dispose(&a9, 8) = v35;
  uint64_t v36 = v11[5];
  v11[5] = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = v36;
  uint64_t v37 = v11[6];
  v11[6] = *(void *)(a3 + 24);
  *(void *)(a3 + 24) = v37;
  uint64_t v38 = v11[8];
  v11[8] = *(void *)(a3 + 40);
  *(void *)(a3 + 40) = v38;
  uint64_t v39 = v11[9];
  v11[9] = *(void *)(a3 + 48);
  *(void *)(a3 + 4_Block_object_dispose(&a9, 8) = v39;
  uint64_t v40 = v11[10];
  unsigned char v11[10] = *(void *)(a3 + 56);
  *(void *)(a3 + 56) = v40;
  return v11;
}

void sub_1BABFCA0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

std::__wrap_iter<unsigned int *>::iterator_type AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::insert_unique(std::vector<unsigned int> *a1, unsigned int *a2)
{
  unsigned int v4 = *a2;
  std::__wrap_iter<unsigned int *>::iterator_type result = (std::__wrap_iter<unsigned int *>::iterator_type)AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::find(a1->__begin_, a1->__end_, *a2);
  if ((_BYTE)result)
  {
    *v6.__i_ = v4;
  }
  else
  {
    return std::vector<unsigned int>::insert(a1, v6, a2).__i_;
  }
  return result;
}

BOOL AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::find(_DWORD *a1, _DWORD *a2, unsigned int a3)
{
  if (a2 == a1)
  {
    unint64_t v3 = a2;
  }
  else
  {
    unint64_t v3 = a1;
    unint64_t v4 = a2 - a1;
    do
    {
      unint64_t v5 = v4 >> 1;
      std::vector<unsigned int>::const_iterator v6 = &v3[v4 >> 1];
      unsigned int v8 = *v6;
      unint64_t v7 = v6 + 1;
      v4 += ~(v4 >> 1);
      if (v8 < a3) {
        unint64_t v3 = v7;
      }
      else {
        unint64_t v4 = v5;
      }
    }
    while (v4);
  }
  return v3 != a2 && *v3 == a3;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>,0>(v1 + 2);
    }
    operator delete(v1);
  }
}

void *AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::erase(uint64_t a1, unsigned int a2)
{
  unint64_t v4 = *(char **)(a1 + 8);
  std::__wrap_iter<unsigned int *>::iterator_type result = (void *)AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::find(*(_DWORD **)a1, v4, a2);
  if ((_BYTE)result)
  {
    unint64_t v7 = v6;
    unsigned int v8 = (char *)(v6 + 1);
    while (v8 != v4)
    {
      int v9 = *(_DWORD *)v8;
      v8 += 4;
      if (v9 != a2)
      {
        uint64_t v10 = v8 - 4;
        goto LABEL_7;
      }
    }
    uint64_t v10 = v4;
LABEL_7:
    int64_t v11 = v10 - (char *)v6;
    if (v11)
    {
      unint64_t v12 = (char *)v6 + v11;
      size_t v13 = v4 - &v7[v11];
      if (v13) {
        std::__wrap_iter<unsigned int *>::iterator_type result = memmove(v7, v12, v13);
      }
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = &v7[v13];
    }
  }
  return result;
}

uint64_t AMCP::Core::Broker::gather_directly_owned_objects(std::vector<unsigned int> *a1, std::__shared_mutex_base *this, unsigned int **a3)
{
  int64_t v11 = this;
  char v12 = 1;
  std::__shared_mutex_base::lock_shared(this);
  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  std::vector<unsigned int>::reserve(a1, *(void *)&this[2].__gate1_.__cv_.__opaque[24]);
  unint64_t v7 = *a3;
  std::vector<unsigned int>::const_iterator v6 = a3[1];
  if (v7 != v6)
  {
    opaque = this[2].__gate1_.__cv_.__opaque;
    do
    {
      int v9 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(opaque, *v7);
      if (v9) {
        AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::insert_unique<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>((std::__wrap_iter<unsigned int *>::iterator_type)a1, (unsigned int *)v9[4], (unsigned int *)v9[5]);
      }
      ++v7;
    }
    while (v7 != v6);
  }
  return std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v11);
}

std::__wrap_iter<unsigned int *>::iterator_type AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::insert_unique<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(std::__wrap_iter<unsigned int *>::iterator_type result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    unint64_t v5 = (std::vector<unsigned int> *)result;
    do
    {
      unsigned int v6 = *v4;
      std::__wrap_iter<unsigned int *>::iterator_type result = (std::__wrap_iter<unsigned int *>::iterator_type)AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::find(v5->__begin_, v5->__end_, *v4);
      if ((_BYTE)result) {
        *v7.__i_ = v6;
      }
      else {
        std::__wrap_iter<unsigned int *>::iterator_type result = std::vector<unsigned int>::insert(v5, v7, v4).__i_;
      }
      ++v4;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t AMCP::Core::Broker::fetch_core(AMCP::Core::Broker *this, std::__shared_mutex_base *a2, unsigned int a3)
{
  uint64_t v14 = a2;
  char v15 = 1;
  std::__shared_mutex_base::lock_shared(a2);
  unint64_t v6 = *(void *)a2[1].__mut_.__m_.__opaque;
  if (!v6) {
    goto LABEL_17;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = a3;
    if (v6 <= a3) {
      unint64_t v8 = a3 % v6;
    }
  }
  else
  {
    unint64_t v8 = (v6 - 1) & a3;
  }
  int v9 = *(uint64_t ***)(a2[1].__mut_.__m_.__sig + 8 * v8);
  if (!v9 || (uint64_t v10 = *v9) == 0)
  {
LABEL_17:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    return std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v14);
  }
  while (1)
  {
    unint64_t v11 = v10[1];
    if (v11 == a3) {
      break;
    }
    if (v7.u32[0] > 1uLL)
    {
      if (v11 >= v6) {
        v11 %= v6;
      }
    }
    else
    {
      v11 &= v6 - 1;
    }
    if (v11 != v8) {
      goto LABEL_17;
    }
LABEL_16:
    uint64_t v10 = (uint64_t *)*v10;
    if (!v10) {
      goto LABEL_17;
    }
  }
  if (*((_DWORD *)v10 + 4) != a3) {
    goto LABEL_16;
  }
  uint64_t v13 = v10[4];
  *(void *)this = v10[3];
  *((void *)this + 1) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  return std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v14);
}

uint64_t AMCP::Core::Broker::fetch_cores_if (void *a1, std::__shared_mutex_base *this, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int v9 = this;
  char v10 = 1;
  std::__shared_mutex_base::lock_shared(this);
  for (uint64_t i = *(uint64_t **)&this[1].__mut_.__m_.__opaque[8]; i; uint64_t i = (uint64_t *)*i)
  {
    uint64_t v7 = *(void *)(a3 + 24);
    if (!v7) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v7 + 48))(v7, i + 3)) {
      std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((uint64_t)a1, (long long *)(i + 3));
    }
  }
  return std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v9);
}

void AMCP::Core::Broker::fetch_object_ids_if (std::vector<unsigned int> *a1, std::__shared_mutex_base *a2, uint64_t a3)
{
  AMCP::Core::Broker::fetch_cores_if (&v17, a2, a3);
  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  unint64_t v5 = v17;
  unint64_t v4 = v18;
  std::vector<unsigned int>::reserve(a1, ((char *)v18 - (char *)v17) >> 4);
  if (v5 != v4)
  {
    std::vector<unsigned int>::pointer end = a1->__end_;
    value = a1->__end_cap_.__value_;
    do
    {
      unsigned int v8 = **v5;
      if (end >= value)
      {
        std::vector<unsigned int>::pointer begin = a1->__begin_;
        uint64_t v11 = end - a1->__begin_;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        if (((char *)value - (char *)begin) >> 1 > v12) {
          unint64_t v12 = ((char *)value - (char *)begin) >> 1;
        }
        if ((unint64_t)((char *)value - (char *)begin) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        char v15 = (unsigned int *)(v13 + 4 * v11);
        *char v15 = v8;
        int v9 = v15 + 1;
        while (end != begin)
        {
          unsigned int v16 = *--end;
          *--char v15 = v16;
        }
        value = (unsigned int *)(v13 + 4 * v14);
        a1->__begin_ = v15;
        a1->__end_cap_.__value_ = value;
        if (begin) {
          operator delete(begin);
        }
      }
      else
      {
        *std::vector<unsigned int>::pointer end = v8;
        int v9 = end + 1;
      }
      a1->__end_ = v9;
      v5 += 2;
      std::vector<unsigned int>::pointer end = v9;
    }
    while (v5 != v4);
  }
  unint64_t v19 = &v17;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
}

uint64_t AMCP::Core::Broker::fetch_first_core_if (void *a1, std::__shared_mutex_base *this, uint64_t a3)
{
  char v10 = this;
  char v11 = 1;
  std::__shared_mutex_base::lock_shared(this);
  unint64_t v6 = &this[1].__mut_.__m_.__opaque[8];
  do
  {
    unint64_t v6 = *(char **)v6;
    if (!v6)
    {
      *a1 = 0;
      a1[1] = 0;
      return std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v10);
    }
    uint64_t v7 = *(void *)(a3 + 24);
    if (!v7) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
  }
  while (!(*(unsigned int (**)(uint64_t, void *))(*(void *)v7 + 48))(v7, (void *)v6 + 3));
  uint64_t v8 = *((void *)v6 + 4);
  *a1 = *((void *)v6 + 3);
  a1[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  return std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v10);
}

uint64_t AMCP::Core::Broker::fetch_first_object_id_if (std::__shared_mutex_base *this, uint64_t a2)
{
  AMCP::Core::Broker::fetch_first_core_if (&v4, this, a2);
  if (v4) {
    uint64_t v2 = *v4;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void AMCP::Core::Broker::fetch_owned_object_ids_if (char **a1, std::__shared_mutex_base *a2, int a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v8 = (char *)operator new(4uLL);
  *(_DWORD *)uint64_t v8 = a3;
  unint64_t v25 = (std::__shared_weak_count *)(v8 + 4);
  uint8x8_t v26 = v8 + 4;
  uint64_t v24 = (unsigned int *)v8;
  AMCP::Core::Broker::gather_directly_owned_objects(&v27, a2, &v24);
  operator delete(v8);
  std::vector<unsigned int>::pointer begin = v27.__begin_;
  std::vector<unsigned int>::pointer end = v27.__end_;
  if (v27.__begin_ != v27.__end_)
  {
    char v11 = 0;
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v23 = a4;
    do
    {
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v24, a2, *begin);
      if (v24)
      {
        uint64_t v14 = *(void *)(a4 + 24);
        if (!v14) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        if ((*(unsigned int (**)(uint64_t, unsigned int **))(*(void *)v14 + 48))(v14, &v24))
        {
          int v15 = *v24;
          if ((unint64_t)v13 >= v12)
          {
            uint64_t v17 = (v13 - v11) >> 2;
            unint64_t v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 62) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v12 - (void)v11) >> 1 > v18) {
              unint64_t v18 = (uint64_t)(v12 - (void)v11) >> 1;
            }
            if (v12 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v19 = v18;
            }
            if (v19) {
              unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v19);
            }
            else {
              uint64_t v20 = 0;
            }
            int v21 = (char *)(v19 + 4 * v17);
            *(_DWORD *)int v21 = v15;
            unsigned int v16 = v21 + 4;
            while (v13 != v11)
            {
              int v22 = *((_DWORD *)v13 - 1);
              v13 -= 4;
              *((_DWORD *)v21 - 1) = v22;
              v21 -= 4;
            }
            unint64_t v12 = v19 + 4 * v20;
            *a1 = v21;
            a1[1] = v16;
            a1[2] = (char *)v12;
            if (v11) {
              operator delete(v11);
            }
            char v11 = v21;
          }
          else
          {
            *(_DWORD *)unint64_t v13 = v15;
            unsigned int v16 = v13 + 4;
          }
          a1[1] = v16;
          unint64_t v13 = v16;
          a4 = v23;
        }
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      ++begin;
    }
    while (begin != end);
    std::vector<unsigned int>::pointer begin = v27.__begin_;
  }
  if (begin)
  {
    v27.__end_ = begin;
    operator delete(begin);
  }
}

void AMCP::Core::Broker::make_snapshot(uint64_t a1, std::__shared_mutex_base *this, unsigned int **a3, char a4)
{
  memset(&__p, 0, sizeof(__p));
  if (a4)
  {
    AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::insert_unique<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>((std::__wrap_iter<unsigned int *>::iterator_type)&__p, *a3, a3[1]);
  }
  else
  {
    v26[0] = this;
    LOBYTE(v26[1]) = 1;
    std::__shared_mutex_base::lock_shared(this);
    memset(&v32, 0, sizeof(v32));
    std::vector<unsigned int>::reserve(&v32, *(void *)&this[2].__gate1_.__cv_.__opaque[24]);
    AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::insert_unique<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>((std::__wrap_iter<unsigned int *>::iterator_type)&v32, *a3, a3[1]);
    uint64_t v8 = *a3;
    int v9 = a3[1];
    if (*a3 != v9)
    {
      do
      {
        char v10 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(this[2].__gate1_.__cv_.__opaque, *v8);
        if (v10) {
          AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::insert_unique<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>((std::__wrap_iter<unsigned int *>::iterator_type)&v32, (unsigned int *)v10[8], (unsigned int *)v10[9]);
        }
        ++v8;
      }
      while (v8 != v9);
    }
    std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)v26);
    std::vector<unsigned int>::pointer begin = __p.__begin_;
    value = __p.__end_cap_.__value_;
    std::vector<unsigned int> __p = v32;
    v32.__begin_ = begin;
    v32.__end_cap_.__value_ = value;
    if (begin)
    {
      v32.__end_ = begin;
      operator delete(begin);
    }
  }
  if ((a4 & 2) != 0) {
    AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::insert_unique(&__p, &AMCP::k_object_id_system);
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, (unint64_t)(float)(unint64_t)(__p.__end_ - __p.__begin_));
  std::vector<unsigned int>::pointer v13 = __p.__begin_;
  std::vector<unsigned int>::pointer end = __p.__end_;
  if ((a4 & 4) != 0)
  {
    if (__p.__begin_ == __p.__end_) {
      goto LABEL_36;
    }
    do
    {
      unsigned int v17 = *v13;
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v29, this, *v13);
      uint64_t v18 = v29;
      if (v29)
      {
        uint64_t v34 = v29 + 48;
        char v35 = 1;
        caulk::concurrent::shared_spin_lock::lock_shared((unsigned int *)(v29 + 48));
        *(_OWORD *)uint8x8_t v26 = 0u;
        *(_OWORD *)std::vector<unsigned int> v27 = 0u;
        int v28 = 1065353216;
        std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)v26, (unint64_t)(float)*(unint64_t *)(v18 + 32));
        for (uint64_t i = *(uint64_t ***)(v18 + 24); i; uint64_t i = (uint64_t **)*i)
        {
          uint64_t v20 = i[4];
          unint64_t v21 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
          if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v20, v21))
          {
            if ((AMCP::is_invariant_property_selector((AMCP *)*((unsigned int *)i + 4)) & 1) == 0)
            {
              int v22 = i[4];
              unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
              if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v22, Has_Property)|| AMCP::Core::Operation::call_function<BOOL,AMCP::Core::Has_Property_Function>(i[4]))
              {
                uint64_t v24 = i[4];
                AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)&v32, v24);
                std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v26, (unsigned int *)v24 + 10, (AMCP *)&v32);
                if (v33) {
                  v33(0, &v32, 0, 0);
                }
              }
            }
          }
        }
        std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v34);
        std::unordered_map<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>::insert_or_assign[abi:ne180100]<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>(a1, v17, (uint64_t *)v26);
        std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((void *)v27[0]);
        unint64_t v25 = v26[0];
        v26[0] = 0;
        if (v25) {
          operator delete(v25);
        }
      }
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      ++v13;
    }
    while (v13 != end);
  }
  else
  {
    if (__p.__begin_ == __p.__end_) {
      goto LABEL_36;
    }
    do
    {
      unsigned int v15 = *v13;
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)v26, this, *v13);
      if (v26[0])
      {
        AMCP::Core::Core::make_snapshot((AMCP::Core::Core *)&v32, (uint64_t)v26[0]);
        std::unordered_map<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>::insert_or_assign[abi:ne180100]<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>(a1, v15, (uint64_t *)&v32);
        std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((void *)v32.__end_cap_.__value_);
        std::vector<unsigned int>::pointer v16 = v32.__begin_;
        v32.__begin_ = 0;
        if (v16) {
          operator delete(v16);
        }
      }
      if (v26[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v26[1]);
      }
      ++v13;
    }
    while (v13 != end);
  }
  std::vector<unsigned int>::pointer v13 = __p.__begin_;
LABEL_36:
  if (v13)
  {
    __p.__end_ = v13;
    operator delete(v13);
  }
}

void std::unordered_map<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>::insert_or_assign[abi:ne180100]<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  unint64_t v7 = a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (!v8) {
    goto LABEL_18;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v3 = a2;
    if (v8 <= a2) {
      unint64_t v3 = a2 % v8;
    }
  }
  else
  {
    unint64_t v3 = (v8 - 1) & a2;
  }
  char v10 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
  if (!v10 || (char v11 = *v10) == 0)
  {
LABEL_18:
    std::vector<unsigned int>::pointer v13 = (void *)(a1 + 16);
    uint64_t v14 = operator new(0x40uLL);
    v35[0] = v14;
    v35[1] = a1 + 16;
    *uint64_t v14 = 0;
    v14[1] = v7;
    *((_DWORD *)v14 + 4) = a2;
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v14 + 3), a3);
    char v36 = 1;
    float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
    float v16 = *(float *)(a1 + 32);
    if (!v8 || (float)(v16 * (float)v8) < v15)
    {
      BOOL v17 = 1;
      if (v8 >= 3) {
        BOOL v17 = (v8 & (v8 - 1)) != 0;
      }
      unint64_t v18 = v17 | (2 * v8);
      unint64_t v19 = vcvtps_u32_f32(v15 / v16);
      if (v18 <= v19) {
        size_t v20 = v19;
      }
      else {
        size_t v20 = v18;
      }
      std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v20);
      unint64_t v8 = *(void *)(a1 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v8 <= v7) {
          unint64_t v3 = v7 % v8;
        }
        else {
          unint64_t v3 = v7;
        }
      }
      else
      {
        unint64_t v3 = (v8 - 1) & v7;
      }
    }
    uint64_t v21 = *(void *)a1;
    int v22 = *(void **)(*(void *)a1 + 8 * v3);
    if (v22)
    {
      *uint64_t v14 = *v22;
    }
    else
    {
      *uint64_t v14 = *v13;
      *std::vector<unsigned int>::pointer v13 = v14;
      *(void *)(v21 + 8 * v3) = v13;
      if (!*v14)
      {
LABEL_39:
        v35[0] = 0;
        ++*(void *)(a1 + 24);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
        return;
      }
      unint64_t v23 = *(void *)(*v14 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8) {
          v23 %= v8;
        }
      }
      else
      {
        v23 &= v8 - 1;
      }
      int v22 = (void *)(*(void *)a1 + 8 * v23);
    }
    *int v22 = v14;
    goto LABEL_39;
  }
  while (1)
  {
    unint64_t v12 = v11[1];
    if (v12 == a2) {
      break;
    }
    if (v9.u32[0] > 1uLL)
    {
      if (v12 >= v8) {
        v12 %= v8;
      }
    }
    else
    {
      v12 &= v8 - 1;
    }
    if (v12 != v3) {
      goto LABEL_18;
    }
LABEL_17:
    char v11 = (uint64_t *)*v11;
    if (!v11) {
      goto LABEL_18;
    }
  }
  if (*((_DWORD *)v11 + 4) != a2) {
    goto LABEL_17;
  }
  if (v11[6])
  {
    std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node((void *)v11[5]);
    v11[5] = 0;
    uint64_t v24 = v11[4];
    if (v24)
    {
      for (uint64_t i = 0; i != v24; ++i)
        *(void *)(v11[3] + 8 * i) = 0;
    }
    v11[6] = 0;
  }
  uint64_t v26 = *a3;
  *a3 = 0;
  std::vector<unsigned int> v27 = (void *)v11[3];
  void v11[3] = v26;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v30 = a3[2];
  uint64_t v29 = a3 + 2;
  uint64_t v28 = v30;
  uint64_t v31 = *(v29 - 1);
  v11[5] = v30;
  v11[4] = v31;
  *(v29 - 1) = 0;
  uint64_t v32 = v29[1];
  v11[6] = v32;
  *((_DWORD *)v11 + 14) = *((_DWORD *)v29 + 4);
  if (v32)
  {
    unint64_t v33 = *(void *)(v28 + 8);
    unint64_t v34 = v11[4];
    if ((v34 & (v34 - 1)) != 0)
    {
      if (v33 >= v34) {
        v33 %= v34;
      }
    }
    else
    {
      v33 &= v34 - 1;
    }
    *(void *)(v11[3] + 8 * v33) = v11 + 5;
    *uint64_t v29 = 0;
    v29[1] = 0;
  }
}

void sub_1BABFD94C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Core::Core::make_snapshot(AMCP::Core::Core *this, uint64_t a2)
{
  uint64_t v13 = a2 + 48;
  char v14 = 1;
  caulk::concurrent::shared_spin_lock::lock_shared((unsigned int *)(a2 + 48));
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + _Block_object_dispose(&a9, 8) = 1065353216;
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)this, (unint64_t)(float)*(unint64_t *)(a2 + 32));
  for (uint64_t i = *(void **)(a2 + 24); i; uint64_t i = (void *)*i)
  {
    unint64_t v5 = (void *)i[4];
    unint64_t v6 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v6))
    {
      unint64_t v7 = (void *)i[4];
      unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      if (!std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, Has_Property)|| AMCP::Core::Operation::call_function<BOOL,AMCP::Core::Has_Property_Function>((void *)i[4]))
      {
        uint64_t v9 = i[4];
        AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v11, (void *)v9);
        std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)this, (unsigned int *)(v9 + 40), (AMCP *)v11);
        if (v12) {
          v12(0, v11, 0, 0);
        }
      }
    }
  }
  return std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v13);
}

void std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(uint64_t a1, unsigned int *a2, AMCP *this)
{
  uint64_t v7 = *a2;
  unsigned int v8 = a2[1];
  unsigned int v9 = a2[2];
  unint64_t v10 = v8 & 0xFF000000 | (unint64_t)(v7 << 32) | *(void *)&v9 & 0xFFFFFFLL;
  unint64_t v11 = *(void *)(a1 + 8);
  if (!v11) {
    goto LABEL_19;
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    uint64_t v3 = v8 & 0xFF000000 | (unint64_t)(v7 << 32) | *(void *)&v9 & 0xFFFFFFLL;
    if (v10 >= v11) {
      uint64_t v3 = v10 % v11;
    }
  }
  else
  {
    uint64_t v3 = v10 & (v11 - 1);
  }
  uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
  if (!v13 || (char v14 = *v13) == 0)
  {
LABEL_19:
    float v16 = operator new(0x48uLL);
    *float v16 = 0;
    v16[1] = v10;
    _OWORD v16[2] = *(void *)a2;
    *((_DWORD *)v16 + 6) = v9;
    *((_OWORD *)v16 + 2) = 0u;
    *((_OWORD *)v16 + 3) = 0u;
    v16[8] = 0;
    BOOL v17 = (void (*)(uint64_t, AMCP *, void *, void))*((void *)this + 4);
    if (v17) {
      v17(2, this, v16 + 4, 0);
    }
    float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
    float v19 = *(float *)(a1 + 32);
    if (!v11 || (float)(v19 * (float)v11) < v18)
    {
      BOOL v20 = 1;
      if (v11 >= 3) {
        BOOL v20 = (v11 & (v11 - 1)) != 0;
      }
      unint64_t v21 = v20 | (2 * v11);
      unint64_t v22 = vcvtps_u32_f32(v18 / v19);
      if (v21 <= v22) {
        size_t v23 = v22;
      }
      else {
        size_t v23 = v21;
      }
      std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v23);
      unint64_t v11 = *(void *)(a1 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v10 >= v11) {
          uint64_t v3 = v10 % v11;
        }
        else {
          uint64_t v3 = v10;
        }
      }
      else
      {
        uint64_t v3 = (v11 - 1) & v10;
      }
    }
    uint64_t v24 = *(void *)a1;
    unint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
    if (v25)
    {
      *float v16 = *v25;
    }
    else
    {
      *float v16 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v16;
      *(void *)(v24 + 8 * v3) = a1 + 16;
      if (!*v16)
      {
LABEL_42:
        ++*(void *)(a1 + 24);
        return;
      }
      unint64_t v26 = *(void *)(*v16 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11) {
          v26 %= v11;
        }
      }
      else
      {
        v26 &= v11 - 1;
      }
      unint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    }
    *unint64_t v25 = v16;
    goto LABEL_42;
  }
  while (1)
  {
    unint64_t v15 = v14[1];
    if (v15 == v10) {
      break;
    }
    if (v12.u32[0] > 1uLL)
    {
      if (v15 >= v11) {
        v15 %= v11;
      }
    }
    else
    {
      v15 &= v11 - 1;
    }
    if (v15 != v3) {
      goto LABEL_19;
    }
LABEL_18:
    char v14 = (uint64_t *)*v14;
    if (!v14) {
      goto LABEL_19;
    }
  }
  if (v14[2] != __PAIR64__(v8, v7) || *((_DWORD *)v14 + 6) != v9) {
    goto LABEL_18;
  }

  AMCP::swap(this, (AMCP::Thing *)(v14 + 4), this);
}

void sub_1BABFDCF4(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Address,AMCP::Thing>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table((uint64_t)v1 + 24);
    }
    operator delete(v1);
  }
}

uint64_t AMCP::Core::Broker::reserve_id(std::__shared_mutex_base *this)
{
  float v16 = this;
  char v17 = 1;
  std::__shared_mutex_base::lock(this);
  unint64_t v4 = *(const unsigned int **)&this[1].__mut_.__m_.__opaque[40];
  uint64_t v3 = (std::vector<unsigned int> *)&this[1].__mut_.__m_.__opaque[40];
  uint64_t v2 = v4;
  std::vector<unsigned int>::value_type value = (std::vector<unsigned int>::value_type)v3[-1].__end_cap_.__value_;
  LODWORD(v3[-1].__end_cap_.__value_) = value + 1;
  std::vector<unsigned int>::value_type __x = value;
  v6.__i_ = v3->__end_;
  uint64_t v7 = (char *)v6.__i_ - (char *)v4;
  if (v6.__i_ != v4)
  {
    unint64_t v8 = v7 >> 2;
    do
    {
      unint64_t v9 = v8 >> 1;
      unint64_t v10 = &v2[v8 >> 1];
      std::vector<unsigned int>::value_type v12 = *v10;
      unint64_t v11 = v10 + 1;
      v8 += ~(v8 >> 1);
      if (v12 < value) {
        uint64_t v2 = v11;
      }
      else {
        unint64_t v8 = v9;
      }
    }
    while (v8);
    v6.__i_ = v2;
  }
  std::vector<unsigned int>::insert(v3, v6, &__x);
  uint64_t v13 = __x;
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v16);
  return v13;
}

uint64_t AMCP::Core::Broker::make_core(AMCP::Core::Core **a1, std::__shared_mutex_base *this, uint64_t a3, unsigned int a4)
{
  uint64_t v6 = (uint64_t)this;
  uint64_t v86 = this;
  LOBYTE(v87) = 1;
  std::__shared_mutex_base::lock(this);
  if (a4)
  {
    unint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)(v6 + 168), a4);
    if (v8)
    {
      uint64_t v9 = v8[4];
      *a1 = (AMCP::Core::Core *)v8[3];
      a1[1] = (AMCP::Core::Core *)v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v86);
    }
    uint64_t v40 = *(char **)(v6 + 216);
    uint64_t v39 = *(char **)(v6 + 224);
    if (v39 == v40)
    {
      uint64_t v40 = *(char **)(v6 + 224);
    }
    else
    {
      unint64_t v41 = (v39 - v40) >> 2;
      do
      {
        unint64_t v42 = v41 >> 1;
        char v43 = (unsigned int *)&v40[4 * (v41 >> 1)];
        unsigned int v45 = *v43;
        long long v44 = (char *)(v43 + 1);
        v41 += ~(v41 >> 1);
        if (v45 < a4) {
          uint64_t v40 = v44;
        }
        else {
          unint64_t v41 = v42;
        }
      }
      while (v41);
    }
    if (v39 == v40 && a4 >= 0x10)
    {
      *a1 = 0;
      a1[1] = 0;
      return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v86);
    }
    if (v39 != v40)
    {
      uint64_t v67 = v39 - (v40 + 4);
      if (v39 != v40 + 4) {
        memmove(v40, v40 + 4, v39 - (v40 + 4));
      }
      *(void *)(v6 + 224) = &v40[v67];
    }
  }
  else
  {
    a4 = *(_DWORD *)(v6 + 208);
    *(_DWORD *)(v6 + 20_Block_object_dispose(&a9, 8) = a4 + 1;
  }
  unint64_t v10 = (char *)operator new(0x50uLL);
  uint64_t v83 = v6;
  long long v84 = a1;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)unint64_t v10 = &unk_1F1464818;
  *((_DWORD *)v10 + 6) = a4;
  int v85 = (AMCP::Core::Core *)(v10 + 24);
  *(_OWORD *)(v10 + 2_Block_object_dispose(&a9, 8) = 0u;
  unint64_t v11 = (unint64_t)(v10 + 28);
  std::vector<unsigned int>::value_type v12 = (uint64_t *)(v10 + 32);
  *(_OWORD *)(v10 + 44) = 0u;
  int v13 = *(_DWORD *)(a3 + 32);
  *((_DWORD *)v10 + 15) = 0;
  *((_DWORD *)v10 + 16) = v13;
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)(v10 + 32), *(void *)(a3 + 8));
  char v14 = *(uint64_t **)(a3 + 16);
  if (v14)
  {
    unint64_t v15 = v10 + 48;
    do
    {
      uint64_t v16 = *((unsigned int *)v14 + 4);
      unsigned int v17 = *((_DWORD *)v14 + 5);
      int v18 = *((_DWORD *)v14 + 6);
      unint64_t v19 = v17 & 0xFF000000 | (unint64_t)(v16 << 32) | *(void *)&v18 & 0xFFFFFFLL;
      unint64_t v11 = *((void *)v10 + 5);
      if (v11)
      {
        uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
        v20.i16[0] = vaddlv_u8(v20);
        if (v20.u32[0] > 1uLL)
        {
          uint64_t v6 = v17 & 0xFF000000 | (unint64_t)(v16 << 32) | *(void *)&v18 & 0xFFFFFFLL;
          if (v19 >= v11) {
            uint64_t v6 = v19 % v11;
          }
        }
        else
        {
          uint64_t v6 = v19 & (v11 - 1);
        }
        unint64_t v21 = *(uint64_t ***)(*v12 + 8 * v6);
        if (v21)
        {
          for (uint64_t i = *v21; i; uint64_t i = (uint64_t *)*i)
          {
            unint64_t v23 = i[1];
            if (v23 == v19)
            {
              if (i[2] == __PAIR64__(v17, v16) && *((_DWORD *)i + 6) == v18) {
                goto LABEL_49;
              }
            }
            else
            {
              if (v20.u32[0] > 1uLL)
              {
                if (v23 >= v11) {
                  v23 %= v11;
                }
              }
              else
              {
                v23 &= v11 - 1;
              }
              if (v23 != v6) {
                break;
              }
            }
          }
        }
      }
      uint64_t v24 = operator new(0x30uLL);
      *uint64_t v24 = 0;
      v24[1] = v19;
      uint64_t v24[2] = v14[2];
      *((_DWORD *)v24 + 6) = *((_DWORD *)v14 + 6);
      v24[4] = v14[4];
      uint64_t v25 = v14[5];
      v24[5] = v25;
      if (v25) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
      }
      float v26 = (float)(unint64_t)(*((void *)v10 + 7) + 1);
      float v27 = *((float *)v10 + 16);
      if (!v11 || (float)(v27 * (float)v11) < v26)
      {
        BOOL v28 = (v11 & (v11 - 1)) != 0;
        if (v11 < 3) {
          BOOL v28 = 1;
        }
        unint64_t v29 = v28 | (2 * v11);
        unint64_t v30 = vcvtps_u32_f32(v26 / v27);
        if (v29 <= v30) {
          size_t v31 = v30;
        }
        else {
          size_t v31 = v29;
        }
        std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)v12, v31);
        unint64_t v11 = *((void *)v10 + 5);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v19 >= v11) {
            uint64_t v6 = v19 % v11;
          }
          else {
            uint64_t v6 = v19;
          }
        }
        else
        {
          uint64_t v6 = (v11 - 1) & v19;
        }
      }
      uint64_t v32 = *v12;
      unint64_t v33 = *(void **)(*v12 + 8 * v6);
      if (v33)
      {
        *uint64_t v24 = *v33;
      }
      else
      {
        *uint64_t v24 = *v15;
        *unint64_t v15 = v24;
        *(void *)(v32 + 8 * v6) = v15;
        if (!*v24) {
          goto LABEL_48;
        }
        unint64_t v34 = *(void *)(*v24 + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v34 >= v11) {
            v34 %= v11;
          }
        }
        else
        {
          v34 &= v11 - 1;
        }
        unint64_t v33 = (void *)(*v12 + 8 * v34);
      }
      void *v33 = v24;
LABEL_48:
      ++*((void *)v10 + 7);
LABEL_49:
      char v14 = (uint64_t *)*v14;
    }
    while (v14);
  }
  *((_DWORD *)v10 + 1_Block_object_dispose(&a9, 8) = 0;
  uint64_t v93 = 0x676C6F626F776E72;
  int v94 = 0;
  *((_DWORD *)v10 + 7) = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v85, (const AMCP::Address *)&v93, &AMCP::k_object_id_unknown);
  unint64_t v35 = a4;
  unint64_t v36 = *(void *)(v83 + 176);
  if (!v36)
  {
    uint64_t v38 = v84;
    goto LABEL_74;
  }
  uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)v36);
  v37.i16[0] = vaddlv_u8(v37);
  uint64_t v38 = v84;
  if (v37.u32[0] > 1uLL)
  {
    unint64_t v11 = a4;
    if (v36 <= a4) {
      unint64_t v11 = a4 % v36;
    }
  }
  else
  {
    unint64_t v11 = (v36 - 1) & a4;
  }
  uint64_t v46 = *(uint64_t ***)(*(void *)(v83 + 168) + 8 * v11);
  if (!v46 || (long long v47 = *v46) == 0)
  {
LABEL_74:
    unint64_t v49 = operator new(0x28uLL);
    uint64_t v50 = (void *)(v83 + 184);
    void *v49 = 0;
    v49[1] = a4;
    *((_DWORD *)v49 + 4) = a4;
    v49[3] = v85;
    v49[4] = v10;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
    float v51 = (float)(unint64_t)(*(void *)(v83 + 192) + 1);
    float v52 = *(float *)(v83 + 200);
    if (v36 && (float)(v52 * (float)v36) >= v51)
    {
      unint64_t v35 = v11;
      goto LABEL_131;
    }
    BOOL v53 = 1;
    if (v36 >= 3) {
      BOOL v53 = (v36 & (v36 - 1)) != 0;
    }
    unint64_t v54 = v53 | (2 * v36);
    unint64_t v55 = vcvtps_u32_f32(v51 / v52);
    if (v54 <= v55) {
      int8x8_t prime = (int8x8_t)v55;
    }
    else {
      int8x8_t prime = (int8x8_t)v54;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v36 = *(void *)(v83 + 176);
    }
    if (*(void *)&prime <= v36)
    {
      if (*(void *)&prime >= v36) {
        goto LABEL_127;
      }
      unint64_t v63 = vcvtps_u32_f32((float)*(unint64_t *)(v83 + 192) / *(float *)(v83 + 200));
      if (v36 < 3 || (uint8x8_t v64 = (uint8x8_t)vcnt_s8((int8x8_t)v36), v64.i16[0] = vaddlv_u8(v64), v64.u32[0] > 1uLL))
      {
        unint64_t v63 = std::__next_prime(v63);
      }
      else
      {
        uint64_t v65 = 1 << -(char)__clz(v63 - 1);
        if (v63 >= 2) {
          unint64_t v63 = v65;
        }
      }
      if (*(void *)&prime <= v63) {
        int8x8_t prime = (int8x8_t)v63;
      }
      if (*(void *)&prime >= v36)
      {
        unint64_t v36 = *(void *)(v83 + 176);
        goto LABEL_127;
      }
      if (!*(void *)&prime)
      {
        __int16 v82 = *(void **)(v83 + 168);
        *(void *)(v83 + 16_Block_object_dispose(&a9, 8) = 0;
        if (v82) {
          operator delete(v82);
        }
        unint64_t v36 = 0;
        *(void *)(v83 + 176) = 0;
        goto LABEL_127;
      }
    }
    if (*(void *)&prime >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v57 = operator new(8 * *(void *)&prime);
    uint64_t v58 = *(void **)(v83 + 168);
    *(void *)(v83 + 16_Block_object_dispose(&a9, 8) = v57;
    if (v58) {
      operator delete(v58);
    }
    uint64_t v59 = 0;
    *(int8x8_t *)(v83 + 176) = prime;
    do
      *(void *)(*(void *)(v83 + 168) + 8 * v59++) = 0;
    while (*(void *)&prime != v59);
    uint64_t v60 = (void *)*v50;
    if (*v50)
    {
      unint64_t v61 = v60[1];
      uint8x8_t v62 = (uint8x8_t)vcnt_s8(prime);
      v62.i16[0] = vaddlv_u8(v62);
      if (v62.u32[0] > 1uLL)
      {
        if (v61 >= *(void *)&prime) {
          v61 %= *(void *)&prime;
        }
      }
      else
      {
        v61 &= *(void *)&prime - 1;
      }
      *(void *)(*(void *)(v83 + 168) + 8 * v61) = v50;
      uint64_t v69 = (void *)*v60;
      if (*v60)
      {
        do
        {
          unint64_t v70 = v69[1];
          if (v62.u32[0] > 1uLL)
          {
            if (v70 >= *(void *)&prime) {
              v70 %= *(void *)&prime;
            }
          }
          else
          {
            v70 &= *(void *)&prime - 1;
          }
          if (v70 != v61)
          {
            uint64_t v71 = *(void *)(v83 + 168);
            if (!*(void *)(v71 + 8 * v70))
            {
              *(void *)(v71 + 8 * v70) = v60;
              goto LABEL_123;
            }
            void *v60 = *v69;
            void *v69 = **(void **)(*(void *)(v83 + 168) + 8 * v70);
            **(void **)(*(void *)(v83 + 168) + 8 * v70) = v69;
            uint64_t v69 = v60;
          }
          unint64_t v70 = v61;
LABEL_123:
          uint64_t v60 = v69;
          uint64_t v69 = (void *)*v69;
          unint64_t v61 = v70;
        }
        while (v69);
      }
    }
    unint64_t v36 = (unint64_t)prime;
LABEL_127:
    if ((v36 & (v36 - 1)) != 0)
    {
      if (v36 <= v35) {
        v35 %= v36;
      }
    }
    else
    {
      unint64_t v35 = (v36 - 1) & v35;
    }
LABEL_131:
    uint64_t v72 = *(void *)(v83 + 168);
    uint64_t v73 = *(void **)(v72 + 8 * v35);
    if (v73)
    {
      void *v49 = *v73;
    }
    else
    {
      void *v49 = *v50;
      void *v50 = v49;
      *(void *)(v72 + 8 * v35) = v50;
      if (!*v49)
      {
LABEL_140:
        ++*(void *)(v83 + 192);
        goto LABEL_141;
      }
      unint64_t v74 = *(void *)(*v49 + 8);
      if ((v36 & (v36 - 1)) != 0)
      {
        if (v74 >= v36) {
          v74 %= v36;
        }
      }
      else
      {
        v74 &= v36 - 1;
      }
      uint64_t v73 = (void *)(*(void *)(v83 + 168) + 8 * v74);
    }
    void *v73 = v49;
    goto LABEL_140;
  }
  while (1)
  {
    unint64_t v48 = v47[1];
    if (v48 == a4) {
      break;
    }
    if (v37.u32[0] > 1uLL)
    {
      if (v48 >= v36) {
        v48 %= v36;
      }
    }
    else
    {
      v48 &= v36 - 1;
    }
    if (v48 != v11) {
      goto LABEL_74;
    }
LABEL_73:
    long long v47 = (uint64_t *)*v47;
    if (!v47) {
      goto LABEL_74;
    }
  }
  if (*((_DWORD *)v47 + 4) != a4) {
    goto LABEL_73;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
  int v81 = (std::__shared_weak_count *)v47[4];
  v47[3] = (uint64_t)v85;
  v47[4] = (uint64_t)v10;
  if (v81) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v81);
  }
LABEL_141:
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v86);
  unsigned int v76 = *((_DWORD *)v10 + 7);
  unsigned int v95 = *(_DWORD *)v85;
  unsigned int v75 = v95;
  uint64_t v93 = v83;
  LOBYTE(v94) = 1;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)v83);
  char v77 = (void *)(v83 + 408);
  uint64_t v78 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)(v83 + 408), v75);
  if (!v78)
  {
    LODWORD(v86) = v76;
    unint64_t v87 = 0;
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    std::vector<unsigned int> __p = 0;
    uint64_t v91 = 0;
    uint64_t v92 = 0;
    uint64_t v78 = std::unordered_map<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>::insert_or_assign[abi:ne180100]<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>((uint64_t)v77, v75, (uint64_t)&v86);
    if (__p) {
      operator delete(__p);
    }
    if (v87) {
      operator delete(v87);
    }
  }
  *((_DWORD *)v78 + 6) = v76;
  if (v76)
  {
    int v79 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v77, v76);
    if (!v79)
    {
      LODWORD(v86) = 0;
      unint64_t v87 = 0;
      uint64_t v88 = 0;
      uint64_t v89 = 0;
      std::vector<unsigned int> __p = 0;
      uint64_t v91 = 0;
      uint64_t v92 = 0;
      int v79 = std::unordered_map<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>::insert_or_assign[abi:ne180100]<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>((uint64_t)v77, v76, (uint64_t)&v86);
      if (__p) {
        operator delete(__p);
      }
      if (v87) {
        operator delete(v87);
      }
    }
    AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::insert_unique((std::vector<unsigned int> *)(v79 + 4), &v95);
    do
    {
      __int16 v80 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v77, v76);
      if (!v80)
      {
        LODWORD(v86) = 0;
        uint64_t v88 = 0;
        uint64_t v89 = 0;
        unint64_t v87 = 0;
        uint64_t v91 = 0;
        uint64_t v92 = 0;
        std::vector<unsigned int> __p = 0;
        __int16 v80 = std::unordered_map<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>::insert_or_assign[abi:ne180100]<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>((uint64_t)v77, v76, (uint64_t)&v86);
        if (__p) {
          operator delete(__p);
        }
        if (v87) {
          operator delete(v87);
        }
      }
      AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::insert_unique((std::vector<unsigned int> *)(v80 + 8), &v95);
      unsigned int v76 = *((_DWORD *)v80 + 6);
    }
    while (v76);
  }
  uint64_t result = std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v93);
  char *v38 = v85;
  v38[1] = (AMCP::Core::Core *)v10;
  return result;
}

void sub_1BABFE738(void *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>::operator()[abi:ne180100](1, v1);
  __clang_call_terminate(a1);
}

uint64_t std::__shared_ptr_emplace<AMCP::Core::Core>::__on_zero_shared(uint64_t a1)
{
  if (atomic_load((unsigned int *)(a1 + 72)))
  {
    _os_assert_log();
    uint64_t result = _os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v2 = a1 + 32;
    return std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table(v2);
  }
  return result;
}

void std::__shared_ptr_emplace<AMCP::Core::Core>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1464818;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Core::Core>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1464818;
  std::__shared_weak_count::~__shared_weak_count(this);
}

std::__shared_mutex_base *AMCP::Core::Broker::destroy_core(std::__shared_mutex_base *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = this;
    uint64_t v32 = this;
    LOBYTE(v33) = 1;
    std::__shared_mutex_base::lock(this);
    unint64_t v4 = v3 + 1;
    unint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(&v3[1].__mut_.__m_.__sig, a2);
    if (v5)
    {
      int8x8_t v6 = *(int8x8_t *)v3[1].__mut_.__m_.__opaque;
      unint64_t v7 = v5[1];
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        if (v7 >= *(void *)&v6) {
          v7 %= *(void *)&v6;
        }
      }
      else
      {
        v7 &= *(void *)&v6 - 1;
      }
      uint64_t v9 = *(uint64_t **)(v4->__mut_.__m_.__sig + 8 * v7);
      do
      {
        unint64_t v10 = (char *)v9;
        uint64_t v9 = (uint64_t *)*v9;
      }
      while (v9 != v5);
      if (v10 == &v3[1].__mut_.__m_.__opaque[8]) {
        goto LABEL_20;
      }
      unint64_t v11 = *((void *)v10 + 1);
      if (v8.u32[0] > 1uLL)
      {
        if (v11 >= *(void *)&v6) {
          v11 %= *(void *)&v6;
        }
      }
      else
      {
        v11 &= *(void *)&v6 - 1;
      }
      if (v11 != v7)
      {
LABEL_20:
        if (!*v5) {
          goto LABEL_21;
        }
        unint64_t v12 = *(void *)(*v5 + 8);
        if (v8.u32[0] > 1uLL)
        {
          if (v12 >= *(void *)&v6) {
            v12 %= *(void *)&v6;
          }
        }
        else
        {
          v12 &= *(void *)&v6 - 1;
        }
        if (v12 != v7) {
LABEL_21:
        }
          *(void *)(v4->__mut_.__m_.__sig + 8 * v7) = 0;
      }
      uint64_t v13 = *v5;
      if (*v5)
      {
        unint64_t v14 = *(void *)(v13 + 8);
        if (v8.u32[0] > 1uLL)
        {
          if (v14 >= *(void *)&v6) {
            v14 %= *(void *)&v6;
          }
        }
        else
        {
          v14 &= *(void *)&v6 - 1;
        }
        if (v14 != v7)
        {
          *(void *)(v4->__mut_.__m_.__sig + 8 * v14) = v10;
          uint64_t v13 = *v5;
        }
      }
      *(void *)unint64_t v10 = v13;
      uint64_t *v5 = 0;
      --*(void *)&v3[1].__mut_.__m_.__opaque[16];
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>::operator()[abi:ne180100](1, v5);
    }
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v32);
    unint64_t v30 = v3;
    char v31 = 1;
    std::__shared_mutex_base::lock(v3);
    opaque = v3[2].__gate1_.__cv_.__opaque;
    uint64_t v16 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v3[2].__gate1_.__cv_.__opaque, a2);
    if (v16)
    {
      unsigned int v17 = (std::__shared_mutex_base *)v16;
      for (unsigned int i = *((_DWORD *)v16 + 6); i; unsigned int i = *((_DWORD *)v20 + 6))
      {
        unint64_t v19 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v3[2].__gate1_.__cv_.__opaque, i);
        if (!v19) {
          break;
        }
        uint8x8_t v20 = v19;
        AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::erase((uint64_t)(v19 + 4), a2);
        AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>::erase((uint64_t)(v20 + 8), a2);
      }
      int8x8_t v21 = *(int8x8_t *)&v3[2].__gate1_.__cv_.__opaque[8];
      unint64_t v22 = *(void *)v17->__mut_.__m_.__opaque;
      uint8x8_t v23 = (uint8x8_t)vcnt_s8(v21);
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.u32[0] > 1uLL)
      {
        if (v22 >= *(void *)&v21) {
          v22 %= *(void *)&v21;
        }
      }
      else
      {
        v22 &= *(void *)&v21 - 1;
      }
      uint64_t v24 = *(char **)(*(void *)opaque + 8 * v22);
      do
      {
        uint64_t v25 = v24;
        uint64_t v24 = *(char **)v24;
      }
      while (v24 != (char *)v17);
      if (v25 == &v3[2].__gate1_.__cv_.__opaque[16]) {
        goto LABEL_51;
      }
      unint64_t v26 = *((void *)v25 + 1);
      if (v23.u32[0] > 1uLL)
      {
        if (v26 >= *(void *)&v21) {
          v26 %= *(void *)&v21;
        }
      }
      else
      {
        v26 &= *(void *)&v21 - 1;
      }
      if (v26 != v22)
      {
LABEL_51:
        if (!v17->__mut_.__m_.__sig) {
          goto LABEL_52;
        }
        unint64_t v27 = *(void *)(v17->__mut_.__m_.__sig + 8);
        if (v23.u32[0] > 1uLL)
        {
          if (v27 >= *(void *)&v21) {
            v27 %= *(void *)&v21;
          }
        }
        else
        {
          v27 &= *(void *)&v21 - 1;
        }
        if (v27 != v22) {
LABEL_52:
        }
          *(void *)(*(void *)opaque + 8 * v22) = 0;
      }
      uint64_t sig = v17->__mut_.__m_.__sig;
      if (v17->__mut_.__m_.__sig)
      {
        unint64_t v29 = *(void *)(sig + 8);
        if (v23.u32[0] > 1uLL)
        {
          if (v29 >= *(void *)&v21) {
            v29 %= *(void *)&v21;
          }
        }
        else
        {
          v29 &= *(void *)&v21 - 1;
        }
        if (v29 != v22)
        {
          *(void *)(*(void *)opaque + 8 * v29) = v25;
          uint64_t sig = v17->__mut_.__m_.__sig;
        }
      }
      *(void *)uint64_t v25 = sig;
      v17->__mut_.__m_.__uint64_t sig = 0;
      --*(void *)&v3[2].__gate1_.__cv_.__opaque[24];
      uint64_t v32 = v17;
      unint64_t v33 = &v3[2].__gate1_.__cv_.__opaque[16];
      char v34 = 1;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::tuple<unsigned int,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>,AMCP::Utility::Sorted_Vector<unsigned int,AMCP::Utility::Extract_Key_Self<unsigned int>,std::less<unsigned int>,std::allocator<unsigned int>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v32);
    }
    return (std::__shared_mutex_base *)std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v30);
  }
  return this;
}

void *std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_1,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_1,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core6Broker17destroy_all_coresEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_1,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()()
{
  return 1;
}

void std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_1,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14648E8;
}

void *std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_1,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F14648E8;
  return result;
}

void std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_1,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
}

void *std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_0,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_0,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core6Broker17destroy_all_coresEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_0,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()()
{
  return 1;
}

void std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_0,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1464868;
}

void *std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_0,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F1464868;
  return result;
}

void std::__function::__func<AMCP::Core::Broker::destroy_all_cores(void)::$_0,std::allocator<AMCP::Core::Broker::destroy_all_cores(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
}

uint64_t AMCP::IO_Core::Reflector::get_class_id(AMCP::IO_Core::Reflector *this)
{
  return 1919247982;
}

void AMCP::IO_Core::Reflector::~Reflector(AMCP::IO_Core::Reflector *this)
{
  *(void *)this = &unk_1F1464968;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  AMCP::IO_Core::Node::~Node(this);

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F1464968;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  AMCP::IO_Core::Node::~Node(this);
}

void *std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1BABFF084(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1BABFF2F0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core9Reflector18install_node_procsERKN2CA17StreamDescriptionEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

AMCP::Log::Scope_Registry *std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::operator()@<X0>(AMCP::Log::Scope_Registry *result@<X0>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (*a2)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v4 = **(NSObject ***)buf;
    if (*(void *)v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v23);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      unint64_t v5 = pthread_self();
      mach_port_t v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)uint8x8_t v23 = 2080;
      *(void *)&void v23[2] = "Reflector.cpp";
      __int16 v24 = 1024;
      int v25 = 91;
      __int16 v26 = 2080;
      *(void *)unint64_t v27 = "not (index == 0)";
      _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Reflector nodes only support one terminal in and one terminal out", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v21);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Reflector nodes only support one terminal in and one terminal out", (uint64_t)&v13);
    std::logic_error::logic_error(&v14, &v13);
    v14.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v15, &v14);
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v20 = -1;
    v15.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v16 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v15);
    *(void *)&v27[6] = "auto AMCP::IO_Core::Reflector::install_node_procs(const CA::StreamDescription &)::(anonymous cl"
                         "ass)::operator()(Direction, size_t) const";
    BOOL v28 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Reflector.cpp";
    int v29 = 91;
    std::vector<void *>::vector(&v8);
    int v7 = backtrace((void **)v8, (*((void *)&v8 + 1) - (void)v8) >> 3);
    std::vector<void *>::resize((char **)&v8, v7);
    long long v11 = v8;
    uint64_t v12 = v9;
    long long v8 = 0uLL;
    uint64_t v9 = 0;
    unint64_t v10 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v3 = *((void *)result + 2);
  *a3 = *((void *)result + 1);
  a3[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1464A90;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F1464A90;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::~__func(void *a1)
{
  *a1 = &unk_1F1464A90;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::~__func(void *a1)
{
  *a1 = &unk_1F1464A90;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core9Reflector18install_node_procsERKN2CA17StreamDescriptionEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::operator()@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1464A10;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F1464A10;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1464A10;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0,std::allocator<AMCP::IO_Core::Reflector::install_node_procs(CA::StreamDescription const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1464A10;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<AMCP::DAL::Multi_Reader_Synchronized_Mixer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::DAL::Multi_Reader_Synchronized_Mixer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14649C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::DAL::Multi_Reader_Synchronized_Mixer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14649C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<AMCP::DAL::Synchronizer>::__on_zero_shared(uint64_t a1)
{
  mach_port_t v6 = (void **)(a1 + 168);
  std::vector<std::function<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 160);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  return std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::~__hash_table(a1 + 32);
}

void std::__shared_ptr_emplace<AMCP::DAL::Synchronizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1470E18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::DAL::Synchronizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1470E18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<int (*)(unsigned long long),std::allocator<int (*)(unsigned long long)>,void ()(unsigned long long)>::target_type()
{
}

uint64_t std::__function::__func<int (*)(unsigned long long),std::allocator<int (*)(unsigned long long)>,void ()(unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), 0x80000001BB0060D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t std::__function::__func<int (*)(unsigned long long),std::allocator<int (*)(unsigned long long)>,void ()(unsigned long long)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<int (*)(unsigned long long),std::allocator<int (*)(unsigned long long)>,void ()(unsigned long long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1464B28;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<int (*)(unsigned long long),std::allocator<int (*)(unsigned long long)>,void ()(unsigned long long)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1464B28;
  result[1] = v3;
  return result;
}

void std::__function::__func<int (*)(unsigned long long),std::allocator<int (*)(unsigned long long)>,void ()(unsigned long long)>::~__func()
{
}

uint64_t AMCP::Graph::Manifest_Queue::flush(AMCP::Graph::Manifest_Queue *this)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = (std::condition_variable *)((char *)this + 264);
  std::condition_variable::notify_all((std::condition_variable *)((char *)this + 264));
  uint64_t v2 = (uint64_t **)*((void *)this + 70);
  if (v2)
  {
    AMCP::Graph::Manifest::end_processing(v2, *(_DWORD *)this, (AMCP::Graph::Manifest_Queue *)((char *)this + 312));
    AMCP::Graph::Manifest::teardown_processing(*((AMCP::Graph::Manifest **)this + 70));
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 71);
    *((_OWORD *)this + 35) = 0u;
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  std::mutex::lock((std::mutex *)((char *)this + 112));
  *((unsigned char *)this + 176) = 1;
  uint64_t v18 = (std::mutex *)((char *)this + 112);
  std::mutex::unlock((std::mutex *)((char *)this + 112));
  AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::dequeue_with_lock((unint64_t)v37, (uint64_t)this + 16);
  while (v53)
  {
    if (v37[0])
    {
      AMCP::Graph::Manifest::end_processing((uint64_t **)v37[0], *(_DWORD *)this, (const AMCP::Graph::Manifest_Execution_Context *)&v43);
      AMCP::Graph::Manifest::teardown_processing(v37[0]);
    }
    AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::dequeue_with_lock((unint64_t)&v19, (uint64_t)this + 16);
    if (v53 == v36)
    {
      if (v53)
      {
        long long v5 = v19;
        long long v19 = 0uLL;
        mach_port_t v6 = (std::__shared_weak_count *)v37[1];
        *(_OWORD *)uint8x8_t v37 = v5;
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        uint64_t v38 = v20;
        if ((void)__p)
        {
          *((void *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        long long __p = v21;
        uint64_t v40 = v22;
        uint64_t v22 = 0;
        long long v21 = 0uLL;
        long long v41 = v23;
        long long v42 = v24;
        long long v43 = v25;
        uint64_t v44 = v26;
        long long v7 = v27;
        long long v27 = 0uLL;
        long long v8 = (std::__shared_weak_count *)*((void *)&v45 + 1);
        long long v45 = v7;
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        int v46 = v28;
        uint64_t v9 = v48;
        uint64_t v48 = v29;
        uint64_t v29 = v9;
        caulk::mach::details::release_os_object(0, v4);
        uint64_t v10 = *(void *)&v50[16];
        long long v12 = v49;
        long long v11 = *(_OWORD *)v50;
        long long v49 = v30;
        *(_OWORD *)uint64_t v50 = v31;
        *(void *)&v50[16] = v32;
        long long v30 = v12;
        long long v31 = v11;
        uint64_t v32 = v10;
        LOBYTE(v10) = v50[24];
        v50[24] = v33;
        char v33 = v10;
        LOBYTE(v10) = v51;
        char v51 = v34;
        char v34 = v10;
        __int16 v52 = v35;
      }
    }
    else if (v53)
    {
      caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&v47);
      if (*((void *)&v45 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v45 + 1));
      }
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (v37[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v37[1]);
      }
      char v53 = 0;
    }
    else
    {
      *(_OWORD *)uint8x8_t v37 = v19;
      long long v19 = 0uLL;
      long long __p = v21;
      uint64_t v38 = v20;
      uint64_t v40 = v22;
      uint64_t v22 = 0;
      long long v21 = 0uLL;
      long long v41 = v23;
      long long v42 = v24;
      uint64_t v44 = v26;
      long long v43 = v25;
      long long v45 = v27;
      long long v27 = 0uLL;
      int v46 = v28;
      long long v49 = 0u;
      memset(v50, 0, sizeof(v50));
      char v51 = 0;
      uint64_t v47 = MEMORY[0x1E4FB7EA8] + 16;
      uint64_t v48 = v29;
      uint64_t v29 = 0;
      caulk::mach::details::release_os_object(0, v4);
      uint64_t v13 = *(void *)&v50[16];
      long long v15 = v49;
      long long v14 = *(_OWORD *)v50;
      long long v49 = v30;
      *(_OWORD *)uint64_t v50 = v31;
      *(void *)&v50[16] = v32;
      long long v30 = v15;
      long long v31 = v14;
      uint64_t v32 = v13;
      LOBYTE(v13) = v50[24];
      v50[24] = v33;
      char v33 = v13;
      LOBYTE(v13) = v51;
      char v51 = v34;
      char v34 = v13;
      __int16 v52 = v35;
      char v53 = 1;
    }
    std::__optional_destruct_base<AMCP::Graph::Manifest_Queue::Incoming_Payload,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v19);
  }
  std::mutex::lock(v18);
  *((unsigned char *)this + 176) = 0;
  std::mutex::unlock(v18);
  std::condition_variable::notify_all(v17);
  return std::__optional_destruct_base<AMCP::Graph::Manifest_Queue::Incoming_Payload,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v37);
}

void sub_1BAC00214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void *std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<AMCP::Graph::Manifest_Execution_Context,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 120))
  {
    caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)(a1 + 48));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
  }
  return a1;
}

uint64_t caulk::concurrent::stack<AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message,caulk::concurrent::intrusive_single_link_member<AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message,&AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message::m_next_free_message>>::pop()
{
  _X0 = 0;
  _X1 = 0;
  __asm { CASPAL          X0, X1, X0, X1, [X8] }
  if (result)
  {
    uint64_t v7 = result;
    do
    {
      _X6 = atomic_load((unint64_t *)(result + 200));
      _X5 = 0;
      __asm { CASPAL          X4, X5, X6, X7, [X8] }
      if (_X4 == v7) {
        break;
      }
      uint64_t result = _X4;
      uint64_t v7 = _X4;
    }
    while (_X4);
  }
  return result;
}

void *AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message::~Message(void *a1)
{
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)(a1 + 16));
  uint64_t v2 = (std::__shared_weak_count *)a1[14];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

void AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::dequeue_with_lock(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a2 + 96);
  std::mutex::lock((std::mutex *)(a2 + 96));
  AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::dequeue(a1, (atomic_ullong *)a2);

  std::mutex::unlock(v4);
}

void sub_1BAC003FC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<AMCP::Graph::Manifest_Queue::Incoming_Payload,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 200))
  {
    caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)(a1 + 128));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 112);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    uint64_t v3 = *(void **)(a1 + 24);
    if (v3)
    {
      *(void *)(a1 + 32) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  return a1;
}

__n128 caulk::mach::os_workgroup_interval_managed::swap(__n128 *this, __n128 *a2)
{
  unint64_t v4 = this->n128_u64[1];
  this->n128_u64[1] = 0;
  this->n128_u64[1] = a2->n128_u64[1];
  a2->n128_u64[1] = v4;
  caulk::mach::details::release_os_object(0, a2);
  __n128 result = this[1];
  __n128 v6 = this[2];
  unint64_t v7 = this[3].n128_u64[0];
  unint64_t v8 = a2[3].n128_u64[0];
  __n128 v9 = a2[2];
  this[1] = a2[1];
  this[2] = v9;
  this[3].n128_u64[0] = v8;
  a2[3].n128_u64[0] = v7;
  a2[1] = result;
  a2[2] = v6;
  LOBYTE(v7) = this[3].n128_u8[8];
  this[3].n128_u8[8] = a2[3].n128_u8[8];
  a2[3].n128_u8[8] = v7;
  LOBYTE(v7) = this[3].n128_u8[9];
  this[3].n128_u8[9] = a2[3].n128_u8[9];
  a2[3].n128_u8[9] = v7;
  return result;
}

unint64_t AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::dequeue(unint64_t result, atomic_ullong *a2)
{
  unint64_t v2 = result;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  _X22 = a2[8];
  if (!_X22)
  {
    unint64_t v4 = atomic_exchange_explicit(a2, 0, memory_order_acquire);
    if (!v4)
    {
      *(unsigned char *)__n128 result = 0;
      *(unsigned char *)(result + 200) = 0;
      return result;
    }
    _X22 = 0;
    do
    {
      unint64_t v5 = _X22;
      _X22 = v4;
      __n128 v6 = (unint64_t *)(v4 + 200);
      unint64_t v4 = atomic_load((unint64_t *)(v4 + 200));
      atomic_store(v5, v6);
    }
    while (v4);
    a2[8] = _X22;
  }
  unint64_t v7 = atomic_load((unint64_t *)(_X22 + 200));
  a2[8] = v7;
  *(void *)__n128 result = *(void *)_X22;
  uint64_t v8 = *(void *)(_X22 + 8);
  *(void *)(result + _Block_object_dispose(&a9, 8) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(_X22 + 16);
  *(void *)(result + 24) = 0;
  *(void *)(result + 16) = v9;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request>::__init_with_size[abi:ne180100]<AMCP::IO_Core::Play_State_Manager::Play_Request*,AMCP::IO_Core::Play_State_Manager::Play_Request*>((void *)(result + 24), *(const void **)(_X22 + 24), *(void *)(_X22 + 32), (uint64_t)(*(void *)(_X22 + 32) - *(void *)(_X22 + 24)) >> 2);
  long long v11 = *(_OWORD *)(_X22 + 64);
  *(_OWORD *)(v2 + 4_Block_object_dispose(&a9, 8) = *(_OWORD *)(_X22 + 48);
  *(_OWORD *)(v2 + 64) = v11;
  long long v12 = *(_OWORD *)(_X22 + 80);
  *(void *)(v2 + 96) = *(void *)(_X22 + 96);
  *(_OWORD *)(v2 + 80) = v12;
  *(void *)(v2 + 104) = *(void *)(_X22 + 104);
  uint64_t v13 = *(void *)(_X22 + 112);
  *(void *)(v2 + 112) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(v2 + 120) = *(_DWORD *)(_X22 + 120);
  *(void *)(v2 + 12_Block_object_dispose(&a9, 8) = MEMORY[0x1E4FB7EA0] + 16;
  *(void *)(v2 + 136) = caulk::mach::details::retain_os_object(*(caulk::mach::details **)(_X22 + 136), v10);
  long long v15 = *(_OWORD *)(_X22 + 169);
  long long v16 = *(_OWORD *)(_X22 + 160);
  *(_OWORD *)(v2 + 144) = *(_OWORD *)(_X22 + 144);
  *(_OWORD *)(v2 + 160) = v16;
  *(_OWORD *)(v2 + 169) = v15;
  *(void *)(v2 + 12_Block_object_dispose(&a9, 8) = MEMORY[0x1E4FB7EA8] + 16;
  *(unsigned char *)(v2 + 185) = *(unsigned char *)(_X22 + 185);
  *(_WORD *)(v2 + 192) = *(_WORD *)(_X22 + 192);
  *(unsigned char *)(v2 + 200) = 1;
  uint64_t v41 = 0;
  memset(&__p[10], 0, 24);
  memset(__p, 0, 24);
  memset((char *)v40 + 8, 0, 56);
  *(void *)&v40[0] = MEMORY[0x1E4FB7EA8] + 16;
  uint64_t v17 = *(std::__shared_weak_count **)(_X22 + 8);
  *(void *)_X22 = 0;
  *(void *)(_X22 + _Block_object_dispose(&a9, 8) = 0;
  if (v17)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    uint64_t v18 = __p[0];
  }
  else
  {
    uint64_t v18 = 0;
  }
  *(void *)(_X22 + 16) = v18;
  long long v19 = *(void **)(_X22 + 24);
  if (v19)
  {
    *(void *)(_X22 + 32) = v19;
    operator delete(v19);
  }
  uint64_t v20 = (long long *)(_X22 + 144);
  *(_OWORD *)(_X22 + 24) = *(_OWORD *)&__p[1];
  *(void *)(_X22 + 40) = 0;
  *(_OWORD *)(_X22 + 4_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(_X22 + 64) = 0u;
  *(_OWORD *)(_X22 + 80) = 0u;
  *(void **)(_X22 + 96) = __p[10];
  long long v21 = *(std::__shared_weak_count **)(_X22 + 112);
  *(_OWORD *)(_X22 + 104) = *(_OWORD *)&__p[11];
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  *(_DWORD *)(_X22 + 120) = 1065353216;
  uint64_t v22 = *(void *)(_X22 + 136);
  *(void *)(_X22 + 136) = *((void *)&v40[0] + 1);
  *((void *)&v40[0] + 1) = v22;
  caulk::mach::details::release_os_object(0, v14);
  long long v23 = *v20;
  long long v24 = *(_OWORD *)(_X22 + 160);
  uint64_t v25 = *(void *)(_X22 + 176);
  uint64_t v26 = *(void *)&v40[3];
  long long v27 = v40[2];
  *uint64_t v20 = v40[1];
  *(_OWORD *)(_X22 + 160) = v27;
  *(void *)(_X22 + 176) = v26;
  *(void *)&v40[3] = v25;
  v40[2] = v24;
  v40[1] = v23;
  LOBYTE(v25) = *(unsigned char *)(_X22 + 184);
  *(unsigned char *)(_X22 + 184) = BYTE8(v40[3]);
  BYTE8(v40[3]) = v25;
  LOBYTE(v25) = *(unsigned char *)(_X22 + 185);
  *(unsigned char *)(_X22 + 185) = BYTE9(v40[3]);
  BYTE9(v40[3]) = v25;
  *(_WORD *)(_X22 + 192) = v41;
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v40);
  _X2 = 0;
  _X3 = 0;
  __asm { CASPAL          X2, X3, X2, X3, [X8] }
  atomic_store(_X2, (unint64_t *)(_X22 + 200));
  _X4 = _X22;
  _X1 = 0;
  __asm { CASPAL          X0, X1, X4, X5, [X8] }
  if (result != _X2)
  {
    do
    {
      atomic_store(result, (unint64_t *)(_X22 + 200));
      _X3 = 0;
      __asm { CASPAL          X2, X3, X22, X23, [X8] }
      _ZF = _X2 == result;
      __n128 result = _X2;
    }
    while (!_ZF);
  }
  return result;
}

void sub_1BAC008E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

std::string *AMCP::Graph::Manifest_Queue::maybe_acquire_new_manifest(AMCP::Graph::Manifest_Queue *this)
{
  unint64_t v2 = 0;
  uint64_t v181 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (AMCP::Graph::Manifest_Queue *)((char *)this + 312);
  uint64_t v121 = (atomic_ullong *)((char *)this + 16);
  long long v118 = (std::mutex *)((char *)this + 200);
  CFArrayRef v119 = (long long *)((char *)this + 376);
  long long v120 = (std::condition_variable *)((char *)this + 264);
  unint64_t v114 = (char *)this + 432;
  uint64_t v115 = (char *)this + 704;
  unint64_t v116 = (char *)this + 640;
  uint64_t v117 = (AMCP::Graph::Manifest_Queue *)((char *)this + 312);
  while (1)
  {
    AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::dequeue((unint64_t)&v164, v121);
    if (!v179) {
      break;
    }
    std::logic_error v153 = *(std::logic_error *)v3;
    uint64_t v6 = *((void *)this + 42);
    unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 43);
    uint64_t v154 = *((void *)v3 + 2);
    uint64_t v155 = v6;
    long long v156 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v157 = *((_DWORD *)this + 88);
    uint64_t v158 = MEMORY[0x1E4FB7EA0] + 16;
    char v159 = (caulk::mach::details *)caulk::mach::details::retain_os_object(*((caulk::mach::details **)this + 46), v4);
    long long v8 = v119[1];
    long long v160 = *v119;
    *(_OWORD *)long long v161 = v8;
    *(_OWORD *)&v161[9] = *(long long *)((char *)v119 + 25);
    uint64_t v158 = MEMORY[0x1E4FB7EA8] + 16;
    char v162 = *((unsigned char *)this + 417);
    __int16 v163 = *((_WORD *)this + 212);
    uint64_t v9 = *((void *)this + 42);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 43);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v9)
    {
      int v21 = 1;
      if (v10) {
        goto LABEL_47;
      }
      goto LABEL_48;
    }
    uint64_t v11 = *((void *)this + 42);
    long long v12 = (std::__shared_weak_count *)*((void *)this + 43);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = v171;
    long long v14 = (std::__shared_weak_count *)v172;
    if (v172) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v172 + 8), 1uLL, memory_order_relaxed);
    }
    if (v11 && v13)
    {
      long long v15 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
      uint64_t v17 = v15[23];
      if ((v17 & 0x80u) == 0) {
        uint64_t v18 = v15[23];
      }
      else {
        uint64_t v18 = *((void *)v15 + 1);
      }
      uint64_t v19 = *(unsigned __int8 *)(v16 + 23);
      int v20 = (char)v19;
      if ((v19 & 0x80u) != 0) {
        uint64_t v19 = *(void *)(v16 + 8);
      }
      if (v18 != v19) {
        goto LABEL_42;
      }
      if (v20 >= 0) {
        unint64_t v7 = (unsigned __int8 *)v16;
      }
      else {
        unint64_t v7 = *(unsigned __int8 **)v16;
      }
      if ((v17 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v15, v7, *((void *)v15 + 1))) {
          goto LABEL_42;
        }
      }
      else if (v15[23])
      {
        while (*v15 == *v7)
        {
          ++v15;
          ++v7;
          if (!--v17) {
            goto LABEL_31;
          }
        }
LABEL_42:
        int v21 = 1;
        uint64_t v3 = v117;
        if (!v14) {
          goto LABEL_44;
        }
LABEL_43:
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        goto LABEL_44;
      }
    }
    else if (v11 | v13)
    {
      goto LABEL_42;
    }
LABEL_31:
    if (*((float *)this + 88) == v173)
    {
      uint64_t v3 = v117;
      if (*((caulk::mach::details **)this + 46) != v174
        || *((unsigned __int8 *)this + 416) != v176[24]
        || *((unsigned __int8 *)this + 417) != v177)
      {
        BOOL v22 = 0;
        goto LABEL_39;
      }
      BOOL v22 = AMCP::DAL::DAL_Time_Delta::operator==(v117, (uint64_t)&v169);
    }
    else
    {
      BOOL v22 = 0;
    }
    uint64_t v3 = v117;
LABEL_39:
    int v21 = !v22;
    if (v14) {
      goto LABEL_43;
    }
LABEL_44:
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (v10) {
LABEL_47:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_48:
    if (v21)
    {
      uint64_t v24 = *((void *)this + 42);
      long long v23 = (std::__shared_weak_count *)*((void *)this + 43);
      if (v23)
      {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!v24)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
LABEL_59:
          double updated = AMCP::Graph::Manifest_Queue::update_execution_context(this, (const AMCP::Graph::Manifest_Execution_Context *)&v169);
          if (round(updated) != 0.0)
          {
            uint64_t v27 = *((void *)this + 70);
            uint64_t v28 = *(void *)(v27 + 72);
            uint64_t v29 = *(std::__shared_weak_count **)(v27 + 80);
            if (v29) {
              atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            AMCP::Graph::Manifest_Counter::adjust_cycle_anchor_for_buffer_size_change(*(double **)(v28 + 64), 0.0 - updated);
            if (v29) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v29);
            }
          }
          goto LABEL_64;
        }
        uint64_t v25 = v164;
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        if (v25) {
          goto LABEL_59;
        }
      }
      else if (!v24 || (void)v164)
      {
        goto LABEL_59;
      }
      *(_OWORD *)&v180.st_dev = v169;
      *(void *)&v180.st_uid = v170;
      *(void *)&v180.st_rdev = v171;
      v180.st_atimespec.tv_sec = v172;
      if (v172) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v172 + 8), 1uLL, memory_order_relaxed);
      }
      *(float *)&v180.st_atimespec.tv_nsec = v173;
      v180.st_mtimespec.tv_sec = MEMORY[0x1E4FB7EA0] + 16;
      v180.st_mtimespec.tv_nsec = caulk::mach::details::retain_os_object(v174, v7);
      v180.st_ctimespec = v175;
      v180.st_birthtimespec = *(timespec *)v176;
      *(_OWORD *)((char *)&v180.st_birthtimespec.tv_nsec + 1) = *(_OWORD *)&v176[9];
      v180.st_mtimespec.tv_sec = MEMORY[0x1E4FB7EA8] + 16;
      BYTE1(v180.st_blocks) = v177;
      LOWORD(v180.st_blksize) = v178;
      LOBYTE(v180.st_gen) = 1;
      std::__optional_storage_base<AMCP::Graph::Manifest_Execution_Context,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<AMCP::Graph::Manifest_Execution_Context,false>>((uint64_t)v114, (long long *)&v180.st_dev);
      std::__optional_destruct_base<AMCP::Graph::Manifest_Execution_Context,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v180);
    }
LABEL_64:
    long long v30 = (void *)v164;
    if ((void)v164)
    {
      if (*((void *)this + 70))
      {
        uint64_t v32 = *(void *)(v164 + 96);
        long long v31 = *(std::__shared_weak_count **)(v164 + 104);
        if (v31)
        {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          if (v32)
          {
            long long v30 = (void *)v164;
            uint64_t v32 = *(void *)(v164 + 96);
            uint64_t v33 = *(void *)(v164 + 104);
            if (v33) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
            }
LABEL_84:
            AMCP::Graph::Manifest::get_iocontext_uid((AMCP::Graph::Manifest *)&v180, v30);
            if ((v180.st_gid & 0x80000000) == 0) {
              uint64_t v44 = &v180;
            }
            else {
              LOBYTE(v44) = v180.st_dev;
            }
            AMCP::Graph::Manifest_Log::add_message(v32, 5, "Manifest: %s from %p to %p", v39, v40, v41, v42, v43, (char)v44);
          }
        }
        else if (v32)
        {
          goto LABEL_84;
        }
        uint64_t v45 = v164;
        long long v46 = *((_OWORD *)this + 35);
        *((_OWORD *)this + 35) = v164;
        long long v164 = v46;
        uint64_t v47 = *(void *)(v45 + 72);
        uint64_t v48 = *(std::__shared_weak_count **)(v45 + 80);
        if (v48) {
          atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v49 = *(void *)(v47 + 64);
        uint64_t v51 = *(void *)(v46 + 72);
        uint64_t v50 = *(std::__shared_weak_count **)(v46 + 80);
        if (v50) {
          atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v52 = *(void *)(v51 + 64);
        *(void *)(v49 + _Block_object_dispose(&a9, 8) = *(void *)(v52 + 8);
        *(void *)(v49 + 16) = *(void *)(v52 + 16);
        *(_DWORD *)(v49 + 40) = *(_DWORD *)(v52 + 40);
        *(unsigned char *)uint64_t v49 = *(unsigned char *)v52;
        if (v50) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v50);
        }
        if (v48) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v48);
        }
        char v53 = (caulk::concurrent::messenger *)*((void *)this + 24);
        int v54 = *(_DWORD *)this;
        std::logic_error v129 = v153;
        uint64_t v130 = v154;
        uint64_t v131 = v155;
        uint64_t v132 = v156;
        if (v156) {
          atomic_fetch_add_explicit(&v156->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v133 = v157;
        uint64_t v134 = MEMORY[0x1E4FB7EA0] + 16;
        unint64_t v55 = (caulk::mach::details *)caulk::mach::details::retain_os_object(v159, v30);
        long long v136 = v160;
        *(_OWORD *)unint64_t v137 = *(_OWORD *)v161;
        *(_OWORD *)&v137[9] = *(_OWORD *)&v161[9];
        uint64_t v134 = MEMORY[0x1E4FB7EA8] + 16;
        uint64_t v135 = v55;
        char v138 = v162;
        __int16 v139 = v163;
        LODWORD(v140) = v54;
        std::logic_error v141 = v129;
        uint64_t v142 = v130;
        uint64_t v143 = v131;
        uint64_t v144 = v132;
        if (v132)
        {
          atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
          unint64_t v55 = v135;
        }
        int v145 = v133;
        uint64_t v146 = MEMORY[0x1E4FB7EA0] + 16;
        uint64_t v147 = caulk::mach::details::retain_os_object(v55, v56);
        long long v148 = v136;
        *(_OWORD *)long long v149 = *(_OWORD *)v137;
        *(_OWORD *)&v149[9] = *(_OWORD *)&v137[9];
        uint64_t v146 = MEMORY[0x1E4FB7EA8] + 16;
        char v150 = v138;
        __int16 v151 = v139;
        long long v152 = v164;
        if (*((void *)&v164 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v164 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v57 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 184, 8);
        *(_DWORD *)(v57 + 16) = 0;
        *(void *)uint64_t v57 = &unk_1F1464CA0;
        *(void *)(v57 + _Block_object_dispose(&a9, 8) = 0;
        *(void *)(v57 + 24) = v118;
        *(void *)(v57 + 32) = v120;
        AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload::Manifest_Disposal_Payload((uint64_t)&v180, (uint64_t)&v140);
        AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload::Manifest_Disposal_Payload(v57 + 40, (uint64_t)&v180);
        AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload::~Manifest_Disposal_Payload((AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload *)&v180);
        *(void *)uint64_t v57 = &unk_1F1464C48;
        caulk::concurrent::messenger::enqueue(v53, (caulk::concurrent::message *)v57);
        AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload::~Manifest_Disposal_Payload((AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload *)&v140);
        caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&v134);
        if (v132) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v132);
        }
      }
      else
      {
        uint64_t v34 = *((void *)&v164 + 1);
        if (*((void *)&v164 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v164 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        *((void *)this + 70) = v30;
        __int16 v35 = (std::__shared_weak_count *)*((void *)this + 71);
        *((void *)this + 71) = v34;
        if (v35)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
          long long v30 = (void *)*((void *)this + 70);
        }
        AMCP::Graph::Manifest::get_iocontext_uid((AMCP::Graph::Manifest *)&__str, v30);
        std::string::basic_string((std::string *)&v180, &__str, 0, 0x3FuLL, (std::allocator<char> *)&v140);
        if ((v180.st_gid & 0x80000000) == 0) {
          char v36 = &v180;
        }
        else {
          char v36 = *(stat **)&v180.st_dev;
        }
        uint8x8_t v37 = (AMCP::Log::Scope_Registry *)pthread_setname_np((const char *)v36);
        uint64_t v38 = v37;
        if (SHIBYTE(v180.st_gid) < 0) {
          operator delete(*(void **)&v180.st_dev);
        }
        if (v38)
        {
          AMCP::Log::Scope_Registry::get(v37);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v180, "com.apple.coreaudio", "AMCP");
          uint64_t v108 = **(NSObject ***)&v180.st_dev;
          if (v180.st_ino) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v180.st_ino);
          }
          if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
          {
            unint64_t v109 = pthread_self();
            mach_port_t v110 = pthread_mach_thread_np(v109);
            v180.st_dev = 67110146;
            *(_DWORD *)&v180.st_mode = v110;
            LOWORD(v180.st_ino) = 2080;
            *(__darwin_ino64_t *)((char *)&v180.st_ino + 2) = (__darwin_ino64_t)"Manifest_Queue.cpp";
            HIWORD(v180.st_uid) = 1024;
            v180.st_gid = 261;
            LOWORD(v180.st_rdev) = 2080;
            *(void *)((char *)&v180.st_rdev + 2) = "not (error == 0)";
            WORD1(v180.st_atimespec.tv_sec) = 1024;
            HIDWORD(v180.st_atimespec.tv_sec) = v38;
            _os_log_error_impl(&dword_1BAA78000, v108, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s pthread_setname_np failed: %d", (uint8_t *)&v180, 0x28u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v123);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"pthread_setname_np failed: %d", (uint64_t)&v128, v38);
          std::logic_error::logic_error(&v122, &v128);
          v122.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)&v140, &v122);
          uint64_t v142 = 0;
          uint64_t v143 = 0;
          uint64_t v144 = 0;
          int v145 = -1;
          uint64_t v140 = (std::string::value_type *)&unk_1F1489CC8;
          v141.__imp_.__imp_ = (const char *)&unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v180, (uint64_t)&v140);
          v180.st_atimespec.tv_sec = (__darwin_time_t)"void AMCP::Graph::set_thread_name_from_manifest_name(const std::string &)";
          v180.st_atimespec.tv_nsec = (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Queue.cpp";
          LODWORD(v180.st_mtimespec.tv_sec) = 261;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v127.__r_.__value_.__l.__data_);
          long long __p = &unk_1F148AA90;
          std::string v125 = v127;
          memset(&v127, 0, sizeof(v127));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        unint64_t v2 = AMCP::Graph::Manifest::setup_processing(*((AMCP::Log::Scope_Registry **)this + 70), (uint64_t)v3, (uint64_t)v165, (uint64_t)v115);
      }
      if (v2)
      {
        std::condition_variable::notify_all(v120);
      }
      else
      {
        uint64_t v58 = *((void *)this + 70);
        uint64_t v59 = *(void *)(v58 + 72);
        uint64_t v60 = *(std::__shared_weak_count **)(v58 + 80);
        if (v60) {
          atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v61 = *(void *)(v59 + 96);
        uint8x8_t v62 = *(std::__shared_weak_count **)(v59 + 104);
        if (v62) {
          atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(stat *__return_ptr))(*(void *)v61 + 32))(&v180);
        long long v63 = *(_OWORD *)&v180.st_uid;
        *(_OWORD *)unint64_t v116 = *(_OWORD *)&v180.st_dev;
        *((_OWORD *)v116 + 1) = v63;
        timespec st_mtimespec = v180.st_mtimespec;
        *((_OWORD *)v116 + 2) = v180.st_atimespec;
        *((timespec *)v116 + 3) = st_mtimespec;
        if (v62) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v62);
        }
        if (v60) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v60);
        }
        uint64_t v65 = (AMCP::Graph::File_Capture_Settings *)*((void *)this + 79);
        if (v65) {
          uint64_t v65 = (AMCP::Graph::File_Capture_Settings *)(*(uint64_t (**)(AMCP::Graph::File_Capture_Settings *))(*(void *)v65 + 48))(v65);
        }
        uint64_t v66 = *((void *)this + 70);
        int v67 = *(_DWORD *)this;
        AMCP::Graph::File_Capture_Settings::instance(v65);
        if (byte_1E9F78AB4)
        {
          std::string::basic_string[abi:ne180100]<0>(&v140, ".dot");
          AMCP::Graph::Manifest::get_iocontext_uid((AMCP::Graph::Manifest *)&__p, (void *)v66);
          get_temporary_folder((std::string *)&v180);
          uint64_t v69 = std::string::append((std::string *)&v180, "Graphs/", 7uLL);
          long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
          __str.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v70;
          v69->__r_.__value_.__l.__size_ = 0;
          v69->__r_.__value_.__r.__words[2] = 0;
          v69->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v180.st_gid) < 0) {
            operator delete(*(void **)&v180.st_dev);
          }
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_str = &__str;
          }
          else {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if (stat((const char *)p_str, &v180) == -1)
          {
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v72 = &__str;
            }
            else {
              uint64_t v72 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            mkdir((const char *)v72, 0x1FDu);
          }
          if (v125.__r_.__value_.__s.__data_[15] >= 0) {
            p_p = (const std::string::value_type *)&__p;
          }
          else {
            p_p = (const std::string::value_type *)__p;
          }
          if (v125.__r_.__value_.__s.__data_[15] >= 0) {
            std::string::size_type v74 = v125.__r_.__value_.__s.__data_[15];
          }
          else {
            std::string::size_type v74 = v125.__r_.__value_.__r.__words[0];
          }
          unsigned int v75 = std::string::append(&__str, p_p, v74);
          long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
          v127.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v76;
          v75->__r_.__value_.__l.__size_ = 0;
          v75->__r_.__value_.__r.__words[2] = 0;
          v75->__r_.__value_.__r.__words[0] = 0;
          char v77 = std::string::append(&v127, "-Manifest", 9uLL);
          long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          v128.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v127.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::append(&v128, "-XXXXXX", 7uLL);
          if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v79 = &v128;
          }
          else {
            int v79 = (std::string *)v128.__r_.__value_.__r.__words[0];
          }
          mktemp((char *)v79);
          if (SHIBYTE(v141.__imp_.__imp_) >= 0) {
            __int16 v80 = (const std::string::value_type *)&v140;
          }
          else {
            __int16 v80 = v140;
          }
          if (SHIBYTE(v141.__imp_.__imp_) >= 0) {
            std::string::size_type imp_high = HIBYTE(v141.__imp_.__imp_);
          }
          else {
            std::string::size_type imp_high = (std::string::size_type)v141.__vftable;
          }
          std::string::append(&v128, v80, imp_high);
          if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v180, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v180.st_dev = *(_OWORD *)&v128.__r_.__value_.__l.__data_;
            *(void *)&v180.st_uid = *((void *)&v128.__r_.__value_.__l + 2);
          }
          long long v68 = (AMCP::Log::Scope_Registry *)AMCP::Graph::Manifest::write_to_dot_file((AMCP::Log::Scope_Registry *)v66, (uint64_t *)&v180.st_dev);
          if (SHIBYTE(v180.st_gid) < 0) {
            operator delete(*(void **)&v180.st_dev);
          }
          if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v128.__r_.__value_.__l.__data_);
          }
          if (v125.__r_.__value_.__s.__data_[15] < 0) {
            operator delete(__p);
          }
          if (SHIBYTE(v141.__imp_.__imp_) < 0) {
            operator delete(v140);
          }
        }
        uint64_t v82 = *(void *)(v66 + 96);
        if (v82)
        {
          AMCP::Graph::Manifest::get_iocontext_uid((AMCP::Graph::Manifest *)&v180, (void *)v66);
          if ((v180.st_gid & 0x80000000) == 0) {
            uint64_t v88 = &v180;
          }
          else {
            LOBYTE(v8_Block_object_dispose(&a9, 8) = v180.st_dev;
          }
          AMCP::Graph::Manifest_Log::add_message(v82, 0, "Manifest: %s Begin Processing  %p", v83, v84, v85, v86, v87, (char)v88);
        }
        if (*(_DWORD *)v66 != 1)
        {
          AMCP::Log::Scope_Registry::get(v68);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v180, "com.apple.coreaudio", "AMCP");
          unint64_t v111 = **(NSObject ***)&v180.st_dev;
          if (v180.st_ino) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v180.st_ino);
          }
          if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
          {
            long long v112 = pthread_self();
            mach_port_t v113 = pthread_mach_thread_np(v112);
            v180.st_dev = 67109890;
            *(_DWORD *)&v180.st_mode = v113;
            LOWORD(v180.st_ino) = 2080;
            *(__darwin_ino64_t *)((char *)&v180.st_ino + 2) = (__darwin_ino64_t)"Manifest.cpp";
            HIWORD(v180.st_uid) = 1024;
            v180.st_gid = 555;
            LOWORD(v180.st_rdev) = 2080;
            *(void *)((char *)&v180.st_rdev + 2) = "not (m_processing_state == Processing_State::Configured)";
            _os_log_error_impl(&dword_1BAA78000, v111, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v180, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v122);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v128);
          std::logic_error::logic_error((std::logic_error *)&__str, &v128);
          __str.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
          std::logic_error::logic_error((std::logic_error *)&v140, (const std::logic_error *)&__str);
          uint64_t v142 = 0;
          uint64_t v143 = 0;
          uint64_t v144 = 0;
          int v145 = -1;
          uint64_t v140 = (std::string::value_type *)&unk_1F1489CC8;
          v141.__imp_.__imp_ = (const char *)&unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v180, (uint64_t)&v140);
          v180.st_atimespec.tv_sec = (__darwin_time_t)"void AMCP::Graph::Manifest::begin_processing(Object_ID, const Mani"
                                                      "fest_Execution_Context &, const Manifest_Start_State &)";
          v180.st_atimespec.tv_nsec = (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
          LODWORD(v180.st_mtimespec.tv_sec) = 555;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v127.__r_.__value_.__l.__data_);
          long long __p = &unk_1F148AA90;
          std::string v125 = v127;
          memset(&v127, 0, sizeof(v127));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        uint64_t v89 = *(AMCP::Graph::Manifest_Inventory **)(*(void *)(v66 + 72) + 24);
        if (v165[1] == 2)
        {
          AMCP::Graph::Manifest_Inventory::begin_processing(v89, v67);
          AMCP::Graph::Manifest::calculate_anchor_time((uint64_t)&v180, v66, (float *)v3, v166, v167, v168);
          AMCP::Graph::Manifest_Inventory::anchor_time(*(AMCP::Graph::Manifest_Inventory **)(v66 + 72), v67, v3, (const AMCP::DAL::DAL_Time *)&v180);
          AMCP::Graph::Manifest::calculate_all_required_input_samples((AMCP::Graph::Manifest *)v66, v3);
          unint64_t v90 = *(void ***)(v66 + 8);
          uint64_t v91 = *(void ***)(v66 + 16);
          while (v90 != v91)
          {
            uint64_t v92 = (void **)*v90;
            int v94 = (void *)**v90;
            uint64_t v93 = (void *)(*v90)[1];
            while (v94 != v93)
            {
              unsigned int v95 = (void **)*v94;
              CFArrayRef v96 = (void **)v94[1];
              while (v95 != v96)
              {
                AMCP::Graph::Manifest_Inventory::cross_check_buffer(*(AMCP::Log::Scope_Registry **)(v66 + 72), *v95);
                v95 += 2;
              }
              v94 += 5;
            }
            char v98 = v92[3];
            BOOL v97 = v92[4];
            while (v98 != v97)
            {
              BOOL v99 = (void **)*v98;
              uint64_t v100 = (void **)v98[1];
              while (v99 != v100)
              {
                AMCP::Graph::Manifest_Inventory::cross_check_buffer(*(AMCP::Log::Scope_Registry **)(v66 + 72), *v99);
                v99 += 2;
              }
              v98 += 5;
            }
            CFTypeRef v101 = (void **)*v90;
            *((_DWORD *)v101 + 22) = 3;
            uint64_t v102 = v101[6][23];
            if (v102) {
              std::function<void ()>::operator()(v102, v67);
            }
            v90 += 2;
          }
          *(_DWORD *)uint64_t v66 = 3;
          if (v180.st_atimespec.tv_sec) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v180.st_atimespec.tv_sec);
          }
          uint64_t v3 = v117;
        }
        else
        {
          AMCP::Graph::Manifest_Inventory::begin_processing(v89, v67);
          AMCP::Graph::Manifest::calculate_anchor_time((uint64_t)&v180, v66, (float *)v3, v166, v167, v168);
          uint64_t v103 = *(void *)(v66 + 72);
          if (*(void *)(v103 + 32))
          {
            std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::__deallocate_node(*(void **)(v103 + 24));
            *(void *)(v103 + 24) = 0;
            uint64_t v104 = *(void *)(v103 + 16);
            if (v104)
            {
              for (uint64_t i = 0; i != v104; ++i)
                *(void *)(*(void *)(v103 + 8) + 8 * i) = 0;
            }
            *(void *)(v103 + 32) = 0;
          }
          std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100]((uint64_t *)(v103 + 112));
          AMCP::Graph::Manifest_Inventory::anchor_time(*(AMCP::Graph::Manifest_Inventory **)(v66 + 72), v67, v3, (const AMCP::DAL::DAL_Time *)&v180);
          *(_DWORD *)uint64_t v66 = 2;
          if (v180.st_atimespec.tv_sec) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v180.st_atimespec.tv_sec);
          }
        }
        if ((void)v164 && **((_DWORD **)this + 70) == 2 && *(_DWORD *)v164 == 3) {
          AMCP::Graph::finish_manifest((uint64_t ***)&v164, *(_DWORD *)this, (const AMCP::Graph::Manifest_Execution_Context *)&v153);
        }
        std::mutex::lock(v118);
        std::condition_variable::notify_all(v120);
        uint64_t v106 = (std::__shared_weak_count *)*((void *)&v164 + 1);
        long long v164 = 0uLL;
        if (v106) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v106);
        }
        std::mutex::unlock(v118);
        unint64_t v2 = 0;
      }
    }
    caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&v158);
    if (v156) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v156);
    }
    std::__optional_destruct_base<AMCP::Graph::Manifest_Queue::Incoming_Payload,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v164);
    if (*((void *)this + 70)) {
      return v2;
    }
  }
  std::__optional_destruct_base<AMCP::Graph::Manifest_Queue::Incoming_Payload,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v164);
  return v2;
}

void sub_1BAC01B34(_Unwind_Exception *a1)
{
  if (STACK[0x3D0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x3D0]);
  }
  AMCP::Graph::Manifest_Execution_Context::~Manifest_Execution_Context((AMCP::Graph::Manifest_Execution_Context *)&STACK[0x260]);
  std::__optional_destruct_base<AMCP::Graph::Manifest_Queue::Incoming_Payload,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x2E0]);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Manifest_Queue::get_wake_time_in_host_time(AMCP::Graph::Manifest_Queue *this)
{
  uint64_t v1 = *((void *)this + 70);
  if (!v1) {
    return 0;
  }
  uint64_t v3 = *(void *)(v1 + 72);
  unint64_t v4 = *(std::__shared_weak_count **)(v1 + 80);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::Graph::Manifest_Counter::get_current_cycle_anchor_time((uint64_t)v14, *(void *)(v3 + 64));
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)&v7, *(void *)(*((void *)this + 70) + 72), *(std::__shared_weak_count **)(*((void *)this + 70) + 80));
  int v8 = 2;
  uint64_t v9 = 0x3FF0000000000000;
  uint64_t v10 = 0;
  long long v11 = v7;
  boost::operators_impl::operator-((AMCP::DAL::DAL_Time *)v12, (uint64_t)v14, (AMCP::DAL::DAL_Time_Delta *)&v8);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  uint64_t host_time = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  return host_time;
}

void sub_1BAC01EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  long long v23 = *(std::__shared_weak_count **)(v21 - 24);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAC01F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a16) {
    JUMPOUT(0x1BAC01EF0);
  }
  JUMPOUT(0x1BAC01EECLL);
}

void sub_1BAC01F18()
{
  if (!v0) {
    JUMPOUT(0x1BAC01F00);
  }
  JUMPOUT(0x1BAC01EFCLL);
}

uint64_t AMCP::Graph::Manifest_Queue::wait_for_next_cycle(AMCP::Graph::Manifest_Queue *this)
{
  uint64_t result = AMCP::Graph::Manifest_Queue::get_wake_time_in_host_time(this);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v3 = *((void *)this + 75);
    if (!v3) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v4);
  }
  return result;
}

double AMCP::Graph::Manifest_Queue::update_execution_context(AMCP::Graph::Manifest_Queue *this, const AMCP::Graph::Manifest_Execution_Context *a2)
{
  if (*((void *)this + 46))
  {
    caulk::mach::os_workgroup_interval_managed::finish((AMCP::Graph::Manifest_Queue *)((char *)this + 360));
    if (*((void *)this + 46)) {
      caulk::mach::os_workgroup_managed::leave((AMCP::Graph::Manifest_Queue *)((char *)this + 360));
    }
  }
  double v4 = 0.0;
  if (*((void *)this + 70))
  {
    unint64_t v5 = (std::__shared_weak_count *)*((void *)a2 + 4);
    v20[0] = *((void *)a2 + 3);
    v20[1] = (uint64_t)v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)v21, (AMCP::Graph::Manifest_Queue *)((char *)this + 312), v20);
    BOOL v6 = AMCP::DAL::DAL_Time_Delta::operator==((AMCP::DAL::DAL_Time_Delta *)v21, (uint64_t)a2);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    if (!v6)
    {
      uint64_t v7 = *((void *)this + 70);
      uint64_t v9 = *(void *)(v7 + 72);
      int v8 = *(std::__shared_weak_count **)(v7 + 80);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if ((*((unsigned char *)this + 312) & 2) == 0) {
        AMCP::DAL::DAL_Time_Delta::validate((AMCP::Graph::Manifest_Queue *)((char *)this + 312));
      }
      double v10 = *((double *)this + 40);
      if ((*(unsigned char *)a2 & 2) == 0) {
        AMCP::DAL::DAL_Time_Delta::validate(a2);
      }
      double v11 = *((double *)a2 + 1);
      AMCP::Graph::Manifest_Inventory::set_nominal_buffer_size(*(void **)(v9 + 24), *(_DWORD *)this, (uint64_t)a2);
      cycle_size_in_host_ticks = (_opaque_pthread_t *)AMCP::Graph::Manifest_Queue::get_cycle_size_in_host_ticks(this);
      uint64_t v13 = pthread_self();
      AMCP::Utility::configure_thread_for_realtime(v13, cycle_size_in_host_ticks, 0);
      double v4 = v10 - v11;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
  }
  *((_DWORD *)this + 7_Block_object_dispose(&a9, 8) = *(_DWORD *)a2;
  *((void *)this + 40) = *((void *)a2 + 1);
  *((void *)this + 41) = *((void *)a2 + 2);
  uint64_t v14 = *((void *)a2 + 3);
  uint64_t v15 = *((void *)a2 + 4);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 43);
  *((void *)this + 42) = v14;
  *((void *)this + 43) = v15;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *((_DWORD *)this + 8_Block_object_dispose(&a9, 8) = *((_DWORD *)a2 + 10);
  if ((AMCP::Graph::Manifest_Queue *)((char *)this + 312) != a2)
  {
    caulk::mach::details::holder::operator=((caulk::mach::details **)this + 46, (caulk::mach::details **)a2 + 7);
    long long v17 = *((_OWORD *)a2 + 4);
    long long v18 = *((_OWORD *)a2 + 5);
    *(_OWORD *)((char *)this + 401) = *(_OWORD *)((char *)a2 + 89);
    *(_OWORD *)((char *)this + 376) = v17;
    *(_OWORD *)((char *)this + 392) = v18;
    *((unsigned char *)this + 417) = *((unsigned char *)a2 + 105);
  }
  *((_WORD *)this + 212) = *((_WORD *)a2 + 56);
  AMCP::Graph::Manifest_Queue::join_workgroup_interval(this);
  AMCP::Graph::Manifest_Queue::start_workgroup_interval(this);
  return v4;
}

void sub_1BAC0216C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<AMCP::Graph::Manifest_Execution_Context,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<AMCP::Graph::Manifest_Execution_Context,false>>(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 120) == *((unsigned __int8 *)a2 + 120))
  {
    if (*(unsigned char *)(a1 + 120))
    {
      long long v4 = *a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v4;
      long long v5 = *(long long *)((char *)a2 + 24);
      *((void *)a2 + 3) = 0;
      *((void *)a2 + 4) = 0;
      BOOL v6 = *(std::__shared_weak_count **)(a1 + 32);
      *(_OWORD *)(a1 + 24) = v5;
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
      caulk::mach::os_workgroup_interval_managed::swap((__n128 *)(a1 + 48), (__n128 *)a2 + 3);
      *(_WORD *)(a1 + 112) = *((_WORD *)a2 + 56);
    }
  }
  else if (*(unsigned char *)(a1 + 120))
  {
    caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)(a1 + 48));
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 32);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    *(unsigned char *)(a1 + 120) = 0;
  }
  else
  {
    __n128 v8 = (__n128)*a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(__n128 *)a1 = v8;
    *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
    *((void *)a2 + 3) = 0;
    *((void *)a2 + 4) = 0;
    *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 8_Block_object_dispose(&a9, 8) = 0u;
    *(_WORD *)(a1 + 104) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = MEMORY[0x1E4FB7EA8] + 16;
    caulk::mach::os_workgroup_interval_managed::swap((__n128 *)(a1 + 48), (__n128 *)a2 + 3);
    *(_WORD *)(a1 + 112) = *((_WORD *)a2 + 56);
    *(unsigned char *)(a1 + 120) = 1;
  }
}

uint64_t AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload::Manifest_Disposal_Payload(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + _Block_object_dispose(&a9, 8) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = MEMORY[0x1E4FB7EA0] + 16;
  *(void *)(a1 + 64) = caulk::mach::details::retain_os_object(*(caulk::mach::details **)(a2 + 64), (void *)a2);
  long long v6 = *(_OWORD *)(a2 + 72);
  long long v7 = *(_OWORD *)(a2 + 97);
  *(_OWORD *)(a1 + 8_Block_object_dispose(&a9, 8) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 97) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  *(void *)(a1 + 56) = MEMORY[0x1E4FB7EA8] + 16;
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  uint64_t v8 = *(void *)(a2 + 136);
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload::~Manifest_Disposal_Payload(AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload *this)
{
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload *)((char *)this + 56));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void AMCP::Graph::finish_manifest(uint64_t ***a1, int a2, const AMCP::Graph::Manifest_Execution_Context *a3)
{
  long long v4 = *a1;
  if ((*(_DWORD *)v4 & 0xFFFFFFFE) == 2)
  {
    AMCP::Graph::Manifest::end_processing(v4, a2, a3);
    uint64_t v5 = (AMCP::Graph::Manifest *)*a1;
    AMCP::Graph::Manifest::teardown_processing(v5);
  }
}

uint64_t *caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::maybe_acquire_new_manifest(void)::$_0,AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload>::perform(uint64_t a1)
{
  uint64_t v2 = a1;
  caulk::concurrent::details::message_call<AMCP::Graph::Manifest_Queue::maybe_acquire_new_manifest(void)::$_0,AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload>::perform(a1);
  return caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::maybe_acquire_new_manifest(void)::$_0,AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1BAC02478(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::maybe_acquire_new_manifest(void)::$_0,AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload>::rt_cleanup::~rt_cleanup((uint64_t *)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::message_call<AMCP::Graph::Manifest_Queue::maybe_acquire_new_manifest(void)::$_0,AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload>::perform(uint64_t a1)
{
  v4.__m_ = *(std::unique_lock<std::mutex>::mutex_type **)(a1 + 24);
  v4.__owns_ = 1;
  std::mutex::lock(v4.__m_);
  std::condition_variable::wait(*(std::condition_variable **)(a1 + 32), &v4);
  uint64_t v2 = *(uint64_t ***)(a1 + 168);
  uint64_t v3 = *(uint64_t ***)(a1 + 176);
  *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 176) = 0;
  v5[0] = v2;
  v5[1] = v3;
  AMCP::Graph::finish_manifest(v5, *(_DWORD *)(a1 + 40), (const AMCP::Graph::Manifest_Execution_Context *)(a1 + 48));
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v3);
  }
  if (v4.__owns_) {
    std::mutex::unlock(v4.__m_);
  }
}

void sub_1BAC0250C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::maybe_acquire_new_manifest(void)::$_0,AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload>::rt_cleanup::~rt_cleanup(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *(void *)uint64_t v2 = &unk_1F1464CA0;
  AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload::~Manifest_Disposal_Payload((AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload *)(v2 + 40));
  caulk::concurrent::message::~message((caulk::concurrent::message *)v2);
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 184, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::maybe_acquire_new_manifest(void)::$_0,AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload>::~rt_message_call(uint64_t a1)
{
  *(void *)a1 = &unk_1F1464CA0;
  AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload::~Manifest_Disposal_Payload((AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload *)(a1 + 40));
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F1464CA0;
  AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload::~Manifest_Disposal_Payload((AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload *)(a1 + 40));

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
}

void caulk::concurrent::details::message_call<AMCP::Graph::Manifest_Queue::maybe_acquire_new_manifest(void)::$_0,AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload>::~message_call(uint64_t a1)
{
  *(void *)a1 = &unk_1F1464CA0;
  AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload::~Manifest_Disposal_Payload((AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload *)(a1 + 40));
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F1464CA0;
  AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload::~Manifest_Disposal_Payload((AMCP::Graph::Manifest_Queue::Manifest_Disposal_Payload *)(a1 + 40));

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
}

unint64_t AMCP::Graph::Manifest_Queue::get_cycle_size_in_host_ticks(AMCP::Graph::Manifest_Queue *this)
{
  double sample_rate = AMCP::Graph::Manifest_Queue::get_sample_rate(*((AMCP::Graph::Manifest_Queue **)this + 70));
  uint64_t v3 = *((void *)this + 70);
  if (v3)
  {
    AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)&v7, *(void *)(v3 + 72), *(std::__shared_weak_count **)(v3 + 80));
    double v4 = (*(double (**)(uint64_t))(*(void *)v7 + 72))(v7);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if ((*((unsigned char *)this + 312) & 2) == 0) {
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::Graph::Manifest_Queue *)((char *)this + 312));
    }
    double v5 = (double)(uint64_t)floor(*((double *)this + 40));
  }
  else
  {
    double v5 = 1024.0;
    double v4 = 24000000.0 / sample_rate;
  }
  return (unint64_t)(v5 * v4);
}

void sub_1BAC02804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Manifest_Queue::join_workgroup_interval(AMCP::Graph::Manifest_Queue *this)
{
  if (*((void *)this + 46))
  {
    uint64_t v1 = (AMCP::Log::Scope_Registry *)caulk::mach::os_workgroup_managed::join((AMCP::Graph::Manifest_Queue *)((char *)this + 360));
    if (v1)
    {
      int v2 = (int)v1;
      AMCP::Log::Scope_Registry::get(v1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
      uint64_t v3 = *(caulk::concurrent::messenger **)(v9 + 8);
      double v4 = pthread_self();
      mach_port_t v5 = pthread_mach_thread_np(v4);
      long long v6 = __error();
      uint64_t v7 = strerror(*v6);
      uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
      *(_DWORD *)(v8 + 16) = 0;
      *(unsigned char *)(v8 + 20) = 16;
      *(_DWORD *)(v8 + 24) = v5;
      *(void *)(v8 + 32) = "Manifest_Queue.cpp";
      *(_DWORD *)(v8 + 40) = 643;
      *(_DWORD *)(v8 + 44) = v2;
      *(void *)(v8 + 4_Block_object_dispose(&a9, 8) = v7;
      *(void *)uint64_t v8 = &unk_1F1464D78;
      *(void *)(v8 + _Block_object_dispose(&a9, 8) = 0;
      caulk::concurrent::messenger::enqueue(v3, (caulk::concurrent::message *)v8);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
    }
  }
}

void sub_1BAC02934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Manifest_Queue::start_workgroup_interval(AMCP::Graph::Manifest_Queue *this)
{
  if (*((void *)this + 46))
  {
    int v2 = (AMCP::Graph::Manifest_Queue *)((char *)this + 360);
    uint64_t v3 = (AMCP::Graph::Manifest *)*((void *)this + 70);
    uint64_t v4 = v3
       ? AMCP::Graph::Manifest::get_overload_time_in_host_time(v3, (AMCP::Graph::Manifest_Queue *)((char *)this + 312))
       : -1;
    wake_time_in_uint64_t host_time = AMCP::Graph::Manifest_Queue::get_wake_time_in_host_time(this);
    long long v6 = (AMCP::Log::Scope_Registry *)caulk::mach::os_workgroup_interval_managed::start(v2);
    if (v6)
    {
      int v7 = (int)v6;
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v19, "com.apple.coreaudio", "AMCP");
      uint64_t v8 = *(caulk::concurrent::messenger **)(v19 + 8);
      uint64_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      double v11 = strerror(v7);
      long long v12 = (void *)MEMORY[0x1E4FB7E90];
      uint64_t v13 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
      *(_DWORD *)(v13 + 16) = 0;
      *(unsigned char *)(v13 + 20) = 16;
      *(_DWORD *)(v13 + 24) = v10;
      *(void *)(v13 + 32) = "Manifest_Queue.cpp";
      *(_DWORD *)(v13 + 40) = 675;
      *(_DWORD *)(v13 + 44) = v7;
      *(void *)(v13 + 4_Block_object_dispose(&a9, 8) = v11;
      *(void *)uint64_t v13 = &unk_1F1464DD0;
      *(void *)(v13 + _Block_object_dispose(&a9, 8) = 0;
      caulk::concurrent::messenger::enqueue(v8, (caulk::concurrent::message *)v13);
      uint64_t v14 = (AMCP::Log::Scope_Registry *)v20;
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      if (v7 == 22)
      {
        AMCP::Log::Scope_Registry::get(v14);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v19, "com.apple.coreaudio", "AMCP");
        uint64_t v15 = *(caulk::concurrent::messenger **)(v19 + 8);
        uint64_t v16 = pthread_self();
        mach_port_t v17 = pthread_mach_thread_np(v16);
        uint64_t v18 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v12 + 16))(*v12, 64, 8);
        *(_DWORD *)(v18 + 16) = 0;
        *(unsigned char *)(v18 + 20) = 2;
        *(_DWORD *)(v18 + 24) = v17;
        *(void *)(v18 + 32) = "Manifest_Queue.cpp";
        *(_DWORD *)(v18 + 40) = 678;
        *(void *)(v18 + 4_Block_object_dispose(&a9, 8) = wake_time_in_host_time;
        *(void *)(v18 + 56) = v4;
        *(void *)uint64_t v18 = &unk_1F1464E28;
        *(void *)(v18 + _Block_object_dispose(&a9, 8) = 0;
        caulk::concurrent::messenger::enqueue(v15, (caulk::concurrent::message *)v18);
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
      }
    }
  }
}

void sub_1BAC02B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::start_workgroup_interval(void)::$_1,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  int v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)double v11 = 2080;
    *(void *)&uint64_t v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 2048;
    uint64_t v15 = v7;
    __int16 v16 = 2048;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Args: Start - %llu, Deadline - %llu", (uint8_t *)&v10, 0x2Cu);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 64, 8);
}

void sub_1BAC02CDC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::start_workgroup_interval(void)::$_1,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::start_workgroup_interval(void)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  int v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    uint64_t v8 = *(void *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)double v11 = 2080;
    *(void *)&uint64_t v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 2080;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Starting the workgroup interval in start_workgroup_interval resulted in error: %d (%s)", (uint8_t *)&v10, 0x28u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAC02E70(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::start_workgroup_interval(void)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::join_workgroup_interval(void)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  int v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    uint64_t v8 = *(void *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)double v11 = 2080;
    *(void *)&uint64_t v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 2080;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to join the workgroup with code: %d - %s", (uint8_t *)&v10, 0x28u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAC03004(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::join_workgroup_interval(void)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

double AMCP::Graph::Manifest_Queue::get_sample_rate(AMCP::Graph::Manifest_Queue *this)
{
  if (!this) {
    return 44100.0;
  }
  AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)&v3, *((void *)this + 9), *((std::__shared_weak_count **)this + 10));
  double v1 = (*(double (**)(uint64_t))(*(void *)v3 + 152))(v3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v1;
}

void sub_1BAC030D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Graph::Manifest_Queue::timebases_are_valid(AMCP::Graph::Manifest_Queue *this)
{
  if (!this) {
    return 1;
  }
  uint64_t v1 = *((void *)this + 9);
  int v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *(void *)(v1 + 80);
  int v4 = *(std::__shared_weak_count **)(v1 + 88);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void **)(v3 + 16);
  if (v5)
  {
    do
    {
      uint64_t v6 = v5[2];
      int v7 = (std::__shared_weak_count *)v5[3];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 168))(v6);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      if ((v8 & 1) == 0) {
        break;
      }
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
    if (!v4) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v8 = 1;
  if (v4) {
LABEL_14:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
LABEL_15:
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return v8;
}

void sub_1BAC031CC(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (!v2)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  goto LABEL_5;
}

uint64_t AMCP::Graph::Manifest_Queue::enqueue_manifest(int *a1, uint64_t *a2, unsigned int a3, unsigned int a4, void *a5, long long *a6, int a7, uint64_t a8, long long a9)
{
  uint64_t v173 = *MEMORY[0x1E4F143B8];
  AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)a1);
  if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance))
  {
    AMCP::Log::Scope_Registry::get(v15);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    __int16 v16 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = pthread_self();
      mach_port_t v87 = pthread_mach_thread_np(v17);
      int v89 = *a1;
      uint64_t v18 = *a2;
      uint64_t v90 = *a2;
      if (*a2)
      {
        AMCP::Graph::Manifest::get_iocontext_uid((AMCP::Graph::Manifest *)v104, (void *)v18);
        unsigned int v19 = a4;
        int v20 = (void **)v104[0];
        if (v105 >= 0) {
          int v20 = v104;
        }
        uint64_t v86 = (const char *)v20;
        uint64_t v21 = a5;
        if (*a2) {
          uint64_t v18 = (uint64_t)(*(void *)(*a2 + 16) - *(void *)(*a2 + 8)) >> 4;
        }
        else {
          uint64_t v18 = 0;
        }
      }
      else
      {
        unsigned int v19 = a4;
        uint64_t v21 = a5;
        uint64_t v86 = "";
      }
      int v91 = a7;
      std::string::basic_string[abi:ne180100]<0>(&__p, off_1E6235910[a3]);
      int v22 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v23 = __p.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(v170, off_1E6235910[v19]);
      p_p = &__p;
      if (v22 < 0) {
        p_p = (std::string *)v23;
      }
      if (v171 >= 0) {
        uint64_t v25 = v170;
      }
      else {
        uint64_t v25 = (void **)v170[0];
      }
      a5 = v21;
      uint64_t v26 = (uint64_t)(v21[1] - *v21) >> 2;
      LODWORD(buf.__r_.__value_.__l.__data_) = 67111170;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v87;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Queue.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 156;
      LOWORD(v154) = 1024;
      *(_DWORD *)((char *)&v154 + 2) = v89;
      WORD3(v154) = 2080;
      *((void *)&v154 + 1) = v86;
      *(_WORD *)uint64_t v155 = 2048;
      *(void *)&v155[2] = v18;
      *(_WORD *)&v155[10] = 2080;
      *(void *)&v155[12] = p_p;
      *(_WORD *)&v155[20] = 2080;
      *(void *)&v155[22] = v25;
      __int16 v156 = 2048;
      v157[0] = v26;
      _os_log_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_INFO, "%6u %32s:%-5d Manifest_Queue(%d|\"%s\")::enqueue_manifest: size(%zu)  %s -> %s  (snapshot: %zu)", (uint8_t *)&buf, 0x50u);
      if (v171 < 0) {
        operator delete(v170[0]);
      }
      a7 = v91;
      a4 = v19;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v90 && v105 < 0) {
        operator delete(v104[0]);
      }
    }
  }
  uint64_t v27 = *((void *)a1 + 70);
  if (v27)
  {
    uint64_t v28 = *a2;
    if (!*a2) {
      goto LABEL_42;
    }
    uint64_t v29 = *(void *)(v27 + 96);
    long long v30 = *(std::__shared_weak_count **)(v27 + 104);
    if (v30)
    {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v31 = *(std::__shared_weak_count **)(v28 + 104);
    *(void *)(v28 + 96) = v29;
    *(void *)(v28 + 104) = v30;
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
  }
  uint64_t v32 = (void *)*a2;
  if (*a2)
  {
    uint64_t v34 = v32[12];
    uint64_t v33 = (std::__shared_weak_count *)v32[13];
    if (v33)
    {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      if (v34)
      {
        uint64_t v32 = (void *)*a2;
        uint64_t v34 = *(void *)(*a2 + 96);
        uint64_t v35 = *(void *)(*a2 + 104);
        if (v35)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
          uint64_t v32 = (void *)*a2;
          int v88 = *a1;
          if (!*a2)
          {
LABEL_41:
            std::string::basic_string[abi:ne180100]<0>(&buf, off_1E6235910[a3]);
            std::string::basic_string[abi:ne180100]<0>(&__p, off_1E6235910[a4]);
            AMCP::Graph::Manifest_Log::add_message(v34, 3, "Manifest_Queue(%d|\"%s\")::enqueue_manifest: size(%zu)  %s -> %s", v36, v37, v38, v39, v40, v88);
          }
LABEL_40:
          AMCP::Graph::Manifest::get_iocontext_uid((AMCP::Graph::Manifest *)&v103, v32);
          goto LABEL_41;
        }
LABEL_39:
        int v88 = *a1;
        goto LABEL_40;
      }
    }
    else if (v34)
    {
      goto LABEL_39;
    }
  }
LABEL_42:
  if (!*((void *)a1 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "manifest queue outbox");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string buf = __p;
    }
    LOBYTE(v154) = 1;
    *((void *)&v154 + 1) = 0x100000037;
    *(_DWORD *)&v155[8] = 2;
    v155[12] = 1;
    v155[16] = 0;
    v155[20] = 0;
    operator new();
  }
  unsigned int v102 = 0;
  __p.__r_.__value_.__r.__words[0] = __PAIR64__(a4, a3);
  uint64_t v99 = 0;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request>::__init_with_size[abi:ne180100]<AMCP::IO_Core::Play_State_Manager::Play_Request*,AMCP::IO_Core::Play_State_Manager::Play_Request*>(&__p.__r_.__value_.__l.__size_, (const void *)*a5, a5[1], (uint64_t)(a5[1] - *a5) >> 2);
  LODWORD(v100) = a7;
  *((void *)&v100 + 1) = 0x40B0000000000000;
  long long v101 = a9;
  std::string::size_type v42 = a2[1];
  buf.__r_.__value_.__r.__words[0] = *a2;
  buf.__r_.__value_.__l.__size_ = v42;
  if (v42) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
  }
  LODWORD(buf.__r_.__value_.__r.__words[2]) = *a1;
  long long v154 = *a6;
  uint64_t v43 = *((void *)a6 + 3);
  *(void *)uint64_t v155 = *((void *)a6 + 2);
  *(void *)&v155[8] = v43;
  uint64_t v44 = *((void *)a6 + 4);
  *(void *)&v155[16] = v44;
  if (v44) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)&v155[24] = *((_DWORD *)a6 + 10);
  v157[0] = MEMORY[0x1E4FB7EA0] + 16;
  uint64_t v45 = caulk::mach::details::retain_os_object(*((caulk::mach::details **)a6 + 7), v41);
  long long v46 = a6[5];
  long long v158 = a6[4];
  v157[1] = v45;
  *(_OWORD *)char v159 = v46;
  *(_OWORD *)&v159[9] = *(long long *)((char *)a6 + 89);
  v157[0] = MEMORY[0x1E4FB7EA8] + 16;
  char v160 = *((unsigned char *)a6 + 105);
  __int16 v161 = *((_WORD *)a6 + 56);
  long long v47 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  std::string::size_type v162 = __p.__r_.__value_.__r.__words[0];
  __int16 v163 = 0;
  uint64_t v165 = 0;
  long long v164 = 0;
  uint64_t v48 = __p.__r_.__value_.__r.__words[2];
  unint64_t v49 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__l.__size_) >> 2;
  std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request>::__init_with_size[abi:ne180100]<AMCP::IO_Core::Play_State_Manager::Play_Request*,AMCP::IO_Core::Play_State_Manager::Play_Request*>(&v163, (const void *)__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2], v49);
  long long v166 = v100;
  long long v167 = v101;
  uint64_t v168 = a1 + 176;
  long long v169 = &v102;
  long long v93 = *(_OWORD *)a2;
  if (a2[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a2[1] + 8), 1uLL, memory_order_relaxed);
  }
  v94[0] = 0;
  v94[1] = 0;
  uint64_t v95 = 0;
  std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request>::__init_with_size[abi:ne180100]<AMCP::IO_Core::Play_State_Manager::Play_Request*,AMCP::IO_Core::Play_State_Manager::Play_Request*>(v94, *((const void **)&v47 + 1), v48, v49);
  long long v96 = v100;
  long long v97 = v101;
  long long v128 = *a6;
  uint64_t v51 = *((void *)a6 + 3);
  uint64_t v129 = *((void *)a6 + 2);
  *(void *)&long long v130 = v51;
  uint64_t v52 = *((void *)a6 + 4);
  *((void *)&v130 + 1) = v52;
  if (v52) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 8), 1uLL, memory_order_relaxed);
  }
  int v131 = *((_DWORD *)a6 + 10);
  v132[0] = MEMORY[0x1E4FB7EA0] + 16;
  char v53 = (caulk::mach::details *)caulk::mach::details::retain_os_object(*((caulk::mach::details **)a6 + 7), v50);
  long long v54 = a6[5];
  long long v133 = a6[4];
  *(_OWORD *)uint64_t v134 = v54;
  *(_OWORD *)&v134[9] = *(long long *)((char *)a6 + 89);
  v132[0] = MEMORY[0x1E4FB7EA8] + 16;
  char v135 = *((unsigned char *)a6 + 105);
  __int16 v136 = *((_WORD *)a6 + 56);
  long long v137 = v93;
  long long __src = *(_OWORD *)v94;
  uint64_t v138 = v47;
  uint64_t v140 = v95;
  v94[1] = 0;
  uint64_t v95 = 0;
  v94[0] = 0;
  long long v141 = v100;
  long long v142 = v101;
  long long v143 = v128;
  uint64_t v144 = v129;
  long long v145 = v130;
  long long v130 = 0uLL;
  int v146 = v131;
  long long v149 = 0u;
  memset(v150, 0, sizeof(v150));
  char v151 = 0;
  uint64_t v147 = MEMORY[0x1E4FB7EA8] + 16;
  long long v148 = v53;
  v132[1] = 0;
  caulk::mach::details::release_os_object(0, v55);
  long long v57 = v149;
  long long v56 = *(_OWORD *)v150;
  uint64_t v58 = *(void *)&v150[16];
  long long v149 = v133;
  *(_OWORD *)char v150 = *(_OWORD *)v134;
  *(void *)&v150[16] = *(void *)&v134[16];
  *(void *)&v134[16] = v58;
  long long v133 = v57;
  *(_OWORD *)uint64_t v134 = v56;
  LOBYTE(v5_Block_object_dispose(&a9, 8) = v150[24];
  v150[24] = v134[24];
  v134[24] = v58;
  LOBYTE(v5_Block_object_dispose(&a9, 8) = v151;
  char v151 = v135;
  char v135 = v58;
  __int16 v152 = v136;
  AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0::$_0((uint64_t)&v106, (uint64_t)&buf);
  std::string v127 = 0;
  uint64_t v59 = operator new(0xE8uLL);
  uint64_t v61 = v59;
  uint64_t v63 = v106;
  uint8x8_t v62 = v107;
  void *v59 = &unk_1F1464BC8;
  v59[1] = v63;
  v59[2] = v62;
  if (v62) {
    atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v59 + 6) = v108;
  *((_OWORD *)v59 + 2) = v109;
  uint64_t v64 = v111;
  v59[6] = v110;
  v59[7] = v64;
  uint64_t v65 = v112;
  v59[8] = v112;
  if (v65) {
    atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v59 + 1_Block_object_dispose(&a9, 8) = v113;
  v59[10] = MEMORY[0x1E4FB7EA0] + 16;
  uint64_t v66 = caulk::mach::details::retain_os_object(v115, v60);
  long long v67 = *(_OWORD *)v117;
  *((_OWORD *)v61 + 6) = v116;
  *((_OWORD *)v61 + 7) = v67;
  *(_OWORD *)((char *)v61 + 121) = *(_OWORD *)&v117[9];
  uint64_t v68 = MEMORY[0x1E4FB7EA8] + 16;
  *((_OWORD *)v61 + 10) = v121;
  long long v69 = v124;
  *(_OWORD *)(v61 + 23) = v123;
  v61[10] = v68;
  v61[11] = v66;
  *((unsigned char *)v61 + 137) = v118;
  *((_WORD *)v61 + 72) = v119;
  uint64_t v70 = v122;
  v61[19] = v120;
  v61[22] = v70;
  uint64_t v122 = 0;
  long long v121 = 0uLL;
  *(_OWORD *)(v61 + 25) = v69;
  *(_OWORD *)(v61 + 27) = v125;
  std::string v127 = v61;
  while (1)
  {
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v170, (uint64_t)v126);
    std::mutex::lock((std::mutex *)(a1 + 28));
    if (*((unsigned char *)a1 + 176)) {
      break;
    }
    uint64_t v71 = caulk::concurrent::stack<AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message,caulk::concurrent::intrusive_single_link_member<AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message,&AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message::m_next_free_message>>::pop();
    if (v71)
    {
      unint64_t v72 = v71;
      if (v172) {
        (*(void (**)(uint64_t))(*(void *)v172 + 48))(v172);
      }
      long long v73 = v137;
      if (*((void *)&v137 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v137 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      std::string::size_type v74 = *(std::__shared_weak_count **)(v72 + 8);
      *(_OWORD *)unint64_t v72 = v73;
      if (v74) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v74);
      }
      *(void *)(v72 + 16) = v138;
      if ((long long *)v72 != &v137) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v72 + 24), (char *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((void *)&__src + 1) - __src) >> 2);
      }
      long long v75 = v142;
      *(_OWORD *)(v72 + 4_Block_object_dispose(&a9, 8) = v141;
      *(_OWORD *)(v72 + 64) = v75;
      *(_DWORD *)(v72 + 80) = v143;
      *(void *)(v72 + 8_Block_object_dispose(&a9, 8) = *((void *)&v143 + 1);
      *(void *)(v72 + 96) = v144;
      long long v76 = v145;
      if (*((void *)&v145 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v145 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      char v77 = *(std::__shared_weak_count **)(v72 + 112);
      *(_OWORD *)(v72 + 104) = v76;
      if (v77) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v77);
      }
      *(_DWORD *)(v72 + 120) = v146;
      if ((long long *)v72 != &v137)
      {
        caulk::mach::details::holder::operator=((caulk::mach::details **)(v72 + 136), &v148);
        long long v78 = v149;
        long long v79 = *(_OWORD *)v150;
        *(_OWORD *)(v72 + 169) = *(_OWORD *)&v150[9];
        *(_OWORD *)(v72 + 144) = v78;
        *(_OWORD *)(v72 + 160) = v79;
        *(unsigned char *)(v72 + 185) = v151;
      }
      *(_WORD *)(v72 + 192) = v152;
      unint64_t v80 = *((void *)a1 + 2);
      atomic_store(v80, (unint64_t *)(v72 + 200));
      unint64_t v81 = v80;
      atomic_compare_exchange_strong((atomic_ullong *volatile)a1 + 2, &v81, v72);
      if (v81 != v80)
      {
        unint64_t v82 = v81;
        do
        {
          atomic_store(v81, (unint64_t *)(v72 + 200));
          atomic_compare_exchange_strong((atomic_ullong *volatile)a1 + 2, &v82, v72);
          BOOL v83 = v82 == v81;
          unint64_t v81 = v82;
        }
        while (!v83);
      }
      break;
    }
    std::mutex::unlock((std::mutex *)(a1 + 28));
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v170);
  }
  std::mutex::unlock((std::mutex *)(a1 + 28));
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v170);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v126);
  if ((void)v121)
  {
    *((void *)&v121 + 1) = v121;
    operator delete((void *)v121);
  }
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&v114);
  if (v112) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v112);
  }
  if (v107) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v107);
  }
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&v147);
  if (*((void *)&v145 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v145 + 1));
  }
  if ((void)__src)
  {
    *((void *)&__src + 1) = __src;
    operator delete((void *)__src);
  }
  if (*((void *)&v137 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v137 + 1));
  }
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v132);
  if (*((void *)&v130 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v130 + 1));
  }
  if (v94[0]) {
    operator delete(v94[0]);
  }
  uint64_t v84 = v102;
  if (v163)
  {
    long long v164 = v163;
    operator delete(v163);
  }
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v157);
  if (*(void *)&v155[16]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v155[16]);
  }
  if (buf.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
  }
  if (__p.__r_.__value_.__l.__size_) {
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  }
  return v84;
}

void sub_1BAC03E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = MEMORY[0x1E4FB7EA0] + 16;
  *(void *)(a1 + 80) = caulk::mach::details::retain_os_object(*(caulk::mach::details **)(a2 + 80), (void *)a2);
  long long v7 = *(_OWORD *)(a2 + 88);
  long long v8 = *(_OWORD *)(a2 + 113);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 113) = v8;
  *(_OWORD *)(a1 + 8_Block_object_dispose(&a9, 8) = v7;
  *(void *)(a1 + 72) = MEMORY[0x1E4FB7EA8] + 16;
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  uint64_t v9 = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = v9;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = 0;
  std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request>::__init_with_size[abi:ne180100]<AMCP::IO_Core::Play_State_Manager::Play_Request*,AMCP::IO_Core::Play_State_Manager::Play_Request*>((void *)(a1 + 152), *(const void **)(a2 + 152), *(void *)(a2 + 160), (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 2);
  long long v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(_OWORD *)(a1 + 20_Block_object_dispose(&a9, 8) = *(_OWORD *)(a2 + 208);
  return a1;
}

void sub_1BAC0411C(_Unwind_Exception *a1)
{
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 56);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  long long v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(a1);
}

void *AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0::~$_0(void *a1)
{
  int v2 = (void *)a1[19];
  if (v2)
  {
    a1[20] = v2;
    operator delete(v2);
  }
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)(a1 + 9));
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

void *std::__function::__func<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0,std::allocator<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0,std::allocator<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph14Manifest_Queue16enqueue_manifestERKNSt3__110shared_ptrINS0_8ManifestEEENS_15Transport_StateES8_RKNS2_6vectorINS_7IO_Core18Play_State_Manager12Play_RequestENS2_9allocatorISC_EEEERKNS0_26Manifest_Execution_ContextE13Anchor_PolicyNS2_7variantIJNS_3DAL11Sample_TimeEyEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0,std::allocator<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1 + 152;
  if (*(_DWORD *)(a1 + 152))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 72);
      long long v5 = *(std::__shared_weak_count **)(v3 + 80);
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      AMCP::Graph::Manifest_Inventory::set_nominal_buffer_size(*(void **)(v4 + 24), *(_DWORD *)(a1 + 24), a1 + 32);
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      unsigned int v6 = AMCP::Graph::Manifest::setup_processing(*(AMCP::Log::Scope_Registry **)(a1 + 8), a1 + 32, v1, *(void *)(a1 + 216));
      **(_DWORD **)(a1 + 224) = v6;
      if (*(_DWORD *)(a1 + 156) == 2 && !v6)
      {
        int v7 = *(_DWORD *)(a1 + 184);
        uint64_t v8 = *(void *)(a1 + 8);
        uint64_t v9 = *(void *)(v8 + 72);
        long long v10 = *(std::__shared_weak_count **)(v8 + 80);
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        AMCP::Graph::Manifest_Inventory::get_buffer_alignments(&v38, *(void **)(v9 + 24));
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        double v11 = v39[0];
        if (v39[0])
        {
          __int16 v12 = v39;
          int v13 = v39[0];
          do
          {
            __int16 v14 = v13;
            int v15 = v12;
            int v16 = *((_DWORD *)v13 + 7);
            if (v16 >= 1) {
              __int16 v12 = (AMCP::Log::Scope_Registry **)v13;
            }
            else {
              int v13 = (AMCP::Log::Scope_Registry *)((char *)v13 + 8);
            }
            int v13 = *(AMCP::Log::Scope_Registry **)v13;
          }
          while (v13);
          if (v12 != v39)
          {
            uint64_t v17 = v16 >= 1 ? v14 : (AMCP::Log::Scope_Registry *)v15;
            if (*((int *)v17 + 7) <= 1 && v7 != 0)
            {
              if (v7 != 2)
              {
                AMCP::Log::Scope_Registry::get(v39[0]);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
                uint64_t v21 = **(NSObject ***)buf;
                if (*(void *)v41) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
                }
                if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                {
                  int v22 = pthread_self();
                  mach_port_t v23 = pthread_mach_thread_np(v22);
                  *(_DWORD *)std::string buf = 67109890;
                  *(_DWORD *)&uint8_t buf[4] = v23;
                  *(_WORD *)uint64_t v41 = 2080;
                  *(void *)&v41[2] = "Manifest_Queue.cpp";
                  __int16 v42 = 1024;
                  int v43 = 470;
                  __int16 v44 = 2080;
                  *(void *)uint64_t v45 = "not (anchor_policy == Anchor_Policy::Anchor_At_Current_Time)";
                  _os_log_error_impl(&dword_1BAA78000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
                }
                AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v37);
                __cxa_allocate_exception(0x40uLL);
                caulk::make_string((caulk *)"", (uint64_t)&v29);
                std::logic_error::logic_error(&v30, &v29);
                v30.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
                std::logic_error::logic_error(&v31, &v30);
                uint64_t v33 = 0;
                uint64_t v34 = 0;
                uint64_t v35 = 0;
                int v36 = -1;
                v31.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
                uint64_t v32 = &unk_1F1489CF0;
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v31);
                *(void *)&v45[6] = "static void AMCP::Graph::Manifest_Queue::wait_until_new_devices_have_input(const st"
                                     "d::shared_ptr<Manifest> &, const Manifest_Execution_Context &, Anchor_Policy)";
                long long v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Queue.cpp";
                int v47 = 470;
                applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
                uint64_t v24 = &unk_1F148AA90;
                long long v25 = v27;
                *(void *)&long long v26 = v28;
                long long v27 = 0uLL;
                uint64_t v28 = 0;
                boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
              }
              AMCP::Graph::Manifest::calculate_anchor_time((uint64_t)buf, *(void *)(a1 + 8), (float *)(a1 + 32), 2, 0, 0);
              AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)&v29, *(void *)(*(void *)(a1 + 8) + 72), *(std::__shared_weak_count **)(*(void *)(a1 + 8) + 80));
              LODWORD(v24) = 2;
              long long v25 = 0x4000000000000000uLL;
              long long v26 = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
              boost::operators_impl::operator-((AMCP::DAL::DAL_Time *)&v31, (uint64_t)buf, (AMCP::DAL::DAL_Time_Delta *)&v24);
              if (*((void *)&v26 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
              }
              uint64_t host_time = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)&v31);
              if (host_time > mach_absolute_time())
              {
                uint64_t v20 = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)&v31);
                mach_wait_until(v20);
              }
              if (v34) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v34);
              }
              if (*(void *)&v45[6]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v45[6]);
              }
              double v11 = v39[0];
            }
          }
        }
        std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v11);
      }
    }
  }
}

void sub_1BAC04604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(void **)(v31 - 144));
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0,std::allocator<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0,std::allocator<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0>,void ()(void)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0,std::allocator<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0>,void ()(void)>::destroy[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[19];
  if (v2)
  {
    a1[20] = v2;
    operator delete(v2);
  }
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)(a1 + 9));
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void std::__function::__func<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0,std::allocator<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0,std::allocator<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1464BC8;
  return AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0::$_0((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0,std::allocator<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  int v2 = operator new(0xE8uLL);
  void *v2 = &unk_1F1464BC8;
  AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0::$_0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAC04820(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0,std::allocator<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1464BC8;
  int v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)(a1 + 10));
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0,std::allocator<AMCP::Graph::Manifest_Queue::enqueue_manifest(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,AMCP::Transport_State,std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request> const&,AMCP::Graph::Manifest_Execution_Context const&,Anchor_Policy,std::variant<AMCP::DAL::Sample_Time,unsigned long long>)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1464BC8;
  int v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)(a1 + 10));
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

void AMCP::Graph::Manifest_Queue::process_once(AMCP::Graph::Manifest_Queue *a1, int a2, unsigned int a3)
{
  long long v5 = (AMCP::Graph::Manifest_Queue **)a1;
  uint64_t v137 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = AMCP::Graph::Manifest_Queue::maybe_acquire_new_manifest(a1);
  if (v6)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v73 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v74 = pthread_self();
      mach_port_t v75 = pthread_mach_thread_np(v74);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v75;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Manifest_Queue.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 385;
      *(_WORD *)&uint8_t buf[24] = 2080;
      *(void *)&buf[26] = "not (success == Start_Stop_Result::success)";
      _os_log_error_impl(&dword_1BAA78000, v73, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s maybe_acquire_new_manifest failed", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v111);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"maybe_acquire_new_manifest failed", (uint64_t)v115);
    std::logic_error::logic_error((std::logic_error *)&v121, (const std::string *)v115);
    v121.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error(&v101, (const std::logic_error *)&v121);
    uint64_t v103 = 0;
    uint64_t v104 = 0;
    uint64_t v105 = 0;
    int v106 = -1;
    v101.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unsigned int v102 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v101);
    *(void *)&unsigned char buf[32] = "void AMCP::Graph::Manifest_Queue::process_once(Handle_Overloads, Process_Once_Option)";
    *(void *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Queue.cpp";
    LODWORD(v127) = 385;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v113.__r_.__value_.__l.__data_);
    *(_OWORD *)&v123[8] = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
    *(void *)long long v123 = &unk_1F148AA90;
    *(void *)long long v124 = *((void *)&v113.__r_.__value_.__l + 2);
    memset(&v113, 0, sizeof(v113));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  int v7 = v5[70];
  if (!v7)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v76 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
    {
      char v77 = pthread_self();
      mach_port_t v78 = pthread_mach_thread_np(v77);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v78;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Manifest_Queue.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 386;
      *(_WORD *)&uint8_t buf[24] = 2080;
      *(void *)&buf[26] = "not (m_current_manifiest)";
      _os_log_error_impl(&dword_1BAA78000, v76, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no manifest", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v111);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"no manifest", (uint64_t)v115);
    std::logic_error::logic_error((std::logic_error *)&v121, (const std::string *)v115);
    v121.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error(&v101, (const std::logic_error *)&v121);
    uint64_t v103 = 0;
    uint64_t v104 = 0;
    uint64_t v105 = 0;
    int v106 = -1;
    v101.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unsigned int v102 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v101);
    *(void *)&unsigned char buf[32] = "void AMCP::Graph::Manifest_Queue::process_once(Handle_Overloads, Process_Once_Option)";
    *(void *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Queue.cpp";
    LODWORD(v127) = 386;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v113.__r_.__value_.__l.__data_);
    *(_OWORD *)&v123[8] = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
    *(void *)long long v123 = &unk_1F148AA90;
    *(void *)long long v124 = *((void *)&v113.__r_.__value_.__l + 2);
    memset(&v113, 0, sizeof(v113));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if ((*(_DWORD *)v7 & 0xFFFFFFFE) != 2)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v79 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
    {
      unint64_t v80 = pthread_self();
      mach_port_t v81 = pthread_mach_thread_np(v80);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v81;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Manifest_Queue.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 389;
      *(_WORD *)&uint8_t buf[24] = 2080;
      *(void *)&buf[26] = "not (m_current_manifiest->is_processing() or m_current_manifiest->is_prewarming())";
      _os_log_error_impl(&dword_1BAA78000, v79, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v111);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)v115);
    std::logic_error::logic_error((std::logic_error *)&v121, (const std::string *)v115);
    v121.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error(&v101, (const std::logic_error *)&v121);
    uint64_t v103 = 0;
    uint64_t v104 = 0;
    uint64_t v105 = 0;
    int v106 = -1;
    v101.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unsigned int v102 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v101);
    *(void *)&unsigned char buf[32] = "void AMCP::Graph::Manifest_Queue::process_once(Handle_Overloads, Process_Once_Option)";
    *(void *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Queue.cpp";
    LODWORD(v127) = 389;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v113.__r_.__value_.__l.__data_);
    *(_OWORD *)&v123[8] = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
    *(void *)long long v123 = &unk_1F148AA90;
    *(void *)long long v124 = *((void *)&v113.__r_.__value_.__l + 2);
    memset(&v113, 0, sizeof(v113));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v9 = *((void *)v7 + 9);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)v7 + 10);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v10 = *(void *)(v9 + 64);
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    uint64_t v10 = *(void *)(v9 + 64);
  }
  AMCP::Graph::Manifest_Counter::get_current_cycle_anchor_time((uint64_t)buf, v10);
  if (((_BYTE)v5[39] & 2) == 0) {
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)(v5 + 39));
  }
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)buf);
  AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)buf);
  kdebug_trace();
  double v11 = *(AMCP::Log::Scope_Registry **)&buf[32];
  if (*(void *)&buf[32]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[32]);
  }
  __int16 v12 = v5[70];
  if (*(_DWORD *)v12 == 3)
  {
    int v13 = *(_DWORD *)v5;
    AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)buf, *((void *)v12 + 9), *((std::__shared_weak_count **)v12 + 10));
    uint64_t v14 = *(void *)(*((void *)v12 + 9) + 64);
    uint64_t v16 = *(void *)(v14 + 24);
    int v15 = *(std::__shared_weak_count **)(v14 + 32);
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v17 = *(void *)buf;
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    else
    {
      uint64_t v17 = *(void *)buf;
    }
    int v22 = *(AMCP::Log::Scope_Registry **)&buf[8];
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (v17 != v16)
    {
      AMCP::Log::Scope_Registry::get(v22);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v85 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
      {
        uint64_t v86 = pthread_self();
        mach_port_t v87 = pthread_mach_thread_np(v86);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v87;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Manifest.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = 686;
        *(_WORD *)&uint8_t buf[24] = 2080;
        *(void *)&buf[26] = "not (get_master_timebase() == m_inventory->get_manifest_counter().get_master_timebase())";
        _os_log_error_impl(&dword_1BAA78000, v85, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v111);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)v115);
      std::logic_error::logic_error((std::logic_error *)&v121, (const std::string *)v115);
      v121.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
      std::logic_error::logic_error(&v101, (const std::logic_error *)&v121);
      uint64_t v103 = 0;
      uint64_t v104 = 0;
      uint64_t v105 = 0;
      int v106 = -1;
      v101.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      unsigned int v102 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v101);
      *(void *)&unsigned char buf[32] = "void AMCP::Graph::Manifest::process_once(Object_ID, const Manifest_Execution_Context &, Hand"
                            "le_Overloads, Process_Once_Option)";
      *(void *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
      LODWORD(v127) = 686;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v113.__r_.__value_.__l.__data_);
      *(_OWORD *)&v123[8] = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
      *(void *)long long v123 = &unk_1F148AA90;
      *(void *)long long v124 = *((void *)&v113.__r_.__value_.__l + 2);
      memset(&v113, 0, sizeof(v113));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    int v96 = a2;
    AMCP::Graph::create_cycle_info((AMCP::Graph *)&v101, *(const AMCP::Graph::Manifest_Counter **)(*((void *)v12 + 9) + 64), (const AMCP::Graph::Manifest_Execution_Context *)(v5 + 39));
    AMCP::Graph::Manifest_Inventory::begin_cycle(*((void **)v12 + 9), (uint64_t *)v12 + 12, (float *)v5 + 78);
    uint64_t v136 = 0;
    long long v134 = 0u;
    long long v135 = 0u;
    long long v132 = 0u;
    long long v133 = 0u;
    long long v130 = 0u;
    long long v131 = 0u;
    long long v128 = 0u;
    long long v129 = 0u;
    long long v127 = 0u;
    memset(buf, 0, sizeof(buf));
    mach_port_t v23 = (AMCP::Log::Scope_Registry *)AMCP::Graph::io_proc_cycle_info_to_audio_io_cycle_info((uint64_t)&v101, (uint64_t)buf);
    uint64_t v24 = (uint64_t *)*((void *)v12 + 1);
    long long v25 = (uint64_t *)*((void *)v12 + 2);
    while (v24 != v25)
    {
      uint64_t v26 = *v24;
      if (*(_DWORD *)(*v24 + 88) != 3)
      {
        AMCP::Log::Scope_Registry::get(v23);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v123, "com.apple.coreaudio", "AMCP");
        long long v67 = **(NSObject ***)v123;
        if (*(void *)&v123[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v123[8]);
        }
        if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
        {
          uint64_t v68 = pthread_self();
          mach_port_t v69 = pthread_mach_thread_np(v68);
          uint64_t v70 = (void *)(v26 + 64);
          if (*(char *)(v26 + 87) < 0) {
            uint64_t v70 = (void *)*v70;
          }
          *(_DWORD *)long long v123 = 67110146;
          *(_DWORD *)&v123[4] = v69;
          *(_WORD *)&v123[8] = 2080;
          *(void *)&v123[10] = "Manifest_Task.cpp";
          *(_WORD *)&v123[18] = 1024;
          *(_DWORD *)&v123[20] = 150;
          *(_WORD *)long long v124 = 2080;
          *(void *)&v124[2] = "not (m_processing_state == Processing_State::Processing)";
          *(_WORD *)&v124[10] = 2080;
          *(void *)&v124[12] = v70;
          _os_log_error_impl(&dword_1BAA78000, v67, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s begin_cycle call in wrong state in %s", v123, 0x2Cu);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v119);
        __cxa_allocate_exception(0x40uLL);
        uint64_t v71 = (void *)(v26 + 64);
        if (*(char *)(v26 + 87) < 0) {
          uint64_t v71 = (void *)*v71;
        }
        caulk::make_string((caulk *)"begin_cycle call in wrong state in %s", (uint64_t)&v121, v71);
        std::logic_error::logic_error(&v120, &v121);
        v120.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error((std::logic_error *)v115, &v120);
        *(void *)&v115[24] = 0;
        uint64_t v116 = 0;
        uint64_t v117 = 0;
        int v118 = -1;
        *(void *)uint64_t v115 = &unk_1F1489CC8;
        *(void *)&v115[16] = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v123, (uint64_t)v115);
        *(void *)&v124[8] = "void AMCP::Graph::Manifest_Task::begin_cycle(Object_ID, const Proc_Cycle_Info &)";
        *(void *)&v124[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
        int v125 = 150;
        std::vector<void *>::vector(&v111);
        int v72 = backtrace((void **)&v111.~logic_error, (unint64_t)(v111.__imp_.__imp_ - (const char *)v111.__vftable) >> 3);
        std::vector<void *>::resize((char **)&v111, v72);
        *(std::logic_error *)&v113.__r_.__value_.__r.__words[1] = v111;
        v113.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
        uint64_t v114 = v112;
        v111.__vftable = 0;
        v111.__imp_.__imp_ = 0;
        uint64_t v112 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      mach_port_t v23 = *(AMCP::Log::Scope_Registry **)(*(void *)(v26 + 48) + 216);
      if (v23) {
        mach_port_t v23 = (AMCP::Log::Scope_Registry *)std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::operator()((uint64_t)v23, v13);
      }
      v24 += 2;
    }
    AMCP::Graph::Manifest::calculate_all_required_input_samples(v12, (const AMCP::Graph::Manifest_Execution_Context *)(v5 + 39));
    unsigned int v92 = v13;
    unsigned int v93 = a3;
    int v94 = v12;
    uint64_t v95 = (AMCP::DAL::DAL_Time_Delta *)(v5 + 39);
    long long v27 = (uint64_t *)*((void *)v12 + 1);
    long long v97 = v5;
    char v98 = (uint64_t *)*((void *)v12 + 2);
    if (v27 != v98)
    {
      do
      {
        uint64_t v99 = v27;
        uint64_t v28 = *v27;
        uint64_t v29 = *(void *)(*(void *)(*v27 + 48) + 120);
        if (v29)
        {
          (*(void (**)(std::logic_error *__return_ptr))(*(void *)v29 + 48))(&v120);
          if (v120.__vftable)
          {
            std::logic_error v30 = *(uint64_t **)(v28 + 24);
            long long v100 = *(uint64_t **)(v28 + 32);
            if (v30 != v100)
            {
              uint64_t v31 = 0;
              do
              {
                uint64_t v32 = *v30;
                uint64_t v33 = v30[1];
                while (v32 != v33)
                {
                  uint64_t v34 = *(void **)v32;
                  *(_OWORD *)std::string buf = *(_OWORD *)(*(void *)v32 + 208);
                  uint64_t v35 = v34[29];
                  *(void *)&buf[16] = v34[28];
                  *(void *)&uint8_t buf[24] = v35;
                  uint64_t v36 = v34[30];
                  *(void *)&unsigned char buf[32] = v36;
                  if (v36) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
                  }
                  double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)buf);
                  uint64_t v38 = *(void **)v32;
                  *(_OWORD *)long long v123 = *(_OWORD *)(*(void *)v32 + 208);
                  uint64_t v39 = v38[29];
                  *(void *)&v123[16] = v38[28];
                  *(void *)long long v124 = v39;
                  uint64_t v40 = v38[30];
                  *(void *)&v124[8] = v40;
                  if (v40) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
                  }
                  double v41 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v123)
                      + *(double *)(*(void *)v32 + 160);
                  v119[0] = sample_time;
                  v119[1] = v41;
                  if (*(void *)&v124[8]) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v124[8]);
                  }
                  __int16 v42 = *(AMCP::Log::Scope_Registry **)&buf[32];
                  if (*(void *)&buf[32]) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[32]);
                  }
                  if (round(v119[0]) < 0.0)
                  {
                    AMCP::Log::Scope_Registry::get(v42);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
                    uint64_t v63 = **(NSObject ***)buf;
                    if (*(void *)&buf[8]) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
                    }
                    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
                    {
                      uint64_t v64 = pthread_self();
                      mach_port_t v65 = pthread_mach_thread_np(v64);
                      *(_DWORD *)std::string buf = 67109890;
                      *(_DWORD *)&uint8_t buf[4] = v65;
                      *(_WORD *)&uint8_t buf[8] = 2080;
                      *(void *)&buf[10] = "Device_Connection.cpp";
                      *(_WORD *)&unsigned char buf[18] = 1024;
                      *(_DWORD *)&buf[20] = 128;
                      *(_WORD *)&uint8_t buf[24] = 2080;
                      *(void *)&buf[26] = "not (required_samples.start() >= 0_S)";
                      _os_log_error_impl(&dword_1BAA78000, v63, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to read sample before 0", buf, 0x22u);
                    }
                    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v122);
                    __cxa_allocate_exception(0x40uLL);
                    caulk::make_string((caulk *)"Attempt to read sample before 0", (uint64_t)&v113);
                    std::logic_error::logic_error(&v111, &v113);
                    v111.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
                    std::logic_error::logic_error((std::logic_error *)v123, &v111);
                    memset(v124, 0, sizeof(v124));
                    int v125 = -1;
                    *(void *)long long v123 = &unk_1F1489CC8;
                    *(void *)&v123[16] = &unk_1F1489CF0;
                    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v123);
                    *(void *)&unsigned char buf[32] = "void AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(Object_"
                                          "ID, size_t, const DAL::Sample_Time_Range &)";
                    *(void *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
                    LODWORD(v127) = 128;
                    std::vector<void *>::vector(&v121);
                    int v66 = backtrace((void **)v121.__r_.__value_.__l.__data_, (v121.__r_.__value_.__l.__size_ - v121.__r_.__value_.__r.__words[0]) >> 3);
                    std::vector<void *>::resize(&v121.__r_.__value_.__l.__data_, v66);
                    *(std::string *)&v115[8] = v121;
                    *(void *)uint64_t v115 = &unk_1F148AA90;
                    memset(&v121, 0, sizeof(v121));
                    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
                  }
                  int v43 = v120.__vftable;
                  __int16 v44 = (std::__shared_weak_count *)v120.~logic_error_0;
                  if (!v44
                    || (__int16 v44 = std::__shared_weak_count::lock(v44), (v45 = v44) == 0)
                    || (long long v46 = (os_unfair_lock_s *)v43->~logic_error) == 0)
                  {
                    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v44);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
                    char v53 = **(NSObject ***)buf;
                    if (*(void *)&buf[8]) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
                    }
                    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
                    {
                      long long v54 = pthread_self();
                      mach_port_t v55 = pthread_mach_thread_np(v54);
                      *(_DWORD *)std::string buf = 67109890;
                      *(_DWORD *)&uint8_t buf[4] = v55;
                      *(_WORD *)&uint8_t buf[8] = 2080;
                      *(void *)&buf[10] = "Device_Connection.cpp";
                      *(_WORD *)&unsigned char buf[18] = 1024;
                      *(_DWORD *)&buf[20] = 130;
                      *(_WORD *)&uint8_t buf[24] = 2080;
                      *(void *)&buf[26] = "not (device_state.operator BOOL())";
                      _os_log_error_impl(&dword_1BAA78000, v53, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
                    }
                    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v122);
                    __cxa_allocate_exception(0x40uLL);
                    caulk::make_string((caulk *)"", (uint64_t)&v113);
                    std::logic_error::logic_error(&v111, &v113);
                    v111.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
                    std::logic_error::logic_error((std::logic_error *)v123, &v111);
                    memset(v124, 0, sizeof(v124));
                    int v125 = -1;
                    *(void *)long long v123 = &unk_1F1489CC8;
                    *(void *)&v123[16] = &unk_1F1489CF0;
                    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v123);
                    *(void *)&unsigned char buf[32] = "void AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(Object_"
                                          "ID, size_t, const DAL::Sample_Time_Range &)";
                    *(void *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
                    LODWORD(v127) = 130;
                    std::vector<void *>::vector(&v121);
                    int v56 = backtrace((void **)v121.__r_.__value_.__l.__data_, (v121.__r_.__value_.__l.__size_ - v121.__r_.__value_.__r.__words[0]) >> 3);
                    std::vector<void *>::resize(&v121.__r_.__value_.__l.__data_, v56);
                    *(std::string *)&v115[8] = v121;
                    *(void *)uint64_t v115 = &unk_1F148AA90;
                    memset(&v121, 0, sizeof(v121));
                    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
                  }
                  os_unfair_lock_lock(v46 + 1);
                  *(void *)std::string buf = &unk_1F14616F0;
                  *(void *)&uint8_t buf[8] = v31;
                  *(void *)&buf[16] = v119;
                  *(void *)&uint8_t buf[24] = buf;
                  AMCP::IO_Core::Device_Node_State::for_each_stream_connection((uint64_t)v46, 1u, (uint64_t)buf);
                  std::__function::__value_func<BOOL ()(AMCP::IO_Core::Stream_Connection &)>::~__value_func[abi:ne180100](buf);
                  os_unfair_lock_unlock(v46 + 1);
                  std::__shared_weak_count::__release_shared[abi:ne180100](v45);
                  v32 += 16;
                }
                ++v31;
                v30 += 5;
              }
              while (v30 != v100);
            }
          }
        }
        else
        {
          v120.__vftable = 0;
          v120.__imp_.__imp_ = 0;
        }
        if (v120.__imp_.__imp_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v120.__imp_.__imp_);
        }
        long long v27 = v99 + 2;
      }
      while (v99 + 2 != v98);
    }
    uint64_t v47 = *((void *)v94 + 9);
    uint64_t v48 = *(os_unfair_lock_s ****)(v47 + 112);
    for (uint64_t i = *(os_unfair_lock_s ****)(v47 + 120); v48 != i; v48 += 2)
      AMCP::IO_Core::Device_Connection::begin_cycle(*v48, (std::string::size_type)&v101, v95);
    long long v5 = v97;
    if (v96) {
      overload_time_in_uint64_t host_time = -1;
    }
    else {
      overload_time_in_uint64_t host_time = AMCP::Graph::Manifest::get_overload_time_in_host_time(v94, v95);
    }
    long long v57 = (uint64_t *)*((void *)v94 + 1);
    uint64_t v58 = (uint64_t *)*((void *)v94 + 2);
    while (v57 != v58)
    {
      uint64_t v59 = *v57;
      AMCP::Graph::Manifest_Task::maybe_create_data_flow_calculator(*v57);
      (*(void (**)(void, void, std::logic_error *, AMCP::DAL::DAL_Time_Delta *, uint64_t, void))(**(void **)(v59 + 104) + 16))(*(void *)(v59 + 104), v92, &v101, v95, overload_time_in_host_time, v93);
      v57 += 2;
    }
    uint64_t v136 = 0;
    long long v134 = 0u;
    long long v135 = 0u;
    long long v132 = 0u;
    long long v133 = 0u;
    long long v130 = 0u;
    long long v131 = 0u;
    long long v128 = 0u;
    long long v129 = 0u;
    long long v127 = 0u;
    memset(buf, 0, sizeof(buf));
    AMCP::Graph::io_proc_cycle_info_to_audio_io_cycle_info((uint64_t)&v101, (uint64_t)buf);
    uint64_t v60 = *((void *)v94 + 1);
    uint64_t v61 = *((void *)v94 + 2);
    while (v60 != v61)
    {
      uint64_t v62 = *(void *)(*(void *)(*(void *)v60 + 48) + 280);
      if (v62) {
        std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::operator()(v62, v92);
      }
      v60 += 16;
    }
    AMCP::Graph::Manifest_Inventory::end_cycle(*((AMCP::Log::Scope_Registry **)v94 + 9), (uint64_t)&v101, (double *)v95);
    if (v110) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v110);
    }
    if (v109) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v109);
    }
    if (v108) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v108);
    }
    if (v107) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v107);
    }
    uint64_t v52 = v104;
    if (v104) {
LABEL_94:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  else
  {
    if (*(_DWORD *)v12 != 2)
    {
      AMCP::Log::Scope_Registry::get(v11);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unint64_t v82 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
      {
        BOOL v83 = pthread_self();
        mach_port_t v84 = pthread_mach_thread_np(v83);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v84;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Manifest.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = 671;
        *(_WORD *)&uint8_t buf[24] = 2080;
        *(void *)&buf[26] = "not (is_prewarming())";
        _os_log_error_impl(&dword_1BAA78000, v82, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s prewarm_once() called before begin_processing()", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v111);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"prewarm_once() called before begin_processing()", (uint64_t)v115);
      std::logic_error::logic_error((std::logic_error *)&v121, (const std::string *)v115);
      v121.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
      std::logic_error::logic_error(&v101, (const std::logic_error *)&v121);
      uint64_t v103 = 0;
      uint64_t v104 = 0;
      uint64_t v105 = 0;
      int v106 = -1;
      v101.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      unsigned int v102 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v101);
      *(void *)&unsigned char buf[32] = "void AMCP::Graph::Manifest::prewarm_once(Object_ID, const Manifest_Execution_Context &)";
      *(void *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
      LODWORD(v127) = 671;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v113.__r_.__value_.__l.__data_);
      *(_OWORD *)&v123[8] = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
      *(void *)long long v123 = &unk_1F148AA90;
      *(void *)long long v124 = *((void *)&v113.__r_.__value_.__l + 2);
      memset(&v113, 0, sizeof(v113));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)buf, *((void *)v12 + 9), *((std::__shared_weak_count **)v12 + 10));
    uint64_t v18 = *(void *)(*((void *)v12 + 9) + 64);
    uint64_t v20 = *(void *)(v18 + 24);
    unsigned int v19 = *(std::__shared_weak_count **)(v18 + 32);
    if (v19)
    {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v21 = *(void *)buf;
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    else
    {
      uint64_t v21 = *(void *)buf;
    }
    uint64_t v51 = *(AMCP::Log::Scope_Registry **)&buf[8];
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (v21 != v20)
    {
      AMCP::Log::Scope_Registry::get(v51);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v88 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
      {
        int v89 = pthread_self();
        mach_port_t v90 = pthread_mach_thread_np(v89);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v90;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Manifest.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = 672;
        *(_WORD *)&uint8_t buf[24] = 2080;
        *(void *)&buf[26] = "not (get_master_timebase() == m_inventory->get_manifest_counter().get_master_timebase())";
        _os_log_error_impl(&dword_1BAA78000, v88, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v111);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)v115);
      std::logic_error::logic_error((std::logic_error *)&v121, (const std::string *)v115);
      v121.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
      std::logic_error::logic_error(&v101, (const std::logic_error *)&v121);
      uint64_t v103 = 0;
      uint64_t v104 = 0;
      uint64_t v105 = 0;
      int v106 = -1;
      v101.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      unsigned int v102 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v101);
      *(void *)&unsigned char buf[32] = "void AMCP::Graph::Manifest::prewarm_once(Object_ID, const Manifest_Execution_Context &)";
      *(void *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
      LODWORD(v127) = 672;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v113.__r_.__value_.__l.__data_);
      *(_OWORD *)&v123[8] = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
      *(void *)long long v123 = &unk_1F148AA90;
      *(void *)long long v124 = *((void *)&v113.__r_.__value_.__l + 2);
      memset(&v113, 0, sizeof(v113));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    AMCP::Graph::create_cycle_info((AMCP::Graph *)buf, *(const AMCP::Graph::Manifest_Counter **)(*((void *)v12 + 9) + 64), (const AMCP::Graph::Manifest_Execution_Context *)(v5 + 39));
    AMCP::Graph::Manifest_Inventory::begin_cycle(*((void **)v12 + 9), (uint64_t *)v12 + 12, (float *)v5 + 78);
    AMCP::Graph::Manifest_Inventory::end_cycle(*((AMCP::Log::Scope_Registry **)v12 + 9), (uint64_t)buf, (double *)v5 + 39);
    if (*((void *)&v134 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v134 + 1));
    }
    if (*((void *)&v133 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v133 + 1));
    }
    if ((void)v131) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v131);
    }
    if (*((void *)&v128 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v128 + 1));
    }
    uint64_t v52 = *(std::__shared_weak_count **)&buf[32];
    if (*(void *)&buf[32]) {
      goto LABEL_94;
    }
  }
  if (AMCP::Graph::Manifest_Queue::timebases_are_valid(v5[70]))
  {
    wake_time_in_uint64_t host_time = AMCP::Graph::Manifest_Queue::get_wake_time_in_host_time((AMCP::Graph::Manifest_Queue *)v5);
    AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)v115, *((void *)v5[70] + 9), *((std::__shared_weak_count **)v5[70] + 10));
    *(_DWORD *)long long v123 = 1;
    *(void *)&v123[8] = 0;
    *(void *)&v123[16] = wake_time_in_host_time;
    *(_OWORD *)long long v124 = *(_OWORD *)v115;
    *(_OWORD *)uint64_t v115 = 0uLL;
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v123);
    AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)v123);
    AMCP::Graph::Manifest_Queue::get_sample_rate(v5[70]);
    kdebug_trace();
    if (*(void *)&v124[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v124[8]);
    }
  }
}

void sub_1BAC06C8C()
{
}

void sub_1BAC06CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a69) {
    JUMPOUT(0x1BAC06CACLL);
  }
  JUMPOUT(0x1BAC06A88);
}

void AMCP::Graph::Manifest_Queue::reanchor_after_time_change(AMCP::Graph::Manifest_Queue *this)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 70);
  uint64_t v4 = *(void *)(v2 + 72);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 80);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (v4)
    {
      uint64_t v2 = *((void *)this + 70);
      goto LABEL_5;
    }
LABEL_32:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v23 = **(NSObject ***)buf;
    if (*(void *)v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v52);
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = pthread_self();
      mach_port_t v25 = pthread_mach_thread_np(v24);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v25;
      *(_WORD *)uint64_t v52 = 2080;
      *(void *)&v52[2] = "Manifest_Queue.cpp";
      __int16 v53 = 1024;
      int v54 = 597;
      __int16 v55 = 2080;
      *(void *)int v56 = "not (m_current_manifiest->get_inventory())";
      _os_log_error_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We need a valid inventory in order to reanchor_after_time_change", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v35);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"We need a valid inventory in order to reanchor_after_time_change", (uint64_t)&v32);
    std::logic_error::logic_error((std::logic_error *)&v44, &v32);
    v44.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error(&v45, (const std::logic_error *)&v44);
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    int v50 = -1;
    v45.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v46 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v45);
    *(void *)&v56[6] = "void AMCP::Graph::Manifest_Queue::reanchor_after_time_change()";
    long long v57 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Queue.cpp";
    int v58 = 597;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v37.__r_.__value_.__l.__data_);
    std::string v42 = v37;
    double v41 = &unk_1F148AA90;
    memset(&v37, 0, sizeof(v37));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (!v4) {
    goto LABEL_32;
  }
LABEL_5:
  long long v5 = (AMCP::Graph::Manifest_Queue *)((char *)this + 312);
  AMCP::Graph::Manifest::calculate_anchor_time((uint64_t)&v32, v2, (float *)this + 78, 2, 0, 0);
  unsigned int v6 = *(std::__shared_weak_count **)(*((void *)this + 70) + 80);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  kdebug_trace();
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = *((void *)this + 70);
  uint64_t v9 = *(AMCP::Graph::Manifest_Inventory **)(v7 + 72);
  uint64_t v8 = *(std::__shared_weak_count **)(v7 + 80);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v10 = *(_DWORD *)this;
  for (uint64_t i = (void *)*((void *)v9 + 3); i; uint64_t i = (void *)*i)
  {
    uint64_t v12 = i[12];
    uint64_t v13 = *(void *)(v12 + 296);
    if (v13) {
      *(void *)(v12 + 296) = v13 - 1;
    }
  }
  uint64_t v14 = *((void *)v9 + 8);
  uint64_t v16 = v33;
  int v15 = v34;
  if (v34)
  {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v17 = *(void *)(v14 + 24);
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    if (v16 == v17) {
      goto LABEL_17;
    }
LABEL_27:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v15);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v20 = **(NSObject ***)buf;
    if (*(void *)v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v52);
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = pthread_self();
      mach_port_t v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v22;
      *(_WORD *)uint64_t v52 = 2080;
      *(void *)&v52[2] = "Manifest_Counter.cpp";
      __int16 v53 = 1024;
      int v54 = 48;
      __int16 v55 = 2080;
      *(void *)int v56 = "not (anchor_time.get_clock() == m_master_timebase)";
      _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v37);
    std::logic_error::logic_error(&v35, &v37);
    v35.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v45, &v35);
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    int v50 = -1;
    v45.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v46 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v45);
    *(void *)&v56[6] = "void AMCP::Graph::Manifest_Counter::reanchor(const DAL_Time &)";
    long long v57 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Counter.cpp";
    int v58 = 48;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v44.__r_.__value_.__l.__data_);
    std::string v42 = v44;
    double v41 = &unk_1F148AA90;
    memset(&v44, 0, sizeof(v44));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (v33 != *(void *)(v14 + 24)) {
    goto LABEL_27;
  }
LABEL_17:
  if (!*(unsigned char *)v14)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v15);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v26 = **(NSObject ***)buf;
    if (*(void *)v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v52);
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      long long v27 = pthread_self();
      mach_port_t v28 = pthread_mach_thread_np(v27);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v28;
      *(_WORD *)uint64_t v52 = 2080;
      *(void *)&v52[2] = "Manifest_Counter.cpp";
      __int16 v53 = 1024;
      int v54 = 49;
      __int16 v55 = 2080;
      *(void *)int v56 = "not (is_running())";
      _os_log_error_impl(&dword_1BAA78000, v26, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v37);
    std::logic_error::logic_error(&v35, &v37);
    v35.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v45, &v35);
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    int v50 = -1;
    v45.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v46 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v45);
    *(void *)&v56[6] = "void AMCP::Graph::Manifest_Counter::reanchor(const DAL_Time &)";
    long long v57 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Counter.cpp";
    int v58 = 49;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v44.__r_.__value_.__l.__data_);
    std::string v42 = v44;
    double v41 = &unk_1F148AA90;
    memset(&v44, 0, sizeof(v44));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v32);
  *(double *)(v14 + _Block_object_dispose(&a9, 8) = sample_time;
  *(double *)(v14 + 16) = sample_time;
  *(_DWORD *)(v14 + 40) = 0;
  AMCP::Graph::Manifest_Counter::get_current_cycle_anchor_time((uint64_t)&v41, *((void *)v9 + 8));
  BOOL v19 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v32, (AMCP::DAL::DAL_Time *)&v41);
  if (v19)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v19);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v29 = **(NSObject ***)buf;
    if (*(void *)v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v52);
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      std::logic_error v30 = pthread_self();
      mach_port_t v31 = pthread_mach_thread_np(v30);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v31;
      *(_WORD *)uint64_t v52 = 2080;
      *(void *)&v52[2] = "Manifest_Inventory.cpp";
      __int16 v53 = 1024;
      int v54 = 341;
      __int16 v55 = 2080;
      *(void *)int v56 = "not (current_anchor <= time)";
      _os_log_error_impl(&dword_1BAA78000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to anchor_time is in the past", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to anchor_time is in the past", (uint64_t)&v44);
    std::logic_error::logic_error(&v39, &v44);
    v39.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v45, &v39);
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    int v50 = -1;
    v45.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v46 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v45);
    *(void *)&v56[6] = "void AMCP::Graph::Manifest_Inventory::reanchor_time(Object_ID, const Manifest_Execution_Context"
                         " &, const DAL::DAL_Time &) const";
    long long v57 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
    int v58 = 341;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v35);
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(std::logic_error *)&v37.__r_.__value_.__r.__words[1] = v35;
    uint64_t v38 = v36;
    v35.__vftable = 0;
    v35.__imp_.__imp_ = 0;
    uint64_t v36 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  AMCP::Graph::Manifest_Inventory::anchor_time(v9, v10, v5, (const AMCP::DAL::DAL_Time *)&v32);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
}

void sub_1BAC076B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *__p,uint64_t a24,uint64_t a25,char a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::report_and_handle_discontinuity(void)::$_0,std::tuple<unsigned int,char const*,int,char const*>>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v4;
    *(_WORD *)int v10 = 2080;
    *(void *)&void v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 2080;
    uint64_t v14 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d %s", (uint8_t *)&v9, 0x22u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAC079E4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::report_and_handle_discontinuity(void)::$_0,std::tuple<unsigned int,char const*,int,char const*>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

BOOL AMCP::Graph::Manifest_Queue::check_if_catchup_mode_is_still_active(AMCP::Graph::Manifest_Queue *this)
{
  uint64_t v1 = *((void *)this + 70);
  if (!v1) {
    return 0;
  }
  int v4 = *(void **)(v1 + 72);
  os_log_type_t v3 = *(std::__shared_weak_count **)(v1 + 80);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (long long *)v4[8];
  long long v29 = *v5;
  uint64_t v6 = *((void *)v5 + 3);
  uint64_t v30 = *((void *)v5 + 2);
  uint64_t v31 = v6;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 4);
  std::string v32 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v33 = *((_DWORD *)v5 + 10);
  uint64_t v8 = (char *)this + 312;
  if ((*((unsigned char *)this + 312) & 2) == 0) {
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::Graph::Manifest_Queue *)((char *)this + 312));
  }
  AMCP::Graph::Manifest_Counter::advance((uint64_t)&v29, *((double *)this + 40));
  uint64_t v9 = (std::__shared_weak_count *)v4[13];
  uint64_t v23 = v4[12];
  uint64_t v24 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::Graph::Manifest_Counter::calculate_buffer_start((AMCP::DAL::DAL_Time *)v27, (uint64_t)&v29, &v23, 1, (AMCP::Graph::Manifest_Queue *)((char *)this + 312), *((float *)this + 88));
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v27);
  if ((*v8 & 2) == 0) {
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::Graph::Manifest_Queue *)((char *)this + 312));
  }
  double v11 = *((double *)this + 40);
  uint64_t v12 = mach_absolute_time();
  long long v13 = *((_OWORD *)v4 + 6);
  uint64_t v14 = v4[13];
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  LODWORD(v23) = 1;
  uint64_t v24 = 0;
  uint64_t v25 = v12;
  long long v26 = v13;
  uint64_t v15 = v4[12];
  uint64_t v16 = (std::__shared_weak_count *)v4[13];
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 144))(v15, 1);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  double v18 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v23);
  double v19 = round(sample_time + v11);
  double v20 = round(v18 - (double)v17);
  BOOL v21 = v19 < v20;
  if (v19 >= v20)
  {
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v27);
    AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)v27);
    kdebug_trace();
  }
  if (*((void *)&v26 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v21;
}

void sub_1BAC07C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::report_and_handle_overload(unsigned long long,unsigned long long)::$_0,std::tuple<unsigned int,char const*,int,char const*,unsigned int,double,double>>::perform(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v12;
  if (*(void *)v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v13);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    int v8 = *(_DWORD *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 64);
    uint64_t v10 = *(void *)(a1 + 72);
    LODWORD(v12) = 67110658;
    HIDWORD(v12) = v4;
    *(_WORD *)long long v13 = 2080;
    *(void *)&_OWORD v13[2] = v5;
    __int16 v14 = 1024;
    int v15 = v6;
    __int16 v16 = 2080;
    uint64_t v17 = v7;
    __int16 v18 = 1024;
    int v19 = v8;
    __int16 v20 = 2048;
    uint64_t v21 = v9;
    __int16 v22 = 2048;
    uint64_t v23 = v10;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Overload %s(%u) - current time: %0.f  deadline time: %0.f", (uint8_t *)&v12, 0x3Cu);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 80, 8);
}

void sub_1BAC07E30(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Graph::Manifest_Queue::report_and_handle_overload(unsigned long long,unsigned long long)::$_0,std::tuple<unsigned int,char const*,int,char const*,unsigned int,double,double>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void HALS_MetaManager::_CopyDeviceList(uint64_t a1, void **a2)
{
  uint64_t v2 = *(HALS_ObjectMap ***)(a1 + 744);
  os_log_type_t v3 = *(HALS_ObjectMap ***)(a1 + 752);
  if (v2 != v3)
  {
    int v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, (HALS_Object *)a2);
      uint64_t v5 = *v2;
      uint64_t v7 = (HALS_ObjectMap **)v4[1];
      unint64_t v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = ((char *)v7 - (unsigned char *)*v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v6 - (void)*v4;
        uint64_t v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        }
        else {
          a2 = 0;
        }
        long long v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        *long long v13 = v5;
        int v8 = v13 + 1;
        int v15 = (char *)*v4;
        __int16 v14 = (char *)v4[1];
        if (v14 != *v4)
        {
          do
          {
            __int16 v16 = (HALS_ObjectMap *)*((void *)v14 - 1);
            v14 -= 8;
            *--long long v13 = v16;
          }
          while (v14 != v15);
          __int16 v14 = (char *)*v4;
        }
        *int v4 = v13;
        v4[1] = v8;
        v4[2] = (void *)(v12 + 8 * (void)a2);
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *uint64_t v7 = v5;
        int v8 = v7 + 1;
      }
      v4[1] = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

uint64_t HALS_MetaManager::CopyNonMetaDeviceByIsolatedUseCaseID()
{
  return 0;
}

HALS_ObjectMap *HALS_MetaManager::CopyMetaDeviceByIsolatedUseCaseID(HALS_DeviceManager *a1, int a2, HALS_Client *a3)
{
  unint64_t v12 = 0;
  long long v13 = 0;
  uint64_t v14 = 0;
  HALS_DeviceManager::CopyDeviceList(a1, (HALS_DeviceManager::BasicDeviceList *)&v12, 1, a3);
  if (v12 == v13)
  {
    unint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = v12 + 1;
    do
    {
      unint64_t v6 = *(v5 - 1);
      uint64_t v7 = (*(uint64_t (**)(HALS_ObjectMap *))(*(void *)v6 + 464))(v6);
      if ((v7 & 0xFF00000000) != 0) {
        int v8 = v7;
      }
      else {
        int v8 = 0;
      }
      if (v8 != a2) {
        unint64_t v6 = 0;
      }
      if (v6) {
        BOOL v9 = 1;
      }
      else {
        BOOL v9 = v5 == v13;
      }
      ++v5;
    }
    while (!v9);
  }
  HALS_ObjectMap::RetainObject(v6, v4);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v12, v10);
  return v6;
}

void sub_1BAC08054(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

void HALS_MetaManager::GetPropertyData(HALS_System **this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, int *a6, unsigned int a7, const __CFDictionary **a8, HALS_Client *a9)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (((*((uint64_t (**)(HALS_System **, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))*this + 11))(this, a2, a3, a9) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    int v18 = 2003332927;
    goto LABEL_29;
  }
  if (a3->mSelector == 1684105063)
  {
    if (a4 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v23 = 136315394;
        uint64_t v24 = "HALS_MetaManager.cpp";
        __int16 v25 = 1024;
        int v26 = 176;
        int v19 = MEMORY[0x1E4F14500];
        __int16 v20 = "%25s:%-5d  HALS_MetaManager::GetPropertyData: wrong data size for kAudioPlugInDestroyAggregateDevice";
        goto LABEL_21;
      }
      goto LABEL_22;
    }
    if (!a6)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
LABEL_28:
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = off_1F148A5D8;
        int v18 = 1852797029;
LABEL_29:
        exception[2] = v18;
      }
      int v23 = 136315394;
      uint64_t v24 = "HALS_MetaManager.cpp";
      __int16 v25 = 1024;
      int v26 = 177;
      uint64_t v21 = MEMORY[0x1E4F14500];
      __int16 v22 = "%25s:%-5d  HALS_MetaManager::GetPropertyData: nowhere to put the output data for kAudioPlugInDestroyAggregateDevice";
LABEL_27:
      _os_log_impl(&dword_1BAA78000, v21, OS_LOG_TYPE_ERROR, v22, (uint8_t *)&v23, 0x12u);
      goto LABEL_28;
    }
    HALS_MetaManager::DestroyDevice(this, *a6);
    *a5 = 4;
  }
  else
  {
    if (a3->mSelector == 1667327847)
    {
      if (a7 == 8)
      {
        if (a4 == 4)
        {
          if (a6) {
            HALS_MetaManager::CreateDevice((HALS_MetaManager *)this, *a8, a9);
          }
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_28;
          }
          int v23 = 136315394;
          uint64_t v24 = "HALS_MetaManager.cpp";
          __int16 v25 = 1024;
          int v26 = 170;
          uint64_t v21 = MEMORY[0x1E4F14500];
          __int16 v22 = "%25s:%-5d  HALS_MetaManager::GetPropertyData: nowhere to put the output data for kAudioPlugInCreateAggregateDevice";
          goto LABEL_27;
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          int v23 = 136315394;
          uint64_t v24 = "HALS_MetaManager.cpp";
          __int16 v25 = 1024;
          int v26 = 169;
          int v19 = MEMORY[0x1E4F14500];
          __int16 v20 = "%25s:%-5d  HALS_MetaManager::GetPropertyData: wrong data size for kAudioPlugInCreateAggregateDevice";
          goto LABEL_21;
        }
      }
      else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v23 = 136315394;
        uint64_t v24 = "HALS_MetaManager.cpp";
        __int16 v25 = 1024;
        int v26 = 168;
        int v19 = MEMORY[0x1E4F14500];
        __int16 v20 = "%25s:%-5d  HALS_MetaManager::GetPropertyData: wrong qualifier size for kAudioPlugInCreateAggregateDevice";
LABEL_21:
        _os_log_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&v23, 0x12u);
      }
LABEL_22:
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      int v18 = 561211770;
      goto LABEL_29;
    }
    HALS_DeviceManager::GetPropertyData((HALS_DeviceManager *)this, a2, a3, a4, a5, (uint64_t *)a6, a7, (const __CFString **)a8, a9);
  }
}

void HALS_MetaManager::CreateDevice(HALS_MetaManager *this, const __CFDictionary *a2, HALS_Client *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v8 = a2;
  __int16 v9 = 0;
  CFTypeRef cf = 0;
  char v7 = 1;
  CACFDictionary::GetCACFString(&v8, @"uid", &cf);
  if (cf)
  {
    if (!HALS_DeviceManager::CopyDeviceByUID(this, (const __CFString *)cf, 0)) {
      operator new();
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int buf = 136315394;
      buf_4 = "HALS_MetaManager.cpp";
      __int16 v12 = 1024;
      int v13 = 202;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaManager::CreateDevice: there is already a device with this UID", (uint8_t *)&buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int buf = 136315394;
    buf_4 = "HALS_MetaManager.cpp";
    __int16 v12 = 1024;
    int v13 = 198;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaManager::CreateDevice: the description has no UID", (uint8_t *)&buf, 0x12u);
  }
  int v4 = __cxa_allocate_exception(0x10uLL);
  *(void *)int v4 = off_1F148A5D8;
  v4[2] = 1852797029;
}

void sub_1BAC08A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  HALS_Device::~HALS_Device(v19);
  MEMORY[0x1C1859840](v19, 0x10F3C405D91B39ALL);
  HALS_ObjectMap::ReleaseObject(v18, v21);
  CACFString::~CACFString((CACFString *)&a11);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a13);
  _Unwind_Resume(a1);
}

void HALS_MetaManager::DestroyDevice(HALS_System **this, int a2)
{
  os_log_type_t v3 = (unsigned __int8 *)HALS_DeviceManager::CopyDeviceByObjectID((HALS_DeviceManager *)this, a2, 0);
  uint64_t v5 = (HALS_ObjectMap *)v3;
  if (v3)
  {
    atomic_load(v3 + 1432);
    (*(void (**)(unsigned __int8 *))(*(void *)v3 + 456))(v3);
    (*(void (**)(HALS_ObjectMap *))(*(void *)v5 + 8))(v5);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 1174405120;
    _OWORD v13[2] = ___ZN16HALS_MetaManager13DestroyDeviceEj_block_invoke;
    void v13[3] = &__block_descriptor_tmp_3635;
    void v13[4] = this;
    uint64_t v14 = v5;
    HALS_ObjectMap::RetainObject(v5, v6);
    char v7 = (HALB_Mutex *)(*((uint64_t (**)(HALS_System **))*this + 7))(this);
    HALB_CommandGate::ExecuteCommand(v7, (uint64_t)v13);
    HALS_System::DeviceDied(this[40], v5);
    CFDictionaryRef v8 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    uint64_t v11 = 0x676C6F6264657623;
    LODWORD(v12) = 0;
    HALS_Object::PropertiesChanged((HALS_Object *)this, v8, 0, 1u, (const AudioObjectPropertyAddress *)&v11);
    v10[0] = 0;
    v10[1] = 0;
    HALS_System::GetInstance(&v11, 0, v10);
    HALS_System::CheckForDefaultDeviceChanges((HALS_System *)v11);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    HALS_ObjectMap::ReleaseObject(v14, v9);
  }
  HALS_ObjectMap::ReleaseObject(v5, v4);
}

void sub_1BAC08D14(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, HALS_ObjectMap *a18)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  HALS_ObjectMap::ReleaseObject(a18, a2);
  HALS_ObjectMap::ReleaseObject(v18, v20);
  _Unwind_Resume(a1);
}

void ___ZN16HALS_MetaManager13DestroyDeviceEj_block_invoke(uint64_t a1)
{
}

void __destroy_helper_block_e8_40c38_ZTS13HALS_ReleaserI15HALS_MetaDeviceE(uint64_t a1, HALS_Object *a2)
{
}

void __copy_helper_block_e8_40c38_ZTS13HALS_ReleaserI15HALS_MetaDeviceE(uint64_t a1, HALS_Object *a2)
{
  uint64_t v2 = (HALS_ObjectMap *)*((void *)a2 + 5);
  *(void *)(a1 + 40) = v2;
  HALS_ObjectMap::RetainObject(v2, a2);
}

void HALS_MetaManager::_RemoveDevice(HALS_MetaManager *this, HALS_MetaDevice *a2)
{
  int v4 = (HALS_MetaDevice **)*((void *)this + 93);
  uint64_t v5 = (HALS_MetaDevice **)*((void *)this + 94);
  unint64_t v6 = v4;
  if (v4 != v5)
  {
    while (*v6 != a2)
    {
      if (++v6 == v5)
      {
        unint64_t v6 = (HALS_MetaDevice **)*((void *)this + 94);
        break;
      }
    }
  }
  if (v6 != v5)
  {
    int64_t v7 = (char *)v5 - (char *)(v6 + 1);
    if (v5 != v6 + 1)
    {
      memmove(v6, v6 + 1, (char *)v5 - (char *)(v6 + 1));
      int v4 = (HALS_MetaDevice **)*((void *)this + 93);
    }
    CFDictionaryRef v8 = (HALS_MetaDevice **)((char *)v6 + v7);
    *((void *)this + 94) = (char *)v6 + v7;
    uint64_t v9 = *((void *)this + 95);
    if ((((char *)v6 + v7 - (char *)v4) >> 3) + 20 >= (unint64_t)((v9 - (uint64_t)v4) >> 3)) {
      goto LABEL_20;
    }
    unint64_t v10 = v8 - v4;
    if (v10 >= (v9 - (uint64_t)v4) >> 3) {
      goto LABEL_20;
    }
    if (v8 == v4)
    {
      int v15 = 0;
      uint64_t v13 = 8 * v10;
    }
    else
    {
      uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v8 - v4);
      int v4 = (HALS_MetaDevice **)*((void *)this + 94);
      __int16 v12 = (HALS_MetaDevice **)*((void *)this + 93);
      uint64_t v13 = (uint64_t)&v11[8 * v10];
      int v15 = &v11[8 * v14];
      if (v4 != v12)
      {
        uint64_t v16 = v13;
        do
        {
          uint64_t v17 = (uint64_t)*--v4;
          *(void *)(v16 - _Block_object_dispose(&a9, 8) = v17;
          v16 -= 8;
        }
        while (v4 != v12);
        int v4 = (HALS_MetaDevice **)*((void *)this + 93);
LABEL_18:
        *((void *)this + 93) = v16;
        *((void *)this + 94) = v13;
        *((void *)this + 95) = v15;
        if (v4) {
          operator delete(v4);
        }
LABEL_20:
        (*(void (**)(HALS_MetaDevice *))(*(void *)a2 + 8))(a2);
        HALS_ObjectMap::ObjectIsDead(a2, v18);
        return;
      }
    }
    uint64_t v16 = v13;
    goto LABEL_18;
  }
}

void sub_1BAC08F18(void *a1)
{
}

void ___ZN16HALS_MetaManager9AddDeviceEP15HALS_MetaDevice_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  os_log_type_t v3 = (void *)v2[94];
  unint64_t v4 = v2[95];
  if ((unint64_t)v3 >= v4)
  {
    uint64_t v6 = v2[93];
    uint64_t v7 = ((uint64_t)v3 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v4 - v6;
    uint64_t v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10) {
      unint64_t v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    __int16 v12 = (void *)(v10 + 8 * v7);
    unint64_t v13 = v10 + 8 * v11;
    *__int16 v12 = *(void *)(a1 + 40);
    uint64_t v5 = v12 + 1;
    uint64_t v14 = (char *)v2[94];
    int v15 = (char *)v2[93];
    if (v14 != v15)
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *--__int16 v12 = v16;
      }
      while (v14 != v15);
      uint64_t v14 = (char *)v2[93];
    }
    v2[93] = v12;
    v2[94] = v5;
    v2[95] = v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    void *v3 = *(void *)(a1 + 40);
    uint64_t v5 = v3 + 1;
  }
  v2[94] = v5;
}

BOOL HALS_MetaManager::GetPropertyDataSize(HALS_MetaManager *this, HALS_Client *a2, AudioObjectPropertyAddress *a3, unsigned int a4, _DWORD *a5, HALS_Client *a6)
{
  if (((*(uint64_t (**)(HALS_MetaManager *, HALS_Client *, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a6) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  return a3->mSelector == 1667327847
      || a3->mSelector == 1684105063
      || HALS_DeviceManager::GetPropertyDataSize(this, a2, a3, a4, a5, a6) != 0;
}

uint64_t HALS_MetaManager::IsPropertySettable(HALS_MetaManager *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  if (((*(uint64_t (**)(HALS_MetaManager *))(*(void *)this + 88))(this) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  if (a3->mSelector == 1667327847 || a3->mSelector == 1684105063) {
    return 0;
  }

  return HALS_DeviceManager::IsPropertySettable((uint64_t)this, a2, (int *)a3);
}

BOOL HALS_MetaManager::HasProperty(HALS_MetaManager *this, HALS_Client *a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  return a3->mSelector == 1667327847 || a3->mSelector == 1684105063 || HALS_DeviceManager::HasProperty(this, a2, a3, a4);
}

uint64_t HALS_MetaManager::GetMIGDispatchQueue(HALS_MetaManager *this)
{
  return (uint64_t)this + 424;
}

{
  return (uint64_t)this + 424;
}

uint64_t HALS_MetaManager::GetCommandGate(HALS_MetaManager *this)
{
  return (uint64_t)this + 328;
}

{
  return (uint64_t)this + 328;
}

void HALS_MetaManager::_Deactivate(HALS_MetaManager *this)
{
  uint64_t v2 = (unsigned char *)*((void *)this + 93);
  os_log_type_t v3 = (unsigned char *)*((void *)this + 94);
  int64_t v4 = v3 - v2;
  if (v3 == v2)
  {
    *((_DWORD *)this + 2) = 0;
  }
  else
  {
    if (v4 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v4 >> 3);
    memmove(v5, v2, v4);
    uint64_t v6 = 8 * (v4 >> 3);
    if (v6)
    {
      for (uint64_t i = 0; i != v6; i += 8)
        HALS_MetaManager::_RemoveDevice(this, *(HALS_MetaDevice **)&v5[i]);
    }
    *((_DWORD *)this + 2) = 0;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void sub_1BAC09318(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_MetaManager::~HALS_MetaManager(HALS_MetaManager *this)
{
  HALS_MetaManager::~HALS_MetaManager(this);

  JUMPOUT(0x1C1859840);
}

{
  void *v2;
  NSObject *v3;
  _opaque_pthread_t *v4;
  mach_port_t v5;
  NSObject **v6;
  unsigned char v7[10];
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;
  uint64_t vars8;

  __int16 v12 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F1464E80;
  if ((HALS_MetaManager *)HALS_MetaManager::sInstance != this)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v6, "com.apple.coreaudio", "AMCP");
    os_log_type_t v3 = *v6;
    if (*(void *)v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v7);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int64_t v4 = pthread_self();
      uint64_t v5 = pthread_mach_thread_np(v4);
      LODWORD(v6) = 67109890;
      HIDWORD(v6) = v5;
      *(_WORD *)uint64_t v7 = 2080;
      *(void *)&void v7[2] = "HALS_MetaManager.cpp";
      uint64_t v8 = 1024;
      uint64_t v9 = 49;
      unint64_t v10 = 2080;
      uint64_t v11 = "sInstance == this";
      _os_log_error_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s HALS_MetaManager::HALS_MetaManager: there can be only one", (uint8_t *)&v6, 0x22u);
    }
    abort();
  }
  HALS_MetaManager::sInstance = 0;
  uint64_t v2 = (void *)*((void *)this + 93);
  if (v2)
  {
    *((void *)this + 94) = v2;
    operator delete(v2);
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_MetaManager *)((char *)this + 424));
  HALB_Mutex::~HALB_Mutex((HALS_MetaManager *)((char *)this + 328));
  *(void *)this = &unk_1F14725F8;
  CACFString::~CACFString((HALS_MetaManager *)((char *)this + 48));

  HALS_Object::~HALS_Object(this);
}

void sub_1BAC094F8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AMCP::Meta::Stream::~Stream(AMCP::Meta::Stream *this)
{
  *(void *)this = &unk_1F1465008;
  AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*((void *)this + 1) + 16), *((_DWORD *)this + 6));
  *(void *)this = &unk_1F146D188;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v2;

  *(void *)this = &unk_1F1465008;
  AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*((void *)this + 1) + 16), *((_DWORD *)this + 6));
  *(void *)this = &unk_1F146D188;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void AMCP::Meta::Stream::update_core_common(uint64_t a1, uint64_t a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v27, 0, 1.58366012e190);
  uint64_t v4 = (uint64_t)v27.__vftable;
  unint64_t v5 = AMCP::Implementation::get_type_marker<std::function<AMCP::Direction ()(void)>>();
  v43.__vftable = (std::runtime_error_vtbl *)&unk_1F1465040;
  v43.__imp_.__imp_ = (const char *)a1;
  *((void *)&v44 + 1) = &v43;
  memset(buf, 0, sizeof(buf));
  uint64_t v49 = 0;
  std::__function::__value_func<AMCP::Direction ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v43);
  uint64_t v49 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Direction ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v4, v5, (AMCP *)buf);
  if (v49) {
    v49(0, (uint64_t)buf, 0, 0);
  }
  std::__function::__value_func<AMCP::Direction ()(void)>::~__value_func[abi:ne180100](&v43);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(v4);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v4 + 40), &v27);
  if (v27.__imp_.__imp_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v27.__imp_.__imp_);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v27, 0, 1.58366012e190);
  uint64_t v6 = (uint64_t)v27.__vftable;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  v43.__vftable = (std::runtime_error_vtbl *)&unk_1F14650C0;
  v43.__imp_.__imp_ = (const char *)a1;
  *((void *)&v44 + 1) = &v43;
  memset(buf, 0, sizeof(buf));
  uint64_t v49 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v43);
  uint64_t v49 = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)buf);
  if (v49) {
    v49(0, (uint64_t)buf, 0, 0);
  }
  std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](&v43);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v6);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v6 + 40), &v27);
  if (v27.__imp_.__imp_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v27.__imp_.__imp_);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v27, 0, 1.58366012e190);
  uint64_t v8 = (uint64_t)v27.__vftable;
  unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  v43.__vftable = (std::runtime_error_vtbl *)&unk_1F1465140;
  v43.__imp_.__imp_ = (const char *)a1;
  *((void *)&v44 + 1) = &v43;
  memset(buf, 0, sizeof(buf));
  uint64_t v49 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v43);
  uint64_t v49 = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v8, v9, (AMCP *)buf);
  if (v49) {
    v49(0, (uint64_t)buf, 0, 0);
  }
  std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](&v43);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v8);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v8 + 40), &v27);
  if (v27.__imp_.__imp_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v27.__imp_.__imp_);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v27, 0, 1.58366012e190);
  uint64_t v10 = (uint64_t)v27.__vftable;
  unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  v43.__vftable = (std::runtime_error_vtbl *)&unk_1F14651C0;
  v43.__imp_.__imp_ = (const char *)a1;
  *((void *)&v44 + 1) = &v43;
  memset(buf, 0, sizeof(buf));
  uint64_t v49 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v43);
  uint64_t v49 = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v10, v11, (AMCP *)buf);
  if (v49) {
    v49(0, (uint64_t)buf, 0, 0);
  }
  std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](&v43);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v10);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v10 + 40), &v27);
  if (v27.__imp_.__imp_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v27.__imp_.__imp_);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v27, 0, 1.58366012e190);
  uint64_t v12 = (uint64_t)v27.__vftable;
  unint64_t v13 = AMCP::Implementation::get_type_marker<std::function<int ()(void)>>();
  v43.__vftable = (std::runtime_error_vtbl *)&unk_1F1465240;
  v43.__imp_.__imp_ = (const char *)a1;
  *((void *)&v44 + 1) = &v43;
  memset(buf, 0, sizeof(buf));
  uint64_t v49 = 0;
  std::__function::__value_func<int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v43);
  uint64_t v49 = AMCP::Implementation::In_Place_Storage<std::function<int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v12, v13, (AMCP *)buf);
  if (v49) {
    v49(0, (uint64_t)buf, 0, 0);
  }
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](&v43);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(v12);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v12 + 40), &v27);
  if (v27.__imp_.__imp_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v27.__imp_.__imp_);
  }
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v34, *(std::__shared_mutex_base **)(*(void *)(a1 + 8) + 16), *(_DWORD *)(a1 + 32));
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v32, *(std::__shared_mutex_base **)(*(void *)(a1 + 8) + 16), *(_DWORD *)(a1 + 28));
  if (v34 && (uint64_t v14 = v32) != 0)
  {
    uint64_t v30 = 0x676C6F62666D6174;
    int v31 = 0;
    operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v41, (int8x8_t *)v34, (unsigned int *)&v30);
    if (!v41)
    {
      AMCP::Log::Scope_Registry::get(operation);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v24 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        __int16 v25 = pthread_self();
        mach_port_t v26 = pthread_mach_thread_np(v25);
        *(_DWORD *)int buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v26;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Core.h";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = 202;
        _os_log_error_impl(&dword_1BAA78000, v24, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v38);
      std::runtime_error::runtime_error(&v39, &v38);
      std::runtime_error::runtime_error(&v43, &v39);
      *((void *)&v44 + 1) = 0;
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      int v47 = -1;
      v43.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      *(void *)&long long v44 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v43);
      uint64_t v49 = (uint64_t (*)(int, uint64_t, AMCP::Thing *, uint64_t *))"Return_Type AMCP::Core::Core::call_operation"
                                                                            "_function(const Address &, Argument_Types..."
                                                                            ") const [Return_CFNumberType Type = CA::StreamDescription"
                                                                            ", Argument_Types = <>]";
      int v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
      int v51 = 202;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v36);
      long long v53 = v36;
      uint64_t v52 = &unk_1F148AA90;
      int v54 = v37;
      long long v36 = 0uLL;
      std::string v37 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    AMCP::Core::Operation::call_function<CA::StreamDescription>((uint64_t)&v27, v41);
    if (v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    }
    strcpy((char *)buf, "trsnbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    v27.__vftable = COERCE_STD_RUNTIME_ERROR_VTBL_(AMCP::Core::Core::call_operation_function<double>(v14, (unsigned int *)buf));
  }
  else
  {
    uint64_t v29 = 0;
    std::runtime_error v27 = (std::runtime_error)0;
    long long v28 = 0u;
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  std::runtime_error v43 = v27;
  long long v44 = v28;
  uint64_t v45 = v29;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v38, 0, 1.58366008e190);
  uint64_t v16 = v38.__r_.__value_.__r.__words[0];
  unint64_t v17 = AMCP::Implementation::get_type_marker<std::function<CA::StreamDescription ()(void)>>();
  int v54 = 0;
  int v18 = (char *)operator new(0x30uLL);
  *(void *)int v18 = &unk_1F14652C0;
  long long v19 = v44;
  *(std::runtime_error *)(v18 + _Block_object_dispose(&a9, 8) = v43;
  *(_OWORD *)(v18 + 24) = v19;
  *((void *)v18 + 5) = v45;
  int v54 = v18;
  memset(buf, 0, sizeof(buf));
  uint64_t v49 = 0;
  std::__function::__value_func<CA::StreamDescription ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v52);
  uint64_t v49 = AMCP::Implementation::In_Place_Storage<std::function<CA::StreamDescription ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v16, v17, (AMCP *)buf);
  if (v49) {
    v49(0, (uint64_t)buf, 0, 0);
  }
  std::__function::__value_func<CA::StreamDescription ()(void)>::~__value_func[abi:ne180100](&v52);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(v16);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v16 + 40), &v38);
  if (v38.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v38.__r_.__value_.__l.__size_);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v52, 0, 1.58366008e190);
  uint64_t v20 = (uint64_t)v52;
  unint64_t v21 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>();
  v43.__vftable = (std::runtime_error_vtbl *)&unk_1F1465340;
  v43.__imp_.__imp_ = (const char *)a1;
  *((void *)&v44 + 1) = &v43;
  memset(buf, 0, sizeof(buf));
  uint64_t v49 = 0;
  std::__function::__value_func<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v43);
  uint64_t v49 = AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v20, v21, (AMCP *)buf);
  if (v49) {
    v49(0, (uint64_t)buf, 0, 0);
  }
  std::__function::__value_func<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::~__value_func[abi:ne180100](&v43);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(v20);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v20 + 40), &v52);
  if ((void)v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v53);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v52, 0, 1.58366012e190);
  uint64_t v22 = (uint64_t)v52;
  unint64_t v23 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  v43.__vftable = (std::runtime_error_vtbl *)&unk_1F14653C0;
  v43.__imp_.__imp_ = (const char *)a1;
  *((void *)&v44 + 1) = &v43;
  memset(buf, 0, sizeof(buf));
  uint64_t v49 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v43);
  uint64_t v49 = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v22, v23, (AMCP *)buf);
  if (v49) {
    v49(0, (uint64_t)buf, 0, 0);
  }
  std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](&v43);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v22);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v22 + 40), &v52);
  if ((void)v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v53);
  }
}

void sub_1BAC09F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,std::runtime_error a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<AMCP::Direction ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  os_log_type_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    os_log_type_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<AMCP::Direction ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  unint64_t v23 = 0;
  uint64_t v6 = operator new(0x40uLL);
  *uint64_t v6 = &unk_1F1485518;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  void v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  unint64_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  unint64_t v21 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  unint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAC0A384(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__function::__value_func<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  unint64_t v23 = 0;
  uint64_t v6 = operator new(0x40uLL);
  *uint64_t v6 = &unk_1F14774C0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  void v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  unint64_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  unint64_t v21 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  unint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAC0A644(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7>,unsigned int ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Stream18update_core_commonERNS_4Core13Operation_SetEE3$_7"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v5, *(std::__shared_mutex_base **)(*(void *)(*(void *)(a1 + 8) + 8) + 16), *(_DWORD *)(*(void *)(a1 + 8) + 32));
  if (v5)
  {
    uint64_t v3 = 0x676C6F626F776E72;
    int v4 = 0;
    uint64_t v1 = AMCP::Core::Core::call_operation_function<unsigned int>(v5, (unsigned int *)&v3);
  }
  else
  {
    uint64_t v1 = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v1;
}

void sub_1BAC0A71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7>,unsigned int ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14653C0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F14653C0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_7>,unsigned int ()(void)>::~__func()
{
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterINSt3__16vectorINS3_5tupleIJN2CA14ValueRangeListENS6_17StreamDescriptionEEEENS3_9allocatorIS9_EEEEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AMCP::Core::Operation::call_function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>((uint64_t)&v3, (void *)(a1 + 8));
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>(a2, v3, v4, (v4 - v3) >> 6);
  *(void *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>::dispatch;
  unint64_t v5 = (void **)&v3;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void sub_1BAC0A87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14774C0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 4_Block_object_dispose(&a9, 8) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F14774C0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  void v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAC0A9A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14774C0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14774C0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Stream18update_core_commonERNS_4Core13Operation_SetEE3$_6"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::operator()(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v10, *(std::__shared_mutex_base **)(*(void *)(*(void *)(a1 + 8) + 8) + 16), *(_DWORD *)(*(void *)(a1 + 8) + 32));
  if (v10)
  {
    uint64_t v8 = 0x676C6F62666D7423;
    int v9 = 0;
    operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v26, (int8x8_t *)v10, (unsigned int *)&v8);
    if (!v26)
    {
      AMCP::Log::Scope_Registry::get(operation);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unint64_t v5 = **(NSObject ***)buf;
      if (*(void *)v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = pthread_self();
        mach_port_t v7 = pthread_mach_thread_np(v6);
        *(_DWORD *)int buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v7;
        *(_WORD *)uint64_t v29 = 2080;
        *(void *)&v29[2] = "Core.h";
        __int16 v30 = 1024;
        int v31 = 202;
        _os_log_error_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v17);
      std::runtime_error::runtime_error(&v18, &v17);
      std::runtime_error::runtime_error(&v19, &v18);
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      int v24 = -1;
      v19.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      uint64_t v20 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
      std::string v32 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Type"
            " = std::vector<std::tuple<CA::ValueRangeList, CA::StreamDescription>>, Argument_Types = <>]";
      int v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
      int v34 = 202;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
      long long v15 = v12;
      uint64_t v16 = v13;
      long long v12 = 0uLL;
      uint64_t v13 = 0;
      int v14 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    AMCP::Core::Operation::call_function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>((uint64_t)a2, v26);
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  uint64_t v4 = v11;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1BAC0AF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::runtime_error a26,char a27)
{
  uint64_t v29 = *(std::__shared_weak_count **)(v27 - 136);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1465340;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1465340;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_6>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::~__func()
{
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  uint64_t v23 = 0;
  uint64_t v6 = operator new(0x40uLL);
  *uint64_t v6 = &unk_1F14775D0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  void v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  uint64_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  uint64_t v21 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  uint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAC0B228(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIN2CA17StreamDescriptionEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AMCP::Core::Operation::call_function<CA::StreamDescription>((uint64_t)&v3, (void *)(a1 + 8));
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 32) = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
  operator new();
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14775D0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 4_Block_object_dispose(&a9, 8) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  long long v3 = operator new(0x40uLL);
  void *v3 = &unk_1F14775D0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  void v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAC0B414(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14775D0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14775D0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t std::__function::__value_func<CA::StreamDescription ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  long long v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    long long v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<CA::StreamDescription ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<CA::StreamDescription ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<CA::StreamDescription ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<CA::StreamDescription ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<CA::StreamDescription ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<CA::StreamDescription ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<CA::StreamDescription ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<CA::StreamDescription ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyIN2CA17StreamDescriptionEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14652C0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + _Block_object_dispose(&a9, 8) = result;
  return result;
}

__n128 std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F14652C0;
  *(_OWORD *)(v2 + _Block_object_dispose(&a9, 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<CA::StreamDescription>(AMCP::Address const&,CA::StreamDescription const&)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4>,int ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4>,int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Stream18update_core_commonERNS_4Core13Operation_SetEE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4>,int ()(void)>::operator()(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v8, *(std::__shared_mutex_base **)(*(void *)(*(void *)(a1 + 8) + 8) + 16), *(_DWORD *)(*(void *)(a1 + 8) + 32));
  if (v8)
  {
    uint64_t v6 = 0x676C6F62736C7463;
    int v7 = 0;
    AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v24, (int8x8_t *)v8, (unsigned int *)&v6);
    if (!v24)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      long long v3 = **(NSObject ***)buf;
      if (*(void *)v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        uint64_t v4 = pthread_self();
        mach_port_t v5 = pthread_mach_thread_np(v4);
        *(_DWORD *)int buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v5;
        *(_WORD *)uint64_t v27 = 2080;
        *(void *)&v27[2] = "Core.h";
        __int16 v28 = 1024;
        int v29 = 202;
        _os_log_error_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v23);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v15);
      std::runtime_error::runtime_error(&v16, &v15);
      std::runtime_error::runtime_error(&v17, &v16);
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      int v22 = -1;
      v17.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      uint64_t v18 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v17);
      __int16 v30 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Type"
            " = int, Argument_Types = <>]";
      int v31 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
      int v32 = 202;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v10);
      long long v13 = v10;
      uint64_t v14 = v11;
      long long v10 = 0uLL;
      uint64_t v11 = 0;
      int v12 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    uint64_t v1 = AMCP::Core::Operation::call_function<int>(v24);
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v1;
}

void sub_1BAC0BB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::runtime_error a26,char a27)
{
  int v29 = *(std::__shared_weak_count **)(v27 - 136);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4>,int ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1465240;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4>,int ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F1465240;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_4>,int ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3>,unsigned int ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Stream18update_core_commonERNS_4Core13Operation_SetEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v5, *(std::__shared_mutex_base **)(*(void *)(*(void *)(a1 + 8) + 8) + 16), *(_DWORD *)(*(void *)(a1 + 8) + 32));
  if (v5)
  {
    uint64_t v3 = 0x676C6F627465726DLL;
    int v4 = 0;
    uint64_t v1 = AMCP::Core::Core::call_operation_function<unsigned int>(v5, (unsigned int *)&v3);
  }
  else
  {
    uint64_t v1 = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v1;
}

void sub_1BAC0BD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3>,unsigned int ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14651C0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F14651C0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_3>,unsigned int ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2>,unsigned int ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Stream18update_core_commonERNS_4Core13Operation_SetEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 36);
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2>,unsigned int ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1465140;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F1465140;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_2>,unsigned int ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1>,unsigned int ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Stream18update_core_commonERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v5, *(std::__shared_mutex_base **)(*(void *)(*(void *)(a1 + 8) + 8) + 16), *(_DWORD *)(*(void *)(a1 + 8) + 32));
  if (v5)
  {
    uint64_t v3 = 0x676C6F6274617073;
    int v4 = 0;
    uint64_t v1 = AMCP::Core::Core::call_operation_function<unsigned int>(v5, (unsigned int *)&v3);
  }
  else
  {
    uint64_t v1 = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v1;
}

void sub_1BAC0BFD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1>,unsigned int ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14650C0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F14650C0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_1>,unsigned int ()(void)>::~__func()
{
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterINS_9DirectionEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = AMCP::Core::Operation::call_function<AMCP::Direction>((void *)(a1 + 8));
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = v3;
  *(void *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
  return result;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1485518;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 4_Block_object_dispose(&a9, 8) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  int v3 = operator new(0x40uLL);
  void *v3 = &unk_1F1485518;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  void v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAC0C210(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1485518;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1485518;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<AMCP::Direction ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Direction ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<AMCP::Direction ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Direction ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<AMCP::Direction ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<AMCP::Direction ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<AMCP::Direction ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0>,AMCP::Direction ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0>,AMCP::Direction ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Stream18update_core_commonERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0>,AMCP::Direction ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 40);
}

uint64_t std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0>,AMCP::Direction ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1465040;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0>,AMCP::Direction ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1465040;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Stream::update_core_common(AMCP::Core::Operation_Set &)::$_0>,AMCP::Direction ()(void)>::~__func()
{
}

uint64_t AMCP::Meta::Stream::Stream(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)a1 = &unk_1F1465008;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 2_Block_object_dispose(&a9, 8) = a4;
  *(_DWORD *)(a1 + 32) = a5;
  *(_DWORD *)(a1 + 36) = a6;
  *(_DWORD *)(a1 + 40) = a7;
  int v8 = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(a2 + 16));
  *(_DWORD *)(a1 + 24) = v8;
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)std::runtime_error v17 = 0u;
  int v18 = 1065353216;
  LODWORD(v14) = v8;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v19, 0, (int *)&v14, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v19 + 40), &v19);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  LODWORD(v14) = 1836282994;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v19, 0, (int *)&v14, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v19 + 40), &v19);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  LODWORD(v14) = 1836282994;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v19, 0, (int *)&v14, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v19 + 40), &v19);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  LODWORD(v14) = *(_DWORD *)(a1 + 28);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v19, 0, (int *)&v14, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v19 + 40), &v19);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  int v9 = *(_DWORD *)(a1 + 24);
  *(void *)&long long v19 = *(void *)(*(void *)(a1 + 8) + 16);
  DWORD2(v19) = v9;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>(&v14, 0, &v19, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v14 + 40), &v14);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  CFStringRef v10 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Meta-Driver", 27, 0x8000100u, 0);
  if (!v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v14 = 0x676C6F626F706C67;
  LODWORD(v15) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)&v19, (uint64_t)&v14, v10);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v19 + 40), &v19);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  CFRelease(v10);
  AMCP::Meta::Stream::update_core_common(a1, (uint64_t)__p);
  AMCP::Core::Broker::make_core((AMCP::Core::Core **)&v19, *(std::__shared_mutex_base **)(*(void *)(a1 + 8) + 16), (uint64_t)__p, *(_DWORD *)(a1 + 24));
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((void *)v17[0]);
  uint64_t v11 = __p[0];
  __p[0] = 0;
  if (v11) {
    operator delete(v11);
  }
  return a1;
}

void sub_1BAC0C82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, void *a13)
{
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(a13);
  if (__p) {
    operator delete(__p);
  }
  *long long v13 = &unk_1F146D188;
  std::string v15 = (std::__shared_weak_count *)v13[2];
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(a1);
}

void AMCP::Meta::Stream::update_core(AMCP::Meta::Stream *this)
{
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v8, *(std::__shared_mutex_base **)(*((void *)this + 1) + 16), *((_DWORD *)this + 6));
  uint64_t v2 = v8;
  if (v8)
  {
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)uint64_t v6 = 0u;
    int v7 = 1065353216;
    AMCP::Meta::Stream::update_core_common((uint64_t)this, (uint64_t)__p);
    uint64_t v10 = (uint64_t)(v2 + 12);
    LOBYTE(v11) = 1;
    caulk::concurrent::shared_spin_lock::lock(v2 + 12);
    uint64_t v3 = v6[0];
    if (v6[0])
    {
      do
      {
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)(v2 + 2), (unsigned int *)(v3[4] + 40), v3 + 4);
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&v10);
    uint64_t v10 = 0x676C6F626F776E72;
    int v11 = 0;
    v2[1] = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)v2, (const AMCP::Address *)&v10, &AMCP::k_object_id_unknown);
    std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((void *)v6[0]);
    int v4 = __p[0];
    __p[0] = 0;
    if (v4) {
      operator delete(v4);
    }
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1BAC0C9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

void HALS_ClockDeviceState::InitializeStandardPropertiesToCapture(HALS_ClockDeviceState *this)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1BAC0CC44(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    HALS_ClockDeviceState::sStandardDevicePropertiesToCapture = 0;
    __cxa_end_catch();
    JUMPOUT(0x1BAC0CBA8);
  }
  _Unwind_Resume(a1);
}

void HALS_ClockDeviceState::HALS_ClockDeviceState(HALS_ClockDeviceState *this)
{
  *(_DWORD *)this = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = (char *)this + 16;
  pthread_once(&HALS_ClockDeviceState::sPropertiesToCaptureInitialized, (void (*)(void))HALS_ClockDeviceState::InitializeStandardPropertiesToCapture);
}

void sub_1BAC0CCB4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void HALS_ClockDeviceState::Capture(HALS_ClockDeviceState *this, HALS_ClockDevice *a2, const CAPropertyAddressList *a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)this = *((_DWORD *)a2 + 4);
  uint64_t v6 = (char **)((char *)this + 16);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*((void **)this + 2));
  *((void *)this + 1) = v6;
  *((void *)this + 3) = 0;
  *uint64_t v6 = 0;
  uint64_t v8 = *(void *)a3;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a3 + 1) - *(void *)a3) >> 2);
  if (v9)
  {
    unint64_t v10 = 0;
    do
    {
      unsigned int v11 = 0;
      LODWORD(v12) = 0;
      unint64_t v13 = 0;
      unsigned int v48 = 0;
      int v47 = 0;
      if (v9 > v10)
      {
        uint64_t v14 = v8 + 12 * v10;
        unsigned int v11 = *(_DWORD *)(v14 + 8);
        unint64_t v13 = *(void *)v14;
        int v47 = (const char *)v13;
        unsigned int v48 = v11;
        unint64_t v12 = HIDWORD(v13);
      }
      if ((v13 == 707406378 || v12 == 707406378 || v11 == -1)
        && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        uint64_t v59 = "HALS_ClockDeviceState.cpp";
        LOWORD(v60) = 1024;
        *(_DWORD *)((char *)&v60 + 2) = 59;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ClockDeviceState::Capture: properties with a wildcard are not supported", buf, 0x12u);
        unint64_t v13 = v47;
      }
      if (HALB_Info::GetPropertyQualifierDataType((HALB_Info *)v13, 0, v7)
        && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        uint64_t v59 = "HALS_ClockDeviceState.cpp";
        LOWORD(v60) = 1024;
        *(_DWORD *)((char *)&v60 + 2) = 60;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ClockDeviceState::Capture: properties with a qualifier are not supported", buf, 0x12u);
        unint64_t v13 = v47;
      }
      if (HALB_Info::IsAVTProperty((HALB_Info *)v13)
        && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        uint64_t v59 = "HALS_ClockDeviceState.cpp";
        LOWORD(v60) = 1024;
        *(_DWORD *)((char *)&v60 + 2) = 61;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ClockDeviceState::Capture: properties that use an AVT are not supported", buf, 0x12u);
        unint64_t v13 = v47;
      }
      memset(v45, 0, 80);
      unsigned char v45[10] = (unint64_t)&unk_1F1489918;
      CFTypeRef cf = 0;
      PropertyDataCFNumberType Type = HALB_Info::GetPropertyDataType((HALB_Info *)v13, 0, v15);
      int v44 = PropertyDataType;
      if (PropertyDataType <= 1718367025)
      {
        if (PropertyDataType != 1634951780)
        {
          if (PropertyDataType == 1667658612 || PropertyDataType == 1668641388)
          {
LABEL_30:
            if ((*(unsigned int (**)(HALS_ClockDevice *, void, const char **, void))(*(void *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v47, 0))
            {
              uint64_t v19 = *((unsigned int *)a2 + 4);
              long long v57 = 0;
              int v56 = 0;
              (*(void (**)(HALS_ClockDevice *, uint64_t, const char **, uint64_t, int *, const void **, void, void, void))(*(void *)a2 + 112))(a2, v19, &v47, 8, &v56, &v57, 0, 0, 0);
              CFTypeRef v20 = cf;
              CFTypeRef cf = v57;
              if (v20) {
                CFRelease(v20);
              }
              goto LABEL_46;
            }
            goto LABEL_68;
          }
LABEL_37:
          if ((*(unsigned int (**)(HALS_ClockDevice *, void, const char **, void))(*(void *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v47, 0))
          {
            int v44 = 1918990199;
            *(_DWORD *)int buf = 0;
            uint64_t v23 = (*(uint64_t (**)(HALS_ClockDevice *, void, const char **, void, void, void))(*(void *)a2 + 104))(a2, *((unsigned int *)a2 + 4), &v47, 0, 0, 0);
            uint64_t v24 = v23;
            *(_DWORD *)int buf = v23;
            unint64_t v25 = v45[0];
            if (v23 <= v45[1] - v45[0])
            {
              if (v23 < v45[1] - v45[0]) {
                v45[1] = v45[0] + v23;
              }
            }
            else
            {
              std::vector<unsigned char>::__append(v45, v23 - (v45[1] - v45[0]));
              uint64_t v24 = *(unsigned int *)buf;
              unint64_t v25 = v45[0];
            }
            (*(void (**)(HALS_ClockDevice *, void, const char **, uint64_t, uint8_t *, unint64_t, void, void, void))(*(void *)a2 + 112))(a2, *((unsigned int *)a2 + 4), &v47, v24, buf, v25, 0, 0, 0);
            if (*(unsigned int *)buf <= v45[1] - v45[0])
            {
              if (*(unsigned int *)buf < v45[1] - v45[0]) {
                v45[1] = v45[0] + *(unsigned int *)buf;
              }
            }
            else
            {
              std::vector<unsigned char>::__append(v45, *(unsigned int *)buf - (v45[1] - v45[0]));
            }
            goto LABEL_46;
          }
          goto LABEL_68;
        }
        if ((*(unsigned int (**)(HALS_ClockDevice *, void, const char **, void))(*(void *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v47, 0))
        {
          uint64_t v22 = *((unsigned int *)a2 + 4);
          int v55 = 0;
          (*(void (**)(HALS_ClockDevice *, uint64_t, const char **, uint64_t, int *, unint64_t *, void, void, void))(*(void *)a2 + 112))(a2, v22, &v47, 40, &v55, &v45[5], 0, 0, 0);
          goto LABEL_46;
        }
      }
      else if (PropertyDataType > 1886155635)
      {
        if (PropertyDataType == 1886155636) {
          goto LABEL_30;
        }
        if (PropertyDataType != 1969828658) {
          goto LABEL_37;
        }
        if ((*(unsigned int (**)(HALS_ClockDevice *, void, const char **, void))(*(void *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v47, 0))
        {
          uint64_t v18 = *((unsigned int *)a2 + 4);
          int v49 = 0;
          int v50 = 0;
          (*(void (**)(HALS_ClockDevice *, uint64_t, const char **, uint64_t, int *, int *, void, void, void))(*(void *)a2 + 112))(a2, v18, &v47, 4, &v49, &v50, 0, 0, 0);
          LODWORD(v45[3]) = v50;
          goto LABEL_46;
        }
      }
      else if (PropertyDataType == 1718367026)
      {
        if ((*(unsigned int (**)(HALS_ClockDevice *, void, const char **, void))(*(void *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v47, 0))
        {
          uint64_t v21 = *((unsigned int *)a2 + 4);
          int v51 = 0;
          int v52 = 0;
          (*(void (**)(HALS_ClockDevice *, uint64_t, const char **, uint64_t, int *, int *, void, void, void))(*(void *)a2 + 112))(a2, v21, &v47, 4, &v51, &v52, 0, 0, 0);
          HIDWORD(v45[3]) = v52;
          goto LABEL_46;
        }
      }
      else
      {
        if (PropertyDataType != 1718367796) {
          goto LABEL_37;
        }
        if ((*(unsigned int (**)(HALS_ClockDevice *, void, const char **, void))(*(void *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v47, 0))
        {
          uint64_t v17 = *((unsigned int *)a2 + 4);
          unint64_t v54 = 0;
          int v53 = 0;
          (*(void (**)(HALS_ClockDevice *, uint64_t, const char **, uint64_t, int *, unint64_t *, void, void, void))(*(void *)a2 + 112))(a2, v17, &v47, 8, &v53, &v54, 0, 0, 0);
          v45[4] = v54;
LABEL_46:
          int v26 = *((_DWORD *)a2 + 4);
          uint64_t v59 = v47;
          unint64_t v60 = __PAIR64__(v44, v48);
          *(_DWORD *)int buf = v26;
          uint64_t v62 = 0;
          long long v61 = 0uLL;
          std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v61, (const void *)v45[0], v45[1], v45[1] - v45[0]);
          long long v63 = *(_OWORD *)&v45[3];
          long long v64 = *(_OWORD *)&v45[5];
          long long v65 = *(_OWORD *)&v45[7];
          unint64_t v66 = v45[9];
          OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)&v67, cf);
          uint64_t v27 = v6;
          __int16 v28 = *v6;
          int v29 = v6;
          if (*v6)
          {
            while (1)
            {
              while (1)
              {
                int v29 = (char **)v28;
                unsigned int v30 = *((_DWORD *)v28 + 8);
                if (*(_DWORD *)buf >= v30) {
                  break;
                }
LABEL_48:
                __int16 v28 = *v29;
                uint64_t v27 = v29;
                if (!*v29) {
                  goto LABEL_64;
                }
              }
              if (*(_DWORD *)buf != v30) {
                break;
              }
              unsigned int v31 = *((_DWORD *)v29 + 10);
              BOOL v32 = HIDWORD(v59) >= v31;
              if (HIDWORD(v59) == v31)
              {
                unsigned int v33 = *((_DWORD *)v29 + 9);
                BOOL v32 = v59 >= v33;
                if (v59 == v33) {
                  BOOL v32 = v60 >= *((_DWORD *)v29 + 11);
                }
              }
              if (!v32) {
                goto LABEL_48;
              }
              if (v30 >= *(_DWORD *)buf)
              {
                if (*(_DWORD *)buf != v30) {
                  goto LABEL_67;
                }
                unsigned int v34 = *((_DWORD *)v29 + 10);
                BOOL v36 = v34 >= HIDWORD(v59);
                if (v34 == HIDWORD(v59))
                {
                  unsigned int v35 = *((_DWORD *)v29 + 9);
                  BOOL v36 = v35 >= v59;
                  if (v35 == v59) {
                    BOOL v36 = *((_DWORD *)v29 + 11) >= v60;
                  }
                }
LABEL_62:
                if (v36) {
                  goto LABEL_67;
                }
              }
              uint64_t v27 = v29 + 1;
              __int16 v28 = v29[1];
              if (!v28) {
                goto LABEL_64;
              }
            }
            BOOL v36 = v30 >= *(_DWORD *)buf;
            goto LABEL_62;
          }
LABEL_64:
          std::string v37 = (char *)operator new(0x98uLL);
          int v38 = HIDWORD(v60);
          *((_DWORD *)v37 + _Block_object_dispose(&a9, 8) = *(_DWORD *)buf;
          *(void *)(v37 + 36) = v59;
          *((_DWORD *)v37 + 11) = v60;
          *((_DWORD *)v37 + 12) = v38;
          *(_OWORD *)(v37 + 56) = v61;
          *((void *)v37 + 9) = v62;
          uint64_t v62 = 0;
          long long v61 = 0uLL;
          long long v39 = v63;
          long long v40 = v65;
          unint64_t v41 = v66;
          *((_OWORD *)v37 + 6) = v64;
          *((_OWORD *)v37 + 7) = v40;
          *((_OWORD *)v37 + 5) = v39;
          uint64_t v42 = v68;
          *((void *)v37 + 16) = v41;
          *((void *)v37 + 17) = &unk_1F1489918;
          *((void *)v37 + 1_Block_object_dispose(&a9, 8) = v42;
          uint64_t v68 = 0;
          *(void *)std::string v37 = 0;
          *((void *)v37 + 1) = 0;
          *((void *)v37 + 2) = v29;
          *uint64_t v27 = v37;
          uint64_t v43 = **((void **)this + 1);
          if (v43)
          {
            *((void *)this + 1) = v43;
            std::string v37 = *v27;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 2), (uint64_t *)v37);
          ++*((void *)this + 3);
LABEL_67:
          HALS_DeviceState::Value::~Value((HALS_DeviceState::Value *)((char *)&v60 + 4));
        }
      }
LABEL_68:
      HALS_DeviceState::Value::~Value((HALS_DeviceState::Value *)&v44);
      ++v10;
      uint64_t v8 = *(void *)a3;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a3 + 1) - *(void *)a3) >> 2);
    }
    while (v10 < v9);
  }
}

void sub_1BAC0D6AC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1BAC0D6BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, HALS_DeviceState::Value *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void HALS_ClockDeviceState::Compare(HALS_ClockDeviceState *this, const HALS_ClockDeviceState *a2, const AudioObjectPropertyAddress *a3, CAPropertyAddressList *a4)
{
  int v4 = (AudioObjectPropertyAddress *)*((void *)this + 1);
  mach_port_t v5 = (AudioObjectPropertyAddress **)((char *)this + 16);
  if (v4 != (AudioObjectPropertyAddress *)((char *)this + 16))
  {
    uint64_t v6 = (CAPropertyAddressList *)a3;
    uint64_t v8 = (void *)((char *)a2 + 16);
    while (1)
    {
      uint64_t v9 = *v8;
      if (!*v8) {
        goto LABEL_39;
      }
      unint64_t v10 = v8;
      do
      {
        BOOL v11 = operator<((_DWORD *)(v9 + 32), &v4[2].mElement);
        unint64_t v12 = (uint64_t *)(v9 + 8);
        if (!v11)
        {
          unint64_t v12 = (uint64_t *)v9;
          unint64_t v10 = (void *)v9;
        }
        uint64_t v9 = *v12;
      }
      while (*v12);
      if (v10 == v8
        || operator<(&v4[2].mElement, (_DWORD *)v10 + 8)
        || (int mSelector = v4[4].mSelector, mSelector != *((_DWORD *)v10 + 12)))
      {
LABEL_39:
        if (v4[2].mElement == *(_DWORD *)this) {
          CAPropertyAddressList::AppendUniqueItem(v6, v4 + 3, a3);
        }
        goto LABEL_41;
      }
      if (mSelector > 1718367025) {
        break;
      }
      if (mSelector != 1634951780)
      {
        if (mSelector == 1667658612 || mSelector == 1668641388)
        {
LABEL_25:
          if (!CFEqual(*(CFTypeRef *)&v4[12].mSelector, (CFTypeRef)v10[18])) {
            goto LABEL_39;
          }
          goto LABEL_41;
        }
LABEL_37:
        uint64_t v14 = *(const void **)&v4[4].mElement;
        a3 = (const AudioObjectPropertyAddress *)(*(void *)&v4[5].mScope - (void)v14);
        std::string v15 = (const void *)v10[7];
        if (a3 != (const AudioObjectPropertyAddress *)(v10[8] - (void)v15) || memcmp(v14, v15, (size_t)a3)) {
          goto LABEL_39;
        }
        goto LABEL_41;
      }
      if (*(double *)&v4[8].mSelector != *((double *)v10 + 12)
        || v4[8].mElement != *((_DWORD *)v10 + 26)
        || v4[9].mScope != *((_DWORD *)v10 + 28)
        || v4[9].mElement != *((_DWORD *)v10 + 29)
        || v4[10].mScope != *((_DWORD *)v10 + 31)
        || v4[10].mElement != *((_DWORD *)v10 + 32)
        || !CA::Implementation::EquivalentFormatFlags((CA::Implementation *)&v4[8], (const AudioStreamBasicDescription *)(v10 + 12), (const AudioStreamBasicDescription *)1, 0))
      {
        goto LABEL_39;
      }
LABEL_41:
      std::runtime_error v16 = *(AudioObjectPropertyAddress **)&v4->mElement;
      if (v16)
      {
        do
        {
          uint64_t v17 = (AudioObjectPropertyAddress **)v16;
          std::runtime_error v16 = *(AudioObjectPropertyAddress **)&v16->mSelector;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = *(AudioObjectPropertyAddress ***)&v4[1].mScope;
          BOOL v18 = *v17 == v4;
          int v4 = (AudioObjectPropertyAddress *)v17;
        }
        while (!v18);
      }
      int v4 = (AudioObjectPropertyAddress *)v17;
      if (v17 == v5) {
        return;
      }
    }
    if (mSelector > 1886155635)
    {
      if (mSelector == 1886155636) {
        goto LABEL_25;
      }
      if (mSelector == 1969828658)
      {
        if (v4[6].mElement != *((_DWORD *)v10 + 20)) {
          goto LABEL_39;
        }
        goto LABEL_41;
      }
    }
    else
    {
      if (mSelector == 1718367026)
      {
        if (*(float *)&v4[7].mSelector != *((float *)v10 + 21)) {
          goto LABEL_39;
        }
        goto LABEL_41;
      }
      if (mSelector == 1718367796)
      {
        if (*(double *)&v4[7].mScope != *((double *)v10 + 11)) {
          goto LABEL_39;
        }
        goto LABEL_41;
      }
    }
    goto LABEL_37;
  }
}

void HALS_Tap::HandleGroupObjectPropertiesChanged(uint64_t a1)
{
  uint64_t v1 = *(unsigned int **)(a1 + 232);
  if (v1)
  {
    int v4 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v1);
    if (v4)
    {
      if (HALS_Tap::UpdateTapFormatFromDeviceFormat((HALS_MultiTap **)a1, v4))
      {
        mach_port_t v5 = (HALS_NotificationManager *)*(unsigned int *)(a1 + 16);
        *(void *)&v6.int mSelector = 0x676C6F6274666D74;
        v6.AudioObjectPropertyElement mElement = 0;
        HALS_Object::PropertiesChanged((HALS_Object *)a1, v5, 0, 1u, &v6);
      }
    }
    HALS_ObjectMap::ReleaseObject(v4, v3);
  }
}

void sub_1BAC0D9F0(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

BOOL HALS_Tap::UpdateTapFormatFromDeviceFormat(HALS_MultiTap **this, HALS_Device *a2)
{
  v21[0] = 0;
  v21[1] = v21;
  uint64_t v21[2] = 0x4002000000;
  v21[3] = __Block_byref_object_copy__3721;
  v21[4] = __Block_byref_object_dispose__3722;
  memset(v22, 0, sizeof(v22));
  HALS_Device::CopyStreamList((uint64_t)a2, 0, (char **)v22);
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x5002000000;
  uint64_t v19 = __Block_byref_object_copy__29;
  CFTypeRef v20 = __Block_byref_object_dispose__30;
  uint64_t v12 = 0;
  unint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000;
  char v15 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  _OWORD v11[2] = ___ZN8HALS_Tap31UpdateTapFormatFromDeviceFormatEP11HALS_Device_block_invoke;
  void v11[3] = &unk_1E62311D8;
  v11[4] = v21;
  v11[5] = &v16;
  v11[6] = &v12;
  v11[7] = this;
  uint64_t v3 = (HALB_Mutex *)(*((uint64_t (**)(HALS_MultiTap **))*this + 7))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v11);
  int v4 = *((unsigned __int8 *)v13 + 24);
  if (*((unsigned char *)v13 + 24))
  {
    mach_port_t v5 = this[31];
    long long v6 = *(_OWORD *)(v17 + 7);
    v9[0] = *(_OWORD *)(v17 + 5);
    v9[1] = v6;
    uint64_t v10 = v17[9];
    HALS_MultiTap::set_format(v5, v9, 0x100000002);
  }
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(v21, 8);
  HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser(v22, v7);
  return v4 != 0;
}

void sub_1BAC0DBD0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 96), 8);
  HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser(v1, v4);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3721(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 4_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

HALS_ObjectMap ***__Block_byref_object_dispose__3722(uint64_t a1, HALS_Object *a2)
{
  return HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)(a1 + 40), a2);
}

__n128 __Block_byref_object_copy__29(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  long long v3 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void ___ZN8HALS_Tap31UpdateTapFormatFromDeviceFormatEP11HALS_Device_block_invoke(void *a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1[4] + 8) + 40);
  uint64_t v2 = *(void *)(*(void *)(a1[4] + 8) + 48) - v1;
  if (v2)
  {
    uint64_t v4 = *(void *)(a1[7] + 232);
    if (v4)
    {
      unint64_t v5 = v2 >> 3;
      unint64_t v6 = *(unsigned int *)(v4 + 4);
      if (v5 > v6)
      {
        HALS_Stream::GetCurrentVirtualFormat(*(HALS_Stream **)(v1 + 8 * v6), (AudioStreamBasicDescription *)(*(void *)(a1[5] + 8) + 40));
        *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
      }
    }
  }
}

void HALS_Tap::SetPropertyData(const void **this, uint64_t a2, const AudioObjectPropertyAddress *a3, unsigned int a4, const void **a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  if (((*((uint64_t (**)(const void **, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *, const void **, uint64_t, const void *))*this
         + 12))(this, a2, a3, a8, a5, a6, a7) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  if (a3->mSelector == 1952740195)
  {
    if (a8)
    {
      uint64_t v21 = (char *)a8 + 263;
      if (*((unsigned char *)a8 + 264))
      {
        if (!*v21)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_Client.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 933;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Client is not granted access to the audio taps.", buf, 0x12u);
          }
          uint64_t v22 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v22 = off_1F148A5D8;
          v22[2] = 560492391;
        }
      }
      else
      {
        *(_WORD *)uint64_t v21 = 257;
      }
    }
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_Tap.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 217;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Tap::SetPropertyData: bad property data size for kAudioTapPropertyDescription", buf, 0x12u);
      }
      uint64_t v59 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v59 = off_1F148A5D8;
      v59[2] = 561211770;
    }
    unint64_t v25 = *a5;
    if (v25)
    {
      CFRetain(v25);
      applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v25);
    }
    else
    {
      CFTypeRef cf = 0;
    }
    std::string __p = 0;
    BOOL v83 = 0;
    uint64_t v84 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, this[26], (uint64_t)this[27], ((unsigned char *)this[27] - (unsigned char *)this[26]) >> 2);
    int v26 = *((unsigned __int8 *)this + 240);
    uint64_t v78 = 0;
    long long v79 = &v78;
    uint64_t v80 = 0x2000000000;
    char v81 = 0;
    uint64_t v74 = 0;
    mach_port_t v75 = &v74;
    uint64_t v76 = 0x2000000000;
    char v77 = 0;
    uint64_t v70 = 0;
    uint64_t v71 = &v70;
    uint64_t v72 = 0x2000000000;
    char v73 = 0;
    uint64_t v66 = 0;
    uint64_t v67 = &v66;
    uint64_t v68 = 0x2000000000;
    char v69 = 0;
    *(void *)int buf = MEMORY[0x1E4F143A8];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&buf[16] = ___ZN8HALS_Tap14SetDescriptionERKN10applesauce2CF13DictionaryRefE_block_invoke;
    long long v109 = &unk_1E6231190;
    uint64_t v114 = this;
    p_CFTypeRef cf = &cf;
    uint64_t v110 = &v78;
    std::logic_error v111 = &v70;
    uint64_t v112 = &v66;
    std::string v113 = &v74;
    uint64_t v27 = (HALB_Mutex *)(*((uint64_t (**)(const void **))*this + 7))(this);
    HALB_CommandGate::ExecuteCommand(v27, (uint64_t)buf);
    HALS_Tap::UpdateFilteredProcesses((HALS_Tap *)this);
    if (*((unsigned char *)v79 + 24))
    {
      HALS_Tap::UpdateReadingContexts((HALS_Tap *)this, (unsigned int **)&__p);
    }
    else if (v26 || !*((unsigned char *)this + 240))
    {
      unsigned int v35 = this[31];
      unsigned int v34 = (std::__shared_weak_count *)this[32];
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*((unsigned char *)v35 + 464))
      {
        std::__function::__value_func<void ()(HALS_MultiTap::Reader_Action_State)>::~__value_func[abi:ne180100](v35 + 54);
        *((unsigned char *)v35 + 464) = 0;
      }
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
      if (*((unsigned char *)this + 240))
      {
        long long v97 = 0;
        char v98 = 0;
        uint64_t v99 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v97, __p, (uint64_t)v83, ((char *)v83 - (unsigned char *)__p) >> 2);
        int v94 = 0;
        uint64_t v95 = 0;
        uint64_t v96 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v94, this[26], (uint64_t)this[27], ((unsigned char *)this[27] - (unsigned char *)this[26]) >> 2);
        BOOL v36 = v97;
        std::string v37 = v98;
        uint64_t v62 = (std::vector<unsigned int>::value_type *)v97;
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        int v38 = v94;
        long long v39 = (const std::vector<unsigned int>::value_type *)v95;
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        int v91 = 0;
        unsigned int v92 = 0;
        uint64_t v93 = 0;
        uint64_t v85 = v36;
        long long v61 = (std::vector<unsigned int>::value_type *)v38;
        v100[0] = v37;
        uint64_t v103 = v39;
        uint64_t v104 = v38;
        unint64_t v60 = v39;
        int v88 = &v91;
        int v89 = 0;
        std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<unsigned int *> &,std::__wrap_iter<unsigned int *> &,std::__wrap_iter<unsigned int *> &,std::__wrap_iter<unsigned int *> &,std::insert_iterator<std::vector<unsigned int>> &>((std::__wrap_iter<unsigned int *>::iterator_type)&v105, (const std::vector<unsigned int>::value_type **)&v85, v100, &v104, &v103, (uint64_t)&v88);
        int v89 = 0;
        uint64_t v90 = 0;
        int v88 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v88, v91, (uint64_t)v92, (v92 - (unsigned char *)v91) >> 2);
        long long v40 = (unsigned int *)v89;
        long long v63 = v88;
        if (v88 != v89)
        {
          unint64_t v41 = v88;
          do
          {
            uint64_t v42 = (HALS_Object *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)v41);
            int v44 = v42;
            if (v42)
            {
              HALS_Client::RemoveMuter(v42, *((_DWORD *)this + 4));
              (*(void (**)(uint64_t *__return_ptr, HALS_ObjectMap *))(*(void *)v44 + 200))(&v105, v44);
              uint64_t v46 = (unsigned int *)v105;
              uint64_t v45 = v106;
              if ((unsigned int *)v105 != v106)
              {
                do
                {
                  uint64_t v47 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v46);
                  int v49 = (HALS_ObjectMap *)v47;
                  if (v47)
                  {
                    uint64_t v50 = (uint64_t)this[31];
                    int v51 = (std::__shared_weak_count *)this[32];
                    if (v51) {
                      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    HALS_IOContext::RemoveTap(*(void *)(v47 + 96), v50, v51);
                    if (v51) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
                    }
                  }
                  HALS_ObjectMap::ReleaseObject(v49, v48);
                  ++v46;
                }
                while (v46 != v45);
                uint64_t v46 = (unsigned int *)v105;
              }
              if (v46)
              {
                int v106 = v46;
                operator delete(v46);
              }
            }
            HALS_ObjectMap::ReleaseObject(v44, v43);
            unint64_t v41 = (void **)((char *)v41 + 4);
          }
          while (v41 != (void **)v40);
        }
        if (v63)
        {
          int v89 = v63;
          operator delete(v63);
        }
        uint64_t v85 = 0;
        uint64_t v86 = 0;
        uint64_t v87 = 0;
        uint64_t v103 = v60;
        uint64_t v104 = v61;
        unsigned int v102 = v62;
        v100[1] = 0;
        std::logic_error v101 = v37;
        v100[0] = (const std::vector<unsigned int>::value_type *)&v85;
        std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<unsigned int *> &,std::__wrap_iter<unsigned int *> &,std::__wrap_iter<unsigned int *> &,std::__wrap_iter<unsigned int *> &,std::insert_iterator<std::vector<unsigned int>> &>((std::__wrap_iter<unsigned int *>::iterator_type)&v105, &v104, &v103, (const std::vector<unsigned int>::value_type **)&v102, &v101, (uint64_t)v100);
        int v106 = 0;
        uint64_t v107 = 0;
        uint64_t v105 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v105, v85, (uint64_t)v86, (v86 - (unsigned char *)v85) >> 2);
        int v52 = (unsigned int *)v105;
        HALS_Tap::AddTapToClients((uint64_t)this, (unsigned int *)v105, v106);
        if (v52)
        {
          int v106 = v52;
          operator delete(v52);
        }
        if (v85)
        {
          uint64_t v86 = v85;
          operator delete(v85);
        }
        if (v91)
        {
          unsigned int v92 = v91;
          operator delete(v91);
        }
        if (v61) {
          operator delete(v61);
        }
        if (v62) {
          operator delete(v62);
        }
      }
      else
      {
        int v53 = v83;
        if (__p != v83)
        {
          unint64_t v54 = (unsigned int *)__p;
          do
            HALS_Tap::SetClientMuteState((HALS_Tap *)this, (HALS_ObjectMap *)*v54++, 0);
          while (v54 != v53);
        }
        long long v97 = 0;
        char v98 = 0;
        HALS_System::GetInstance(&v105, 0, (uint64_t *)&v97);
        int v55 = (unsigned int *)v105;
        int v56 = (std::__shared_weak_count *)this[32];
        int v94 = (const std::vector<unsigned int>::value_type *)this[31];
        uint64_t v95 = v56;
        if (v56) {
          atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        HALS_System::RemoveTapFromAllContexts((uint64_t)v55, (uint64_t *)&v94);
        if (v56) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v56);
        }
        if (v106) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v106);
        }
      }
    }
    else
    {
      HALS_Tap::AddTapToAllContexts((HALS_Tap *)this);
    }
    __int16 v28 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    uint64_t v105 = 0x676C6F6274647363;
    LODWORD(v106) = 0;
    HALS_Object::PropertiesChanged((HALS_Object *)this, v28, 0, 1u, (const AudioObjectPropertyAddress *)&v105);
    if (*((unsigned char *)v67 + 24))
    {
      int v29 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
      uint64_t v105 = 0x676C6F6274707323;
      LODWORD(v106) = 0;
      HALS_Object::PropertiesChanged((HALS_Object *)this, v29, 0, 1u, (const AudioObjectPropertyAddress *)&v105);
    }
    if (*((unsigned char *)v71 + 24))
    {
      unsigned int v30 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
      uint64_t v105 = 0x676C6F6274666D74;
      LODWORD(v106) = 0;
      HALS_Object::PropertiesChanged((HALS_Object *)this, v30, 0, 1u, (const AudioObjectPropertyAddress *)&v105);
    }
    if (*((unsigned char *)v75 + 24))
    {
      unsigned int v31 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
      uint64_t v105 = 0x676C6F626C6E616DLL;
      LODWORD(v106) = 0;
      HALS_Object::PropertiesChanged((HALS_Object *)this, v31, 0, 1u, (const AudioObjectPropertyAddress *)&v105);
    }
    _Block_object_dispose(&v66, 8);
    _Block_object_dispose(&v70, 8);
    _Block_object_dispose(&v74, 8);
    _Block_object_dispose(&v78, 8);
    if (__p) {
      operator delete(__p);
    }
    BOOL v32 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    if (a8) {
      uint64_t v33 = *((unsigned int *)a8 + 4);
    }
    else {
      uint64_t v33 = 0;
    }
    strcpy(buf, "csdtbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    HALS_Object::PropertiesChanged((HALS_Object *)this, v32, v33, 1u, (const AudioObjectPropertyAddress *)buf);
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    if (a3->mSelector != 1819173229) {
      HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v14, v15, v16, v17, (uint64_t)a8);
    }
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_Tap.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 195;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Tap::SetPropertyData: bad property data size for kAudioObjectPropertyName", buf, 0x12u);
      }
      int v58 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v58 = off_1F148A5D8;
      v58[2] = 561211770;
    }
    v65[0] = MEMORY[0x1E4F143A8];
    v65[1] = 0x40000000;
    v65[2] = ___ZN8HALS_Tap15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
    v65[3] = &__block_descriptor_tmp_3_3728;
    uint64_t v65[4] = this;
    v65[5] = a5;
    uint64_t v18 = (HALB_Mutex *)(*((uint64_t (**)(const void **))*this + 7))(this);
    HALB_CommandGate::ExecuteCommand(v18, (uint64_t)v65);
    uint64_t v19 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    if (a8) {
      uint64_t v20 = *((unsigned int *)a8 + 4);
    }
    else {
      uint64_t v20 = 0;
    }
    strcpy(buf, "csdtbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    HALS_Object::PropertiesChanged((HALS_Object *)this, v19, v20, 1u, (const AudioObjectPropertyAddress *)buf);
    uint64_t v23 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    if (a8) {
      uint64_t v24 = *((unsigned int *)a8 + 4);
    }
    else {
      uint64_t v24 = 0;
    }
    strcpy(buf, "manlbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    HALS_Object::PropertiesChanged((HALS_Object *)this, v23, v24, 1u, (const AudioObjectPropertyAddress *)buf);
  }
}

void sub_1BAC0E6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, const void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  long long v57 = *(std::__shared_weak_count **)(v55 - 224);
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);
  if (v54)
  {
    a39 = (uint64_t)v54;
    operator delete(v54);
  }
  applesauce::CF::DictionaryRef::~DictionaryRef(&a15);
  _Unwind_Resume(a1);
}

void ___ZN8HALS_Tap15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  CFDictionaryRef v2 = PropertyListDeepImmutableCopy(**(const __CFString ***)(a1 + 40));
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v4, v2);
  long long v3 = *(const void **)(v1 + 56);
  *(void *)(v1 + 56) = v4;
  uint64_t v4 = v3;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1BAC0E908(void *a1)
{
}

void ___ZN8HALS_Tap14SetDescriptionERKN10applesauce2CF13DictionaryRefE_block_invoke(void *a1)
{
  uint64_t v2 = a1[8];
  *(unsigned char *)(v2 + 240) = 0;
  HALS_Tap::GetName(&v8, *(const void **)(v2 + 56));
  long long v3 = (CFTypeRef *)a1[9];
  CFDictionaryRef v4 = (const __CFDictionary *)*v3;
  if (*v3) {
    CFRetain(*v3);
  }
  CFDictionaryRef v7 = v4;
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = HALS_Tap::_UpdateFromDescription(v2, &v7, (BOOL *)(*(void *)(a1[5] + 8) + 24), (BOOL *)(*(void *)(a1[6] + 8) + 24));
  if (v4) {
    CFRelease(v4);
  }
  *(unsigned char *)(v2 + 240) = 1;
  HALS_Tap::GetName(&cf, *(const void **)(v2 + 56));
  CFTypeRef v5 = v8;
  *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)v8, (const __CFString **)&cf) != kCFCompareEqualTo;
  if (cf) {
    CFRelease(cf);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void sub_1BAC0EA0C(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  CFDictionaryRef v4 = va_arg(va1, const void *);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  applesauce::CF::StringRef::~StringRef((const void **)va1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAC0E9E8);
}

void HALS_Tap::UpdateFilteredProcesses(HALS_Tap *this)
{
  if (*((unsigned char *)this + 81))
  {
    v10[0] = 0;
    v10[1] = 0;
    HALS_System::GetInstance(&v11, 0, v10);
    HALS_System::GetProcessObjectList((HALS_System *)&v13, v11);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 1174405120;
    _OWORD v6[2] = ___ZN8HALS_Tap23UpdateFilteredProcessesEv_block_invoke;
    v6[3] = &__block_descriptor_tmp_26_3733;
    void v6[4] = this;
    std::string __p = 0;
    CFTypeRef v8 = 0;
    uint64_t v9 = 0;
    uint64_t v2 = v13;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v13, v14, (v14 - (uint64_t)v13) >> 2);
    long long v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Tap *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
    if (__p)
    {
      CFTypeRef v8 = __p;
      operator delete(__p);
    }
    if (v2) {
      operator delete(v2);
    }
  }
  else
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 0x40000000;
    v5[2] = ___ZN8HALS_Tap23UpdateFilteredProcessesEv_block_invoke_27;
    void v5[3] = &__block_descriptor_tmp_28_3734;
    v5[4] = this;
    CFDictionaryRef v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Tap *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v5);
  }
}

void sub_1BAC0EBB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (v20) {
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void HALS_Tap::UpdateReadingContexts(HALS_Tap *this, unsigned int **a2)
{
  uint64_t v5 = *((void *)this + 31);
  CFDictionaryRef v4 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(unsigned char *)(v5 + 464))
  {
    std::__function::__value_func<void ()(HALS_MultiTap::Reader_Action_State)>::~__value_func[abi:ne180100]((void *)(v5 + 432));
    *(unsigned char *)(v5 + 464) = 0;
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  CFDictionaryRef v7 = *a2;
  unint64_t v6 = a2[1];
  while (v7 != v6)
  {
    unsigned int v8 = *v7++;
    HALS_Tap::SetClientMuteState(this, (HALS_ObjectMap *)v8, 0);
  }
  uint64_t v9 = (HALS_DeviceManager *)HALS_MetaManager::sInstance;
  HALS_Tap::GetUID(&cf, *((const void **)this + 8));
  int v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  HALS_DeviceManager::CopyRawDeviceList(v9, (HALS_DeviceManager::BasicDeviceList *)&v44);
  uint64_t v11 = (unsigned int **)v44;
  CFStringRef v12 = (const __CFString *)cf;
  unint64_t v41 = (unsigned int **)v45;
  if (v44 != v45)
  {
    long long v39 = &v62;
    long long v40 = &v61;
    std::string v37 = v48;
    int v38 = v57;
    while (1)
    {
      unint64_t v13 = *v11;
      if (v12)
      {
        CFRetain(v12);
        CFStringRef v43 = v12;
        CFRetain(v12);
        CFStringRef v14 = v12;
      }
      else
      {
        CFStringRef v14 = 0;
        CFStringRef v43 = 0;
      }
      v48[4] = v12;
      uint64_t v58 = 0;
      uint64_t v59 = &v58;
      uint64_t v60 = 0x3802000000;
      long long v61 = __Block_byref_object_copy__132;
      uint64_t v62 = __Block_byref_object_dispose__133;
      v63[0] = &unk_1F1489968;
      v63[1] = 0;
      uint64_t v55 = MEMORY[0x1E4F143A8];
      uint64_t v56 = 0x40000000;
      v57[0] = ___ZN15HALS_MetaDevice6HasTapEN10applesauce2CF9StringRefE_block_invoke;
      v57[1] = &unk_1E6232280;
      v57[2] = &v58;
      v57[3] = v13;
      uint64_t v15 = (HALB_Mutex *)(*(uint64_t (**)(unsigned int *))(*(void *)v13 + 56))(v13);
      HALB_CommandGate::ExecuteCommand(v15, (uint64_t)&v55);
      CFArrayRef v16 = (const __CFArray *)v59[6];
      if (v16) {
        break;
      }
LABEL_48:
      int v33 = 0;
LABEL_50:
      _Block_object_dispose(&v58, 8);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v63);
      if (v12) {
        CFRelease(v12);
      }
      if (v33)
      {
        uint64_t v58 = 0;
        uint64_t v59 = &v58;
        uint64_t v60 = 0x2000000000;
        long long v61 = 0;
        v47[0] = MEMORY[0x1E4F143A8];
        v47[1] = 0x40000000;
        v48[0] = ___ZN15HALS_MetaDevice16UpdateTapReadersEN10applesauce2CF9StringRefE_block_invoke;
        v48[1] = &unk_1E62322D0;
        v48[2] = &v58;
        void v48[3] = v13;
        unsigned int v34 = (HALB_Mutex *)(*(uint64_t (**)(unsigned int *))(*(void *)v13 + 56))(v13);
        HALB_CommandGate::ExecuteCommand(v34, (uint64_t)v47);
        uint64_t v35 = v13[4];
        uint64_t v55 = 0x676C6F6261636F6DLL;
        LODWORD(v56) = 0;
        (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, uint64_t *, void, void, void, void *, void *, void (**)(uint64_t), uint64_t (**)(uint64_t, uint64_t)))(*(void *)v13 + 120))(v13, v35, &v55, 8, v59 + 3, 0, 0, 0, v37, v38, v39, v40);
        _Block_object_dispose(&v58, 8);
      }
      if (v14) {
        CFRelease(v14);
      }
      if (++v11 == v41) {
        goto LABEL_57;
      }
    }
    unsigned int v17 = 0;
    while (1)
    {
      if ((unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v16) <= v17) {
        goto LABEL_48;
      }
      unsigned int v18 = v17;
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v53, (uint64_t)(v59 + 5), v17);
      if (theDict) {
        break;
      }
LABEL_44:
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v53);
      unsigned int v17 = v18 + 1;
      CFArrayRef v16 = (const __CFArray *)v59[6];
    }
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v52, theDict, @"uid");
    OS::CF::String::AsStdString(&__s1, (uint64_t)v52);
    if (!v12)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v12);
    char v19 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __s1.__r_.__value_.__l.__size_;
    }
    unint64_t v21 = v50;
    int v22 = (char)v50;
    if ((v50 & 0x80u) != 0) {
      unint64_t v21 = (unint64_t)__p[1];
    }
    if (size != v21)
    {
      BOOL v32 = 0;
      if (((char)v50 & 0x80000000) == 0) {
        goto LABEL_42;
      }
      goto LABEL_46;
    }
    if ((v50 & 0x80u) == 0) {
      uint64_t v23 = __p;
    }
    else {
      uint64_t v23 = (void **)__p[0];
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v32 = memcmp(__s1.__r_.__value_.__l.__data_, v23, __s1.__r_.__value_.__l.__size_) == 0;
    }
    else
    {
      if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23))
      {
        BOOL v32 = 1;
        if (((char)v50 & 0x80000000) == 0)
        {
LABEL_42:
          if ((v19 & 0x80) == 0) {
            goto LABEL_43;
          }
LABEL_47:
          operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_43:
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v52);
          if (v32)
          {
            OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v53);
            int v33 = 1;
            goto LABEL_50;
          }
          goto LABEL_44;
        }
LABEL_46:
        operator delete(__p[0]);
        if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_43;
        }
        goto LABEL_47;
      }
      uint64_t v24 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
      p_s1 = &__s1;
      do
      {
        int v27 = p_s1->__r_.__value_.__s.__data_[0];
        p_s1 = (std::string *)((char *)p_s1 + 1);
        int v26 = v27;
        int v29 = *(unsigned __int8 *)v23;
        uint64_t v23 = (void **)((char *)v23 + 1);
        int v28 = v29;
        BOOL v31 = v24-- != 0;
        BOOL v32 = v26 == v28;
      }
      while (v26 == v28 && v31);
    }
    if ((v22 & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_46;
  }
LABEL_57:
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v44, v10);
  if (v12) {
    CFRelease(v12);
  }
}

void sub_1BAC0F100(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, OS::CF::UntypedObject *a14, const void *a15, __int16 a16, char a17, char a18, int a19, HALS_ObjectMap **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,char a41)
{
}

void HALS_Tap::AddTapToAllContexts(HALS_Tap *this)
{
  long long v3 = 0;
  CFDictionaryRef v4 = 0;
  uint64_t v5 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v3, *((const void **)this + 26), *((void *)this + 27), (uint64_t)(*((void *)this + 27) - *((void *)this + 26)) >> 2);
  uint64_t v2 = v3;
  HALS_Tap::AddTapToClients((uint64_t)this, v3, v4);
  if (v2)
  {
    operator delete(v2);
  }
}

void sub_1BAC0F228(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

std::__wrap_iter<unsigned int *>::iterator_type std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__wrap_iter<unsigned int *> &,std::__wrap_iter<unsigned int *> &,std::__wrap_iter<unsigned int *> &,std::__wrap_iter<unsigned int *> &,std::insert_iterator<std::vector<unsigned int>> &>(std::__wrap_iter<unsigned int *>::iterator_type result, const std::vector<unsigned int>::value_type **a2, const std::vector<unsigned int>::value_type **a3, const std::vector<unsigned int>::value_type **a4, const std::vector<unsigned int>::value_type **a5, uint64_t a6)
{
  CFDictionaryRef v7 = (std::vector<unsigned int>::const_iterator *)result;
  unsigned int v8 = *a2;
  uint64_t v9 = *a3;
  if (*a2 == *a3)
  {
LABEL_13:
    char v19 = *(std::vector<unsigned int> **)a6;
    v18.__i_ = *(std::__wrap_iter<const unsigned int *>::iterator_type *)(a6 + 8);
    uint64_t v9 = v8;
LABEL_14:
    unint64_t v21 = v8;
    goto LABEL_15;
  }
  CFStringRef v12 = *a4;
  if (*a4 != *a5)
  {
    while (*v8 >= *v12)
    {
      CFArrayRef v16 = a2;
      unsigned int v17 = a4;
      if (*v12 >= *v8) {
        goto LABEL_6;
      }
LABEL_7:
      *unsigned int v17 = v12 + 1;
      unsigned int v8 = *a2;
      uint64_t v9 = *a3;
      if (*a2 == *a3) {
        goto LABEL_13;
      }
      CFStringRef v12 = *a4;
      if (*a4 == *a5) {
        goto LABEL_9;
      }
    }
    v15.__i_ = *(std::__wrap_iter<const unsigned int *>::iterator_type *)(a6 + 8);
    __n128 result = std::vector<unsigned int>::insert(*(std::vector<unsigned int> **)a6, v15, v8).__i_;
    unsigned int v8 = result;
    CFArrayRef v16 = (const std::vector<unsigned int>::value_type **)(a6 + 8);
    unsigned int v17 = a2;
LABEL_6:
    *CFArrayRef v16 = v8 + 1;
    CFStringRef v12 = *v17;
    goto LABEL_7;
  }
LABEL_9:
  char v19 = *(std::vector<unsigned int> **)a6;
  v18.__i_ = *(std::__wrap_iter<const unsigned int *>::iterator_type *)(a6 + 8);
  if (v8 == v9) {
    goto LABEL_14;
  }
  uint64_t v20 = v8;
  do
  {
    __n128 result = std::vector<unsigned int>::insert(v19, v18, v20).__i_;
    v18.__i_ = result + 1;
    ++v20;
  }
  while (v20 != v9);
  unint64_t v21 = v9;
  uint64_t v9 = v8;
LABEL_15:
  v7->__i_ = (const std::vector<unsigned int>::value_type *)((char *)v9 + (char *)v21 - (char *)v8);
  v7[1].__i_ = (std::__wrap_iter<const unsigned int *>::iterator_type)v19;
  v7[2].__i_ = v18.__i_;
  return result;
}

void HALS_Tap::AddTapToClients(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  v27[3] = *MEMORY[0x1E4F143B8];
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      unint64_t v6 = (HALS_ObjectMap *)*v5;
      uint64_t v7 = HALS_ObjectMap::CopyObjectByObjectID(v6);
      uint64_t v9 = (HALS_ObjectMap *)v7;
      if (v7)
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v7 + 200))(&__p, v7);
        uint64_t v10 = (unsigned int *)__p;
        uint64_t v11 = v25;
        while (v10 != v11)
        {
          unint64_t v13 = (HALS_IOContext *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v10);
          if (v13) {
            HALS_Tap::AddTapToContext((HALS_Tap *)a1, v13);
          }
          HALS_ObjectMap::ReleaseObject(v13, v12);
          ++v10;
        }
        if (*(_DWORD *)(a1 + 84) == 1) {
          HALS_Tap::SetClientMuteState((HALS_Tap *)a1, v6, 1);
        }
        if (__p)
        {
          unint64_t v25 = (unsigned int *)__p;
          operator delete(__p);
        }
      }
      HALS_ObjectMap::ReleaseObject(v9, v8);
      ++v5;
    }
    while (v5 != a3);
  }
  if (*(_DWORD *)(a1 + 84) == 2)
  {
    uint64_t v15 = *(void *)(a1 + 248);
    CFStringRef v14 = *(std::__shared_weak_count **)(a1 + 256);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v16 = *(_DWORD *)(a1 + 16);
    unint64_t v21 = &unk_1F14655B0;
    int v22 = v16;
    uint64_t v23 = &v21;
    unsigned int v17 = (void **)(v15 + 432);
    if (*(unsigned char *)(v15 + 464))
    {
      std::__function::__value_func<void ()(HALS_MultiTap::Reader_Action_State)>::__value_func[abi:ne180100]((uint64_t)&__p, (uint64_t)&v21);
      if (v17 != &__p)
      {
        std::vector<unsigned int>::const_iterator v18 = p_p;
        char v19 = *(void ***)(v15 + 456);
        if (p_p == &__p)
        {
          if (v19 == v17)
          {
            (*((void (**)(void **, void *))__p + 3))(&__p, v27);
            (*((void (**)(void **))*p_p + 4))(p_p);
            p_p = 0;
            (*(void (**)(void, void **))(**(void **)(v15 + 456) + 24))(*(void *)(v15 + 456), &__p);
            (*(void (**)(void))(**(void **)(v15 + 456) + 32))(*(void *)(v15 + 456));
            *(void *)(v15 + 456) = 0;
            p_p = &__p;
            (*(void (**)(void *, uint64_t))(v27[0] + 24))(v27, v15 + 432);
            (*(void (**)(void *))(v27[0] + 32))(v27);
          }
          else
          {
            (*((void (**)(void **, uint64_t))__p + 3))(&__p, v15 + 432);
            (*((void (**)(void **))*p_p + 4))(p_p);
            p_p = *(void ***)(v15 + 456);
          }
          *(void *)(v15 + 456) = v17;
        }
        else if (v19 == v17)
        {
          (*((void (**)(uint64_t, void **))*v17 + 3))(v15 + 432, &__p);
          (*(void (**)(void))(**(void **)(v15 + 456) + 32))(*(void *)(v15 + 456));
          *(void *)(v15 + 456) = p_p;
          p_p = &__p;
        }
        else
        {
          p_p = *(void ***)(v15 + 456);
          *(void *)(v15 + 456) = v18;
        }
      }
      std::__function::__value_func<void ()(HALS_MultiTap::Reader_Action_State)>::~__value_func[abi:ne180100](&__p);
    }
    else
    {
      std::__function::__value_func<void ()(HALS_MultiTap::Reader_Action_State)>::__value_func[abi:ne180100](v15 + 432, (uint64_t)&v21);
      *(unsigned char *)(v15 + 464) = 1;
    }
    os_unfair_lock_lock((os_unfair_lock_t)(v15 + 360));
    uint64_t v20 = *(void *)(v15 + 392);
    os_unfair_lock_unlock((os_unfair_lock_t)(v15 + 360));
    if (v20) {
      std::function<void ()(HALS_MultiTap::Reader_Action_State)>::operator()(*(void *)(v15 + 456), 0);
    }
    std::__function::__value_func<void ()(HALS_MultiTap::Reader_Action_State)>::~__value_func[abi:ne180100](&v21);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
}

void sub_1BAC0F790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void HALS_Tap::SetClientMuteState(HALS_Tap *this, HALS_ObjectMap *a2, int a3)
{
  uint64_t v5 = (HALS_Object *)HALS_ObjectMap::CopyObjectByObjectID(a2);
  uint64_t v7 = v5;
  if (v5)
  {
    if (a3)
    {
      unsigned int v8 = (unsigned int *)*((void *)this + 29);
      if (v8) {
        unsigned int v8 = (unsigned int *)(*v8 | 0x100000000);
      }
      int v9 = *((_DWORD *)this + 4);
      uint64_t v20 = 0;
      unint64_t v21 = &v20;
      uint64_t v22 = 0x2000000000;
      char v23 = 0;
      uint64_t v16 = 0;
      unsigned int v17 = &v16;
      uint64_t v18 = 0x2000000000;
      char v19 = 0;
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 0x40000000;
      _OWORD v12[2] = ___ZN11HALS_Client8AddMuterEN4AMCP9DirectionEjNSt3__18optionalIjEE_block_invoke;
      v12[3] = &unk_1E6230CA0;
      v12[5] = &v16;
      void v12[6] = v5;
      int v13 = 0;
      int v14 = v9;
      v12[4] = &v20;
      uint64_t v15 = v8;
      uint64_t v10 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Object *))(*(void *)v5 + 56))(v5);
      HALB_CommandGate::ExecuteCommand(v10, (uint64_t)v12);
      if (*((unsigned char *)v21 + 24) || *((unsigned char *)v17 + 24))
      {
        HALS_Client::UpdateMuteStateOnContexts(v7);
        strcpy((char *)&v11, "tmopbolg");
        BYTE1(v11.mElement) = 0;
        HIWORD(v11.mElement) = 0;
        HALS_Object::PropertiesChanged(v7, (HALS_NotificationManager *)*((unsigned int *)v7 + 4), *((unsigned int *)v7 + 4), 1u, &v11);
      }
      _Block_object_dispose(&v16, 8);
      _Block_object_dispose(&v20, 8);
    }
    else
    {
      HALS_Client::RemoveMuter(v5, *((_DWORD *)this + 4));
    }
  }
  HALS_ObjectMap::ReleaseObject(v7, v6);
}

void sub_1BAC0F9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 64), 8);
  HALS_ObjectMap::ReleaseObject(v13, v16);
  _Unwind_Resume(a1);
}

void HALS_Tap::AddTapToContext(HALS_Tap *this, HALS_IOContext *a2)
{
  if (a2)
  {
    CFDictionaryRef v4 = (int *)*((void *)this + 29);
    if (!v4) {
      goto LABEL_6;
    }
    if (!HALS_IOContext::IncludesDevice(a2, *v4)) {
      return;
    }
    uint64_t v5 = (uint64_t *)*((void *)this + 29);
    if (v5)
    {
      uint64_t v6 = *v5;
      uint64_t v7 = 1;
    }
    else
    {
LABEL_6:
      uint64_t v6 = 0;
      uint64_t v7 = 0;
    }
    uint64_t v8 = *((void *)this + 31);
    int v9 = (std::__shared_weak_count *)*((void *)this + 32);
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v10 = *((void *)a2 + 12);
      uint64_t v11 = v8;
      CFStringRef v12 = v9;
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v10 = *((void *)a2 + 12);
      uint64_t v11 = v8;
      CFStringRef v12 = 0;
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v10 + 744))(v10, &v11, v6, v7);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

void sub_1BAC0FAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<void ()(HALS_MultiTap::Reader_Action_State)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<HALS_Tap::SetMuteAction(void)::$_0,std::allocator<HALS_Tap::SetMuteAction(void)::$_0>,void ()(HALS_MultiTap::Reader_Action_State)>::target_type()
{
}

uint64_t std::__function::__func<HALS_Tap::SetMuteAction(void)::$_0,std::allocator<HALS_Tap::SetMuteAction(void)::$_0>,void ()(HALS_MultiTap::Reader_Action_State)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8HALS_Tap13SetMuteActionEvE3$_0")) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void std::__function::__func<HALS_Tap::SetMuteAction(void)::$_0,std::allocator<HALS_Tap::SetMuteAction(void)::$_0>,void ()(HALS_MultiTap::Reader_Action_State)>::operator()(uint64_t a1, int *a2)
{
  int v2 = *a2;
  uint64_t v3 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 8));
  uint64_t v5 = (HALS_Tap *)v3;
  if (v3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v10, *(const void **)(v3 + 208), *(void *)(v3 + 216), (uint64_t)(*(void *)(v3 + 216) - *(void *)(v3 + 208)) >> 2);
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    if (v2)
    {
      if (v10 != v11)
      {
        uint64_t v8 = v10;
        do
          HALS_Tap::SetClientMuteState(v5, (HALS_ObjectMap *)*v8++, 0);
        while (v8 != v7);
      }
    }
    else if (v10 != v11)
    {
      int v9 = v10;
      do
        HALS_Tap::SetClientMuteState(v5, (HALS_ObjectMap *)*v9++, 1);
      while (v9 != v7);
    }
    if (v6) {
      operator delete(v6);
    }
  }
  HALS_ObjectMap::ReleaseObject(v5, v4);
}

void sub_1BAC0FC70(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HALS_Tap::SetMuteAction(void)::$_0,std::allocator<HALS_Tap::SetMuteAction(void)::$_0>,void ()(HALS_MultiTap::Reader_Action_State)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14655B0;
  *(_DWORD *)(a2 + _Block_object_dispose(&a9, 8) = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *std::__function::__func<HALS_Tap::SetMuteAction(void)::$_0,std::allocator<HALS_Tap::SetMuteAction(void)::$_0>,void ()(HALS_MultiTap::Reader_Action_State)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F14655B0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<HALS_Tap::SetMuteAction(void)::$_0,std::allocator<HALS_Tap::SetMuteAction(void)::$_0>,void ()(HALS_MultiTap::Reader_Action_State)>::~__func()
{
}

void ___ZN8HALS_Tap23UpdateFilteredProcessesEv_block_invoke(void *a1)
{
  uint64_t v1 = a1[4];
  int v2 = (unsigned int *)a1[5];
  uint64_t v3 = (unsigned int *)a1[6];
  if (v2 != v3)
  {
    CFDictionaryRef v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      unsigned int v7 = *v2;
      if (!std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)(v1 + 88), *v2))
      {
        if ((unint64_t)v4 >= v5)
        {
          uint64_t v9 = v4 - v6;
          unint64_t v10 = v9 + 1;
          if ((unint64_t)(v9 + 1) >> 62) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v5 - (void)v6) >> 1 > v10) {
            unint64_t v10 = (uint64_t)(v5 - (void)v6) >> 1;
          }
          if (v5 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v10;
          }
          if (v11) {
            unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v11);
          }
          else {
            uint64_t v12 = 0;
          }
          int v13 = (unsigned int *)(v11 + 4 * v9);
          *int v13 = v7;
          uint64_t v8 = (uint64_t)(v13 + 1);
          while (v4 != v6)
          {
            unsigned int v14 = *--v4;
            *--int v13 = v14;
          }
          unint64_t v5 = v11 + 4 * v12;
          if (v6) {
            operator delete(v6);
          }
          uint64_t v6 = v13;
          goto LABEL_7;
        }
        *v4++ = v7;
      }
      uint64_t v8 = (uint64_t)v4;
LABEL_7:
      ++v2;
      CFDictionaryRef v4 = (unsigned int *)v8;
      if (v2 == v3) {
        goto LABEL_25;
      }
    }
  }
  uint64_t v8 = 0;
  uint64_t v6 = 0;
LABEL_25:
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v1 + 208), (char *)v6, v8, (v8 - (uint64_t)v6) >> 2);
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAC0FEA4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8HALS_Tap23UpdateFilteredProcessesEv_block_invoke_27(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = (void **)(v1 + 208);
  *(void *)(v1 + 216) = *(void *)(v1 + 208);
  std::vector<unsigned int>::reserve((std::vector<unsigned int> *)(v1 + 208), *(void *)(v1 + 112));
  uint64_t v3 = *(uint64_t **)(v1 + 104);
  if (v3)
  {
    CFDictionaryRef v4 = *(char **)(v1 + 216);
    do
    {
      int v5 = *((_DWORD *)v3 + 4);
      unint64_t v6 = *(void *)(v1 + 224);
      if ((unint64_t)v4 >= v6)
      {
        uint64_t v8 = (char *)*v2;
        uint64_t v9 = (v4 - (unsigned char *)*v2) >> 2;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = v6 - (void)v8;
        if (v11 >> 1 > v10) {
          unint64_t v10 = v11 >> 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12)
        {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v12);
          uint64_t v8 = *(char **)(v1 + 208);
          CFDictionaryRef v4 = *(char **)(v1 + 216);
        }
        else
        {
          uint64_t v13 = 0;
        }
        unsigned int v14 = (_DWORD *)(v12 + 4 * v9);
        *unsigned int v14 = v5;
        unsigned int v7 = (char *)(v14 + 1);
        while (v4 != v8)
        {
          int v15 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *--unsigned int v14 = v15;
        }
        *(void *)(v1 + 20_Block_object_dispose(&a9, 8) = v14;
        *(void *)(v1 + 216) = v7;
        *(void *)(v1 + 224) = v12 + 4 * v13;
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        *(_DWORD *)CFDictionaryRef v4 = v5;
        unsigned int v7 = v4 + 4;
      }
      *(void *)(v1 + 216) = v7;
      uint64_t v3 = (uint64_t *)*v3;
      CFDictionaryRef v4 = v7;
    }
    while (v3);
  }
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1)
{
  int v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v2;
    operator delete(v2);
  }
}

void *__copy_helper_block_e8_40c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
  int v2 = (void *)(a1 + 40);
  v2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2, *(const void **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2);
}

BOOL HALS_Tap::_UpdateFromDescription(uint64_t a1, const __CFDictionary **a2, BOOL *a3, BOOL *a4)
{
  uint64_t v181 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v6 = *a2;
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    goto LABEL_229;
  }
  int v146 = *(unsigned __int8 *)(a1 + 82);
  int v147 = *(unsigned __int8 *)(a1 + 80);
  int v145 = *(_DWORD *)(a1 + 84);
  uint64_t v9 = *(void *)(a1 + 248);
  double v10 = *(double *)(v9 + 24);
  int32x4_t v154 = *(int32x4_t *)(v9 + 32);
  int v151 = *(unsigned __int8 *)(a1 + 83);
  int v152 = *(_DWORD *)(v9 + 48);
  int v148 = *(_DWORD *)(v9 + 56);
  int v149 = *(_DWORD *)(v9 + 52);
  *(void *)CFTypeRef cf = 0;
  applesauce::CF::at_or<applesauce::CF::StringRef,char const(&)[8]>((const __CFString **)&valuePtr, v6, "TapName", (const __CFString **)cf);
  uint64_t v11 = *(const void **)(a1 + 56);
  *(void *)(a1 + 56) = valuePtr;
  if (v11) {
    CFRelease(v11);
  }
  if (*(void *)cf) {
    CFRelease(*(CFTypeRef *)cf);
  }
  char v150 = a4;
  CFDictionaryRef v12 = *a2;
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
LABEL_229:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v13 = (const __CFString *)*MEMORY[0x1E4F1CFC0];
  v171[0] = *(CFTypeRef *)MEMORY[0x1E4F1CFC0];
  CFStringRef v14 = (const __CFString *)applesauce::CF::details::at_key<char const(&)[7]>(v12, "IsMono");
  if (v14)
  {
    CFStringRef v15 = v14;
    CFRetain(v14);
    CFTypeID v16 = CFGetTypeID(v15);
    if (v16 == CFBooleanGetTypeID())
    {
      uint64_t valuePtr = (__CFString *)v15;
      LOBYTE(v176) = 1;
      CFRetain(v15);
      *(void *)CFTypeRef cf = v15;
      std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
      CFStringRef v17 = v13;
      goto LABEL_12;
    }
    CFRelease(v15);
  }
  LOBYTE(valuePtr) = 0;
  LOBYTE(v176) = 0;
  *(void *)CFTypeRef cf = v13;
  v171[0] = 0;
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
  CFStringRef v17 = 0;
  CFStringRef v15 = v13;
  if (!v13)
  {
    long long v141 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v141, "Could not construct");
    __cxa_throw(v141, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_12:
  *(unsigned char *)(a1 + 80) = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v15);
  CFRelease(v15);
  if (v17) {
    CFRelease(v17);
  }
  CFDictionaryRef v18 = *a2;
  if (!*a2)
  {
    long long v127 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v127);
    __cxa_throw(v127, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v171[0] = v13;
  CFStringRef v19 = (const __CFString *)applesauce::CF::details::at_key<char const(&)[12]>(v18, "IsExclusive");
  if (v19)
  {
    CFStringRef v20 = v19;
    CFRetain(v19);
    CFTypeID v21 = CFGetTypeID(v20);
    if (v21 == CFBooleanGetTypeID())
    {
      uint64_t valuePtr = (__CFString *)v20;
      LOBYTE(v176) = 1;
      CFRetain(v20);
      *(void *)CFTypeRef cf = v20;
      std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
      CFStringRef v22 = v13;
      goto LABEL_20;
    }
    CFRelease(v20);
  }
  LOBYTE(valuePtr) = 0;
  LOBYTE(v176) = 0;
  *(void *)CFTypeRef cf = v13;
  v171[0] = 0;
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
  CFStringRef v22 = 0;
  CFStringRef v20 = v13;
  if (!v13)
  {
    long long v142 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v142, "Could not construct");
    __cxa_throw(v142, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_20:
  *(unsigned char *)(a1 + 81) = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v20);
  CFRelease(v20);
  if (v22) {
    CFRelease(v22);
  }
  CFDictionaryRef v23 = *a2;
  if (!*a2)
  {
    long long v128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v128);
    __cxa_throw(v128, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)CFTypeRef cf = v13;
  applesauce::CF::at_or<applesauce::CF::BooleanRef,char const(&)[10]>(&valuePtr, v23, "IsMixdown", cf);
  CFStringRef v24 = valuePtr;
  if (!valuePtr)
  {
    long long v129 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v129, "Could not construct");
    __cxa_throw(v129, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(unsigned char *)(a1 + 82) = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)valuePtr);
  CFRelease(v24);
  if (*(void *)cf) {
    CFRelease(*(CFTypeRef *)cf);
  }
  CFDictionaryRef v25 = *a2;
  if (!*a2)
  {
    long long v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v130);
    __cxa_throw(v130, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)CFTypeRef cf = v13;
  applesauce::CF::at_or<applesauce::CF::BooleanRef,char const(&)[10]>(&valuePtr, v25, "IsPrivate", cf);
  CFStringRef v26 = valuePtr;
  if (!valuePtr)
  {
    long long v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v131, "Could not construct");
    __cxa_throw(v131, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(unsigned char *)(a1 + 83) = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)valuePtr);
  CFRelease(v26);
  if (*(void *)cf) {
    CFRelease(*(CFTypeRef *)cf);
  }
  if (!*a2)
  {
    long long v132 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v132);
    __cxa_throw(v132, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  LODWORD(valuePtr) = 0;
  CFNumberRef v27 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)long long v169 = v27;
  if (!v27)
  {
    long long v133 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v133, "Could not construct");
    __cxa_throw(v133, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFDictionaryRef v28 = *a2;
  CFStringRef v29 = CFStringCreateWithBytes(0, (const UInt8 *)"MuteBehavior", 12, 0x8000100u, 0);
  *(void *)CFTypeRef cf = v29;
  if (!v29)
  {
    long long v134 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v134, "Could not construct");
    __cxa_throw(v134, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v28) {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v28, v29);
  }
  CFRelease(v29);
  if (v28 && Value)
  {
    CFRetain(Value);
    CFTypeID v30 = CFGetTypeID(Value);
    if (v30 == CFNumberGetTypeID())
    {
      uint64_t valuePtr = (__CFString *)Value;
      LOBYTE(v176) = 1;
      CFRetain(Value);
      v171[0] = Value;
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
      goto LABEL_41;
    }
    CFRelease(Value);
  }
  LOBYTE(valuePtr) = 0;
  LOBYTE(v176) = 0;
  v171[0] = v27;
  *(void *)long long v169 = 0;
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
  CFStringRef Value = (const __CFString *)v27;
LABEL_41:
  int v31 = applesauce::CF::convert_to<int,0>((const __CFNumber *)Value);
  if (v171[0]) {
    CFRelease(v171[0]);
  }
  if (*(void *)v169) {
    CFRelease(*(CFTypeRef *)v169);
  }
  *(_DWORD *)(a1 + 84) = v31;
  CFDictionaryRef v32 = *a2;
  if (!*a2)
  {
    long long v135 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v135);
    __cxa_throw(v135, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v33 = CFStringCreateWithBytes(0, (const UInt8 *)"Stream", 6, 0x8000100u, 0);
  uint64_t valuePtr = (__CFString *)v33;
  if (!v33)
  {
    uint64_t v136 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v136, "Could not construct");
    __cxa_throw(v136, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v34 = CFDictionaryContainsKey(v32, v33);
  CFRelease(v33);
  if (!v34)
  {
    int v40 = -1;
    goto LABEL_58;
  }
  if (!*a2)
  {
    long long v143 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v143);
    __cxa_throw(v143, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  LODWORD(valuePtr) = -1;
  CFNumberRef v35 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  v171[0] = v35;
  if (!v35)
  {
    uint64_t v144 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v144, "Could not construct");
    __cxa_throw(v144, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v36 = (const __CFString *)applesauce::CF::details::at_key<char const(&)[7]>(*a2, "Stream");
  if (v36)
  {
    CFStringRef v37 = v36;
    CFRetain(v36);
    CFTypeID v38 = CFGetTypeID(v37);
    if (v38 == CFNumberGetTypeID())
    {
      uint64_t valuePtr = (__CFString *)v37;
      LOBYTE(v176) = 1;
      CFRetain(v37);
      *(void *)CFTypeRef cf = v37;
      CFNumberRef v39 = v35;
      CFNumberRef v35 = (CFNumberRef)v37;
      goto LABEL_56;
    }
    CFRelease(v37);
  }
  CFNumberRef v39 = 0;
  LOBYTE(valuePtr) = 0;
  LOBYTE(v176) = 0;
  *(void *)CFTypeRef cf = v35;
  v171[0] = 0;
LABEL_56:
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
  int v40 = applesauce::CF::convert_to<int,0>(v35);
  CFRelease(v35);
  if (v39) {
    CFRelease(v39);
  }
LABEL_58:
  if (!*a2)
  {
    uint64_t v137 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v137);
    __cxa_throw(v137, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v41 = (const __CFString *)applesauce::CF::details::at_key<char const(&)[10]>(*a2, "DeviceUID");
  if (v41)
  {
    CFStringRef v42 = v41;
    CFRetain(v41);
    CFTypeID v43 = CFGetTypeID(v42);
    if (v43 == CFStringGetTypeID())
    {
      uint64_t valuePtr = (__CFString *)v42;
      LOBYTE(v176) = 1;
      CFRetain(v42);
      CFTypeRef v162 = v42;
      std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
      goto LABEL_64;
    }
    CFRelease(v42);
  }
  LOBYTE(valuePtr) = 0;
  LOBYTE(v176) = 0;
  CFTypeRef v162 = 0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
  CFStringRef v42 = 0;
LABEL_64:
  uint64_t valuePtr = 0;
  if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(v42, (const __CFString **)&valuePtr))
  {
    v161[0] = 0;
    v161[1] = 0;
    HALS_System::GetInstance(&valuePtr, 0, v161);
    unsigned __int8 v50 = HALS_System::CopyDeviceByUID((HALS_System *)valuePtr, v42, 0);
    int v51 = (AMCP::Log::Scope_Registry *)v176;
    if ((void)v176) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v176);
    }
    if (!v50)
    {
      AMCP::Log::Scope_Registry::get(v51);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&valuePtr, "com.apple.coreaudio", "AMCP");
      isa = valuePtr->isa;
      if ((void)v176) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v176);
      }
      if (os_log_type_enabled(isa, OS_LOG_TYPE_ERROR))
      {
        uint64_t v115 = pthread_self();
        mach_port_t v116 = pthread_mach_thread_np(v115);
        LODWORD(valuePtr) = 67109890;
        HIDWORD(valuePtr) = v116;
        LOWORD(v176) = 2080;
        *(void *)((char *)&v176 + 2) = "HALS_Tap.cpp";
        WORD5(v176) = 1024;
        HIDWORD(v176) = 449;
        LOWORD(v177) = 2080;
        *(void *)((char *)&v177 + 2) = "(device.IsValid()) == false";
        _os_log_error_impl(&dword_1BAA78000, isa, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Tap device not found.", (uint8_t *)&valuePtr, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v166);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Tap device not found.", (uint64_t)v169);
      std::runtime_error::runtime_error((std::runtime_error *)__p, (const std::string *)v169);
      std::runtime_error::runtime_error((std::runtime_error *)cf, (const std::runtime_error *)__p);
      *(_OWORD *)&cf[24] = 0uLL;
      uint64_t v159 = 0;
      int v160 = -1;
      *(void *)CFTypeRef cf = &unk_1F148A9A8;
      *(void *)&cf[16] = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&valuePtr, (uint64_t)cf);
      *((void *)&v177 + 1) = "BOOL HALS_Tap::_UpdateFromDescription(AMCP::CF::Dictionary, BOOL &, BOOL &)";
      __int16 v178 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Tap.cpp";
      LODWORD(v179) = 449;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v173.__r_.__value_.__l.__data_);
      *(std::string *)&v171[1] = v173;
      v171[0] = &unk_1F148AA90;
      memset(&v173, 0, sizeof(v173));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    int v52 = *(unsigned int **)(a1 + 232);
    if (!v52) {
      operator new();
    }
    int v53 = (HALS_Object *)*v52;
    if (v53 == *((_DWORD *)v50 + 4))
    {
      int v54 = 0;
      char v155 = 0;
      if (v52[1] == v40)
      {
LABEL_84:
        HALS_ObjectMap::ReleaseObject(v50, v53);
        goto LABEL_85;
      }
    }
    else
    {
      HALS_Tap::RemoveDeviceSampleRateListener((HALS_Tap *)*(unsigned int *)(a1 + 16), v53, v47, v48, v49);
      int v54 = 1;
    }
    long long v57 = *(_DWORD **)(a1 + 232);
    *long long v57 = *((_DWORD *)v50 + 4);
    v57[1] = v40;
    BOOL updated = HALS_Tap::UpdateTapFormatFromDeviceFormat((HALS_MultiTap **)a1, v50);
    if (!updated)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)updated);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&valuePtr, "com.apple.coreaudio", "AMCP");
      uint64_t v117 = valuePtr->isa;
      if ((void)v176) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v176);
      }
      if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
      {
        int v118 = pthread_self();
        mach_port_t v119 = pthread_mach_thread_np(v118);
        LODWORD(valuePtr) = 67109890;
        HIDWORD(valuePtr) = v119;
        LOWORD(v176) = 2080;
        *(void *)((char *)&v176 + 2) = "HALS_Tap.cpp";
        WORD5(v176) = 1024;
        HIDWORD(v176) = 467;
        LOWORD(v177) = 2080;
        *(void *)((char *)&v177 + 2) = "(success) == false";
        _os_log_error_impl(&dword_1BAA78000, v117, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Stream out of range for tap.", (uint8_t *)&valuePtr, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v166);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Stream out of range for tap.", (uint64_t)v169);
      std::runtime_error::runtime_error((std::runtime_error *)__p, (const std::string *)v169);
      std::runtime_error::runtime_error((std::runtime_error *)cf, (const std::runtime_error *)__p);
      *(_OWORD *)&cf[24] = 0uLL;
      uint64_t v159 = 0;
      int v160 = -1;
      *(void *)CFTypeRef cf = &unk_1F148A9A8;
      *(void *)&cf[16] = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&valuePtr, (uint64_t)cf);
      *((void *)&v177 + 1) = "BOOL HALS_Tap::_UpdateFromDescription(AMCP::CF::Dictionary, BOOL &, BOOL &)";
      __int16 v178 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Tap.cpp";
      LODWORD(v179) = 467;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v173.__r_.__value_.__l.__data_);
      *(std::string *)&v171[1] = v173;
      v171[0] = &unk_1F148AA90;
      memset(&v173, 0, sizeof(v173));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    if (v54)
    {
      unsigned int v59 = **(_DWORD **)(a1 + 232);
      strcpy((char *)v171, "trsnbolg");
      BYTE1(v171[1]) = 0;
      WORD1(v171[1]) = 0;
      int v60 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)CFTypeRef cf = 0;
      *(_DWORD *)&cf[4] = v60;
      memset(&cf[8], 0, 32);
      LOBYTE(valuePtr) = 0;
      char v180 = 0;
      HALS_NotificationManager::AddPropertyListener((uint64_t)cf, v59, (char *)v171, (uint64_t)&valuePtr);
      if (v180) {
        AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&valuePtr);
      }
      HALS_Listener::~HALS_Listener((HALS_Listener *)cf);
    }
    char v155 = 1;
    goto LABEL_84;
  }
  uint64_t v55 = *(unsigned int **)(a1 + 232);
  if (v55)
  {
    HALS_Tap::RemoveDeviceSampleRateListener((HALS_Tap *)*(unsigned int *)(a1 + 16), (const HALS_Listener *)*v55, v44, v45, v46);
    uint64_t v56 = *(void *)(a1 + 232);
    *(void *)(a1 + 232) = 0;
    if (v56) {
      MEMORY[0x1C1859840](v56, 0x1000C4000313F17);
    }
    char v155 = 1;
  }
  else
  {
    char v155 = 0;
  }
LABEL_85:
  if (!*a2)
  {
    uint64_t v138 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v138, "Could not construct");
    __cxa_throw(v138, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFArrayRef v61 = CFArrayCreate(0, 0, 0, MEMORY[0x1E4F1D518]);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&valuePtr, v61);
  applesauce::CF::at_or<applesauce::CF::ArrayRef,char const(&)[10]>(&v157, *a2, "BundleIDs", &valuePtr);
  if (valuePtr) {
    CFRelease(valuePtr);
  }
  if (!*a2)
  {
    __int16 v139 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v139, "Could not construct");
    __cxa_throw(v139, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFArrayRef v62 = CFArrayCreate(0, 0, 0, MEMORY[0x1E4F1D518]);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&valuePtr, v62);
  applesauce::CF::at_or<applesauce::CF::ArrayRef,char const(&)[10]>(&v156, *a2, "Processes", &valuePtr);
  if (valuePtr) {
    CFRelease(valuePtr);
  }
  CFArrayRef v63 = (const __CFArray *)v156;
  if (v156) {
    CFRetain(v156);
  }
  CFArrayRef v64 = (const __CFArray *)v157;
  if (v157) {
    CFRetain(v157);
  }
  memset(cf, 0, 32);
  *(_DWORD *)&cf[32] = 1065353216;
  memset(v171, 0, sizeof(v171));
  LODWORD(v172) = 1065353216;
  memset(v169, 0, sizeof(v169));
  int v170 = 1065353216;
  if (v64)
  {
    CFIndex Count = CFArrayGetCount(v64);
    CFIndex v66 = CFArrayGetCount(v64);
    if (Count)
    {
      CFIndex v67 = v66;
      for (unint64_t i = 0; i != Count; ++i)
      {
        if (v67 == i) {
          break;
        }
        applesauce::CF::details::at_to<applesauce::CF::TypeRef>(&v168, v64, i);
        CFTypeRef v69 = v168;
        if (v168)
        {
          CFTypeID v70 = CFGetTypeID(v168);
          if (v70 == CFStringGetTypeID())
          {
            CFRetain(v69);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v167, v69);
            v165[0] = 0;
            v165[1] = 0;
            HALS_System::GetInstance(&v166, 0, v165);
            if (!v167)
            {
              long long v123 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v123, "Could not construct");
              __cxa_throw(v123, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            uint64_t v71 = v166.__vftable;
            applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)v167);
            v173.__r_.__value_.__r.__words[0] = 0;
            v173.__r_.__value_.__l.__size_ = (std::string::size_type)&v173;
            v173.__r_.__value_.__r.__words[2] = 0x2000000000;
            uint64_t v174 = 0;
            uint64_t valuePtr = (__CFString *)MEMORY[0x1E4F143A8];
            *(void *)&long long v176 = 0x40000000;
            *((void *)&v176 + 1) = ___ZNK11HALS_System20CopyClientByBundleIDERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
            *(void *)&long long v177 = &unk_1E6232D60;
            *((void *)&v177 + 1) = &v173;
            __int16 v178 = (const char *)v71;
            char v179 = __p;
            uint64_t v72 = (HALB_Mutex *)(*((uint64_t (**)(std::logic_error_vtbl *))v71->~logic_error + 7))(v71);
            HALB_CommandGate::ExecuteCommand(v72, (uint64_t)&valuePtr);
            char v73 = *(unsigned int **)(v173.__r_.__value_.__l.__size_ + 24);
            _Block_object_dispose(&v173, 8);
            if (SHIBYTE(v164) < 0) {
              operator delete(__p[0]);
            }
            if (v166.__imp_.__imp_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v166.__imp_.__imp_);
            }
            if (v73)
            {
              std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)cf, v73[4], v73[4]);
              if (!v167)
              {
                int v125 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v125, "Could not construct");
                __cxa_throw(v125, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              applesauce::CF::convert_to<std::string,0>((uint64_t)&valuePtr, (const __CFString *)v167);
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)v171, (unsigned __int8 *)&valuePtr, (uint64_t)&valuePtr);
            }
            else
            {
              if (!v167)
              {
                uint64_t v140 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v140, "Could not construct");
                __cxa_throw(v140, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              applesauce::CF::convert_to<std::string,0>((uint64_t)&valuePtr, (const __CFString *)v167);
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)v169, (unsigned __int8 *)&valuePtr, (uint64_t)&valuePtr);
            }
            if (SHIBYTE(v176) < 0) {
              operator delete(valuePtr);
            }
            HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v73, v74);
            if (v167) {
              CFRelease(v167);
            }
          }
          CFRelease(v69);
        }
      }
    }
  }
  if (v63)
  {
    CFIndex v75 = CFArrayGetCount(v63);
    CFIndex v76 = CFArrayGetCount(v63);
    if (v75)
    {
      CFIndex v77 = v76;
      for (unint64_t j = 0; j != v75; ++j)
      {
        if (v77 == j) {
          break;
        }
        applesauce::CF::details::at_to<applesauce::CF::TypeRef>(&v173, v63, j);
        long long v79 = (const void *)v173.__r_.__value_.__r.__words[0];
        if (v173.__r_.__value_.__r.__words[0])
        {
          CFTypeID v80 = CFGetTypeID(v173.__r_.__value_.__l.__data_);
          if (v80 == CFNumberGetTypeID())
          {
            applesauce::CF::TypeRef::operator applesauce::CF::NumberRef((applesauce::CF::NumberRef *)__p, (CFTypeRef *)&v173.__r_.__value_.__l.__data_);
            if (!__p[0])
            {
              long long v124 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v124, "Could not construct");
              __cxa_throw(v124, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            char v81 = (HALS_ObjectMap *)applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)__p[0]);
            unsigned int v82 = v81;
            uint64_t v83 = HALS_ObjectMap::CopyObjectByObjectID(v81);
            uint64_t v85 = (HALS_ObjectMap *)v83;
            if (v83
              && *(_DWORD *)(v83 + 20) == 1668050548
              && !std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(cf, v82))
            {
              std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)cf, v82, v82);
              HALS_Client::GetBundleIDString((HALS_Client *)&valuePtr, (uint64_t)v85);
              uint64_t v86 = HIBYTE(v176);
              char v87 = HIBYTE(v176);
              if (v176 < 0) {
                uint64_t v86 = v176;
              }
              if (v86)
              {
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v171, (unsigned __int8 *)&valuePtr, (uint64_t)&valuePtr);
                char v87 = HIBYTE(v176);
              }
              if (v87 < 0) {
                operator delete(valuePtr);
              }
            }
            HALS_ObjectMap::ReleaseObject(v85, v84);
            if (__p[0]) {
              CFRelease(__p[0]);
            }
          }
          CFRelease(v79);
        }
      }
    }
  }
  if ((unsigned char *)(a1 + 88) != cf)
  {
    *(_DWORD *)(a1 + 120) = *(_DWORD *)&cf[32];
    int v88 = *(uint64_t ***)&cf[16];
    uint64_t v89 = *(void *)(a1 + 96);
    if (!v89) {
      goto LABEL_146;
    }
    for (uint64_t k = 0; k != v89; *(void *)(*(void *)(a1 + 88) + 8 * k++) = 0)
      ;
    int v91 = *(uint64_t **)(a1 + 104);
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    if (v91)
    {
      while (v88)
      {
        unint64_t v92 = *((unsigned int *)v88 + 4);
        *((_DWORD *)v91 + 4) = v92;
        uint64_t v93 = (uint64_t *)*v91;
        v91[1] = v92;
        BOOL inserted = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_prepare(a1 + 88, v92, (_DWORD *)v91 + 4);
        std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_perform((void *)(a1 + 88), v91, inserted);
        int v88 = (uint64_t **)*v88;
        int v91 = v93;
        if (!v93) {
          goto LABEL_146;
        }
      }
      do
      {
        uint64_t v105 = (uint64_t *)*v91;
        operator delete(v91);
        int v91 = v105;
      }
      while (v105);
    }
    else
    {
LABEL_146:
      while (v88)
      {
        uint64_t v95 = operator new(0x18uLL);
        *(void *)uint64_t v95 = 0;
        unint64_t v96 = *((unsigned int *)v88 + 4);
        v95[4] = v96;
        *((void *)v95 + 1) = v96;
        long long v97 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_prepare(a1 + 88, v96, v95 + 4);
        std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_perform((void *)(a1 + 88), v95, v97);
        int v88 = (uint64_t **)*v88;
      }
    }
  }
  if ((CFTypeRef *)(a1 + 128) != v171)
  {
    *(_DWORD *)(a1 + 160) = v172;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((void *)(a1 + 128), (uint64_t *)v171[2]);
  }
  if ((unsigned char *)(a1 + 168) != v169)
  {
    *(_DWORD *)(a1 + 200) = v170;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((void *)(a1 + 168), *(uint64_t **)&v169[16]);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)&v169[16]);
  char v98 = *(void **)v169;
  *(void *)long long v169 = 0;
  if (v98) {
    operator delete(v98);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v171[2]);
  uint64_t v99 = (void *)v171[0];
  v171[0] = 0;
  if (v99) {
    operator delete(v99);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)cf);
  if (v64) {
    CFRelease(v64);
  }
  if (v63) {
    CFRelease(v63);
  }
  uint64_t v100 = *(void *)(a1 + 248);
  long long v101 = *(_OWORD *)(v100 + 40);
  *(_OWORD *)char v171 = *(_OWORD *)(v100 + 24);
  *(_OWORD *)&v171[2] = v101;
  uint64_t v172 = *(void *)(v100 + 56);
  unsigned int v102 = HIDWORD(v101);
  if ((BYTE4(v171[1]) & 0x20) != 0) {
    int v103 = 1;
  }
  else {
    int v103 = HIDWORD(v101);
  }
  if (LODWORD(v171[1]) != 1819304813 || (BYTE4(v171[1]) & 0x40) != 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v100);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&valuePtr, "com.apple.coreaudio", "AMCP");
    std::logic_error v111 = valuePtr->isa;
    if ((void)v176) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v176);
    }
    if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
    {
      uint64_t v112 = pthread_self();
      mach_port_t v113 = pthread_mach_thread_np(v112);
      LODWORD(valuePtr) = 67109890;
      HIDWORD(valuePtr) = v113;
      LOWORD(v176) = 2080;
      *(void *)((char *)&v176 + 2) = "HALS_Tap.cpp";
      WORD5(v176) = 1024;
      HIDWORD(v176) = 488;
      LOWORD(v177) = 2080;
      *(void *)((char *)&v177 + 2) = "not (format.IsMixable())";
      _os_log_error_impl(&dword_1BAA78000, v111, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&valuePtr, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v165);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v173);
    std::logic_error::logic_error(&v166, &v173);
    v166.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)cf, &v166);
    *(_OWORD *)&cf[24] = 0uLL;
    uint64_t v159 = 0;
    int v160 = -1;
    *(void *)CFTypeRef cf = &unk_1F1489CC8;
    *(void *)&cf[16] = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&valuePtr, (uint64_t)cf);
    *((void *)&v177 + 1) = "BOOL HALS_Tap::_UpdateFromDescription(AMCP::CF::Dictionary, BOOL &, BOOL &)";
    __int16 v178 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Tap.cpp";
    LODWORD(v179) = 488;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)__p);
    *(_OWORD *)&v169[8] = *(_OWORD *)__p;
    *(void *)long long v169 = &unk_1F148AA90;
    *(void *)&v169[24] = v164;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v164 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*(unsigned char *)(a1 + 80))
  {
    unsigned int v104 = 0;
    int v103 = 1;
  }
  else if (*(unsigned char *)(a1 + 82))
  {
    int v103 = 2;
    unsigned int v104 = 1;
  }
  else
  {
    if (!*(void *)(a1 + 232))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v100);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&valuePtr, "com.apple.coreaudio", "AMCP");
      std::logic_error v120 = valuePtr->isa;
      if ((void)v176) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v176);
      }
      if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
      {
        std::string v121 = pthread_self();
        mach_port_t v122 = pthread_mach_thread_np(v121);
        LODWORD(valuePtr) = 67109890;
        HIDWORD(valuePtr) = v122;
        LOWORD(v176) = 2080;
        *(void *)((char *)&v176 + 2) = "HALS_Tap.cpp";
        WORD5(v176) = 1024;
        HIDWORD(v176) = 502;
        LOWORD(v177) = 2080;
        *(void *)((char *)&v177 + 2) = "(mDevice.get()) == nullptr";
        _os_log_error_impl(&dword_1BAA78000, v120, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Missing device for tap.", (uint8_t *)&valuePtr, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v165);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Missing device for tap.", (uint64_t)&v173);
      std::runtime_error::runtime_error((std::runtime_error *)&v166, &v173);
      std::runtime_error::runtime_error((std::runtime_error *)cf, (const std::runtime_error *)&v166);
      *(_OWORD *)&cf[24] = 0uLL;
      uint64_t v159 = 0;
      int v160 = -1;
      *(void *)CFTypeRef cf = &unk_1F148A9A8;
      *(void *)&cf[16] = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&valuePtr, (uint64_t)cf);
      *((void *)&v177 + 1) = "BOOL HALS_Tap::_UpdateFromDescription(AMCP::CF::Dictionary, BOOL &, BOOL &)";
      __int16 v178 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Tap.cpp";
      LODWORD(v179) = 502;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)__p);
      *(_OWORD *)&v169[8] = *(_OWORD *)__p;
      *(void *)long long v169 = &unk_1F148AA90;
      *(void *)&v169[24] = v164;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v164 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    unsigned int v104 = 2;
  }
  if (v104 != *(_DWORD *)(v100 + 64))
  {
    if ((BYTE4(v171[1]) & 0x20) != 0)
    {
      unsigned int v102 = 1;
    }
    else if (!HIDWORD(v101))
    {
      unsigned int v106 = (v172 + 7) >> 3;
LABEL_179:
      HIDWORD(v171[3]) = v103;
      HIDWORD(v171[2]) = 1;
      LODWORD(v171[3]) = v106 * v103;
      LODWORD(v171[2]) = v106 * v103;
      HIDWORD(v171[1]) &= ~0x20u;
      HALS_MultiTap::set_format((HALS_MultiTap *)v100, (long long *)v171, v104 | 0x100000000);
      uint64_t v100 = *(void *)(a1 + 248);
      goto LABEL_180;
    }
    unsigned int v106 = LODWORD(v171[3]) / v102;
    goto LABEL_179;
  }
LABEL_180:
  BOOL v107 = 1;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(v154, *(int32x4_t *)(v100 + 32))), 0xFuLL))) & 1) != 0
    && v152 == *(_DWORD *)(v100 + 48))
  {
    int v108 = v151;
    if (v10 == *(double *)(v100 + 24) && v149 == *(_DWORD *)(v100 + 52)) {
      BOOL v107 = v148 != *(_DWORD *)(v100 + 56);
    }
  }
  else
  {
    int v108 = v151;
  }
  *a3 = v107;
  if ((v155 & 1) == 0
    && v147 == *(unsigned __int8 *)(a1 + 80)
    && v146 == *(unsigned __int8 *)(a1 + 82)
    && v108 == *(unsigned __int8 *)(a1 + 83)
    && v145 == *(_DWORD *)(a1 + 84))
  {
    BOOL v109 = 1;
    if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(v154, *(int32x4_t *)(v100 + 32))), 0xFuLL))) & 1) != 0
      && v152 == *(_DWORD *)(v100 + 48)
      && v10 == *(double *)(v100 + 24)
      && v149 == *(_DWORD *)(v100 + 52))
    {
      BOOL v109 = v148 != *(_DWORD *)(v100 + 56);
    }
  }
  else
  {
    BOOL v109 = 1;
  }
  *char v150 = v108 != *(unsigned __int8 *)(a1 + 83);
  if (v156) {
    CFRelease(v156);
  }
  if (v157) {
    CFRelease(v157);
  }
  if (v162) {
    CFRelease(v162);
  }
  return v109;
}

void sub_1BAC11C34(uint64_t a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, const void *a19, const void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,const void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a64 < 0) {
    operator delete(__p);
  }
  HALS_ObjectMap::ReleaseObject(v64, a2);
  applesauce::CF::NumberRef::~NumberRef((const void **)&a33);
  applesauce::CF::TypeRef::~TypeRef(&a55);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a43);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a49);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&a23);
  applesauce::CF::ArrayRef::~ArrayRef(&a19);
  applesauce::CF::ArrayRef::~ArrayRef(&a20);
  JUMPOUT(0x1BAC12240);
}

void sub_1BAC12030(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
    __cxa_rethrow();
  }
  JUMPOUT(0x1BAC12258);
}

void sub_1BAC1205C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, const void *a19, const void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
}

void sub_1BAC1207C()
{
}

void sub_1BAC12084(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,std::runtime_error a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,char a61)
{
  if (__p)
  {
    a44 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl((uint64_t)&a61);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a39);
  if (a59 < 0) {
    operator delete(a54);
  }
  if (v62) {
    __cxa_free_exception(v61);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a37);
  JUMPOUT(0x1BAC12240);
}

void sub_1BAC120D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
}

void sub_1BAC120DC()
{
  operator delete(v0);
  JUMPOUT(0x1BAC120E8);
}

void sub_1BAC12114(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::runtime_error a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,void *a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (SHIBYTE(a59) < 0) {
    operator delete(a57);
  }
  __cxa_free_exception(v61);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a36);
  JUMPOUT(0x1BAC12240);
}

void sub_1BAC1222C(uint64_t a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  JUMPOUT(0x1BAC12250);
}

void sub_1BAC1223C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,const void *a21,const void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,const void *a32)
{
}

void sub_1BAC12260(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BAC12258);
}

uint64_t applesauce::CF::at_or<applesauce::CF::StringRef,char const(&)[8]>(const __CFString **a1, const __CFDictionary *a2, char *__s, const __CFString **a4)
{
  CFIndex v8 = strlen(__s);
  CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v8, 0x8000100u, 0);
  CFStringRef v14 = v9;
  if (!v9)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a2, v9);
  CFRelease(v9);
  if (!Value) {
    goto LABEL_6;
  }
  CFRetain(Value);
  CFTypeID v11 = CFGetTypeID(Value);
  if (v11 != CFStringGetTypeID())
  {
    CFRelease(Value);
LABEL_6:
    LOBYTE(v14) = 0;
    char v15 = 0;
    *a1 = *a4;
    *a4 = 0;
    return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v14);
  }
  CFStringRef v14 = Value;
  char v15 = 1;
  CFRetain(Value);
  *a1 = Value;
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v14);
}

void sub_1BAC1239C(void *a1)
{
}

uint64_t applesauce::CF::at_or<applesauce::CF::BooleanRef,char const(&)[10]>(void *a1, const __CFDictionary *a2, char *__s, void *a4)
{
  CFDictionaryRef v6 = applesauce::CF::details::at_key<char const(&)[10]>(a2, __s);
  if (!v6) {
    goto LABEL_5;
  }
  unsigned int v7 = v6;
  CFRetain(v6);
  CFTypeID v8 = CFGetTypeID(v7);
  if (v8 != CFBooleanGetTypeID())
  {
    CFRelease(v7);
LABEL_5:
    LOBYTE(v10) = 0;
    char v11 = 0;
    *a1 = *a4;
    *a4 = 0;
    return std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v10);
  }
  double v10 = v7;
  char v11 = 1;
  CFRetain(v7);
  *a1 = v7;
  return std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v10);
}

void HALS_Tap::RemoveDeviceSampleRateListener(HALS_Tap *this, const HALS_Listener *a2, uint64_t a3, unsigned int a4, const AudioObjectPropertyAddress *a5)
{
  uint64_t v8 = 0x676C6F626E737274;
  int v9 = 0;
  v5[0] = 0;
  v5[1] = this;
  long long v6 = 0u;
  long long v7 = 0u;
  HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)v5, a2, &v8, a4, a5);
  HALS_Listener::~HALS_Listener((HALS_Listener *)v5);
}

void sub_1BAC124F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HALS_Listener::~HALS_Listener((HALS_Listener *)va);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::at_or<applesauce::CF::ArrayRef,char const(&)[10]>(void *a1, const __CFDictionary *a2, char *__s, void *a4)
{
  long long v6 = applesauce::CF::details::at_key<char const(&)[10]>(a2, __s);
  if (!v6) {
    goto LABEL_5;
  }
  long long v7 = v6;
  CFRetain(v6);
  CFTypeID v8 = CFGetTypeID(v7);
  if (v8 != CFArrayGetTypeID())
  {
    CFRelease(v7);
LABEL_5:
    LOBYTE(v10) = 0;
    char v11 = 0;
    *a1 = *a4;
    *a4 = 0;
    return std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v10);
  }
  double v10 = v7;
  char v11 = 1;
  CFRetain(v7);
  *a1 = v7;
  return std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v10);
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    int v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unint64_t i = *v9; i; unint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  CFDictionaryRef v12 = operator new(0x18uLL);
  *CFDictionaryRef v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  CFStringRef v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *CFDictionaryRef v12 = *v20;
LABEL_38:
    *CFStringRef v20 = v12;
    goto LABEL_39;
  }
  *CFDictionaryRef v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    CFStringRef v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_1BAC127B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    CFDictionaryRef v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (unint64_t i = *v12; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(i + 16, a2)) {
            return;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  BOOL v15 = operator new(0x28uLL);
  *BOOL v15 = 0;
  v15[1] = v8;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  char v15[4] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + _Block_object_dispose(&a9, 8) = 0;
  *(void *)(a3 + 16) = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  CFDictionaryRef v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *BOOL v15 = *v23;
LABEL_38:
    *CFDictionaryRef v23 = v15;
    goto LABEL_39;
  }
  *BOOL v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    unint64_t v24 = *(void *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    CFDictionaryRef v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_1BAC129F4(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

applesauce::CF::NumberRef *applesauce::CF::TypeRef::operator applesauce::CF::NumberRef(applesauce::CF::NumberRef *a1, CFTypeRef *a2)
{
  if (*a2)
  {
    CFTypeID v4 = CFGetTypeID(*a2);
    if (v4 != CFNumberGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(exception);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFTypeRef v5 = *a2;
    if (v5) {
      CFRetain(v5);
    }
  }
  else
  {
    CFTypeRef v5 = 0;
  }

  return applesauce::CF::NumberRef::NumberRef(a1, v5);
}

void sub_1BAC12AB4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unint64_t i = *v9; i; unint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  CFDictionaryRef v12 = operator new(0x18uLL);
  *CFDictionaryRef v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *CFDictionaryRef v12 = *v20;
LABEL_38:
    *unint64_t v20 = v12;
    goto LABEL_39;
  }
  *CFDictionaryRef v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_1BAC12CC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    CFDictionaryRef v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (unint64_t i = *v12; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(i + 16, a2)) {
            return;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  BOOL v15 = operator new(0x28uLL);
  *BOOL v15 = 0;
  v15[1] = v8;
  unint64_t v16 = (std::string *)(v15 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    char v15[4] = *(void *)(a3 + 16);
  }
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *BOOL v15 = *v24;
LABEL_41:
    *unint64_t v24 = v15;
    goto LABEL_42;
  }
  *BOOL v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    unint64_t v25 = *(void *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
}

void sub_1BAC12F10(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(void *a1, uint64_t *a2)
{
  int v2 = a2;
  uint64_t v4 = a1[1];
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v6 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6) {
      BOOL v7 = a2 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      unint64_t v8 = (void **)v6;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v6 + 16), (const std::string *)(v2 + 2));
        unint64_t v8 = *(void ***)v6;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi((uint64_t)a1, v6);
        int v2 = (uint64_t *)*v2;
        if (v8) {
          BOOL v9 = v2 == 0;
        }
        else {
          BOOL v9 = 1;
        }
        uint64_t v6 = (uint64_t)v8;
      }
      while (!v9);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v8);
  }
  for (; v2; int v2 = (uint64_t *)*v2)
  {
    uint8x8_t v10 = (char *)operator new(0x28uLL);
    uint64_t v11 = (uint64_t)v10;
    CFDictionaryRef v12 = v10 + 16;
    *(void *)uint8x8_t v10 = 0;
    *((void *)v10 + 1) = 0;
    if (*((char *)v2 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v10 + 16), (const std::string::value_type *)v2[2], v2[3]);
    }
    else
    {
      long long v13 = *((_OWORD *)v2 + 1);
      *((void *)v10 + 4) = v2[4];
      *CFDictionaryRef v12 = v13;
    }
    *(void *)(v11 + _Block_object_dispose(&a9, 8) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v12);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi((uint64_t)a1, v11);
  }
}

void sub_1BAC13038(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(void **__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      int v2 = (void **)*v1;
      if (*((char *)v1 + 39) < 0) {
        operator delete(v1[2]);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  int v2 = (void *)a2;
  uint64_t v4 = (unsigned __int8 *)(a2 + 16);
  unint64_t v43 = std::__string_hash<char>::operator()[abi:ne180100](a2 + 16);
  v2[1] = v43;
  unint64_t v5 = *(void *)(a1 + 8);
  float v6 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    BOOL v8 = 1;
    if (v5 >= 3) {
      BOOL v8 = (v5 & (v5 - 1)) != 0;
    }
    unint64_t v9 = v8 | (2 * v5);
    unint64_t v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10) {
      int8x8_t prime = (int8x8_t)v10;
    }
    else {
      int8x8_t prime = (int8x8_t)v9;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v5 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v5) {
      goto LABEL_99;
    }
    if (*(void *)&prime >= v5) {
      goto LABEL_60;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v5)
    {
      unint64_t v5 = *(void *)(a1 + 8);
      goto LABEL_60;
    }
    if (prime)
    {
LABEL_99:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      CFDictionaryRef v12 = operator new(8 * *(void *)&prime);
      long long v13 = *(void **)a1;
      *(void *)a1 = v12;
      if (v13) {
        operator delete(v13);
      }
      CFStringRef v41 = v4;
      uint64_t v14 = 0;
      *(int8x8_t *)(a1 + _Block_object_dispose(&a9, 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v14++) = 0;
      while (*(void *)&prime != v14);
      BOOL v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        unint64_t v16 = v15[1];
        uint8x8_t v17 = (uint8x8_t)vcnt_s8(prime);
        v17.i16[0] = vaddlv_u8(v17);
        unint64_t v18 = v17.u32[0];
        int v40 = v2;
        if (v17.u32[0] > 1uLL)
        {
          if (v16 >= *(void *)&prime) {
            v16 %= *(void *)&prime;
          }
        }
        else
        {
          v16 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v16) = a1 + 16;
        uint64_t v22 = *v15;
        if (*v15)
        {
          unint64_t v42 = v17.u32[0];
          do
          {
            unint64_t v23 = *(void *)(v22 + 8);
            if (v18 > 1)
            {
              if (v23 >= *(void *)&prime) {
                v23 %= *(void *)&prime;
              }
            }
            else
            {
              v23 &= *(void *)&prime - 1;
            }
            if (v23 == v16)
            {
              BOOL v15 = (uint64_t *)v22;
            }
            else if (*(void *)(*(void *)a1 + 8 * v23))
            {
              unint64_t v24 = *(void **)v22;
              if (*(void *)v22)
              {
                unint64_t v25 = (void *)v22;
                while (1)
                {
                  CFStringRef v26 = v24;
                  if (!std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((unsigned __int8 *)(v22 + 16), (unsigned __int8 *)v24 + 16))break; {
                  unint64_t v24 = (void *)*v26;
                  }
                  unint64_t v25 = v26;
                  if (!*v26) {
                    goto LABEL_47;
                  }
                }
                unint64_t v24 = v26;
                CFStringRef v26 = v25;
LABEL_47:
                unint64_t v18 = v42;
              }
              else
              {
                CFStringRef v26 = (void *)v22;
              }
              *BOOL v15 = (uint64_t)v24;
              *CFStringRef v26 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = v22;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v15;
              BOOL v15 = (uint64_t *)v22;
              unint64_t v16 = v23;
            }
            uint64_t v22 = *v15;
          }
          while (*v15);
        }
        unint64_t v5 = (unint64_t)prime;
        int v2 = v40;
        uint64_t v4 = v41;
      }
      else
      {
        unint64_t v5 = (unint64_t)prime;
        uint64_t v4 = v41;
      }
    }
    else
    {
      CFNumberRef v27 = *(void **)a1;
      *(void *)a1 = 0;
      if (v27) {
        operator delete(v27);
      }
      unint64_t v5 = 0;
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = 0;
    }
  }
LABEL_60:
  uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v28.i16[0] = vaddlv_u8(v28);
  unint64_t v29 = v28.u32[0];
  if (v28.u32[0] > 1uLL)
  {
    unint64_t v30 = v43;
    if (v5 <= v43) {
      unint64_t v30 = v43 % v5;
    }
  }
  else
  {
    unint64_t v30 = (v5 - 1) & v43;
  }
  int v31 = *(unsigned __int8 **)(*(void *)a1 + 8 * v30);
  if (v31)
  {
    CFDictionaryRef v32 = *(unsigned __int8 **)v31;
    if (*(void *)v31)
    {
      int v33 = 0;
      do
      {
        int v34 = v32;
        unint64_t v35 = *((void *)v32 + 1);
        if (v29 > 1)
        {
          unint64_t v36 = v35;
          if (v35 >= v5) {
            unint64_t v36 = v35 % v5;
          }
        }
        else
        {
          unint64_t v36 = v35 & (v5 - 1);
        }
        if (v36 != v30) {
          break;
        }
        BOOL v37 = v35 == v43 && std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v34 + 16, v4);
        if (v33 & !v37) {
          break;
        }
        v33 |= v37;
        CFDictionaryRef v32 = *(unsigned __int8 **)v34;
        int v31 = v34;
      }
      while (*(void *)v34);
    }
  }
  unint64_t v38 = v2[1];
  if (v29 > 1)
  {
    if (v38 >= v5) {
      v38 %= v5;
    }
  }
  else
  {
    v38 &= v5 - 1;
  }
  if (!v31)
  {
    void *v2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v2;
    *(void *)(*(void *)a1 + 8 * v3_Block_object_dispose(&a9, 8) = a1 + 16;
    if (!*v2) {
      goto LABEL_95;
    }
    unint64_t v39 = *(void *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5) {
        v39 %= v5;
      }
    }
    else
    {
      v39 &= v5 - 1;
    }
LABEL_94:
    *(void *)(*(void *)a1 + 8 * v39) = v2;
    goto LABEL_95;
  }
  void *v2 = *(void *)v31;
  *(void *)int v31 = v2;
  if (*v2)
  {
    unint64_t v39 = *(void *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5) {
        v39 %= v5;
      }
    }
    else
    {
      v39 &= v5 - 1;
    }
    if (v39 != v38) {
      goto LABEL_94;
    }
  }
LABEL_95:
  ++*(void *)(a1 + 24);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

const void *applesauce::CF::details::at_key<char const(&)[10]>(const __CFDictionary *a1, char *__s)
{
  CFIndex v5 = strlen(__s);
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v5, 0x8000100u, 0);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (a1) {
    CFStringRef Value = CFDictionaryGetValue(a1, v6);
  }
  CFRelease(v6);
  if (!a1) {
    return 0;
  }
  return Value;
}

void sub_1BAC136D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

const void *applesauce::CF::details::at_key<char const(&)[7]>(const __CFDictionary *a1, char *__s)
{
  CFIndex v5 = strlen(__s);
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v5, 0x8000100u, 0);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (a1) {
    CFStringRef Value = CFDictionaryGetValue(a1, v6);
  }
  CFRelease(v6);
  if (!a1) {
    return 0;
  }
  return Value;
}

void sub_1BAC137DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void HALS_Tap::GetPropertyData(HALS_Tap *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, void *a6, unsigned int a7, const void *a8, HALS_Client *a9)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1952869747)
  {
    if (mSelector == 1952869748)
    {
      if (a4 <= 0x27)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Tap.cpp";
          __int16 v23 = 1024;
          int v24 = 169;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Client::GetPropertyData: bad property data size for kAudioTapPropertyFormat", buf, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = off_1F148A5D8;
        exception[2] = 561211770;
      }
      uint64_t v14 = *((void *)this + 31);
      long long v15 = *(_OWORD *)(v14 + 24);
      long long v16 = *(_OWORD *)(v14 + 40);
      a6[4] = *(void *)(v14 + 56);
      *(_OWORD *)a6 = v15;
      *((_OWORD *)a6 + 1) = v16;
      unsigned int v13 = 40;
      goto LABEL_19;
    }
    if (mSelector != 1953851748) {
      goto LABEL_10;
    }
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_Tap.cpp";
        __int16 v23 = 1024;
        int v24 = 150;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Client::GetPropertyData: bad property data size for kAudioTapPropertyUID", buf, 0x12u);
      }
      unint64_t v18 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v18 = off_1F148A5D8;
      v18[2] = 561211770;
    }
    HALS_Tap::GetUID(buf, *((const void **)this + 8));
LABEL_15:
    *a6 = *(void *)buf;
LABEL_16:
    unsigned int v13 = 8;
LABEL_19:
    *a5 = v13;
    return;
  }
  if (mSelector == 1819173229)
  {
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_Tap.cpp";
        __int16 v23 = 1024;
        int v24 = 143;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Client::GetPropertyData: bad property data size for kAudioObjectPropertyName", buf, 0x12u);
      }
      unint64_t v19 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v19 = off_1F148A5D8;
      _OWORD v19[2] = 561211770;
    }
    HALS_Tap::GetName(buf, *((const void **)this + 7));
    goto LABEL_15;
  }
  if (mSelector == 1952740195)
  {
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_Tap.cpp";
        __int16 v23 = 1024;
        int v24 = 157;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioTapPropertyDescription", buf, 0x12u);
      }
      uint8x8_t v17 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint8x8_t v17 = off_1F148A5D8;
      _OWORD v17[2] = 561211770;
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 0x40000000;
    uint64_t v21[2] = ___ZNK8HALS_Tap15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
    v21[3] = &__block_descriptor_tmp_3773;
    v21[4] = this;
    void v21[5] = a6;
    CFDictionaryRef v12 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Tap *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v12, (uint64_t)v21);
    goto LABEL_16;
  }
LABEL_10:

  HALS_Object::GetPropertyData((uint64_t)this, a2, (int *)a3, a4, (int *)a5, a6);
}

void ___ZNK8HALS_Tap15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  CFArrayRef v63 = Mutable;
  if (*(void *)(v2 + 56))
  {
    CFStringRef v4 = CFStringCreateWithBytes(0, (const UInt8 *)"TapName", 7, 0x8000100u, 0);
    if (!v4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(Mutable, v4, *(const void **)(v2 + 56));
    CFRelease(v4);
  }
  CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)"TapUUID", 7, 0x8000100u, 0);
  if (!v5)
  {
    unsigned int v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v45, "Could not construct");
    __cxa_throw(v45, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(Mutable, v5, *(const void **)(v2 + 64));
  CFRelease(v5);
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)"IsMono", 6, 0x8000100u, 0);
  if (!v6)
  {
    uint64_t v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v46, "Could not construct");
    __cxa_throw(v46, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  float v7 = (const void *)*MEMORY[0x1E4F1CFD8];
  BOOL v8 = (const void *)*MEMORY[0x1E4F1CFC0];
  if (*(unsigned char *)(v2 + 80)) {
    unint64_t v9 = (const void *)*MEMORY[0x1E4F1CFD8];
  }
  else {
    unint64_t v9 = (const void *)*MEMORY[0x1E4F1CFC0];
  }
  mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::BooleanRef>(Mutable, v6, v9);
  if (v9) {
    CFRelease(v9);
  }
  CFRelease(v6);
  CFStringRef v10 = CFStringCreateWithBytes(0, (const UInt8 *)"IsExclusive", 11, 0x8000100u, 0);
  if (!v10)
  {
    uint64_t v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v47, "Could not construct");
    __cxa_throw(v47, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(unsigned char *)(v2 + 81)) {
    uint64_t v11 = v7;
  }
  else {
    uint64_t v11 = v8;
  }
  mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::BooleanRef>(Mutable, v10, v11);
  if (v11) {
    CFRelease(v11);
  }
  CFRelease(v10);
  CFStringRef v12 = CFStringCreateWithBytes(0, (const UInt8 *)"IsMixdown", 9, 0x8000100u, 0);
  if (!v12)
  {
    unsigned int v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v48, "Could not construct");
    __cxa_throw(v48, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(unsigned char *)(v2 + 82)) {
    unsigned int v13 = v7;
  }
  else {
    unsigned int v13 = v8;
  }
  mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::BooleanRef>(Mutable, v12, v13);
  if (v13) {
    CFRelease(v13);
  }
  CFRelease(v12);
  CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)"IsPrivate", 9, 0x8000100u, 0);
  if (!v14)
  {
    int v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v49, "Could not construct");
    __cxa_throw(v49, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(unsigned char *)(v2 + 83)) {
    long long v15 = v7;
  }
  else {
    long long v15 = v8;
  }
  mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::BooleanRef>(Mutable, v14, v15);
  if (v15) {
    CFRelease(v15);
  }
  CFRelease(v14);
  CFStringRef v16 = CFStringCreateWithBytes(0, (const UInt8 *)"MuteBehavior", 12, 0x8000100u, 0);
  v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  if (!v16)
  {
    unsigned __int8 v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v50, "Could not construct");
    __cxa_throw(v50, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  LODWORD(valuePtr[0]) = *(_DWORD *)(v2 + 84);
  CFNumberRef v17 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
  if (!v17)
  {
    int v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v51, "Could not construct");
    __cxa_throw(v51, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v16, v17);
  CFRelease(v17);
  CFRelease(v16);
  if (*(void *)(v2 + 232))
  {
    valuePtr[0] = 0;
    valuePtr[1] = 0;
    HALS_System::GetInstance(&v60, 0, valuePtr);
    unint64_t v19 = HALS_System::CopyDeviceByObjectID((HALS_System *)v60.__r_.__value_.__l.__data_, **(_DWORD **)(v2 + 232), 0);
    if (v60.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v60.__r_.__value_.__l.__size_);
    }
    if (v19)
    {
      CFStringRef v20 = CFStringCreateWithBytes(0, (const UInt8 *)"Stream", 6, 0x8000100u, 0);
      v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
      if (!v20)
      {
        uint64_t v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v55, "Could not construct");
        __cxa_throw(v55, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(cf) = *(_DWORD *)(*(void *)(v2 + 232) + 4);
      CFNumberRef v21 = CFNumberCreate(0, kCFNumberIntType, &cf);
      if (!v21)
      {
        uint64_t v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v56, "Could not construct");
        __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v20, v21);
      CFRelease(v21);
      CFRelease(v20);
      CFStringRef v22 = CFStringCreateWithBytes(0, (const UInt8 *)"DeviceUID", 9, 0x8000100u, 0);
      v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
      if (!v22)
      {
        long long v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v57, "Could not construct");
        __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      __int16 v23 = (const void *)(*(uint64_t (**)(HALS_ObjectMap *))(*(void *)v19 + 208))(v19);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v23);
      mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(Mutable, v22, cf);
      if (cf) {
        CFRelease(cf);
      }
      CFRelease(v22);
    }
    HALS_ObjectMap::ReleaseObject(v19, v18);
  }
  CFMutableArrayRef v24 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  CFTypeRef cf = v24;
  for (uint64_t i = *(uint64_t **)(v2 + 144); i; uint64_t i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0) {
      std::string::__init_copy_ctor_external(&v60, (const std::string::value_type *)i[2], i[3]);
    }
    else {
      std::string v60 = *(std::string *)(i + 2);
    }
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFStringRef v26 = &v60;
    }
    else {
      CFStringRef v26 = (std::string *)v60.__r_.__value_.__r.__words[0];
    }
    if (v26)
    {
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFIndex size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      }
      else {
        CFIndex size = v60.__r_.__value_.__l.__size_;
      }
      CFStringRef v28 = CFStringCreateWithBytes(0, (const UInt8 *)v26, size, 0x8000100u, 0);
      if (!v28)
      {
        unint64_t v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v43, "Could not construct");
        __cxa_throw(v43, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::StringRef>(v24, v28);
      CFRelease(v28);
    }
    else
    {
      mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::StringRef>(v24, 0);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
  }
  for (unint64_t j = *(uint64_t **)(v2 + 184); j; unint64_t j = (uint64_t *)*j)
  {
    if (*((char *)j + 39) < 0) {
      std::string::__init_copy_ctor_external(&v60, (const std::string::value_type *)j[2], j[3]);
    }
    else {
      std::string v60 = *(std::string *)(j + 2);
    }
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v30 = &v60;
    }
    else {
      unint64_t v30 = (std::string *)v60.__r_.__value_.__r.__words[0];
    }
    if (v30)
    {
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFIndex v31 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      }
      else {
        CFIndex v31 = v60.__r_.__value_.__l.__size_;
      }
      CFStringRef v32 = CFStringCreateWithBytes(0, (const UInt8 *)v30, v31, 0x8000100u, 0);
      if (!v32)
      {
        uint64_t v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v44, "Could not construct");
        __cxa_throw(v44, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::StringRef>(v24, v32);
      CFRelease(v32);
    }
    else
    {
      mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::StringRef>(v24, 0);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
  }
  CFStringRef v33 = CFStringCreateWithBytes(0, (const UInt8 *)"BundleIDs", 9, 0x8000100u, 0);
  if (!v33)
  {
    int v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v52, "Could not construct");
    __cxa_throw(v52, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&v60, v24);
  int v34 = v63;
  mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(v63, v33, v60.__r_.__value_.__l.__data_);
  if (v60.__r_.__value_.__r.__words[0]) {
    CFRelease(v60.__r_.__value_.__l.__data_);
  }
  CFRelease(v33);
  unint64_t v35 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
  unint64_t v36 = (uint64_t *)(v2 + 104);
  while (1)
  {
    unint64_t v36 = (uint64_t *)*v36;
    if (!v36) {
      break;
    }
    unsigned int v37 = *((_DWORD *)v36 + 4);
    unint64_t v39 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)v37);
    if (v39)
    {
      LODWORD(v59) = v37;
      CFNumberRef v40 = CFNumberCreate(0, kCFNumberIntType, &v59);
      if (!v40)
      {
        unint64_t v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v42, "Could not construct");
        __cxa_throw(v42, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(v35, v40);
      CFRelease(v40);
    }
    HALS_ObjectMap::ReleaseObject(v39, v38);
  }
  CFStringRef v41 = CFStringCreateWithBytes(0, (const UInt8 *)"Processes", 9, 0x8000100u, 0);
  if (!v41)
  {
    int v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v53, "Could not construct");
    __cxa_throw(v53, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&v59, v35);
  mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(v34, v41, v59);
  if (v59) {
    CFRelease(v59);
  }
  CFRelease(v41);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v58, v34);
  if (v35) {
    CFRelease(v35);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v34) {
    CFRelease(v34);
  }
  **(void **)(a1 + 40) = CFRetain(v58);
  if (v58) {
    CFRelease(v58);
  }
}

void sub_1BAC14790(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,const void *a21)
{
  HALS_ObjectMap::ReleaseObject(v21, a2);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder(&a21);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAC143B4);
}

void mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::BooleanRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1) {
    CFDictionaryAddValue(a1, a2, a3);
  }
}

void mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1) {
    CFDictionaryAddValue(a1, a2, a3);
  }
}

void mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1) {
    CFDictionaryAddValue(a1, a2, a3);
  }
}

uint64_t HALS_Tap::GetPropertyDataSize(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *a3;
  uint64_t result = 8;
  if (*a3 > 1952869747)
  {
    if (v3 != 1953851748)
    {
      if (v3 == 1952869748) {
        return 40;
      }
      return HALS_Object::GetPropertyDataSize(8, a2, a3);
    }
  }
  else if (v3 != 1819173229 && v3 != 1952740195)
  {
    return HALS_Object::GetPropertyDataSize(8, a2, a3);
  }
  return result;
}

uint64_t HALS_Tap::IsPropertySettable(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *a3;
  if (*a3 > 1952869747)
  {
    if (v3 == 1952869748 || v3 == 1953851748) {
      return 0;
    }
  }
  else if (v3 == 1819173229 || v3 == 1952740195)
  {
    return 1;
  }
  return HALS_Object::IsPropertySettable(a1, a2, a3);
}

uint64_t HALS_Tap::HasProperty(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *a3;
  uint64_t result = 1;
  if (*a3 <= 1870098019)
  {
    if (v3 > 1819173228)
    {
      BOOL v5 = v3 == 1819173229;
      int v6 = 1869638759;
    }
    else
    {
      BOOL v5 = v3 == 1650682995;
      int v6 = 1668047219;
    }
  }
  else if (v3 <= 1952740194)
  {
    BOOL v5 = v3 == 1870098020;
    int v6 = 1937007734;
  }
  else
  {
    BOOL v5 = v3 == 1952740195 || v3 == 1952869748;
    int v6 = 1953851748;
  }
  if (!v5 && v3 != v6) {
    return 0;
  }
  return result;
}

uint64_t HALS_Tap::GetCommandGate(HALS_Tap *this)
{
  return *((void *)this + 9);
}

{
  return *((void *)this + 9);
}

void HALS_Tap::~HALS_Tap(HALB_Mutex **this)
{
  HALS_Tap::~HALS_Tap(this);

  JUMPOUT(0x1C1859840);
}

{
  HALB_Mutex **v2;
  std::__shared_weak_count *v3;
  HALB_Mutex *v4;
  HALB_Mutex *v5;
  HALB_Mutex *v6;
  HALB_Mutex *v7;
  uint64_t vars8;

  *this = (HALB_Mutex *)&unk_1F1465440;
  uint64_t v2 = this + 9;
  std::unique_ptr<HALB_CommandGate>::reset[abi:ne180100](this + 9, 0);
  int v3 = (std::__shared_weak_count *)this[32];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  CFStringRef v4 = this[29];
  this[29] = 0;
  if (v4) {
    MEMORY[0x1C1859840](v4, 0x1000C4000313F17);
  }
  BOOL v5 = this[26];
  if (v5)
  {
    this[27] = v5;
    operator delete(v5);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 21));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 16));
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)(this + 11));
  std::unique_ptr<HALB_CommandGate>::reset[abi:ne180100](v2, 0);
  int v6 = this[8];
  if (v6) {
    CFRelease(v6);
  }
  float v7 = this[7];
  if (v7) {
    CFRelease(v7);
  }

  HALS_Object::~HALS_Object((HALS_Object *)this);
}

void HALS_Tap::Deactivate(HALS_Tap *this)
{
  uint64_t v3 = *((void *)this + 31);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(unsigned char *)(v3 + 464))
  {
    std::__function::__value_func<void ()(HALS_MultiTap::Reader_Action_State)>::~__value_func[abi:ne180100]((void *)(v3 + 432));
    *(unsigned char *)(v3 + 464) = 0;
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v11 = 0;
  CFStringRef v12 = 0;
  uint64_t v13 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v11, *((const void **)this + 26), *((void *)this + 27), (uint64_t)(*((void *)this + 27) - *((void *)this + 26)) >> 2);
  CFStringRef v4 = v11;
  BOOL v5 = v12;
  if (v11 != v12)
  {
    int v6 = v11;
    do
    {
      HALS_Tap::SetClientMuteState(this, (HALS_ObjectMap *)LODWORD(v6->__vftable), 0);
      int v6 = (std::__shared_weak_count *)((char *)v6 + 4);
    }
    while (v6 != v5);
  }
  if (v4) {
    operator delete(v4);
  }
  v10[0] = 0;
  v10[1] = 0;
  HALS_System::GetInstance(&v11, 0, v10);
  uint64_t v7 = (uint64_t)v11;
  BOOL v8 = (std::__shared_weak_count *)*((void *)this + 32);
  v9[0] = *((void *)this + 31);
  v9[1] = (uint64_t)v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  HALS_System::RemoveTapFromAllContexts(v7, v9);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  HALS_Object::Deactivate(this);
  atomic_fetch_add(&HALS_Tap::gPendingTapDelete, 0xFFFFFFFFFFFFFFFFLL);
}

void sub_1BAC14E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<HALS_MultiTap>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = (HALS_ObjectMap *)*(unsigned int *)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = HALS_ObjectMap::CopyObjectByObjectID(v2);
    CFStringRef v4 = (HALS_ObjectMap *)v3;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    HALS_ObjectMap::ObjectIsDead((HALS_ObjectMap *)*(unsigned int *)(a1 + 40));
    *(_DWORD *)(a1 + 40) = 0;
    HALS_ObjectMap::ReleaseObject(v4, v5);
  }
  int v6 = *(std::__shared_weak_count **)(a1 + 568);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = *(void *)(a1 + 552);
  *(void *)(a1 + 552) = 0;
  if (v7) {
    std::default_delete<AMCP::DAL::Container>::operator()[abi:ne180100](v7);
  }
  uint64_t v8 = *(void *)(a1 + 544);
  *(void *)(a1 + 544) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(a1 + 496);
  if (*(unsigned char *)(a1 + 488)) {
    std::__function::__value_func<void ()(HALS_MultiTap::Reader_Action_State)>::~__value_func[abi:ne180100]((void *)(a1 + 456));
  }
  unint64_t v9 = *(void **)(a1 + 408);
  if (v9)
  {
    do
    {
      CFStringRef v10 = (void *)*v9;
      uint64_t v11 = (std::__shared_weak_count *)v9[4];
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      operator delete(v9);
      unint64_t v9 = v10;
    }
    while (v10);
  }
  CFStringRef v12 = *(void **)(a1 + 392);
  *(void *)(a1 + 392) = 0;
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = *(void *)(a1 + 352);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 360);
    long long v15 = *(void **)(a1 + 352);
    if (v14 != v13)
    {
      do
      {
        CFStringRef v16 = *(std::__shared_weak_count **)(v14 - 8);
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        v14 -= 16;
      }
      while (v14 != v13);
      long long v15 = *(void **)(a1 + 352);
    }
    *(void *)(a1 + 360) = v13;
    operator delete(v15);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 288));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 240));
  std::mutex::~mutex((std::mutex *)(a1 + 176));
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(a1 + 104);
  CFNumberRef v17 = *(std::__shared_weak_count **)(a1 + 32);
  if (v17)
  {
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_1BAC14FF0(void *a1)
{
}

void std::__shared_ptr_emplace<HALS_MultiTap>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1465560;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_MultiTap>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1465560;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::erase(void *a1, void **a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  CFStringRef v4 = *a2;
  unint64_t v3 = (unint64_t)a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  int v6 = *(void ***)(*a1 + 8 * v3);
  do
  {
    uint64_t v7 = v6;
    int v6 = (void **)*v6;
  }
  while (v6 != a2);
  if (v7 != a1 + 2)
  {
    unint64_t v8 = (unint64_t)v7[1];
    if (v5.u32[0] > 1uLL)
    {
      if (v8 >= *(void *)&v2) {
        v8 %= *(void *)&v2;
      }
    }
    else
    {
      v8 &= *(void *)&v2 - 1;
    }
    unint64_t v9 = *a2;
    if (v8 == v3)
    {
LABEL_20:
      if (!v9) {
        goto LABEL_27;
      }
      goto LABEL_21;
    }
  }
  if (!v4) {
    goto LABEL_19;
  }
  unint64_t v10 = v4[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v10 >= *(void *)&v2) {
      v10 %= *(void *)&v2;
    }
  }
  else
  {
    v10 &= *(void *)&v2 - 1;
  }
  unint64_t v9 = *a2;
  if (v10 != v3)
  {
LABEL_19:
    *(void *)(*a1 + 8 * v3) = 0;
    unint64_t v9 = *a2;
    goto LABEL_20;
  }
LABEL_21:
  unint64_t v11 = v9[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v11 >= *(void *)&v2) {
      v11 %= *(void *)&v2;
    }
  }
  else
  {
    v11 &= *(void *)&v2 - 1;
  }
  if (v11 != v3)
  {
    *(void *)(*a1 + 8 * v11) = v7;
    unint64_t v9 = *a2;
  }
LABEL_27:
  *uint64_t v7 = v9;
  *a2 = 0;
  --a1[3];
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](1, a2);
  return v4;
}

__int32 *___ZN8HALS_Tap16HandleClientExitEj_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned __int32 v3 = *(_DWORD *)(a1 + 40);
  if (std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)(v2 + 88), v3))
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__erase_unique<unsigned int>((void *)(v2 + 88), v3);
    v17[0] = 0;
    v17[1] = 0;
    HALS_System::GetInstance(&__p, 0, v17);
    uint8x8_t v5 = (HALS_ObjectMap *)HALS_System::CopyClientByObjectID((HALS_System *)__p, *(_DWORD *)(a1 + 40));
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    if (v5)
    {
      HALS_Client::GetBundleIDString((HALS_Client *)&__p, (uint64_t)v5);
      unint64_t v6 = v16;
      unsigned __int8 v7 = v16;
      if ((v16 & 0x80u) != 0) {
        unint64_t v6 = (unint64_t)v15;
      }
      if (v6)
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v2 + 168, (unsigned __int8 *)&__p, (uint64_t)&__p);
        unint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>((void *)(v2 + 128), (unsigned __int8 *)&__p);
        if (v8) {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::erase((void *)(v2 + 128), (void **)v8);
        }
        unsigned __int8 v7 = v16;
      }
      if ((v7 & 0x80) != 0) {
        operator delete(__p);
      }
    }
    HALS_ObjectMap::ReleaseObject(v5, v4);
    unsigned __int32 v3 = *(_DWORD *)(a1 + 40);
  }
  unint64_t v9 = *(__int32 **)(v2 + 216);
  uint64_t result = wmemchr(*(__int32 **)(v2 + 208), v3, ((uint64_t)v9 - *(void *)(v2 + 208)) >> 2);
  if (result) {
    unint64_t v11 = result;
  }
  else {
    unint64_t v11 = v9;
  }
  CFStringRef v12 = v11 + 1;
  if (v11 != v9 && v12 != v9)
  {
    do
    {
      if (*v12 != *(_DWORD *)(a1 + 40)) {
        *v11++ = *v12;
      }
      ++v12;
    }
    while (v12 != v9);
  }
  if (*(__int32 **)(v2 + 216) != v11) {
    *(void *)(v2 + 216) = v11;
  }
  return result;
}

void sub_1BAC15348(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  HALS_ObjectMap::ReleaseObject(v15, a2);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__erase_unique<unsigned int>(void *a1, unsigned int a2)
{
  unsigned __int32 v3 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(a1, a2);
  if (v3)
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(a1, v3);
  }
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(void *a1, void *__p)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  unint64_t v3 = __p[1];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  uint8x8_t v5 = *(void **)(*a1 + 8 * v3);
  do
  {
    unint64_t v6 = v5;
    uint8x8_t v5 = (void *)*v5;
  }
  while (v5 != __p);
  if (v6 == a1 + 2) {
    goto LABEL_18;
  }
  unint64_t v7 = v6[1];
  if (v4.u32[0] > 1uLL)
  {
    if (v7 >= *(void *)&v2) {
      v7 %= *(void *)&v2;
    }
  }
  else
  {
    v7 &= *(void *)&v2 - 1;
  }
  if (v7 != v3)
  {
LABEL_18:
    if (!*__p) {
      goto LABEL_19;
    }
    unint64_t v8 = *(void *)(*__p + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v8 >= *(void *)&v2) {
        v8 %= *(void *)&v2;
      }
    }
    else
    {
      v8 &= *(void *)&v2 - 1;
    }
    if (v8 != v3) {
LABEL_19:
    }
      *(void *)(*a1 + 8 * v3) = 0;
  }
  uint64_t v9 = *__p;
  if (*__p)
  {
    unint64_t v10 = *(void *)(v9 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v2) {
        v10 %= *(void *)&v2;
      }
    }
    else
    {
      v10 &= *(void *)&v2 - 1;
    }
    if (v10 != v3)
    {
      *(void *)(*a1 + 8 * v10) = v6;
      uint64_t v9 = *__p;
    }
  }
  *unint64_t v6 = v9;
  void *__p = 0;
  --a1[3];
  operator delete(__p);
}

void AMCP::IO_Core::Device_Node_Factory::~Device_Node_Factory(AMCP::IO_Core::Device_Node_Factory *this)
{
  int8x8_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

unint64_t AMCP::Core::Core::get_simple_required_property<1935894638u>(AMCP::Core::Core *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  strcpy(buf, "nhcsbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  unint64_t result = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int8x8_t v2 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      unint64_t v3 = pthread_self();
      mach_port_t v4 = pthread_mach_thread_np(v3);
      char v6 = 4;
      strcpy((char *)__p, "schn");
      *(_DWORD *)int buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v4;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      __int16 v8 = 1024;
      int v9 = 391;
      __int16 v10 = 2080;
      unint64_t v11 = "optional_value.operator BOOL() == true";
      __int16 v12 = 2080;
      uint64_t v13 = __p;
      __int16 v14 = 1024;
      int v15 = 1735159650;
      __int16 v16 = 1024;
      int v17 = 0;
      _os_log_error_impl(&dword_1BAA78000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  return result;
}

void sub_1BAC156BC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

unint64_t AMCP::Core::Core::get_simple_required_property<1935960434u>(AMCP::Core::Core *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  strcpy(buf, "ridsbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  unint64_t result = AMCP::Core::Core::get_typed_property_value<AMCP::Direction,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int8x8_t v2 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      unint64_t v3 = pthread_self();
      mach_port_t v4 = pthread_mach_thread_np(v3);
      char v6 = 4;
      strcpy((char *)__p, "sdir");
      *(_DWORD *)int buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v4;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      __int16 v8 = 1024;
      int v9 = 391;
      __int16 v10 = 2080;
      unint64_t v11 = "optional_value.operator BOOL() == true";
      __int16 v12 = 2080;
      uint64_t v13 = __p;
      __int16 v14 = 1024;
      int v15 = 1735159650;
      __int16 v16 = 1024;
      int v17 = 0;
      _os_log_error_impl(&dword_1BAA78000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  return result;
}

void sub_1BAC15838(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AMCP::IO_Core::Device_Node_Factory::clock_uid_and_node_description_from_device_and_direction(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  core = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v28, v7, a3);
  if (!v28)
  {
    AMCP::Log::Scope_Registry::get(core);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v11 = **(NSObject ***)buf;
    if ((void)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v31);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      __int16 v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)int buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v13;
      LOWORD(v31) = 2080;
      *(void *)((char *)&v31 + 2) = "Device_Node_Factory.cpp";
      WORD5(v31) = 1024;
      HIDWORD(v31) = 68;
      LOWORD(v32) = 2080;
      *(void *)((char *)&v32 + 2) = "not (device_core != nullptr)";
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    CFStringRef v22 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *((void *)&v32 + 1) = "std::pair<std::string, Node_Description> AMCP::IO_Core::Device_Node_Factory::clock_uid_and_n"
                            "ode_description_from_device_and_direction(AMCP::Object_ID, AMCP::Direction)";
    *(void *)&long long v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Node_Factory.cpp";
    DWORD2(v33) = 68;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    *(_OWORD *)&__p[1] = v16;
    __p[3] = v17;
    long long v16 = 0uLL;
    int v17 = 0;
    __p[0] = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  AMCP::Core::Core::get_simple_required_property<1969841184u>(&v19, v28);
  AMCP::create_device_node_uid_from_device_uid_and_direction((const __CFString **)&v19, a4, (void **)&v21.__vftable);
  if (SHIBYTE(v22) < 0)
  {
    std::string::__init_copy_ctor_external(&v15, (const std::string::value_type *)v21.__vftable, (std::string::size_type)v21.__imp_.__imp_);
  }
  else
  {
    *(std::logic_error *)&v15.__r_.__value_.__l.__data_ = v21;
    v15.__r_.__value_.__r.__words[2] = (std::string::size_type)v22;
  }
  *(_DWORD *)int buf = 3;
  long long v31 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
  *(void *)&long long v32 = *((void *)&v15.__r_.__value_.__l + 2);
  memset(&v15, 0, sizeof(v15));
  long long v34 = 0u;
  long long v33 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  int v9 = (const void *)v19.__r_.__value_.__r.__words[0];
  *((void *)&v32 + 1) = 0x100000001;
  DWORD2(v34) = 2;
  if (!v19.__r_.__value_.__r.__words[0])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)v19.__r_.__value_.__l.__data_);
  *(_OWORD *)a1 = *(_OWORD *)__p;
  *(void **)(a1 + 16) = __p[2];
  memset(__p, 0, 24);
  AMCP::Node_Description::Node_Description((AMCP::Node_Description *)(a1 + 24), (const AMCP::Node_Description *)buf);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  for (uint64_t i = 96; i != 48; i -= 24)
  {
    __p[0] = &buf[i];
    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  if (SBYTE7(v34) < 0) {
    operator delete((void *)v33);
  }
  if (SBYTE7(v32) < 0) {
    operator delete((void *)v31);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(v21.__vftable);
  }
  CFRelease(v9);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
}

void sub_1BAC15C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,std::__shared_weak_count *a46)
{
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<AMCP::IO_Core::Device_Connection,std::allocator<AMCP::IO_Core::Device_Connection>,std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,void>(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = operator new(0x28uLL);
  result[1] = 0;
  result[2] = 0;
  *unint64_t result = &unk_1F14656D0;
  result[3] = a2;
  result[4] = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 16), 1uLL, memory_order_relaxed);
  }
  *a1 = result + 3;
  a1[1] = result;
  return result;
}

void *std::__function::__value_func<std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    unint64_t v3 = result;
    mach_port_t v4 = (void *)result[3];
    uint8x8_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        unint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        unint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      unint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1BAC16060(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int8x8_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2::~$_2(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  int8x8_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core19Device_Node_Factory31add_input_device_node_functionsERKNSt3__110shared_ptrINS0_17Device_Node_StateEEERKNS3_INS_5Graph8TimebaseEEERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::operator()(uint64_t a1@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  char v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6
    || (v7 = *a2, v8 = *a3, char v6 = std::__shared_weak_count::lock(v6), (v9 = v6) == 0)
    || (uint64_t v10 = *(void *)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    mach_port_t v13 = *(NSObject **)__p.__r_.__value_.__l.__data_;
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      __int16 v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v15;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Node_Factory.cpp";
      WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = 109;
      LOWORD(v31) = 2080;
      *(void *)((char *)&v31 + 2) = "not (device_state.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v22);
    std::logic_error::logic_error(&v23, &v22);
    v23.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v24, &v23);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = -1;
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v24.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v24);
    *((void *)&v31 + 1) = "auto AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(const std::shared_p"
                            "tr<Device_Node_State> &, const Timebase_Ref &, const std::string &)::(anonymous class)::oper"
                            "ator()(Direction, size_t) const";
    long long v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Node_Factory.cpp";
    int v33 = 109;
    std::vector<void *>::vector(&v17);
    int v16 = backtrace((void **)v17, (*((void *)&v17 + 1) - (void)v17) >> 3);
    std::vector<void *>::resize((char **)&v17, v16);
    long long v20 = v17;
    uint64_t v21 = v18;
    long long v17 = 0uLL;
    uint64_t v18 = 0;
    std::string v19 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*(char *)(a1 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
  }
  else {
    std::string v24 = *(std::string *)(a1 + 24);
  }
  std::string __p = v24;
  *(void *)&long long v31 = v8;
  DWORD2(v31) = v7;
  unint64_t v11 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>((void *)(v10 + 48), (unsigned __int8 **)&__p);
  if (v11)
  {
    uint64_t v12 = v11[32];
    *a4 = v11[31];
    a4[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
}

void sub_1BAC165BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  int8x8_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::destroy(uint64_t a1)
{
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14657B0;
  return std::__compressed_pair_elem<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2 const&,0ul>(a2 + 1, a1 + 8);
}

void *std::__compressed_pair_elem<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2 const&,0ul>(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  mach_port_t v4 = (std::string *)(a1 + 2);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    a1[4] = *(void *)(a2 + 32);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_1BAC16808(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  int8x8_t v2 = operator new(0x30uLL);
  void *v2 = &unk_1F14657B0;
  std::__compressed_pair_elem<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_1BAC16874(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F14657B0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  int8x8_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F14657B0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  int8x8_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core19Device_Node_Factory31add_input_device_node_functionsERKNSt3__110shared_ptrINS0_17Device_Node_StateEEERKNS3_INS_5Graph8TimebaseEEERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}