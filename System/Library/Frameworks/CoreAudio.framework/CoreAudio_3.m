uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::operator()@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2;

  v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::destroy_deallocate(void *__p)
{
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::destroy(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1465720;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::__clone(uint64_t a1)
{
  result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F1465720;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1465720;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1465720;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Device_Connection>::__on_zero_shared(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Device_Connection>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14656D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Device_Connection>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14656D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core19Device_Node_Factory31add_input_device_node_functionsERKNSt3__110shared_ptrINS0_17Device_Node_StateEEERKNS3_INS_5Graph8TimebaseEEERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::operator()@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::destroy(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1465640;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__clone(uint64_t a1)
{
  result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F1465640;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1465640;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1465640;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core19Device_Node_Factory32add_output_device_node_functionsERKNSt3__110shared_ptrINS0_17Device_Node_StateEEERKNS3_INS_5Graph8TimebaseEEERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::operator()(uint64_t a1@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6
    || (int v7 = *a2, v8 = *a3, v6 = std::__shared_weak_count::lock(v6), (v9 = v6) == 0)
    || (uint64_t v10 = *(void *)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    v13 = *(NSObject **)__p.__r_.__value_.__l.__data_;
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v15;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Node_Factory.cpp";
      WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = 158;
      LOWORD(v31) = 2080;
      *(void *)((char *)&v31 + 2) = "not (device_state.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v22);
    std::logic_error::logic_error(&v23, &v22);
    v23.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v24, &v23);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = -1;
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v24.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v24);
    *((void *)&v31 + 1) = "auto AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(const std::shared_"
                            "ptr<Device_Node_State> &, const Timebase_Ref &, const std::string &)::(anonymous class)::ope"
                            "rator()(Direction, size_t) const";
    v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Node_Factory.cpp";
    int v33 = 158;
    std::vector<void *>::vector(&v17);
    int v16 = backtrace((void **)v17, (*((void *)&v17 + 1) - (void)v17) >> 3);
    std::vector<void *>::resize((char **)&v17, v16);
    long long v20 = v17;
    uint64_t v21 = v18;
    long long v17 = 0uLL;
    uint64_t v18 = 0;
    v19 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*(char *)(a1 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
  }
  else {
    std::string v24 = *(std::string *)(a1 + 24);
  }
  std::string __p = v24;
  *(void *)&long long v31 = v8;
  DWORD2(v31) = v7;
  v11 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>((void *)(v10 + 8), (unsigned __int8 **)&__p);
  if (v11)
  {
    uint64_t v12 = v11[32];
    *a4 = v11[31];
    a4[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
}

void sub_1BAC172F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_input_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::destroy(uint64_t a1)
{
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14659C0;
  return std::__compressed_pair_elem<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3 const&,0ul>(a2 + 1, a1 + 8);
}

void *std::__compressed_pair_elem<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3 const&,0ul>(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::string *)(a1 + 2);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    a1[4] = *(void *)(a2 + 32);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_1BAC174F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_1F14659C0;
  std::__compressed_pair_elem<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_1BAC1755C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F14659C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F14659C0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core19Device_Node_Factory32add_output_device_node_functionsERKNSt3__110shared_ptrINS0_17Device_Node_StateEEERKNS3_INS_5Graph8TimebaseEEERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::operator()@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1465940;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::__clone(uint64_t a1)
{
  result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F1465940;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1465940;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_2>,std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1465940;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core19Device_Node_Factory32add_output_device_node_functionsERKNSt3__110shared_ptrINS0_17Device_Node_StateEEERKNS3_INS_5Graph8TimebaseEEERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::operator()@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14658C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__clone(uint64_t a1)
{
  result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F14658C0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14658C0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_1>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14658C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core19Device_Node_Factory32add_output_device_node_functionsERKNSt3__110shared_ptrINS0_17Device_Node_StateEEERKNS3_INS_5Graph8TimebaseEEERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a3, (AMCP::DAL::DAL_Time *)(a3 + 5))) {
    AMCP::IO_Core::Stream_Connection::maybe_capture_audio(*(void *)(a1 + 8), (uint64_t)a3);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(_DWORD *)(v5 + 72) = *(_DWORD *)a3;
  *(void *)(v5 + 80) = a3[1];
  uint64_t v6 = a3[3];
  *(void *)(v5 + 88) = a3[2];
  uint64_t v7 = a3[4];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(v5 + 104);
  *(void *)(v5 + 96) = v6;
  *(void *)(v5 + 104) = v7;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(_DWORD *)(v5 + 112) = *((_DWORD *)a3 + 10);
  *(void *)(v5 + 120) = a3[6];
  uint64_t v9 = a3[8];
  *(void *)(v5 + 128) = a3[7];
  uint64_t v10 = a3[9];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  v11 = *(std::__shared_weak_count **)(v5 + 144);
  *(void *)(v5 + 136) = v9;
  *(void *)(v5 + 144) = v10;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::__clone(void *result, void *a2)
{
  uint64_t v2 = result[1];
  *a2 = &unk_1F1465840;
  a2[1] = v2;
  uint64_t v3 = result[3];
  a2[2] = result[2];
  a2[3] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

char *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::__clone(uint64_t a1)
{
  result = (char *)operator new(0x20uLL);
  *(void *)result = &unk_1F1465840;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1465840;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0,std::allocator<AMCP::IO_Core::Device_Node_Factory::add_output_device_node_functions(std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,std::shared_ptr<AMCP::Graph::Timebase> const&,std::string const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1465840;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void AMCP::IO_Core::Device_Node_Factory::create_node_descriptions_from_device(uint64_t a1, uint64_t *a2, void **a3, unsigned int a4, std::string::size_type *a5)
{
  uint64_t v354 = *MEMORY[0x1E4F143B8];
  long long v308 = 0u;
  long long v309 = 0u;
  long long v307 = 0u;
  memset(v306, 0, sizeof(v306));
  uint64_t v9 = (std::__shared_mutex_base *)(*(uint64_t (**)(void))(*(void *)*a2 + 16))();
  unsigned int v278 = a4;
  core = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v304, v9, a4);
  if (!v304)
  {
    AMCP::Log::Scope_Registry::get(core);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v343, "com.apple.coreaudio", "AMCP");
    v273 = *(NSObject **)v343[0].__r_.__value_.__l.__data_;
    if (v343[0].__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v343[0].__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v273, OS_LOG_TYPE_ERROR))
    {
      v274 = pthread_self();
      mach_port_t v275 = pthread_mach_thread_np(v274);
      LODWORD(v343[0].__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v343[0].__r_.__value_.__r.__words[0]) = v275;
      LOWORD(v343[0].__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v343[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Node_Factory.cpp";
      WORD1(v343[0].__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v343[0].__r_.__value_.__r.__words[2]) = 184;
      LOWORD(v343[1].__r_.__value_.__l.__data_) = 2080;
      *(std::string::size_type *)((char *)v343[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)"not (device_core != nullptr)";
      _os_log_error_impl(&dword_1BAA78000, v273, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)v343, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v323);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)v349);
    std::logic_error::logic_error((std::logic_error *)v327, (const std::string *)v349);
    *(void *)v327 = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error((std::logic_error *)v351, (const std::logic_error *)v327);
    *(void *)&v351[32] = 0;
    *(void *)&v351[24] = 0;
    v352 = 0;
    int v353 = -1;
    *(void *)v351 = &unk_1F1489CC8;
    *(void *)&v351[16] = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v343, (uint64_t)v351);
    v343[1].__r_.__value_.__l.__size_ = (std::string::size_type)"std::pair<std::vector<Node_Description>, std::shared_ptr"
                                                                "<Device_Node_State>> AMCP::IO_Core::Device_Node_Factory:"
                                                                ":create_node_descriptions_from_device(const std::shared_"
                                                                "ptr<Device_Timebase_Factory> &, AMCP::Object_ID, const s"
                                                                "td::shared_ptr<Device_Node_State> &)";
    v343[1].__r_.__value_.__r.__words[2] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source"
                                                                   "/AMCP/IO/IO_Core/Device_Node_Factory.cpp";
    LODWORD(v344) = 184;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v339);
    std::logic_error v332 = *(std::logic_error *)v339;
    v331 = &unk_1F148AA90;
    uint64_t v333 = *(void *)&v339[16];
    memset(v339, 0, 24);
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  v288 = a2;
  v291 = a5;
  uint64_t v276 = a1;
  AMCP::Core::Core::get_simple_required_property<1937009955u>(&v302, v304, 1735159650);
  uint64_t v12 = (unsigned int *)v302;
  v13 = v303;
  if (v302 != v303)
  {
    do
    {
      unsigned int v14 = *v12;
      uint64_t v346 = 0;
      long long v345 = 0u;
      long long v344 = 0u;
      memset(v343, 0, sizeof(v343));
      uint64_t v347 = 1;
      char v348 = 0;
      mach_port_t v15 = (std::__shared_mutex_base *)(*(uint64_t (**)(void))(*(void *)*v288 + 16))();
      int v16 = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v323, v15, v14);
      long long v17 = (AMCP::Core::Core *)v323.__vftable;
      if (!v323.__vftable)
      {
        AMCP::Log::Scope_Registry::get(v16);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v351, "com.apple.coreaudio", "AMCP");
        v261 = **(NSObject ***)v351;
        if (*(void *)&v351[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v351[8]);
        }
        if (os_log_type_enabled(v261, OS_LOG_TYPE_ERROR))
        {
          v262 = pthread_self();
          mach_port_t v263 = pthread_mach_thread_np(v262);
          *(_DWORD *)v351 = 67109890;
          *(_DWORD *)&v351[4] = v263;
          *(_WORD *)&v351[8] = 2080;
          *(void *)&v351[10] = "Device_Node_Factory.cpp";
          *(_WORD *)&v351[18] = 1024;
          *(_DWORD *)&v351[20] = 51;
          *(_WORD *)&v351[24] = 2080;
          *(void *)&v351[26] = "not (stream_core != nullptr)";
          _os_log_error_impl(&dword_1BAA78000, v261, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", v351, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v341);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)v339);
        std::logic_error::logic_error(&v318, (const std::string *)v339);
        v318.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error((std::logic_error *)&v331, &v318);
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = 0uLL;
        uint64_t v333 = 0;
        LODWORD(__s.__r_.__value_.__r.__words[2]) = -1;
        v331 = &unk_1F1489CC8;
        v332.__imp_.__imp_ = (const char *)&unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v351, (uint64_t)&v331);
        *(void *)&v351[32] = "Terminal_Description AMCP::IO_Core::Device_Node_Factory::terminal_description_from_stream"
                               "(AMCP::Object_ID, const std::shared_ptr<Device_Node_State> &, AMCP::Direction &)";
        v352 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Node_Factory.cpp";
        int v353 = 51;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v327);
        *(_OWORD *)&v349[8] = *(_OWORD *)v327;
        *(void *)v349 = &unk_1F148AA90;
        *(void *)&v349[24] = *(void *)&v327[16];
        memset(v327, 0, 24);
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      AMCP::Core::Core::get_simple_required_property<1935894638u>((AMCP::Core::Core *)v323.__vftable);
      unsigned int simple_required = AMCP::Core::Core::get_simple_required_property<1935960434u>(v17);
      uint64_t v19 = *(void *)(*v291 + 96);
      long long v20 = *(std::__shared_weak_count **)(*v291 + 104);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(unsigned char *__return_ptr))(*(void *)v19 + 128))(v351);
      int v21 = *(_DWORD *)&v351[12];
      std::string::size_type v22 = *(void *)&v351[16];
      int v23 = *(_DWORD *)&v351[24];
      int v24 = *(_DWORD *)&v351[32];
      if (*(_DWORD *)&v351[8] == 1819304813 && (v351[12] & 0x40) == 0)
      {
        int v23 = 4 * *(_DWORD *)&v351[28];
        HIDWORD(v22) = 1;
        LODWORD(v22) = 4 * *(_DWORD *)&v351[28];
        int v24 = 32;
        int v21 = 9;
      }
      v343[0].__r_.__value_.__r.__words[0] = *(void *)v351;
      v343[0].__r_.__value_.__l.__size_ = __PAIR64__(v21, *(unsigned int *)&v351[8]);
      v343[0].__r_.__value_.__r.__words[2] = v22;
      v343[1].__r_.__value_.__r.__words[0] = __PAIR64__(*(unsigned int *)&v351[28], v23);
      v343[1].__r_.__value_.__l.__size_ = __PAIR64__(*(unsigned int *)&v351[36], v24);
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      LODWORD(v347) = 1;
      if (v323.__imp_.__imp_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v323.__imp_.__imp_);
      }
      uint64_t v25 = (char *)v306 + 24 * simple_required;
      uint64_t v27 = (unsigned int **)(v25 + 8);
      uint64_t v26 = (unsigned int *)*((void *)v25 + 1);
      unint64_t v28 = *((void *)v25 + 2);
      if ((unint64_t)v26 >= v28)
      {
        v30 = *(unsigned int **)v25;
        uint64_t v31 = ((uint64_t)v26 - *(void *)v25) >> 2;
        unint64_t v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 62) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v33 = v28 - (void)v30;
        if (v33 >> 1 > v32) {
          unint64_t v32 = v33 >> 1;
        }
        BOOL v34 = (unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v34) {
          unint64_t v35 = v32;
        }
        if (v35)
        {
          unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v35);
          uint64_t v26 = *v27;
          v30 = *(unsigned int **)v25;
        }
        else
        {
          uint64_t v36 = 0;
        }
        v37 = (unsigned int *)(v35 + 4 * v31);
        unsigned int *v37 = v14;
        char v29 = v37 + 1;
        while (v26 != v30)
        {
          unsigned int v38 = *--v26;
          *--v37 = v38;
        }
        *(void *)uint64_t v25 = v37;
        *uint64_t v27 = v29;
        *((void *)v25 + 2) = v35 + 4 * v36;
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        *uint64_t v26 = v14;
        char v29 = v26 + 1;
      }
      *uint64_t v27 = v29;
      v39 = (char *)&v307 + 24 * (simple_required == 0);
      unint64_t v42 = *((void *)v39 + 1);
      v41 = (uint64_t *)(v39 + 8);
      uint64_t v40 = v42;
      unint64_t v43 = v41[1];
      if (v42 >= v43)
      {
        v45 = (uint64_t *)&v307 + 3 * (simple_required == 0);
        uint64_t v46 = 0x4EC4EC4EC4EC4EC5 * ((v40 - *v45) >> 3);
        unint64_t v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) > 0x276276276276276) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v48 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v43 - *v45) >> 3);
        if (2 * v48 > v47) {
          unint64_t v47 = 2 * v48;
        }
        if (v48 >= 0x13B13B13B13B13BLL) {
          unint64_t v49 = 0x276276276276276;
        }
        else {
          unint64_t v49 = v47;
        }
        *(void *)&v351[32] = v41 + 1;
        if (v49) {
          unint64_t v49 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Terminal_Description>>(v49);
        }
        else {
          uint64_t v50 = 0;
        }
        *(void *)v351 = v49;
        *(void *)&v351[8] = v49 + 104 * v46;
        *(void *)&v351[16] = *(void *)&v351[8];
        *(void *)&v351[24] = v49 + 104 * v50;
        std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description const&,AMCP::Terminal_Description*>(*(uint64_t *)&v351[8], (long long *)v343);
        *(void *)&v351[16] += 104;
        std::vector<AMCP::Terminal_Description>::__swap_out_circular_buffer(v45, v351);
        uint64_t v44 = *v41;
        std::__split_buffer<AMCP::Terminal_Description>::~__split_buffer((uint64_t)v351);
      }
      else
      {
        std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description const&,AMCP::Terminal_Description*>(v40, (long long *)v343);
        uint64_t v44 = v40 + 104;
      }
      uint64_t *v41 = v44;
      for (uint64_t i = 64; i != 16; i -= 24)
      {
        *(void *)v351 = (char *)v343 + i;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v351);
      }
      ++v12;
    }
    while (v12 != v13);
  }
  char v52 = 0;
  uint64_t v53 = 0;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v301 = 0;
  uint64_t v342 = 1;
  v54 = v291;
  v55 = v288;
  do
  {
    char v56 = v52;
    unsigned int v57 = *((_DWORD *)&v342 + v53);
    v58 = (long long **)&v307 + 3 * v57;
    v59 = *v58;
    v290 = v58;
    v61 = v58 + 1;
    v60 = v58[1];
    v289 = v61;
    if (v59 == v60) {
      goto LABEL_394;
    }
    std::logic_error v297 = (std::logic_error)0;
    v298 = 0;
    char v279 = v56;
    if (v57 == 1)
    {
      if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v309 - *((void *)&v308 + 1)) >> 3) != (uint64_t)(*((void *)&v306[0] + 1)
                                                                                             - *(void *)&v306[0]) >> 2)
      {
        AMCP::Log::Scope_Registry::get(v11);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v343, "com.apple.coreaudio", "AMCP");
        v264 = *(NSObject **)v343[0].__r_.__value_.__l.__data_;
        if (v343[0].__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v343[0].__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v264, OS_LOG_TYPE_ERROR))
        {
          v265 = pthread_self();
          mach_port_t v266 = pthread_mach_thread_np(v265);
          LODWORD(v343[0].__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(v343[0].__r_.__value_.__r.__words[0]) = v266;
          LOWORD(v343[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v343[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Node_Factory.cpp";
          WORD1(v343[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v343[0].__r_.__value_.__r.__words[2]) = 225;
          LOWORD(v343[1].__r_.__value_.__l.__data_) = 2080;
          *(std::string::size_type *)((char *)v343[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)"not (output_terminals.size() == output_stream_ids.size())";
          _os_log_error_impl(&dword_1BAA78000, v264, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s number of terminals does not match number of stream ids", (uint8_t *)v343, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v323);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"number of terminals does not match number of stream ids", (uint64_t)v349);
        std::logic_error::logic_error((std::logic_error *)v327, (const std::string *)v349);
        *(void *)v327 = MEMORY[0x1E4FBA4C8] + 16;
        std::logic_error::logic_error((std::logic_error *)v351, (const std::logic_error *)v327);
        *(void *)&v351[32] = 0;
        *(void *)&v351[24] = 0;
        v352 = 0;
        int v353 = -1;
        *(void *)v351 = &unk_1F1489CC8;
        *(void *)&v351[16] = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v343, (uint64_t)v351);
        v343[1].__r_.__value_.__l.__size_ = (std::string::size_type)"std::vector<Node_Description> AMCP::IO_Core::Device_"
                                                                    "Node_Factory::create_output_nodes_for_streams(const "
                                                                    "std::vector<Terminal_Description> &, const std::vect"
                                                                    "or<AMCP::Object_ID> &, const std::shared_ptr<Device_"
                                                                    "Node_State> &, AMCP::Object_ID, const std::shared_pt"
                                                                    "r<Device_Timebase_Factory> &)";
        v343[1].__r_.__value_.__r.__words[2] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/So"
                                                                       "urce/AMCP/IO/IO_Core/Device_Node_Factory.cpp";
        LODWORD(v344) = 225;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v339);
        std::logic_error v332 = *(std::logic_error *)v339;
        v331 = &unk_1F148AA90;
        uint64_t v333 = *(void *)&v339[16];
        memset(v339, 0, 24);
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      v295.__vftable = 0;
      v295.__imp_.__imp_ = 0;
      data = 0;
      AMCP::IO_Core::Device_Node_Factory::clock_uid_and_node_description_from_device_and_direction((uint64_t)&v331, *v55, v278, 0);
      uint64_t v62 = (*(uint64_t (**)(void))(*(void *)*v55 + 24))();
      (*(void (**)(uint64_t, std::string *))(*(void *)v62 + 24))(v62, &__s);
      std::vector<AMCP::Terminal_Description>::__assign_with_size[abi:ne180100]<AMCP::Terminal_Description*,AMCP::Terminal_Description*>(v338, *((long long **)&v308 + 1), (long long *)v309, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v309 - *((void *)&v308 + 1)) >> 3));
      imp = v295.__imp_.__imp_;
      if (v295.__imp_.__imp_ >= data)
      {
        unint64_t v74 = 0xEEEEEEEEEEEEEEEFLL * ((v295.__imp_.__imp_ - (const char *)v295.__vftable) >> 3);
        unint64_t v75 = v74 + 1;
        if (v74 + 1 > 0x222222222222222) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        if (0xDDDDDDDDDDDDDDDELL * ((data - (const char *)v295.__vftable) >> 3) > v75) {
          unint64_t v75 = 0xDDDDDDDDDDDDDDDELL * ((data - (const char *)v295.__vftable) >> 3);
        }
        if (0xEEEEEEEEEEEEEEEFLL * ((data - (const char *)v295.__vftable) >> 3) >= 0x111111111111111) {
          unint64_t v76 = 0x222222222222222;
        }
        else {
          unint64_t v76 = v75;
        }
        v343[1].__r_.__value_.__l.__size_ = (std::string::size_type)&data;
        if (v76) {
          unint64_t v76 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Node_Description>>(v76);
        }
        else {
          uint64_t v77 = 0;
        }
        v343[0].__r_.__value_.__r.__words[0] = v76;
        v343[0].__r_.__value_.__l.__size_ = v76 + 120 * v74;
        v343[0].__r_.__value_.__r.__words[2] = v343[0].__r_.__value_.__l.__size_;
        v343[1].__r_.__value_.__r.__words[0] = v76 + 120 * v77;
        AMCP::Node_Description::Node_Description((AMCP::Node_Description *)v343[0].__r_.__value_.__l.__size_, (const AMCP::Node_Description *)&v333);
        size = (std::logic_error_vtbl *)v343[0].__r_.__value_.__l.__size_;
        v65 = (const char *)(v343[0].__r_.__value_.__r.__words[2] + 120);
        v343[0].__r_.__value_.__r.__words[2] += 120;
        v84 = v295.__vftable;
        v83 = v295.__imp_.__imp_;
        if (v295.__imp_.__imp_ == (const char *)v295.__vftable)
        {
          std::logic_error v85 = (std::logic_error)vdupq_n_s64((unint64_t)v295.__imp_.__imp_);
        }
        else
        {
          do
          {
            v83 -= 120;
            std::construct_at[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description,AMCP::Node_Description*>((uint64_t)&size[-5], (uint64_t)v83);
          }
          while (v83 != (const char *)v84);
          std::logic_error v85 = v295;
          v65 = (const char *)v343[0].__r_.__value_.__r.__words[2];
        }
        v295.__vftable = size;
        v295.__imp_.__imp_ = v65;
        *(std::logic_error *)&v343[0].__r_.__value_.__r.__words[1] = v85;
        std::string::size_type v143 = (std::string::size_type)data;
        data = v343[1].__r_.__value_.__l.__data_;
        v343[1].__r_.__value_.__r.__words[0] = v143;
        v343[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v85.__vftable;
        v64 = (AMCP::Log::Scope_Registry *)std::__split_buffer<AMCP::Node_Description>::~__split_buffer((uint64_t)v343);
      }
      else
      {
        v64 = AMCP::Node_Description::Node_Description((AMCP::Node_Description *)v295.__imp_.__imp_, (const AMCP::Node_Description *)&v333);
        v65 = imp + 120;
      }
      v295.__imp_.__imp_ = v65;
      v144 = (void *)*v54;
      if (!*v54)
      {
        AMCP::Log::Scope_Registry::get(v64);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v343, "com.apple.coreaudio", "AMCP");
        v270 = *(NSObject **)v343[0].__r_.__value_.__l.__data_;
        if (v343[0].__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v343[0].__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v270, OS_LOG_TYPE_ERROR))
        {
          v271 = pthread_self();
          mach_port_t v272 = pthread_mach_thread_np(v271);
          LODWORD(v343[0].__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(v343[0].__r_.__value_.__r.__words[0]) = v272;
          LOWORD(v343[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v343[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Node_Factory.cpp";
          WORD1(v343[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v343[0].__r_.__value_.__r.__words[2]) = 235;
          LOWORD(v343[1].__r_.__value_.__l.__data_) = 2080;
          *(std::string::size_type *)((char *)v343[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)"not (device_state.operator BOOL())";
          _os_log_error_impl(&dword_1BAA78000, v270, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)v343, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v318);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)v339);
        std::logic_error::logic_error(&v323, (const std::string *)v339);
        v323.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error((std::logic_error *)v351, &v323);
        *(void *)&v351[32] = 0;
        *(void *)&v351[24] = 0;
        v352 = 0;
        int v353 = -1;
        *(void *)v351 = &unk_1F1489CC8;
        *(void *)&v351[16] = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v343, (uint64_t)v351);
        v343[1].__r_.__value_.__l.__size_ = (std::string::size_type)"std::vector<Node_Description> AMCP::IO_Core::Device_"
                                                                    "Node_Factory::create_output_nodes_for_streams(const "
                                                                    "std::vector<Terminal_Description> &, const std::vect"
                                                                    "or<AMCP::Object_ID> &, const std::shared_ptr<Device_"
                                                                    "Node_State> &, AMCP::Object_ID, const std::shared_pt"
                                                                    "r<Device_Timebase_Factory> &)";
        v343[1].__r_.__value_.__r.__words[2] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/So"
                                                                       "urce/AMCP/IO/IO_Core/Device_Node_Factory.cpp";
        LODWORD(v344) = 235;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v327);
        *(_OWORD *)&v349[8] = *(_OWORD *)v327;
        *(void *)v349 = &unk_1F148AA90;
        *(void *)&v349[24] = *(void *)&v327[16];
        memset(v327, 0, 24);
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      uint64_t v146 = v144[14];
      v145 = (std::__shared_weak_count *)v144[15];
      if (v145)
      {
        atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v145);
        v144 = (void *)*v54;
      }
      if (!v146)
      {
        v147 = *a3;
        v148 = (std::__shared_weak_count *)v144[13];
        v343[0].__r_.__value_.__r.__words[0] = v144[12];
        v343[0].__r_.__value_.__l.__size_ = (std::string::size_type)v148;
        if (v148) {
          atomic_fetch_add_explicit(&v148->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        AMCP::IO_Core::Device_Timebase_Factory::demand_timebase_for_device(&v329, v147, (uint64_t *)v343, (unsigned __int8 *)&v331);
        uint64_t v149 = v329;
        v150 = v330;
        if (v330) {
          atomic_fetch_add_explicit(&v330->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v151 = (std::__shared_weak_count *)v144[15];
        v144[14] = v149;
        v144[15] = v150;
        if (v151) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v151);
        }
        if (v150) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v150);
        }
        if (v148) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v148);
        }
        v152 = (void *)v288[2];
        memset(v351, 0, 24);
        v153 = (uint64_t *)v152[2];
        if (v153)
        {
          std::string::size_type v154 = 0;
          while (1)
          {
            std::string::size_type v155 = v153[3];
            if (*((char *)v153 + 39) >= 0) {
              uint64_t v156 = *((unsigned __int8 *)v153 + 39);
            }
            else {
              uint64_t v156 = v153[3];
            }
            std::string::size_type v157 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v157 = __s.__r_.__value_.__l.__size_;
            }
            if (v156 != v157) {
              goto LABEL_247;
            }
            v158 = (const std::string::value_type **)(v153 + 2);
            v159 = (__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? &__s
                 : (std::string *)__s.__r_.__value_.__r.__words[0];
            if ((*((unsigned char *)v153 + 39) & 0x80) == 0) {
              break;
            }
            if (!memcmp(*v158, v159, v153[3]))
            {
              uint64_t v162 = *(void *)&v351[16];
              if (v154 < *(void *)&v351[16])
              {
LABEL_223:
                std::string::__init_copy_ctor_external((std::string *)v154, *v158, v155);
                goto LABEL_226;
              }
LABEL_227:
              unint64_t v165 = *(void *)v351;
              unint64_t v166 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v154 - *(void *)v351) >> 3);
              unint64_t v167 = v166 + 1;
              if (v166 + 1 > 0x666666666666666) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v168 = 0xCCCCCCCCCCCCCCCDLL * ((v162 - *(void *)v351) >> 3);
              if (2 * v168 > v167) {
                unint64_t v167 = 2 * v168;
              }
              if (v168 >= 0x333333333333333) {
                unint64_t v169 = 0x666666666666666;
              }
              else {
                unint64_t v169 = v167;
              }
              v343[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v351[16];
              if (v169)
              {
                if (v169 > 0x666666666666666) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                v170 = (char *)operator new(40 * v169);
              }
              else
              {
                v170 = 0;
              }
              v171 = (std::string *)&v170[40 * v166];
              v343[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v170;
              v343[0].__r_.__value_.__l.__size_ = (std::string::size_type)v171;
              v343[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v171;
              v343[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v170[40 * v169];
              if (*((char *)v153 + 39) < 0)
              {
                std::string::__init_copy_ctor_external(v171, (const std::string::value_type *)v153[2], v153[3]);
                std::string::size_type v154 = *(void *)&v351[8];
                unint64_t v165 = *(void *)v351;
                v173 = (char *)v343[0].__r_.__value_.__r.__words[2];
                v171 = (std::string *)v343[0].__r_.__value_.__l.__size_;
              }
              else
              {
                long long v172 = *(_OWORD *)v158;
                v171->__r_.__value_.__r.__words[2] = v153[4];
                *(_OWORD *)&v171->__r_.__value_.__l.__data_ = v172;
                v173 = &v170[40 * v166];
              }
              v174 = &v170[40 * v166];
              uint64_t v175 = v153[5];
              *((_DWORD *)v174 + 8) = *((_DWORD *)v153 + 12);
              *((void *)v174 + 3) = v175;
              std::string::size_type v176 = (std::string::size_type)(v173 + 40);
              v343[0].__r_.__value_.__r.__words[2] = v176;
              if (v154 == v165)
              {
                int64x2_t v179 = vdupq_n_s64(v165);
                std::string::size_type v154 = v176;
                v54 = v291;
              }
              else
              {
                v54 = v291;
                do
                {
                  long long v177 = *(_OWORD *)(v154 - 40);
                  v171[-1].__r_.__value_.__r.__words[0] = *(void *)(v154 - 24);
                  *(_OWORD *)&v171[-2].__r_.__value_.__r.__words[1] = v177;
                  *(void *)(v154 - 32) = 0;
                  *(void *)(v154 - 24) = 0;
                  *(void *)(v154 - 40) = 0;
                  std::string::size_type v178 = *(void *)(v154 - 16);
                  LODWORD(v171[-1].__r_.__value_.__r.__words[2]) = *(_DWORD *)(v154 - 8);
                  v171[-1].__r_.__value_.__l.__size_ = v178;
                  v171 = (std::string *)((char *)v171 - 40);
                  v154 -= 40;
                }
                while (v154 != v165);
                int64x2_t v179 = *(int64x2_t *)v351;
                std::string::size_type v154 = v343[0].__r_.__value_.__r.__words[2];
              }
              *(void *)v351 = v171;
              *(void *)&v351[8] = v154;
              *(int64x2_t *)&v343[0].__r_.__value_.__r.__words[1] = v179;
              std::string::size_type v180 = *(void *)&v351[16];
              *(void *)&v351[16] = v343[1].__r_.__value_.__l.__data_;
              v343[1].__r_.__value_.__r.__words[0] = v180;
              v343[0].__r_.__value_.__r.__words[0] = v179.i64[0];
              std::__split_buffer<AMCP::Terminal_Identifier>::~__split_buffer((uint64_t)v343);
LABEL_246:
              *(void *)&v351[8] = v154;
            }
LABEL_247:
            v153 = (uint64_t *)*v153;
            if (!v153)
            {
              for (j = *(unsigned __int8 ***)v351; j != (unsigned __int8 **)v154; j += 5)
              {
                v182 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>(v152, j);
                if (v182)
                {
                  int8x8_t v183 = (int8x8_t)v152[1];
                  unint64_t v184 = v182[1];
                  uint8x8_t v185 = (uint8x8_t)vcnt_s8(v183);
                  v185.i16[0] = vaddlv_u8(v185);
                  if (v185.u32[0] > 1uLL)
                  {
                    if (v184 >= *(void *)&v183) {
                      v184 %= *(void *)&v183;
                    }
                  }
                  else
                  {
                    v184 &= *(void *)&v183 - 1;
                  }
                  v186 = *(void **)(*v152 + 8 * v184);
                  do
                  {
                    v187 = v186;
                    v186 = (void *)*v186;
                  }
                  while (v186 != v182);
                  if (v187 == v152 + 2) {
                    goto LABEL_268;
                  }
                  unint64_t v188 = v187[1];
                  if (v185.u32[0] > 1uLL)
                  {
                    if (v188 >= *(void *)&v183) {
                      v188 %= *(void *)&v183;
                    }
                  }
                  else
                  {
                    v188 &= *(void *)&v183 - 1;
                  }
                  if (v188 != v184)
                  {
LABEL_268:
                    if (!*v182) {
                      goto LABEL_269;
                    }
                    unint64_t v189 = *(void *)(*v182 + 8);
                    if (v185.u32[0] > 1uLL)
                    {
                      if (v189 >= *(void *)&v183) {
                        v189 %= *(void *)&v183;
                      }
                    }
                    else
                    {
                      v189 &= *(void *)&v183 - 1;
                    }
                    if (v189 != v184) {
LABEL_269:
                    }
                      *(void *)(*v152 + 8 * v184) = 0;
                  }
                  uint64_t v190 = *v182;
                  if (*v182)
                  {
                    unint64_t v191 = *(void *)(v190 + 8);
                    if (v185.u32[0] > 1uLL)
                    {
                      if (v191 >= *(void *)&v183) {
                        v191 %= *(void *)&v183;
                      }
                    }
                    else
                    {
                      v191 &= *(void *)&v183 - 1;
                    }
                    if (v191 != v184)
                    {
                      *(void *)(*v152 + 8 * v191) = v187;
                      uint64_t v190 = *v182;
                    }
                  }
                  void *v187 = v190;
                  void *v182 = 0;
                  --v152[3];
                  v343[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v182;
                  v343[0].__r_.__value_.__l.__size_ = (std::string::size_type)(v152 + 2);
                  v343[0].__r_.__value_.__s.__data_[16] = 1;
                  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::shared_ptr<AMCP::DAL::Synchronized_Mixer>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::shared_ptr<AMCP::DAL::Synchronized_Mixer>>,void *>>>>::reset[abi:ne180100]((uint64_t)v343);
                }
              }
              goto LABEL_279;
            }
          }
          if (*((unsigned char *)v153 + 39))
          {
            v160 = (unsigned __int8 *)(v153 + 2);
            uint64_t v161 = *((unsigned __int8 *)v153 + 39);
            while (*v160 == v159->__r_.__value_.__s.__data_[0])
            {
              ++v160;
              v159 = (std::string *)((char *)v159 + 1);
              if (!--v161)
              {
                uint64_t v162 = *(void *)&v351[16];
                if (v154 >= *(void *)&v351[16]) {
                  goto LABEL_227;
                }
                if ((*((unsigned char *)v153 + 39) & 0x80) == 0) {
                  goto LABEL_225;
                }
                goto LABEL_223;
              }
            }
            goto LABEL_247;
          }
          uint64_t v162 = *(void *)&v351[16];
          if (v154 >= *(void *)&v351[16]) {
            goto LABEL_227;
          }
LABEL_225:
          long long v163 = *(_OWORD *)v158;
          *(void *)(v154 + 16) = v153[4];
          *(_OWORD *)std::string::size_type v154 = v163;
LABEL_226:
          uint64_t v164 = v153[5];
          *(_DWORD *)(v154 + 32) = *((_DWORD *)v153 + 12);
          *(void *)(v154 + 24) = v164;
          v154 += 40;
          goto LABEL_246;
        }
LABEL_279:
        v192 = v152 + 5;
        v193 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v152 + 5, (unsigned __int8 *)&__s);
        if (v193)
        {
          int8x8_t v194 = (int8x8_t)v152[6];
          unint64_t v195 = *((void *)v193 + 1);
          uint8x8_t v196 = (uint8x8_t)vcnt_s8(v194);
          v196.i16[0] = vaddlv_u8(v196);
          if (v196.u32[0] > 1uLL)
          {
            if (v195 >= *(void *)&v194) {
              v195 %= *(void *)&v194;
            }
          }
          else
          {
            v195 &= *(void *)&v194 - 1;
          }
          v197 = *(unsigned __int8 **)(*v192 + 8 * v195);
          do
          {
            v198 = v197;
            v197 = *(unsigned __int8 **)v197;
          }
          while (v197 != v193);
          if (v198 == (unsigned __int8 *)(v152 + 7)) {
            goto LABEL_297;
          }
          unint64_t v199 = *((void *)v198 + 1);
          if (v196.u32[0] > 1uLL)
          {
            if (v199 >= *(void *)&v194) {
              v199 %= *(void *)&v194;
            }
          }
          else
          {
            v199 &= *(void *)&v194 - 1;
          }
          if (v199 != v195)
          {
LABEL_297:
            if (!*(void *)v193) {
              goto LABEL_298;
            }
            unint64_t v200 = *(void *)(*(void *)v193 + 8);
            if (v196.u32[0] > 1uLL)
            {
              if (v200 >= *(void *)&v194) {
                v200 %= *(void *)&v194;
              }
            }
            else
            {
              v200 &= *(void *)&v194 - 1;
            }
            if (v200 != v195) {
LABEL_298:
            }
              *(void *)(*v192 + 8 * v195) = 0;
          }
          uint64_t v201 = *(void *)v193;
          if (*(void *)v193)
          {
            unint64_t v202 = *(void *)(v201 + 8);
            if (v196.u32[0] > 1uLL)
            {
              if (v202 >= *(void *)&v194) {
                v202 %= *(void *)&v194;
              }
            }
            else
            {
              v202 &= *(void *)&v194 - 1;
            }
            if (v202 != v195)
            {
              *(void *)(*v192 + 8 * v202) = v198;
              uint64_t v201 = *(void *)v193;
            }
          }
          *(void *)v198 = v201;
          *(void *)v193 = 0;
          --v152[8];
          v343[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v193;
          v343[0].__r_.__value_.__l.__size_ = (std::string::size_type)(v152 + 7);
          v343[0].__r_.__value_.__s.__data_[16] = 1;
          std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)v343);
        }
        v343[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v351;
        std::vector<IOContextInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v343);
        v144 = (void *)*v54;
      }
      uint64_t v204 = v144[14];
      v203 = (std::__shared_weak_count *)v144[15];
      if (v203)
      {
        atomic_fetch_add_explicit(&v203->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v203);
      }
      v55 = v288;
      if (v204)
      {
        uint64_t v205 = *((void *)&v308 + 1);
        if ((void)v309 != *((void *)&v308 + 1))
        {
          uint64_t v206 = 0;
          std::string::size_type v207 = 0;
          do
          {
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v341, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            }
            else {
              std::string v341 = __s;
            }
            *(_OWORD *)v349 = *(_OWORD *)&v341.__r_.__value_.__l.__data_;
            std::string::size_type v208 = v341.__r_.__value_.__r.__words[2];
            memset(&v341, 0, sizeof(v341));
            *(void *)&v349[16] = v208;
            *(void *)&v349[24] = v207;
            LODWORD(v350) = 1;
            uint64_t v209 = v288[2];
            long long v210 = *(_OWORD *)(*v54 + 112);
            long long v211 = *(_OWORD *)(v205 + v206);
            long long v212 = *(_OWORD *)(v205 + v206 + 16);
            uint64_t v340 = *(void *)(v205 + v206 + 32);
            *(_OWORD *)v339 = v211;
            *(_OWORD *)&v339[16] = v212;
            if (*((void *)&v210 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v210 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            LODWORD(v343[0].__r_.__value_.__l.__data_) = 2;
            *(_OWORD *)&v343[0].__r_.__value_.__r.__words[1] = 0x40C0000000000000uLL;
            *(_OWORD *)&v343[1].__r_.__value_.__l.__data_ = v210;
            AMCP::Graph::Synchronized_Mixer_Manager::get_mixer((unint64_t)&v321, v209, (unsigned __int8 **)v349, (uint64_t)v339, (const AMCP::DAL::DAL_Time_Delta *)v343);
            if (v343[1].__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v343[1].__r_.__value_.__l.__size_);
            }
            uint64_t v213 = *(void *)&v306[0];
            if (v207 >= (uint64_t)(*((void *)&v306[0] + 1) - *(void *)&v306[0]) >> 2) {
              std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
            }
            v214 = (std::__shared_mutex_base *)(*(uint64_t (**)(void))(*(void *)*v288 + 16))();
            AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v316, v214, *(_DWORD *)(v213 + 4 * v207));
            if (!v316)
            {
              AMCP::Log::Scope_Registry::get(0);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v343, "com.apple.coreaudio", "AMCP");
              v255 = *(NSObject **)v343[0].__r_.__value_.__l.__data_;
              if (v343[0].__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v343[0].__r_.__value_.__l.__size_);
              }
              if (os_log_type_enabled(v255, OS_LOG_TYPE_ERROR))
              {
                v256 = pthread_self();
                mach_port_t v257 = pthread_mach_thread_np(v256);
                LODWORD(v343[0].__r_.__value_.__l.__data_) = 67109890;
                HIDWORD(v343[0].__r_.__value_.__r.__words[0]) = v257;
                LOWORD(v343[0].__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v343[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Node_Factory.cpp";
                WORD1(v343[0].__r_.__value_.__r.__words[2]) = 1024;
                HIDWORD(v343[0].__r_.__value_.__r.__words[2]) = 256;
                LOWORD(v343[1].__r_.__value_.__l.__data_) = 2080;
                *(std::string::size_type *)((char *)v343[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)"not (stream_core != nullptr)";
                _os_log_error_impl(&dword_1BAA78000, v255, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)v343, 0x22u);
              }
              AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v315);
              __cxa_allocate_exception(0x40uLL);
              caulk::make_string((caulk *)"", (uint64_t)&v326);
              std::logic_error::logic_error(&v314, &v326);
              v314.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
              std::logic_error::logic_error((std::logic_error *)v351, &v314);
              *(void *)&v351[32] = 0;
              *(void *)&v351[24] = 0;
              v352 = 0;
              int v353 = -1;
              *(void *)v351 = &unk_1F1489CC8;
              *(void *)&v351[16] = &unk_1F1489CF0;
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v343, (uint64_t)v351);
              v343[1].__r_.__value_.__l.__size_ = (std::string::size_type)"std::vector<Node_Description> AMCP::IO_Core::D"
                                                                          "evice_Node_Factory::create_output_nodes_for_st"
                                                                          "reams(const std::vector<Terminal_Description> "
                                                                          "&, const std::vector<AMCP::Object_ID> &, const"
                                                                          " std::shared_ptr<Device_Node_State> &, AMCP::O"
                                                                          "bject_ID, const std::shared_ptr<Device_Timebase_Factory> &)";
              v343[1].__r_.__value_.__r.__words[2] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/Audio"
                                                                             "HAL/Source/AMCP/IO/IO_Core/Device_Node_Factory.cpp";
              LODWORD(v344) = 256;
              applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v312);
              *(int64x2_t *)&v327[8] = v312;
              *(void *)v327 = &unk_1F148AA90;
              *(void *)&v327[24] = v313;
              int64x2_t v312 = 0uLL;
              std::string::pointer v313 = 0;
              boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
            }
            AMCP::Core::Core::get_simple_required_property<1935894638u>(v316);
            uint64_t v215 = *(void *)(*v54 + 96);
            v216 = *(std::__shared_weak_count **)(*v54 + 104);
            if (v216) {
              atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(unsigned char *__return_ptr))(*(void *)v215 + 128))(v327);
            if (v216) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v216);
            }
            std::logic_error v323 = *(std::logic_error *)v339;
            long long v324 = *(_OWORD *)&v339[16];
            uint64_t v325 = v340;
            std::logic_error v318 = *(std::logic_error *)v327;
            long long v319 = *(_OWORD *)&v327[16];
            uint64_t v320 = v328;
            v217 = v322;
            v310 = v321;
            v311 = v322;
            if (v322) {
              atomic_fetch_add_explicit(&v322->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            AMCP::IO_Core::Stream_Connection::Stream_Connection((std::string *)v351, (long long *)v349, v207, 0, (long long *)&v323, (uint64_t)&v318, (uint64_t)&v310);
            if (v311) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v311);
            }
            std::string::size_type v218 = *v54;
            if ((v349[23] & 0x80000000) != 0) {
              std::string::__init_copy_ctor_external(v343, *(const std::string::value_type **)v349, *(std::string::size_type *)&v349[8]);
            }
            else {
              v343[0] = *(std::string *)v349;
            }
            v343[1].__r_.__value_.__r.__words[0] = *(void *)&v349[24];
            LODWORD(v343[1].__r_.__value_.__r.__words[1]) = v350;
            AMCP::IO_Core::Stream_Connection::Stream_Connection((uint64_t)&v343[1].__r_.__value_.__r.__words[2], (long long *)v351);
            std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>>>::__emplace_unique_key_args<AMCP::Terminal_Identifier,std::pair<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>>(v218 + 8, (unsigned __int8 **)v343, (uint64_t)v343);
            AMCP::IO_Core::Stream_Connection::~Stream_Connection((OpaqueAudioConverter **)&v343[1].__r_.__value_.__r.__words[2]);
            if (SHIBYTE(v343[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v343[0].__r_.__value_.__l.__data_);
            }
            AMCP::IO_Core::Stream_Connection::~Stream_Connection((OpaqueAudioConverter **)v351);
            if (v317) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v317);
            }
            if (v217) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v217);
            }
            if ((v349[23] & 0x80000000) != 0) {
              operator delete(*(void **)v349);
            }
            ++v207;
            uint64_t v205 = *((void *)&v308 + 1);
            v206 += 104;
          }
          while (v207 < 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v309 - *((void *)&v308 + 1)) >> 3));
        }
        std::string::size_type v219 = *v54;
        std::string::size_type v221 = *(void *)(*v54 + 112);
        v220 = *(std::__shared_weak_count **)(*v54 + 120);
        if (v220)
        {
          atomic_fetch_add_explicit(&v220->__shared_owners_, 1uLL, memory_order_relaxed);
          std::string::size_type v219 = *v54;
        }
        v222 = (std::__shared_weak_count *)v54[1];
        if (v222)
        {
          atomic_fetch_add_explicit(&v222->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          uint64_t v223 = *v54;
          uint64_t v224 = v54[1];
        }
        else
        {
          uint64_t v224 = 0;
          uint64_t v223 = v219;
        }
        std::allocate_shared[abi:ne180100]<AMCP::IO_Core::Device_Connection,std::allocator<AMCP::IO_Core::Device_Connection>,std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,void>(v339, v223, v224);
        for (k = *(void **)(*v54 + 24); k; k = (void *)*k)
        {
          uint64_t v226 = k[31];
          v227 = (std::__shared_weak_count *)k[32];
          if (v227) {
            atomic_fetch_add_explicit(&v227->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::size_type v228 = *v291;
          v229 = (std::__shared_weak_count *)v291[1];
          if (v229) {
            atomic_fetch_add_explicit(&v229->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v343[1].__r_.__value_.__r.__words[0] = 0;
          v230 = operator new(0x20uLL);
          void *v230 = &unk_1F1465840;
          v230[1] = k + 7;
          v230[2] = v228;
          v230[3] = v229;
          if (v229) {
            atomic_fetch_add_explicit(&v229->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v343[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v230;
          (*(void (**)(uint64_t, std::string *))(*(void *)v226 + 200))(v226, v343);
          std::__function::__value_func<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::~__value_func[abi:ne180100](v343);
          if (v229) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v229);
          }
          if (v227) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v227);
          }
        }
        uint64_t v231 = (*(uint64_t (**)(void))(*(void *)*v288 + 24))();
        (*(void (**)(unsigned char *__return_ptr))(*(void *)v231 + 16))(v327);
        v54 = v291;
        if (v220)
        {
          atomic_fetch_add_explicit(&v220->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v232 = *(void *)v327;
          atomic_fetch_add_explicit(&v220->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        else
        {
          uint64_t v232 = *(void *)v327;
        }
        v233 = (void *)(v232 + 64);
        v343[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F14658C0;
        v343[0].__r_.__value_.__l.__size_ = v221;
        v343[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v220;
        if (v220)
        {
          atomic_fetch_add_explicit(&v220->__shared_owners_, 1uLL, memory_order_relaxed);
          v343[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v343;
          std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::swap[abi:ne180100](v343, v233);
          std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__value_func[abi:ne180100](v343);
          std::__shared_weak_count::__release_shared[abi:ne180100](v220);
          std::__shared_weak_count::__release_shared[abi:ne180100](v220);
        }
        else
        {
          v343[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v343;
          std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::swap[abi:ne180100](v343, v233);
          std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__value_func[abi:ne180100](v343);
        }
        long long v234 = *(_OWORD *)v339;
        if (*(void *)&v339[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v339[8] + 8), 1uLL, memory_order_relaxed);
        }
        v343[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1465940;
        *(_OWORD *)&v343[0].__r_.__value_.__r.__words[1] = v234;
        v343[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v343;
        std::__function::__value_func<std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::swap[abi:ne180100](v343, (void *)(*(void *)v327 + 96));
        std::__function::__value_func<std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::~__value_func[abi:ne180100](v343);
        *(void *)v351 = v219;
        *(void *)&v351[8] = v222;
        if (v222) {
          atomic_fetch_add_explicit(&v222->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v351[16], __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          std::string::size_type v219 = *(void *)v351;
          std::string::size_type v235 = *(void *)&v351[8];
        }
        else
        {
          *(std::string *)&v351[16] = __s;
          std::string::size_type v235 = (std::string::size_type)v222;
        }
        uint64_t v236 = *(void *)v327;
        v343[0].__r_.__value_.__r.__words[0] = v219;
        v343[0].__r_.__value_.__l.__size_ = v235;
        memset(v351, 0, sizeof(v351));
        *(_OWORD *)&v343[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&v351[16];
        v343[1].__r_.__value_.__l.__size_ = *(void *)&v351[32];
        v237 = (char *)operator new(0x30uLL);
        *(void *)v237 = &unk_1F14659C0;
        *((void *)v237 + 1) = v219;
        *((void *)v237 + 2) = v235;
        *(_OWORD *)(v237 + 24) = *(_OWORD *)&v343[0].__r_.__value_.__r.__words[2];
        *((void *)v237 + 5) = v343[1].__r_.__value_.__l.__size_;
        *(void *)&v349[24] = v237;
        std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::swap[abi:ne180100](v349, (void *)(v236 + 32));
        std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::~__value_func[abi:ne180100](v349);
        if ((v351[39] & 0x80000000) != 0) {
          operator delete(*(void **)&v351[16]);
        }
        if (*(void *)&v351[8]) {
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v351[8]);
        }
        if (*(void *)&v327[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v327[8]);
        }
        if (*((void *)&v234 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v234 + 1));
        }
        if (v222) {
          std::__shared_weak_count::__release_weak(v222);
        }
        v55 = v288;
        if (v220) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v220);
        }
      }
      for (uint64_t m = 120; m != 72; m -= 24)
      {
        v343[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v331 + m;
        std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)v343);
      }
      if (v336 < 0) {
        operator delete(v335);
      }
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v332.__imp_.__imp_) < 0) {
        operator delete(v331);
      }
      std::vector<AMCP::Node_Description>::__vdeallocate((void **)&v297.__vftable);
      std::logic_error v297 = v295;
      v298 = (void *)data;
      v295.__imp_.__imp_ = 0;
      data = 0;
      v295.__vftable = 0;
      v142 = &v295;
      goto LABEL_393;
    }
    v66 = (uint64_t *)v306 + 3 * (v57 == 0);
    v286 = v66 + 1;
    v287 = v66;
    if (0x4EC4EC4EC4EC4EC5 * (((char *)v60 - (char *)v59) >> 3) != (v66[1] - *v66) >> 2)
    {
      AMCP::Log::Scope_Registry::get(v11);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v343, "com.apple.coreaudio", "AMCP");
      v267 = *(NSObject **)v343[0].__r_.__value_.__l.__data_;
      if (v343[0].__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v343[0].__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v267, OS_LOG_TYPE_ERROR))
      {
        v268 = pthread_self();
        mach_port_t v269 = pthread_mach_thread_np(v268);
        LODWORD(v343[0].__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v343[0].__r_.__value_.__r.__words[0]) = v269;
        LOWORD(v343[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v343[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Node_Factory.cpp";
        WORD1(v343[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v343[0].__r_.__value_.__r.__words[2]) = 275;
        LOWORD(v343[1].__r_.__value_.__l.__data_) = 2080;
        *(std::string::size_type *)((char *)v343[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)"not (input_terminals.size() == input_stream_ids.size())";
        _os_log_error_impl(&dword_1BAA78000, v267, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s number of terminals does not match number of stream ids", (uint8_t *)v343, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v323);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"number of terminals does not match number of stream ids", (uint64_t)v349);
      std::logic_error::logic_error((std::logic_error *)v327, (const std::string *)v349);
      *(void *)v327 = MEMORY[0x1E4FBA4C8] + 16;
      std::logic_error::logic_error((std::logic_error *)v351, (const std::logic_error *)v327);
      *(void *)&v351[32] = 0;
      *(void *)&v351[24] = 0;
      v352 = 0;
      int v353 = -1;
      *(void *)v351 = &unk_1F1489CC8;
      *(void *)&v351[16] = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v343, (uint64_t)v351);
      v343[1].__r_.__value_.__l.__size_ = (std::string::size_type)"std::vector<Node_Description> AMCP::IO_Core::Device_No"
                                                                  "de_Factory::create_input_nodes_for_streams(const std::"
                                                                  "vector<Terminal_Description> &, const std::vector<AMCP"
                                                                  "::Object_ID> &, const std::shared_ptr<Device_Node_Stat"
                                                                  "e> &, AMCP::Object_ID, const std::shared_ptr<Device_Ti"
                                                                  "mebase_Factory> &)";
      v343[1].__r_.__value_.__r.__words[2] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Sour"
                                                                     "ce/AMCP/IO/IO_Core/Device_Node_Factory.cpp";
      LODWORD(v344) = 275;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v339);
      std::logic_error v332 = *(std::logic_error *)v339;
      v331 = &unk_1F148AA90;
      uint64_t v333 = *(void *)&v339[16];
      memset(v339, 0, 24);
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    int64x2_t v312 = 0uLL;
    std::string::pointer v313 = 0;
    AMCP::IO_Core::Device_Node_Factory::clock_uid_and_node_description_from_device_and_direction((uint64_t)&v331, *v55, v278, 1);
    uint64_t v67 = (*(uint64_t (**)(void))(*(void *)*v55 + 24))();
    (*(void (**)(uint64_t, std::string *))(*(void *)v67 + 24))(v67, &__s);
    if (v337 != (uint64_t *)v290) {
      std::vector<AMCP::Terminal_Description>::__assign_with_size[abi:ne180100]<AMCP::Terminal_Description*,AMCP::Terminal_Description*>(v337, *v290, *v289, 0x4EC4EC4EC4EC4EC5 * (((char *)*v289 - (char *)*v290) >> 3));
    }
    uint64_t v68 = v312.i64[1];
    if (v312.i64[1] >= (unint64_t)v313)
    {
      unint64_t v70 = 0xEEEEEEEEEEEEEEEFLL * ((v312.i64[1] - v312.i64[0]) >> 3);
      unint64_t v71 = v70 + 1;
      if (v70 + 1 > 0x222222222222222) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)&v313[-v312.i64[0]] >> 3) > v71) {
        unint64_t v71 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)&v313[-v312.i64[0]] >> 3);
      }
      if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v313[-v312.i64[0]] >> 3) >= 0x111111111111111) {
        unint64_t v72 = 0x222222222222222;
      }
      else {
        unint64_t v72 = v71;
      }
      v343[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v313;
      if (v72) {
        unint64_t v72 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Node_Description>>(v72);
      }
      else {
        uint64_t v73 = 0;
      }
      v343[0].__r_.__value_.__r.__words[0] = v72;
      v343[0].__r_.__value_.__l.__size_ = v72 + 120 * v70;
      v343[0].__r_.__value_.__r.__words[2] = v343[0].__r_.__value_.__l.__size_;
      v343[1].__r_.__value_.__r.__words[0] = v72 + 120 * v73;
      AMCP::Node_Description::Node_Description((AMCP::Node_Description *)v343[0].__r_.__value_.__l.__size_, (const AMCP::Node_Description *)&v333);
      std::string::size_type v78 = v343[0].__r_.__value_.__l.__size_;
      std::string::size_type v69 = v343[0].__r_.__value_.__r.__words[2] + 120;
      v343[0].__r_.__value_.__r.__words[2] += 120;
      uint64_t v79 = v312.i64[1];
      uint64_t v80 = v312.i64[0];
      if (v312.i64[1] == v312.i64[0])
      {
        int64x2_t v81 = vdupq_n_s64(v312.u64[1]);
      }
      else
      {
        do
        {
          v79 -= 120;
          std::construct_at[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description,AMCP::Node_Description*>(v78 - 120, v79);
        }
        while (v79 != v80);
        int64x2_t v81 = v312;
        std::string::size_type v69 = v343[0].__r_.__value_.__r.__words[2];
      }
      v312.i64[0] = v78;
      v312.i64[1] = v69;
      *(int64x2_t *)&v343[0].__r_.__value_.__r.__words[1] = v81;
      std::string::size_type v86 = (std::string::size_type)v313;
      std::string::pointer v313 = v343[1].__r_.__value_.__l.__data_;
      v343[1].__r_.__value_.__r.__words[0] = v86;
      v343[0].__r_.__value_.__r.__words[0] = v81.i64[0];
      std::__split_buffer<AMCP::Node_Description>::~__split_buffer((uint64_t)v343);
    }
    else
    {
      AMCP::Node_Description::Node_Description((AMCP::Node_Description *)v312.i64[1], (const AMCP::Node_Description *)&v333);
      std::string::size_type v69 = v68 + 120;
    }
    v312.i64[1] = v69;
    v87 = (void *)*v54;
    uint64_t v89 = *(void *)(*v54 + 112);
    v88 = *(std::__shared_weak_count **)(*v54 + 120);
    if (v88)
    {
      atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v88);
      if (!v89)
      {
        v87 = (void *)*v54;
LABEL_84:
        v90 = *a3;
        v91 = (std::__shared_weak_count *)v87[13];
        v343[0].__r_.__value_.__r.__words[0] = v87[12];
        v343[0].__r_.__value_.__l.__size_ = (std::string::size_type)v91;
        if (v91) {
          atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        AMCP::IO_Core::Device_Timebase_Factory::demand_timebase_for_device(&v329, v90, (uint64_t *)v343, (unsigned __int8 *)&v331);
        uint64_t v92 = v329;
        v93 = v330;
        if (v330) {
          atomic_fetch_add_explicit(&v330->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v94 = (std::__shared_weak_count *)v87[15];
        v87[14] = v92;
        v87[15] = v93;
        if (v94) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v94);
        }
        if (v93) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v93);
        }
        if (v91) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v91);
        }
      }
    }
    else if (!v89)
    {
      goto LABEL_84;
    }
    v95 = *v289;
    v96 = *v290;
    if (*v289 != *v290)
    {
      uint64_t v97 = 0;
      std::string::size_type v98 = 0;
      do
      {
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v326, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          v96 = *v290;
          v95 = *v289;
        }
        else
        {
          std::string v326 = __s;
        }
        *(_OWORD *)v327 = *(_OWORD *)&v326.__r_.__value_.__l.__data_;
        std::string::size_type v99 = v326.__r_.__value_.__r.__words[2];
        memset(&v326, 0, sizeof(v326));
        *(void *)&v327[16] = v99;
        *(void *)&v327[24] = v98;
        LODWORD(v328) = 0;
        if (0x4EC4EC4EC4EC4EC5 * (((char *)v95 - (char *)v96) >> 3) <= v98) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        v100 = (char *)v96 + v97;
        std::logic_error v101 = *(std::logic_error *)v100;
        long long v102 = *((_OWORD *)v100 + 1);
        uint64_t v325 = *((void *)v100 + 4);
        std::logic_error v323 = v101;
        long long v324 = v102;
        std::string::size_type v103 = *v54;
        v104 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>((void *)(*v54 + 48), (unsigned __int8 **)v327);
        if (!v104)
        {
          long long v106 = *(_OWORD *)(v103 + 112);
          uint64_t v107 = *(void *)(v103 + 120);
          if (v107) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v107 + 8), 1uLL, memory_order_relaxed);
          }
          LODWORD(v343[0].__r_.__value_.__l.__data_) = 2;
          *(_OWORD *)&v343[0].__r_.__value_.__r.__words[1] = 0x40C0000000000000uLL;
          *(_OWORD *)&v343[1].__r_.__value_.__l.__data_ = v106;
          operator new();
        }
        long long v105 = *(_OWORD *)(v104 + 31);
        long long v294 = v105;
        if (*((void *)&v105 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v105 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v108 = *v287;
        if (v98 >= (*v286 - *v287) >> 2) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        v109 = (std::__shared_mutex_base *)(*(uint64_t (**)(void))(*(void *)*v55 + 16))();
        AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v321, v109, *(_DWORD *)(v108 + 4 * v98));
        if (!v321)
        {
          AMCP::Log::Scope_Registry::get(0);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v343, "com.apple.coreaudio", "AMCP");
          v252 = *(NSObject **)v343[0].__r_.__value_.__l.__data_;
          if (v343[0].__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v343[0].__r_.__value_.__l.__size_);
          }
          if (os_log_type_enabled(v252, OS_LOG_TYPE_ERROR))
          {
            v253 = pthread_self();
            mach_port_t v254 = pthread_mach_thread_np(v253);
            LODWORD(v343[0].__r_.__value_.__l.__data_) = 67109890;
            HIDWORD(v343[0].__r_.__value_.__r.__words[0]) = v254;
            LOWORD(v343[0].__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v343[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Node_Factory.cpp";
            WORD1(v343[0].__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(v343[0].__r_.__value_.__r.__words[2]) = 302;
            LOWORD(v343[1].__r_.__value_.__l.__data_) = 2080;
            *(std::string::size_type *)((char *)v343[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)"not (stream_core != nullptr)";
            _os_log_error_impl(&dword_1BAA78000, v252, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)v343, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v295);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)v339);
          std::logic_error::logic_error((std::logic_error *)&v341, (const std::string *)v339);
          v341.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
          std::logic_error::logic_error((std::logic_error *)v351, (const std::logic_error *)&v341);
          *(void *)&v351[32] = 0;
          *(void *)&v351[24] = 0;
          v352 = 0;
          int v353 = -1;
          *(void *)v351 = &unk_1F1489CC8;
          *(void *)&v351[16] = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v343, (uint64_t)v351);
          v343[1].__r_.__value_.__l.__size_ = (std::string::size_type)"std::vector<Node_Description> AMCP::IO_Core::Devic"
                                                                      "e_Node_Factory::create_input_nodes_for_streams(con"
                                                                      "st std::vector<Terminal_Description> &, const std:"
                                                                      ":vector<AMCP::Object_ID> &, const std::shared_ptr<"
                                                                      "Device_Node_State> &, AMCP::Object_ID, const std::"
                                                                      "shared_ptr<Device_Timebase_Factory> &)";
          v343[1].__r_.__value_.__r.__words[2] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/"
                                                                         "Source/AMCP/IO/IO_Core/Device_Node_Factory.cpp";
          LODWORD(v344) = 302;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v318);
          *(std::logic_error *)&v349[8] = v318;
          *(void *)v349 = &unk_1F148AA90;
          *(void *)&v349[24] = v319;
          v318.__vftable = 0;
          v318.__imp_.__imp_ = 0;
          *(void *)&long long v319 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        AMCP::Core::Core::get_simple_required_property<1935894638u>(v321);
        uint64_t v110 = *(void *)(*v54 + 96);
        v111 = *(std::__shared_weak_count **)(*v54 + 104);
        if (v111) {
          atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v293 = v97;
        (*(void (**)(std::logic_error *__return_ptr))(*(void *)v110 + 128))(&v318);
        if (v111) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v111);
        }
        v292 = (void *)(*v54 + 48);
        v112 = (double *)std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>(v292, (unsigned __int8 **)v327);
        if (!v112) {
          goto LABEL_132;
        }
        v113 = v112;
        v114 = v323.__vftable;
        int v115 = (int)v323.__imp_.__imp_;
        int imp_high = HIDWORD(v323.__imp_.__imp_);
        int v117 = v324;
        int v118 = DWORD1(v324);
        int v119 = DWORD2(v324);
        int v120 = HIDWORD(v324);
        int v121 = v325;
        v122 = v318.__vftable;
        int v123 = (int)v318.__imp_.__imp_;
        int v284 = v319;
        int v285 = HIDWORD(v318.__imp_.__imp_);
        int v282 = DWORD2(v319);
        int v283 = DWORD1(v319);
        int v280 = v320;
        int v281 = HIDWORD(v319);
        v343[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v327;
        v343[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v327[24];
        v343[0].__r_.__value_.__r.__words[2] = (std::string::size_type)&v328;
        *(void *)v351 = v112 + 7;
        *(void *)&v351[8] = v112 + 10;
        *(void *)&v351[16] = v112 + 11;
        BOOL v124 = std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)v343, (unsigned __int8 ***)v351);
        if (!v124)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v124);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v343, "com.apple.coreaudio", "AMCP");
          v258 = *(NSObject **)v343[0].__r_.__value_.__l.__data_;
          if (v343[0].__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v343[0].__r_.__value_.__l.__size_);
          }
          if (os_log_type_enabled(v258, OS_LOG_TYPE_ERROR))
          {
            v259 = pthread_self();
            mach_port_t v260 = pthread_mach_thread_np(v259);
            LODWORD(v343[0].__r_.__value_.__l.__data_) = 67109890;
            HIDWORD(v343[0].__r_.__value_.__r.__words[0]) = v260;
            LOWORD(v343[0].__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v343[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Stream_Connection.cpp";
            WORD1(v343[0].__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(v343[0].__r_.__value_.__r.__words[2]) = 276;
            LOWORD(v343[1].__r_.__value_.__l.__data_) = 2080;
            *(std::string::size_type *)((char *)v343[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)"not (terminal == m_terminal)";
            _os_log_error_impl(&dword_1BAA78000, v258, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)v343, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v316);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)v339);
          std::logic_error::logic_error(&v295, (const std::string *)v339);
          v295.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)v351, &v295);
          *(void *)&v351[32] = 0;
          *(void *)&v351[24] = 0;
          v352 = 0;
          int v353 = -1;
          *(void *)v351 = &unk_1F1489CC8;
          *(void *)&v351[16] = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v343, (uint64_t)v351);
          v343[1].__r_.__value_.__l.__size_ = (std::string::size_type)"BOOL AMCP::IO_Core::Stream_Connection::has_setting"
                                                                      "s(const Terminal_Identifier &, size_t, CA::StreamD"
                                                                      "escription, CA::StreamDescription) const";
          v343[1].__r_.__value_.__r.__words[2] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/"
                                                                         "Source/AMCP/IO/IO_Core/Stream_Connection.cpp";
          LODWORD(v344) = 276;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v341.__r_.__value_.__l.__data_);
          *(std::string *)&v349[8] = v341;
          *(void *)v349 = &unk_1F148AA90;
          memset(&v341, 0, sizeof(v341));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        if (v98 == *((void *)v113 + 12)
          && *(double *)&v114 == v113[26]
          && v115 == *((_DWORD *)v113 + 54)
          && imp_high == *((_DWORD *)v113 + 55)
          && v117 == *((_DWORD *)v113 + 56)
          && v118 == *((_DWORD *)v113 + 57)
          && v119 == *((_DWORD *)v113 + 58)
          && v120 == *((_DWORD *)v113 + 59)
          && v121 == *((_DWORD *)v113 + 60)
          && *(double *)&v122 == v113[43]
          && v123 == *((_DWORD *)v113 + 88)
          && v285 == *((_DWORD *)v113 + 89)
          && v284 == *((_DWORD *)v113 + 90)
          && v283 == *((_DWORD *)v113 + 91)
          && v282 == *((_DWORD *)v113 + 92)
          && v281 == *((_DWORD *)v113 + 93)
          && v280 == *((_DWORD *)v113 + 94))
        {
          v55 = v288;
          v125 = (std::__shared_weak_count *)*((void *)&v294 + 1);
          uint64_t v126 = v293;
        }
        else
        {
LABEL_132:
          *(std::logic_error *)v349 = v323;
          *(_OWORD *)&v349[16] = v324;
          uint64_t v350 = v325;
          *(std::logic_error *)v339 = v318;
          *(_OWORD *)&v339[16] = v319;
          uint64_t v340 = v320;
          *(_OWORD *)&v341.__r_.__value_.__l.__data_ = v294;
          AMCP::IO_Core::Stream_Connection::Stream_Connection((std::string *)v351, (long long *)v327, v98, 1, (long long *)v349, (uint64_t)v339, (uint64_t)&v341);
          if (v341.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v341.__r_.__value_.__l.__size_);
          }
          v55 = v288;
          if ((v327[23] & 0x80000000) != 0) {
            std::string::__init_copy_ctor_external(v343, *(const std::string::value_type **)v327, *(std::string::size_type *)&v327[8]);
          }
          else {
            v343[0] = *(std::string *)v327;
          }
          uint64_t v126 = v293;
          v343[1].__r_.__value_.__r.__words[0] = *(void *)&v327[24];
          LODWORD(v343[1].__r_.__value_.__r.__words[1]) = v328;
          AMCP::IO_Core::Stream_Connection::Stream_Connection((uint64_t)&v343[1].__r_.__value_.__r.__words[2], (long long *)v351);
          std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>>>::__emplace_unique_key_args<AMCP::Terminal_Identifier,std::pair<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>>((uint64_t)v292, (unsigned __int8 **)v343, (uint64_t)v343);
          AMCP::IO_Core::Stream_Connection::~Stream_Connection((OpaqueAudioConverter **)&v343[1].__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v343[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v343[0].__r_.__value_.__l.__data_);
          }
          AMCP::IO_Core::Stream_Connection::~Stream_Connection((OpaqueAudioConverter **)v351);
          v125 = 0;
        }
        if (v125) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v125);
        }
        if (v322) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v322);
        }
        v54 = v291;
        if ((v327[23] & 0x80000000) != 0) {
          operator delete(*(void **)v327);
        }
        ++v98;
        v95 = *v289;
        v96 = *v290;
        uint64_t v97 = v126 + 104;
      }
      while (v98 < 0x4EC4EC4EC4EC4EC5 * (((char *)*v289 - (char *)*v290) >> 3));
    }
    std::string::size_type v128 = *(void *)(*v54 + 112);
    v127 = *(std::__shared_weak_count **)(*v54 + 120);
    if (v127) {
      atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v129 = (*(uint64_t (**)(void))(*(void *)*v55 + 24))();
    (*(void (**)(unsigned char *__return_ptr))(*(void *)v129 + 16))(v339);
    if (v127)
    {
      atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v130 = *(void *)v339;
      atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v130 = *(void *)v339;
    }
    v131 = (void *)(v130 + 64);
    v343[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1465640;
    v343[0].__r_.__value_.__l.__size_ = v128;
    v343[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v127;
    if (v127)
    {
      atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
      v343[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v343;
      std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::swap[abi:ne180100](v343, v131);
      std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__value_func[abi:ne180100](v343);
      std::__shared_weak_count::__release_shared[abi:ne180100](v127);
      std::__shared_weak_count::__release_shared[abi:ne180100](v127);
    }
    else
    {
      v343[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v343;
      std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::swap[abi:ne180100](v343, v131);
      std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__value_func[abi:ne180100](v343);
    }
    std::string::size_type v132 = *v54;
    v133 = (std::__shared_weak_count *)v54[1];
    if (v133)
    {
      atomic_fetch_add_explicit(&v133->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v134 = *v54;
      uint64_t v135 = v54[1];
    }
    else
    {
      uint64_t v135 = 0;
      uint64_t v134 = *v54;
    }
    std::allocate_shared[abi:ne180100]<AMCP::IO_Core::Device_Connection,std::allocator<AMCP::IO_Core::Device_Connection>,std::shared_ptr<AMCP::IO_Core::Device_Node_State> const&,void>(v327, v134, v135);
    std::string::size_type v136 = *(void *)v327;
    v137 = *(std::__shared_weak_count **)&v327[8];
    if (*(void *)&v327[8]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v327[8] + 8), 1uLL, memory_order_relaxed);
    }
    v343[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1465720;
    v343[0].__r_.__value_.__l.__size_ = v136;
    v343[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v137;
    v343[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v343;
    std::__function::__value_func<std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::swap[abi:ne180100](v343, (void *)(*(void *)v339 + 96));
    std::__function::__value_func<std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::~__value_func[abi:ne180100](v343);
    *(void *)v351 = v132;
    *(void *)&v351[8] = v133;
    if (v133) {
      atomic_fetch_add_explicit(&v133->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v351[16], __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      std::string::size_type v132 = *(void *)v351;
      std::string::size_type v138 = *(void *)&v351[8];
    }
    else
    {
      *(std::string *)&v351[16] = __s;
      std::string::size_type v138 = (std::string::size_type)v133;
    }
    uint64_t v139 = *(void *)v339;
    v343[0].__r_.__value_.__r.__words[0] = v132;
    v343[0].__r_.__value_.__l.__size_ = v138;
    memset(v351, 0, sizeof(v351));
    *(_OWORD *)&v343[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&v351[16];
    v343[1].__r_.__value_.__l.__size_ = *(void *)&v351[32];
    v140 = (char *)operator new(0x30uLL);
    *(void *)v140 = &unk_1F14657B0;
    *((void *)v140 + 1) = v132;
    *((void *)v140 + 2) = v138;
    *(_OWORD *)(v140 + 24) = *(_OWORD *)&v343[0].__r_.__value_.__r.__words[2];
    *((void *)v140 + 5) = v343[1].__r_.__value_.__l.__size_;
    *(void *)&v349[24] = v140;
    std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::swap[abi:ne180100](v349, (void *)(v139 + 32));
    std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::~__value_func[abi:ne180100](v349);
    if ((v351[39] & 0x80000000) != 0) {
      operator delete(*(void **)&v351[16]);
    }
    if (*(void *)&v351[8]) {
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v351[8]);
    }
    if (v137) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v137);
    }
    if (v133) {
      std::__shared_weak_count::__release_weak(v133);
    }
    v55 = v288;
    if (*(void *)&v339[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v339[8]);
    }
    if (v127) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v127);
    }
    for (uint64_t n = 120; n != 72; n -= 24)
    {
      v343[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v331 + n;
      std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)v343);
    }
    if (v336 < 0) {
      operator delete(v335);
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v332.__imp_.__imp_) < 0) {
      operator delete(v331);
    }
    std::vector<AMCP::Node_Description>::__vdeallocate((void **)&v297.__vftable);
    std::logic_error v297 = (std::logic_error)v312;
    v298 = v313;
    std::string::pointer v313 = 0;
    int64x2_t v312 = 0uLL;
    v142 = (std::logic_error *)&v312;
LABEL_393:
    v343[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v142;
    std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)v343);
    std::vector<AMCP::Node_Description>::__insert_with_size[abi:ne180100]<std::__wrap_iter<AMCP::Node_Description*>,std::__wrap_iter<AMCP::Node_Description*>>(&v299, v300, (const AMCP::Node_Description *)v297.__vftable, (uint64_t)v297.__imp_.__imp_, 0xEEEEEEEEEEEEEEEFLL * ((v297.__imp_.__imp_ - (const char *)v297.__vftable) >> 3));
    v343[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v297;
    std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)v343);
    char v56 = v279;
LABEL_394:
    char v52 = 1;
    uint64_t v53 = 1;
  }
  while ((v56 & 1) == 0);
  *(void *)(v276 + 32) = 0;
  *(_OWORD *)uint64_t v276 = 0u;
  *(_OWORD *)(v276 + 16) = 0u;
  if (&v299 != (uint64_t *)v276)
  {
    uint64_t v239 = v299;
    uint64_t v240 = v300;
    if (v300 == v299)
    {
      uint64_t v244 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Node_Description *,AMCP::Node_Description *,AMCP::Node_Description *>(v299, v300, 0);
      for (iuint64_t i = *(void *)(v276 + 8); ii != v244; std::__destroy_at[abi:ne180100]<AMCP::Node_Description,0>(ii))
        ii -= 120;
      *(void *)(v276 + 8) = v244;
    }
    else
    {
      unint64_t v241 = 0xEEEEEEEEEEEEEEEFLL * ((v300 - v299) >> 3);
      std::vector<AMCP::Node_Description>::__vdeallocate((void **)v276);
      if (v241 > 0x222222222222222) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v242 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(*(void *)(v276 + 16) - *(void *)v276) >> 3);
      if (v242 <= v241) {
        unint64_t v242 = v241;
      }
      if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(v276 + 16) - *(void *)v276) >> 3) >= 0x111111111111111) {
        unint64_t v243 = 0x222222222222222;
      }
      else {
        unint64_t v243 = v242;
      }
      std::vector<AMCP::Node_Description>::__vallocate[abi:ne180100]((void *)v276, v243);
      *(void *)(v276 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Node_Description>,AMCP::Node_Description*,AMCP::Node_Description*,AMCP::Node_Description*>(v239, v240, *(void *)(v276 + 8));
    }
  }
  std::string::size_type v247 = *v54;
  std::string::size_type v246 = v54[1];
  if (v246) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v246 + 8), 1uLL, memory_order_relaxed);
  }
  v248 = *(std::__shared_weak_count **)(v276 + 32);
  *(void *)(v276 + 24) = v247;
  *(void *)(v276 + 32) = v246;
  if (v248) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v248);
  }
  v343[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v299;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)v343);
  if (v302) {
    operator delete(v302);
  }
  if (v305) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v305);
  }
  for (uint64_t jj = 0; jj != -48; jj -= 24)
  {
    v250 = *(void **)((char *)&v306[1] + jj + 8);
    if (v250)
    {
      *(void *)((char *)&v306[2] + jj) = v250;
      operator delete(v250);
    }
  }
  for (uint64_t kk = 24; kk != -24; kk -= 24)
  {
    v343[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v307 + kk;
    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)v343);
  }
}

void sub_1BAC1AF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  uint64_t v62 = 0;
  while (1)
  {
    v63 = *(void **)(&a55 + v62 + 24);
    if (v63)
    {
      *(void *)(&a55 + v62 + 32) = v63;
      operator delete(v63);
    }
    v62 -= 24;
    if (v62 == -48)
    {
      for (uint64_t i = 24; i != -24; i -= 24)
      {
        STACK[0x2F0] = (unint64_t)(&a61 + i);
        std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::construct_at[abi:ne180100]<AMCP::Terminal_Description,AMCP::Terminal_Description const&,AMCP::Terminal_Description*>(uint64_t a1, long long *a2)
{
  char v4 = 0;
  uint64_t v5 = 0;
  long long v6 = *a2;
  long long v7 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v6;
  *(_OWORD *)(a1 + 16) = v7;
  uint64_t v8 = a1 + 40;
  uint64_t v9 = (uint64_t)a2 + 40;
  do
  {
    char v10 = v4;
    v11 = (std::string *)(v8 + 24 * v5);
    v11->__r_.__value_.__r.__words[0] = 0;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v11, *(long long **)(v9 + 24 * v5), *(long long **)(v9 + 24 * v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v9 + 24 * v5 + 8) - *(void *)(v9 + 24 * v5)) >> 3));
    char v4 = 1;
    uint64_t v5 = 1;
  }
  while ((v10 & 1) == 0);
  uint64_t v12 = *((void *)a2 + 11);
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(void *)(a1 + 88) = v12;
  return a1;
}

void sub_1BAC1B940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((v12 & 1) == 0)
  {
    uint64_t v14 = 24 * v11;
    uint64_t v15 = v10 + 16;
    do
    {
      a10 = v15 + v14;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
      v14 -= 24;
    }
    while (v14);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<AMCP::Node_Description>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    char v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 120;
        std::__destroy_at[abi:ne180100]<AMCP::Node_Description,0>(v3);
      }
      while ((void *)v3 != v1);
      char v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::vector<AMCP::Node_Description>::__insert_with_size[abi:ne180100]<std::__wrap_iter<AMCP::Node_Description*>,std::__wrap_iter<AMCP::Node_Description*>>(uint64_t *result, uint64_t a2, const AMCP::Node_Description *a3, uint64_t a4, uint64_t a5)
{
  if (a5 >= 1)
  {
    long long v6 = a3;
    uint64_t v7 = a2;
    uint64_t v8 = result;
    uint64_t v9 = result + 2;
    uint64_t v10 = result[2];
    unint64_t v11 = result[1];
    if ((uint64_t)(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v10 - v11) >> 3)) >= a5)
    {
      uint64_t v19 = v11 - a2;
      if ((uint64_t)(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v11 - a2) >> 3)) >= a5)
      {
        uint64_t v20 = (uint64_t)a3 + 120 * a5;
        int v21 = (uint64_t *)result[1];
      }
      else
      {
        uint64_t v20 = (uint64_t)a3 + 8 * ((uint64_t)(v11 - a2) >> 3);
        result = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Node_Description>,AMCP::Node_Description*,AMCP::Node_Description*,AMCP::Node_Description*>(v20, a4, v11);
        int v21 = result;
        v8[1] = (uint64_t)result;
        if (v19 < 1) {
          return result;
        }
      }
      uint64_t v22 = v7 + 120 * a5;
      unint64_t v23 = (unint64_t)&v21[-15 * a5];
      uint64_t v24 = (uint64_t)v21;
      if (v23 < v11)
      {
        unint64_t v25 = (unint64_t)&v21[-15 * a5];
        uint64_t v24 = (uint64_t)v21;
        do
        {
          std::construct_at[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description,AMCP::Node_Description*>(v24, v25);
          v25 += 120;
          uint64_t v24 = v26 + 120;
        }
        while (v25 < v11);
      }
      v8[1] = v24;
      if (v21 != (uint64_t *)v22)
      {
        unint64_t v27 = v23;
        unint64_t v28 = v21;
        do
        {
          int v29 = *(_DWORD *)(v27 - 120);
          v27 -= 120;
          *((_DWORD *)v28 - 30) = v29;
          v28 -= 15;
          v30 = (void **)(v28 + 1);
          if (*((char *)v28 + 31) < 0) {
            operator delete(*v30);
          }
          long long v31 = *(_OWORD *)(v27 + 8);
          v28[3] = *(void *)(v27 + 24);
          *(_OWORD *)v30 = v31;
          *(unsigned char *)(v23 - 89) = 0;
          *(unsigned char *)(v23 - 112) = 0;
          *(v21 - 11) = *(void *)(v23 - 88);
          unint64_t v32 = (void **)(v21 - 10);
          if (*((char *)v21 - 57) < 0) {
            operator delete(*v32);
          }
          uint64_t v33 = 0;
          long long v34 = *(_OWORD *)(v23 - 80);
          *(v21 - 8) = *(void *)(v23 - 64);
          *(_OWORD *)unint64_t v32 = v34;
          *(unsigned char *)(v23 - 57) = 0;
          *(unsigned char *)(v23 - 80) = 0;
          *(v21 - 7) = *(void *)(v23 - 56);
          do
          {
            unint64_t v35 = &v21[v33];
            unint64_t v36 = v23 + v33 * 8;
            std::vector<AMCP::Terminal_Description>::__vdeallocate(&v21[v33 - 6]);
            *((_OWORD *)v35 - 3) = *(_OWORD *)(v23 + v33 * 8 - 48);
            *(v35 - 4) = *(void *)(v23 + v33 * 8 - 32);
            *(void *)(v36 - 48) = 0;
            *(void *)(v36 - 40) = 0;
            *(void *)(v36 - 32) = 0;
            v33 += 3;
          }
          while (v33 != 6);
          int v21 = v28;
          unint64_t v23 = v27;
        }
        while (v27 != v7);
      }
      return (uint64_t *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Node_Description *,AMCP::Node_Description *,AMCP::Node_Description *>((uint64_t)v6, v20, v7);
    }
    else
    {
      uint64_t v12 = *result;
      unint64_t v13 = a5 - 0x1111111111111111 * ((uint64_t)(v11 - *result) >> 3);
      if (v13 > 0x222222222222222) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v14 = 0xEEEEEEEEEEEEEEEFLL * ((a2 - v12) >> 3);
      unint64_t v15 = 0xEEEEEEEEEEEEEEEFLL * ((v10 - v12) >> 3);
      uint64_t v16 = 2 * v15;
      if (2 * v15 <= v13) {
        uint64_t v16 = a5 - 0x1111111111111111 * ((uint64_t)(v11 - *result) >> 3);
      }
      if (v15 >= 0x111111111111111) {
        unint64_t v17 = 0x222222222222222;
      }
      else {
        unint64_t v17 = v16;
      }
      uint64_t v50 = v9;
      if (v17) {
        unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Node_Description>>(v17);
      }
      else {
        uint64_t v18 = 0;
      }
      v37 = (AMCP::Node_Description *)(v17 + 120 * v14);
      unint64_t v46 = v17;
      unint64_t v47 = v37;
      uint64_t v48 = (uint64_t)v37;
      unint64_t v49 = v17 + 120 * v18;
      uint64_t v38 = 120 * a5;
      uint64_t v39 = (uint64_t)v37 + v38;
      do
      {
        AMCP::Node_Description::Node_Description(v37, v6);
        v37 = (AMCP::Node_Description *)((char *)v37 + 120);
        long long v6 = (const AMCP::Node_Description *)((char *)v6 + 120);
        v38 -= 120;
      }
      while (v38);
      uint64_t v40 = (uint64_t)v47;
      uint64_t v41 = *v8;
      if (*v8 != v7)
      {
        uint64_t v42 = v7;
        do
        {
          v40 -= 120;
          v42 -= 120;
          std::construct_at[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description,AMCP::Node_Description*>(v40, v42);
        }
        while (v42 != v41);
      }
      uint64_t v43 = v8[1];
      if (v43 != v7)
      {
        do
        {
          std::construct_at[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description,AMCP::Node_Description*>(v39, v7);
          v7 += 120;
          v39 += 120;
        }
        while (v7 != v43);
        uint64_t v7 = v8[1];
      }
      uint64_t v44 = (AMCP::Node_Description *)*v8;
      *uint64_t v8 = v40;
      v8[1] = v39;
      unint64_t v45 = v8[2];
      v8[2] = v49;
      uint64_t v48 = v7;
      unint64_t v49 = v45;
      unint64_t v46 = (unint64_t)v44;
      unint64_t v47 = v44;
      return (uint64_t *)std::__split_buffer<AMCP::Node_Description>::~__split_buffer((uint64_t)&v46);
    }
  }
  return result;
}

void sub_1BAC1BD30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::vector<AMCP::Node_Description>,std::shared_ptr<AMCP::IO_Core::Device_Node_State>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  char v4 = (void **)a1;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Node_Description>,AMCP::Node_Description*,AMCP::Node_Description*,AMCP::Node_Description*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      AMCP::Node_Description::Node_Description((AMCP::Node_Description *)(a3 + v6), (const AMCP::Node_Description *)(a1 + v6));
      v6 += 120;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Node_Description *,AMCP::Node_Description *,AMCP::Node_Description *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      *(_DWORD *)a3 = *(_DWORD *)v5;
      std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v5 + 8));
      *(void *)(a3 + 32) = *(void *)(v5 + 32);
      std::string::operator=((std::string *)(a3 + 40), (const std::string *)(v5 + 40));
      char v6 = 0;
      uint64_t v7 = 0;
      *(void *)(a3 + 64) = *(void *)(v5 + 64);
      do
      {
        char v8 = v6;
        if (a3 != v5)
        {
          uint64_t v9 = 3 * v7;
          std::vector<AMCP::Terminal_Description>::__assign_with_size[abi:ne180100]<AMCP::Terminal_Description*,AMCP::Terminal_Description*>((uint64_t *)(a3 + 72 + 8 * v9), *(long long **)(v5 + 72 + 8 * v9), *(long long **)(v5 + 72 + 8 * v9 + 8), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(v5 + 72 + 8 * v9 + 8) - *(void *)(v5 + 72 + 8 * v9)) >> 3));
        }
        char v6 = 1;
        uint64_t v7 = 1;
      }
      while ((v8 & 1) == 0);
      v5 += 120;
      a3 += 120;
    }
    while (v5 != a2);
  }
  return a3;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Node_Description>>(unint64_t a1)
{
  if (a1 >= 0x222222222222223) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(120 * a1);
}

uint64_t std::__split_buffer<AMCP::Node_Description>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 120;
    std::__destroy_at[abi:ne180100]<AMCP::Node_Description,0>(i - 120);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 std::construct_at[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description,AMCP::Node_Description*>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  long long v3 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  do
  {
    uint64_t v5 = (void *)(a1 + v2);
    char v6 = (void *)(a2 + v2);
    v5[9] = 0;
    v5[10] = 0;
    v5[11] = 0;
    __n128 result = *(__n128 *)(a2 + v2 + 72);
    *(__n128 *)(v5 + 9) = result;
    v5[11] = *(void *)(a2 + v2 + 88);
    v6[9] = 0;
    v6[10] = 0;
    v6[11] = 0;
    v2 += 24;
  }
  while (v2 != 48);
  return result;
}

void std::vector<AMCP::Terminal_Description>::__assign_with_size[abi:ne180100]<AMCP::Terminal_Description*,AMCP::Terminal_Description*>(uint64_t *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 3) < a4)
  {
    std::vector<AMCP::Terminal_Description>::__vdeallocate(a1);
    if (a4 > 0x276276276276276) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 3)) >= 0x13B13B13B13B13BLL) {
      unint64_t v11 = 0x276276276276276;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<AMCP::Terminal_Description>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Terminal_Description>,AMCP::Terminal_Description*,AMCP::Terminal_Description*,AMCP::Terminal_Description*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0x4EC4EC4EC4EC4EC5 * ((a1[1] - v9) >> 3) < a4)
  {
    uint64_t v13 = (long long *)((char *)a2 + 8 * ((a1[1] - v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Terminal_Description *,AMCP::Terminal_Description *,AMCP::Terminal_Description *>(a2, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Terminal_Description>,AMCP::Terminal_Description*,AMCP::Terminal_Description*,AMCP::Terminal_Description*>(v8, v13, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  uint64_t v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Terminal_Description *,AMCP::Terminal_Description *,AMCP::Terminal_Description *>(a2, a3, v9);
  for (uint64_t i = a1[1]; i != v14; i -= 104)
  {
    for (uint64_t j = -40; j != -88; j -= 24)
    {
      unint64_t v17 = (void **)(i + j);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
    }
  }
  a1[1] = v14;
}

void sub_1BAC1C1C8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BAC1C1D0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Terminal_Description *,AMCP::Terminal_Description *,AMCP::Terminal_Description *>(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      char v6 = 0;
      uint64_t v7 = 0;
      long long v8 = *v5;
      long long v9 = v5[1];
      *(void *)(a3 + 32) = *((void *)v5 + 4);
      *(_OWORD *)a3 = v8;
      *(_OWORD *)(a3 + 16) = v9;
      do
      {
        char v10 = v6;
        if ((long long *)a3 != v5)
        {
          uint64_t v11 = 3 * v7;
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a3 + 40 + 8 * v11), *((std::string **)v5 + v11 + 5), *((long long **)v5 + v11 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v5 + v11 + 6) - *((void *)v5 + v11 + 5)) >> 3));
        }
        char v6 = 1;
        uint64_t v7 = 1;
      }
      while ((v10 & 1) == 0);
      uint64_t v12 = *((void *)v5 + 11);
      *(unsigned char *)(a3 + 96) = *((unsigned char *)v5 + 96);
      *(void *)(a3 + 88) = v12;
      uint64_t v5 = (long long *)((char *)v5 + 104);
      a3 += 104;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::vector<AMCP::Terminal_Description>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<AMCP::Terminal_Description>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *a1, std::string *__str, long long *a3, unint64_t a4)
{
  char v6 = (long long *)__str;
  uint64_t p_end_cap = (uint64_t)&a1->__end_cap_;
  begiuint64_t n = a1->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v6, a3, a1->__end_);
LABEL_15:
    a1->__end_ = v12;
    return;
  }
  end = a1->__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) < a4)
  {
    uint64_t v14 = (long long *)(&__str->__r_.__value_.__l.__data_ + (((char *)end - (char *)begin) >> 3));
    if (end != begin)
    {
      uint64_t v15 = 8 * (((char *)end - (char *)begin) >> 3);
      do
      {
        std::string::operator=(begin, (const std::string *)v6);
        char v6 = (long long *)((char *)v6 + 24);
        ++begin;
        v15 -= 24;
      }
      while (v15);
      begiuint64_t n = a1->__end_;
    }
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v14, a3, begin);
    goto LABEL_15;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(begin, (const std::string *)v6);
      char v6 = (long long *)((char *)v6 + 24);
      ++begin;
    }
    while (v6 != a3);
    end = a1->__end_;
  }
  while (end != begin)
  {
    if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(end[-1].__r_.__value_.__l.__data_);
    }
    --end;
  }
  a1->__end_ = begin;
}

void sub_1BAC1C47C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>>>::__emplace_unique_key_args<AMCP::Terminal_Identifier,std::pair<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>>(uint64_t a1, unsigned __int8 **a2, uint64_t a3)
{
  unint64_t v7 = std::hash<AMCP::Terminal_Identifier>::operator()((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            uint64_t v40 = v13 + 2;
            uint64_t v41 = v13 + 5;
            uint64_t v42 = v13 + 6;
            v39[0] = a2;
            v39[1] = a2 + 3;
            v39[2] = a2 + 4;
            if (std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v40, v39))
            {
              return;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v15 = (void *)(a1 + 16);
  uint64_t v16 = operator new(0x198uLL);
  uint64_t v40 = v16;
  uint64_t v41 = (void *)(a1 + 16);
  *uint64_t v16 = 0;
  v16[1] = v8;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v17 = *(void *)(a3 + 24);
  v16[4] = *(void *)(a3 + 16);
  v16[5] = v17;
  *((_DWORD *)v16 + 12) = *(_DWORD *)(a3 + 32);
  *(void *)(a3 + 16) = 0;
  AMCP::IO_Core::Stream_Connection::Stream_Connection((uint64_t)(v16 + 7), (long long *)(a3 + 40));
  LOBYTE(v42) = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      int8x8_t prime = (int8x8_t)v22;
    }
    else {
      int8x8_t prime = (int8x8_t)v21;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (*(void *)&prime <= v30) {
        int8x8_t prime = (int8x8_t)v30;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v24 = operator new(8 * *(void *)&prime);
          unint64_t v25 = *(void **)a1;
          *(void *)a1 = v24;
          if (v25) {
            operator delete(v25);
          }
          uint64_t v26 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v26++) = 0;
          while (*(void *)&prime != v26);
          unint64_t v27 = (void *)*v15;
          if (*v15)
          {
            unint64_t v28 = v27[1];
            uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(void *)&prime) {
                v28 %= *(void *)&prime;
              }
            }
            else
            {
              v28 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v28) = v15;
            uint64_t v33 = (void *)*v27;
            if (*v27)
            {
              do
              {
                unint64_t v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(void *)&prime) {
                    v34 %= *(void *)&prime;
                  }
                }
                else
                {
                  v34 &= *(void *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v34))
                  {
                    *(void *)(*(void *)a1 + 8 * v34) = v27;
                    goto LABEL_55;
                  }
                  *unint64_t v27 = *v33;
                  *uint64_t v33 = **(void **)(*(void *)a1 + 8 * v34);
                  **(void **)(*(void *)a1 + 8 * v34) = v33;
                  uint64_t v33 = v27;
                }
                unint64_t v34 = v28;
LABEL_55:
                unint64_t v27 = v33;
                uint64_t v33 = (void *)*v33;
                unint64_t v28 = v34;
              }
              while (v33);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v38 = *(void **)a1;
        *(void *)a1 = 0;
        if (v38) {
          operator delete(v38);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  unint64_t v35 = *(void **)(*(void *)a1 + 8 * v3);
  unint64_t v36 = v40;
  if (v35)
  {
    *uint64_t v40 = *v35;
LABEL_72:
    *unint64_t v35 = v36;
    goto LABEL_73;
  }
  *uint64_t v40 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v36;
  *(void *)(*(void *)a1 + 8 * v3) = v15;
  if (*v36)
  {
    unint64_t v37 = *(void *)(*v36 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v37 >= v9) {
        v37 %= v9;
      }
    }
    else
    {
      v37 &= v9 - 1;
    }
    unint64_t v35 = (void *)(*(void *)a1 + 8 * v37);
    goto LABEL_72;
  }
LABEL_73:
  uint64_t v40 = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,void *>>>>::reset[abi:ne180100]((uint64_t)&v40);
}

void sub_1BAC1C928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::Stream_Connection::~Stream_Connection(OpaqueAudioConverter **this)
{
  std::unique_ptr<OpaqueAudioConverter,AMCP::IO_Core::Stream_Connection::AudioConverter_Deleter>::reset[abi:ne180100](this + 43, 0);
  uint64_t v2 = (std::__shared_weak_count *)this[42];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)this[35];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((unsigned char *)this + 264))
  {
    long long v4 = (std::__shared_weak_count *)this[32];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  uint64_t v5 = (std::__shared_weak_count *)this[27];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  char v6 = (std::__shared_weak_count *)this[25];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  unint64_t v7 = (std::__shared_weak_count *)this[18];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  unint64_t v8 = (std::__shared_weak_count *)this[13];
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t std::pair<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

OpaqueAudioConverter *std::unique_ptr<OpaqueAudioConverter,AMCP::IO_Core::Stream_Connection::AudioConverter_Deleter>::reset[abi:ne180100](OpaqueAudioConverter **a1, OpaqueAudioConverter *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result) {
    return (OpaqueAudioConverter *)AudioConverterDispose(result);
  }
  return result;
}

__n128 AMCP::IO_Core::Stream_Connection::Stream_Connection(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  uint64_t v3 = *((void *)a2 + 3);
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *(void *)(a1 + 24) = v3;
  long long v4 = *(long long *)((char *)a2 + 40);
  *(_OWORD *)(a1 + 56) = *(long long *)((char *)a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  long long v5 = *(long long *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 96) = a2[6];
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  long long v6 = a2[7];
  *(void *)(a1 + 128) = *((void *)a2 + 16);
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 136) = *(long long *)((char *)a2 + 136);
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  long long v7 = *(long long *)((char *)a2 + 152);
  long long v8 = *(long long *)((char *)a2 + 168);
  *(void *)(a1 + 184) = *((void *)a2 + 23);
  *(_OWORD *)(a1 + 168) = v8;
  *(_OWORD *)(a1 + 152) = v7;
  *(_OWORD *)(a1 + 192) = a2[12];
  *((void *)a2 + 24) = 0;
  *((void *)a2 + 25) = 0;
  *(_OWORD *)(a1 + 208) = a2[13];
  *((void *)a2 + 26) = 0;
  *((void *)a2 + 27) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  if (*((unsigned char *)a2 + 264))
  {
    long long v9 = a2[14];
    *(void *)(a1 + 240) = *((void *)a2 + 30);
    *(_OWORD *)(a1 + 224) = v9;
    *(_OWORD *)(a1 + 248) = *(long long *)((char *)a2 + 248);
    *((void *)a2 + 31) = 0;
    *((void *)a2 + 32) = 0;
    *(unsigned char *)(a1 + 264) = 1;
  }
  *(_OWORD *)(a1 + 272) = a2[17];
  *((void *)a2 + 34) = 0;
  *((void *)a2 + 35) = 0;
  __n128 result = (__n128)a2[18];
  long long v11 = a2[19];
  *(void *)(a1 + 320) = *((void *)a2 + 40);
  *(__n128 *)(a1 + 288) = result;
  *(_OWORD *)(a1 + 304) = v11;
  uint64_t v12 = *((void *)a2 + 42);
  *(void *)(a1 + 328) = *((void *)a2 + 41);
  *(void *)(a1 + 336) = v12;
  *((void *)a2 + 41) = 0;
  *((void *)a2 + 42) = 0;
  uint64_t v13 = *((void *)a2 + 43);
  *((void *)a2 + 43) = 0;
  *(void *)(a1 + 344) = v13;
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,AMCP::IO_Core::Stream_Connection>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::Terminal_Identifier const,AMCP::IO_Core::Stream_Connection>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<AMCP::Terminal_Identifier const,AMCP::IO_Core::Stream_Connection>,0>(uint64_t a1)
{
  AMCP::IO_Core::Stream_Connection::~Stream_Connection((OpaqueAudioConverter **)(a1 + 40));
  if (*(char *)(a1 + 23) < 0)
  {
    long long v2 = *(void **)a1;
    operator delete(v2);
  }
}

char *std::vector<AMCP::Node_Description>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Node_Description>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[120 * v4];
  return result;
}

uint64_t *std::vector<AMCP::Terminal_Description>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v6 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = 0;
      uint64_t v6 = v4 - 104;
      uint64_t v7 = v3 - 104;
      long long v8 = *(_OWORD *)(v3 - 104);
      long long v9 = *(_OWORD *)(v3 - 88);
      *(void *)(v4 - 72) = *(void *)(v3 - 72);
      *(_OWORD *)(v4 - 88) = v9;
      *(_OWORD *)(v4 - 104) = v8;
      do
      {
        uint64_t v10 = v4 + v5;
        uint64_t v11 = v3 + v5;
        *(void *)(v10 - 64) = 0;
        *(void *)(v10 - 56) = 0;
        *(void *)(v10 - 48) = 0;
        *(_OWORD *)(v10 - 64) = *(_OWORD *)(v3 + v5 - 64);
        *(void *)(v10 - 48) = *(void *)(v3 + v5 - 48);
        *(void *)(v11 - 64) = 0;
        *(void *)(v11 - 56) = 0;
        *(void *)(v11 - 48) = 0;
        v5 += 24;
      }
      while (v5 != 48);
      uint64_t v12 = *(void *)(v3 - 16);
      *(unsigned char *)(v4 - 8) = *(unsigned char *)(v3 - 8);
      *(void *)(v4 - 16) = v12;
      v4 -= 104;
      v3 -= 104;
    }
    while (v7 != v2);
  }
  a2[1] = v6;
  uint64_t v13 = *result;
  char *result = v6;
  a2[1] = v13;
  uint64_t v14 = result[1];
  result[1] = a2[2];
  a2[2] = v14;
  uint64_t v15 = result[2];
  result[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<AMCP::Terminal_Description>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = 0;
    *(void *)(a1 + 16) = i - 104;
    uint64_t v5 = i - 40;
    do
    {
      uint64_t v7 = (void **)(v5 + v4);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
      v4 -= 24;
    }
    while (v4 != -48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void HALS_IOUARegistrar::~HALS_IOUARegistrar(HALS_IOUARegistrar *this)
{
  HALS_IOUARegistrar::~HALS_IOUARegistrar(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1F1465A40;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 44));
  uint64_t v2 = *((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v2) {
    std::default_delete<applesauce::iokit::io_service_factory>::operator()[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v3) {
    std::default_delete<applesauce::iokit::io_service_factory>::operator()[abi:ne180100](v3);
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_IOUARegistrar *)((char *)this + 8));
}

void *std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_1,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_1>,void ()(applesauce::iokit::io_object_holder)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_1,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_1>,void ()(applesauce::iokit::io_object_holder)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN18HALS_IOUARegistrar10InitializeEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_1,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_1>,void ()(applesauce::iokit::io_object_holder)>::operator()(AMCP::Log::Scope_Registry *a1, io_object_t *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  io_object_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *((void *)a1 + 1);
  if (v2)
  {
    uint64_t v4 = IOObjectRetain(v2);
    if (v4)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      uint8x8_t v29 = std::system_category();
      MEMORY[0x1C1859250](exception, v4, v29, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
    uint64_t v5 = *(uint64_t **)(v3 + 344);
    io_object_t v33 = v2;
    a1 = (AMCP::Log::Scope_Registry *)IOObjectRetain(v2);
    uint64_t v6 = a1;
    if (a1)
    {
      unint64_t v30 = __cxa_allocate_exception(0x20uLL);
      uint8x8_t v31 = std::system_category();
      MEMORY[0x1C1859250](v30, v6, v31, "Error on Retain");
      __cxa_throw(v30, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
    uint64_t v7 = (uint64_t **)(v3 + 344);
    io_object_t v8 = v2;
  }
  else
  {
    io_object_t v8 = 0;
    uint64_t v7 = (uint64_t **)(v3 + 344);
    uint64_t v5 = *(uint64_t **)(v3 + 344);
    io_object_t v33 = 0;
  }
  long long v9 = (uint64_t *)(v3 + 352);
  if (v5 != (uint64_t *)(v3 + 352))
  {
    while (1)
    {
      uint64_t v10 = v5[4];
      if (v10) {
        break;
      }
LABEL_22:
      uint64_t v16 = (uint64_t *)v5[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (uint64_t *)v5[2];
          BOOL v15 = *v17 == (void)v5;
          uint64_t v5 = v17;
        }
        while (!v15);
      }
      uint64_t v5 = v17;
      if (v17 == v9) {
        goto LABEL_28;
      }
    }
    uint64_t v11 = *(io_object_t **)(v10 + 792);
    uint64_t v12 = *(std::__shared_weak_count **)(v10 + 800);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    io_object_t v13 = *v11;
    if (*v11)
    {
      a1 = (AMCP::Log::Scope_Registry *)IOObjectRetain(*v11);
      if (a1)
      {
        unint64_t v25 = a1;
        uint64_t v26 = __cxa_allocate_exception(0x20uLL);
        unint64_t v27 = std::system_category();
        MEMORY[0x1C1859250](v26, v25, v27, "Error on Retain");
        __cxa_throw(v26, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
      }
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    BOOL v14 = (v13 | v8) == 0;
    if (v13) {
      BOOL v15 = v2 == 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (v15)
    {
      if (!v13) {
        goto LABEL_21;
      }
    }
    else
    {
      BOOL v14 = IOObjectIsEqualTo(v13, v8) != 0;
    }
    a1 = (AMCP::Log::Scope_Registry *)IOObjectRelease(v13);
LABEL_21:
    if (v14) {
      goto LABEL_29;
    }
    goto LABEL_22;
  }
LABEL_28:
  uint64_t v5 = v9;
LABEL_29:
  if (v2) {
    a1 = (AMCP::Log::Scope_Registry *)IOObjectRelease(v8);
  }
  if (v5 == v9)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&block, "com.apple.coreaudio", "AMCP");
    unint64_t v22 = *block;
    if ((void)v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v35);
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v23 = pthread_self();
      mach_port_t v24 = pthread_mach_thread_np(v23);
      LODWORD(block) = 67109634;
      HIDWORD(block) = v24;
      LOWORD(v35) = 2080;
      *(void *)((char *)&v35 + 2) = "HALS_IOUARegistrar.cpp";
      WORD5(v35) = 1024;
      HIDWORD(v35) = 128;
      _os_log_debug_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Unknown io service termination", (uint8_t *)&block, 0x18u);
      if (!v2) {
        return;
      }
    }
    else if (!v2)
    {
      return;
    }
LABEL_42:
    IOObjectRelease(v2);
    IOObjectRelease(v2);
    return;
  }
  float v18 = (HALS_DeviceManager *)v5[4];
  v32[0] = 0;
  v32[1] = 0;
  HALS_System::GetInstance(&block, 0, v32);
  HALS_System::DeviceManagerDestroyed((HALS_System *)block, v18);
  if ((void)v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v35);
  }
  uint64_t v19 = (*(uint64_t (**)(HALS_DeviceManager *))(*(void *)v18 + 64))(v18);
  block = (NSObject **)MEMORY[0x1E4F143A8];
  *(void *)&long long v35 = 0x40000000;
  *((void *)&v35 + 1) = ___ZN15HALS_IOUADriver25RemoveAllDevicesAndNotifyEv_block_invoke;
  unint64_t v36 = &__block_descriptor_tmp_3084;
  unint64_t v37 = v18;
  unsigned __int8 v20 = atomic_load((unsigned __int8 *)(v19 + 32));
  if (v20) {
    atomic_store(1u, (unsigned __int8 *)(v19 + 33));
  }
  dispatch_sync(*(dispatch_queue_t *)v19, &block);
  HALS_ObjectMap::ReleaseObject(v18, v21);
  std::__tree<HALS_IOUADriver *>::__remove_node_pointer(v7, v5);
  operator delete(v5);
  if (v2) {
    goto LABEL_42;
  }
}

void sub_1BAC1D2A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13, uint64_t a14, uint64_t a15)
{
  if (a2)
  {
    __cxa_free_exception(v16);
    IOObjectRelease(v15);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    if (!v15) {
      JUMPOUT(0x1BAC1D120);
    }
    JUMPOUT(0x1BAC1D118);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<HALS_IOUADriver *>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  io_object_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      io_object_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  uint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
}

io_object_t *HALS_IOUARegistrar::_HandleServiceTerminated(applesauce::iokit::io_object_holder)::$_0::~$_0(io_object_t *a1)
{
  io_object_t v2 = *a1;
  if (v2) {
    IOObjectRelease(v2);
  }
  return a1;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      __n128 result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      __n128 result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v18 = v7[1];
      *(void *)uint64_t v12 = v18;
      if (v18) {
        *(void *)(v18 + 16) = v12;
      }
      v7[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(void *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12) {
        __n128 result = v7;
      }
      uint64_t v7 = *(uint64_t **)v12;
    }
    uint64_t v19 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_68;
    }
    unsigned __int8 v20 = (uint64_t *)v7[1];
    if (v20 && !*((unsigned char *)v20 + 24))
    {
      if (v19 && !*((unsigned char *)v19 + 24))
      {
LABEL_68:
        unsigned __int8 v20 = v7;
      }
      else
      {
        *((unsigned char *)v20 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v26 = *v20;
        v7[1] = *v20;
        if (v26) {
          *(void *)(v26 + 16) = v7;
        }
        v20[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
        *unsigned __int8 v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        uint64_t v19 = v7;
      }
      uint64_t v23 = v20[2];
      *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      mach_port_t v24 = *(uint64_t **)v23;
      uint64_t v27 = *(void *)(*(void *)v23 + 8);
      *(void *)uint64_t v23 = v27;
      if (v27) {
        *(void *)(v27 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    io_object_t v13 = *(uint64_t **)(v12 + 8);
    uint64_t v14 = *v13;
    *(void *)(v12 + 8) = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    v13[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
    uint64_t *v13 = v12;
    *(void *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7) {
      __n128 result = v7;
    }
    uint64_t v7 = *(uint64_t **)(*v7 + 8);
  }
  io_object_t v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_59;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  uint64_t v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_59:
    io_object_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = v15[1];
    *uint64_t v7 = v22;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    uint64_t v16 = v7;
  }
  uint64_t v23 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  mach_port_t v24 = *(uint64_t **)(v23 + 8);
  uint64_t v25 = *v24;
  *(void *)(v23 + 8) = *v24;
  if (v25) {
    *(void *)(v25 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  *mach_port_t v24 = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_1,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_1>,void ()(applesauce::iokit::io_object_holder)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1465AF0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_1,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_1>,void ()(applesauce::iokit::io_object_holder)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F1465AF0;
  result[1] = v3;
  return result;
}

void std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_1,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_1>,void ()(applesauce::iokit::io_object_holder)>::~__func()
{
}

void *std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_0,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_0,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN18HALS_IOUARegistrar10InitializeEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_0,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::operator()(uint64_t a1, io_object_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  io_object_t v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    uint64_t v3 = IOObjectRetain(v2);
    if (v3)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      int v5 = std::system_category();
      MEMORY[0x1C1859250](exception, v3, v5, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
  }
  uint64_t v6 = 0;
  operator new();
}

void sub_1BAC1E1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, AMCP::Utility::Dispatch_Queue *a10, HALB_Mutex *a11, HALS_IOUAObject *a12, _Unwind_Exception *exception_object, int a14, io_object_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a2)
  {
    __cxa_free_exception(v31);
    IOObjectRelease(v29);
    std::__shared_weak_count::~__shared_weak_count(v32);
    operator delete(v33);
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(a10);
    HALB_Mutex::~HALB_Mutex(a11);
    HALS_IOUAObject::~HALS_IOUAObject(a12, v34);
    *(void *)uint64_t v30 = &unk_1F14725F8;
    CACFString::~CACFString((CACFString *)(v30 + 48));
    HALS_Object::~HALS_Object((HALS_Object *)v30);
    applesauce::iokit::io_object_holder::~io_object_holder(&a15);
    if (a19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a19);
    }
    MEMORY[0x1C1859840](v30, 0x10E1C40C78D85C1);
    if (v29) {
      IOObjectRelease(v29);
    }
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (!v29) {
      JUMPOUT(0x1BAC1E0B8);
    }
    JUMPOUT(0x1BAC1E0B0);
  }
  _Unwind_Resume(a1);
}

void sub_1BAC1E404(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v13) {
    IOObjectRelease(v13);
  }
  JUMPOUT(0x1BAC1E244);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<HALS_IOUARegistrar::_HandleServiceMatch(applesauce::iokit::io_object_holder)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  if ((int)MEMORY[0x1C18597F0]() > *(_DWORD *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    (*(void (**)(void))(***(void ***)(a1 + 8) + 8))(**(void **)(a1 + 8));
    uint64_t v3 = *(void **)(v2 + 352);
    if (v3)
    {
      uint64_t v4 = (uint64_t **)(v2 + 344);
      int v5 = (uint64_t *)(v2 + 352);
      unint64_t v6 = **(void **)(a1 + 8);
      uint64_t v7 = (uint64_t *)(v2 + 352);
      do
      {
        unint64_t v8 = v3[4];
        BOOL v9 = v8 >= v6;
        if (v8 >= v6) {
          uint64_t v10 = v3;
        }
        else {
          uint64_t v10 = v3 + 1;
        }
        if (v9) {
          uint64_t v7 = v3;
        }
        uint64_t v3 = (void *)*v10;
      }
      while (*v10);
      if (v7 != v5 && v6 >= v7[4])
      {
        std::__tree<HALS_IOUADriver *>::__remove_node_pointer(v4, v7);
        operator delete(v7);
      }
    }
  }
  return a1;
}

uint64_t std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_0,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1465A70;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_0,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F1465A70;
  result[1] = v3;
  return result;
}

void std::__function::__func<HALS_IOUARegistrar::Initialize(void)::$_0,std::allocator<HALS_IOUARegistrar::Initialize(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::~__func()
{
}

void ADS::BooleanControl::AbortConfigChange(ADS::BooleanControl *this, unint64_t a2, ADS::BaseObject *a3)
{
  if (*(_DWORD *)a3 == 1650685548) {
    (*(void (**)(ADS::BaseObject *))(*(void *)a3 + 8))(a3);
  }
  else {
    ADS::BaseObject::AbortConfigChange(this, a2, (char *)a3);
  }
}

void ADS::BooleanControl::PerformConfigChange(ADS::BooleanControl *this, unint64_t a2, char *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)a3 + 3) == 1650685548)
  {
    uint64_t v4 = *((void *)this + 7);
    unint64_t v6 = (char *)this + 56;
    char v7 = (*(uint64_t (**)(char *))(v4 + 16))((char *)this + 56);
    std::__function::__value_func<int ()(void)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)(a3 + 24));
    if (v15)
    {
      int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 48))(v15);
      if (v5)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          BOOL v9 = "ADS_BooleanControl.cpp";
          __int16 v10 = 1024;
          int v11 = 193;
          __int16 v12 = 1024;
          int v13 = v5;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::BooleanControl::PerformConfigChange: Error %d in 'bcvl' config change", buf, 0x18u);
        }
      }
    }
    (*(void (**)(char *))(*(void *)a3 + 8))(a3);
    std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](v14);
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v6);
  }
  else
  {
    ADS::BaseObject::PerformConfigChange(this, a2, a3);
  }
}

void sub_1BAC1E75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void ADS::BooleanControl::SetPropertyData(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int *a8, _DWORD *a9, unint64_t *a10, unsigned __int8 a11)
{
  unsigned int v12 = a7;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a4 == 1650685548)
  {
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v19 = a1 + 56;
    char v20 = (*(uint64_t (**)(uint64_t))(v14 + 16))(a1 + 56);
    if (v12 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v23 = "ADS_BooleanControl.cpp";
        __int16 v24 = 1024;
        int v25 = 133;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::BooleanControl::SetPropertyData: not enough space in given data to set kAudioBooleanControlPropertyValue", buf, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = 561211770;
    }
    uint64_t v15 = *a8;
    if (*(_DWORD *)(a1 + 12) == 1702259059)
    {
      uint64_t v16 = (ADS::ObjectManager *)*(unsigned int *)(a1 + 20);
      if (ADS::ObjectManager::CopyObjectByObjectID(v16))
      {
        v21[0] = &unk_1F1465BF0;
        v21[1] = a1;
        v21[2] = v15 | ((void)v16 << 32);
        v21[3] = v21;
        operator new();
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v23 = "ADS_BooleanControl.cpp";
        __int16 v24 = 1024;
        int v25 = 141;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::BooleanControl::SetPropertyData: unknown device", buf, 0x12u);
      }
      uint64_t v18 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v18 = off_1F148A5D8;
      v18[2] = 560947818;
    }
    *(_DWORD *)(a1 + 144) = v15;
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v19);
  }
  else
  {
    ADS::BaseObject::SetPropertyData(a1, a2, a3, a4, a5, a6, a7, (uint64_t)a8, a9, a10, a11);
  }
}

void sub_1BAC1EB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ADS::ChangeInfoData<unsigned int>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);

  JUMPOUT(0x1C1859840);
}

void *ADS::ChangeInfoData<unsigned int>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);
  return a1;
}

void ADS::ChangeInfo::~ChangeInfo(ADS::ChangeInfo *this)
{
  *(void *)this = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100]((void *)this + 3);

  JUMPOUT(0x1C1859840);
}

{
  *(void *)this = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100]((void *)this + 3);
}

void *std::__function::__func<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0,std::allocator<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0>,int ()(void)>::target_type()
{
}

uint64_t std::__function::__func<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0,std::allocator<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0>,int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN3ADS14BooleanControl15SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0,std::allocator<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0>,int ()(void)>::operator()(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*(unsigned int *)(a1 + 20));
  int v5 = (ADS::ObjectManager *)v3;
  int v6 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v2 + 144) = v6;
  if (v3 && v6 != *(unsigned __int8 *)(v3 + 832))
  {
    *(unsigned char *)(v3 + 832) = v6 != 0;
    if (v6)
    {
      uint64_t v7 = *(void *)(v3 + 392);
      if (*(void *)(v3 + 384) != v7)
      {
        uint64_t v8 = ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*(unsigned int *)(v7 - 4));
        ADS::ObjectManager::GetNextObjectID((ADS::ObjectManager *)v8);
        std::set<CAStreamRangedDescription,CAStreamRangedDescription_ReverseSort,std::allocator<CAStreamRangedDescription>>::set[abi:ne180100]((uint64_t)&v26, (void *)(v8 + 104), v9);
        *(_OWORD *)unint64_t v28 = *(_OWORD *)(v8 + 56);
        *(_OWORD *)&v28[12] = *(_OWORD *)(v8 + 68);
        operator new();
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
LABEL_30:
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = off_1F148A5D8;
        exception[2] = 561211770;
      }
      buf[0] = 136315394;
      *(void *)&buf[1] = "ADS_Device.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3497;
      uint64_t v22 = MEMORY[0x1E4F14500];
      uint64_t v23 = "%25s:%-5d  ADS::Device::EnableReferenceStream: no output stream to reference";
LABEL_29:
      _os_log_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, v23, (uint8_t *)buf, 0x12u);
      goto LABEL_30;
    }
    __int16 v10 = *(_DWORD **)(v3 + 360);
    int v11 = *(_DWORD **)(v3 + 368);
    if (v10 == v11)
    {
      int v12 = 0;
    }
    else
    {
      int v12 = 0;
      while (1)
      {
        int v13 = (ADS::ObjectManager *)*v10;
        uint64_t v14 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID(v13);
        *(_DWORD *)unint64_t v28 = 0;
        int v26 = 0;
        strcpy((char *)buf, "spatbolg");
        BYTE1(buf[2]) = 0;
        HIWORD(buf[2]) = 0;
        (*(void (**)(ADS::ObjectManager *, ADS::ObjectManager *, void, _DWORD *, void, void, uint64_t, int *, unsigned char *))(*(void *)v14 + 56))(v14, v13, 0, buf, 0, 0, 4, &v26, v28);
        int v16 = *(_DWORD *)v28;
        if (*(_DWORD *)v28)
        {
          (*(void (**)(ADS::ObjectManager *))(*(void *)v14 + 8))(v14);
          int v12 = 1;
        }
        ADS::ObjectManager::ReleaseObject(v14, v15);
        if (v16) {
          break;
        }
        if (++v10 == v11)
        {
          __int16 v10 = v11;
          goto LABEL_21;
        }
      }
      if (v10 != v11)
      {
        for (uint64_t i = v10 + 1; i != v11; ++i)
        {
          uint64_t v18 = (ADS::ObjectManager *)*i;
          uint64_t v19 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID(v18);
          *(_DWORD *)unint64_t v28 = 0;
          int v26 = 0;
          strcpy((char *)buf, "spatbolg");
          BYTE1(buf[2]) = 0;
          HIWORD(buf[2]) = 0;
          (*(void (**)(ADS::ObjectManager *, ADS::ObjectManager *, void, _DWORD *, void, void, uint64_t, int *, unsigned char *))(*(void *)v19 + 56))(v19, v18, 0, buf, 0, 0, 4, &v26, v28);
          int v21 = *(_DWORD *)v28;
          if (*(_DWORD *)v28)
          {
            (*(void (**)(ADS::ObjectManager *))(*(void *)v19 + 8))(v19);
            int v12 = 1;
          }
          ADS::ObjectManager::ReleaseObject(v19, v20);
          if (!v21) {
            *v10++ = *i;
          }
        }
      }
    }
LABEL_21:
    if (v10 != *((_DWORD **)v5 + 46))
    {
      uint64_t v4 = (ADS::BaseObject *)*((void *)v5 + 46);
      *((void *)v5 + 46) = v10;
    }
    if (!v12)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_30;
      }
      buf[0] = 136315394;
      *(void *)&buf[1] = "ADS_Device.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3517;
      uint64_t v22 = MEMORY[0x1E4F14500];
      uint64_t v23 = "%25s:%-5d  ADS::Device::EnableReferenceStream: reference stream is missing";
      goto LABEL_29;
    }
  }
  ADS::ObjectManager::ReleaseObject(v5, v4);
  return 0;
}

void sub_1BAC1F2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

__n128 std::__function::__func<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0,std::allocator<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0>,int ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1465BF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0,std::allocator<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0>,int ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F1465BF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0,std::allocator<ADS::BooleanControl::SetPropertyData(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,unsigned int &,std::vector<AudioObjectPropertyAddress> &,ADS::SettabilityPolicy)::$_0>,int ()(void)>::~__func()
{
}

void ADS::BooleanControl::GetPropertyData(ADS::BooleanControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6, unsigned int a7, unsigned int *a8, char *a9)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a4->mSelector == 1650685548)
  {
    if (a7 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v13 = 136315394;
        *(void *)&v13[4] = "ADS_BooleanControl.cpp";
        __int16 v14 = 1024;
        int v15 = 111;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::BooleanControl::GetPropertyData: not enough space for the return value of kAudioBooleanControlPropertyValue", v13, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = 561211770;
    }
    uint64_t v11 = *((void *)this + 7);
    __int16 v10 = (char *)this + 56;
    *(void *)int v13 = (char *)this + 56;
    v13[8] = (*(uint64_t (**)(char *))(v11 + 16))((char *)this + 56);
    *(_DWORD *)a9 = *((_DWORD *)v10 + 22);
    *a8 = 4;
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)v13);
  }
  else
  {
    ADS::Control::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
  }
}

uint64_t ADS::BooleanControl::GetPropertyDataSize(ADS::BooleanControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6)
{
  AudioObjectPropertySelector mSelector = a4->mSelector;
  if (a4->mSelector == 1650685548 || mSelector == 1667591277 || mSelector == 1668506480) {
    return 4;
  }
  else {
    return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
  }
}

uint64_t ADS::BooleanControl::IsPropertySettable(ADS::BooleanControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  AudioObjectPropertySelector mSelector = a4->mSelector;
  if (a4->mSelector == 1650685548) {
    return 1;
  }
  if (mSelector == 1667591277 || mSelector == 1668506480) {
    return 0;
  }
  else {
    return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
  }
}

BOOL ADS::BooleanControl::HasProperty(ADS::BooleanControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  AudioObjectPropertySelector mSelector = a4->mSelector;
  return a4->mSelector == 1650685548
      || mSelector == 1667591277
      || mSelector == 1668506480
      || ADS::BaseObject::HasProperty(this, a2, a3, a4);
}

void ADS::BooleanControl::~BooleanControl(ADS::BooleanControl *this)
{
  *(void *)this = &unk_1F147E368;
  CADeprecated::CAMutex::~CAMutex((ADS::BooleanControl *)((char *)this + 56));
  ADS::BaseObject::~BaseObject(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F147E368;
  CADeprecated::CAMutex::~CAMutex((ADS::BooleanControl *)((char *)this + 56));

  ADS::BaseObject::~BaseObject(this);
}

uint64_t HALS_PDPDevice::_CopyControlByDescription(HALS_PDPDevice *this, int a2, int a3, int a4)
{
  v8[0] = a2;
  v8[1] = a3;
  v8[2] = a4;
  int v5 = (unsigned int *)std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::tuple<unsigned int,unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::less<std::tuple<unsigned int,unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>>>::find<std::tuple<unsigned int,unsigned int,unsigned int>>((uint64_t)this + 1304, v8);
  if ((unsigned int *)((char *)this + 1312) == v5) {
    int v6 = 0;
  }
  else {
    int v6 = (HALS_ObjectMap *)v5[10];
  }

  return HALS_ObjectMap::CopyObjectByObjectID(v6);
}

uint64_t std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::tuple<unsigned int,unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::less<std::tuple<unsigned int,unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>>>::find<std::tuple<unsigned int,unsigned int,unsigned int>>(uint64_t a1, int *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    char v6 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,0ul,1ul,2ul>((int *)(v3 + 28), a2);
    if (v6 >= 0) {
      uint64_t v7 = (uint64_t *)v3;
    }
    else {
      uint64_t v7 = (uint64_t *)(v3 + 8);
    }
    if (v6 >= 0) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,0ul,1ul,2ul>(a2, (_DWORD *)(v5 + 28)) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

uint64_t std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,0ul,1ul,2ul>(int *a1, _DWORD *a2)
{
  int v3 = *a1;
  if (*a1 < *a2) {
    uint64_t result = 0xFFFFFFFFLL;
  }
  else {
    uint64_t result = 1;
  }
  if (v3 == *a2)
  {
    unsigned int v5 = a1[1];
    unsigned int v6 = a2[1];
    uint64_t result = v5 < v6 ? 0xFFFFFFFFLL : 1;
    if (v5 == v6)
    {
      unsigned int v7 = a1[2];
      unsigned int v8 = a2[2];
      BOOL v9 = v7 == v8;
      if (v7 < v8) {
        unsigned int v10 = -1;
      }
      else {
        unsigned int v10 = 1;
      }
      if (v9) {
        return 0;
      }
      else {
        return v10;
      }
    }
  }
  return result;
}

HALS_ObjectMap *HALS_PDPDevice::_CopyControlByIndex(HALS_PDPDevice *this, unsigned int a2)
{
  unsigned int v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  HALS_PDPDevice::_CopyControlList((uint64_t)this, &v10);
  unint64_t v4 = a2;
  unsigned int v5 = v10;
  unsigned int v6 = v11;
  if (v4 >= v11 - v10)
  {
    unsigned int v7 = 0;
  }
  else
  {
    unsigned int v7 = v10[v4];
    HALS_ObjectMap::RetainObject(v7, v3);
  }
  if (v5 == v6)
  {
    unsigned int v5 = v6;
    if (!v6) {
      return v7;
    }
    goto LABEL_8;
  }
  unsigned int v8 = v5;
  do
    HALS_ObjectMap::ReleaseObject(*v8++, v3);
  while (v8 != v6);
  if (v5) {
LABEL_8:
  }
    operator delete(v5);
  return v7;
}

void sub_1BAC1F9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PDPDevice::_CopyControlList(uint64_t a1, HALS_ObjectMap ***a2)
{
  a2[1] = *a2;
  uint64_t v2 = *(void **)(a1 + 1304);
  int v3 = (void *)(a1 + 1312);
  if (v2 != (void *)(a1 + 1312))
  {
    do
    {
      unsigned int v5 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)v2 + 10));
      unsigned int v7 = v5;
      if (v5)
      {
        HALS_ObjectMap::RetainObject(v5, v6);
        BOOL v9 = a2[1];
        unint64_t v8 = (unint64_t)a2[2];
        if ((unint64_t)v9 >= v8)
        {
          uint64_t v11 = *a2;
          uint64_t v12 = v9 - *a2;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v14 = v8 - (void)v11;
          if (v14 >> 2 > v13) {
            unint64_t v13 = v14 >> 2;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15)
          {
            if (v15 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v16 = (char *)operator new(8 * v15);
          }
          else
          {
            uint64_t v16 = 0;
          }
          uint64_t v17 = (HALS_ObjectMap **)&v16[8 * v12];
          *uint64_t v17 = v7;
          unsigned int v10 = v17 + 1;
          if (v9 != v11)
          {
            do
            {
              uint64_t v18 = *--v9;
              *--uint64_t v17 = v18;
            }
            while (v9 != v11);
            BOOL v9 = *a2;
          }
          *a2 = v17;
          a2[1] = v10;
          a2[2] = (HALS_ObjectMap **)&v16[8 * v15];
          if (v9) {
            operator delete(v9);
          }
        }
        else
        {
          const AudioStreamRangedDescription *v9 = v7;
          unsigned int v10 = v9 + 1;
        }
        a2[1] = v10;
      }
      HALS_ObjectMap::ReleaseObject(v7, v6);
      uint64_t v19 = (void *)v2[1];
      if (v19)
      {
        do
        {
          char v20 = v19;
          uint64_t v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          char v20 = (void *)v2[2];
          BOOL v21 = *v20 == (void)v2;
          uint64_t v2 = v20;
        }
        while (!v21);
      }
      uint64_t v2 = v20;
    }
    while (v20 != v3);
  }
}

void sub_1BAC1FB50(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

unint64_t HALS_PDPDevice::_GetNumberControls(HALS_PDPDevice *this)
{
  unsigned int v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  HALS_PDPDevice::_CopyControlList((uint64_t)this, &v7);
  uint64_t v2 = v7;
  int v3 = v8;
  if (v7 == v8)
  {
    unsigned int v5 = v8;
    if (!v8) {
      return (unint64_t)((char *)v3 - (char *)v2) >> 3;
    }
    goto LABEL_5;
  }
  unint64_t v4 = v7;
  do
    HALS_ObjectMap::ReleaseObject(*v4++, v1);
  while (v4 != v3);
  unsigned int v5 = v2;
  if (v2) {
LABEL_5:
  }
    operator delete(v5);
  return (unint64_t)((char *)v3 - (char *)v2) >> 3;
}

void sub_1BAC1FBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PDPDevice::_CopyControls(HALS_PDPDevice *this, HALS_Device::BasicControlList *a2)
{
  uint64_t v2 = (char *)*((void *)this + 163);
  int v3 = (char *)this + 1312;
  if (v2 != (char *)this + 1312)
  {
    do
    {
      unsigned int v5 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)v2 + 10));
      unsigned int v7 = v5;
      if (v5)
      {
        HALS_ObjectMap::RetainObject(v5, v6);
        uint64_t v9 = (HALS_ObjectMap **)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
        if ((unint64_t)v9 >= v8)
        {
          uint64_t v11 = ((uint64_t)v9 - *(void *)a2) >> 3;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v12 = v8 - *(void *)a2;
          uint64_t v13 = v12 >> 2;
          if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
            uint64_t v13 = v11 + 1;
          }
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v13;
          }
          if (v14) {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v14);
          }
          else {
            unsigned int v6 = 0;
          }
          unint64_t v15 = (HALS_ObjectMap **)(v14 + 8 * v11);
          *unint64_t v15 = v7;
          unsigned int v10 = v15 + 1;
          uint64_t v17 = *(char **)a2;
          uint64_t v16 = (char *)*((void *)a2 + 1);
          if (v16 != *(char **)a2)
          {
            do
            {
              uint64_t v18 = (HALS_ObjectMap *)*((void *)v16 - 1);
              v16 -= 8;
              *--unint64_t v15 = v18;
            }
            while (v16 != v17);
            uint64_t v16 = *(char **)a2;
          }
          *(void *)a2 = v15;
          *((void *)a2 + 1) = v10;
          *((void *)a2 + 2) = v14 + 8 * (void)v6;
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          const AudioStreamRangedDescription *v9 = v7;
          unsigned int v10 = v9 + 1;
        }
        *((void *)a2 + 1) = v10;
      }
      HALS_ObjectMap::ReleaseObject(v7, v6);
      uint64_t v19 = (char *)*((void *)v2 + 1);
      if (v19)
      {
        do
        {
          char v20 = v19;
          uint64_t v19 = *(char **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          char v20 = (char *)*((void *)v2 + 2);
          BOOL v21 = *(void *)v20 == (void)v2;
          uint64_t v2 = v20;
        }
        while (!v21);
      }
      uint64_t v2 = v20;
    }
    while (v20 != v3);
  }
}

void sub_1BAC1FD68(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void HALS_PDPDevice::_CopyStreamList(uint64_t a1, int a2, char **a3)
{
  a3[1] = *a3;
  *(void *)&v25.AudioObjectPropertySelector mSelector = 0x6F75747073746D23;
  v25.mElement = 0;
  if (a2) {
    v25.mScope = 1768845428;
  }
  unsigned int PropertyDataSize = HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(*(HALS_PDPUCPlugIn **)(*(void *)(a1 + 1336) + 64), *(unsigned int *)(a1 + 16), &v25, 0, 0);
  unsigned int v24 = PropertyDataSize;
  if (PropertyDataSize >= 4)
  {
    std::vector<unsigned int>::value_type __x = 0;
    std::vector<unsigned int>::vector(&v23, PropertyDataSize >> 2, &__x);
    HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(*(void *)(a1 + 1336) + 72), *(unsigned int *)(a1 + 16), &v25, 0, 0, &v24, v23.__begin_);
    begiuint64_t n = v23.__begin_;
    std::vector<unsigned int>::pointer end = v23.__end_;
    if (v23.__begin_ != v23.__end_)
    {
      do
      {
        uint64_t v8 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*begin);
        uint64_t v9 = v8;
        if (v8)
        {
          uint64_t v11 = (uint64_t *)a3[1];
          unint64_t v10 = (unint64_t)a3[2];
          if ((unint64_t)v11 >= v10)
          {
            uint64_t v13 = ((char *)v11 - *a3) >> 3;
            if ((unint64_t)(v13 + 1) >> 61) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v14 = v10 - (void)*a3;
            uint64_t v15 = v14 >> 2;
            if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
              uint64_t v15 = v13 + 1;
            }
            if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v16 = v15;
            }
            if (v16) {
              unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v16);
            }
            else {
              uint64_t v17 = 0;
            }
            uint64_t v18 = (uint64_t *)(v16 + 8 * v13);
            *uint64_t v18 = v9;
            uint64_t v12 = (char *)(v18 + 1);
            char v20 = *a3;
            uint64_t v19 = a3[1];
            if (v19 != *a3)
            {
              do
              {
                uint64_t v21 = *((void *)v19 - 1);
                v19 -= 8;
                *--uint64_t v18 = v21;
              }
              while (v19 != v20);
              uint64_t v19 = *a3;
            }
            *a3 = (char *)v18;
            a3[1] = v12;
            a3[2] = (char *)(v16 + 8 * v17);
            if (v19) {
              operator delete(v19);
            }
          }
          else
          {
            uint64_t *v11 = v8;
            uint64_t v12 = (char *)(v11 + 1);
          }
          a3[1] = v12;
        }
        ++begin;
      }
      while (begin != end);
      begiuint64_t n = v23.__begin_;
    }
    if (begin)
    {
      v23.__end_ = begin;
      operator delete(begin);
    }
  }
}

void sub_1BAC1FF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PDPDevice::_GetTotalNumberChannels(HALS_PDPDevice *this, uint64_t a2)
{
  std::string __p = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  (*(void (**)(HALS_PDPDevice *, uint64_t, void **))(*(void *)this + 560))(this, a2, &__p);
  uint64_t v2 = (HALS_Stream **)__p;
  int v3 = v9;
  if (__p == v9)
  {
    uint64_t v4 = 0;
    if (!__p) {
      return v4;
    }
    goto LABEL_5;
  }
  LODWORD(v4) = 0;
  do
  {
    int NumberChannels = HALS_Stream::GetNumberChannels(*v2);
    HALS_ObjectMap::ReleaseObject(*v2, v6);
    uint64_t v4 = (NumberChannels + v4);
    ++v2;
  }
  while (v2 != v3);
  uint64_t v2 = (HALS_Stream **)__p;
  if (__p)
  {
LABEL_5:
    uint64_t v9 = v2;
    operator delete(v2);
  }
  return v4;
}

void sub_1BAC20024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

HALS_ObjectMap *HALS_PDPDevice::_CopyIOEngine(HALS_ObjectMap **this, HALS_Object *a2)
{
  return this[166];
}

HALS_ObjectMap *HALS_PDPDevice::_CopyStreamByIndex(HALS_PDPDevice *this, uint64_t a2, unsigned int a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  (*(void (**)(HALS_PDPDevice *, uint64_t, HALS_ObjectMap ***))(*(void *)this + 560))(this, a2, &v10);
  uint64_t v5 = a3;
  unsigned int v7 = v10;
  unsigned int v6 = v11;
  if (a3 >= (unint64_t)(v11 - v10))
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = v10[a3];
    HALS_ObjectMap::RetainObject(v10[v5], v4);
    unsigned int v7 = v10;
    unsigned int v6 = v11;
  }
  if (v7 != v6)
  {
    do
      HALS_ObjectMap::ReleaseObject(*v7++, v4);
    while (v7 != v6);
    unsigned int v6 = v10;
  }
  if (v6)
  {
    uint64_t v11 = v6;
    operator delete(v6);
  }
  return v8;
}

void sub_1BAC20138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t HALS_PDPDevice::_GetNumberStreams(HALS_PDPDevice *this, uint64_t a2)
{
  std::string __p = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  (*(void (**)(HALS_PDPDevice *, uint64_t, void **))(*(void *)this + 560))(this, a2, &__p);
  uint64_t v4 = __p;
  int v3 = v9;
  if (__p == v9)
  {
    unsigned int v6 = v9;
    if (!v9) {
      return (unint64_t)((char *)v3 - v4) >> 3;
    }
    goto LABEL_5;
  }
  uint64_t v5 = (HALS_ObjectMap **)__p;
  do
    HALS_ObjectMap::ReleaseObject(*v5++, v2);
  while (v5 != v3);
  unsigned int v6 = (HALS_ObjectMap **)__p;
  if (__p)
  {
LABEL_5:
    uint64_t v9 = v6;
    operator delete(v6);
  }
  return (unint64_t)((char *)v3 - v4) >> 3;
}

void sub_1BAC20204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PDPDevice::_GetClockAlgorithm(HALS_PDPDevice *this)
{
  return 1835103847;
}

void HALS_PDPDevice::create_mcp_engine(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void HALS_PDPDevice::OwnedObjectsPublishedAndDied(HALS_PDPDevice *this, unsigned int a2, const unsigned int *a3, unsigned int a4, const unsigned int *a5)
{
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint8x8_t v31 = (uint64_t *)&v32;
  if (a2)
  {
    for (uint64_t i = a2; i; --i)
    {
      uint64_t v10 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*a3);
      uint64_t v12 = v10;
      if (v10)
      {
        unsigned int v13 = *(_DWORD *)(v10 + 20);
        BOOL IsSubClass = HALB_Info::IsSubClass((HALB_Info *)v13, 1633907820);
        uint64_t v15 = (HALB_Info *)*(unsigned int *)(v12 + 24);
        if (v13 == v15 || IsSubClass)
        {
          if (v13 != v15) {
            BOOL IsSubClass = 1;
          }
          if (!IsSubClass) {
            goto LABEL_12;
          }
        }
        else if (!HALB_Info::IsSubClass(v15, 1633907820))
        {
          goto LABEL_12;
        }
        LODWORD(v29) = v13;
        *(void *)((char *)&v29 + 4) = *(void *)(v12 + 48);
        HIDWORD(v29) = *a3;
        std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::tuple<unsigned int,unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::less<std::tuple<unsigned int,unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>>>::__emplace_unique_key_args<std::tuple<unsigned int,unsigned int,unsigned int>,std::pair<std::tuple<unsigned int,unsigned int,unsigned int> const,unsigned int>>(&v31, (int *)&v29, &v29);
      }
LABEL_12:
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v12, v11);
      ++a3;
    }
  }
  *((void *)&v29 + 1) = 0;
  uint64_t v30 = 0;
  *(void *)&long long v29 = (char *)&v29 + 8;
  if (!a4)
  {
    BOOL v23 = 1;
    goto LABEL_27;
  }
  uint64_t v16 = a4;
  do
  {
    uint64_t v17 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*a5);
    uint64_t v19 = v17;
    if (!v17) {
      goto LABEL_24;
    }
    unsigned int v20 = *(_DWORD *)(v17 + 20);
    BOOL v21 = HALB_Info::IsSubClass((HALB_Info *)v20, 1633907820);
    uint64_t v22 = (HALB_Info *)*(unsigned int *)(v19 + 24);
    if (v20 == v22 || v21)
    {
      if (v20 != v22) {
        BOOL v21 = 1;
      }
      if (v21)
      {
LABEL_23:
        LODWORD(v28) = v20;
        *(void *)((char *)&v28 + 4) = *(void *)(v19 + 48);
        HIDWORD(v28) = *a5;
        std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::tuple<unsigned int,unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::less<std::tuple<unsigned int,unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>>>::__emplace_unique_key_args<std::tuple<unsigned int,unsigned int,unsigned int>,std::pair<std::tuple<unsigned int,unsigned int,unsigned int> const,unsigned int>>((uint64_t **)&v29, (int *)&v28, &v28);
      }
    }
    else if (HALB_Info::IsSubClass(v22, 1633907820))
    {
      goto LABEL_23;
    }
LABEL_24:
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v19, v18);
    ++a5;
    --v16;
  }
  while (v16);
  BOOL v23 = v30 == 0;
LABEL_27:
  if (v33 || !v23)
  {
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 1174405120;
    v25[2] = ___ZN14HALS_PDPDevice28OwnedObjectsPublishedAndDiedEjPKjjS1__block_invoke;
    v25[3] = &__block_descriptor_tmp_9_3932;
    v25[4] = this;
    std::map<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>::map[abi:ne180100]((uint64_t)v26, &v29);
    std::map<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>::map[abi:ne180100]((uint64_t)v27, &v31);
    unsigned int v24 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPDevice *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v24, (uint64_t)v25);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v27[1]);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v26[1]);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)&v29 + 1));
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v32);
}

void sub_1BAC204AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a16);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a24);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(void **)(v24 - 80));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::tuple<unsigned int,unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::less<std::tuple<unsigned int,unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>>>::__emplace_unique_key_args<std::tuple<unsigned int,unsigned int,unsigned int>,std::pair<std::tuple<unsigned int,unsigned int,unsigned int> const,unsigned int>>(uint64_t **a1, int *a2, _OWORD *a3)
{
  uint64_t result = std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::tuple<unsigned int,unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::less<std::tuple<unsigned int,unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>>>::__find_equal<std::tuple<unsigned int,unsigned int,unsigned int>>((uint64_t)a1, &v9, a2);
  if (!*result)
  {
    unsigned int v6 = (uint64_t **)result;
    unsigned int v7 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v7 + 28) = *a3;
    uint64_t v8 = v9;
    return std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(a1, v8, v6, (uint64_t *)v7);
  }
  return result;
}

void ___ZN14HALS_PDPDevice28OwnedObjectsPublishedAndDiedEjPKjjS1__block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  int v3 = (void *)a1[5];
  uint64_t v4 = a1 + 6;
  if (v3 != a1 + 6)
  {
    uint64_t v5 = (uint64_t **)(v2 + 1312);
    do
    {
      unsigned int v6 = *v5;
      if (*v5)
      {
        unsigned int v7 = (uint64_t *)(v2 + 1312);
        uint64_t v8 = *v5;
        do
        {
          char v9 = std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,0ul,1ul,2ul>((int *)v8 + 7, (_DWORD *)v3 + 7);
          if (v9 >= 0) {
            uint64_t v10 = (uint64_t **)v8;
          }
          else {
            uint64_t v10 = (uint64_t **)(v8 + 1);
          }
          if (v9 >= 0) {
            unsigned int v7 = v8;
          }
          uint64_t v8 = *v10;
        }
        while (*v10);
        if (v7 != (uint64_t *)v5
          && (std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,0ul,1ul,2ul>((int *)v3 + 7, (_DWORD *)v7 + 7) & 0x80) == 0)
        {
          uint64_t v11 = (uint64_t *)v7[1];
          uint64_t v12 = v7;
          if (v11)
          {
            do
            {
              unsigned int v13 = v11;
              uint64_t v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              unsigned int v13 = (uint64_t *)v12[2];
              BOOL v14 = *v13 == (void)v12;
              uint64_t v12 = v13;
            }
            while (!v14);
          }
          if (*(uint64_t **)(v2 + 1304) == v7) {
            *(void *)(v2 + 1304) = v13;
          }
          --*(void *)(v2 + 1320);
          std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, v7);
          operator delete(v7);
        }
      }
      uint64_t v15 = (void *)v3[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v3[2];
          BOOL v14 = *v16 == (void)v3;
          int v3 = v16;
        }
        while (!v14);
      }
      int v3 = v16;
    }
    while (v16 != v4);
  }
  uint64_t v17 = (int *)a1[8];
  if (v17 != (int *)(a1 + 9))
  {
    do
    {
      uint64_t v18 = (uint64_t **)std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::tuple<unsigned int,unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::less<std::tuple<unsigned int,unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>>>::__find_equal<std::tuple<unsigned int,unsigned int,unsigned int>>(v2 + 1304, &v23, v17 + 7);
      if (!*v18)
      {
        uint64_t v19 = v18;
        unsigned int v20 = (char *)operator new(0x30uLL);
        *(_OWORD *)(v20 + 28) = *(_OWORD *)(v17 + 7);
        std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at((uint64_t **)(v2 + 1304), v23, v19, (uint64_t *)v20);
      }
      BOOL v21 = (int *)*((void *)v17 + 1);
      if (v21)
      {
        do
        {
          uint64_t v22 = v21;
          BOOL v21 = *(int **)v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          uint64_t v22 = (int *)*((void *)v17 + 2);
          BOOL v14 = *(void *)v22 == (void)v17;
          uint64_t v17 = v22;
        }
        while (!v14);
      }
      uint64_t v17 = v22;
    }
    while (v22 != (int *)(a1 + 9));
  }
}

uint64_t std::map<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>::map[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = (int *)(a2 + 1);
  uint64_t v5 = (int *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(void *)(a1 + 8);
      uint64_t v7 = v3;
      if (*(void *)a1 == v3) {
        goto LABEL_9;
      }
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = v8;
          uint64_t v8 = *(void *)(v8 + 8);
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v7 = *(void *)(v9 + 16);
          BOOL v10 = *(void *)v7 == v9;
          uint64_t v9 = v7;
        }
        while (v10);
      }
      if ((std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,0ul,1ul,2ul>((int *)(v7 + 28), v5 + 7) & 0x80) != 0)
      {
LABEL_9:
        if (!v6)
        {
          uint64_t v16 = v3;
          uint64_t v11 = (uint64_t **)v3;
LABEL_14:
          uint64_t v12 = (char *)operator new(0x30uLL);
          *(_OWORD *)(v12 + 28) = *(_OWORD *)(v5 + 7);
          std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at((uint64_t **)a1, v16, v11, (uint64_t *)v12);
          goto LABEL_15;
        }
        uint64_t v16 = v7;
        uint64_t v11 = (uint64_t **)(v7 + 8);
      }
      else
      {
        uint64_t v11 = (uint64_t **)std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::tuple<unsigned int,unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::less<std::tuple<unsigned int,unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>>>::__find_equal<std::tuple<unsigned int,unsigned int,unsigned int>>(a1, &v16, v5 + 7);
      }
      if (!*v11) {
        goto LABEL_14;
      }
LABEL_15:
      unsigned int v13 = (int *)*((void *)v5 + 1);
      if (v13)
      {
        do
        {
          BOOL v14 = v13;
          unsigned int v13 = *(int **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          BOOL v14 = (int *)*((void *)v5 + 2);
          BOOL v10 = *(void *)v14 == (void)v5;
          uint64_t v5 = v14;
        }
        while (!v10);
      }
      uint64_t v5 = v14;
    }
    while (v14 != v4);
  }
  return a1;
}

void sub_1BAC208D8(_Unwind_Exception *a1)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::tuple<unsigned int,unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::less<std::tuple<unsigned int,unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>>>::__find_equal<std::tuple<unsigned int,unsigned int,unsigned int>>(uint64_t a1, void *a2, int *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = (void *)v4;
        uint64_t v8 = (int *)(v4 + 28);
        if ((std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,0ul,1ul,2ul>(a3, (_DWORD *)(v4 + 28)) & 0x80) == 0)break; {
        uint64_t v4 = *v7;
        }
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((std::__tuple_compare_three_way[abi:ne180100]<unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,0ul,1ul,2ul>(v8, a3) & 0x80) == 0)break; {
      uint64_t v5 = v7 + 1;
      }
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void __destroy_helper_block_e8_40c82_ZTSNSt3__13mapINS_5tupleIJjjjEEEjNS_4lessIS2_EENS_9allocatorINS_4pairIKS2_jEEEEEE64c82_ZTSNSt3__13mapINS_5tupleIJjjjEEEjNS_4lessIS2_EENS_9allocatorINS_4pairIKS2_jEEEEEE(uint64_t a1)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(void **)(a1 + 72));
  uint64_t v2 = *(void **)(a1 + 48);

  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v2);
}

uint64_t __copy_helper_block_e8_40c82_ZTSNSt3__13mapINS_5tupleIJjjjEEEjNS_4lessIS2_EENS_9allocatorINS_4pairIKS2_jEEEEEE64c82_ZTSNSt3__13mapINS_5tupleIJjjjEEEjNS_4lessIS2_EENS_9allocatorINS_4pairIKS2_jEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::map<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>::map[abi:ne180100](a1 + 64, (void *)(a2 + 64));
}

void sub_1BAC209F8(_Unwind_Exception *a1)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(void **)(v1 + 48));
  _Unwind_Resume(a1);
}

uint64_t HALS_PDPDevice::SetPropertyData(HALS_PDPDevice *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  if (((*(uint64_t (**)(HALS_PDPDevice *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    int v23 = 2003332927;
    goto LABEL_15;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if (!HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, v16)) {
    goto LABEL_5;
  }
  if (!HALS_Device::IsHogModeOwnerOrFree(this, a8))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    int v23 = 560492391;
LABEL_15:
    exception[2] = v23;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
LABEL_5:
  if (mSelector == 1869180523)
  {
    uint64_t v18 = *((void *)this + 167);
    uint64_t v19 = 0x676C6F626F696E6BLL;
    goto LABEL_9;
  }
  if (mSelector == 1919512167)
  {
    uint64_t v18 = *((void *)this + 167);
    uint64_t v19 = 0x676C6F626673697ALL;
LABEL_9:
    *(void *)&v24.AudioObjectPropertySelector mSelector = v19;
    v24.mElement = 0;
    return HALS_PDPUCPlugIn::ObjectSetPropertyData(*(HALS_PDPUCPlugIn **)(v18 + 80), a2, &v24, 0, 0, a4, a5);
  }
  BOOL v21 = *(HALS_PDPUCPlugIn **)(*((void *)this + 167) + 80);

  return HALS_PDPUCPlugIn::ObjectSetPropertyData(v21, a2, a3, a6, a7, a4, a5);
}

void HALS_PDPDevice::GetPropertyData(HALS_PDPDevice *this, const BOOL *a2, AudioObjectPropertyAddress *a3, const AudioObjectPropertyAddress *a4, unsigned int *a5, _DWORD *a6, void *a7, void *a8, HALS_Client *a9)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_PDPDevice *, const BOOL *, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a9) & 1) == 0&& (a3->mSelector == 1751737454 || a3->mSelector == 1751412337))
  {
    *a5 = a4;
    return;
  }
  if (((*(uint64_t (**)(HALS_PDPDevice *, const BOOL *, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    int v34 = 2003332927;
    goto LABEL_41;
  }
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    if (mSelector <= 1919512166)
    {
      if (mSelector == 1869638759) {
        goto LABEL_24;
      }
      int v21 = 1870098020;
      goto LABEL_23;
    }
    if (mSelector == 1919512167)
    {
      *a5 = a4;
      uint64_t v19 = *((void *)this + 167);
      uint64_t v20 = 0x676C6F626673697ALL;
      goto LABEL_28;
    }
    if (mSelector != 1936482681)
    {
      int v21 = 1937007734;
      goto LABEL_23;
    }
    AudioObjectPropertyScope mScope = a3->mScope;
    if (mScope == 1768845428) {
      int v28 = 1;
    }
    else {
      int v28 = 2 * (mScope != 1869968496);
    }
    int NumberStreams = HALS_IODevice::GetNumberStreams(this, v28 != 0);
    unsigned int v30 = (16 * NumberStreams) | 8;
    if (v30 <= a4)
    {
      *a5 = v30;
      v35[0] = MEMORY[0x1E4F143A8];
      v35[1] = 0x40000000;
      v35[2] = ___ZNK14HALS_PDPDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
      v35[3] = &__block_descriptor_tmp_3937;
      v35[4] = this;
      v35[5] = a6;
      int v36 = NumberStreams;
      int v37 = v28;
      uint8x8_t v31 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPDevice *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v31, (uint64_t)v35);
      return;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      buf.signed int mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALS_PDPDevice.cpp";
      __int16 v39 = 1024;
      int v40 = 403;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPDevice::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamConfiguration", (uint8_t *)&buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    int v34 = 561211770;
LABEL_41:
    exception[2] = v34;
  }
  if (mSelector > 1768907635)
  {
    if (mSelector != 1768907636)
    {
      if (mSelector == 1851878764)
      {
        *a5 = a4;
        uint64_t v26 = *((void *)this + 167);
        strcpy((char *)&buf, "manlbolg");
        BYTE1(buf.mElement) = 0;
        HIWORD(buf.mElement) = 0;
        uint64_t v22 = *(HALS_PDPUCPlugIn **)(v26 + 72);
        uint64_t v23 = (uint64_t)a2;
        uint64_t v24 = (uint64_t)a7;
        AudioObjectPropertyAddress v25 = a8;
        goto LABEL_30;
      }
      if (mSelector == 1869180523)
      {
        *a5 = a4;
        uint64_t v19 = *((void *)this + 167);
        uint64_t v20 = 0x676C6F626F696E6BLL;
LABEL_28:
        *(void *)&buf.signed int mSelector = v20;
        buf.mElement = 0;
        uint64_t v22 = *(HALS_PDPUCPlugIn **)(v19 + 72);
        uint64_t v23 = (uint64_t)a2;
        uint64_t v24 = 0;
        AudioObjectPropertyAddress v25 = 0;
LABEL_30:
        HALS_PDPUCPlugIn::ObjectGetPropertyData(v22, v23, &buf, v24, v25, a5, a6);
        return;
      }
      goto LABEL_37;
    }
    goto LABEL_24;
  }
  if (mSelector == 1650682995) {
    goto LABEL_24;
  }
  int v21 = 1668047219;
LABEL_23:
  if (mSelector != v21)
  {
LABEL_37:
    *a5 = a4;
    uint64_t v32 = *(HALS_PDPUCPlugIn **)(*((void *)this + 167) + 72);
    HALS_PDPUCPlugIn::ObjectGetPropertyData(v32, (uint64_t)a2, a3, (uint64_t)a7, a8, a5, a6);
    return;
  }
LABEL_24:

  HALS_Device::GetPropertyData(this, a2, a3, a4, a5, a6, a7, (int *)a8, a9);
}

void ___ZNK14HALS_PDPDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  **(_DWORD **)(a1 + 40) = *(_DWORD *)(a1 + 48);
  if (*(_DWORD *)(a1 + 48))
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = (HALS_Stream *)(*(uint64_t (**)(uint64_t, BOOL, unint64_t))(*(void *)v1 + 392))(v1, *(_DWORD *)(a1 + 52) != 0, v4);
      uint64_t v7 = v5;
      if (v5)
      {
        HALS_Stream::GetCurrentVirtualFormat(v5, &v10);
        uint64_t v8 = *(void *)(a1 + 40) + v3;
        *(void *)(v8 + 8) = v10.mChannelsPerFrame;
        *(void *)(v8 + 16) = 0;
      }
      else
      {
        uint64_t v9 = *(void *)(a1 + 40) + v3;
        *(void *)(v9 + 8) = 0;
        *(void *)(v9 + 16) = 0;
      }
      HALS_ObjectMap::ReleaseObject(v7, v6);
      ++v4;
      v3 += 16;
    }
    while (v4 < *(unsigned int *)(a1 + 48));
  }
}

void sub_1BAC211C4(void *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAC211ACLL);
}

uint64_t HALS_PDPDevice::GetPropertyDataSize(HALS_PDPDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4, void *a5, AudioObjectPropertyAddress *a6)
{
  if (((*(uint64_t (**)(HALS_PDPDevice *, uint64_t, AudioObjectPropertyAddress *, AudioObjectPropertyAddress *))(*(void *)this + 88))(this, a2, a3, a6) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    if (mSelector > 1919512166)
    {
      if (mSelector == 1919512167)
      {
        uint64_t v14 = *((void *)this + 167);
        uint64_t v15 = 0x676C6F626673697ALL;
        goto LABEL_27;
      }
      if (mSelector == 1936482681) {
        return (16 * HALS_IODevice::GetNumberStreams(this, a3->mScope == 1768845428)) | 8;
      }
      if (mSelector != 1937007734) {
        goto LABEL_12;
      }
      goto LABEL_22;
    }
    BOOL v18 = mSelector == 1869638759;
    int v19 = 1870098020;
  }
  else
  {
    if (mSelector > 1768907635)
    {
      if (mSelector != 1768907636)
      {
        if (mSelector == 1851878764)
        {
          uint64_t v21 = *((void *)this + 167);
          *(void *)&v27.signed int mSelector = 0x676C6F626C6E616DLL;
          v27.mElement = 0;
          uint64_t v22 = *(HALS_PDPUCPlugIn **)(v21 + 64);
          uint64_t v23 = a2;
          uint64_t v24 = (uint64_t)a4;
          AudioObjectPropertyAddress v25 = a5;
          return HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(v22, v23, &v27, v24, v25);
        }
        if (mSelector == 1869180523)
        {
          uint64_t v14 = *((void *)this + 167);
          uint64_t v15 = 0x676C6F626F696E6BLL;
LABEL_27:
          *(void *)&v27.signed int mSelector = v15;
          v27.mElement = 0;
          uint64_t v22 = *(HALS_PDPUCPlugIn **)(v14 + 64);
          uint64_t v23 = a2;
          uint64_t v24 = 0;
          AudioObjectPropertyAddress v25 = 0;
          return HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(v22, v23, &v27, v24, v25);
        }
        goto LABEL_12;
      }
      goto LABEL_22;
    }
    BOOL v18 = mSelector == 1650682995;
    int v19 = 1668047219;
  }
  if (!v18 && mSelector != v19)
  {
LABEL_12:
    uint64_t v16 = *(HALS_PDPUCPlugIn **)(*((void *)this + 167) + 64);
    return HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(v16, a2, a3, (uint64_t)a4, a5);
  }
LABEL_22:

  return HALS_Device::GetPropertyDataSize((HALS_Device ***)this, v12, a3, a4, (int *)a5, a6);
}

uint64_t HALS_PDPDevice::IsPropertySettable(HALS_PDPDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  if (((*(uint64_t (**)(HALS_PDPDevice *))(*(void *)this + 88))(this) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  uint64_t result = 0;
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    if (mSelector > 1919512166)
    {
      if (mSelector == 1919512167)
      {
        uint64_t v11 = *((void *)this + 167);
        uint64_t v12 = 0x676C6F626673697ALL;
        goto LABEL_26;
      }
      if (mSelector == 1936482681) {
        return result;
      }
      if (mSelector != 1937007734) {
        goto LABEL_12;
      }
      goto LABEL_22;
    }
    BOOL v14 = mSelector == 1869638759;
    int v15 = 1870098020;
  }
  else
  {
    if (mSelector > 1768907635)
    {
      if (mSelector != 1768907636)
      {
        if (mSelector == 1851878764) {
          return result;
        }
        if (mSelector == 1869180523)
        {
          uint64_t v11 = *((void *)this + 167);
          uint64_t v12 = 0x676C6F626F696E6BLL;
LABEL_26:
          *(void *)&v18.signed int mSelector = v12;
          v18.mElement = 0;
          return HALS_PDPUCPlugIn::ObjectIsPropertySettable(*(HALS_PDPUCPlugIn **)(v11 + 56), a2, &v18);
        }
        goto LABEL_12;
      }
      goto LABEL_22;
    }
    BOOL v14 = mSelector == 1650682995;
    int v15 = 1668047219;
  }
  if (!v14 && mSelector != v15)
  {
LABEL_12:
    unsigned int v13 = *(HALS_PDPUCPlugIn **)(*((void *)this + 167) + 56);
    return HALS_PDPUCPlugIn::ObjectIsPropertySettable(v13, a2, a3);
  }
LABEL_22:

  return HALS_Device::IsPropertySettable((HALS_Device ***)this, v8, a3, a4);
}

uint64_t HALS_PDPDevice::HasProperty(HALS_PDPDevice *this, uint64_t a2, const AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  uint64_t result = (*(uint64_t (**)(HALS_PDPDevice *, const AudioObjectPropertyAddress *, AudioObjectPropertyAddress *))(*(void *)this + 176))(this, a3, a4);
  if (!result) {
    return result;
  }
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1869638758)
  {
    if (mSelector > 1768907635)
    {
      if (mSelector != 1768907636)
      {
        if (mSelector == 1851878764)
        {
          uint64_t v11 = *((void *)this + 167);
          uint64_t v12 = 0x676C6F626C6E616DLL;
          goto LABEL_25;
        }
        if (mSelector == 1869180523)
        {
          uint64_t v11 = *((void *)this + 167);
          uint64_t v12 = 0x676C6F626F696E6BLL;
LABEL_25:
          uint64_t v19 = v12;
          int v20 = 0;
          int v13 = (*(uint64_t (**)(uint64_t, uint64_t *))(v11 + 48))(a2, &v19);
          return v13 != 0;
        }
LABEL_12:
        int v13 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *))(*((void *)this + 167) + 48))(a2, a3);
        return v13 != 0;
      }
      goto LABEL_20;
    }
    BOOL v14 = mSelector == 1650682995;
    int v15 = 1668047219;
    goto LABEL_15;
  }
  if (mSelector <= 1919512166)
  {
    BOOL v14 = mSelector == 1869638759;
    int v15 = 1870098020;
LABEL_15:
    if (!v14 && mSelector != v15) {
      goto LABEL_12;
    }
LABEL_20:
    return HALS_Device::HasProperty((HALS_Device ***)this, v9, a3, a4);
  }
  if (mSelector == 1919512167)
  {
    uint64_t v11 = *((void *)this + 167);
    uint64_t v12 = 0x676C6F626673697ALL;
    goto LABEL_25;
  }
  if (mSelector != 1936482681)
  {
    if (mSelector != 1937007734) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
  AudioObjectPropertyScope mScope = a3->mScope;
  return mScope == 1768845428 || mScope == 1869968496;
}

void HALS_PDPDevice::~HALS_PDPDevice(HALS_PDPDevice *this)
{
  HALS_PDPDevice::~HALS_PDPDevice(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t v2;
  HALS_Object *v3;
  uint64_t v4[2];
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t vars8;

  *(void *)this = &unk_1F1465C70;
  uint64_t v2 = *((void *)this + 166);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    HALS_ObjectMap::ObjectIsDead(*((HALS_ObjectMap **)this + 166), v3);
    *((void *)this + 166) = 0;
  }
  v4[0] = 0;
  v4[1] = 0;
  HALS_System::GetInstance(&v5, 0, v4);
  HALS_IOContext_Manager::destroy_engine_for_device(*(os_unfair_lock_s **)(v5 + 1392), this);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_PDPDevice *)((char *)this + 1344));
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 164));

  HALS_Device::~HALS_Device(this);
}

void HALS_PDPDevice::Activate(const __CFString **this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)" diubolg";
  int v13 = 0;
  uint64_t v2 = *((unsigned int *)this + 4);
  *(void *)AudioObjectPropertyAddress buf = 0;
  LODWORD(v8) = 0;
  ((void (*)(const __CFString **, uint64_t, uint64_t *, uint64_t, uint64_t *, unsigned char *, void, void, void))(*this)[3].data)(this, v2, &v12, 8, &v8, buf, 0, 0, 0);
  uint64_t v10 = *(void *)buf;
  char v11 = 1;
  if (*(void *)buf)
  {
    CACFString::operator=((uint64_t)(this + 12), (uint64_t)&v10);
    *(void *)AudioObjectPropertyAddress buf = CFStringCreateWithFormat(0, 0, @"device.%@", v10);
    buf[8] = 1;
    CACFString::operator=((uint64_t)(this + 14), (uint64_t)buf);
    CFStringRef v4 = this[12];
    if (v4)
    {
      int Length = CFStringGetLength(v4);
      CFStringRef v4 = this[12];
      int v6 = Length + 1;
    }
    else
    {
      int v6 = 1;
    }
    *(_DWORD *)uint64_t v9 = v6;
    CACFString::GetCString(v4, (__CFString *)((char *)this + 156), v9, v3);
    operator new();
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "HALS_PDPDevice.cpp";
    __int16 v15 = 1024;
    int v16 = 63;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPDevice::Activate: no UID", buf, 0x12u);
  }
  exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
  *(void *)exceptiouint64_t n = off_1F148A5D8;
  exception[2] = 1852797029;
}

void sub_1BAC21C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::__shared_weak_count *a8, uint64_t a9, ...)
{
  va_start(va, a9);
  if (a8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a8);
  }
  CACFString::~CACFString((CACFString *)(v9 - 64));
  CACFString::~CACFString((CACFString *)va);
  _Unwind_Resume(a1);
}

uint64_t CACFString::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)a2;
  if (*(void *)a2 != *(void *)a1)
  {
    if (*(void *)a1) {
      BOOL v5 = *(unsigned char *)(a1 + 8) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      CFRelease(*(CFTypeRef *)a1);
      uint64_t v3 = *(const void **)a2;
    }
    *(void *)a1 = v3;
    int v6 = *(unsigned __int8 *)(a2 + 8);
    *(unsigned char *)(a1 + 8) = v6;
    if (v6) {
      BOOL v7 = v3 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      CFRetain(v3);
    }
  }
  return a1;
}

void ___ZN14HALS_PDPDevice32HandlePlugIn_RequestConfigChangeEPv_block_invoke(void *a1)
{
  *(void *)&v47[15] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[5];
  memset(v42, 0, sizeof(v42));
  __int16 v39 = 0;
  int v40 = 0;
  uint64_t v41 = 0;
  std::string __p = 0;
  int v37 = 0;
  uint64_t v38 = 0;
  uint64_t v3 = *(void *)(v2 + 1328);
  if (v3) {
    (*(void (**)(uint64_t, void **))(*(void *)v3 + 216))(v3, &__p);
  }
  v35[0] = 0;
  v35[1] = 0;
  HALS_System::GetInstance(&v31, 0, v35);
  HALS_IOContext_Manager::pause_contexts_for_device(*((os_unfair_lock_s **)v31 + 174), (HALS_IODevice *)v2);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)&v31);
  HALS_DeviceState::Capture((HALS_DeviceState *)&v31, (HALS_Device *)v2, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
  kdebug_trace();
  int v4 = (*(uint64_t (**)(void, void))(*(void *)(v2 + 1336) + 40))(*(unsigned int *)(v2 + 16), a1[6]);
  int v5 = v4;
  if (v4)
  {
    LOBYTE(v29.mSelector) = HIBYTE(v4);
    BYTE1(v29.mSelector) = BYTE2(v4);
    BYTE2(v29.mSelector) = BYTE1(v4);
    HIBYTE(v29.mSelector) = v4;
    LOBYTE(v29.mScope) = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "HALS_PDPUCPlugIn.cpp";
      __int16 v44 = 1024;
      *(_DWORD *)unint64_t v45 = 123;
      *(_WORD *)&v45[4] = 1024;
      *(_DWORD *)&v45[6] = v5;
      __int16 v46 = 2080;
      *(void *)unint64_t v47 = &v29;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPUCPlugIn::PerformDeviceConfigChange: got an error from the plug-in, Error: %d (%s)", buf, 0x22u);
    }
  }
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = v5;
  kdebug_trace();
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 0x40000000;
  v30[2] = ___ZN14HALS_PDPDevice32HandlePlugIn_RequestConfigChangeEPv_block_invoke_2;
  v30[3] = &__block_descriptor_tmp_7_3948;
  v30[4] = v2;
  int v6 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v30);
  HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)buf);
  HALS_DeviceState::Capture(v7, (HALS_Device *)v2, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
  HALS_DeviceState::Compare((HALS_DeviceState *)&v31, (const HALS_DeviceState *)buf, (const AudioObjectPropertyAddress *)v42, &v39, v8);
  if (*(void *)&v42[0] == *((void *)&v42[0] + 1))
  {
    uint64_t v10 = v39;
    while (v10 != v40)
    {
      uint64_t v11 = *(void *)v10;
      uint64_t v12 = *((void *)v10 + 1);
      uint64_t v10 = (CAPropertyAddressList *)((char *)v10 + 32);
      if (v11 != v12) {
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    *(void *)&v29.signed int mSelector = 0x676C6F6264696666;
    v29.mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v42, &v29, v9);
  }
  *(void *)&v29.signed int mSelector = &v47[3];
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*(void **)&v45[2]);
  *(void *)AudioObjectPropertyAddress buf = &v34;
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v33);
  uint64_t v13 = *(void *)(v2 + 1328);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 936))(v13);
  }
  v28[0] = 0;
  v28[1] = 0;
  HALS_System::GetInstance(&v31, 0, v28);
  HALS_IOContext_Manager::rebuild_engine_for_device(*((HALS_IOContext_Manager **)v31 + 174), (const HALS_IODevice *)v2);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  kdebug_trace();
  if (*(void *)&v42[0] != *((void *)&v42[0] + 1)) {
    HALS_Object::PropertiesChanged_Sync((HALS_Object *)v2, (HALS_NotificationManager *)*(unsigned int *)(v2 + 16), 0, -1431655765 * ((*((void *)&v42[0] + 1) - *(void *)&v42[0]) >> 2), *(const AudioObjectPropertyAddress **)&v42[0]);
  }
  __int16 v15 = v39;
  BOOL v14 = v40;
  uint64_t v16 = v40 - v39;
  if (((v40 - v39) & 0x1FFFFFFFE0) != 0)
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    do
    {
      if (v18 >= v16 >> 5) {
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v19 = (char *)v15 + v17;
      if (*(void *)((char *)v15 + v17) != *(void *)((char *)v15 + v17 + 8))
      {
        int v20 = (HALS_ObjectMap *)*((unsigned int *)v19 + 6);
        uint64_t v22 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v20);
        if (v22) {
          HALS_Object::PropertiesChanged_Sync((HALS_Object *)v2, v20, 0, -1431655765 * ((*((void *)v19 + 1) - *(void *)v19) >> 2), *(const AudioObjectPropertyAddress **)v19);
        }
        HALS_ObjectMap::ReleaseObject(v22, v21);
        __int16 v15 = v39;
        BOOL v14 = v40;
      }
      ++v18;
      uint64_t v16 = v14 - v15;
      v17 += 32;
    }
    while (v18 < ((unint64_t)(v14 - v15) >> 5));
  }
  kdebug_trace();
  uint64_t v23 = *(void *)(v2 + 1328);
  if (v23)
  {
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v23 + 232))(v23, v42);
    (*(void (**)(void, void **))(**(void **)(v2 + 1328) + 224))(*(void *)(v2 + 1328), &__p);
  }
  v27[0] = 0;
  v27[1] = 0;
  HALS_System::GetInstance(&v31, 0, v27);
  uint64_t v24 = (os_unfair_lock_s *)(*((void *)v31 + 174) + 16);
  os_unfair_lock_lock(v24);
  os_unfair_lock_unlock(v24);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  v26[0] = 0;
  v26[1] = 0;
  HALS_System::GetInstance(&v31, 0, v26);
  HALS_IOContext_Manager::resume_contexts_for_device(*((os_unfair_lock_s **)v31 + 174), (HALS_IODevice *)v2);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  v25[0] = 0;
  v25[1] = 0;
  HALS_System::GetInstance(&v31, 0, v25);
  HALS_System::CheckForDefaultDeviceChanges(v31);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (__p)
  {
    int v37 = __p;
    operator delete(__p);
  }
  uint8x8_t v31 = (HALS_System *)&v39;
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  if (*(void *)&v42[0])
  {
    *((void *)&v42[0] + 1) = *(void *)&v42[0];
    operator delete(*(void **)&v42[0]);
  }
}

void sub_1BAC222F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (a2)
  {
    HALS_DeviceState::~HALS_DeviceState((HALS_DeviceState *)(v34 - 128));
    HALS_DeviceState::~HALS_DeviceState((HALS_DeviceState *)&a24);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAC22038);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAC223A8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34)
{
  if (a2)
  {
    if (a33)
    {
      a34 = a33;
      operator delete(a33);
    }
    a24 = v34 - 184;
    std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](&a24);
    int v36 = *(void **)(v34 - 160);
    if (v36)
    {
      *(void *)(v34 - 152) = v36;
      operator delete(v36);
    }
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAC222B4);
  }
  JUMPOUT(0x1BAC22398);
}

void sub_1BAC223F4()
{
}

uint64_t ___ZN14HALS_PDPDevice32HandlePlugIn_RequestConfigChangeEPv_block_invoke_2(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = 1;
  do
  {
    char v4 = v3;
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 384))(v2, v1 & 1);
    if (result)
    {
      uint64_t v6 = 0;
      do
      {
        uint64_t v7 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v2 + 392))(v2, v1 & 1, v6);
        uint64_t v9 = (HALS_ObjectMap *)v7;
        if (v7)
        {
          uint64_t v10 = (HALS_PDPStream *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v7 + 16));
          uint64_t v12 = v10;
          if (v10) {
            HALS_PDPStream::BuildFormatList(v10);
          }
          HALS_ObjectMap::ReleaseObject(v12, v11);
        }
        HALS_ObjectMap::ReleaseObject(v9, v8);
        uint64_t v6 = (v6 + 1);
        uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 384))(v2, v1 & 1);
      }
      while (v6 < result);
    }
    char v3 = 0;
    char v1 = 1;
  }
  while ((v4 & 1) != 0);
  return result;
}

void sub_1BAC22528(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v3, a2);
  HALS_ObjectMap::ReleaseObject(v2, v5);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'HALS_PlugInBox::HandlePlugIn_PropertiesChanged(HALS_PlugInBox *this, unsigned int a2, const AudioObjectPropertyAddress *a3)
{
}

void HALS_PlugInBox::HandlePlugIn_PropertiesChanged(HALS_PlugInBox *this, unsigned int a2, const AudioObjectPropertyAddress *a3)
{
  if (a2)
  {
    char v6 = 0;
    uint64_t v7 = a3;
    uint64_t v8 = a2;
    do
    {
      AudioObjectPropertySelector mSelector = v7->mSelector;
      ++v7;
      v6 |= mSelector == 1668575852;
      --v8;
    }
    while (v8);
    if (v6) {
      HALS_PlugInBox::CreateControls(this);
    }
  }
  uint64_t v10 = (HALS_NotificationManager *)*((unsigned int *)this + 4);

  HALS_Object::PropertiesChanged(this, v10, 0, a2, a3);
}

void HALS_PlugInBox::CreateControls(HALS_PlugInBox *this)
{
  LODWORD(v35) = 0;
  uint64_t v34 = *(void *)"lrtcbolg";
  uint64_t v2 = *((void *)this + 43);
  uint64_t v3 = *(void *)(v2 + 400);
  char v4 = *(std::__shared_weak_count **)(v2 + 408);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v5 = (*(uint64_t (**)(uint64_t, void, void, uint64_t *))(*(void *)v3 + 552))(v3, *((unsigned int *)this + 89), 0, &v34);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v5)
  {
    uint64_t v6 = *((void *)this + 43);
    uint64_t v7 = *(void *)(v6 + 400);
    uint64_t v8 = *(std::__shared_weak_count **)(v6 + 408);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v43 = 0;
    uint64_t v9 = *((unsigned int *)this + 89);
    uint64_t v34 = 0x676C6F626374726CLL;
    LODWORD(v35) = 0;
    unsigned int v43 = (*(unsigned int (**)(uint64_t, uint64_t, void, uint64_t *, void, void))(*(void *)v7 + 568))(v7, v9, 0, &v34, 0, 0) >> 2;
    memset(&v42, 0, sizeof(v42));
    std::vector<unsigned int>::resize(&v42, v43);
    unsigned int v10 = v43;
    if (v43)
    {
      uint64_t v11 = *((void *)this + 43);
      uint64_t v12 = *(void *)(v11 + 400);
      uint64_t v13 = *(std::__shared_weak_count **)(v11 + 408);
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = *((unsigned int *)this + 89);
      uint64_t v44 = 0x676C6F626374726CLL;
      int v45 = 0;
      (*(void (**)(uint64_t, uint64_t, void, uint64_t *, void, void, void, unsigned int *, std::vector<unsigned int>::pointer))(*(void *)v12 + 576))(v12, v14, 0, &v44, 0, 0, 4 * v10, &v43, v42.__begin_);
      v43 >>= 2;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      std::vector<unsigned int>::resize(&v42, v43);
    }
    uint64_t v34 = 0;
    long long v35 = &v34;
    uint64_t v36 = 0x4002000000;
    int v37 = __Block_byref_object_copy__3968;
    uint64_t v38 = __Block_byref_object_dispose__3969;
    __int16 v39 = 0;
    int v40 = 0;
    uint64_t v41 = 0;
    uint64_t v26 = 0;
    AudioObjectPropertyAddress v27 = &v26;
    uint64_t v28 = 0x4002000000;
    AudioObjectPropertyAddress v29 = __Block_byref_object_copy__3968;
    unsigned int v30 = __Block_byref_object_dispose__3969;
    uint8x8_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 1174405120;
    v22[2] = ___ZN14HALS_PlugInBox14CreateControlsEv_block_invoke;
    v22[3] = &unk_1F14661B0;
    v22[6] = this;
    std::string __p = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    begiuint64_t n = v42.__begin_;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v42.__begin_, (uint64_t)v42.__end_, v42.__end_ - v42.__begin_);
    v22[4] = &v34;
    v22[5] = &v26;
    uint64_t v16 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInBox *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v16, (uint64_t)v22);
    unint64_t v18 = (void (****)(void))v35[5];
    uint64_t v19 = (void (****)(void))v35[6];
    while (v18 != v19)
      (***v18++)();
    int v20 = (HALS_ObjectMap **)v27[5];
    uint64_t v21 = (HALS_ObjectMap **)v27[6];
    while (v20 != v21)
      HALS_ObjectMap::ReleaseObject(*v20++, v17);
    if (__p)
    {
      uint64_t v24 = __p;
      operator delete(__p);
    }
    _Block_object_dispose(&v26, 8);
    if (v31)
    {
      uint64_t v32 = v31;
      operator delete(v31);
    }
    _Block_object_dispose(&v34, 8);
    if (v39)
    {
      int v40 = v39;
      operator delete(v39);
    }
    if (begin) {
      operator delete(begin);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BAC2299C(void *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAC227A4);
}

void sub_1BAC229BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  _Block_object_dispose(&a21, 8);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a29, 8);
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  if (v36) {
    operator delete(v36);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3968(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__3969(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN14HALS_PlugInBox14CreateControlsEv_block_invoke(void *a1, void *a2)
{
  uint64_t v3 = (void *)a1[6];
  uint64_t v4 = *(void *)(a1[4] + 8);
  int v5 = (char *)v3[47];
  uint64_t v6 = (char *)v3[48];
  if (v5 != v6)
  {
    uint64_t v7 = (char *)v3[47];
    do
    {
      uint64_t v8 = *(void *)v7;
      v7 += 8;
      *(unsigned char *)(v8 + 13) = 0;
    }
    while (v7 != v6);
  }
  uint64_t v9 = (unsigned int *)a1[7];
  unsigned int v10 = (unsigned int *)a1[8];
  if (v9 != v10)
  {
    do
    {
      uint64_t v11 = *v9;
      uint64_t v12 = (uint64_t *)v3[47];
      uint64_t v13 = (uint64_t)(v3[48] - (void)v12) >> 3;
      do
      {
        if (!v13)
        {
          uint64_t v17 = v3[43];
          unint64_t v18 = *(HALS_UCPlugInBase **)(v17 + 400);
          uint64_t v19 = *(std::__shared_weak_count **)(v17 + 408);
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          HALS_UCPlugInBase::Object_GetClass(v18, v11);
          if (v19) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v19);
          }
          uint64_t v20 = v3[43];
          uint64_t v21 = *(HALS_UCPlugInBase **)(v20 + 400);
          uint64_t v22 = *(std::__shared_weak_count **)(v20 + 408);
          if (v22) {
            atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          HALS_UCPlugInBase::Object_GetBaseClass(v21, v11);
          if (v22) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          }
          operator new();
        }
        uint64_t v15 = *v12++;
        uint64_t v14 = v15;
        --v13;
      }
      while (*(_DWORD *)(v15 + 92) != v11 || v14 == 0);
      *(unsigned char *)(v14 + 13) = 1;
      ++v9;
    }
    while (v9 != v10);
    int v5 = (char *)v3[47];
    uint64_t v6 = (char *)v3[48];
  }
  uint64_t v23 = (char **)(v3 + 47);
  if (v6 == v5)
  {
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v24 = 0;
    unsigned int v25 = 0;
    do
    {
      uint64_t v26 = *(HALS_ObjectMap **)&v5[8 * v24];
      if (*((unsigned char *)v26 + 13))
      {
        ++v25;
      }
      else
      {
        (*(void (**)(HALS_ObjectMap *))(*(void *)v26 + 8))(v26);
        HALS_ObjectMap::ObjectIsDead(v26, v27);
        int v5 = (char *)v3[47];
        uint64_t v28 = (char *)v3[48];
        AudioObjectPropertyAddress v29 = &v5[8 * v24];
        a2 = v29 + 8;
        int64_t v30 = v28 - (v29 + 8);
        if (v28 != v29 + 8)
        {
          memmove(&v5[8 * v24], a2, v28 - (v29 + 8));
          int v5 = *v23;
        }
        uint64_t v6 = &v29[v30];
        v3[48] = v6;
      }
      uint64_t v24 = v25;
    }
    while (v25 < (unint64_t)((v6 - v5) >> 3));
  }
  uint64_t v32 = *(uint64_t **)(v4 + 40);
  for (uint64_t i = *(uint64_t **)(v4 + 48); v32 != i; ++v32)
  {
    uint64_t v33 = *v32;
    unint64_t v34 = v3[49];
    if ((unint64_t)v6 >= v34)
    {
      uint64_t v35 = (v6 - *v23) >> 3;
      if ((unint64_t)(v35 + 1) >> 61) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v36 = v34 - (void)*v23;
      uint64_t v37 = v36 >> 2;
      if (v36 >> 2 <= (unint64_t)(v35 + 1)) {
        uint64_t v37 = v35 + 1;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v37;
      }
      if (v38) {
        unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v38);
      }
      else {
        a2 = 0;
      }
      __int16 v39 = (void *)(v38 + 8 * v35);
      void *v39 = v33;
      uint64_t v6 = (char *)(v39 + 1);
      uint64_t v41 = (char *)v3[47];
      int v40 = (char *)v3[48];
      if (v40 != v41)
      {
        do
        {
          uint64_t v42 = *((void *)v40 - 1);
          v40 -= 8;
          *--__int16 v39 = v42;
        }
        while (v40 != v41);
        int v40 = *v23;
      }
      v3[47] = v39;
      v3[48] = v6;
      v3[49] = v38 + 8 * (void)a2;
      if (v40) {
        operator delete(v40);
      }
    }
    else
    {
      *(void *)uint64_t v6 = v33;
      v6 += 8;
    }
    v3[48] = v6;
  }
  uint64_t v43 = *(void *)(a1[5] + 8);
  if (v23 != (char **)(v43 + 40)) {
    std::vector<HALS_IOUAControl *>::__assign_with_size[abi:ne180100]<HALS_IOUAControl **,HALS_IOUAControl **>((void *)(v43 + 40), *v23, v6, (v6 - *v23) >> 3);
  }
  uint64_t v44 = *(HALS_ObjectMap ***)(v43 + 40);
  int v45 = *(HALS_ObjectMap ***)(v43 + 48);
  while (v44 != v45)
  {
    __int16 v46 = *v44++;
    HALS_ObjectMap::RetainObject(v46, (HALS_Object *)a2);
  }
}

void __destroy_helper_block_e8_56c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void *__copy_helper_block_e8_56c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v2 = (void *)(a1 + 56);
  v2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
}

void non-virtual thunk to'HALS_PlugInBox::~HALS_PlugInBox(HALS_PlugInBox *this)
{
  HALS_PlugInBox::~HALS_PlugInBox((HALS_PlugInBox *)((char *)this - 336));

  JUMPOUT(0x1C1859840);
}

{
  HALS_PlugInBox::~HALS_PlugInBox((HALS_PlugInBox *)((char *)this - 336));
}

void HALS_PlugInBox::~HALS_PlugInBox(HALS_PlugInBox *this)
{
  *(void *)this = &unk_1F1466080;
  uint64_t v2 = (HALS_PlugInBox *)((char *)this + 336);
  *((void *)this + 42) = &unk_1F1466180;
  uint64_t v3 = (void *)*((void *)this + 47);
  if (v3)
  {
    *((void *)this + 48) = v3;
    operator delete(v3);
  }
  HALS_PlugInObject::~HALS_PlugInObject(v2);

  HALS_Box::~HALS_Box(this);
}

{
  uint64_t vars8;

  HALS_PlugInBox::~HALS_PlugInBox(this);

  JUMPOUT(0x1C1859840);
}

HALS_ObjectMap *HALS_PlugInBox::_CopyControlByDescription(HALS_PlugInBox *this, HALS_Object *a2, int a3, int a4)
{
  for (uint64_t i = (HALS_ObjectMap **)*((void *)this + 47); i != *((HALS_ObjectMap ***)this + 48); ++i)
  {
    int v5 = *i;
    if (*((_DWORD *)*i + 5) == a2 && *((_DWORD *)v5 + 12) == a3 && *((_DWORD *)v5 + 13) == a4) {
      goto LABEL_8;
    }
  }
  int v5 = 0;
LABEL_8:
  HALS_ObjectMap::RetainObject(v5, a2);
  return v5;
}

HALS_ObjectMap *HALS_PlugInBox::_CopyControlByIndex(HALS_PlugInBox *this, HALS_Object *a2)
{
  uint64_t v2 = *((void *)this + 47);
  if (a2 >= (unint64_t)((*((void *)this + 48) - v2) >> 3)) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *(HALS_ObjectMap **)(v2 + 8 * a2);
  }
  HALS_ObjectMap::RetainObject(v3, a2);
  return v3;
}

uint64_t HALS_PlugInBox::_GetNumberControls(HALS_PlugInBox *this)
{
  return (*((void *)this + 48) - *((void *)this + 47)) >> 3;
}

void HALS_PlugInBox::_CopyControls(uint64_t a1, void **a2)
{
  uint64_t v2 = *(HALS_ObjectMap ***)(a1 + 376);
  uint64_t v3 = *(HALS_ObjectMap ***)(a1 + 384);
  if (v2 != v3)
  {
    uint64_t v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, (HALS_Object *)a2);
      int v5 = *v2;
      uint64_t v7 = (HALS_ObjectMap **)v4[1];
      unint64_t v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = ((char *)v7 - (unsigned char *)*v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v6 - (void)*v4;
        uint64_t v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        }
        else {
          a2 = 0;
        }
        uint64_t v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        std::__shared_weak_count *v13 = v5;
        uint64_t v8 = v13 + 1;
        uint64_t v15 = (char *)*v4;
        uint64_t v14 = (char *)v4[1];
        if (v14 != *v4)
        {
          do
          {
            uint64_t v16 = (HALS_ObjectMap *)*((void *)v14 - 1);
            v14 -= 8;
            *--uint64_t v13 = v16;
          }
          while (v14 != v15);
          uint64_t v14 = (char *)*v4;
        }
        *uint64_t v4 = v13;
        v4[1] = v8;
        v4[2] = (void *)(v12 + 8 * (void)a2);
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *uint64_t v7 = v5;
        uint64_t v8 = v7 + 1;
      }
      v4[1] = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

void HALS_PlugInBox::SetPropertyData(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *a3;
  switch(v12)
  {
    case 0x62786F6E:
      uint64_t v18 = *(void *)(a1 + 344);
      uint64_t v19 = *(void *)(v18 + 400);
      uint64_t v15 = *(std::__shared_weak_count **)(v18 + 408);
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v20 = *(unsigned int *)(a1 + 356);
      if (a8) {
        uint64_t v21 = *(unsigned int *)(a8 + 232);
      }
      else {
        uint64_t v21 = 0;
      }
      uint64_t v38 = 0x676C6F6262786F6ELL;
      int v39 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void, void, uint64_t, uint64_t))(*(void *)v19 + 584))(v19, v20, v21, &v38, 0, 0, a4, a5);
      goto LABEL_30;
    case 0x6964656E:
      uint64_t v22 = *(void *)(a1 + 344);
      uint64_t v23 = *(void *)(v22 + 400);
      uint64_t v15 = *(std::__shared_weak_count **)(v22 + 408);
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v24 = *(unsigned int *)(a1 + 356);
      if (a8) {
        uint64_t v25 = *(unsigned int *)(a8 + 232);
      }
      else {
        uint64_t v25 = 0;
      }
      uint64_t v38 = 0x676C6F626964656ELL;
      int v39 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void, void, uint64_t, uint64_t))(*(void *)v23 + 584))(v23, v24, v25, &v38, 0, 0, a4, a5);
      goto LABEL_30;
    case 0x6C6E616D:
      uint64_t v13 = *(void *)(a1 + 344);
      uint64_t v14 = *(void *)(v13 + 400);
      uint64_t v15 = *(std::__shared_weak_count **)(v13 + 408);
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v16 = *(unsigned int *)(a1 + 356);
      if (a8) {
        uint64_t v17 = *(unsigned int *)(a8 + 232);
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v38 = 0x676C6F626C6E616DLL;
      int v39 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void, void, uint64_t, uint64_t))(*(void *)v14 + 584))(v14, v16, v17, &v38, 0, 0, a4, a5);
LABEL_30:
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      return;
  }
  if (HALS_Box::HasProperty(a1, a2, a3))
  {
    if (HALS_Box::IsPropertySettable(a1, a2, a3)) {
      HALS_Object::SetPropertyData(a1, a2, (uint64_t)a3, v30, v31, v32, v33, a8);
    }
    uint64_t v12 = *a3;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(a1 + 336) + 24))(a1 + 336, v12))
  {
    uint64_t v34 = *(void *)(a1 + 344);
    uint64_t v35 = *(void *)(v34 + 400);
    uint64_t v36 = *(std::__shared_weak_count **)(v34 + 408);
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (a8) {
      uint64_t v37 = *(unsigned int *)(a8 + 232);
    }
    else {
      uint64_t v37 = 0;
    }
    (*(void (**)(uint64_t, void, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v35 + 584))(v35, *(unsigned int *)(a1 + 356), v37, a3, a6, a7, a4, a5);
    if (v36)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    }
  }
}

void sub_1BAC23474(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PlugInBox::GetPropertyData(HALS_PlugInBox *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, unsigned int *a5, char *a6, uint64_t a7, uint64_t *a8, HALS_Client *a9)
{
  uint64_t v11 = (uint64_t *)a6;
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  uint64_t mSelector = a3->mSelector;
  if ((int)mSelector > 1668641651)
  {
    if ((int)mSelector <= 1819111267)
    {
      if ((int)mSelector > 1768187245)
      {
        if (mSelector == 1768187246)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_PlugInBox.cpp";
              __int16 v92 = 1024;
              int v93 = 265;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioObjectPropertyIdentify", buf, 0x12u);
            }
            exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
            *(void *)exceptiouint64_t n = off_1F148A5D8;
            exception[2] = 561211770;
          }
          uint64_t v46 = *((void *)this + 43);
          uint64_t v47 = *(void *)(v46 + 400);
          uint64_t v20 = *(std::__shared_weak_count **)(v46 + 408);
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          strcpy(buf, "nedibolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          (*(void (**)(uint64_t))(*(void *)v47 + 576))(v47);
          goto LABEL_124;
        }
        if (mSelector != 1819107691) {
          goto LABEL_95;
        }
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInBox.cpp";
            __int16 v92 = 1024;
            int v93 = 257;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioObjectPropertyManufacturer", buf, 0x12u);
          }
          uint64_t v79 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v79 = off_1F148A5D8;
          v79[2] = 561211770;
        }
        uint64_t v31 = *((void *)this + 43);
        uint64_t v32 = *(void *)(v31 + 400);
        uint64_t v28 = *(std::__shared_weak_count **)(v31 + 408);
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        strcpy(buf, "kamlbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        (*(void (**)(uint64_t))(*(void *)v32 + 576))(v32);
        goto LABEL_127;
      }
      if (mSelector == 1668641652)
      {
        unsigned int v39 = a4 / 0xC;
        if (*((_DWORD *)this + 92) < a4 / 0xC) {
          unsigned int v39 = *((_DWORD *)this + 92);
        }
        if (v39)
        {
          uint64_t v40 = 0;
          unint64_t v41 = 0;
          do
          {
            if (v41 < *((unsigned int *)this + 92))
            {
              uint64_t v42 = &a6[v40];
              uint64_t v43 = (uint64_t *)(*((void *)this + 45) + v40);
              uint64_t v44 = *v43;
              *((_DWORD *)v42 + 2) = *((_DWORD *)v43 + 2);
              *(void *)uint64_t v42 = v44;
            }
            ++v41;
            v40 += 12;
          }
          while (12 * v39 != v40);
        }
        int v45 = 12 * v39;
        goto LABEL_130;
      }
      if (mSelector == 1719105134)
      {
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInBox.cpp";
            __int16 v92 = 1024;
            int v93 = 281;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioObjectPropertyFirmwareVersion", buf, 0x12u);
          }
          std::string::size_type v78 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::string::size_type v78 = off_1F148A5D8;
          v78[2] = 561211770;
        }
        uint64_t v26 = *((void *)this + 43);
        uint64_t v27 = *(void *)(v26 + 400);
        uint64_t v28 = *(std::__shared_weak_count **)(v26 + 408);
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        strcpy(buf, "nvwfbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        (*(void (**)(uint64_t))(*(void *)v27 + 576))(v27);
        goto LABEL_127;
      }
    }
    else
    {
      if ((int)mSelector > 1920168546)
      {
        if (mSelector == 1920168547)
        {
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_PlugInBox.cpp";
              __int16 v92 = 1024;
              int v93 = 391;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioObjectPropertyResourceBundle", buf, 0x12u);
            }
            v84 = __cxa_allocate_exception(0x10uLL);
            *(void *)v84 = off_1F148A5D8;
            v84[2] = 561211770;
          }
          *(void *)a6 = HALS_PlugInObject::CopyResourceBundlePath((uint64_t)this + 336, (uint64_t)a9);
          goto LABEL_129;
        }
        if (mSelector != 1936618861)
        {
          if (mSelector == 1953653102)
          {
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_PlugInBox.cpp";
                __int16 v92 = 1024;
                int v93 = 289;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioBoxPropertyTransportType", buf, 0x12u);
              }
              std::logic_error v85 = __cxa_allocate_exception(0x10uLL);
              *(void *)std::logic_error v85 = off_1F148A5D8;
              v85[2] = 561211770;
            }
            uint64_t v18 = *((void *)this + 43);
            uint64_t v19 = *(void *)(v18 + 400);
            uint64_t v20 = *(std::__shared_weak_count **)(v18 + 408);
            if (v20) {
              atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            strcpy(buf, "nartbolg");
            buf[9] = 0;
            *(_WORD *)&buf[10] = 0;
            (*(void (**)(uint64_t))(*(void *)v19 + 576))(v19);
LABEL_124:
            *(_DWORD *)uint64_t v11 = 0;
            if (v20) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v20);
            }
            int v45 = 4;
            goto LABEL_130;
          }
          goto LABEL_95;
        }
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInBox.cpp";
            __int16 v92 = 1024;
            int v93 = 273;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioObjectPropertySerialNumber", buf, 0x12u);
          }
          uint64_t v80 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v80 = off_1F148A5D8;
          v80[2] = 561211770;
        }
        uint64_t v48 = *((void *)this + 43);
        uint64_t v49 = *(void *)(v48 + 400);
        uint64_t v28 = *(std::__shared_weak_count **)(v48 + 408);
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        strcpy(buf, "munsbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        (*(void (**)(uint64_t))(*(void *)v49 + 576))(v49);
LABEL_127:
        uint64_t *v11 = 0;
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
LABEL_129:
        int v45 = 8;
LABEL_130:
        *a5 = v45;
        return;
      }
      if (mSelector == 1819111268)
      {
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInBox.cpp";
            __int16 v92 = 1024;
            int v93 = 249;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioObjectPropertyModelName", buf, 0x12u);
          }
          uint64_t v89 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v89 = off_1F148A5D8;
          v89[2] = 561211770;
        }
        uint64_t v61 = *((void *)this + 43);
        uint64_t v62 = *(void *)(v61 + 400);
        uint64_t v28 = *(std::__shared_weak_count **)(v61 + 408);
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        strcpy(buf, "domlbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        (*(void (**)(uint64_t))(*(void *)v62 + 576))(v62);
        goto LABEL_127;
      }
      if (mSelector == 1819173229)
      {
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInBox.cpp";
            __int16 v92 = 1024;
            int v93 = 241;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioObjectPropertyName", buf, 0x12u);
          }
          v90 = __cxa_allocate_exception(0x10uLL);
          *(void *)v90 = off_1F148A5D8;
          v90[2] = 561211770;
        }
        uint64_t v37 = *((void *)this + 43);
        uint64_t v38 = *(void *)(v37 + 400);
        uint64_t v28 = *(std::__shared_weak_count **)(v37 + 408);
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        strcpy(buf, "manlbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        (*(void (**)(uint64_t))(*(void *)v38 + 576))(v38);
        goto LABEL_127;
      }
    }
LABEL_95:
    if (HALS_Box::HasProperty((uint64_t)this, a2, (int *)a3))
    {
      HALS_Box::GetPropertyData(this, a2, a3, a4, a5, v11, a7, a8, a9);
    }
    else if ((*(unsigned int (**)(char *, uint64_t))(*((void *)this + 42) + 24))((char *)this + 336, mSelector))
    {
      uint64_t v63 = *((void *)this + 43);
      uint64_t v64 = *(void *)(v63 + 400);
      v65 = *(std::__shared_weak_count **)(v63 + 408);
      if (v65) {
        atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (a9) {
        uint64_t v66 = *((unsigned int *)a9 + 58);
      }
      else {
        uint64_t v66 = 0;
      }
      (*(void (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *, uint64_t, uint64_t *, uint64_t, unsigned int *, uint64_t *))(*(void *)v64 + 576))(v64, *((unsigned int *)this + 89), v66, a3, a7, a8, a4, a5, v11);
      if (v65)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v65);
      }
    }
    return;
  }
  if ((int)mSelector > 1651013224)
  {
    if ((int)mSelector > 1652060005)
    {
      if (mSelector == 1652060006)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInBox.cpp";
            __int16 v92 = 1024;
            int v93 = 337;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioBoxPropertyAcquisitionFailed", buf, 0x12u);
          }
          v83 = __cxa_allocate_exception(0x10uLL);
          *(void *)v83 = off_1F148A5D8;
          v83[2] = 561211770;
        }
        uint64_t v59 = *((void *)this + 43);
        uint64_t v60 = *(void *)(v59 + 400);
        uint64_t v20 = *(std::__shared_weak_count **)(v59 + 408);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        strcpy(buf, "foxbbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        (*(void (**)(uint64_t))(*(void *)v60 + 576))(v60);
        goto LABEL_124;
      }
      if (mSelector == 1652060014)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInBox.cpp";
            __int16 v92 = 1024;
            int v93 = 329;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioBoxPropertyAcquired", buf, 0x12u);
          }
          v88 = __cxa_allocate_exception(0x10uLL);
          *(void *)v88 = off_1F148A5D8;
          v88[2] = 561211770;
        }
        uint64_t v35 = *((void *)this + 43);
        uint64_t v36 = *(void *)(v35 + 400);
        uint64_t v20 = *(std::__shared_weak_count **)(v35 + 408);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        strcpy(buf, "noxbbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        (*(void (**)(uint64_t))(*(void *)v36 + 576))(v36);
        goto LABEL_124;
      }
    }
    else
    {
      if (mSelector == 1651013225)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInBox.cpp";
            __int16 v92 = 1024;
            int v93 = 305;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioBoxPropertyHasVideo", buf, 0x12u);
          }
          int64x2_t v81 = __cxa_allocate_exception(0x10uLL);
          *(void *)int64x2_t v81 = off_1F148A5D8;
          v81[2] = 561211770;
        }
        uint64_t v55 = *((void *)this + 43);
        uint64_t v56 = *(void *)(v55 + 400);
        uint64_t v20 = *(std::__shared_weak_count **)(v55 + 408);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        strcpy(buf, "ivhbbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        (*(void (**)(uint64_t))(*(void *)v56 + 576))(v56);
        goto LABEL_124;
      }
      if (mSelector == 1651536495)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInBox.cpp";
            __int16 v92 = 1024;
            int v93 = 321;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioBoxPropertyIsProtected", buf, 0x12u);
          }
          std::string::size_type v86 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::string::size_type v86 = off_1F148A5D8;
          v86[2] = 561211770;
        }
        uint64_t v29 = *((void *)this + 43);
        uint64_t v30 = *(void *)(v29 + 400);
        uint64_t v20 = *(std::__shared_weak_count **)(v29 + 408);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        strcpy(buf, "orpbbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        (*(void (**)(uint64_t))(*(void *)v30 + 576))(v30);
        goto LABEL_124;
      }
    }
    goto LABEL_95;
  }
  if ((int)mSelector > 1651007860)
  {
    if (mSelector == 1651007861)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_PlugInBox.cpp";
          __int16 v92 = 1024;
          int v93 = 297;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioBoxPropertyHasAudio", buf, 0x12u);
        }
        v82 = __cxa_allocate_exception(0x10uLL);
        *(void *)v82 = off_1F148A5D8;
        v82[2] = 561211770;
      }
      uint64_t v57 = *((void *)this + 43);
      uint64_t v58 = *(void *)(v57 + 400);
      uint64_t v20 = *(std::__shared_weak_count **)(v57 + 408);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      strcpy(buf, "uahbbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      (*(void (**)(uint64_t))(*(void *)v58 + 576))(v58);
      goto LABEL_124;
    }
    if (mSelector == 1651010921)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_PlugInBox.cpp";
          __int16 v92 = 1024;
          int v93 = 313;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInBox::GetPropertyData: bad property data size for kAudioBoxPropertyHasMIDI", buf, 0x12u);
        }
        v87 = __cxa_allocate_exception(0x10uLL);
        *(void *)v87 = off_1F148A5D8;
        v87[2] = 561211770;
      }
      uint64_t v33 = *((void *)this + 43);
      uint64_t v34 = *(void *)(v33 + 400);
      uint64_t v20 = *(std::__shared_weak_count **)(v33 + 408);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      strcpy(buf, "imhbbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      (*(void (**)(uint64_t))(*(void *)v34 + 576))(v34);
      goto LABEL_124;
    }
    goto LABEL_95;
  }
  if (mSelector == 1650682915)
  {
    uint64_t v50 = *((void *)this + 43);
    uint64_t v51 = *(void *)(v50 + 400);
    char v52 = *(std::__shared_weak_count **)(v50 + 408);
    if (v52) {
      atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v53 = *((unsigned int *)this + 89);
    if (a9) {
      uint64_t v54 = *((unsigned int *)a9 + 58);
    }
    else {
      uint64_t v54 = 0;
    }
    strcpy(buf, "#lcbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *, void, void, uint64_t, unsigned int *, char *))(*(void *)v51 + 576))(v51, v53, v54, buf, 0, 0, a4, a5, a6);
    if (v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    }
    unint64_t v67 = *a5;
    if (v67 >= 4)
    {
      unint64_t v68 = v67 >> 2;
      do
      {
        std::string::size_type v69 = (HALS_ObjectMap *)HALS_PlugIn::CopyClockDeviceByUCID(*((HALS_PlugIn **)this + 43), *(_DWORD *)v11);
        if (v69) {
          int v71 = *((_DWORD *)v69 + 4);
        }
        else {
          int v71 = 0;
        }
        *(_DWORD *)uint64_t v11 = v71;
        HALS_ObjectMap::ReleaseObject(v69, v70);
        uint64_t v11 = (uint64_t *)((char *)v11 + 4);
        --v68;
      }
      while (v68);
    }
  }
  else
  {
    if (mSelector != 1650751011) {
      goto LABEL_95;
    }
    uint64_t v21 = *((void *)this + 43);
    uint64_t v22 = *(void *)(v21 + 400);
    uint64_t v23 = *(std::__shared_weak_count **)(v21 + 408);
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = *((unsigned int *)this + 89);
    if (a9) {
      uint64_t v25 = *((unsigned int *)a9 + 58);
    }
    else {
      uint64_t v25 = 0;
    }
    strcpy(buf, "#vdbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *, void, void, uint64_t, unsigned int *, char *))(*(void *)v22 + 576))(v22, v24, v25, buf, 0, 0, a4, a5, a6);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    unint64_t v72 = *a5;
    if (v72 >= 4)
    {
      unint64_t v73 = v72 >> 2;
      do
      {
        unint64_t v74 = (HALS_ObjectMap *)HALS_PlugIn::CopyDeviceByUCID(*((HALS_PlugIn **)this + 43), *(_DWORD *)v11);
        if (v74) {
          int v76 = *((_DWORD *)v74 + 4);
        }
        else {
          int v76 = 0;
        }
        *(_DWORD *)uint64_t v11 = v76;
        HALS_ObjectMap::ReleaseObject(v74, v75);
        uint64_t v11 = (uint64_t *)((char *)v11 + 4);
        --v73;
      }
      while (v73);
    }
  }
}

void sub_1BAC24CBC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInBox::GetPropertyDataSize(HALS_PlugInBox *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, HALS_Client *a6)
{
  uint64_t mSelector = a3->mSelector;
  if ((int)mSelector <= 1819173228)
  {
    switch(mSelector)
    {
      case 0x62636C23:
        uint64_t v16 = *((void *)this + 43);
        uint64_t v17 = *(void *)(v16 + 400);
        uint64_t v18 = *(std::__shared_weak_count **)(v16 + 408);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v19 = *((unsigned int *)this + 89);
        if (a6) {
          uint64_t v20 = *((unsigned int *)a6 + 58);
        }
        else {
          uint64_t v20 = 0;
        }
        uint64_t v32 = 0x676C6F6262636C23;
        int v33 = 0;
        uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void, void))(*(void *)v17 + 568))(v17, v19, v20, &v32, 0, 0);
        break;
      case 0x62647623:
        uint64_t v21 = *((void *)this + 43);
        uint64_t v22 = *(void *)(v21 + 400);
        uint64_t v18 = *(std::__shared_weak_count **)(v21 + 408);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v23 = *((unsigned int *)this + 89);
        if (a6) {
          uint64_t v24 = *((unsigned int *)a6 + 58);
        }
        else {
          uint64_t v24 = 0;
        }
        uint64_t v32 = 0x676C6F6262647623;
        int v33 = 0;
        uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void, void))(*(void *)v22 + 568))(v22, v23, v24, &v32, 0, 0);
        break;
      case 0x63757374:
        return (12 * *((_DWORD *)this + 92));
      default:
        goto LABEL_23;
    }
    uint64_t v13 = v30;
    if (!v18) {
      return v13;
    }
    uint64_t v31 = v18;
LABEL_38:
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    return v13;
  }
  if (mSelector == 1819173229 || mSelector == 1851878764 || mSelector == 1920168547) {
    return 8;
  }
LABEL_23:
  if (!HALS_Box::HasProperty((uint64_t)this, a2, (int *)a3))
  {
    if (!(*(unsigned int (**)(char *, uint64_t))(*((void *)this + 42) + 24))((char *)this + 336, mSelector))return 0; {
    uint64_t v26 = *((void *)this + 43);
    }
    uint64_t v27 = *(void *)(v26 + 400);
    uint64_t v28 = *(std::__shared_weak_count **)(v26 + 408);
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (a6) {
      uint64_t v29 = *((unsigned int *)a6 + 58);
    }
    else {
      uint64_t v29 = 0;
    }
    uint64_t v13 = (*(uint64_t (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)v27 + 568))(v27, *((unsigned int *)this + 89), v29, a3, a4, a5);
    if (!v28) {
      return v13;
    }
    uint64_t v31 = v28;
    goto LABEL_38;
  }

  return HALS_Box::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
}

void sub_1BAC25024(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInBox::IsPropertySettable(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v8 = 0;
  uint64_t v9 = *a3;
  if ((int)v9 <= 1768187245)
  {
    if (v9 != 1652060014)
    {
      if (v9 == 1668641652) {
        return v8;
      }
      goto LABEL_11;
    }
    uint64_t v20 = *(void *)(a1 + 344);
    uint64_t v21 = *(void *)(v20 + 400);
    uint64_t v12 = *(std::__shared_weak_count **)(v20 + 408);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = *(unsigned int *)(a1 + 356);
    if (a4) {
      uint64_t v23 = *(unsigned int *)(a4 + 232);
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v30 = 0x676C6F6262786F6ELL;
    int v31 = 0;
    uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v21 + 560))(v21, v22, v23, &v30);
LABEL_34:
    uint64_t v8 = v28;
    if (v12)
    {
      uint64_t v29 = v12;
LABEL_36:
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    return v8;
  }
  switch(v9)
  {
    case 0x6964656E:
      uint64_t v16 = *(void *)(a1 + 344);
      uint64_t v17 = *(void *)(v16 + 400);
      uint64_t v12 = *(std::__shared_weak_count **)(v16 + 408);
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = *(unsigned int *)(a1 + 356);
      if (a4) {
        uint64_t v19 = *(unsigned int *)(a4 + 232);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v30 = 0x676C6F626964656ELL;
      int v31 = 0;
      uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v17 + 560))(v17, v18, v19, &v30);
      goto LABEL_34;
    case 0x72737263:
      return v8;
    case 0x6C6E616D:
      uint64_t v10 = *(void *)(a1 + 344);
      uint64_t v11 = *(void *)(v10 + 400);
      uint64_t v12 = *(std::__shared_weak_count **)(v10 + 408);
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = *(unsigned int *)(a1 + 356);
      if (a4) {
        uint64_t v14 = *(unsigned int *)(a4 + 232);
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v30 = 0x676C6F626C6E616DLL;
      int v31 = 0;
      uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v11 + 560))(v11, v13, v14, &v30);
      goto LABEL_34;
  }
LABEL_11:
  if (!HALS_Box::HasProperty(a1, a2, a3))
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(a1 + 336) + 24))(a1 + 336, v9)) {
      return 0;
    }
    uint64_t v24 = *(void *)(a1 + 344);
    uint64_t v25 = *(void *)(v24 + 400);
    uint64_t v26 = *(std::__shared_weak_count **)(v24 + 408);
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (a4) {
      uint64_t v27 = *(unsigned int *)(a4 + 232);
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*(void *)v25 + 560))(v25, *(unsigned int *)(a1 + 356), v27, a3);
    if (!v26) {
      return v8;
    }
    uint64_t v29 = v26;
    goto LABEL_36;
  }

  return HALS_Box::IsPropertySettable(a1, a2, a3);
}

void sub_1BAC25350(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInBox::HasProperty(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v7 = *a3;
  if ((int)v7 <= 1819111267)
  {
    if ((int)v7 <= 1768187245)
    {
      if (v7 == 1668641652) {
        return *(_DWORD *)(a1 + 368) != 0;
      }
      if (v7 == 1719105134)
      {
        uint64_t v8 = *(void *)(a1 + 344);
        uint64_t v9 = *(void *)(v8 + 400);
        uint64_t v10 = *(std::__shared_weak_count **)(v8 + 408);
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v11 = *(unsigned int *)(a1 + 356);
        if (a4) {
          uint64_t v12 = *(unsigned int *)(a4 + 232);
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v42 = 0x676C6F626677766ELL;
        int v43 = 0;
        uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v9 + 552))(v9, v11, v12, &v42);
        goto LABEL_59;
      }
LABEL_40:
      if ((HALS_Box::HasProperty(a1, a2, a3) & 1) == 0)
      {
        if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(a1 + 336) + 24))(a1 + 336, v7)) {
          return 0;
        }
        uint64_t v36 = *(void *)(a1 + 344);
        uint64_t v37 = *(void *)(v36 + 400);
        uint64_t v38 = *(std::__shared_weak_count **)(v36 + 408);
        if (v38) {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (a4) {
          uint64_t v39 = *(unsigned int *)(a4 + 232);
        }
        else {
          uint64_t v39 = 0;
        }
        uint64_t v25 = (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*(void *)v37 + 552))(v37, *(unsigned int *)(a1 + 356), v39, a3);
        if (!v38) {
          return v25;
        }
        unint64_t v41 = v38;
        goto LABEL_61;
      }
      return 1;
    }
    if (v7 == 1768187246)
    {
      uint64_t v30 = *(void *)(a1 + 344);
      uint64_t v31 = *(void *)(v30 + 400);
      uint64_t v10 = *(std::__shared_weak_count **)(v30 + 408);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v32 = *(unsigned int *)(a1 + 356);
      if (a4) {
        uint64_t v33 = *(unsigned int *)(a4 + 232);
      }
      else {
        uint64_t v33 = 0;
      }
      uint64_t v42 = 0x676C6F626964656ELL;
      int v43 = 0;
      uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v31 + 552))(v31, v32, v33, &v42);
    }
    else
    {
      if (v7 != 1819107691) {
        goto LABEL_40;
      }
      uint64_t v17 = *(void *)(a1 + 344);
      uint64_t v18 = *(void *)(v17 + 400);
      uint64_t v10 = *(std::__shared_weak_count **)(v17 + 408);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v19 = *(unsigned int *)(a1 + 356);
      if (a4) {
        uint64_t v20 = *(unsigned int *)(a4 + 232);
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v42 = 0x676C6F626C6D616BLL;
      int v43 = 0;
      uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v18 + 552))(v18, v19, v20, &v42);
    }
LABEL_59:
    uint64_t v25 = v40;
    if (v10)
    {
      unint64_t v41 = v10;
LABEL_61:
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      return v25;
    }
    return v25;
  }
  if ((int)v7 <= 1920168546)
  {
    if (v7 == 1819111268)
    {
      uint64_t v26 = *(void *)(a1 + 344);
      uint64_t v27 = *(void *)(v26 + 400);
      uint64_t v10 = *(std::__shared_weak_count **)(v26 + 408);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v28 = *(unsigned int *)(a1 + 356);
      if (a4) {
        uint64_t v29 = *(unsigned int *)(a4 + 232);
      }
      else {
        uint64_t v29 = 0;
      }
      uint64_t v42 = 0x676C6F626C6D6F64;
      int v43 = 0;
      uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v27 + 552))(v27, v28, v29, &v42);
    }
    else
    {
      if (v7 != 1819173229) {
        goto LABEL_40;
      }
      uint64_t v13 = *(void *)(a1 + 344);
      uint64_t v14 = *(void *)(v13 + 400);
      uint64_t v10 = *(std::__shared_weak_count **)(v13 + 408);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v15 = *(unsigned int *)(a1 + 356);
      if (a4) {
        uint64_t v16 = *(unsigned int *)(a4 + 232);
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v42 = 0x676C6F626C6E616DLL;
      int v43 = 0;
      uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v14 + 552))(v14, v15, v16, &v42);
    }
    goto LABEL_59;
  }
  if (v7 != 1920168547)
  {
    if (v7 != 1936618861) {
      goto LABEL_40;
    }
    uint64_t v21 = *(void *)(a1 + 344);
    uint64_t v22 = *(void *)(v21 + 400);
    uint64_t v10 = *(std::__shared_weak_count **)(v21 + 408);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v23 = *(unsigned int *)(a1 + 356);
    if (a4) {
      uint64_t v24 = *(unsigned int *)(a4 + 232);
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v42 = 0x676C6F62736E756DLL;
    int v43 = 0;
    uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v22 + 552))(v22, v23, v24, &v42);
    goto LABEL_59;
  }
  uint64_t v34 = a1 + 336;

  return HALS_PlugInObject::HasResourceBundle(v34, a4);
}

void sub_1BAC25818(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PlugInBox::Activate(HALS_PlugInBox *this, HALS_Object *a2)
{
  HALS_Object::Activate(this, a2);
  (*(void (**)(void))(*((void *)this + 42) + 32))();

  HALS_PlugInBox::CreateControls(this);
}

void *mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::PlugInRef_Traits>::BasicRef(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFBundleGetTypeID())
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return a1;
}

void sub_1BAC25978(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  applesauce::CF::ObjectRef<__CFBundle *>::~ObjectRef(v1);
  _Unwind_Resume(a1);
}

applesauce::CF::ArrayRef *mcp_applesauce::CF::PlugInRef_proxy::find_factories_for_type(applesauce::CF::ArrayRef *this, const __CFUUID *a2, const __CFUUID *a3)
{
  CFTypeID v3 = this;
  if (a2)
  {
    FactoriesForPlugInTypeInPlugIuint64_t n = CFPlugInFindFactoriesForPlugInTypeInPlugIn(a3, a2);
    return applesauce::CF::ArrayRef::ArrayRef(v3, FactoriesForPlugInTypeInPlugIn);
  }
  else
  {
    *(void *)this = 0;
  }
  return this;
}

const void **mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::PlugInRef_Traits>::~BasicRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void Sandbox_Extensions::cache_iokit_registry_token(Sandbox_Extensions *this, const char *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = sandbox_extension_issue_iokit_registry_entry_class();
  if (v3)
  {
    uint64_t v4 = v3;
    unint64_t v6 = (uint64_t *)*((void *)this + 1);
    unint64_t v5 = *((void *)this + 2);
    if ((unint64_t)v6 >= v5)
    {
      uint64_t v17 = ((uint64_t)v6 - *(void *)this) >> 3;
      if ((unint64_t)(v17 + 1) >> 61) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v18 = v5 - *(void *)this;
      uint64_t v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
        uint64_t v19 = v17 + 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v19;
      }
      if (v20) {
        unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v20);
      }
      else {
        uint64_t v21 = 0;
      }
      uint64_t v22 = (uint64_t *)(v20 + 8 * v17);
      unint64_t v23 = v20 + 8 * v21;
      *uint64_t v22 = v4;
      uint64_t v7 = v22 + 1;
      uint64_t v25 = *(char **)this;
      uint64_t v24 = (char *)*((void *)this + 1);
      if (v24 != *(char **)this)
      {
        do
        {
          uint64_t v26 = *((void *)v24 - 1);
          v24 -= 8;
          *--uint64_t v22 = v26;
        }
        while (v24 != v25);
        uint64_t v24 = *(char **)this;
      }
      *(void *)this = v22;
      *((void *)this + 1) = v7;
      *((void *)this + 2) = v23;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      uint64_t *v6 = v3;
      uint64_t v7 = v6 + 1;
    }
    *((void *)this + 1) = v7;
  }
  else
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v27, "com.apple.coreaudio", "AMCP");
    uint64_t v8 = *v27;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      unint64_t v11 = 0;
      uint64_t v12 = 0;
      int v13 = 47;
      do
      {
        uint64_t v14 = &aLibraryCachesC_54[v11];
        if (v13 == 47) {
          uint64_t v12 = &aLibraryCachesC_54[v11];
        }
        int v13 = v14[1];
        if (!v14[1]) {
          break;
        }
      }
      while (v11++ < 0xFFF);
      if (v12) {
        uint64_t v16 = v12 + 1;
      }
      else {
        uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
      }
      LODWORD(v27) = 67109634;
      HIDWORD(v27) = v10;
      *(_WORD *)uint64_t v28 = 2080;
      *(void *)&uint64_t v28[2] = v16;
      __int16 v29 = 1024;
      int v30 = 100;
      _os_log_debug_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d sandbox_extension_issue_iokit_registry_entry_class not granted.", (uint8_t *)&v27, 0x18u);
    }
  }
}

applesauce::CF::StringRef *applesauce::CF::details::at_to<applesauce::CF::StringRef>(applesauce::CF::StringRef *a1, CFArrayRef theArray, unint64_t a3)
{
  if (CFArrayGetCount(theArray) <= a3
    || (ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3), (uint64_t v7 = ValueAtIndex) == 0))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(ValueAtIndex);

  return applesauce::CF::StringRef::StringRef(a1, v7);
}

void sub_1BAC25CAC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AMCP::Core::Core::call_operation_function<void,AMCP::Pause_Behavior>(AMCP::Address *a1, unsigned int *a2, int a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v21 = **(NSObject ***)buf;
    if (*(void *)v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = pthread_self();
      mach_port_t v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v23;
      *(_WORD *)unint64_t v41 = 2080;
      *(void *)&v41[2] = "Core.h";
      __int16 v42 = 1024;
      int v43 = 198;
      __int16 v44 = 2080;
      *(void *)int v45 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1BAA78000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v24, (int8x8_t *)a1, a2);
  uint64_t v7 = v24;
  if (!v24)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v15 = **(NSObject ***)buf;
    if (*(void *)v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = pthread_self();
      mach_port_t v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v17;
      *(_WORD *)unint64_t v41 = 2080;
      *(void *)&v41[2] = "Core.h";
      __int16 v42 = 1024;
      int v43 = 202;
      _os_log_error_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v31);
    std::runtime_error::runtime_error(&v32, &v31);
    std::runtime_error::runtime_error(&v33, &v32);
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    int v38 = -1;
    v33.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v34 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v33);
    *(void *)&v45[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = void, Argument_Types = <AMCP::Pause_Behavior>]";
    uint64_t v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    int v47 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v26);
    long long v29 = v26;
    uint64_t v30 = v27;
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    uint64_t v28 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v8 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Pause_Behavior)>>();
  uint64_t v9 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v8);
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v18 = **(NSObject ***)buf;
    if (*(void *)v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = pthread_self();
      mach_port_t v20 = pthread_mach_thread_np(v19);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v20;
      *(_WORD *)unint64_t v41 = 2080;
      *(void *)&v41[2] = "Operation.h";
      __int16 v42 = 1024;
      int v43 = 154;
      _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v31);
    std::runtime_error::runtime_error(&v32, &v31);
    std::runtime_error::runtime_error(&v33, &v32);
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    int v38 = -1;
    v33.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v34 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v33);
    *(void *)&v45[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, "
                         "Argument_Types = <AMCP::Pause_Behavior>]";
    uint64_t v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v47 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v26);
    long long v29 = v26;
    uint64_t v30 = v27;
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    uint64_t v28 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  mach_port_t v10 = v9;
  if (!*((void *)v9 + 7)
    || (*(void *)AudioObjectPropertyAddress buf = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Pause_Behavior)>>(),
        (uint64_t v9 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v10 + 7))(4, (uint64_t)v10 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v12 = **(NSObject ***)buf;
    if (*(void *)v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)unint64_t v41 = 2080;
      *(void *)&v41[2] = "Operation.h";
      __int16 v42 = 1024;
      int v43 = 161;
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v31);
    std::runtime_error::runtime_error(&v32, &v31);
    std::runtime_error::runtime_error(&v33, &v32);
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    int v38 = -1;
    v33.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v34 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v33);
    *(void *)&v45[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, "
                         "Argument_Types = <AMCP::Pause_Behavior>]";
    uint64_t v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v47 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v26);
    long long v29 = v26;
    uint64_t v30 = v27;
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    uint64_t v28 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = a3;
  uint64_t v11 = *((void *)v9 + 3);
  if (!v11) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v11 + 48))(v11, buf);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
}

void sub_1BAC26434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::IO_Core::Graph_Manager::create_manifest(uint64_t a1, long long *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  AMCP::Graph::Graph::find_nodes_connected_to_context((uint64_t)&__p, (uint64_t)a2 + 8, a3);
  uint64_t v103 = 0;
  v104 = 0;
  unint64_t v105 = 0;
  std::vector<std::shared_ptr<AMCP::Graph::Node>>::reserve(&v103, *((void *)a2 + 26));
  unint64_t v6 = v114;
  uint64_t v96 = a4;
  if (v114)
  {
    do
    {
      uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>((void *)a2 + 23, (unsigned __int8 *)v6 + 16);
      if (!v7) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unint64_t v8 = v7;
      uint64_t v9 = v104;
      if ((unint64_t)v104 >= v105)
      {
        uint64_t v12 = ((uint64_t)v104 - v103) >> 4;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = v105 - v103;
        if ((uint64_t)(v105 - v103) >> 3 > v13) {
          unint64_t v13 = v14 >> 3;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        *((void *)&v122 + 1) = &v105;
        uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v15);
        mach_port_t v17 = &v16[16 * v12];
        v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
        v121.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
        *(void *)&long long v122 = &v16[16 * v18];
        long long v19 = *(_OWORD *)(v8 + 40);
        *(_OWORD *)mach_port_t v17 = v19;
        if (*((void *)&v19 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        v121.__r_.__value_.__r.__words[2] = (std::string::size_type)(v17 + 16);
        std::vector<std::shared_ptr<AMCP::Graph::Timebase>>::__swap_out_circular_buffer(&v103, &v121);
        uint64_t v11 = v104;
        std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v121);
      }
      else
      {
        void *v104 = *((void *)v7 + 5);
        uint64_t v10 = *((void *)v7 + 6);
        v9[1] = v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v11 = v9 + 2;
      }
      v104 = v11;
      unint64_t v6 = (void **)*v6;
    }
    while (v6);
    mach_port_t v20 = v114;
  }
  else
  {
    mach_port_t v20 = 0;
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v20);
  uint64_t v21 = __p.__vftable;
  __p.__vftable = 0;
  if (v21) {
    operator delete(v21);
  }
  *(_OWORD *)v100 = 0u;
  long long v101 = 0u;
  int v102 = 1065353216;
  uint64_t v22 = v103;
  mach_port_t v23 = v104;
  while (1)
  {
    if ((void *)v22 == v23)
    {
      memset(v119, 0, sizeof(v119));
      int v120 = 1065353216;
      uint64_t v28 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v100, a3);
      if (!v28) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      long long v29 = v28;
      long long v98 = 0uLL;
      v99[0] = 0;
      std::vector<std::shared_ptr<AMCP::Graph::Node>>::reserve((uint64_t *)&v98, *((unint64_t *)&v101 + 1));
      uint64_t v30 = (std::string **)(v29 + 40);
      AMCP::Graph::topological_sort(v30, 1, v100, (void *)a2 + 8, (uint64_t *)&v98, v119);
      if ((void)v98 == *((void *)&v98 + 1))
      {
        AMCP::Log::Scope_Registry::get(v31);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v121, "com.apple.coreaudio", "AMCP");
        v82 = *(NSObject **)v121.__r_.__value_.__l.__data_;
        if (v121.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v121.__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
        {
          v83 = pthread_self();
          mach_port_t v84 = pthread_mach_thread_np(v83);
          LODWORD(v121.__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(v121.__r_.__value_.__r.__words[0]) = v84;
          LOWORD(v121.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v121.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
          WORD1(v121.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v121.__r_.__value_.__r.__words[2]) = 1152;
          LOWORD(v122) = 2080;
          *(void *)((char *)&v122 + 2) = "not (not results.empty())";
          _os_log_error_impl(&dword_1BAA78000, v82, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v121, 0x22u);
        }
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v112);
        std::logic_error::logic_error(&v106, &v112);
        v106.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&__p, &v106);
        uint64_t v115 = 0;
        uint64_t v116 = 0;
        uint64_t v117 = 0;
        int v118 = -1;
        __p.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        v114 = (void **)&unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v121, (uint64_t)&__p);
        *((void *)&v122 + 1) = "std::vector<std::shared_ptr<Node>> AMCP::Graph::topological_sort(const Graph_Node_UID &"
                                 ", const Node_Map &, const Wire_Index &)";
        int v123 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
        int v124 = 1152;
        std::vector<void *>::vector(&v109);
        int v85 = backtrace((void **)v109.__r_.__value_.__l.__data_, (v109.__r_.__value_.__l.__size_ - v109.__r_.__value_.__r.__words[0]) >> 3);
        std::vector<void *>::resize(&v109.__r_.__value_.__l.__data_, v85);
        std::string v111 = v109;
        uint64_t v110 = &unk_1F148AA90;
        memset(&v109, 0, sizeof(v109));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      if (*((void *)&v119[1] + 1))
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)&v119[1]);
        *(void *)&v119[1] = 0;
        uint64_t v32 = *((void *)&v119[0] + 1);
        if (*((void *)&v119[0] + 1))
        {
          uint64_t v33 = 0;
          do
            *(void *)(*(void *)&v119[0] + 8 * v33++) = 0;
          while (v32 != v33);
        }
        *((void *)&v119[1] + 1) = 0;
      }
      memset(&v112, 0, sizeof(v112));
      std::vector<std::shared_ptr<AMCP::Graph::Node>>::reserve((uint64_t *)&v112, *((unint64_t *)&v101 + 1));
      AMCP::Graph::topological_sort(v30, 0, v100, (void *)a2 + 8, (uint64_t *)&v112, v119);
      std::string::size_type size = v112.__r_.__value_.__l.__size_;
      if (v112.__r_.__value_.__r.__words[0] == v112.__r_.__value_.__l.__size_)
      {
        AMCP::Log::Scope_Registry::get(v34);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v121, "com.apple.coreaudio", "AMCP");
        std::string::size_type v86 = *(NSObject **)v121.__r_.__value_.__l.__data_;
        if (v121.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v121.__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
        {
          v87 = pthread_self();
          mach_port_t v88 = pthread_mach_thread_np(v87);
          LODWORD(v121.__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(v121.__r_.__value_.__r.__words[0]) = v88;
          LOWORD(v121.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v121.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
          WORD1(v121.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v121.__r_.__value_.__r.__words[2]) = 1160;
          LOWORD(v122) = 2080;
          *(void *)((char *)&v122 + 2) = "not (not output_results.empty())";
          _os_log_error_impl(&dword_1BAA78000, v86, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v121, 0x22u);
        }
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v109);
        std::logic_error::logic_error(&v108, &v109);
        v108.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&__p, &v108);
        uint64_t v115 = 0;
        uint64_t v116 = 0;
        uint64_t v117 = 0;
        int v118 = -1;
        __p.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        v114 = (void **)&unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v121, (uint64_t)&__p);
        *((void *)&v122 + 1) = "std::vector<std::shared_ptr<Node>> AMCP::Graph::topological_sort(const Graph_Node_UID &"
                                 ", const Node_Map &, const Wire_Index &)";
        int v123 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
        int v124 = 1160;
        std::vector<void *>::vector(&v106);
        int v89 = backtrace((void **)&v106.~logic_error, (unint64_t)(v106.__imp_.__imp_ - (const char *)v106.__vftable) >> 3);
        std::vector<void *>::resize((char **)&v106, v89);
        *(std::logic_error *)&v111.__r_.__value_.__l.__data_ = v106;
        uint64_t v110 = &unk_1F148AA90;
        v111.__r_.__value_.__r.__words[2] = v107;
        v106.__vftable = 0;
        v106.__imp_.__imp_ = 0;
        std::string::size_type v107 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      std::string::size_type v36 = v112.__r_.__value_.__l.__size_ - 16;
      while (size != v36)
      {
        uint64_t v37 = *(std::__shared_weak_count **)(size - 8);
        if (v37) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v37);
        }
        size -= 16;
      }
      v112.__r_.__value_.__l.__size_ = v36;
      int v38 = (uint64_t *)v112.__r_.__value_.__r.__words[0];
      char v39 = (uint64_t *)(v36 - 16);
      BOOL v40 = v112.__r_.__value_.__r.__words[0] != v36 && (unint64_t)v39 > v112.__r_.__value_.__r.__words[0];
      v95 = a2;
      uint64_t v94 = (uint64_t)(a2 + 4);
      if (v40)
      {
        do
        {
          uint64_t v41 = *v38;
          *int v38 = *v39;
          uint64_t *v39 = v41;
          uint64_t v42 = v38[1];
          v38[1] = v39[1];
          v39[1] = v42;
          v38 += 2;
          v39 -= 2;
        }
        while (v38 < v39);
        std::string::size_type v36 = v112.__r_.__value_.__l.__size_;
        int v38 = (uint64_t *)v112.__r_.__value_.__r.__words[0];
      }
      if ((uint64_t)(v36 - (void)v38) >= 1)
      {
        uint64_t v43 = (uint64_t)(v36 - (void)v38) >> 4;
        long long v44 = v98;
        uint64_t v45 = (uint64_t)(*((void *)&v98 + 1) - v98) >> 4;
        uint64_t v46 = (void *)(v98 + ((*((void *)&v98 + 1) - v98) & 0xFFFFFFFFFFFFFFF0));
        if (v43 > (uint64_t)(v99[0] - *((void *)&v98 + 1)) >> 4)
        {
          unint64_t v47 = v45 + v43;
          if ((unint64_t)(v45 + v43) >> 60) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v48 = v99[0] - v98;
          if ((uint64_t)(v99[0] - v98) >> 3 > v47) {
            unint64_t v47 = v48 >> 3;
          }
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v49 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v49 = v47;
          }
          *((void *)&v122 + 1) = v99;
          if (v49) {
            unint64_t v49 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v49);
          }
          else {
            uint64_t v50 = 0;
          }
          uint64_t v57 = (uint64_t *)(v49 + 16 * v45);
          v121.__r_.__value_.__r.__words[0] = v49;
          v121.__r_.__value_.__l.__size_ = (std::string::size_type)v57;
          *(void *)&long long v122 = v49 + 16 * v50;
          std::string::size_type v58 = (std::string::size_type)&v57[2 * v43];
          do
          {
            *uint64_t v57 = *v38;
            uint64_t v59 = v38[1];
            v57[1] = v59;
            if (v59) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v59 + 8), 1uLL, memory_order_relaxed);
            }
            v57 += 2;
            v38 += 2;
          }
          while (v57 != (uint64_t *)v58);
          v121.__r_.__value_.__r.__words[2] = v58;
          v121.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<AMCP::IOAudio2::Stream>>,std::reverse_iterator<std::shared_ptr<AMCP::IOAudio2::Stream>*>,std::reverse_iterator<std::shared_ptr<AMCP::IOAudio2::Stream>*>,std::reverse_iterator<std::shared_ptr<AMCP::IOAudio2::Stream>*>>((uint64_t)v99, (uint64_t)v46, v46, v98, (void *)v98, v121.__r_.__value_.__l.__size_, v121.__r_.__value_.__l.__size_);
          uint64_t v60 = (void *)*((void *)&v98 + 1);
          uint64_t v61 = (_OWORD *)v121.__r_.__value_.__r.__words[2];
          uint64_t v110 = (void *)v121.__r_.__value_.__r.__words[2];
          v109.__r_.__value_.__r.__words[0] = v121.__r_.__value_.__r.__words[2];
          __p.__vftable = (std::logic_error_vtbl *)v99;
          __p.__imp_.__imp_ = (const char *)&v109;
          v114 = &v110;
          if (v46 != *((void **)&v98 + 1))
          {
            do
            {
              *v61++ = *(_OWORD *)v46;
              *uint64_t v46 = 0;
              v46[1] = 0;
              v46 += 2;
            }
            while (v46 != v60);
            uint64_t v110 = v61;
          }
          LOBYTE(v115) = 1;
          std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>,std::shared_ptr<AMCP::Graph::Timebase>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&__p);
          long long v62 = v98;
          *(void *)&long long v98 = v121.__r_.__value_.__l.__size_;
          *((void *)&v98 + 1) = v61;
          *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = v62;
          uint64_t v63 = v99[0];
          v99[0] = v122;
          *(void *)&long long v122 = v63;
          v121.__r_.__value_.__r.__words[0] = v62;
          std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v121);
          goto LABEL_99;
        }
        uint64_t v51 = *((void *)&v98 + 1) - (void)v46;
        uint64_t v52 = (uint64_t)(*((void *)&v98 + 1) - (void)v46) >> 4;
        if (v52 >= v43)
        {
          uint64_t v53 = &v38[2 * v43];
          uint64_t v54 = (std::logic_error_vtbl *)*((void *)&v98 + 1);
          goto LABEL_85;
        }
        __p.__vftable = (std::logic_error_vtbl *)*((void *)&v98 + 1);
        uint64_t v53 = &v38[2 * v52];
        uint64_t v110 = (void *)*((void *)&v98 + 1);
        v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v99;
        v121.__r_.__value_.__l.__size_ = (std::string::size_type)&v110;
        v121.__r_.__value_.__r.__words[2] = (std::string::size_type)&__p;
        if (v53 == (uint64_t *)v36)
        {
          uint64_t v54 = (std::logic_error_vtbl *)*((void *)&v98 + 1);
        }
        else
        {
          uint64_t v54 = (std::logic_error_vtbl *)*((void *)&v98 + 1);
          uint64_t v55 = (void (__cdecl **)(std::logic_error *__hidden))&v38[2 * v52];
          do
          {
            v54->~logic_error = *v55;
            uint64_t v56 = v55[1];
            v54->~logic_error_0 = v56;
            if (v56) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)v56 + 1, 1uLL, memory_order_relaxed);
            }
            uint64_t v54 = (std::logic_error_vtbl *)((char *)v54 + 16);
            v55 += 2;
          }
          while (v55 != (void (__cdecl **)(std::logic_error *__hidden))v36);
          __p.__vftable = v54;
        }
        LOBYTE(v122) = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>,std::shared_ptr<AMCP::Graph::Timebase>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v121);
        *((void *)&v98 + 1) = v54;
        if (v51 >= 1)
        {
LABEL_85:
          uint64_t v64 = (std::logic_error_vtbl *)&v46[2 * v43];
          v65 = (char *)v54 - 16 * v43;
          uint64_t v66 = v54;
          if ((unint64_t)v65 < *((void *)&v44 + 1))
          {
            uint64_t v66 = v54;
            do
            {
              *(_OWORD *)&v66->~logic_error = *(_OWORD *)v65;
              uint64_t v66 = (std::logic_error_vtbl *)((char *)v66 + 16);
              *(void *)v65 = 0;
              *((void *)v65 + 1) = 0;
              v65 += 16;
            }
            while ((unint64_t)v65 < *((void *)&v44 + 1));
          }
          *((void *)&v98 + 1) = v66;
          if (v54 != v64)
          {
            p_what = (std::__shared_weak_count **)&v54[-1].what;
            uint64_t v68 = 16 * (((char *)v54 - (char *)v64) >> 4);
            uint64_t v69 = v44 + 16 * v45 - 16;
            do
            {
              unint64_t v70 = (void *)(v69 + v68);
              long long v71 = *(_OWORD *)(v69 + v68);
              *unint64_t v70 = 0;
              v70[1] = 0;
              unint64_t v72 = *p_what;
              *(_OWORD *)(p_what - 1) = v71;
              if (v72) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v72);
              }
              p_what -= 2;
              v68 -= 16;
            }
            while (v68);
          }
          for (; v38 != v53; v46 += 2)
          {
            uint64_t v74 = *v38;
            uint64_t v73 = v38[1];
            if (v73) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
            }
            unint64_t v75 = (std::__shared_weak_count *)v46[1];
            *uint64_t v46 = v74;
            v46[1] = v73;
            if (v75) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v75);
            }
            v38 += 2;
          }
        }
      }
LABEL_99:
      v121.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
      std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)&v119[1]);
      int v76 = *(void **)&v119[0];
      *(void *)&v119[0] = 0;
      if (v76) {
        operator delete(v76);
      }
      uint64_t v77 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v100, a3);
      if (v77)
      {
        uint64_t v78 = *((void *)v77 + 5);
        uint64_t v79 = *((void *)v77 + 6);
        if (v79) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v79 + 8), 1uLL, memory_order_relaxed);
        }
        if (v78)
        {
          std::string::size_type v80 = *(void *)(v78 + 152);
          v121.__r_.__value_.__r.__words[0] = *(void *)(v78 + 144);
          v121.__r_.__value_.__l.__size_ = v80;
          if (v80) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v80 + 8), 1uLL, memory_order_relaxed);
          }
          int64x2_t v81 = operator new(0x88uLL);
          v81[1] = 0;
          v81[2] = 0;
          *int64x2_t v81 = &unk_1F14724C8;
          AMCP::Graph::Manifest::Manifest((uint64_t)(v81 + 3), (uint64_t)&v98, v94, (uint64_t)&v121, v96, v95 + 19);
        }
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v77);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v121, "com.apple.coreaudio", "AMCP");
        v90 = *(NSObject **)v121.__r_.__value_.__l.__data_;
        if (v121.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v121.__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
        {
          v91 = pthread_self();
          mach_port_t v92 = pthread_mach_thread_np(v91);
          LODWORD(v121.__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(v121.__r_.__value_.__r.__words[0]) = v92;
          LOWORD(v121.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v121.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
          WORD1(v121.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v121.__r_.__value_.__r.__words[2]) = 1197;
          LOWORD(v122) = 2080;
          *(void *)((char *)&v122 + 2) = "not (io_context_node.operator BOOL())";
          _os_log_error_impl(&dword_1BAA78000, v90, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Error creating manifest", (uint8_t *)&v121, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v106);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Error creating manifest", (uint64_t)&v110);
        std::logic_error::logic_error((std::logic_error *)&v109, (const std::string *)&v110);
        v109.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
        std::logic_error::logic_error(&__p, (const std::logic_error *)&v109);
        uint64_t v115 = 0;
        uint64_t v116 = 0;
        uint64_t v117 = 0;
        int v118 = -1;
        __p.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        v114 = (void **)&unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v121, (uint64_t)&__p);
        *((void *)&v122 + 1) = "std::shared_ptr<Manifest> AMCP::Graph::Graph::create_manifest(const Graph_Node_UID &, c"
                                 "onst std::shared_ptr<Manifest_Inventory> &) const";
        int v123 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
        int v124 = 1197;
        std::vector<void *>::vector(&v112);
        int v93 = backtrace((void **)v112.__r_.__value_.__l.__data_, (v112.__r_.__value_.__l.__size_ - v112.__r_.__value_.__r.__words[0]) >> 3);
        std::vector<void *>::resize(&v112.__r_.__value_.__l.__data_, v93);
        *(std::string *)((char *)v119 + 8) = v112;
        *(void *)&v119[0] = &unk_1F148AA90;
        memset(&v112, 0, sizeof(v112));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v24 = *(std::string **)v22;
    if (*(char *)(*(void *)v22 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v121, v24[1].__r_.__value_.__l.__data_, v24[1].__r_.__value_.__l.__size_);
    }
    else {
      std::string v121 = v24[1];
    }
    uint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>((void *)a2 + 23, (unsigned __int8 *)&v121);
    long long v26 = v25;
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v121.__r_.__value_.__l.__data_);
      if (!v26) {
        goto LABEL_35;
      }
    }
    else if (!v25)
    {
      goto LABEL_35;
    }
    uint64_t v27 = *(std::string **)v22;
    if (*(char *)(*(void *)v22 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v121, v27[1].__r_.__value_.__l.__data_, v27[1].__r_.__value_.__l.__size_);
    }
    else {
      std::string v121 = v27[1];
    }
    std::unordered_map<std::string,std::shared_ptr<AMCP::Graph::Node>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Graph::Node> const&>((uint64_t)v100, (uint64_t)&v121, (uint64_t *)v26 + 5);
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v121.__r_.__value_.__l.__data_);
    }
LABEL_35:
    v22 += 16;
  }
}

void sub_1BAC27630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,void *a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char *a53,uint64_t a54,void *a55)
{
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  *(void *)(v56 - 176) = &a15;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 176));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__deallocate_node(a21);
  std::string::size_type v58 = __p;
  std::logic_error __p = 0;
  if (v58) {
    operator delete(v58);
  }
  a53 = &a24;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  _Unwind_Resume(a1);
}

uint64_t AMCP::IO_Core::Graph_Manager::modify_graph(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[24] = 0;
  unint64_t v8 = operator new(0x20uLL);
  v8[1] = 0;
  v8[2] = 0;
  *unint64_t v8 = &unk_1F1488C30;
  v15[1] = (uint64_t)v8;
  *((unsigned char *)v8 + 24) = 0;
  v15[0] = (uint64_t)(v8 + 3);
  int v16 = 0;
  int v17 = 0;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)v12, v15);
  *(void *)&long long v13 = a1;
  *((void *)&v13 + 1) = a2;
  *(void *)&long long v14 = a3;
  *((void *)&v14 + 1) = a4;
  long long v19 = 0;
  uint64_t v9 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v9 = &unk_1F1466278;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v9 + 8), v12);
  long long v10 = v14;
  *(_OWORD *)(v9 + 40) = v13;
  *(_OWORD *)(v9 + 56) = v10;
  long long v19 = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)a2 + 24))(a2, 1, 1, 22, v18);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v18);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v12);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v15);
}

void sub_1BAC27B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v3 - 88));
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va1);
  if (*(unsigned char *)(v2 + 24))
  {
    unint64_t v5 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v5;
      operator delete(v5);
    }
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core13Graph_Manager12modify_graphERKNS_17Graph_DescriptionERKNS_25Modify_Graph_Destroy_ListEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0>,void ()(void)>::operator()(const AMCP::Graph_Description **a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[6];
  BOOL is_valid = AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 1));
  if (is_valid) {
    AMCP::IO_Core::Graph_Manager::modify_graph_internal((AMCP::IO_Core::Graph_Manager *)&__p, v2, a1[7]);
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
  uint64_t v4 = *(NSObject **)__p;
  if (*(void *)v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v8);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    unint64_t v5 = pthread_self();
    mach_port_t v6 = pthread_mach_thread_np(v5);
    LODWORD(__p) = 67109890;
    HIDWORD(__p) = v6;
    *(_WORD *)uint64_t v8 = 2080;
    *(void *)&v8[2] = "Graph_Manager.cpp";
    __int16 v9 = 1024;
    int v10 = 73;
    __int16 v11 = 2080;
    uint64_t v12 = "expiration_check.is_valid()";
    _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", (uint8_t *)&__p, 0x22u);
  }
  abort();
}

void AMCP::IO_Core::Graph_Manager::modify_graph_internal(AMCP::IO_Core::Graph_Manager *this, const AMCP::Graph_Description *a2, const AMCP::Modify_Graph_Destroy_List *a3)
{
}

void sub_1BAC2B4EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (!a44) {
    JUMPOUT(0x1BAC2B518);
  }
  JUMPOUT(0x1BAC2AFA4);
}

__n128 std::__optional_storage_base<std::vector<unsigned int>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<unsigned int>,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v4 = *(void **)a1;
      if (*(void *)a1)
      {
        *(void *)(a1 + 8) = v4;
        operator delete(v4);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
      }
      __n128 result = *a2;
      *(__n128 *)a1 = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    mach_port_t v6 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v6;
      operator delete(v6);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

void AMCP::IO_Core::Graph_Manager::insert_graph_components(AMCP::IO_Core::Graph_Manager *this, const AMCP::Graph_Description *a2)
{
  mach_port_t v266 = this;
  v321[4] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(void *)a2;
  uint64_t v257 = *((void *)a2 + 1);
  if (*(void *)a2 == v257) {
    goto LABEL_263;
  }
  v262 = (std::string *)((char *)this + 8);
  mach_port_t v263 = (uint64_t *)((char *)this + 184);
  v255 = (void *)((char *)this + 200);
  v259 = (uint64_t *)((char *)this + 224);
  v253 = (std::string **)((char *)this + 240);
  do
  {
    uint64_t v4 = (AMCP::Log::Scope_Registry *)(*(void *(**)(std::logic_error *__return_ptr))(*(void *)v266 + 16))(&v282);
    unint64_t v265 = v3;
    if (*(_DWORD *)v3 == 2)
    {
      uint64_t v6 = *(void *)(v3 + 96);
      if (*(void *)(v3 + 104) - v6 != 104 || (uint64_t v7 = *(void *)(v3 + 72), *(void *)(v3 + 80) - v7 != 104))
      {
        AMCP::Log::Scope_Registry::get(v4);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        unint64_t v15 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_44;
        }
        int v16 = pthread_self();
        mach_port_t v17 = pthread_mach_thread_np(v16);
        unint64_t v18 = v3 + 8;
        if (*(char *)(v3 + 31) < 0) {
          unint64_t v18 = *(void *)(v3 + 8);
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v17;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Graph.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 66;
        *(_WORD *)&buf[24] = 2080;
        *(void *)&buf[26] = v18;
        long long v19 = v15;
        uint64_t v20 = "%6u %32s:%-5d Bad format for Reflector description %s: Reflector nodes must have one terminal for input an"
              "d one for output";
        goto LABEL_43;
      }
      v5.n128_u64[0] = *(void *)v6;
      if (*(double *)v6 != *(double *)v7
        || *(_DWORD *)(v6 + 8) != *(_DWORD *)(v7 + 8)
        || *(_DWORD *)(v6 + 12) != *(_DWORD *)(v7 + 12)
        || *(_DWORD *)(v6 + 16) != *(_DWORD *)(v7 + 16)
        || *(_DWORD *)(v6 + 20) != *(_DWORD *)(v7 + 20)
        || *(_DWORD *)(v6 + 24) != *(_DWORD *)(v7 + 24)
        || *(_DWORD *)(v6 + 28) != *(_DWORD *)(v7 + 28)
        || *(_DWORD *)(v6 + 32) != *(_DWORD *)(v7 + 32))
      {
        AMCP::Log::Scope_Registry::get(v4);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v21 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_44;
        }
        uint64_t v22 = pthread_self();
        mach_port_t v23 = pthread_mach_thread_np(v22);
        unint64_t v24 = v3 + 8;
        if (*(char *)(v3 + 31) < 0) {
          unint64_t v24 = *(void *)(v3 + 8);
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v23;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Graph.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 72;
        *(_WORD *)&buf[24] = 2080;
        *(void *)&buf[26] = v24;
        long long v19 = v21;
        uint64_t v20 = "%6u %32s:%-5d Bad format for Reflector description %s: terminal stream formats do not match";
        goto LABEL_43;
      }
      int v8 = *(_DWORD *)(v3 + 64);
      if (v8 != 2)
      {
        if (v8 != 1) {
          goto LABEL_46;
        }
        uint64_t v9 = *(unsigned __int8 *)(v3 + 63);
        if ((v9 & 0x80u) == 0) {
          uint64_t v10 = *(unsigned __int8 *)(v3 + 63);
        }
        else {
          uint64_t v10 = *(void *)(v3 + 48);
        }
        uint64_t v11 = *(unsigned __int8 *)(v3 + 31);
        int v12 = (char)v11;
        if ((v11 & 0x80u) != 0) {
          uint64_t v11 = *(void *)(v3 + 16);
        }
        if (v10 != v11) {
          goto LABEL_46;
        }
        if (v12 >= 0) {
          uint64_t v13 = (unsigned __int8 *)(v3 + 8);
        }
        else {
          uint64_t v13 = *(unsigned __int8 **)(v3 + 8);
        }
        if ((v9 & 0x80) != 0)
        {
          uint64_t v4 = (AMCP::Log::Scope_Registry *)memcmp(*(const void **)(v3 + 40), v13, *(void *)(v3 + 48));
          if (v4) {
            goto LABEL_46;
          }
        }
        else if (*(unsigned char *)(v3 + 63))
        {
          uint64_t v14 = 0;
          while (*(unsigned __int8 *)(v3 + v14 + 40) == v13[v14])
          {
            if (v9 == ++v14) {
              goto LABEL_52;
            }
          }
LABEL_46:
          AMCP::Log::Scope_Registry::get(v4);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          long long v26 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
          {
LABEL_44:
            char v25 = 0;
            goto LABEL_248;
          }
          uint64_t v27 = pthread_self();
          mach_port_t v28 = pthread_mach_thread_np(v27);
          unint64_t v29 = v3 + 8;
          if (*(char *)(v3 + 31) < 0) {
            unint64_t v29 = *(void *)(v3 + 8);
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v28;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "Graph.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 81;
          *(_WORD *)&buf[24] = 2080;
          *(void *)&buf[26] = v29;
          long long v19 = v26;
          uint64_t v20 = "%6u %32s:%-5d Bad format for Reflector description %s: Reflector must be its own clock source";
LABEL_43:
          _os_log_debug_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_DEBUG, v20, buf, 0x22u);
          goto LABEL_44;
        }
      }
    }
LABEL_52:
    (*(void (**)(unsigned char *__return_ptr, __n128))(v262->__r_.__value_.__r.__words[0] + 16))(buf, v5);
    uint64_t v30 = (char *)operator new(0xE8uLL);
    *(_OWORD *)(v30 + 8) = 0u;
    *(void *)uint64_t v30 = &unk_1F14723E8;
    *(_OWORD *)(v30 + 24) = 0u;
    uint64_t v260 = (uint64_t)(v30 + 24);
    std::__shared_count v267 = *(std::__shared_count *)buf;
    *(_OWORD *)AudioObjectPropertyAddress buf = 0u;
    *((_DWORD *)v30 + 10) = *(_DWORD *)v3;
    mach_port_t v269 = (std::__shared_weak_count *)v30;
    if (*(char *)(v3 + 31) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v30 + 2, *(const std::string::value_type **)(v3 + 8), *(void *)(v3 + 16));
    }
    else
    {
      long long v31 = *(_OWORD *)(v3 + 8);
      *((void *)v30 + 8) = *(void *)(v3 + 24);
      *((_OWORD *)v30 + 3) = v31;
    }
    int v32 = *(_DWORD *)(v3 + 32);
    *(_OWORD *)&v269[3].__shared_owners_ = 0u;
    LODWORD(v269[3].__vftable) = v32;
    BYTE4(v269[3].__vftable) = 1;
    p_int shared_weak_owners = (std::string *)&v269[5].__shared_weak_owners_;
    v269[4].std::__shared_count = 0u;
    *(_OWORD *)&v269[4].__shared_weak_owners_ = 0u;
    v269[5].__shared_owners_ = 0;
    if (*(char *)(v3 + 63) < 0)
    {
      std::string::__init_copy_ctor_external(p_shared_weak_owners, *(const std::string::value_type **)(v3 + 40), *(void *)(v3 + 48));
    }
    else
    {
      long long v34 = *(_OWORD *)(v3 + 40);
      v269[6].__shared_owners_ = *(void *)(v3 + 56);
      *(_OWORD *)&p_shared_weak_owners->__r_.__value_.__l.__data_ = v34;
    }
    v256 = (std::string *)(v3 + 8);
    char v35 = 0;
    uint64_t v36 = 0;
    int v37 = *(_DWORD *)(v3 + 64);
    v269[7].__vftable = 0;
    v269[7].__shared_owners_ = 0;
    int v38 = *(_DWORD *)(v3 + 68);
    v269[8].__shared_owners_ = 0;
    LODWORD(v269[6].__shared_weak_owners_) = v37;
    LODWORD(v269[7].__shared_weak_owners_) = v38;
    *(uint64_t *)((char *)&v269[7].__shared_weak_owners_ + 4) = 0;
    v269[8].__shared_weak_owners_ = 0;
    v269[9].std::__shared_count = v267;
    p_shared_owners = &v269[8].__shared_owners_;
    int shared_weak_owners = v269[1].__shared_weak_owners_;
    BOOL v40 = (shared_weak_owners & 0xFFFFFFFE) != 2;
    unint64_t v268 = v3 + 72;
    char v41 = 1;
    while (1)
    {
      unsigned int v42 = shared_weak_owners - 2;
      BOOL v43 = shared_weak_owners == 0;
      if (shared_weak_owners) {
        uint64_t v44 = 0;
      }
      else {
        uint64_t v44 = 0x100000000;
      }
      if (v43) {
        char v45 = v35;
      }
      else {
        char v45 = 0;
      }
      if (v42 >= 2) {
        char v41 = v45;
      }
      else {
        uint64_t v44 = 0x100000000;
      }
      uint64_t v46 = (long long **)(v268 + 24 * v36);
      uint64_t v48 = *v46;
      unint64_t v47 = v46[1];
      if (*v46 != v47)
      {
        uint64_t v49 = v44 | v41 & 1;
        uint64_t v50 = &v269[3].__shared_owners_ + 3 * v36;
        uint64_t v51 = (unint64_t *)(v50 + 1);
        unint64_t v52 = v50[1];
        unint64_t v2 = (unint64_t)(v50 + 2);
        do
        {
          if (v52 >= *(void *)v2)
          {
            uint64_t v53 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v52 - *v50) >> 4);
            unint64_t v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) > 0x249249249249249) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            if (0xDB6DB6DB6DB6DB6ELL * ((*(void *)v2 - *v50) >> 4) > v54) {
              unint64_t v54 = 0xDB6DB6DB6DB6DB6ELL * ((*(void *)v2 - *v50) >> 4);
            }
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((*(void *)v2 - *v50) >> 4)) >= 0x124924924924924) {
              unint64_t v55 = 0x249249249249249;
            }
            else {
              unint64_t v55 = v54;
            }
            mach_port_t v275 = v50 + 2;
            if (v55)
            {
              if (v55 > 0x249249249249249) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v56 = (char *)operator new(112 * v55);
            }
            else
            {
              uint64_t v56 = 0;
            }
            mach_port_t v272 = v56;
            v273.i64[0] = (uint64_t)&v56[112 * v53];
            v273.i64[1] = v273.i64[0];
            v274 = &v56[112 * v55];
            AMCP::Graph::Terminal::Terminal(v273.i64[0], v48, v49, v40);
            uint64_t v57 = v273.i64[0];
            unint64_t v52 = v273.i64[1] + 112;
            v273.i64[1] += 112;
            unint64_t v58 = *v51;
            uint64_t v59 = *v50;
            if (*v51 == *v50)
            {
              int64x2_t v68 = vdupq_n_s64(v58);
            }
            else
            {
              do
              {
                uint64_t v60 = 0;
                uint64_t v61 = v57 - 112;
                unint64_t v62 = v58 - 112;
                long long v63 = *(_OWORD *)(v58 - 112);
                long long v64 = *(_OWORD *)(v58 - 96);
                *(void *)(v57 - 80) = *(void *)(v58 - 80);
                *(_OWORD *)(v57 - 112) = v63;
                *(_OWORD *)(v57 - 96) = v64;
                do
                {
                  uint64_t v65 = v57 + v60;
                  uint64_t v66 = v58 + v60;
                  *(void *)(v65 - 72) = 0;
                  *(void *)(v65 - 64) = 0;
                  *(void *)(v65 - 56) = 0;
                  *(_OWORD *)(v65 - 72) = *(_OWORD *)(v58 + v60 - 72);
                  *(void *)(v65 - 56) = *(void *)(v58 + v60 - 56);
                  *(void *)(v66 - 72) = 0;
                  *(void *)(v66 - 64) = 0;
                  *(void *)(v66 - 56) = 0;
                  v60 += 24;
                }
                while (v60 != 48);
                long long v67 = *(_OWORD *)(v58 - 24);
                *(void *)(v57 - 11) = *(void *)(v58 - 11);
                *(_OWORD *)(v57 - 24) = v67;
                v57 -= 112;
                v58 -= 112;
              }
              while (v62 != v59);
              int64x2_t v68 = *(int64x2_t *)v50;
              unint64_t v52 = v273.u64[1];
              uint64_t v57 = v61;
            }
            *uint64_t v50 = v57;
            *uint64_t v51 = v52;
            int64x2_t v273 = v68;
            uint64_t v69 = *(char **)v2;
            *(void *)unint64_t v2 = v274;
            v274 = v69;
            mach_port_t v272 = (char *)v68.i64[0];
            std::__split_buffer<AMCP::Graph::Terminal>::~__split_buffer((uint64_t)&v272);
          }
          else
          {
            AMCP::Graph::Terminal::Terminal(v52, v48, v49, v40);
            v52 += 112;
            *uint64_t v51 = v52;
          }
          *uint64_t v51 = v52;
          uint64_t v48 = (long long *)((char *)v48 + 104);
        }
        while (v48 != v47);
      }
      if (v35) {
        break;
      }
      char v41 = 0;
      int shared_weak_owners = v269[1].__shared_weak_owners_;
      char v35 = 1;
      uint64_t v36 = 1;
    }
    unint64_t v70 = v269;
    shared_owners = (std::__shared_weak_count *)v269[1].__shared_owners_;
    if (shared_owners)
    {
      unint64_t v72 = v265;
      uint64_t v73 = v256;
      if (shared_owners->__shared_owners_ != -1) {
        goto LABEL_97;
      }
      unint64_t v70 = v269;
      atomic_fetch_add_explicit(&v269->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v269->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v269[1].__vftable = (std::__shared_weak_count_vtbl *)&v269[1];
      v269[1].__shared_owners_ = (uint64_t)v269;
      std::__shared_weak_count::__release_weak(shared_owners);
    }
    else
    {
      atomic_fetch_add_explicit(&v269->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v269->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v269[1].__vftable = (std::__shared_weak_count_vtbl *)&v269[1];
      v269[1].__shared_owners_ = (uint64_t)v269;
      unint64_t v72 = v265;
      uint64_t v73 = v256;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
LABEL_97:
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    uint64_t v74 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v263, (unsigned __int8 *)v73);
    if (v74)
    {
      uint64_t v75 = *((void *)v74 + 5);
      if (*(_DWORD *)(v75 + 16) != *(_DWORD *)v72)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v74);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v140 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR))
        {
          v141 = pthread_self();
          mach_port_t v142 = pthread_mach_thread_np(v141);
          if (*(char *)(v72 + 31) >= 0) {
            std::string::size_type v143 = v73;
          }
          else {
            std::string::size_type v143 = *(std::string **)(v72 + 8);
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v142;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "Graph.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 109;
          *(_WORD *)&buf[24] = 2080;
          *(void *)&buf[26] = "found->second->get_node_type() != d.mNodeType";
          *(_WORD *)&buf[34] = 2080;
          *(void *)&buf[36] = v143;
          _os_log_error_impl(&dword_1BAA78000, v140, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Existing node with UID %s has a different type.", buf, 0x2Cu);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v271);
        __cxa_allocate_exception(0x40uLL);
        std::logic_error::logic_error(&v294, "Existing node with this UID has a different type.");
        v294.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&v288, &v294);
        *((void *)&v289 + 1) = 0;
        uint64_t v290 = 0;
        v291.__r_.__value_.__r.__words[0] = 0;
        LODWORD(v291.__r_.__value_.__r.__words[1]) = -1;
        v288.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        *(void *)&long long v289 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v288);
        *(void *)&buf[32] = "BOOL AMCP::Graph::Graph::add_node(const Node_Description &, const Graph_Host_Ptr &)";
        *(void *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
        *(_DWORD *)&buf[48] = 109;
        applesauce::backtrace::snapshot_N<64>::snapshot_N(&v283.__r_.__value_.__l.__data_);
        *(void *)v286 = &unk_1F148AA90;
        *(std::string *)&v286[8] = v283;
        memset(&v283, 0, sizeof(v283));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      uint64_t v77 = *(void *)(v75 + 176);
      uint64_t v76 = *(void *)(v75 + 184);
      if (v76) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v76 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v78 = (std::__shared_weak_count *)v269[8].__shared_weak_owners_;
      v269[8].__shared_owners_ = v77;
      v269[8].__shared_weak_owners_ = v76;
      if (v78)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v78);
        uint64_t v77 = *p_shared_owners;
      }
      std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v276, (uint64_t)v269[1].__vftable, (std::__shared_weak_count *)v269[1].__shared_owners_);
      uint64_t v80 = v276;
      uint64_t v79 = v277;
      if (v277) {
        atomic_fetch_add_explicit(&v277->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      int64x2_t v81 = *(std::__shared_weak_count **)(v77 + 24);
      *(void *)(v77 + 16) = v80;
      *(void *)(v77 + 24) = v79;
      if (v81) {
        std::__shared_weak_count::__release_weak(v81);
      }
      std::logic_error v288 = (std::logic_error)0;
      long long v289 = 0u;
      LODWORD(v290) = 1065353216;
      (*(void (**)(uint64_t, std::logic_error *))(*(void *)v77 + 32))(v77, &v288);
      v82 = (std::__shared_mutex_base *)(*(uint64_t (**)(void))(**(void **)(v77 + 32) + 16))(*(void *)(v77 + 32));
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)v286, v82, *(_DWORD *)(v77 + 8));
      uint64_t v83 = *(void *)v286;
      uint64_t v278 = *(void *)v286 + 48;
      char v279 = 1;
      caulk::concurrent::shared_spin_lock::lock((atomic_uint *)(*(void *)v286 + 48));
      mach_port_t v84 = v288.__vftable;
      imp = v288.__imp_.__imp_;
      v288.__vftable = 0;
      v288.__imp_.__imp_ = 0;
      *(void *)AudioObjectPropertyAddress buf = v84;
      *(void *)&uint8_t buf[8] = imp;
      *(_OWORD *)&buf[16] = v289;
      *(_DWORD *)&buf[32] = v290;
      if (*((void *)&v289 + 1))
      {
        unint64_t v86 = *(void *)(v289 + 8);
        if (((unint64_t)imp & (unint64_t)(imp - 1)) != 0)
        {
          if (v86 >= (unint64_t)imp) {
            v86 %= (unint64_t)imp;
          }
        }
        else
        {
          v86 &= (unint64_t)(imp - 1);
        }
        *((void *)&v84->~logic_error + v86) = &buf[16];
        long long v289 = 0uLL;
      }
      std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__move_assign((uint64_t)&v288, (uint64_t *)(v83 + 8));
      std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__move_assign(v83 + 8, (uint64_t *)buf);
      unint64_t v72 = (unint64_t)buf;
      std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(*(void **)&buf[16]);
      int v89 = *(void **)buf;
      *(void *)AudioObjectPropertyAddress buf = 0;
      if (v89) {
        operator delete(v89);
      }
      std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&v278);
      strcpy(buf, "rnwobolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      *(_DWORD *)(v83 + 4) = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)v83, (const AMCP::Address *)buf, &AMCP::k_object_id_unknown);
      if (*(void *)&v286[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v286[8]);
      }
      std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((void *)v289);
      v90 = v288.__vftable;
      v288.__vftable = 0;
      if (v90) {
        operator delete(v90);
      }
      if (v277) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v277);
      }
      (*(void (**)(unsigned char *__return_ptr))(v262->__r_.__value_.__r.__words[0] + 16))(buf);
      v87 = *(std::__shared_weak_count **)&buf[8];
      mach_port_t v88 = *(void **)buf;
      if (LODWORD(v269[1].__shared_weak_owners_) <= 1 && *(void *)(*(void *)buf + 248))
      {
        v91 = *(void **)(*(void *)buf + 24);
        *(void *)(*(void *)buf + 24) = 0;
        if (v91 == v88)
        {
          (*(void (**)(void *))(*v88 + 32))(v88);
        }
        else if (v91)
        {
          (*(void (**)(void *))(*v91 + 40))(v91);
        }
      }
      AMCP::Graph::Graph::disconnect_any_wires_connected_to_node(v262, (unsigned __int8 *)v73);
    }
    else
    {
      v87 = 0;
      AMCP::Graph::Node::create_core_object(v260, &v282);
      mach_port_t v88 = 0;
    }
    unint64_t v92 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v73);
    unint64_t v93 = v92;
    unint64_t v94 = *((void *)v266 + 24);
    if (!v94) {
      goto LABEL_148;
    }
    uint8x8_t v95 = (uint8x8_t)vcnt_s8((int8x8_t)v94);
    v95.i16[0] = vaddlv_u8(v95);
    unint64_t v96 = v95.u32[0];
    if (v95.u32[0] > 1uLL)
    {
      unint64_t v72 = v92;
      if (v92 >= v94) {
        unint64_t v72 = v92 % v94;
      }
    }
    else
    {
      unint64_t v72 = (v94 - 1) & v92;
    }
    uint64_t v97 = *(unsigned __int8 ***)(*v263 + 8 * v72);
    if (!v97 || (long long v98 = *v97) == 0)
    {
LABEL_148:
      v100 = operator new(0x38uLL);
      v280[0] = v100;
      v280[1] = v255;
      char v281 = 0;
      void *v100 = 0;
      v100[1] = v93;
      long long v101 = (std::string *)(v100 + 2);
      if (*(char *)(v265 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v101, *(const std::string::value_type **)(v265 + 8), *(void *)(v265 + 16));
      }
      else
      {
        long long v102 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        v100[4] = *((void *)&v73->__r_.__value_.__l + 2);
        *(_OWORD *)&v101->__r_.__value_.__l.__data_ = v102;
      }
      v100[5] = v260;
      v100[6] = v269;
      atomic_fetch_add_explicit(&v269->__shared_owners_, 1uLL, memory_order_relaxed);
      char v281 = 1;
      float v103 = (float)(unint64_t)(*((void *)v266 + 26) + 1);
      float v104 = *((float *)v266 + 54);
      if (!v94 || (float)(v104 * (float)v94) < v103)
      {
        BOOL v105 = (v94 & (v94 - 1)) != 0;
        if (v94 < 3) {
          BOOL v105 = 1;
        }
        unint64_t v106 = v105 | (2 * v94);
        unint64_t v107 = vcvtps_u32_f32(v103 / v104);
        if (v106 <= v107) {
          size_t v108 = v107;
        }
        else {
          size_t v108 = v106;
        }
        std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)v263, v108);
        unint64_t v94 = *((void *)v266 + 24);
        if ((v94 & (v94 - 1)) != 0)
        {
          if (v93 >= v94) {
            unint64_t v72 = v93 % v94;
          }
          else {
            unint64_t v72 = v93;
          }
        }
        else
        {
          unint64_t v72 = (v94 - 1) & v93;
        }
      }
      uint64_t v109 = *v263;
      uint64_t v110 = *(void **)(*v263 + 8 * v72);
      if (v110)
      {
        void *v100 = *v110;
      }
      else
      {
        void *v100 = *v255;
        void *v255 = v100;
        *(void *)(v109 + 8 * v72) = v255;
        if (!*v100)
        {
LABEL_172:
          v280[0] = 0;
          ++*((void *)v266 + 26);
          std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)v280);
          goto LABEL_173;
        }
        unint64_t v111 = *(void *)(*v100 + 8);
        if ((v94 & (v94 - 1)) != 0)
        {
          if (v111 >= v94) {
            v111 %= v94;
          }
        }
        else
        {
          v111 &= v94 - 1;
        }
        uint64_t v110 = (void *)(*v263 + 8 * v111);
      }
      *uint64_t v110 = v100;
      goto LABEL_172;
    }
    unint64_t v2 = v94 - 1;
    while (1)
    {
      unint64_t v99 = *((void *)v98 + 1);
      if (v99 == v93) {
        break;
      }
      if (v96 > 1)
      {
        if (v99 >= v94) {
          v99 %= v94;
        }
      }
      else
      {
        v99 &= v2;
      }
      if (v99 != v72) {
        goto LABEL_148;
      }
LABEL_147:
      long long v98 = *(unsigned __int8 **)v98;
      if (!v98) {
        goto LABEL_148;
      }
    }
    if (!std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v98 + 16, (unsigned __int8 *)v73)) {
      goto LABEL_147;
    }
    atomic_fetch_add_explicit(&v269->__shared_owners_, 1uLL, memory_order_relaxed);
    std::string::size_type v136 = (std::__shared_weak_count *)*((void *)v98 + 6);
    *((void *)v98 + 5) = v260;
    *((void *)v98 + 6) = v269;
    if (v136) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v136);
    }
LABEL_173:
    if (*p_shared_owners) {
      unint64_t v112 = *(unsigned int *)(*p_shared_owners + 8);
    }
    else {
      unint64_t v112 = 0;
    }
    unint64_t v113 = *((void *)v266 + 29);
    if (v113)
    {
      uint8x8_t v114 = (uint8x8_t)vcnt_s8((int8x8_t)v113);
      v114.i16[0] = vaddlv_u8(v114);
      if (v114.u32[0] > 1uLL)
      {
        unint64_t v94 = v112;
        if (v113 <= v112) {
          unint64_t v94 = v112 % v113;
        }
      }
      else
      {
        unint64_t v94 = (v113 - 1) & v112;
      }
      uint64_t v115 = *(std::string ***)(*v259 + 8 * v94);
      if (v115)
      {
        for (uint64_t i = *v115; i; uint64_t i = (std::string *)i->__r_.__value_.__r.__words[0])
        {
          unint64_t size = i->__r_.__value_.__l.__size_;
          if (size == v112)
          {
            if (LODWORD(i->__r_.__value_.__r.__words[2]) == v112)
            {
              std::string::operator=(i + 1, v73);
              goto LABEL_217;
            }
          }
          else
          {
            if (v114.u32[0] > 1uLL)
            {
              if (size >= v113) {
                size %= v113;
              }
            }
            else
            {
              size &= v113 - 1;
            }
            if (size != v94) {
              break;
            }
          }
        }
      }
    }
    int v118 = (std::string *)operator new(0x30uLL);
    v118->__r_.__value_.__r.__words[0] = 0;
    v118->__r_.__value_.__l.__size_ = v112;
    LODWORD(v118->__r_.__value_.__r.__words[2]) = v112;
    int v119 = v118 + 1;
    if (*(char *)(v265 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v119, *(const std::string::value_type **)(v265 + 8), *(void *)(v265 + 16));
    }
    else
    {
      long long v120 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      v118[1].__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v119->__r_.__value_.__l.__data_ = v120;
    }
    float v121 = (float)(unint64_t)(*((void *)v266 + 31) + 1);
    float v122 = *((float *)v266 + 64);
    if (!v113 || (float)(v122 * (float)v113) < v121)
    {
      BOOL v123 = (v113 & (v113 - 1)) != 0;
      if (v113 < 3) {
        BOOL v123 = 1;
      }
      unint64_t v124 = v123 | (2 * v113);
      unint64_t v125 = vcvtps_u32_f32(v121 / v122);
      if (v124 <= v125) {
        size_t v126 = v125;
      }
      else {
        size_t v126 = v124;
      }
      std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)v259, v126);
      unint64_t v113 = *((void *)v266 + 29);
      if ((v113 & (v113 - 1)) != 0)
      {
        if (v113 <= v112) {
          unint64_t v94 = v112 % v113;
        }
        else {
          unint64_t v94 = v112;
        }
      }
      else
      {
        unint64_t v94 = (v113 - 1) & v112;
      }
    }
    uint64_t v127 = *v259;
    std::string::size_type v128 = *(std::string ***)(*v259 + 8 * v94);
    if (v128)
    {
      v118->__r_.__value_.__r.__words[0] = (std::string::size_type)*v128;
      goto LABEL_215;
    }
    v118->__r_.__value_.__r.__words[0] = (std::string::size_type)*v253;
    _opaque_pthread_t *v253 = v118;
    *(void *)(v127 + 8 * v94) = v253;
    if (v118->__r_.__value_.__r.__words[0])
    {
      unint64_t v129 = *(void *)(v118->__r_.__value_.__r.__words[0] + 8);
      if ((v113 & (v113 - 1)) != 0)
      {
        if (v129 >= v113) {
          v129 %= v113;
        }
      }
      else
      {
        v129 &= v113 - 1;
      }
      std::string::size_type v128 = (std::string **)(*v259 + 8 * v129);
LABEL_215:
      *std::string::size_type v128 = v118;
    }
    ++*((void *)v266 + 31);
LABEL_217:
    if (v88)
    {
      (*(void (**)(std::logic_error *__return_ptr))(v262->__r_.__value_.__r.__words[0] + 16))(&v288);
      uint64_t v130 = v288.__vftable;
      std::__function::__value_func<void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::__value_func[abi:ne180100]((uint64_t)v296, (uint64_t)v88);
      std::__function::__value_func<void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::swap[abi:ne180100](v296, v130);
      std::__function::__value_func<void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::~__value_func[abi:ne180100](v296);
      std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v297, (uint64_t)(v88 + 4));
      std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::swap[abi:ne180100](v297, &v130[1].~logic_error_0);
      std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::~__value_func[abi:ne180100](v297);
      std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__value_func[abi:ne180100]((uint64_t)v298, (uint64_t)(v88 + 8));
      std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::swap[abi:ne180100](v298, &v130[2].what);
      std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__value_func[abi:ne180100](v298);
      uint64_t v131 = v88[15];
      if (!v131) {
        goto LABEL_221;
      }
      if ((void *)v131 == v88 + 12)
      {
        uint64_t v300 = v299;
        (*(void (**)(uint64_t, void *))(*(void *)v131 + 24))(v131, v299);
      }
      else
      {
        uint64_t v131 = (*(uint64_t (**)(uint64_t))(*(void *)v131 + 16))(v131);
LABEL_221:
        uint64_t v300 = (void *)v131;
      }
      std::__function::__value_func<std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::swap[abi:ne180100](v299, &v130[4].~logic_error);
      std::__function::__value_func<std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::~__value_func[abi:ne180100](v299);
      std::function<void ()>::operator=(&v130[5].~logic_error_0, (uint64_t)(v88 + 16));
      std::function<void ()>::operator=(&v130[6].what, (uint64_t)(v88 + 20));
      std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::operator=(&v130[8].~logic_error, (uint64_t)(v88 + 24));
      std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator=(&v130[9].~logic_error_0, (uint64_t)(v88 + 28));
      std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::operator=(&v130[10].what, (uint64_t)(v88 + 32));
      std::function<void ()>::operator=(&v130[12].~logic_error, (uint64_t)(v88 + 36));
      std::function<void ()>::operator=(&v130[13].~logic_error_0, (uint64_t)(v88 + 40));
      uint64_t v132 = v88[47];
      if (v132)
      {
        if ((void *)v132 != v88 + 44)
        {
          uint64_t v132 = (*(uint64_t (**)(uint64_t))(*(void *)v132 + 16))(v132);
          goto LABEL_226;
        }
        v302 = (const char *(__cdecl *)(const std::logic_error *__hidden))v301;
        (*(void (**)(uint64_t, void *))(*(void *)v132 + 24))(v132, v301);
      }
      else
      {
LABEL_226:
        v302 = (const char *(__cdecl *)(const std::logic_error *__hidden))v132;
      }
      p_what = (const char *(__cdecl *)(const std::logic_error *__hidden))&v130[14].what;
      if (&v130[14].what != v301)
      {
        uint64_t v134 = v302;
        what = v130[15].what;
        if ((char *)v302 == (char *)v301)
        {
          if (what == p_what)
          {
            (*(void (**)(void *, unsigned char *))(v301[0] + 24))(v301, buf);
            (*(void (**)(const char *(__cdecl *)(const std::logic_error *__hidden)))(*(void *)v302 + 32))(v302);
            v302 = 0;
            (*(void (**)(const char *(__cdecl *)(const std::logic_error *__hidden), void *))(*(void *)v130[15].what + 24))(v130[15].what, v301);
            (*(void (**)(const char *(__cdecl *)(const std::logic_error *__hidden)))(*(void *)v130[15].what
                                                                                              + 32))(v130[15].what);
            v130[15].what = 0;
            v302 = (const char *(__cdecl *)(const std::logic_error *__hidden))v301;
            (*(void (**)(unsigned char *, const char *(__cdecl **)(const std::logic_error *__hidden)))(*(void *)buf + 24))(buf, &v130[14].what);
            (*(void (**)(unsigned char *))(*(void *)buf + 32))(buf);
          }
          else
          {
            (*(void (**)(void *, const char *(__cdecl **)(const std::logic_error *__hidden)))(v301[0] + 24))(v301, &v130[14].what);
            (*(void (**)(const char *(__cdecl *)(const std::logic_error *__hidden)))(*(void *)v302 + 32))(v302);
            v302 = v130[15].what;
          }
          v130[15].what = p_what;
        }
        else if (what == p_what)
        {
          (*(void (**)(const char *(__cdecl **)(const std::logic_error *__hidden), void *))(*(void *)p_what + 24))(&v130[14].what, v301);
          (*(void (**)(const char *(__cdecl *)(const std::logic_error *__hidden)))(*(void *)v130[15].what
                                                                                            + 32))(v130[15].what);
          v130[15].what = v302;
          v302 = (const char *(__cdecl *)(const std::logic_error *__hidden))v301;
        }
        else
        {
          v302 = v130[15].what;
          v130[15].what = v134;
        }
      }
      std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](v301);
      std::function<long long ()(void)>::operator=(&v130[16].~logic_error, (uint64_t)(v88 + 48));
      std::function<long long ()(void)>::operator=(&v130[17].~logic_error_0, (uint64_t)(v88 + 52));
      std::function<unsigned long long ()(unsigned long long)>::operator=(&v130[18].what, (uint64_t)(v88 + 56));
      std::function<unsigned long long ()(unsigned long long,unsigned long long &)>::operator=(&v130[20].~logic_error, (uint64_t)(v88 + 60));
      std::function<void ()>::operator=(&v130[21].~logic_error_0, (uint64_t)(v88 + 64));
      std::function<void ()(void)>::operator=(&v130[22].what, (uint64_t)(v88 + 68));
      v137 = (void (__cdecl *)(std::logic_error *__hidden))v88[72];
      uint64_t v138 = v88[73];
      if (v138) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v138 + 8), 1uLL, memory_order_relaxed);
      }
      v130[24].~logic_error = v137;
      uint64_t v139 = (std::__shared_weak_count *)v130[24].~logic_error_0;
      v130[24].~logic_error_0 = (void (__cdecl *)(std::logic_error *__hidden))v138;
      if (v139) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v139);
      }
      if (v288.__imp_.__imp_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v288.__imp_.__imp_);
      }
    }
    if (v87) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v87);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v269);
    char v25 = 1;
LABEL_248:
    this = (AMCP::IO_Core::Graph_Manager *)v282.__imp_.__imp_;
    if (v282.__imp_.__imp_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v282.__imp_.__imp_);
    }
    if ((v25 & 1) == 0)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v239 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v239, OS_LOG_TYPE_ERROR))
      {
        uint64_t v240 = pthread_self();
        mach_port_t v241 = pthread_mach_thread_np(v240);
        unint64_t v242 = (void *)(v265 + 8);
        if (*(char *)(v265 + 31) < 0) {
          unint64_t v242 = (void *)*v242;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v241;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Graph_Manager.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 216;
        *(_WORD *)&buf[24] = 2080;
        *(void *)&buf[26] = "not (added)";
        *(_WORD *)&buf[34] = 2080;
        *(void *)&buf[36] = v242;
        _os_log_error_impl(&dword_1BAA78000, v239, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Error adding node %s to graph", buf, 0x2Cu);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v271);
      __cxa_allocate_exception(0x40uLL);
      unint64_t v243 = (void *)(v265 + 8);
      if (*(char *)(v265 + 31) < 0) {
        unint64_t v243 = (void *)*v243;
      }
      caulk::make_string((caulk *)"Error adding node %s to graph", (uint64_t)&v283, v243);
      std::logic_error::logic_error(&v282, &v283);
      v282.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v288, &v282);
      *((void *)&v289 + 1) = 0;
      uint64_t v290 = 0;
      v291.__r_.__value_.__r.__words[0] = 0;
      LODWORD(v291.__r_.__value_.__r.__words[1]) = -1;
      v288.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      *(void *)&long long v289 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v288);
      *(void *)&buf[32] = "void AMCP::IO_Core::Graph_Manager::insert_graph_components(const Graph_Description &)";
      *(void *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Graph_Manager.cpp";
      *(_DWORD *)&buf[48] = 216;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v294);
      *(void *)v286 = &unk_1F148AA90;
      *(std::logic_error *)&v286[8] = v294;
      *(void *)&v286[24] = v295;
      v294.__vftable = 0;
      v294.__imp_.__imp_ = 0;
      uint64_t v295 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    unint64_t v3 = v265 + 120;
  }
  while (v265 + 120 != v257);
LABEL_263:
  uint64_t v144 = *((void *)a2 + 3);
  uint64_t v258 = *((void *)a2 + 4);
  if (v144 != v258)
  {
    uint64_t v254 = (uint64_t)v266 + 64;
    v145 = (void **)((char *)v266 + 144);
    v250 = (void (__cdecl **)(std::logic_error *__hidden))((char *)v266 + 160);
    v264 = (void (__cdecl **)(std::logic_error *__hidden))((char *)v266 + 120);
    v270 = (std::__shared_weak_count *)((char *)v266 + 104);
    do
    {
      if (*(_DWORD *)(v144 + 32))
      {
        AMCP::Log::Scope_Registry::get(this);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v244 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v244, OS_LOG_TYPE_ERROR))
        {
          v245 = pthread_self();
          mach_port_t v246 = pthread_mach_thread_np(v245);
          *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v246;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "Graph.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 310;
          *(_WORD *)&buf[24] = 2080;
          *(void *)&buf[26] = "not (wire.mSource.m_wire_direction == Direction::output)";
          _os_log_error_impl(&dword_1BAA78000, v244, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Graph:: Wire source is not an OutWire", buf, 0x22u);
        }
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Graph:: Wire source is not an OutWire", (uint64_t)&v283);
        std::logic_error::logic_error(&v282, &v283);
        v282.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&v288, &v282);
        *((void *)&v289 + 1) = 0;
        uint64_t v290 = 0;
        v291.__r_.__value_.__r.__words[0] = 0;
        LODWORD(v291.__r_.__value_.__r.__words[1]) = -1;
        v288.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        *(void *)&long long v289 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v288);
        *(void *)&buf[32] = "void AMCP::Graph::Graph::add_wire(const Wire_Description &)";
        *(void *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
        *(_DWORD *)&buf[48] = 310;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v294);
        *(void *)v286 = &unk_1F148AA90;
        *(std::logic_error *)&v286[8] = v294;
        *(void *)&v286[24] = v295;
        v294.__vftable = 0;
        v294.__imp_.__imp_ = 0;
        uint64_t v295 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      if (*(_DWORD *)(v144 + 72) != 1)
      {
        AMCP::Log::Scope_Registry::get(this);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        std::string::size_type v247 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v247, OS_LOG_TYPE_ERROR))
        {
          v248 = pthread_self();
          mach_port_t v249 = pthread_mach_thread_np(v248);
          *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v249;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "Graph.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 311;
          *(_WORD *)&buf[24] = 2080;
          *(void *)&buf[26] = "not (wire.mDestination.m_wire_direction == Direction::input)";
          _os_log_error_impl(&dword_1BAA78000, v247, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Graph:: Wire destination is not an InWire", buf, 0x22u);
        }
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Graph:: Wire destination is not an InWire", (uint64_t)&v283);
        std::logic_error::logic_error(&v282, &v283);
        v282.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&v288, &v282);
        *((void *)&v289 + 1) = 0;
        uint64_t v290 = 0;
        v291.__r_.__value_.__r.__words[0] = 0;
        LODWORD(v291.__r_.__value_.__r.__words[1]) = -1;
        v288.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        *(void *)&long long v289 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v288);
        *(void *)&buf[32] = "void AMCP::Graph::Graph::add_wire(const Wire_Description &)";
        *(void *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
        *(_DWORD *)&buf[48] = 311;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v294);
        *(void *)v286 = &unk_1F148AA90;
        *(std::logic_error *)&v286[8] = v294;
        *(void *)&v286[24] = v295;
        v294.__vftable = 0;
        v294.__imp_.__imp_ = 0;
        uint64_t v295 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      uint64_t v146 = *(unsigned __int8 *)(v144 + 23);
      std::string::size_type v147 = *(void *)(v144 + 8);
      if ((v146 & 0x80u) == 0) {
        uint64_t v148 = *(unsigned __int8 *)(v144 + 23);
      }
      else {
        uint64_t v148 = *(void *)(v144 + 8);
      }
      uint64_t v149 = *(unsigned __int8 *)(v144 + 63);
      int v150 = (char)v149;
      if ((v149 & 0x80u) != 0) {
        uint64_t v149 = *(void *)(v144 + 48);
      }
      if (v148 == v149)
      {
        if (v150 >= 0) {
          v151 = (unsigned __int8 *)(v144 + 40);
        }
        else {
          v151 = *(unsigned __int8 **)(v144 + 40);
        }
        if ((v146 & 0x80) != 0)
        {
          this = (AMCP::IO_Core::Graph_Manager *)memcmp(*(const void **)v144, v151, *(void *)(v144 + 8));
          if (!this)
          {
LABEL_504:
            AMCP::Log::Scope_Registry::get(this);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v233 = **(NSObject ***)buf;
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (os_log_type_enabled(v233, OS_LOG_TYPE_ERROR))
            {
              long long v234 = pthread_self();
              mach_port_t v235 = pthread_mach_thread_np(v234);
              if (*(char *)(v144 + 23) >= 0) {
                uint64_t v236 = (const void *)v144;
              }
              else {
                uint64_t v236 = *(const void **)v144;
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 67110146;
              *(_DWORD *)&uint8_t buf[4] = v235;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = "Graph.cpp";
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 312;
              *(_WORD *)&buf[24] = 2080;
              *(void *)&buf[26] = "not (wire.mSource.m_node != wire.mDestination.m_node)";
              *(_WORD *)&buf[34] = 2080;
              *(void *)&buf[36] = v236;
              _os_log_error_impl(&dword_1BAA78000, v233, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Node %s: nodes cannot connect to themselves", buf, 0x2Cu);
            }
            __cxa_allocate_exception(0x40uLL);
            if (*(char *)(v144 + 23) >= 0) {
              v237 = (const void *)v144;
            }
            else {
              v237 = *(const void **)v144;
            }
            caulk::make_string((caulk *)"Node %s: nodes cannot connect to themselves", (uint64_t)&v283, v237);
            std::logic_error::logic_error(&v282, &v283);
            v282.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
            std::logic_error::logic_error(&v288, &v282);
            *((void *)&v289 + 1) = 0;
            uint64_t v290 = 0;
            v291.__r_.__value_.__r.__words[0] = 0;
            LODWORD(v291.__r_.__value_.__r.__words[1]) = -1;
            v288.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
            *(void *)&long long v289 = &unk_1F1489CF0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v288);
            *(void *)&buf[32] = "void AMCP::Graph::Graph::add_wire(const Wire_Description &)";
            *(void *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
            *(_DWORD *)&buf[48] = 312;
            std::vector<void *>::vector(&v294);
            int v238 = backtrace((void **)&v294.~logic_error, (unint64_t)(v294.__imp_.__imp_ - (const char *)v294.__vftable) >> 3);
            std::vector<void *>::resize((char **)&v294, v238);
            *(void *)v286 = &unk_1F148AA90;
            *(std::logic_error *)&v286[8] = v294;
            *(void *)&v286[24] = v295;
            v294.__vftable = 0;
            v294.__imp_.__imp_ = 0;
            uint64_t v295 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
          }
LABEL_285:
          std::string::__init_copy_ctor_external((std::string *)v286, *(const std::string::value_type **)v144, v147);
          LOBYTE(v150) = *(unsigned char *)(v144 + 63);
          goto LABEL_286;
        }
        if (!*(unsigned char *)(v144 + 23)) {
          goto LABEL_504;
        }
        uint64_t v152 = 0;
        while (*(unsigned __int8 *)(v144 + v152) == v151[v152])
        {
          if (v146 == ++v152) {
            goto LABEL_504;
          }
        }
      }
      if ((v146 & 0x80) != 0) {
        goto LABEL_285;
      }
      *(_OWORD *)v286 = *(_OWORD *)v144;
      *(void *)&v286[16] = *(void *)(v144 + 16);
LABEL_286:
      *(void *)&v286[24] = *(void *)(v144 + 24);
      int v287 = *(_DWORD *)(v144 + 32);
      unint64_t v153 = v144 + 40;
      if ((v150 & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(&v283, *(const std::string::value_type **)(v144 + 40), *(void *)(v144 + 48));
      }
      else
      {
        *(_OWORD *)&v283.__r_.__value_.__l.__data_ = *(_OWORD *)v153;
        v283.__r_.__value_.__r.__words[2] = *(void *)(v144 + 56);
      }
      uint64_t v284 = *(void *)(v144 + 64);
      int v285 = *(_DWORD *)(v144 + 72);
      std::logic_error v288 = *(std::logic_error *)v286;
      long long v289 = *(_OWORD *)&v286[16];
      memset(v286, 0, 24);
      LODWORD(v290) = v287;
      std::string v291 = v283;
      memset(&v283, 0, sizeof(v283));
      uint64_t v154 = *(void *)(v144 + 64);
      int v293 = *(_DWORD *)(v144 + 72);
      uint64_t v292 = v154;
      if (std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::find<AMCP::Wire_Identifier>(v270, (unsigned __int8 **)&v288))
      {
        goto LABEL_290;
      }
      AMCP::Graph::Wire_Index::add_to_index(v254, v144, (long long *)&v288);
      AMCP::Graph::Wire_Index::add_to_index(v254, v144 + 40, (long long *)&v288);
      if (!*(unsigned char *)(v144 + 160)) {
        goto LABEL_290;
      }
      std::string::size_type v155 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>(v145, (unsigned __int8 **)&v288);
      if (v155)
      {
        uint64_t v157 = v155[12];
        uint64_t v156 = (std::__shared_weak_count *)v155[13];
        if (v156)
        {
          atomic_fetch_add_explicit(&v156->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v156);
        }
        if (v157) {
          goto LABEL_290;
        }
      }
      v158 = (std::__shared_weak_count *)operator new(0x200uLL, (std::align_val_t)0x40uLL);
      v159 = v158;
      uint64_t v160 = 0;
      v158->__shared_owners_ = 0;
      v158->__shared_weak_owners_ = 0;
      v158->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14643D0;
      *(_OWORD *)&v158[2].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v158[3].__shared_owners_ = 0u;
      v158[4].std::__shared_count = 0u;
      *(_OWORD *)&v158[4].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v158[5].__shared_owners_ = 0u;
      v158[6].std::__shared_count = 0u;
      *(_OWORD *)&v158[6].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v158[7].__shared_owners_ = 0u;
      v158[8].std::__shared_count = 0u;
      *(_OWORD *)&v158[8].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v158[9].__shared_owners_ = 0u;
      v158[10].std::__shared_count = 0u;
      *(_OWORD *)&v158[10].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v158[11].__shared_owners_ = 0u;
      v158[12].std::__shared_count = 0u;
      *(_OWORD *)&v158[12].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v158[13].__shared_owners_ = 0u;
      v158[14].std::__shared_count = 0u;
      *(_OWORD *)&v158[14].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v158[15].__shared_owners_ = 0u;
      v158[16].std::__shared_count = 0u;
      *(_OWORD *)&v158[16].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v158[17].__shared_owners_ = 0u;
      v158[18].std::__shared_count = 0u;
      *(_OWORD *)&v158[18].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v158[19].__shared_owners_ = 0u;
      v158[20].std::__shared_count = 0u;
      *(_OWORD *)&v158[20].__shared_weak_owners_ = 0u;
      do
      {
        uint64_t v161 = &v158[v160];
        LODWORD(v161[5].__shared_owners_) = 0;
        LODWORD(v161[5].__shared_weak_owners_) = 1065353216;
        v161[6].std::__shared_count = 0uLL;
        *(_OWORD *)&v161[6].__shared_weak_owners_ = 0uLL;
        *(_OWORD *)&v161[7].__shared_owners_ = 0uLL;
        v161[8].__vftable = 0;
        LODWORD(v161[8].__shared_owners_) = 1;
        *(_OWORD *)((char *)&v161[8].__shared_owners_ + 4) = 0uLL;
        *(std::__shared_count *)((char *)&v161[9].std::__shared_count + 4) = 0uLL;
        *(_OWORD *)((char *)&v161[9].__shared_weak_owners_ + 4) = 0uLL;
        *(_OWORD *)&v161[10].__shared_owners_ = 0uLL;
        LODWORD(v161[11].__vftable) = 1;
        uint64_t v162 = (std::__shared_weak_count_vtbl **)((char *)&v158[v160 + 11].__vftable + 4);
        *(uint64_t *)((char *)&v158[v160 + 11].__shared_owners_ + 4) = 0;
        *uint64_t v162 = 0;
        v160 += 8;
        *(void *)((char *)v162 + 13) = 0;
      }
      while (v160 != 16);
      *(void *)&long long v163 = (char *)v158 + 64;
      *((void *)&v163 + 1) = v158;
      long long v252 = v163;
      if (SBYTE7(v289) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v288.__vftable, (std::string::size_type)v288.__imp_.__imp_);
      }
      else
      {
        *(std::logic_error *)AudioObjectPropertyAddress buf = v288;
        *(void *)&buf[16] = v289;
      }
      *(void *)&buf[24] = *((void *)&v289 + 1);
      *(_DWORD *)&buf[32] = v290;
      if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external((std::string *)&buf[40], v291.__r_.__value_.__l.__data_, v291.__r_.__value_.__l.__size_);
      }
      else {
        *(std::string *)&buf[40] = v291;
      }
      uint64_t v304 = v292;
      int v305 = v293;
      *(_OWORD *)&v306.__r_.__value_.__l.__data_ = v252;
      unint64_t v200 = std::hash<AMCP::Wire_Identifier>::operator()((uint64_t)buf);
      unint64_t v2 = v200;
      unint64_t v201 = *((void *)v266 + 19);
      if (v201)
      {
        uint8x8_t v202 = (uint8x8_t)vcnt_s8((int8x8_t)v201);
        v202.i16[0] = vaddlv_u8(v202);
        unint64_t v203 = v202.u32[0];
        if (v202.u32[0] > 1uLL)
        {
          unint64_t v153 = v200;
          if (v200 >= v201) {
            unint64_t v153 = v200 % v201;
          }
        }
        else
        {
          unint64_t v153 = (v201 - 1) & v200;
        }
        uint64_t v204 = (void *)*((void *)*v145 + v153);
        if (v204)
        {
          uint64_t v205 = (void *)*v204;
          if (*v204)
          {
            do
            {
              unint64_t v206 = v205[1];
              if (v206 == v2)
              {
                if (std::equal_to<AMCP::Wire_Identifier>::operator()[abi:ne180100]((uint64_t)(v205 + 2), (unsigned __int8 **)buf))
                {
                  goto LABEL_489;
                }
              }
              else
              {
                if (v203 > 1)
                {
                  if (v206 >= v201) {
                    v206 %= v201;
                  }
                }
                else
                {
                  v206 &= v201 - 1;
                }
                if (v206 != v153) {
                  break;
                }
              }
              uint64_t v205 = (void *)*v205;
            }
            while (v205);
          }
          v145 = (void **)((char *)v266 + 144);
        }
      }
      std::string::size_type v207 = (char *)operator new(0x70uLL);
      v294.__vftable = (std::logic_error_vtbl *)v207;
      v294.__imp_.__imp_ = (char *)v266 + 160;
      *(void *)std::string::size_type v207 = 0;
      *((void *)v207 + 1) = v2;
      *((_OWORD *)v207 + 1) = *(_OWORD *)buf;
      uint64_t v208 = *(void *)&buf[16];
      memset(buf, 0, 24);
      uint64_t v209 = *(void *)&buf[24];
      *((void *)v207 + 4) = v208;
      *((void *)v207 + 5) = v209;
      *((_DWORD *)v207 + 12) = *(_DWORD *)&buf[32];
      *(_OWORD *)(v207 + 56) = *(_OWORD *)&buf[40];
      uint64_t v210 = *(void *)&buf[56];
      memset(&buf[40], 0, 24);
      uint64_t v211 = v292;
      *((void *)v207 + 9) = v210;
      *((void *)v207 + 10) = v211;
      *((_DWORD *)v207 + 22) = v293;
      *((_OWORD *)v207 + 6) = v252;
      *(_OWORD *)&v306.__r_.__value_.__l.__data_ = 0uLL;
      LOBYTE(v295) = 1;
      float v212 = (float)(unint64_t)(*((void *)v266 + 21) + 1);
      float v213 = *((float *)v266 + 44);
      if (!v201 || (float)(v213 * (float)v201) < v212)
      {
        BOOL v214 = v201 < 3 || (v201 & (v201 - 1)) != 0;
        unint64_t v215 = v214 | (2 * v201);
        unint64_t v216 = vcvtps_u32_f32(v212 / v213);
        if (v215 <= v216) {
          int8x8_t prime = (int8x8_t)v216;
        }
        else {
          int8x8_t prime = (int8x8_t)v215;
        }
        if (*(void *)&prime == 1)
        {
          int8x8_t prime = (int8x8_t)2;
        }
        else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
          unint64_t v201 = *((void *)v266 + 19);
        }
        if (*(void *)&prime <= v201)
        {
          if (*(void *)&prime < v201)
          {
            unint64_t v224 = vcvtps_u32_f32((float)*((unint64_t *)v266 + 21) / *((float *)v266 + 44));
            if (v201 < 3
              || (uint8x8_t v225 = (uint8x8_t)vcnt_s8((int8x8_t)v201), v225.i16[0] = vaddlv_u8(v225), v225.u32[0] > 1uLL))
            {
              unint64_t v224 = std::__next_prime(v224);
            }
            else
            {
              uint64_t v226 = 1 << -(char)__clz(v224 - 1);
              if (v224 >= 2) {
                unint64_t v224 = v226;
              }
            }
            if (*(void *)&prime <= v224) {
              int8x8_t prime = (int8x8_t)v224;
            }
            if (*(void *)&prime >= v201)
            {
              unint64_t v201 = *((void *)v266 + 19);
            }
            else
            {
              if (prime) {
                goto LABEL_445;
              }
              uint64_t v232 = *v145;
              std::__shared_weak_count *v145 = 0;
              if (v232) {
                operator delete(v232);
              }
              unint64_t v201 = 0;
              *((void *)v266 + 19) = 0;
            }
          }
        }
        else
        {
LABEL_445:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          std::string::size_type v218 = operator new(8 * *(void *)&prime);
          std::string::size_type v219 = *v145;
          std::__shared_weak_count *v145 = v218;
          if (v219) {
            operator delete(v219);
          }
          uint64_t v220 = 0;
          *((int8x8_t *)v266 + 19) = prime;
          do
            *((void *)*v145 + v220++) = 0;
          while (*(void *)&prime != v220);
          std::string::size_type v221 = *v250;
          if (*v250)
          {
            unint64_t v222 = *((void *)v221 + 1);
            uint8x8_t v223 = (uint8x8_t)vcnt_s8(prime);
            v223.i16[0] = vaddlv_u8(v223);
            if (v223.u32[0] > 1uLL)
            {
              if (v222 >= *(void *)&prime) {
                v222 %= *(void *)&prime;
              }
            }
            else
            {
              v222 &= *(void *)&prime - 1;
            }
            *((void *)*v145 + v222) = v250;
            v227 = *(void (__cdecl **)(std::logic_error *__hidden))v221;
            if (*(void *)v221)
            {
              do
              {
                unint64_t v228 = *((void *)v227 + 1);
                if (v223.u32[0] > 1uLL)
                {
                  if (v228 >= *(void *)&prime) {
                    v228 %= *(void *)&prime;
                  }
                }
                else
                {
                  v228 &= *(void *)&prime - 1;
                }
                if (v228 != v222)
                {
                  if (!*((void *)*v145 + v228))
                  {
                    *((void *)*v145 + v228) = v221;
                    goto LABEL_470;
                  }
                  *(void *)std::string::size_type v221 = *(void *)v227;
                  *(void *)v227 = **((void **)*v145 + v228);
                  **((void **)*v145 + v228) = v227;
                  v227 = v221;
                }
                unint64_t v228 = v222;
LABEL_470:
                std::string::size_type v221 = v227;
                v227 = *(void (__cdecl **)(std::logic_error *__hidden))v227;
                unint64_t v222 = v228;
              }
              while (v227);
            }
          }
          unint64_t v201 = (unint64_t)prime;
        }
        if ((v201 & (v201 - 1)) != 0)
        {
          if (v2 >= v201) {
            unint64_t v153 = v2 % v201;
          }
          else {
            unint64_t v153 = v2;
          }
        }
        else
        {
          unint64_t v153 = (v201 - 1) & v2;
        }
      }
      v229 = (void (__cdecl **)(std::logic_error *__hidden))*((void *)*v145 + v153);
      v230 = v294.__vftable;
      if (v229)
      {
        v294.~logic_error = *v229;
LABEL_487:
        std::__shared_weak_count *v229 = (void (__cdecl *)(std::logic_error *__hidden))v230;
        goto LABEL_488;
      }
      v294.~logic_error = *v250;
      void *v250 = (void (__cdecl *)(std::logic_error *__hidden))v230;
      *((void *)*v145 + v153) = v250;
      if (v230->~logic_error)
      {
        unint64_t v231 = *((void *)v230->~logic_error + 1);
        if ((v201 & (v201 - 1)) != 0)
        {
          if (v231 >= v201) {
            v231 %= v201;
          }
        }
        else
        {
          v231 &= v201 - 1;
        }
        v229 = (void (__cdecl **)(std::logic_error *__hidden))((char *)*v145 + 8 * v231);
        goto LABEL_487;
      }
LABEL_488:
      v294.__vftable = 0;
      ++*((void *)v266 + 21);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v294);
      v159 = (std::__shared_weak_count *)v306.__r_.__value_.__l.__size_;
      if (v306.__r_.__value_.__l.__size_) {
LABEL_489:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v159);
      if ((buf[63] & 0x80000000) != 0) {
        operator delete(*(void **)&buf[40]);
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
LABEL_290:
      if (SBYTE7(v289) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v288.__vftable, (std::string::size_type)v288.__imp_.__imp_);
      }
      else
      {
        *(std::logic_error *)AudioObjectPropertyAddress buf = v288;
        *(void *)&buf[16] = v289;
      }
      *(void *)&buf[24] = *((void *)&v289 + 1);
      *(_DWORD *)&buf[32] = v290;
      if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external((std::string *)&buf[40], v291.__r_.__value_.__l.__data_, v291.__r_.__value_.__l.__size_);
      }
      else {
        *(std::string *)&buf[40] = v291;
      }
      uint64_t v304 = v292;
      int v305 = v293;
      AMCP::Wire_Description::Wire_Description(&v306, (const AMCP::Wire_Description *)v144);
      unint64_t v164 = std::hash<AMCP::Wire_Identifier>::operator()((uint64_t)buf);
      unint64_t v165 = v164;
      unint64_t v166 = *((void *)v266 + 14);
      if (v166)
      {
        uint8x8_t v167 = (uint8x8_t)vcnt_s8((int8x8_t)v166);
        v167.i16[0] = vaddlv_u8(v167);
        unint64_t v168 = v167.u32[0];
        if (v167.u32[0] > 1uLL)
        {
          unint64_t v2 = v164;
          if (v164 >= v166) {
            unint64_t v2 = v164 % v166;
          }
        }
        else
        {
          unint64_t v2 = (v166 - 1) & v164;
        }
        unint64_t v169 = (void *)*((void *)&v270->~__shared_weak_count + v2);
        if (v169)
        {
          v170 = (void *)*v169;
          if (*v169)
          {
            do
            {
              unint64_t v171 = v170[1];
              if (v171 == v165)
              {
                if (std::equal_to<AMCP::Wire_Identifier>::operator()[abi:ne180100]((uint64_t)(v170 + 2), (unsigned __int8 **)buf))
                {
                  goto LABEL_384;
                }
              }
              else
              {
                if (v168 > 1)
                {
                  if (v171 >= v166) {
                    v171 %= v166;
                  }
                }
                else
                {
                  v171 &= v166 - 1;
                }
                if (v171 != v2) {
                  break;
                }
              }
              v170 = (void *)*v170;
            }
            while (v170);
          }
        }
      }
      long long v172 = (char *)operator new(0x220uLL);
      v173 = v172;
      v294.__vftable = (std::logic_error_vtbl *)v172;
      v294.__imp_.__imp_ = (char *)v266 + 120;
      LOBYTE(v295) = 0;
      *(void *)long long v172 = 0;
      *((void *)v172 + 1) = v165;
      *((_OWORD *)v172 + 1) = *(_OWORD *)buf;
      uint64_t v174 = *(void *)&buf[16];
      memset(buf, 0, 24);
      uint64_t v175 = *(void *)&buf[24];
      *((void *)v172 + 4) = v174;
      *((void *)v172 + 5) = v175;
      *((_DWORD *)v172 + 12) = *(_DWORD *)&buf[32];
      uint64_t v176 = *(void *)&buf[56];
      *(_OWORD *)(v172 + 56) = *(_OWORD *)&buf[40];
      memset(&buf[40], 0, 24);
      *((_DWORD *)v172 + 22) = v305;
      uint64_t v177 = v304;
      *((void *)v172 + 9) = v176;
      *((void *)v172 + 10) = v177;
      if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external((std::string *)v172 + 4, v306.__r_.__value_.__l.__data_, v306.__r_.__value_.__l.__size_);
      }
      else {
        *((std::string *)v172 + 4) = v306;
      }
      *((void *)v173 + 15) = v307;
      *((_DWORD *)v173 + 32) = v308;
      if (SHIBYTE(v310) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v173 + 136), (const std::string::value_type *)v309, *((std::string::size_type *)&v309 + 1));
      }
      else
      {
        *(_OWORD *)(v173 + 136) = v309;
        *((void *)v173 + 19) = v310;
      }
      uint64_t v178 = v311;
      *((void *)v173 + 22) = 0;
      *((void *)v173 + 20) = v178;
      *((_DWORD *)v173 + 42) = v312;
      *((void *)v173 + 23) = 0;
      *((void *)v173 + 24) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v173 + 22, v313, (uint64_t)v314, (v314 - (unsigned char *)v313) >> 2);
      *((void *)v173 + 25) = 0;
      *((void *)v173 + 26) = 0;
      *((void *)v173 + 27) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)v173 + 25, v315, (uint64_t)v316, (v316 - (unsigned char *)v315) >> 2);
      *((_OWORD *)v173 + 14) = v318;
      *((_DWORD *)v173 + 60) = 0;
      *(void *)(v173 + 244) = v319;
      *((_DWORD *)v173 + 63) = v317;
      v173[256] = v320;
      v173[504] = 0;
      *((void *)v173 + 34) = 0;
      *((void *)v173 + 35) = 0;
      *((void *)v173 + 33) = 0;
      v173[288] = 0;
      *((_OWORD *)v173 + 32) = 0u;
      *((_OWORD *)v173 + 33) = 0u;
      LOBYTE(v295) = 1;
      float v179 = (float)(unint64_t)(*((void *)v266 + 16) + 1);
      float v180 = *((float *)v266 + 34);
      if (!v166 || (float)(v180 * (float)v166) < v179)
      {
        BOOL v181 = v166 < 3 || (v166 & (v166 - 1)) != 0;
        unint64_t v182 = v181 | (2 * v166);
        unint64_t v183 = vcvtps_u32_f32(v179 / v180);
        if (v182 <= v183) {
          int8x8_t v184 = (int8x8_t)v183;
        }
        else {
          int8x8_t v184 = (int8x8_t)v182;
        }
        if (*(void *)&v184 == 1)
        {
          int8x8_t v184 = (int8x8_t)2;
        }
        else if ((*(void *)&v184 & (*(void *)&v184 - 1)) != 0)
        {
          int8x8_t v184 = (int8x8_t)std::__next_prime(*(void *)&v184);
        }
        unint64_t v166 = *((void *)v266 + 14);
        if (*(void *)&v184 <= v166)
        {
          if (*(void *)&v184 < v166)
          {
            unint64_t v191 = vcvtps_u32_f32((float)*((unint64_t *)v266 + 16) / *((float *)v266 + 34));
            if (v166 < 3
              || (uint8x8_t v192 = (uint8x8_t)vcnt_s8((int8x8_t)v166), v192.i16[0] = vaddlv_u8(v192), v192.u32[0] > 1uLL))
            {
              unint64_t v191 = std::__next_prime(v191);
            }
            else
            {
              uint64_t v193 = 1 << -(char)__clz(v191 - 1);
              if (v191 >= 2) {
                unint64_t v191 = v193;
              }
            }
            if (*(void *)&v184 <= v191) {
              int8x8_t v184 = (int8x8_t)v191;
            }
            if (*(void *)&v184 >= v166)
            {
              unint64_t v166 = *((void *)v266 + 14);
            }
            else
            {
              if (v184) {
                goto LABEL_340;
              }
              unint64_t v199 = v270->__vftable;
              v270->__vftable = 0;
              if (v199) {
                operator delete(v199);
              }
              unint64_t v166 = 0;
              *((void *)v266 + 14) = 0;
            }
          }
        }
        else
        {
LABEL_340:
          if (*(void *)&v184 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint8x8_t v185 = (std::__shared_weak_count_vtbl *)operator new(8 * *(void *)&v184);
          v186 = v270->__vftable;
          v270->__vftable = v185;
          if (v186) {
            operator delete(v186);
          }
          uint64_t v187 = 0;
          *((int8x8_t *)v266 + 14) = v184;
          do
            *((void *)&v270->~__shared_weak_count + v187++) = 0;
          while (*(void *)&v184 != v187);
          unint64_t v188 = *v264;
          if (*v264)
          {
            unint64_t v189 = *((void *)v188 + 1);
            uint8x8_t v190 = (uint8x8_t)vcnt_s8(v184);
            v190.i16[0] = vaddlv_u8(v190);
            if (v190.u32[0] > 1uLL)
            {
              if (v189 >= *(void *)&v184) {
                v189 %= *(void *)&v184;
              }
            }
            else
            {
              v189 &= *(void *)&v184 - 1;
            }
            *((void *)&v270->~__shared_weak_count + v189) = v264;
            int8x8_t v194 = *(void (__cdecl **)(std::logic_error *__hidden))v188;
            if (*(void *)v188)
            {
              do
              {
                unint64_t v195 = *((void *)v194 + 1);
                if (v190.u32[0] > 1uLL)
                {
                  if (v195 >= *(void *)&v184) {
                    v195 %= *(void *)&v184;
                  }
                }
                else
                {
                  v195 &= *(void *)&v184 - 1;
                }
                if (v195 != v189)
                {
                  if (!*((void *)&v270->~__shared_weak_count + v195))
                  {
                    *((void *)&v270->~__shared_weak_count + v195) = v188;
                    goto LABEL_365;
                  }
                  *(void *)unint64_t v188 = *(void *)v194;
                  *(void *)int8x8_t v194 = **((void **)&v270->~__shared_weak_count + v195);
                  **((void **)&v270->~__shared_weak_count + v195) = v194;
                  int8x8_t v194 = v188;
                }
                unint64_t v195 = v189;
LABEL_365:
                unint64_t v188 = v194;
                int8x8_t v194 = *(void (__cdecl **)(std::logic_error *__hidden))v194;
                unint64_t v189 = v195;
              }
              while (v194);
            }
          }
          unint64_t v166 = (unint64_t)v184;
        }
        if ((v166 & (v166 - 1)) != 0)
        {
          if (v165 >= v166) {
            unint64_t v2 = v165 % v166;
          }
          else {
            unint64_t v2 = v165;
          }
        }
        else
        {
          unint64_t v2 = (v166 - 1) & v165;
        }
      }
      uint8x8_t v196 = (void (__cdecl **)(std::logic_error *__hidden))*((void *)&v270->~__shared_weak_count + v2);
      v197 = v294.__vftable;
      if (v196)
      {
        v294.~logic_error = *v196;
      }
      else
      {
        v294.~logic_error = *v264;
        NSObject *v264 = (void (__cdecl *)(std::logic_error *__hidden))v197;
        *((void *)&v270->~__shared_weak_count + v2) = v264;
        if (!v197->~logic_error) {
          goto LABEL_383;
        }
        unint64_t v198 = *((void *)v197->~logic_error + 1);
        if ((v166 & (v166 - 1)) != 0)
        {
          if (v198 >= v166) {
            v198 %= v166;
          }
        }
        else
        {
          v198 &= v166 - 1;
        }
        uint8x8_t v196 = (void (__cdecl **)(std::logic_error *__hidden))(&v270->~__shared_weak_count + v198);
      }
      *uint8x8_t v196 = (void (__cdecl *)(std::logic_error *__hidden))v197;
LABEL_383:
      v294.__vftable = 0;
      ++*((void *)v266 + 16);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,void *>>>>::reset[abi:ne180100]((uint64_t)&v294);
LABEL_384:
      v294.__vftable = (std::logic_error_vtbl *)v321;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v294);
      if (v315)
      {
        v316 = v315;
        operator delete(v315);
      }
      this = (AMCP::IO_Core::Graph_Manager *)v313;
      v145 = (void **)((char *)v266 + 144);
      if (v313)
      {
        std::logic_error v314 = v313;
        operator delete(v313);
      }
      if (SHIBYTE(v310) < 0) {
        operator delete((void *)v309);
      }
      if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v306.__r_.__value_.__l.__data_);
      }
      if ((buf[63] & 0x80000000) != 0) {
        operator delete(*(void **)&buf[40]);
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (SHIBYTE(v291.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v291.__r_.__value_.__l.__data_);
      }
      if (SBYTE7(v289) < 0) {
        operator delete(v288.__vftable);
      }
      v144 += 192;
    }
    while (v144 != v258);
  }
}

void sub_1BAC2E790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50)
{
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  _Unwind_Resume(a1);
}

void sub_1BAC2E7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
}

void sub_1BAC2E8D0()
{
}

void sub_1BAC2E8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  v72[6] = v70;
  uint64_t v74 = (void *)v72[7];
  if (v74)
  {
    v72[8] = v74;
    operator delete(v74);
  }
  uint64_t v75 = (void *)v72[22];
  if (v75)
  {
    v72[23] = v75;
    operator delete(v75);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl((uint64_t)&STACK[0x2C0]);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a69);
  MEMORY[0x1C1859090](&a52);
  if (a59 < 0) {
    operator delete(__p);
  }
  if (v69) {
    __cxa_free_exception(v71);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a39);
  _Unwind_Resume(a1);
}

void sub_1BAC2E9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  v70[6] = v66;
  unint64_t v72 = (void *)v70[7];
  if (v72)
  {
    v70[8] = v72;
    operator delete(v72);
  }
  uint64_t v73 = (void *)v70[22];
  if (v73)
  {
    v70[23] = v73;
    operator delete(v73);
  }
  *(void *)(v69 + 16) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)&STACK[0x2D8]);
  MEMORY[0x1C18590A0](&STACK[0x2C0]);
  v70[14] = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v67 + 24));
  MEMORY[0x1C18590A0](&a66);
  MEMORY[0x1C1859090](&a49);
  if (a56 < 0) {
    operator delete(__p);
  }
  if (v68) {
    JUMPOUT(0x1BAC2EAB0);
  }
  _Unwind_Resume(a1);
}

void sub_1BAC2EA18()
{
}

void sub_1BAC2EA3C(_Unwind_Exception *a1)
{
}

void sub_1BAC2EA54()
{
}

void sub_1BAC2EA94()
{
}

BOOL AMCP::IO_Core::Graph_Manager::update_iocontext(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2[23];
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *((void *)a2 + 1);
  }
  if (!v3) {
    return 0;
  }
  memset(v28, 0, sizeof(v28));
  uint64_t v7 = (void *)(a1 + 8);
  int v8 = (void *)(a1 + 184);
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>((void *)(a1 + 184), a2);
  if (v9)
  {
    uint64_t v11 = *((void *)v9 + 5);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v9 + 6);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  *(void *)AudioObjectPropertyAddress buf = &unk_1F14662F8;
  *(void *)BOOL v43 = a1;
  *(void *)uint64_t v46 = buf;
  AMCP::Graph::Graph::update_context(v7, a2, buf, a3);
  std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)>::~__value_func[abi:ne180100](buf);
  int v12 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v8, a2);
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v18 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      long long v19 = pthread_self();
      mach_port_t v20 = pthread_mach_thread_np(v19);
      if ((a2[23] & 0x80u) == 0) {
        uint64_t v21 = (uint64_t *)a2;
      }
      else {
        uint64_t v21 = *(uint64_t **)a2;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v20;
      *(_WORD *)BOOL v43 = 2080;
      *(void *)&v43[2] = "Graph.cpp";
      __int16 v44 = 1024;
      int v45 = 1000;
      *(_WORD *)uint64_t v46 = 2080;
      *(void *)&v46[2] = "not (m_nodes_by_uid.find(iocontext_node) != m_nodes_by_uid.end())";
      *(_WORD *)&v46[10] = 2080;
      *(void *)&v46[12] = v21;
      _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Root node not found in graph: %s", buf, 0x2Cu);
    }
    __cxa_allocate_exception(0x40uLL);
    if ((a2[23] & 0x80u) == 0) {
      uint64_t v22 = (uint64_t *)a2;
    }
    else {
      uint64_t v22 = *(uint64_t **)a2;
    }
    caulk::make_string((caulk *)"Root node not found in graph: %s", (uint64_t)&v34, v22);
    std::logic_error::logic_error(&v35, &v34);
    v35.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v36, &v35);
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    int v41 = -1;
    v36.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v37 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
    *(void *)&v46[8] = "size_t AMCP::Graph::Graph::get_num_connections_within_subgraph(const Graph_Node_UID &)";
    *(void *)&v46[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
    int v47 = 1000;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v29);
    long long v31 = &unk_1F148AA90;
    *(_OWORD *)std::logic_error __p = *(_OWORD *)v29;
    uint64_t v33 = v30;
    v29[0] = 0;
    v29[1] = 0;
    uint64_t v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v13 = *((void *)v12 + 5);
  uint64_t v14 = (std::__shared_weak_count *)*((void *)v12 + 6);
  if (!v14)
  {
    if (!*(_DWORD *)(v13 + 16))
    {
      if (!*(void *)(v13 + 104)) {
        goto LABEL_42;
      }
LABEL_15:
      (*(void (**)(void))(**(void **)(v11 + 176) + 16))(*(void *)(v11 + 176));
      char v16 = 0;
      if (!v10) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
LABEL_31:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v23 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      unint64_t v24 = pthread_self();
      mach_port_t v25 = pthread_mach_thread_np(v24);
      if ((a2[23] & 0x80u) == 0) {
        long long v26 = (uint64_t *)a2;
      }
      else {
        long long v26 = *(uint64_t **)a2;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v25;
      *(_WORD *)BOOL v43 = 2080;
      *(void *)&v43[2] = "Graph.cpp";
      __int16 v44 = 1024;
      int v45 = 1002;
      *(_WORD *)uint64_t v46 = 2080;
      *(void *)&v46[2] = "not (root->get_node_type() == AMCP::Node_Type::IOContext)";
      *(_WORD *)&v46[10] = 2080;
      *(void *)&v46[12] = v26;
      _os_log_error_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Root node must be an IOContextNode: %s", buf, 0x2Cu);
    }
    __cxa_allocate_exception(0x40uLL);
    if ((a2[23] & 0x80u) == 0) {
      uint64_t v27 = (uint64_t *)a2;
    }
    else {
      uint64_t v27 = *(uint64_t **)a2;
    }
    caulk::make_string((caulk *)"Root node must be an IOContextNode: %s", (uint64_t)&v34, v27);
    std::logic_error::logic_error(&v35, &v34);
    v35.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v36, &v35);
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    int v41 = -1;
    v36.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v37 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
    *(void *)&v46[8] = "size_t AMCP::Graph::Graph::get_num_connections_within_subgraph(const Graph_Node_UID &)";
    *(void *)&v46[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
    int v47 = 1002;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v29);
    long long v31 = &unk_1F148AA90;
    *(_OWORD *)std::logic_error __p = *(_OWORD *)v29;
    uint64_t v33 = v30;
    v29[0] = 0;
    v29[1] = 0;
    uint64_t v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  if (*(_DWORD *)(v13 + 16)) {
    goto LABEL_31;
  }
  uint64_t v15 = *(void *)(v13 + 104);
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  if (v15) {
    goto LABEL_15;
  }
LABEL_42:
  char v16 = 1;
  if (v10) {
LABEL_16:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_17:
  *(void *)AudioObjectPropertyAddress buf = v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return (v16 & 1) == 0;
}

void sub_1BAC2F364(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  *(void *)(v2 - 160) = &v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v2 - 160);
  _Unwind_Resume(a1);
}

void sub_1BAC2F36C()
{
}

void sub_1BAC2F39C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BAC2F394);
}

uint64_t std::default_delete<AMCP::Graph::Graph_State_Data>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::destroy(*(void **)(result + 232));
    std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(*(void **)(v1 + 208));
    std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table(v1 + 160);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::~__hash_table(v1 + 120);
    std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::~__hash_table(v1 + 80);
    std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::~__hash_table(v1 + 40);
    std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::~__hash_table(v1);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<AMCP::Graph::Node>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::vector<unsigned int>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<unsigned int>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<unsigned int>>>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__deallocate_node(*(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<AMCP::Graph::Node>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<AMCP::Graph::Node>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__deallocate_node(void **__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      uint64_t v2 = (void **)*v1;
      if (*((char *)v1 + 47) < 0) {
        operator delete(v1[3]);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void *std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core13Graph_Manager16update_iocontextERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERNS_5Graph5Graph15Resource_CountsEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)>::operator()(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void **)(*(void *)(a1 + 8) + 400);
  v5[0] = 0;
  v5[1] = 0;
  AMCP::IO_Core::Device_Timebase_Factory::demand_timebase_for_device(a3, v4, v5, a2);
}

uint64_t std::__function::__func<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14662F8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14662F8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_iocontext(std::string const&,AMCP::Graph::Graph::Resource_Counts &)::$_0>,std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)>::~__func()
{
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

__n128 std::__function::__func<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1466278;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  __n128 result = *(__n128 *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

char *std::__function::__func<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v3 = &unk_1F1466278;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a1 + 56);
  return v3;
}

void sub_1BAC2F98C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1466278;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::modify_graph(AMCP::Graph_Description const&,AMCP::Modify_Graph_Destroy_List const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1466278;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, void *a2, uint64_t a3)
{
  __n128 result = std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  if (!*result)
  {
    uint64_t v6 = (uint64_t **)result;
    uint64_t v7 = (uint64_t *)operator new(0x38uLL);
    int v8 = (std::string *)(v7 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v7[6] = *(void *)(a3 + 16);
    }
    uint64_t v9 = v10;
    return std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(a1, v9, v6, v7);
  }
  return result;
}

void sub_1BAC2FAFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::string>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::string>::destroy(*(void *)a1);
    std::__tree<std::string>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void *std::__tree<std::string>::__find_equal<std::string>(uint64_t a1, void *a2, void *a3)
{
  __n128 v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        int v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v4 + 4) & 0x80) == 0) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        __n128 v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0) {
        break;
      }
      __n128 v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void AMCP::IO_Core::Graph_Manager::prepare_graph_for_config_change(std::string *a1, void *a2, char a3, unsigned int a4, uint64_t *a5, uint64_t **a6)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear(a2[50] + 40);
  if (a3)
  {
    v30.__end_ = 0;
    v30.__end_cap_.__value_ = 0;
    v30.__begin_ = (std::vector<std::string>::pointer)&v30.__end_;
    (*(void (**)(void **__return_ptr, void *))(*a2 + 16))(&__p, a2);
    int v12 = (std::__shared_mutex_base *)(*(uint64_t (**)(void *))(*(void *)__p + 16))(__p);
    AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v28, v12, a4);
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    uint64_t v13 = v28;
    if (v28)
    {
      int simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(v28);
      if (simple_required == 1634757735)
      {
        AMCP::Core::Core::get_simple_required_property<1684370979u>(&__p, v13);
        uint64_t v15 = __p;
        char v16 = v27;
        if (__p != v27)
        {
          mach_port_t v17 = (unsigned int *)__p;
          do
          {
            std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v30, (uint64_t *)&v30.__end_, *v17, *v17);
            ++v17;
          }
          while (v17 != (unsigned int *)v16);
        }
        if (v15) {
          operator delete(v15);
        }
      }
      else if (simple_required == 1633969526)
      {
        std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v30, a4, a4);
      }
    }
    begiuint64_t n = v30.__begin_;
    if ((std::vector<std::string>::pointer *)v30.__begin_ != &v30.__end_)
    {
      do
      {
        AMCP::IO_Core::Graph_Manager::find_timebases_from_object_id((AMCP::IO_Core::Graph_Manager *)&__p, a2, HIDWORD(begin[1].__r_.__value_.__r.__words[0]));
        AMCP::IO_Core::Graph_Manager::pause_iocontexts_for_timebases((void **)a2, (uint64_t)&__p, a6);
        std::vector<std::shared_ptr<AMCP::Graph::Timebase>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<AMCP::Graph::Timebase>*>,std::__wrap_iter<std::shared_ptr<AMCP::Graph::Timebase>*>>(a5, a5[1], __p, v27, ((char *)v27 - (unsigned char *)__p) >> 4);
        p_p = &__p;
        std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&p_p);
        unint64_t size = (std::vector<std::string> *)begin->__r_.__value_.__l.__size_;
        if (size)
        {
          do
          {
            mach_port_t v20 = size;
            unint64_t size = (std::vector<std::string> *)size->__begin_;
          }
          while (size);
        }
        else
        {
          do
          {
            mach_port_t v20 = (std::vector<std::string> *)begin->__r_.__value_.__r.__words[2];
            BOOL v21 = v20->__begin_ == begin;
            begiuint64_t n = (std::vector<std::string>::pointer)v20;
          }
          while (!v21);
        }
        begiuint64_t n = (std::vector<std::string>::pointer)v20;
      }
      while (v20 != (std::vector<std::string> *)&v30.__end_);
    }
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v30.__end_->__r_.__value_.__r.__words);
  }
  memset(&v30, 0, sizeof(v30));
  uint64_t v22 = (uint64_t *)a2[25];
  if (v22)
  {
    std::vector<std::string>::pointer v23 = 0;
    do
    {
      if (*(_DWORD *)(v22[5] + 16) == 3)
      {
        unint64_t v24 = (long long *)(v22 + 2);
        if (v23 >= v30.__end_cap_.__value_)
        {
          std::vector<std::string>::pointer v23 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v30, v24);
        }
        else
        {
          if (*((char *)v22 + 39) < 0)
          {
            std::string::__init_copy_ctor_external(v23, (const std::string::value_type *)v22[2], v22[3]);
          }
          else
          {
            long long v25 = *v24;
            v23->__r_.__value_.__r.__words[2] = v22[4];
            *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v25;
          }
          ++v23;
        }
        v30.__end_ = v23;
      }
      uint64_t v22 = (uint64_t *)*v22;
    }
    while (v22);
  }
  (*(void (**)(void **__return_ptr, void *))(*a2 + 48))(&__p, a2);
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, __p, (uint64_t)v27, ((char *)v27 - (unsigned char *)__p) >> 2);
  a1[1].__r_.__value_.__r.__words[0] = 0;
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 1, (long long *)v30.__begin_, (long long *)v30.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v30.__end_ - (char *)v30.__begin_) >> 3));
  if (__p)
  {
    uint64_t v27 = (std::__shared_weak_count *)__p;
    operator delete(__p);
  }
  std::logic_error __p = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1BAC2FF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, char a15, void *a16, uint64_t a17, uint64_t a18)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a16);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t *result, unsigned int a2, int a3)
{
  uint64_t v4 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  __n128 v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        __n128 v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      __n128 v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

void AMCP::Core::Core::get_simple_required_property<1684370979u>(void *a1, AMCP::Core::Core *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  strcpy(buf, "#vedbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>((uint64_t)&v10, a2, (AMCP::Address *)buf);
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    __n128 v5 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = pthread_self();
      mach_port_t v7 = pthread_mach_thread_np(v6);
      char v9 = 4;
      strcpy((char *)__p, "dev#");
      *(_DWORD *)AudioObjectPropertyAddress buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      __int16 v14 = 1024;
      int v15 = 391;
      __int16 v16 = 2080;
      mach_port_t v17 = "optional_value.operator BOOL() == true";
      __int16 v18 = 2080;
      long long v19 = __p;
      __int16 v20 = 1024;
      int v21 = 1735159650;
      __int16 v22 = 1024;
      int v23 = 0;
      _os_log_error_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = v10;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, v10, v11, (v11 - (uint64_t)v10) >> 2);
  if (v4)
  {
    operator delete(v4);
  }
}

void sub_1BAC30248(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t *std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(uint64_t *result, uint64_t *a2, unsigned int a3, int a4)
{
  __n128 v5 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (unsigned int v7 = *((_DWORD *)a2 + 7), v7 > a3))
  {
    unsigned int v8 = (uint64_t *)*a2;
    if ((uint64_t *)*result == a2)
    {
      uint64_t v10 = a2;
LABEL_16:
      if (v8) {
        uint64_t v13 = (uint64_t **)v10;
      }
      else {
        uint64_t v13 = (uint64_t **)a2;
      }
      if (v8) {
        uint64_t v11 = (uint64_t **)(v10 + 1);
      }
      else {
        uint64_t v11 = (uint64_t **)a2;
      }
      goto LABEL_22;
    }
    if (v8)
    {
      char v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        char v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      int v15 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v15[2];
        BOOL v16 = *v10 == (void)v15;
        int v15 = v10;
      }
      while (v16);
    }
    if (*((_DWORD *)v10 + 7) < a3) {
      goto LABEL_16;
    }
    mach_port_t v17 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v13 = (uint64_t **)v17;
          unsigned int v18 = *((_DWORD *)v17 + 7);
          if (v18 <= a3) {
            break;
          }
          mach_port_t v17 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }
        if (v18 >= a3) {
          break;
        }
        uint64_t v6 = v13 + 1;
        mach_port_t v17 = v13[1];
        if (!v17) {
          goto LABEL_44;
        }
      }
LABEL_47:
      uint64_t v11 = v6;
      goto LABEL_22;
    }
  }
  else
  {
    if (v7 >= a3) {
      return result;
    }
    uint64_t v11 = (uint64_t **)(a2 + 1);
    char v12 = (uint64_t *)a2[1];
    if (v12)
    {
      do
      {
        uint64_t v11 = (uint64_t **)v12;
        char v12 = (uint64_t *)*v12;
        uint64_t v13 = v11;
        __int16 v14 = v11;
      }
      while (v12);
    }
    else
    {
      __int16 v14 = (uint64_t **)a2;
      do
      {
        long long v19 = (uint64_t *)v14;
        __int16 v14 = (uint64_t **)v14[2];
      }
      while (*v14 != v19);
      uint64_t v13 = (uint64_t **)a2;
    }
    if (v14 == v6 || *((_DWORD *)v14 + 7) > a3)
    {
LABEL_22:
      uint64_t v6 = v11;
      if (*v11) {
        return result;
      }
      goto LABEL_44;
    }
    __int16 v20 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v13 = (uint64_t **)v20;
          unsigned int v21 = *((_DWORD *)v20 + 7);
          if (v21 <= a3) {
            break;
          }
          __int16 v20 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }
        if (v21 >= a3) {
          goto LABEL_47;
        }
        uint64_t v6 = v13 + 1;
        __int16 v20 = v13[1];
        if (!v20) {
          goto LABEL_44;
        }
      }
    }
  }
  uint64_t v13 = (uint64_t **)(result + 1);
LABEL_44:
  __int16 v22 = (uint64_t *)operator new(0x20uLL);
  *((_DWORD *)v22 + 7) = a4;

  return std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(v5, (uint64_t)v13, v6, v22);
}

void AMCP::IO_Core::Graph_Manager::find_timebases_from_object_id(AMCP::IO_Core::Graph_Manager *this, void *a2, unsigned int a3)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  v51[0] = 0;
  v51[1] = 0;
  uint64_t v50 = v51;
  std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v50, (uint64_t *)v51, a3, a3);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  BOOL v43 = (uint64_t *)this;
  *((void *)this + 2) = 0;
  (*(void (**)(uint8_t *__return_ptr, void *))(*a2 + 16))(buf, a2);
  uint64_t v6 = (std::__shared_mutex_base *)(*(uint64_t (**)(void))(**(void **)buf + 16))(*(void *)buf);
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v49, v6, a3);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  unsigned int v7 = (int8x8_t *)v49;
  if ((void)v49)
  {
    if (AMCP::Core::Core::get_simple_required_property<1650682995u>((AMCP::Core::Core *)v49) == 1633773415)
    {
      uint64_t v45 = 0x676C6F6261677270;
      int v46 = 0;
      operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v63, v7, (unsigned int *)&v45);
      if (!v63)
      {
        AMCP::Log::Scope_Registry::get(operation);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v39 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          uint64_t v40 = pthread_self();
          mach_port_t v41 = pthread_mach_thread_np(v40);
          *(_DWORD *)AudioObjectPropertyAddress buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v41;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "Core.h";
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = 202;
          _os_log_error_impl(&dword_1BAA78000, v39, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v62);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v57);
        std::runtime_error::runtime_error(&v58, &v57);
        std::runtime_error::runtime_error(&v59, &v58);
        memset(&v60[1], 0, 24);
        int v61 = -1;
        v59.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        v60[0] = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v59);
        uint64_t v67 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Ty"
              "pe = std::vector<unsigned int>, Argument_Types = <>]";
        char v68 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
        int v69 = 202;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v52);
        long long v55 = v52;
        uint64_t v56 = v53;
        long long v52 = 0uLL;
        uint64_t v53 = 0;
        std::logic_error __p = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      AMCP::Core::Operation::call_function<std::vector<unsigned int>>((uint64_t)&v47, v63);
      if (v64) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v64);
      }
      uint64_t v10 = v47;
      char v9 = v48;
      if (v47 != v48)
      {
        do
        {
          std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v50, (uint64_t *)v51, *v10, *v10);
          ++v10;
        }
        while (v10 != v9);
        uint64_t v10 = v47;
      }
      if (v10)
      {
        uint64_t v48 = v10;
        operator delete(v10);
      }
    }
    uint64_t v11 = (uint64_t)v50;
    if (v50 != v51)
    {
      do
      {
        unsigned int v12 = *(_DWORD *)(v11 + 28);
        (*(void (**)(std::runtime_error *__return_ptr, void *))(*a2 + 16))(&v59, a2);
        uint64_t v13 = (std::__shared_mutex_base *)(*((uint64_t (**)(std::runtime_error_vtbl *))v59.~runtime_error + 2))(v59.__vftable);
        AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)buf, v13, v12);
        __int16 v14 = (std::__shared_weak_count *)*((void *)&v49 + 1);
        __int16 v44 = *(AMCP::Core::Core **)buf;
        long long v49 = *(_OWORD *)buf;
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        if (v59.__imp_.__imp_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v59.__imp_.__imp_);
        }
        if (v44)
        {
          strcpy((char *)buf, " diubolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(&v57, v44, (const AMCP::Address *)buf);
          if (v57.__r_.__value_.__s.__data_[8])
          {
            if (!v57.__r_.__value_.__r.__words[0])
            {
              exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
              __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            uint64_t v15 = a2[50];
            applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)v57.__r_.__value_.__l.__data_);
            v59.__vftable = 0;
            v59.__imp_.__imp_ = 0;
            v60[0] = 0;
            for (uint64_t i = *(uint64_t **)(v15 + 16); i; uint64_t i = (uint64_t *)*i)
            {
              (*(void (**)(uint8_t *__return_ptr))(*(void *)i[5] + 24))(buf);
              if ((buf[23] & 0x80u) == 0) {
                uint64_t v17 = buf[23];
              }
              else {
                uint64_t v17 = *(void *)&buf[8];
              }
              uint64_t v18 = HIBYTE(v55);
              if (v55 < 0) {
                uint64_t v18 = v55;
              }
              if (v17 != v18)
              {
                if ((buf[23] & 0x80) != 0) {
                  operator delete(*(void **)buf);
                }
                continue;
              }
              if (v55 >= 0) {
                p_p = (unsigned __int8 *)&__p;
              }
              else {
                p_p = (unsigned __int8 *)__p;
              }
              if ((buf[23] & 0x80) != 0)
              {
                uint64_t v24 = *(void **)buf;
                int v25 = memcmp(*(const void **)buf, p_p, *(size_t *)&buf[8]);
                operator delete(v24);
                if (!v25) {
                  goto LABEL_44;
                }
              }
              else
              {
                if (!buf[23]) {
                  goto LABEL_44;
                }
                uint64_t v20 = 0;
                do
                {
                  int v21 = buf[v20];
                  int v22 = p_p[v20];
                  BOOL v23 = v21 != v22 || buf[23] - 1 == v20++;
                }
                while (!v23);
                if (v21 == v22)
                {
LABEL_44:
                  imp = v59.__imp_.__imp_;
                  if (v59.__imp_.__imp_ >= (const char *)v60[0])
                  {
                    int64_t v29 = (v59.__imp_.__imp_ - (const char *)v59.__vftable) >> 4;
                    unint64_t v30 = v29 + 1;
                    if ((unint64_t)(v29 + 1) >> 60) {
                      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                    }
                    int64_t v31 = v60[0] - (unint64_t)v59.__vftable;
                    if ((uint64_t)(v60[0] - (unint64_t)v59.__vftable) >> 3 > v30) {
                      unint64_t v30 = v31 >> 3;
                    }
                    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v32 = v30;
                    }
                    uint64_t v67 = (const char *)v60;
                    uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v32);
                    std::string v34 = &v33[16 * v29];
                    *(void *)AudioObjectPropertyAddress buf = v33;
                    *(void *)&uint8_t buf[8] = v34;
                    uint64_t v66 = &v33[16 * v35];
                    long long v36 = *(_OWORD *)(i + 5);
                    *(_OWORD *)std::string v34 = v36;
                    if (*((void *)&v36 + 1)) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 1uLL, memory_order_relaxed);
                    }
                    *(void *)&buf[16] = v34 + 16;
                    std::vector<std::shared_ptr<AMCP::Graph::Timebase>>::__swap_out_circular_buffer((uint64_t *)&v59, buf);
                    mach_port_t v28 = v59.__imp_.__imp_;
                    std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)buf);
                  }
                  else
                  {
                    *(void *)v59.__imp_.__imp_ = i[5];
                    uint64_t v27 = i[6];
                    *((void *)imp + 1) = v27;
                    if (v27) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
                    }
                    mach_port_t v28 = imp + 16;
                  }
                  v59.__imp_.__imp_ = v28;
                }
              }
            }
            if (SHIBYTE(v55) < 0) {
              operator delete(__p);
            }
            std::vector<std::shared_ptr<AMCP::Graph::Timebase>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<AMCP::Graph::Timebase>*>,std::__wrap_iter<std::shared_ptr<AMCP::Graph::Timebase>*>>(v43, v43[1], &v59.~runtime_error, (void *)v59.__imp_.__imp_, (v59.__imp_.__imp_ - (const char *)v59.__vftable) >> 4);
            *(void *)AudioObjectPropertyAddress buf = &v59;
            std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          }
          std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v57);
        }
        int v37 = *(void **)(v11 + 8);
        if (v37)
        {
          do
          {
            uint64_t v38 = (void **)v37;
            int v37 = (void *)*v37;
          }
          while (v37);
        }
        else
        {
          do
          {
            uint64_t v38 = *(void ***)(v11 + 16);
            BOOL v23 = *v38 == (void *)v11;
            uint64_t v11 = (uint64_t)v38;
          }
          while (!v23);
        }
        uint64_t v11 = (uint64_t)v38;
      }
      while (v38 != v51);
    }
  }
  if (*((void *)&v49 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v49 + 1));
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v51[0]);
}

void sub_1BAC30B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,void *a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,std::runtime_error a41,uint64_t a42)
{
  __int16 v44 = *(std::__shared_weak_count **)(v42 - 200);
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  a42 = a10;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a42);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a23);
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::Graph_Manager::pause_iocontexts_for_timebases(void **a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  AMCP::Graph::Graph::get_nodes(&v51, a1[25]);
  uint64_t v7 = v51;
  uint64_t v6 = v52;
  if (v51 != v52)
  {
    unsigned int v8 = a3 + 1;
    do
    {
      ((void (*)(unsigned char *__return_ptr, void **))(*a1)[2])(buf, a1);
      char v9 = (std::__shared_mutex_base *)(*(uint64_t (**)(void))(**(void **)buf + 16))(*(void *)buf);
      uint64_t v10 = *(void *)(*(void *)v7 + 176);
      if (v10) {
        unsigned int v11 = *(_DWORD *)(v10 + 8);
      }
      else {
        unsigned int v11 = 0;
      }
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v49, v9, v11);
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      unsigned int v12 = v49;
      if (!v49) {
        goto LABEL_51;
      }
      strcpy(buf, "btuibolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      if (!AMCP::Core::Core::call_operation_function<BOOL,std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&>(v49, (unsigned int *)buf, a2))goto LABEL_51; {
      strcpy(buf, "diunbolg");
      }
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      AMCP::Core::Core::call_operation_function<applesauce::CF::StringRef>((AMCP::Log::Scope_Registry *)&cf, (int8x8_t *)v12, (unsigned int *)buf);
      strcpy(buf, "rsoibolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      int v13 = AMCP::Core::Core::call_operation_function<BOOL>(v12, (unsigned int *)buf);
      uint64_t v14 = *(void *)(*(void *)v7 + 176);
      if (v14) {
        unsigned int v15 = *(_DWORD *)(v14 + 8);
      }
      else {
        unsigned int v15 = 0;
      }
      BOOL v16 = *v8;
      uint64_t v17 = a3 + 1;
      uint64_t v18 = a3 + 1;
      if (*v8)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v18 = (uint64_t **)v16;
            unsigned int v19 = *((_DWORD *)v16 + 7);
            if (v15 >= v19) {
              break;
            }
            BOOL v16 = *v18;
            uint64_t v17 = v18;
            if (!*v18) {
              goto LABEL_20;
            }
          }
          if (v19 >= v15) {
            goto LABEL_49;
          }
          BOOL v16 = v18[1];
          if (!v16)
          {
            uint64_t v17 = v18 + 1;
            break;
          }
        }
      }
LABEL_20:
      uint64_t v20 = (uint64_t *)operator new(0x20uLL);
      *((_DWORD *)v20 + 7) = v15;
      std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(a3, (uint64_t)v18, v17, v20);
      strcpy(buf, "suapbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      AMCP::Core::Core::call_operation_function<void,AMCP::Pause_Behavior>(v49, (unsigned int *)buf, v13 ^ 1);
      AMCP::Log::Scope_Registry::get(v21);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v46, "com.apple.coreaudio", "AMCP");
      int v23 = *(_DWORD *)(v46 + 16);
      switch(v23)
      {
        case 1:
          AMCP::Log::Scope_Registry::get(v22);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          long long v36 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_47;
          }
          int v37 = pthread_self();
          mach_port_t v38 = pthread_mach_thread_np(v37);
          if (!cf)
          {
            exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          mach_port_t v39 = v38;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
          uint64_t v40 = __p;
          if (v45 < 0) {
            uint64_t v40 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v39;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "Graph_Manager.cpp";
          __int16 v54 = 1024;
          int v55 = 689;
          __int16 v56 = 2080;
          std::string v57 = v40;
          int64_t v29 = v36;
          os_log_type_t v30 = OS_LOG_TYPE_DEFAULT;
          break;
        case 2:
          AMCP::Log::Scope_Registry::get(v22);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          int64_t v31 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_47;
          }
          unint64_t v32 = pthread_self();
          mach_port_t v33 = pthread_mach_thread_np(v32);
          if (!cf)
          {
            mach_port_t v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v41, "Could not construct");
            __cxa_throw(v41, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          mach_port_t v34 = v33;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
          uint64_t v35 = __p;
          if (v45 < 0) {
            uint64_t v35 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v34;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "Graph_Manager.cpp";
          __int16 v54 = 1024;
          int v55 = 689;
          __int16 v56 = 2080;
          std::string v57 = v35;
          _os_log_debug_impl(&dword_1BAA78000, v31, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Paused IOContext %s", buf, 0x22u);
          goto LABEL_45;
        case 3:
          AMCP::Log::Scope_Registry::get(v22);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v24 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_INFO)) {
            goto LABEL_47;
          }
          int v25 = pthread_self();
          mach_port_t v26 = pthread_mach_thread_np(v25);
          if (!cf)
          {
            uint64_t v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v42, "Could not construct");
            __cxa_throw(v42, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          mach_port_t v27 = v26;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
          mach_port_t v28 = __p;
          if (v45 < 0) {
            mach_port_t v28 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v27;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "Graph_Manager.cpp";
          __int16 v54 = 1024;
          int v55 = 689;
          __int16 v56 = 2080;
          std::string v57 = v28;
          int64_t v29 = v24;
          os_log_type_t v30 = OS_LOG_TYPE_INFO;
          break;
        default:
          goto LABEL_47;
      }
      _os_log_impl(&dword_1BAA78000, v29, v30, "%6u %32s:%-5d Paused IOContext %s", buf, 0x22u);
LABEL_45:
      if (v45 < 0) {
        operator delete(__p[0]);
      }
LABEL_47:
      if (v47) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
      }
LABEL_49:
      if (cf) {
        CFRelease(cf);
      }
LABEL_51:
      if (v50) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      }
      v7 += 16;
    }
    while (v7 != v6);
  }
  *(void *)AudioObjectPropertyAddress buf = &v51;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1BAC3125C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, const void *a17, uint64_t a18, std::__shared_weak_count *a19, char a20,uint64_t a21,uint64_t a22,void **a23)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  applesauce::CF::StringRef::~StringRef(&a17);
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  a23 = (void **)&a20;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<AMCP::Graph::Timebase>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<AMCP::Graph::Timebase>*>,std::__wrap_iter<std::shared_ptr<AMCP::Graph::Timebase>*>>(uint64_t *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v6 = a3;
  uint64_t v8 = *a1;
  uint64_t v9 = a2 - *a1;
  uint64_t v10 = v9 >> 4;
  unsigned int v11 = (char *)(*a1 + (v9 & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = (uint64_t)(a1 + 2);
  uint64_t v12 = a1[2];
  uint64_t v14 = (char *)a1[1];
  if (a5 > (v12 - (uint64_t)v14) >> 4)
  {
    unint64_t v15 = a5 + ((uint64_t)&v14[-v8] >> 4);
    if (v15 >> 60) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = v12 - v8;
    if (v16 >> 3 > v15) {
      unint64_t v15 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    uint64_t v47 = v13;
    if (v17) {
      unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v24 = v17 + 16 * v10;
    __int16 v44 = (uint64_t *)v17;
    *(void *)&long long v45 = v24;
    unint64_t v46 = v17 + 16 * v18;
    int v25 = (_OWORD *)(v24 + 16 * a5);
    mach_port_t v26 = (void *)v24;
    do
    {
      *mach_port_t v26 = *v6;
      uint64_t v27 = v6[1];
      v26[1] = v27;
      if (v27) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
      }
      v26 += 2;
      v6 += 2;
    }
    while (v26 != (void *)v25);
    uint64_t v28 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<AMCP::IOAudio2::Stream>>,std::reverse_iterator<std::shared_ptr<AMCP::IOAudio2::Stream>*>,std::reverse_iterator<std::shared_ptr<AMCP::IOAudio2::Stream>*>,std::reverse_iterator<std::shared_ptr<AMCP::IOAudio2::Stream>*>>(v13, (uint64_t)v11, v11, *a1, (void *)*a1, v24, v24);
    int64_t v29 = (char *)a1[1];
    uint64_t v50 = v25;
    uint64_t v51 = (char *)v25;
    v48[0] = v13;
    v48[1] = &v50;
    v48[2] = &v51;
    if (v11 != v29)
    {
      do
      {
        *v25++ = *(_OWORD *)v11;
        *(void *)unsigned int v11 = 0;
        *((void *)v11 + 1) = 0;
        v11 += 16;
      }
      while (v11 != v29);
      uint64_t v51 = (char *)v25;
    }
    char v49 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>,std::shared_ptr<AMCP::Graph::Timebase>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v48);
    long long v30 = *(_OWORD *)a1;
    *a1 = v28;
    a1[1] = (uint64_t)v25;
    long long v45 = v30;
    uint64_t v31 = a1[2];
    a1[2] = v46;
    unint64_t v46 = v31;
    __int16 v44 = (uint64_t *)v30;
    std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v44);
    return;
  }
  uint64_t v19 = (v14 - v11) >> 4;
  if (v19 >= a5)
  {
    uint64_t v20 = &a3[2 * a5];
    int v21 = (char *)a1[1];
LABEL_30:
    unint64_t v32 = &v11[16 * a5];
    mach_port_t v33 = &v21[-16 * a5];
    mach_port_t v34 = v21;
    if (v33 < v14)
    {
      mach_port_t v34 = v21;
      do
      {
        *(_OWORD *)mach_port_t v34 = *(_OWORD *)v33;
        v34 += 16;
        *(void *)mach_port_t v33 = 0;
        *((void *)v33 + 1) = 0;
        v33 += 16;
      }
      while (v33 < v14);
    }
    a1[1] = (uint64_t)v34;
    if (v21 != v32)
    {
      uint64_t v35 = (std::__shared_weak_count **)(v21 - 8);
      uint64_t v36 = 16 * ((v21 - v32) >> 4);
      uint64_t v37 = v8 + 16 * v10 - 16;
      do
      {
        mach_port_t v38 = (void *)(v37 + v36);
        long long v39 = *(_OWORD *)(v37 + v36);
        *mach_port_t v38 = 0;
        v38[1] = 0;
        uint64_t v40 = *v35;
        *(_OWORD *)(v35 - 1) = v39;
        if (v40) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        }
        v35 -= 2;
        v36 -= 16;
      }
      while (v36);
    }
    for (; v6 != v20; v11 += 16)
    {
      uint64_t v42 = *v6;
      uint64_t v41 = v6[1];
      if (v41) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
      }
      BOOL v43 = (std::__shared_weak_count *)*((void *)v11 + 1);
      *(void *)unsigned int v11 = v42;
      *((void *)v11 + 1) = v41;
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
      }
      v6 += 2;
    }
    return;
  }
  v48[0] = a1[1];
  uint64_t v20 = &a3[2 * v19];
  uint64_t v51 = v14;
  __int16 v44 = a1 + 2;
  *(void *)&long long v45 = &v51;
  *((void *)&v45 + 1) = v48;
  if (v20 == a4)
  {
    int v21 = v14;
  }
  else
  {
    int v21 = v14;
    int v22 = &a3[2 * v19];
    do
    {
      *(void *)int v21 = *v22;
      uint64_t v23 = v22[1];
      *((void *)v21 + 1) = v23;
      if (v23) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
      }
      v21 += 16;
      v22 += 2;
    }
    while (v22 != a4);
    v48[0] = v21;
  }
  LOBYTE(v46) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>,std::shared_ptr<AMCP::Graph::Timebase>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v44);
  a1[1] = (uint64_t)v21;
  if (v14 - v11 >= 1) {
    goto LABEL_30;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>,std::shared_ptr<AMCP::Graph::Timebase>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      __n128 v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      v3 -= 16;
    }
  }
  return a1;
}

uint64_t AMCP::Core::Core::call_operation_function<BOOL,std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&>(AMCP::Address *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v23 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = pthread_self();
      mach_port_t v25 = pthread_mach_thread_np(v24);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v25;
      *(_WORD *)BOOL v43 = 2080;
      *(void *)&v43[2] = "Core.h";
      __int16 v44 = 1024;
      int v45 = 198;
      __int16 v46 = 2080;
      *(void *)uint64_t v47 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v26, (int8x8_t *)a1, a2);
  uint64_t v7 = v26;
  if (!v26)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v17 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = pthread_self();
      mach_port_t v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v19;
      *(_WORD *)BOOL v43 = 2080;
      *(void *)&v43[2] = "Core.h";
      __int16 v44 = 1024;
      int v45 = 202;
      _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    int v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v36 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(void *)&v47[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = BOOL, Argument_Types = <const std::vector<std::shared_ptr<AMCP::Graph::Timebase>> &>]";
    uint64_t v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    int v49 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v28);
    long long v31 = v28;
    uint64_t v32 = v29;
    long long v28 = 0uLL;
    uint64_t v29 = 0;
    long long v30 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v8 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>>();
  uint64_t v9 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v8);
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v20 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      int v21 = pthread_self();
      mach_port_t v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v22;
      *(_WORD *)BOOL v43 = 2080;
      *(void *)&v43[2] = "Operation.h";
      __int16 v44 = 1024;
      int v45 = 154;
      _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    int v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v36 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(void *)&v47[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, "
                         "Argument_Types = <const std::vector<std::shared_ptr<AMCP::Graph::Timebase>> &>]";
    uint64_t v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v49 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v28);
    long long v31 = v28;
    uint64_t v32 = v29;
    long long v28 = 0uLL;
    uint64_t v29 = 0;
    long long v30 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v10 = v9;
  if (!*((void *)v9 + 7)
    || (*(void *)AudioObjectPropertyAddress buf = AMCP::Implementation::get_type_marker<std::function<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>>(),
        (uint64_t v9 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v10 + 7))(4, (uint64_t)v10 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v14 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      unint64_t v15 = pthread_self();
      mach_port_t v16 = pthread_mach_thread_np(v15);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v16;
      *(_WORD *)BOOL v43 = 2080;
      *(void *)&v43[2] = "Operation.h";
      __int16 v44 = 1024;
      int v45 = 161;
      _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    int v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v36 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(void *)&v47[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, "
                         "Argument_Types = <const std::vector<std::shared_ptr<AMCP::Graph::Timebase>> &>]";
    uint64_t v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v49 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v28);
    long long v31 = v28;
    uint64_t v32 = v29;
    long long v28 = 0uLL;
    uint64_t v29 = 0;
    long long v30 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v11 = *((void *)v9 + 3);
  if (!v11) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 48))(v11, a3);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  return v12;
}

void sub_1BAC31DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Device_Node_State>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 184;
  do
  {
    uint64_t v4 = *(void **)(v3 + v2);
    if (v4) {
      operator delete(v4);
    }
    v2 -= 24;
  }
  while (v2 != -48);
  __n128 v5 = *(std::__shared_weak_count **)(a1 + 144);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 128);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (void *)(a1 + 32);
  unint64_t v8 = (void *)(a1 + 112);
  do
  {
    uint64_t v9 = (void *)*(v8 - 3);
    if (v9)
    {
      do
      {
        uint64_t v10 = (void *)*v9;
        std::__destroy_at[abi:ne180100]<std::pair<AMCP::Terminal_Identifier const,AMCP::IO_Core::Stream_Connection>,0>((uint64_t)(v9 + 2));
        operator delete(v9);
        uint64_t v9 = v10;
      }
      while (v10);
    }
    uint64_t v12 = (void *)*(v8 - 5);
    v8 -= 5;
    uint64_t v11 = v12;
    *unint64_t v8 = 0;
    if (v12) {
      operator delete(v11);
    }
  }
  while (v8 != v7);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Device_Node_State>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1486780;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Device_Node_State>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1486780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<AMCP::Core::Engine>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<AMCP::Core::Engine>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<AMCP::Core::Engine>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<AMCP::Core::Engine>>>>::erase(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  unint64_t v3 = a2[1];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  __n128 v5 = *(void **)(*a1 + 8 * v3);
  do
  {
    uint64_t v6 = v5;
    __n128 v5 = (void *)*v5;
  }
  while (v5 != a2);
  if (v6 == a1 + 2) {
    goto LABEL_18;
  }
  unint64_t v7 = v6[1];
  if (v4.u32[0] > 1uLL)
  {
    if (v7 >= *(void *)&v2) {
      v7 %= *(void *)&v2;
    }
  }
  else
  {
    v7 &= *(void *)&v2 - 1;
  }
  if (v7 != v3)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v8 = *(void *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v8 >= *(void *)&v2) {
        v8 %= *(void *)&v2;
      }
    }
    else
    {
      v8 &= *(void *)&v2 - 1;
    }
    if (v8 != v3) {
LABEL_19:
    }
      *(void *)(*a1 + 8 * v3) = 0;
  }
  uint64_t v9 = *a2;
  if (*a2)
  {
    unint64_t v10 = *(void *)(v9 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v2) {
        v10 %= *(void *)&v2;
      }
    }
    else
    {
      v10 &= *(void *)&v2 - 1;
    }
    if (v10 != v3)
    {
      *(void *)(*a1 + 8 * v10) = v6;
      uint64_t v9 = *a2;
    }
  }
  void *v6 = v9;
  *a2 = 0;
  --a1[3];
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>::operator()[abi:ne180100](1, a2);
}

void AMCP::IO_Core::Graph_Manager::update_graph_after_config_change(void *a1, uint64_t a2, void *a3, char a4, __int32 **a5)
{
  uint64_t v156 = *MEMORY[0x1E4F143B8];
  memset(v137, 0, sizeof(v137));
  (*(void (**)(uint8_t *__return_ptr))(*a1 + 16))(buf);
  uint64_t v8 = a1[38];
  unint64_t v7 = (std::__shared_weak_count *)a1[39];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v136[0] = *(void *)buf;
  v136[1] = *(void *)&buf[8];
  if (*(void *)&buf[8]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
  }
  v136[2] = v8;
  v136[3] = (uint64_t)v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  (*(void (**)(void **__return_ptr, void *))(*a1 + 56))(&v134, a1);
  v133[0] = 0;
  v133[1] = 0;
  uint64_t v132 = v133;
  uint64_t v9 = (void *)*a3;
  uint64_t v116 = a3 + 1;
  if ((void *)*a3 == a3 + 1)
  {
LABEL_237:
    memset(buf, 0, sizeof(buf));
    AMCP::IO_Core::Graph_Manager::modify_graph_internal((AMCP::IO_Core::Graph_Manager *)&v127, (const AMCP::Graph_Description *)a1, (const AMCP::Modify_Graph_Destroy_List *)v137);
  }
  unint64_t v10 = a1 + 50;
  float v121 = a1 + 45;
  uint64_t v117 = a1 + 47;
  int v118 = a1 + 42;
LABEL_11:
  uint64_t v12 = (__int32 *)v134;
  uint64_t v11 = v135;
  for (uint64_t i = v135; ; v11 = i)
  {
    if (v12 == v11)
    {
      unint64_t v96 = (void *)v9[1];
      if (v96)
      {
        do
        {
          uint64_t v97 = v96;
          unint64_t v96 = (void *)*v96;
        }
        while (v96);
      }
      else
      {
        do
        {
          uint64_t v97 = (void *)v9[2];
          BOOL v98 = *v97 == (void)v9;
          uint64_t v9 = v97;
        }
        while (!v98);
      }
      uint64_t v9 = v97;
      if (v97 == v116) {
        goto LABEL_237;
      }
      goto LABEL_11;
    }
    if (*v12 == *((_DWORD *)v9 + 7))
    {
      BOOL v13 = 1;
    }
    else
    {
      uint64_t v14 = a5[1];
      unint64_t v15 = wmemchr(*a5, *v12, v14 - *a5);
      if (v15) {
        mach_port_t v16 = v15;
      }
      else {
        mach_port_t v16 = v14;
      }
      BOOL v13 = v16 == a5[1];
    }
    (*(void (**)(uint8_t *__return_ptr, void *))(*a1 + 16))(buf, a1);
    unint64_t v17 = (std::__shared_mutex_base *)(*(uint64_t (**)(void))(**(void **)buf + 16))(*(void *)buf);
    AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v141, v17, *v12);
    uint64_t v18 = *(AMCP::Log::Scope_Registry **)&buf[8];
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    mach_port_t v19 = v141;
    if (!v141)
    {
      AMCP::Log::Scope_Registry::get(v18);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unint64_t v111 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
      {
        unint64_t v112 = pthread_self();
        mach_port_t v113 = pthread_mach_thread_np(v112);
        *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v113;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Graph_Manager.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = 447;
        *(_WORD *)&uint8_t buf[24] = 2080;
        *(void *)&buf[26] = "not (clock_core != nullptr)";
        _os_log_error_impl(&dword_1BAA78000, v111, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v145);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v153);
      std::logic_error::logic_error((std::logic_error *)&v127, &v153);
      v127.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error((std::logic_error *)&__p, (const std::logic_error *)&v127);
      uint64_t v150 = 0;
      uint64_t v151 = 0;
      int v152 = -1;
      __p.__vftable = (std::runtime_error_vtbl *)&unk_1F1489CC8;
      uint64_t v148 = &unk_1F1489CF0;
      uint64_t v149 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
      *(void *)&buf[32] = "void AMCP::IO_Core::Graph_Manager::update_graph_after_config_change(Object_ID, std::set<Obje"
                            "ct_ID>, Config_Change_Flag, const Previous_Devices &)";
      *(void *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Graph_Manager.cpp";
      int v155 = 447;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v143);
      unint64_t v124 = (char *)&unk_1F148AA90;
      long long v125 = v143;
      uint64_t v126 = v144;
      long long v143 = 0uLL;
      uint64_t v144 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    AMCP::Core::Core::get_simple_required_property<1969841184u>(&v131, v141);
    int simple_required = AMCP::Core::Core::get_simple_required_property<1668047219u>(v19);
    v146.__vftable = 0;
    v146.__imp_.__imp_ = 0;
    if (v13)
    {
      __p.__vftable = (std::runtime_error_vtbl *)0x676C6F62656E676ELL;
      LODWORD(__p.__imp_.__imp_) = 0;
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)buf, (int8x8_t *)v19, (unsigned int *)&__p);
      unint64_t v21 = *(void *)buf;
      if (*(void *)buf)
      {
        unint64_t v22 = AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>();
        BOOL v23 = std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>((void *)v21, v22) != 0;
      }
      else
      {
        BOOL v23 = 0;
      }
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      std::logic_error v123 = (std::logic_error)0;
      if (v23)
      {
        unint64_t v24 = *v12;
        mach_port_t v25 = v142;
        if (v142) {
          atomic_fetch_add_explicit(&v142->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v119 = v25;
        uint64_t v138 = 0x676C6F62656E676ELL;
        int v139 = 0;
        operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v145, (int8x8_t *)v19, (unsigned int *)&v138);
        uint64_t v27 = (void *)v145.__r_.__value_.__r.__words[0];
        if (!v145.__r_.__value_.__r.__words[0])
        {
          AMCP::Log::Scope_Registry::get(operation);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          float v103 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
          {
            float v104 = pthread_self();
            mach_port_t v105 = pthread_mach_thread_np(v104);
            *(_DWORD *)AudioObjectPropertyAddress buf = 67109634;
            *(_DWORD *)&uint8_t buf[4] = v105;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "Core.h";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 202;
            _os_log_error_impl(&dword_1BAA78000, v103, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v140);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v153);
          std::runtime_error::runtime_error(&v127, &v153);
          std::runtime_error::runtime_error(&__p, &v127);
          uint64_t v150 = 0;
          uint64_t v151 = 0;
          int v152 = -1;
          __p.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
          uint64_t v148 = &unk_1F148A9D0;
          uint64_t v149 = 0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
          *(void *)&buf[32] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types..."
                                ") const [Return_Type = std::shared_ptr<AMCP::Core::Engine>, Argument_Types = <>]";
          *(void *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
          int v155 = 202;
          std::vector<void *>::vector(&v143);
          int v106 = backtrace((void **)v143, (*((void *)&v143 + 1) - (void)v143) >> 3);
          std::vector<void *>::resize((char **)&v143, v106);
          unint64_t v124 = (char *)&unk_1F148AA90;
          long long v125 = v143;
          uint64_t v126 = v144;
          long long v143 = 0uLL;
          uint64_t v144 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
        }
        unint64_t v28 = AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>();
        uint64_t v29 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v27, v28);
        if (!v29)
        {
          AMCP::Log::Scope_Registry::get(0);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          unint64_t v107 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
          {
            size_t v108 = pthread_self();
            mach_port_t v109 = pthread_mach_thread_np(v108);
            *(_DWORD *)AudioObjectPropertyAddress buf = 67109634;
            *(_DWORD *)&uint8_t buf[4] = v109;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "Operation.h";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 154;
            _os_log_error_impl(&dword_1BAA78000, v107, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v140);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v153);
          std::runtime_error::runtime_error(&v127, &v153);
          std::runtime_error::runtime_error(&__p, &v127);
          uint64_t v150 = 0;
          uint64_t v151 = 0;
          int v152 = -1;
          __p.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
          uint64_t v148 = &unk_1F148A9D0;
          uint64_t v149 = 0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
          *(void *)&buf[32] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type ="
                                " std::shared_ptr<AMCP::Core::Engine>, Argument_Types = <>]";
          *(void *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
          int v155 = 154;
          std::vector<void *>::vector(&v143);
          int v110 = backtrace((void **)v143, (*((void *)&v143 + 1) - (void)v143) >> 3);
          std::vector<void *>::resize((char **)&v143, v110);
          unint64_t v124 = (char *)&unk_1F148AA90;
          long long v125 = v143;
          uint64_t v126 = v144;
          long long v143 = 0uLL;
          uint64_t v144 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
        }
        long long v30 = v29;
        if (!*((void *)v29 + 7)
          || (*(void *)AudioObjectPropertyAddress buf = AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>(),
              (uint64_t v29 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v30
                                                   + 7))(4, (uint64_t)v30 + 24, 0, buf)) == 0))
        {
          AMCP::Log::Scope_Registry::get(v29);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          unint64_t v99 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
          {
            v100 = pthread_self();
            mach_port_t v101 = pthread_mach_thread_np(v100);
            *(_DWORD *)AudioObjectPropertyAddress buf = 67109634;
            *(_DWORD *)&uint8_t buf[4] = v101;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "Operation.h";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 161;
            _os_log_error_impl(&dword_1BAA78000, v99, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v140);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v153);
          std::runtime_error::runtime_error(&v127, &v153);
          std::runtime_error::runtime_error(&__p, &v127);
          uint64_t v150 = 0;
          uint64_t v151 = 0;
          int v152 = -1;
          __p.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
          uint64_t v148 = &unk_1F148A9D0;
          uint64_t v149 = 0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
          *(void *)&buf[32] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type ="
                                " std::shared_ptr<AMCP::Core::Engine>, Argument_Types = <>]";
          *(void *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
          int v155 = 161;
          std::vector<void *>::vector(&v143);
          int v102 = backtrace((void **)v143, (*((void *)&v143 + 1) - (void)v143) >> 3);
          std::vector<void *>::resize((char **)&v143, v102);
          unint64_t v124 = (char *)&unk_1F148AA90;
          long long v125 = v143;
          uint64_t v126 = v144;
          long long v143 = 0uLL;
          uint64_t v144 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
        }
        uint64_t v31 = *((void *)v29 + 3);
        if (!v31) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(std::logic_error *__return_ptr))(*(void *)v31 + 48))(&v130);
        if (v145.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v145.__r_.__value_.__l.__size_);
        }
        unint64_t v32 = a1[46];
        if (v32)
        {
          uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
          v33.i16[0] = vaddlv_u8(v33);
          if (v33.u32[0] > 1uLL)
          {
            unint64_t v21 = v24;
            if (v32 <= v24) {
              unint64_t v21 = v24 % v32;
            }
          }
          else
          {
            unint64_t v21 = (v32 - 1) & v24;
          }
          std::runtime_error v34 = *(void ***)(*v121 + 8 * v21);
          if (v34)
          {
            std::runtime_error v35 = (char *)*v34;
            if (*v34)
            {
              do
              {
                unint64_t v36 = *((void *)v35 + 1);
                if (v36 == v24)
                {
                  if (*((_DWORD *)v35 + 4) == v24) {
                    goto LABEL_77;
                  }
                }
                else
                {
                  if (v33.u32[0] > 1uLL)
                  {
                    if (v36 >= v32) {
                      v36 %= v32;
                    }
                  }
                  else
                  {
                    v36 &= v32 - 1;
                  }
                  if (v36 != v21) {
                    break;
                  }
                }
                std::runtime_error v35 = *(char **)v35;
              }
              while (v35);
            }
          }
        }
        std::runtime_error v35 = (char *)operator new(0x28uLL);
        *(void *)std::runtime_error v35 = 0;
        *((void *)v35 + 1) = v24;
        *((_DWORD *)v35 + 4) = v24;
        *((void *)v35 + 3) = 0;
        *((void *)v35 + 4) = 0;
        float v37 = (float)(unint64_t)(a1[48] + 1);
        float v38 = *((float *)a1 + 98);
        if (!v32 || (float)(v38 * (float)v32) < v37)
        {
          BOOL v39 = (v32 & (v32 - 1)) != 0;
          if (v32 < 3) {
            BOOL v39 = 1;
          }
          unint64_t v40 = v39 | (2 * v32);
          unint64_t v41 = vcvtps_u32_f32(v37 / v38);
          if (v40 <= v41) {
            size_t v42 = v41;
          }
          else {
            size_t v42 = v40;
          }
          std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)v121, v42);
          unint64_t v32 = a1[46];
          if ((v32 & (v32 - 1)) != 0)
          {
            if (v32 <= v24) {
              unint64_t v21 = v24 % v32;
            }
            else {
              unint64_t v21 = v24;
            }
          }
          else
          {
            unint64_t v21 = (v32 - 1) & v24;
          }
        }
        uint64_t v43 = *v121;
        __int16 v44 = *(void **)(*v121 + 8 * v21);
        if (v44)
        {
          *(void *)std::runtime_error v35 = *v44;
          goto LABEL_75;
        }
        *(void *)std::runtime_error v35 = *v117;
        *uint64_t v117 = v35;
        *(void *)(v43 + 8 * v21) = v117;
        if (*(void *)v35)
        {
          unint64_t v45 = *(void *)(*(void *)v35 + 8);
          if ((v32 & (v32 - 1)) != 0)
          {
            if (v45 >= v32) {
              v45 %= v32;
            }
          }
          else
          {
            v45 &= v32 - 1;
          }
          __int16 v44 = (void *)(*v121 + 8 * v45);
LABEL_75:
          *__int16 v44 = v35;
        }
        ++a1[48];
LABEL_77:
        std::logic_error v46 = v130;
        if (v130.__imp_.__imp_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v130.__imp_.__imp_ + 1, 1uLL, memory_order_relaxed);
        }
        uint64_t v47 = (std::__shared_weak_count *)*((void *)v35 + 4);
        *(std::logic_error *)(v35 + 24) = v46;
        if (v47) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v47);
        }
        std::logic_error v48 = v130;
        std::logic_error v130 = (std::logic_error)0;
        std::logic_error v123 = v48;
        std::logic_error v146 = v48;
        if (v119) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v119);
        }
      }
    }
    else
    {
      std::logic_error v123 = (std::logic_error)0;
    }
    CFStringRef v49 = v131;
    if (!v131)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t v50 = *v10;
    applesauce::CF::convert_to<std::string,0>((uint64_t)buf, v131);
    AMCP::IO_Core::Device_Timebase_Factory::demand_timebase_for_device(&v128, (void *)v50, (uint64_t *)&v146, buf);
    if (v129) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v129);
    }
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    imp = (std::__shared_weak_count *)v123.__imp_.__imp_;
    if (simple_required != 1633969526) {
      goto LABEL_215;
    }
    if (!v13) {
      goto LABEL_208;
    }
    unint64_t v52 = *v12;
    if (v123.__imp_.__imp_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v123.__imp_.__imp_ + 1, 1uLL, memory_order_relaxed);
    }
    int8x8_t v53 = (int8x8_t)a1[41];
    if (!*(void *)&v53) {
      goto LABEL_108;
    }
    uint8x8_t v54 = (uint8x8_t)vcnt_s8(v53);
    v54.i16[0] = vaddlv_u8(v54);
    if (v54.u32[0] > 1uLL)
    {
      unint64_t v55 = v52;
      if (*(void *)&v53 <= v52) {
        unint64_t v55 = v52 % *(void *)&v53;
      }
    }
    else
    {
      unint64_t v55 = (v53.i32[0] - 1) & v52;
    }
    __int16 v56 = *(uint64_t ***)(a1[40] + 8 * v55);
    if (!v56) {
      goto LABEL_108;
    }
    std::string v57 = *v56;
    if (!v57) {
      goto LABEL_108;
    }
    while (1)
    {
      unint64_t v58 = v57[1];
      if (v58 == v52) {
        break;
      }
      if (v54.u32[0] > 1uLL)
      {
        if (v58 >= *(void *)&v53) {
          v58 %= *(void *)&v53;
        }
      }
      else
      {
        v58 &= *(void *)&v53 - 1;
      }
      if (v58 != v55) {
        goto LABEL_108;
      }
LABEL_107:
      std::string v57 = (uint64_t *)*v57;
      if (!v57) {
        goto LABEL_108;
      }
    }
    if (*((_DWORD *)v57 + 4) != v52) {
      goto LABEL_107;
    }
    if ((a4 & 1) == 0)
    {
      uint64_t v60 = (char *)v57[4];
      unint64_t v124 = (char *)v57[3];
      *(void *)&long long v125 = v60;
      if (v60) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v60 + 1, 1uLL, memory_order_relaxed);
      }
      goto LABEL_121;
    }
LABEL_108:
    std::runtime_error v59 = (char *)operator new(0xD0uLL);
    uint64_t v60 = v59;
    *((void *)v59 + 1) = 0;
    *((void *)v59 + 2) = 0;
    *(void *)std::runtime_error v59 = &unk_1F1486780;
    if (v123.__imp_.__imp_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v123.__imp_.__imp_ + 1, 1uLL, memory_order_relaxed);
    }
    *((void *)v59 + 7) = 0;
    *(_OWORD *)(v59 + 24) = 0u;
    *(_OWORD *)(v59 + 40) = 0u;
    *((_DWORD *)v59 + 16) = 1065353216;
    *(_OWORD *)(v59 + 72) = 0u;
    *(_OWORD *)(v59 + 88) = 0u;
    *((_DWORD *)v59 + 26) = 1065353216;
    *((_DWORD *)v59 + 28) = v52;
    *(std::logic_error *)(v59 + 120) = v123;
    if (v123.__imp_.__imp_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v123.__imp_.__imp_ + 1, 1uLL, memory_order_relaxed);
    }
    *((_OWORD *)v59 + 11) = 0u;
    *((_OWORD *)v59 + 12) = 0u;
    *((_OWORD *)v59 + 10) = 0u;
    *((void *)v59 + 17) = 0;
    *((void *)v59 + 18) = 0;
    unint64_t v50 = (unint64_t)v123.__vftable;
    *((_DWORD *)v59 + 38) = 0;
    if (v123.__vftable)
    {
      (*((void (**)(uint8_t *__return_ptr, std::logic_error_vtbl *))v123.~logic_error + 19))(buf, v123.__vftable);
      int v61 = (void *)*((void *)v60 + 23);
      if (v61) {
        operator delete(v61);
      }
      *((void *)v60 + 23) = *(void *)buf;
      *((_OWORD *)v60 + 12) = *(_OWORD *)&buf[8];
      (*((void (**)(uint8_t *__return_ptr, std::logic_error_vtbl *))v123.~logic_error + 21))(buf, v123.__vftable);
      char v62 = (void *)*((void *)v60 + 20);
      if (v62) {
        operator delete(v62);
      }
      *((void *)v60 + 20) = *(void *)buf;
      *(_OWORD *)(v60 + 168) = *(_OWORD *)&buf[8];
    }
    if (v123.__imp_.__imp_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v123.__imp_.__imp_);
    }
    unint64_t v124 = v60 + 24;
    *(void *)&long long v125 = v60;
LABEL_121:
    if (v123.__imp_.__imp_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v123.__imp_.__imp_);
    }
    if (v123.__vftable)
    {
      AMCP::IO_Core::Device_Node_Factory::create_node_descriptions_from_device((uint64_t)buf, v136, (void **)a1 + 50, *v12, (std::string::size_type *)&v124);
      unint64_t v63 = *v12;
      unint64_t v64 = a1[41];
      if (v64)
      {
        uint8x8_t v65 = (uint8x8_t)vcnt_s8((int8x8_t)v64);
        v65.i16[0] = vaddlv_u8(v65);
        if (v65.u32[0] > 1uLL)
        {
          unint64_t v50 = *v12;
          if (v64 <= v63) {
            unint64_t v50 = v63 % v64;
          }
        }
        else
        {
          unint64_t v50 = (v64 - 1) & v63;
        }
        uint64_t v66 = *(void ***)(a1[40] + 8 * v50);
        if (v66)
        {
          for (uint64_t j = *v66; j; uint64_t j = *(void **)j)
          {
            unint64_t v68 = *((void *)j + 1);
            if (v68 == v63)
            {
              if (*((_DWORD *)j + 4) == v63) {
                goto LABEL_199;
              }
            }
            else
            {
              if (v65.u32[0] > 1uLL)
              {
                if (v68 >= v64) {
                  v68 %= v64;
                }
              }
              else
              {
                v68 &= v64 - 1;
              }
              if (v68 != v50) {
                break;
              }
            }
          }
        }
      }
      uint64_t j = operator new(0x28uLL);
      *(void *)uint64_t j = 0;
      *((void *)j + 1) = v63;
      *((_DWORD *)j + 4) = *v12;
      *((void *)j + 3) = 0;
      *((void *)j + 4) = 0;
      float v69 = (float)(unint64_t)(a1[43] + 1);
      float v70 = *((float *)a1 + 88);
      if (v64 && (float)(v70 * (float)v64) >= v69)
      {
        unint64_t v63 = v50;
        goto LABEL_189;
      }
      BOOL v71 = (v64 & (v64 - 1)) != 0;
      if (v64 < 3) {
        BOOL v71 = 1;
      }
      unint64_t v72 = v71 | (2 * v64);
      unint64_t v73 = vcvtps_u32_f32(v69 / v70);
      if (v72 <= v73) {
        int8x8_t prime = (int8x8_t)v73;
      }
      else {
        int8x8_t prime = (int8x8_t)v72;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        unint64_t v64 = a1[41];
      }
      if (*(void *)&prime <= v64)
      {
        if (*(void *)&prime < v64)
        {
          unint64_t v81 = vcvtps_u32_f32((float)(unint64_t)a1[43] / *((float *)a1 + 88));
          if (v64 < 3 || (uint8x8_t v82 = (uint8x8_t)vcnt_s8((int8x8_t)v64), v82.i16[0] = vaddlv_u8(v82), v82.u32[0] > 1uLL))
          {
            unint64_t v81 = std::__next_prime(v81);
          }
          else
          {
            uint64_t v83 = 1 << -(char)__clz(v81 - 1);
            if (v81 >= 2) {
              unint64_t v81 = v83;
            }
          }
          if (*(void *)&prime <= v81) {
            int8x8_t prime = (int8x8_t)v81;
          }
          if (*(void *)&prime >= v64)
          {
            unint64_t v64 = a1[41];
          }
          else
          {
            if (prime) {
              goto LABEL_153;
            }
            uint8x8_t v95 = (void *)a1[40];
            a1[40] = 0;
            if (v95) {
              operator delete(v95);
            }
            unint64_t v64 = 0;
            a1[41] = 0;
          }
        }
      }
      else
      {
LABEL_153:
        if (*(void *)&prime >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v75 = operator new(8 * *(void *)&prime);
        uint64_t v76 = (void *)a1[40];
        a1[40] = v75;
        if (v76) {
          operator delete(v76);
        }
        uint64_t v77 = 0;
        a1[41] = prime;
        do
          *(void *)(a1[40] + 8 * v77++) = 0;
        while (*(void *)&prime != v77);
        uint64_t v78 = (void *)*v118;
        if (*v118)
        {
          unint64_t v79 = v78[1];
          uint8x8_t v80 = (uint8x8_t)vcnt_s8(prime);
          v80.i16[0] = vaddlv_u8(v80);
          if (v80.u32[0] > 1uLL)
          {
            if (v79 >= *(void *)&prime) {
              v79 %= *(void *)&prime;
            }
          }
          else
          {
            v79 &= *(void *)&prime - 1;
          }
          *(void *)(a1[40] + 8 * v79) = v118;
          mach_port_t v84 = (void *)*v78;
          if (*v78)
          {
            do
            {
              unint64_t v85 = v84[1];
              if (v80.u32[0] > 1uLL)
              {
                if (v85 >= *(void *)&prime) {
                  v85 %= *(void *)&prime;
                }
              }
              else
              {
                v85 &= *(void *)&prime - 1;
              }
              if (v85 != v79)
              {
                uint64_t v86 = a1[40];
                if (!*(void *)(v86 + 8 * v85))
                {
                  *(void *)(v86 + 8 * v85) = v78;
                  goto LABEL_181;
                }
                *uint64_t v78 = *v84;
                void *v84 = **(void **)(a1[40] + 8 * v85);
                **(void **)(a1[40] + 8 * v85) = v84;
                mach_port_t v84 = v78;
              }
              unint64_t v85 = v79;
LABEL_181:
              uint64_t v78 = v84;
              mach_port_t v84 = (void *)*v84;
              unint64_t v79 = v85;
            }
            while (v84);
          }
        }
        unint64_t v64 = (unint64_t)prime;
      }
      if ((v64 & (v64 - 1)) != 0)
      {
        if (v64 <= v63) {
          v63 %= v64;
        }
      }
      else
      {
        unint64_t v63 = (v64 - 1) & v63;
      }
LABEL_189:
      uint64_t v87 = a1[40];
      mach_port_t v88 = *(void **)(v87 + 8 * v63);
      if (v88)
      {
        *(void *)uint64_t j = *v88;
        goto LABEL_197;
      }
      *(void *)uint64_t j = *v118;
      *int v118 = j;
      *(void *)(v87 + 8 * v63) = v118;
      if (*(void *)j)
      {
        unint64_t v89 = *(void *)(*(void *)j + 8);
        if ((v64 & (v64 - 1)) != 0)
        {
          if (v89 >= v64) {
            v89 %= v64;
          }
        }
        else
        {
          v89 &= v64 - 1;
        }
        mach_port_t v88 = (void *)(a1[40] + 8 * v89);
LABEL_197:
        void *v88 = j;
      }
      ++a1[43];
LABEL_199:
      uint64_t v91 = *(void *)&buf[24];
      uint64_t v90 = *(void *)&buf[32];
      if (*(void *)&buf[32]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[32] + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v92 = (std::__shared_weak_count *)*((void *)j + 4);
      *((void *)j + 3) = v91;
      *((void *)j + 4) = v90;
      if (v92) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v92);
      }
      __p.__vftable = 0;
      __p.__imp_.__imp_ = 0;
      uint64_t v148 = 0;
      std::vector<AMCP::Node_Description>::__init_with_size[abi:ne180100]<AMCP::Node_Description*,AMCP::Node_Description*>(&__p, *(uint64_t *)buf, *(uint64_t *)&buf[8], 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3));
      std::vector<AMCP::Node_Description>::__insert_with_size[abi:ne180100]<std::__wrap_iter<AMCP::Node_Description*>,std::__wrap_iter<AMCP::Node_Description*>>((uint64_t *)v137, *(uint64_t *)&v137[0], (const AMCP::Node_Description *)__p.__vftable, (uint64_t)__p.__imp_.__imp_, 0xEEEEEEEEEEEEEEEFLL * ((__p.__imp_.__imp_ - (const char *)__p.__vftable) >> 3));
      v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
      if (*(void *)&buf[32]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[32]);
      }
      __p.__vftable = (std::runtime_error_vtbl *)buf;
      std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    }
    if (v60) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v60);
    }
LABEL_208:
    int v93 = 0;
    do
    {
      char v94 = v93;
      AMCP::create_device_node_uid_from_device_uid_and_direction(&v131, v93, (void **)buf);
      AMCP::IO_Core::Device_Timebase_Factory::demand_timebase_for_device(&__p, (void *)*v10, (uint64_t *)&v146, buf);
      if (__p.__imp_.__imp_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__imp_.__imp_);
      }
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v132, buf, (uint64_t)buf);
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
      int v93 = 1;
    }
    while ((v94 & 1) == 0);
    imp = (std::__shared_weak_count *)v146.__imp_.__imp_;
LABEL_215:
    if (imp)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](imp);
      CFStringRef v49 = v131;
    }
    if (v49) {
      CFRelease(v49);
    }
    if (v142) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v142);
    }
    ++v12;
  }
}

void sub_1BAC34164()
{
  AMCP::Graph_Description::~Graph_Description((void **)(v0 - 192));
  JUMPOUT(0x1BAC343CCLL);
}

void sub_1BAC34174()
{
  AMCP::Modify_Graph_Destroy_List::~Modify_Graph_Destroy_List((void **)(v0 - 192));
  JUMPOUT(0x1BAC345B4);
}

void sub_1BAC34184()
{
}

void sub_1BAC34190()
{
}

void sub_1BAC341A4(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__deallocate_node(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1BAC345F4);
}

void sub_1BAC341C8()
{
}

void sub_1BAC341E8()
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100](v0 - 192);
  JUMPOUT(0x1BAC343C4);
}

void sub_1BAC341F8()
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>::operator()[abi:ne180100](1, v1);
  std::pair<std::vector<AMCP::Node_Description>,std::shared_ptr<AMCP::IO_Core::Device_Node_State>>::~pair(v2 - 192);
  if (!v0) {
    JUMPOUT(0x1BAC34594);
  }
  JUMPOUT(0x1BAC34590);
}

void sub_1BAC34288()
{
}

void sub_1BAC34290()
{
}

void sub_1BAC343C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::~__hash_table(v50 - 240);
  AMCP::Modify_Graph_Destroy_List::~Modify_Graph_Destroy_List((void **)&a21);
  if (a30 && __p) {
    operator delete(__p);
  }
  std::__tree<std::string>::destroy((char *)a38);
  if (a40)
  {
    a41 = (uint64_t)a40;
    operator delete(a40);
  }
  AMCP::IO_Core::Device_Node_Factory::~Device_Node_Factory((AMCP::IO_Core::Device_Node_Factory *)&a43);
  a21 = (uint64_t)&a50;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a21 = (uint64_t)&a47;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

void *std::vector<AMCP::Node_Description>::__init_with_size[abi:ne180100]<AMCP::Node_Description*,AMCP::Node_Description*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<AMCP::Node_Description>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Node_Description>,AMCP::Node_Description*,AMCP::Node_Description*,AMCP::Node_Description*>(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BAC34660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void AMCP::Modify_Graph_Destroy_List::~Modify_Graph_Destroy_List(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void AMCP::Graph_Description::~Graph_Description(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void AMCP::IO_Core::Graph_Manager::find_contexts_using_timebase(unsigned int **a1, void **a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  AMCP::Graph::Graph::get_nodes(&v25, a2[25]);
  uint64_t v5 = v25;
  uint64_t v6 = v26;
  if (v25 != v26)
  {
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(void *)(*(void *)v5 + 176);
      if (v10) {
        unsigned int v11 = *(_DWORD *)(v10 + 8);
      }
      else {
        unsigned int v11 = 0;
      }
      ((void (*)(uint64_t *__return_ptr, void **))(*a2)[2])(&v21, a2);
      uint64_t v12 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(void *)v21 + 16))(v21);
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v23, v12, v11);
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      if (v23)
      {
        uint64_t v21 = 0x676C6F6269757462;
        LODWORD(v22) = 0;
        if (AMCP::Core::Core::call_operation_function<BOOL,std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&>(v23, (unsigned int *)&v21, a3))
        {
          if ((unint64_t)v9 >= v8)
          {
            uint64_t v14 = v9 - v7;
            unint64_t v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 62) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v8 - (void)v7) >> 1 > v15) {
              unint64_t v15 = (uint64_t)(v8 - (void)v7) >> 1;
            }
            if (v8 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v16 = v15;
            }
            if (v16) {
              unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v16);
            }
            else {
              uint64_t v17 = 0;
            }
            uint64_t v18 = (unsigned int *)(v16 + 4 * v14);
            *uint64_t v18 = v11;
            BOOL v13 = v18 + 1;
            while (v9 != v7)
            {
              unsigned int v19 = *--v9;
              *--uint64_t v18 = v19;
            }
            unint64_t v8 = v16 + 4 * v17;
            *a1 = v18;
            a1[1] = v13;
            a1[2] = (unsigned int *)v8;
            if (v7) {
              operator delete(v7);
            }
            unint64_t v7 = v18;
          }
          else
          {
            unsigned int *v9 = v11;
            BOOL v13 = v9 + 1;
          }
          a1[1] = v13;
          uint64_t v9 = v13;
        }
      }
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
      v5 += 16;
    }
    while (v5 != v6);
  }
  BOOL v23 = (AMCP::Address *)&v25;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
}

void sub_1BAC34918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, std::__shared_weak_count *a13, char a14)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  a12 = (void **)&a14;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a12);
  unint64_t v15 = *(void **)a9;
  if (*(void *)a9)
  {
    *(void *)(a9 + 8) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core13Graph_Manager40find_meta_devices_that_contain_subdeviceENSt3__110shared_ptrINS_5Graph10Graph_HostEEERKNS2_6vectorIjNS2_9allocatorIjEEEERKjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  if (!AMCP::is_base_of((AMCP *)0x61646576, simple_required)) {
    return 0;
  }
  AMCP::Core::Core::get_simple_required_property<1969841184u>(&cf, *a2);
  BOOL v5 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(a1 + 8), (const __CFString **)&cf) == kCFCompareEqualTo;
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::destroy_deallocate(const void **a1)
{
  std::__function::__alloc_func<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::destroy[abi:ne180100](a1[1]);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::destroy[abi:ne180100](const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::destroy(uint64_t a1)
{
}

void *std::__function::__func<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14663F8;
  return std::__compressed_pair_elem<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0 const&,0ul>(a2 + 1, (CFTypeRef *)(a1 + 8));
}

void *std::__compressed_pair_elem<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0 const&,0ul>(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *a1 = v3;
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = (CFTypeRef *)(a1 + 8);
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_1F14663F8;
  std::__compressed_pair_elem<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14663F8;
  uint64_t v1 = (const void *)a1[1];
  if (v1) {
    CFRelease(v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::find_meta_devices_that_contain_subdevice(std::shared_ptr<AMCP::Graph::Graph_Host>,std::vector<unsigned int> const&,unsigned int const&)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14663F8;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t *std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint8x8_t v4 = a2;
    BOOL v5 = result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(v5, v6, *((_DWORD *)v4 + 7), *((_DWORD *)v4 + 7));
      unint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          unint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint8x8_t v4 = v8;
        }
        while (!v9);
      }
      uint8x8_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void AMCP::IO_Core::Graph_Manager::resume_iocontexts_for_timebases(void **a1, void *a2, uint64_t a3)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  AMCP::Graph::Graph::get_nodes(&v71, a1[25]);
  uint64_t v6 = v71;
  uint64_t v5 = v72;
  if (v71 != v72)
  {
    unint64_t v7 = (void *)(a3 + 8);
    unint64_t v8 = a2 + 1;
    uint64_t v64 = a3;
    do
    {
      BOOL v9 = *(std::string **)v6;
      if (*(char *)(*(void *)v6 + 47) < 0) {
        std::string::__init_copy_ctor_external(&v89, v9[1].__r_.__value_.__l.__data_, v9[1].__r_.__value_.__l.__size_);
      }
      else {
        std::string v89 = v9[1];
      }
      uint64_t v10 = std::__tree<std::string>::find<std::string>(a3, &v89);
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      uint64_t v11 = *(void *)(*(void *)v6 + 176);
      if (v11) {
        LODWORD(v11) = *(_DWORD *)(v11 + 8);
      }
      uint64_t v12 = (void *)*a2;
      if ((void *)*a2 == v8) {
        goto LABEL_71;
      }
      while (*((_DWORD *)v12 + 7) != v11)
      {
        BOOL v13 = (void *)v12[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            BOOL v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v14 = (void *)v12[2];
            BOOL v15 = *v14 == (void)v12;
            uint64_t v12 = v14;
          }
          while (!v15);
        }
        uint64_t v12 = v14;
        if (v14 == v8) {
          goto LABEL_71;
        }
      }
      if (v12 == v8) {
        goto LABEL_71;
      }
      ((void (*)(std::string *__return_ptr))(*a1)[2])(&v89);
      unint64_t v16 = (std::__shared_mutex_base *)(*(uint64_t (**)(std::string::size_type))(*(void *)v89.__r_.__value_.__l.__data_
                                                                                          + 16))(v89.__r_.__value_.__r.__words[0]);
      uint64_t v17 = *(void *)(*(void *)v6 + 176);
      if (v17) {
        unsigned int v18 = *(_DWORD *)(v17 + 8);
      }
      else {
        unsigned int v18 = 0;
      }
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v69, v16, v18);
      if (v89.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v89.__r_.__value_.__l.__size_);
      }
      unsigned int v19 = v69;
      v89.__r_.__value_.__r.__words[0] = 0x676C6F626E756964;
      LODWORD(v89.__r_.__value_.__r.__words[1]) = 0;
      AMCP::Core::Core::call_operation_function<applesauce::CF::StringRef>((AMCP::Log::Scope_Registry *)&cf, v69, (unsigned int *)&v89);
      AMCP::Log::Scope_Registry::get(v20);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v77, "com.apple.coreaudio", "AMCP");
      int v22 = v77[4];
      switch(v22)
      {
        case 1:
          AMCP::Log::Scope_Registry::get(v21);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v89, "com.apple.coreaudio", "AMCP");
          float v37 = *(NSObject **)v89.__r_.__value_.__l.__data_;
          if (v89.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v89.__r_.__value_.__l.__size_);
          }
          if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_58;
          }
          float v38 = pthread_self();
          mach_port_t v39 = pthread_mach_thread_np(v38);
          if (!cf)
          {
            exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          mach_port_t v40 = v39;
          applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)cf);
          p_p = (std::runtime_error_vtbl *)&__p;
          if (SHIBYTE(v83) < 0) {
            p_p = __p.__vftable;
          }
          size_t v42 = "active";
          if (v7 == v10) {
            size_t v42 = "inactive";
          }
          LODWORD(v89.__r_.__value_.__l.__data_) = 67110146;
          HIDWORD(v89.__r_.__value_.__r.__words[0]) = v40;
          LOWORD(v89.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v89.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Manager.cpp";
          WORD1(v89.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v89.__r_.__value_.__r.__words[2]) = 711;
          __int16 v90 = 2080;
          *(void *)uint64_t v91 = p_p;
          *(_WORD *)&v91[8] = 2080;
          *(void *)&v91[10] = v42;
          uint64_t v29 = v37;
          os_log_type_t v30 = OS_LOG_TYPE_DEFAULT;
          break;
        case 2:
          AMCP::Log::Scope_Registry::get(v21);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v89, "com.apple.coreaudio", "AMCP");
          uint64_t v31 = *(NSObject **)v89.__r_.__value_.__l.__data_;
          if (v89.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v89.__r_.__value_.__l.__size_);
          }
          if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_58;
          }
          unint64_t v32 = pthread_self();
          mach_port_t v33 = pthread_mach_thread_np(v32);
          if (!cf)
          {
            int v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v61, "Could not construct");
            __cxa_throw(v61, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          mach_port_t v34 = v33;
          applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)cf);
          std::runtime_error v35 = (std::runtime_error_vtbl *)&__p;
          if (SHIBYTE(v83) < 0) {
            std::runtime_error v35 = __p.__vftable;
          }
          unint64_t v36 = "active";
          if (v7 == v10) {
            unint64_t v36 = "inactive";
          }
          LODWORD(v89.__r_.__value_.__l.__data_) = 67110146;
          HIDWORD(v89.__r_.__value_.__r.__words[0]) = v34;
          LOWORD(v89.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v89.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Manager.cpp";
          WORD1(v89.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v89.__r_.__value_.__r.__words[2]) = 711;
          __int16 v90 = 2080;
          *(void *)uint64_t v91 = v35;
          *(_WORD *)&v91[8] = 2080;
          *(void *)&v91[10] = v36;
          _os_log_debug_impl(&dword_1BAA78000, v31, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Resuming IOContext %s (%s)", (uint8_t *)&v89, 0x2Cu);
          goto LABEL_56;
        case 3:
          AMCP::Log::Scope_Registry::get(v21);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v89, "com.apple.coreaudio", "AMCP");
          BOOL v23 = *(NSObject **)v89.__r_.__value_.__l.__data_;
          if (v89.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v89.__r_.__value_.__l.__size_);
          }
          if (!os_log_type_enabled(v23, OS_LOG_TYPE_INFO)) {
            goto LABEL_58;
          }
          unint64_t v24 = pthread_self();
          mach_port_t v25 = pthread_mach_thread_np(v24);
          if (!cf)
          {
            unint64_t v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v63, "Could not construct");
            __cxa_throw(v63, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          mach_port_t v26 = v25;
          applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)cf);
          uint64_t v27 = (std::runtime_error_vtbl *)&__p;
          if (SHIBYTE(v83) < 0) {
            uint64_t v27 = __p.__vftable;
          }
          unint64_t v28 = "active";
          if (v7 == v10) {
            unint64_t v28 = "inactive";
          }
          LODWORD(v89.__r_.__value_.__l.__data_) = 67110146;
          HIDWORD(v89.__r_.__value_.__r.__words[0]) = v26;
          LOWORD(v89.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v89.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Manager.cpp";
          WORD1(v89.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v89.__r_.__value_.__r.__words[2]) = 711;
          __int16 v90 = 2080;
          *(void *)uint64_t v91 = v27;
          *(_WORD *)&v91[8] = 2080;
          *(void *)&v91[10] = v28;
          uint64_t v29 = v23;
          os_log_type_t v30 = OS_LOG_TYPE_INFO;
          break;
        default:
          goto LABEL_58;
      }
      _os_log_impl(&dword_1BAA78000, v29, v30, "%6u %32s:%-5d Resuming IOContext %s (%s)", (uint8_t *)&v89, 0x2Cu);
LABEL_56:
      if (SHIBYTE(v83) < 0) {
        operator delete(__p.__vftable);
      }
LABEL_58:
      if ((void)v78) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v78);
      }
      uint64_t v66 = 0x676C6F627265736DLL;
      int v67 = 0;
      operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v73, v19, (unsigned int *)&v66);
      __int16 v44 = v73;
      if (!v73)
      {
        AMCP::Log::Scope_Registry::get(operation);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v89, "com.apple.coreaudio", "AMCP");
        int8x8_t v53 = *(NSObject **)v89.__r_.__value_.__l.__data_;
        if (v89.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v89.__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
        {
          uint8x8_t v54 = pthread_self();
          mach_port_t v55 = pthread_mach_thread_np(v54);
          LODWORD(v89.__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(v89.__r_.__value_.__r.__words[0]) = v55;
          LOWORD(v89.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v89.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Core.h";
          WORD1(v89.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v89.__r_.__value_.__r.__words[2]) = 202;
          _os_log_error_impl(&dword_1BAA78000, v53, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", (uint8_t *)&v89, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v88);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v80);
        std::runtime_error::runtime_error(&v81, &v80);
        std::runtime_error::runtime_error(&__p, &v81);
        uint64_t v84 = 0;
        uint64_t v85 = 0;
        uint64_t v86 = 0;
        int v87 = -1;
        __p.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        uint64_t v83 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v89, (uint64_t)&__p);
        *(void *)&v91[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) c"
                             "onst [Return_Type = void, Argument_Types = <AMCP::Resume_Behavior>]";
        *(void *)&v91[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
        int v92 = 202;
        std::vector<void *>::vector(&v75);
        int v56 = backtrace((void **)v75, (*((void *)&v75 + 1) - (void)v75) >> 3);
        std::vector<void *>::resize((char **)&v75, v56);
        long long v78 = v75;
        uint64_t v79 = v76;
        long long v75 = 0uLL;
        uint64_t v76 = 0;
        uint64_t v77 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      unint64_t v45 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Resume_Behavior)>>();
      std::logic_error v46 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v44, v45);
      if (!v46)
      {
        AMCP::Log::Scope_Registry::get(0);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v89, "com.apple.coreaudio", "AMCP");
        std::string v57 = *(NSObject **)v89.__r_.__value_.__l.__data_;
        if (v89.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v89.__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
        {
          unint64_t v58 = pthread_self();
          mach_port_t v59 = pthread_mach_thread_np(v58);
          LODWORD(v89.__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(v89.__r_.__value_.__r.__words[0]) = v59;
          LOWORD(v89.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v89.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Operation.h";
          WORD1(v89.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v89.__r_.__value_.__r.__words[2]) = 154;
          _os_log_error_impl(&dword_1BAA78000, v57, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", (uint8_t *)&v89, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v88);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v80);
        std::runtime_error::runtime_error(&v81, &v80);
        std::runtime_error::runtime_error(&__p, &v81);
        uint64_t v84 = 0;
        uint64_t v85 = 0;
        uint64_t v86 = 0;
        int v87 = -1;
        __p.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        uint64_t v83 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v89, (uint64_t)&__p);
        *(void *)&v91[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = vo"
                             "id, Argument_Types = <AMCP::Resume_Behavior>]";
        *(void *)&v91[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        int v92 = 154;
        std::vector<void *>::vector(&v75);
        int v60 = backtrace((void **)v75, (*((void *)&v75 + 1) - (void)v75) >> 3);
        std::vector<void *>::resize((char **)&v75, v60);
        long long v78 = v75;
        uint64_t v79 = v76;
        long long v75 = 0uLL;
        uint64_t v76 = 0;
        uint64_t v77 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      uint64_t v47 = v46;
      if (!*((void *)v46 + 7)
        || (v89.__r_.__value_.__r.__words[0] = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Resume_Behavior)>>(),
            std::logic_error v46 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, std::string *))v47
                                                + 7))(4, (uint64_t)v47 + 24, 0, &v89), a3 = v64, !v46))
      {
        AMCP::Log::Scope_Registry::get(v46);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v89, "com.apple.coreaudio", "AMCP");
        CFStringRef v49 = *(NSObject **)v89.__r_.__value_.__l.__data_;
        if (v89.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v89.__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
        {
          uint64_t v50 = pthread_self();
          mach_port_t v51 = pthread_mach_thread_np(v50);
          LODWORD(v89.__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(v89.__r_.__value_.__r.__words[0]) = v51;
          LOWORD(v89.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v89.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Operation.h";
          WORD1(v89.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v89.__r_.__value_.__r.__words[2]) = 161;
          _os_log_error_impl(&dword_1BAA78000, v49, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", (uint8_t *)&v89, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v88);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v80);
        std::runtime_error::runtime_error(&v81, &v80);
        std::runtime_error::runtime_error(&__p, &v81);
        uint64_t v84 = 0;
        uint64_t v85 = 0;
        uint64_t v86 = 0;
        int v87 = -1;
        __p.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        uint64_t v83 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v89, (uint64_t)&__p);
        *(void *)&v91[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = vo"
                             "id, Argument_Types = <AMCP::Resume_Behavior>]";
        *(void *)&v91[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        int v92 = 161;
        std::vector<void *>::vector(&v75);
        int v52 = backtrace((void **)v75, (*((void *)&v75 + 1) - (void)v75) >> 3);
        std::vector<void *>::resize((char **)&v75, v52);
        long long v78 = v75;
        uint64_t v79 = v76;
        long long v75 = 0uLL;
        uint64_t v76 = 0;
        uint64_t v77 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      LODWORD(__p.__vftable) = v7 == v10;
      uint64_t v48 = *((void *)v46 + 3);
      if (!v48) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, std::runtime_error *))(*(void *)v48 + 48))(v48, &__p);
      if (v74) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v74);
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v70) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v70);
      }
LABEL_71:
      v6 += 16;
    }
    while (v6 != v5);
  }
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
}

void sub_1BAC35A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, const void *a15, uint64_t a16, std::__shared_weak_count *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,std::runtime_error a36,std::runtime_error a37,uint64_t a38)
{
  if (__p) {
    std::__shared_weak_count::__release_shared[abi:ne180100](__p);
  }
  applesauce::CF::StringRef::~StringRef(&a15);
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  *(void *)(v38 - 192) = &a18;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 192));
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::exception_safe_dispatch(NSObject *a1, uint64_t a2)
{
  char v4 = 0;
  char v5 = 0;
  v3[0] = &v4;
  v3[1] = a2;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN10applesauce8dispatch2v19sync_implIZN4AMCP7IO_CoreL23exception_safe_dispatchERKNS3_7Utility14Dispatch_QueueENSt3__18functionIFvvEEEE3__0EEvP16dispatch_queue_sOT_NS9_17integral_constantIbLb1EEE_block_invoke;
  block[3] = &__block_descriptor_tmp_4105;
  block[4] = v3;
  dispatch_sync(a1, block);
  if (v5)
  {
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    *exceptiouint64_t n = MEMORY[0x1E4FBA510] + 16;
    __cxa_throw(exception, MEMORY[0x1E4FBA368], MEMORY[0x1E4FBA2C8]);
  }
}

void sub_1BAC35CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12, char a13)
{
  if (a13) {
    std::exception::~exception(&a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10applesauce8dispatch2v19sync_implIZN4AMCP7IO_CoreL23exception_safe_dispatchERKNS3_7Utility14Dispatch_QueueENSt3__18functionIFvvEEEE3__0EEvP16dispatch_queue_sOT_NS9_17integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1);
}

void sub_1BAC35D44(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  if (!*(unsigned char *)(*v1 + 8))
  {
    *(void *)uint64_t v2 = MEMORY[0x1E4FBA510] + 16;
    *(unsigned char *)(v2 + 8) = 1;
  }
  __cxa_end_catch();
}

void *std::__function::__func<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core13Graph_Manager18node_uid_is_uniqueERKN10applesauce2CF9StringRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  CFStringRef v1 = **(const __CFString ***)(a1 + 16);
  if (!v1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v1);
  char v4 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>((void *)(v3 + 176), (unsigned __int8 *)__p);
  if (v4)
  {
    uint64_t v6 = *((void *)v4 + 5);
    char v5 = (std::__shared_weak_count *)*((void *)v4 + 6);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v6 = 0;
    char v5 = 0;
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  **(unsigned char **)(a1 + 24) = v6 == 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1BAC35EB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14664E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F14664E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::node_uid_is_unique(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::~__func()
{
}

uint64_t AMCP::IO_Core::Graph_Manager::get_node_id(AMCP::IO_Core::Graph_Manager *this, const applesauce::CF::StringRef *a2)
{
  v8[40] = *(NSObject **)MEMORY[0x1E4F143B8];
  LOBYTE(v6) = 0;
  BYTE4(v6) = 0;
  (*(void (**)(NSObject **__return_ptr))(*(void *)this + 40))(v8);
  char v4 = operator new(0x20uLL);
  *char v4 = &unk_1F1466568;
  v4[1] = (char *)this + 8;
  v4[2] = a2;
  v4[3] = &v6;
  v7[3] = v4;
  AMCP::IO_Core::exception_safe_dispatch(v8[0], (uint64_t)v7);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v7);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v8);
  return v6;
}

void sub_1BAC36050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)va1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core13Graph_Manager11get_node_idERKN10applesauce2CF9StringRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  CFStringRef v1 = **(const __CFString ***)(a1 + 16);
  if (!v1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v1);
  char v4 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>((void *)(v3 + 176), (unsigned __int8 *)__p);
  if (v4)
  {
    uint64_t v6 = *((void *)v4 + 5);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)v4 + 6);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 176);
    if (v7) {
      LODWORD(v7) = *(_DWORD *)(v7 + 8);
    }
    uint64_t v8 = *(void *)(a1 + 24);
    *(_DWORD *)uint64_t v8 = v7;
    *(unsigned char *)(v8 + 4) = 1;
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1BAC361A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1466568;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F1466568;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_node_id(applesauce::CF::StringRef const&)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core13Graph_Manager9get_wiresEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  AMCP::Graph::Wire_Index::get_wires((AMCP::Graph::Wire_Index *)__p, *(void *)(a1 + 8) + 56);
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__move_assign(*(void *)(a1 + 16), (uint64_t *)__p);
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__deallocate_node((void *)__p[2]);
  uint64_t v2 = __p[0];
  __p[0] = 0;
  if (v2) {
    operator delete(v2);
  }
}

void std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__deallocate_node(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = a2[2];
  char v9 = a2 + 2;
  uint64_t v8 = v10;
  uint64_t v11 = *(v9 - 1);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  uint64_t v12 = v9[1];
  *(void *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    unint64_t v13 = *(void *)(v8 + 8);
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        v13 %= v14;
      }
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    void *v9 = 0;
    v9[1] = 0;
  }
}

__n128 std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14665E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F14665E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires(void)::$_0>,void ()(void)>::~__func()
{
}

void AMCP::IO_Core::Graph_Manager::get_wires_for_node(AMCP::IO_Core::Graph_Manager *this, uint64_t a2, int a3)
{
  v8[40] = *(NSObject **)MEMORY[0x1E4F143B8];
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  (*(void (**)(NSObject **__return_ptr, uint64_t))(*(void *)a2 + 40))(v8, a2);
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = &unk_1F1466668;
  v6[1] = a2 + 8;
  *((_DWORD *)v6 + 4) = a3;
  v6[3] = this;
  v7[3] = v6;
  AMCP::IO_Core::exception_safe_dispatch(v8[0], (uint64_t)v7);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v7);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v8);
}

void sub_1BAC3655C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)va1);
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core13Graph_Manager18get_wires_for_nodeEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v2 + 27, *(_DWORD *)(a1 + 16));
  if (v3)
  {
    uint64_t v4 = v3 + 3;
    if (*((char *)v3 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v27, (const std::string::value_type *)v3[3], v3[4]);
    }
    else
    {
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *v4;
      v27.__r_.__value_.__r.__words[2] = v3[5];
    }
    uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v2 + 22, (unsigned __int8 *)&v27);
    if (!v5) {
      goto LABEL_17;
    }
    uint64_t v6 = (void *)*((void *)v5 + 5);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 6);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v6)
    {
LABEL_17:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      char v9 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v11;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Graph.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = 739;
        *(_WORD *)&uint8_t buf[24] = 2080;
        *(void *)&buf[26] = "not (node.operator BOOL())";
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Missing for node in get_wires_for_node", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Missing for node in get_wires_for_node", (uint64_t)&v18);
      std::logic_error::logic_error(&v19, &v18);
      v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v20, &v19);
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      int v25 = -1;
      v20.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      uint64_t v21 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
      *(void *)&buf[32] = "Wire_Set AMCP::Graph::Graph::get_wires_for_node(Object_ID) const";
      uint64_t v29 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
      int v30 = 739;
      std::vector<void *>::vector(&v13);
      int v12 = backtrace((void **)v13, (*((void *)&v13 + 1) - (void)v13) >> 3);
      std::vector<void *>::resize((char **)&v13, v12);
      long long v16 = v13;
      uint64_t v17 = v14;
      long long v13 = 0uLL;
      uint64_t v14 = 0;
      BOOL v15 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    AMCP::Graph::Wire_Index::get_wires_for_node((uint64_t)buf, v2 + 7, (uint64_t)v4, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6[11] - v6[10]) >> 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6[8] - v6[7]) >> 4));
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    memset(buf, 0, 32);
    *(_DWORD *)&buf[32] = 1065353216;
  }
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__move_assign(*(void *)(a1 + 24), (uint64_t *)buf);
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__deallocate_node(*(void **)&buf[16]);
  uint64_t v8 = *(void **)buf;
  *(void *)AudioObjectPropertyAddress buf = 0;
  if (v8) {
    operator delete(v8);
  }
}

void sub_1BAC36A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
}

__n128 std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1466668;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F1466668;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::get_wires_for_node(unsigned int)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core13Graph_Manager18update_power_stateENS_11Power_StateEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  **(_DWORD **)(a1 + 40) = *(_DWORD *)(a1 + 32);
  AMCP::Graph::Graph::get_nodes(&v11, *(void **)(*(void *)(a1 + 8) + 192));
  uint64_t v2 = v11;
  for (uint64_t i = v12; v2 != i; v2 += 16)
  {
    uint64_t v4 = (std::__shared_mutex_base *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
    uint64_t v5 = *(void *)(*(void *)v2 + 176);
    if (v5) {
      unsigned int v6 = *(_DWORD *)(v5 + 8);
    }
    else {
      unsigned int v6 = 0;
    }
    AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v9, v4, v6);
    uint64_t v7 = 0x676C6F6269707073;
    int v8 = 0;
    AMCP::Core::Core::call_operation_function<void,AMCP::Power_State>(v9, (unsigned int *)&v7, *(_DWORD *)(a1 + 32));
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  char v9 = (AMCP::Address *)&v11;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
}

void sub_1BAC36D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, std::__shared_weak_count *a13, char a14)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  a12 = (void **)&a14;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  CFStringRef v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 std::__function::__func<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14666E8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

__n128 std::__function::__func<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F14666E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)v2 + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 32);
  *((__n128 *)v2 + 2) = result;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14666E8;
  CFStringRef v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0,std::allocator<AMCP::IO_Core::Graph_Manager::update_power_state(AMCP::Power_State)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14666E8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void AMCP::IO_Core::Graph_Manager::update_and_resume_io_contexts(void **a1, void *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  AMCP::Graph::Graph::get_nodes(&v38, a1[25]);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  long long v16 = &v17;
  uint64_t v4 = v38;
  for (uint64_t i = v39; v4 != i; v4 += 16)
  {
    unsigned int v6 = *(std::string **)v4;
    if (*(char *)(*(void *)v4 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v37, v6[1].__r_.__value_.__l.__data_, v6[1].__r_.__value_.__l.__size_);
    }
    else {
      std::string v37 = v6[1];
    }
    if (AMCP::IO_Core::Graph_Manager::update_iocontext((uint64_t)a1, (unsigned __int8 *)&v37, (uint64_t)&v19))
    {
      uint64_t v8 = *(void *)(*(void *)v4 + 144);
      uint64_t v7 = *(std::__shared_weak_count **)(*(void *)v4 + 152);
      if (v7)
      {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      if (!v8)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        char v9 = **(NSObject ***)buf;
        if (*(void *)v41) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          uint64_t v10 = pthread_self();
          mach_port_t v11 = pthread_mach_thread_np(v10);
          uint64_t v12 = *(std::string **)v4;
          if (*(char *)(*(void *)v4 + 47) < 0) {
            std::string::__init_copy_ctor_external(&v31, v12[1].__r_.__value_.__l.__data_, v12[1].__r_.__value_.__l.__size_);
          }
          else {
            std::string v31 = v12[1];
          }
          long long v13 = &v31;
          if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            long long v13 = (std::string *)v31.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v11;
          *(_WORD *)unint64_t v41 = 2080;
          *(void *)&v41[2] = "Graph_Manager.cpp";
          __int16 v42 = 1024;
          int v43 = 236;
          __int16 v44 = 2080;
          *(void *)unint64_t v45 = "not (context->get_clock() != Timebase_Ref{})";
          *(_WORD *)&v45[8] = 2080;
          *(void *)&unsigned char v45[10] = v13;
          _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Unable to calculate clock for IO Context: %s", buf, 0x2Cu);
          if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v31.__r_.__value_.__l.__data_);
          }
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
        __cxa_allocate_exception(0x40uLL);
        uint64_t v14 = *(std::string **)v4;
        if (*(char *)(*(void *)v4 + 47) < 0) {
          std::string::__init_copy_ctor_external(&v28, v14[1].__r_.__value_.__l.__data_, v14[1].__r_.__value_.__l.__size_);
        }
        else {
          std::string v28 = v14[1];
        }
        BOOL v15 = &v28;
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          BOOL v15 = (std::string *)v28.__r_.__value_.__r.__words[0];
        }
        caulk::make_string((caulk *)"Unable to calculate clock for IO Context: %s", (uint64_t)&v29, v15, v16, v17, v18, v19, v20, v21, v22);
        std::logic_error::logic_error(&v30, &v29);
        v30.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error((std::logic_error *)&v31, &v30);
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        int v35 = -1;
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
        v31.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v31);
        *(void *)&v45[6] = "std::set<Graph_Node_UID> AMCP::IO_Core::Graph_Manager::update_all_iocontexts(Graph::Graph::"
                             "Resource_Counts &)";
        *(void *)&unsigned char v45[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Graph_Manager.cpp";
        int v46 = 236;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
        long long v26 = v23;
        int v25 = &unk_1F148AA90;
        uint64_t v27 = v24;
        long long v23 = 0uLL;
        uint64_t v24 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v16, &v37, (uint64_t)&v37);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
  }
  *(void *)AudioObjectPropertyAddress buf = &v38;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  AMCP::IO_Core::Graph_Manager::resume_iocontexts_for_timebases(a1, a2, (uint64_t)&v16);
  std::__tree<std::string>::destroy(v17);
}

void sub_1BAC37360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,char a43)
{
  if (*(char *)(v43 - 169) < 0) {
    operator delete(*(void **)(v43 - 192));
  }
  std::__tree<std::string>::destroy(a11);
  *(void *)(v43 - 144) = v43 - 168;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 144));
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::Graph_Manager::Graph_Manager(AMCP::IO_Core::Graph_Manager *this)
{
  *(void *)this = &unk_1F1466228;
  *((void *)this + 1) = &unk_1F1472350;
  *((_DWORD *)this + 4) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 1065353216;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 1065353216;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 34) = 1065353216;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 44) = 1065353216;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 54) = 1065353216;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 64) = 1065353216;
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 33) = (char *)this + 272;
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1F1472398;
  *((void *)v2 + 7) = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((void *)this + 36) = v2 + 24;
  *((void *)this + 37) = v2;
  uint64_t v3 = (char *)operator new(0x68uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)uint64_t v3 = &unk_1F14866D8;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *((_DWORD *)v3 + 14) = 1065353216;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_DWORD *)v3 + 24) = 1065353216;
  *((void *)this + 38) = v3 + 24;
  *((void *)this + 39) = v3;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_DWORD *)this + 88) = 1065353216;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *((_DWORD *)this + 98) = 1065353216;
  operator new();
}

void sub_1BAC376A8(_Unwind_Exception *a1, AMCP::Graph::Graph *a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<AMCP::IO_Core::Device_Timebase_Factory>::reset[abi:ne180100]((uint64_t *)va);
  std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::~__hash_table(v2 + 320);
  AMCP::Graph::Graph::~Graph(a2);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<AMCP::IO_Core::Device_Timebase_Factory>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  uint64_t *result = 0;
  if (v1)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 40);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::~__hash_table(v1);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<AMCP::IO_Core::Device_Timebase_Factory  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN4AMCP7IO_Core23Device_Timebase_FactoryEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMCP::IO_Core::Device_Timebase_Factory  *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 40);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::~__hash_table(v1);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void std::__shared_ptr_pointer<AMCP::IO_Core::Device_Timebase_Factory  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void AMCP::IO_Core::Graph_Manager::~Graph_Manager(AMCP::IO_Core::Graph_Manager *this)
{
  *(void *)this = &unk_1F1466228;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::~__hash_table((uint64_t)this + 360);
  std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::~__hash_table((uint64_t)this + 320);
  AMCP::Graph::Graph::~Graph((AMCP::IO_Core::Graph_Manager *)((char *)this + 8));
}

uint64_t std::unordered_map<unsigned int,std::chrono::duration<long long,std::ratio<1l,1000000l>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  uint64_t v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    unsigned int v6 = (void *)(a1 + 16);
    unint64_t v7 = *(void *)(a1 + 8);
    do
    {
      unint64_t v8 = *((unsigned int *)v5 + 4);
      if (v7)
      {
        uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          unint64_t v2 = *((unsigned int *)v5 + 4);
          if (v7 <= v8) {
            unint64_t v2 = v8 % v7;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v8;
        }
        uint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
        if (v10)
        {
          for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
          {
            unint64_t v12 = i[1];
            if (v12 == v8)
            {
              if (*((_DWORD *)i + 4) == v8) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v7) {
                  v12 %= v7;
                }
              }
              else
              {
                v12 &= v7 - 1;
              }
              if (v12 != v2) {
                break;
              }
            }
          }
        }
      }
      long long v13 = operator new(0x20uLL);
      void *v13 = 0;
      v13[1] = v8;
      *((_OWORD *)v13 + 1) = *((_OWORD *)v5 + 1);
      float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v15 = *(float *)(a1 + 32);
      if (!v7 || (float)(v15 * (float)v7) < v14)
      {
        BOOL v16 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v16 = 1;
        }
        unint64_t v17 = v16 | (2 * v7);
        unint64_t v18 = vcvtps_u32_f32(v14 / v15);
        if (v17 <= v18) {
          size_t v19 = v18;
        }
        else {
          size_t v19 = v17;
        }
        std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v19);
        unint64_t v7 = *(void *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v8) {
            unint64_t v2 = v8 % v7;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v8;
        }
      }
      uint64_t v20 = *(void *)a1;
      long long v21 = *(void **)(*(void *)a1 + 8 * v2);
      if (v21)
      {
        void *v13 = *v21;
      }
      else
      {
        void *v13 = *v6;
        void *v6 = v13;
        *(void *)(v20 + 8 * v2) = v6;
        if (!*v13) {
          goto LABEL_40;
        }
        unint64_t v22 = *(void *)(*v13 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v22 >= v7) {
            v22 %= v7;
          }
        }
        else
        {
          v22 &= v7 - 1;
        }
        long long v21 = (void *)(*(void *)a1 + 8 * v22);
      }
      *long long v21 = v13;
LABEL_40:
      ++*(void *)(a1 + 24);
LABEL_41:
      uint64_t v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1BAC37B14(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<HALS_IOContextReporter::ReportStartHardware(HALS_IOContextReporter::StartHardwareData)::$_0,std::default_delete<HALS_IOContextReporter::ReportStartHardware(HALS_IOContextReporter::StartHardwareData)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(v2 + 56);
    MEMORY[0x1C1859840](v2, 0x10A0C401E8F5A3ELL);
  }
  return a1;
}

uint64_t *applesauce::dispatch::v1::async<HALS_IOContextReporter::ReportStartHardware(HALS_IOContextReporter::StartHardwareData)::$_0 &>(dispatch_queue_s *,HALS_IOContextReporter::ReportStartHardware(HALS_IOContextReporter::StartHardwareData)::$_0 &)::{lambda(void *)#1}::__invoke(unsigned int *a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  std::string v28 = a1;
  std::string v31 = 0;
  uint64_t v32 = 0;
  std::logic_error v30 = &v31;
  uint64_t v2 = (uint64_t *)operator new(0x50uLL);
  *(void *)AudioObjectPropertyAddress buf = v2;
  *(void *)&uint8_t buf[8] = &v31;
  buf[16] = 0;
  std::string::basic_string[abi:ne180100]<0>(v2 + 4, "message");
  std::string::basic_string[abi:ne180100]<0>(v2 + 7, "StartHardware");
  buf[16] = 1;
  uint64_t v3 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)&v30, &v29, v2 + 4);
  if (!*v3)
  {
    std::string::size_type v4 = v29.__r_.__value_.__r.__words[0];
    uint64_t *v2 = 0;
    v2[1] = 0;
    v2[2] = v4;
    *uint64_t v3 = v2;
    if (*v30)
    {
      std::logic_error v30 = (uint64_t **)*v30;
      uint64_t v2 = *v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v31, v2);
    ++v32;
    *(void *)AudioObjectPropertyAddress buf = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
  if (*((unsigned char *)a1 + 32)) {
    uint64_t v5 = "YES";
  }
  else {
    uint64_t v5 = "NO";
  }
  unsigned int v6 = (uint64_t *)operator new(0x50uLL);
  *(void *)AudioObjectPropertyAddress buf = v6;
  *(void *)&uint8_t buf[8] = &v31;
  buf[16] = 0;
  std::string::basic_string[abi:ne180100]<0>(v6 + 4, "success");
  std::string::basic_string[abi:ne180100]<0>(v6 + 7, v5);
  buf[16] = 1;
  unint64_t v7 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)&v30, &v29, v6 + 4);
  if (!*v7)
  {
    std::string::size_type v8 = v29.__r_.__value_.__r.__words[0];
    uint64_t *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *unint64_t v7 = v6;
    if (*v30)
    {
      std::logic_error v30 = (uint64_t **)*v30;
      unsigned int v6 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v31, v6);
    ++v32;
    *(void *)AudioObjectPropertyAddress buf = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
  std::to_string(&v29, a1[3]);
  std::string::basic_string[abi:ne180100]<0>(buf, "io_buffer_size");
  std::string __p = v29;
  memset(&v29, 0, sizeof(v29));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)&v30, buf, (uint64_t)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v35 < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::to_string(&v29, *((double *)a1 + 2));
  std::string::basic_string[abi:ne180100]<0>(buf, "sample_rate");
  std::string __p = v29;
  memset(&v29, 0, sizeof(v29));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)&v30, buf, (uint64_t)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v35 < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::to_string(&v29, *((float *)a1 + 6));
  std::string::basic_string[abi:ne180100]<0>(buf, "input_scalar_volume");
  std::string __p = v29;
  memset(&v29, 0, sizeof(v29));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)&v30, buf, (uint64_t)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v35 < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::to_string(&v29, *((float *)a1 + 7));
  std::string::basic_string[abi:ne180100]<0>(buf, "output_scalar_volume");
  std::string __p = v29;
  memset(&v29, 0, sizeof(v29));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)&v30, buf, (uint64_t)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v35 < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  uint8x8_t v9 = (HALS_ObjectMap *)a1[2];
  uint64_t v10 = (HALS_ObjectMap *)*a1;
  strcpy((char *)buf, "tsivtpni");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  mach_port_t v11 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v10);
  unint64_t v12 = (unsigned int *)HALS_ObjectMap::CopyObjectByObjectID(v9);
  float v14 = (HALS_ObjectMap *)v12;
  unsigned int v15 = 0;
  if (v12 && v11)
  {
    uint64_t v16 = v12[4];
    uint64_t v33 = 0;
    (*(void (**)(unsigned int *, uint64_t, uint8_t *, uint64_t, uint64_t *, char *, void, void, HALS_ObjectMap *))(*(void *)v12 + 112))(v12, v16, buf, 4, &v33, (char *)&v33 + 4, 0, 0, v11);
    unsigned int v15 = HIDWORD(v33);
  }
  HALS_ObjectMap::ReleaseObject(v14, v13);
  HALS_ObjectMap::ReleaseObject(v11, v17);
  if (v15 > 2) {
    unint64_t v18 = "unknown chat flavor";
  }
  else {
    unint64_t v18 = off_1E62312C0[v15];
  }
  std::string::basic_string[abi:ne180100]<0>(&v29, v18);
  std::string::basic_string[abi:ne180100]<0>(buf, "hal_chat_flavor");
  std::string __p = v29;
  memset(&v29, 0, sizeof(v29));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)&v30, buf, (uint64_t)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v35 < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::to_string(&v29, (*((void *)a1 + 6) - *((void *)a1 + 5)) / 1000);
  std::string::basic_string[abi:ne180100]<0>(buf, "duration_us");
  std::string __p = v29;
  memset(&v29, 0, sizeof(v29));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)&v30, buf, (uint64_t)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v35 < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  applesauce::CF::make_DictionaryRef<std::string,std::string>((CFDictionaryRef *)&v29, (const UInt8 **)&v30);
  size_t v19 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)a1[1]);
  if (!v19)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_IOContextReporter.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 98;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Report StartHardware metrics: no HALS_IOContext object", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 560947818;
  }
  HALS_IOContext::GetIssueReporters((HALS_IOContext *)buf, (uint64_t)v19);
  long long v21 = *(void **)buf;
  unint64_t v22 = *(uint64_t **)&buf[8];
  if (*(void *)buf != *(void *)&buf[8])
  {
    std::string::size_type v23 = v29.__r_.__value_.__r.__words[0];
    uint64_t v24 = *(uint64_t **)buf;
    do
    {
      uint64_t v25 = *v24;
      if (AudioStatisticsLibraryLoader(void)::once != -1) {
        dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_4139);
      }
      if (AudioStatisticsLibraryLoader(void)::libSym) {
        AudioStatisticsLibraryLoader(void)::libSym(v25, v23, 536870919, 1);
      }
      ++v24;
    }
    while (v24 != v22);
  }
  if (v21) {
    operator delete(v21);
  }
  HALS_ObjectMap::ReleaseObject(v19, v20);
  if (v29.__r_.__value_.__r.__words[0]) {
    CFRelease(v29.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v31);
  return std::unique_ptr<HALS_IOContextReporter::ReportStartHardware(HALS_IOContextReporter::StartHardwareData)::$_0,std::default_delete<HALS_IOContextReporter::ReportStartHardware(HALS_IOContextReporter::StartHardwareData)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v28);
}

void sub_1BAC382A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAC37F8CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAC383D8(void *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  if (a2)
  {
    if (v17) {
      operator delete(v17);
    }
    HALS_ObjectMap::ReleaseObject(v16, a2);
    if (a12) {
      CFRelease(a12);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a16);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAC381ACLL);
  }
  JUMPOUT(0x1BAC383C8);
}

void sub_1BAC38420(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<HALS_IOContextReporter::ReportStartHardware(HALS_IOContextReporter::StartHardwareData)::$_0,std::default_delete<HALS_IOContextReporter::ReportStartHardware(HALS_IOContextReporter::StartHardwareData)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  JUMPOUT(0x1BAC383C8);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  if (!*v5)
  {
    unsigned int v6 = v5;
    unint64_t v7 = (char *)operator new(0x50uLL);
    v9[0] = v7;
    v9[1] = a1 + 1;
    char v10 = 0;
    std::string::size_type v8 = (std::string *)(v7 + 32);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      *((void *)v7 + 6) = *(void *)(a3 + 16);
    }
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(a3 + 24);
    *((void *)v7 + 9) = *(void *)(a3 + 40);
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 24) = 0;
    char v10 = 1;
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(a1, v11, v6, (uint64_t *)v7);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9);
  }
}

void sub_1BAC38504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void HALS_IOContextReporter::anonymous namespace'::ReportDeviceMetrics(uint64_t **a1, HALS_ObjectMap *this, HALS_ObjectMap *a3)
{
  uint64_t v210 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (HALS_IOContext *)HALS_ObjectMap::CopyObjectByObjectID(this);
  uint8x8_t v185 = v5;
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(v207.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v207.__r_.__value_.__r.__words + 4) = (std::string::size_type)"HALS_IOContextReporter.cpp";
      WORD2(v207.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v207.__r_.__value_.__r.__words[1] + 6) = 141;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReportTransportType: no HALS_IOContext object", (uint8_t *)&v207, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 560947818;
  }
  unsigned int v6 = (HALS_IODevice *)HALS_ObjectMap::CopyObjectByObjectID(a3);
  unint64_t v7 = v6;
  uint64_t v193 = v6;
  if (!v6)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(v207.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v207.__r_.__value_.__r.__words + 4) = (std::string::size_type)"HALS_IOContextReporter.cpp";
      WORD2(v207.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v207.__r_.__value_.__r.__words[1] + 6) = 144;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReportTransportType: no HALS_Device object", (uint8_t *)&v207, 0x12u);
    }
    unint64_t v165 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v165 = off_1F148A5D8;
    v165[2] = 560947818;
  }
  int NumberStreams = HALS_IODevice::GetNumberStreams(v6, 0);
  int NumberStreamsExcludingReferenceStreams = HALS_Device::GetNumberStreamsExcludingReferenceStreams(v7, 0);
  std::to_string(&v207, NumberStreams - NumberStreamsExcludingReferenceStreams);
  std::string::basic_string[abi:ne180100]<0>(&v201, "input_num_reference_streams");
  v198.__r_.__value_.__r.__words[0] = (std::string::size_type)&v201;
  char v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v201, &v198);
  uint64_t v11 = (void **)v10 + 7;
  if (*((char *)v10 + 79) < 0) {
    operator delete(*v11);
  }
  *(std::string *)uint64_t v11 = v207;
  *((unsigned char *)&v207.__r_.__value_.__s + 23) = 0;
  v207.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v202) < 0)
  {
    operator delete((void *)v201.i64[0]);
    if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v207.__r_.__value_.__l.__data_);
    }
  }
  int v12 = HALS_IODevice::GetNumberStreams(v7, 1);
  int v13 = HALS_Device::GetNumberStreamsExcludingReferenceStreams(v7, 1);
  std::to_string(&v207, v12 - v13);
  std::string::basic_string[abi:ne180100]<0>(&v201, "output_num_reference_streams");
  v198.__r_.__value_.__r.__words[0] = (std::string::size_type)&v201;
  float v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v201, &v198);
  unsigned int v15 = (void **)v14 + 7;
  if (*((char *)v14 + 79) < 0) {
    operator delete(*v15);
  }
  *(std::string *)unsigned int v15 = v207;
  *((unsigned char *)&v207.__r_.__value_.__s + 23) = 0;
  v207.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v202) < 0)
  {
    operator delete((void *)v201.i64[0]);
    if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v207.__r_.__value_.__l.__data_);
    }
  }
  if (HALS_IODevice::GetTransportType(v7) == 1735554416)
  {
    std::to_string(&v207, 1);
    std::string::basic_string[abi:ne180100]<0>(&v201, "device_is_aggregate");
    v198.__r_.__value_.__r.__words[0] = (std::string::size_type)&v201;
    uint64_t v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v201, &v198);
    unint64_t v17 = (void **)v16 + 7;
    if (*((char *)v16 + 79) < 0) {
      operator delete(*v17);
    }
    *(std::string *)unint64_t v17 = v207;
    *((unsigned char *)&v207.__r_.__value_.__s + 23) = 0;
    v207.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v202) < 0)
    {
      operator delete((void *)v201.i64[0]);
      if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v207.__r_.__value_.__l.__data_);
      }
    }
    unint64_t v18 = (const void *)HALS_IOContext::CopyDescription(v5);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v192, v18);
    CFStringRef v19 = CFStringCreateWithBytes(0, (const UInt8 *)"uid", 3, 0x8000100u, 0);
    if (!v19)
    {
      unint64_t v166 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v166, "Could not construct");
      __cxa_throw(v166, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFStringRef v20 = CFStringCreateWithBytes(0, (const UInt8 *)"taps", 4, 0x8000100u, 0);
    if (!v20)
    {
      uint8x8_t v167 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v167, "Could not construct");
      __cxa_throw(v167, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int64x2_t v190 = 0uLL;
    unint64_t v191 = 0;
    if (v192)
    {
      CFStringRef cf = v20;
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef const&>(&v201, (const __CFDictionary *)v192, v20);
      if (!v201.i8[8]) {
        goto LABEL_62;
      }
      CFArrayRef v21 = (const __CFArray *)v201.i64[0];
      if (!v201.i64[0]) {
        goto LABEL_62;
      }
      CFIndex Count = CFArrayGetCount((CFArrayRef)v201.i64[0]);
      CFIndex v23 = Count;
      CFArrayRef v24 = (const __CFArray *)v201.i64[0];
      if (v201.i64[0])
      {
        CFIndex v25 = CFArrayGetCount((CFArrayRef)v201.i64[0]);
        if (!v23)
        {
LABEL_62:
          std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v201);
          CFRelease(cf);
          CFRelease(v19);
          if (v190.i64[1] - v190.i64[0] < 1)
          {
            uint64_t v43 = 0;
            uint64_t v45 = 0;
          }
          else
          {
            uint64_t v43 = (const __CFString **)std::get_temporary_buffer[abi:ne180100]<applesauce::CF::StringRef>((v190.i64[1] - v190.i64[0]) >> 3);
            uint64_t v45 = v44;
          }
          std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>((const __CFString **)v190.i64[0], (const __CFString **)v190.i64[1], (uint64_t)&v201, (v190.i64[1] - v190.i64[0]) >> 3, v43, v45);
          if (v43) {
            operator delete(v43);
          }
          int v46 = (uint64_t *)std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<applesauce::CF::StringRef *>,std::__wrap_iter<applesauce::CF::StringRef *>,std::__equal_to &>((const __CFString **)v190.i64[0], (const __CFString **)v190.i64[1]);
          std::vector<applesauce::CF::StringRef>::erase((uint64_t)&v190, v46, (uint64_t *)v190.i64[1]);
          std::string::basic_string[abi:ne180100]<0>(&v201, ", ");
          unint64_t v182 = (CFTypeRef *)v190.i64[1];
          uint64_t v47 = (CFTypeRef *)v190.i64[0];
          if (v190.i64[0] != v190.i64[1])
          {
            char v184 = 1;
            do
            {
              v200[0] = 0;
              v200[1] = 0;
              HALS_System::GetInstance(&v207, 0, (uint64_t *)v200);
              uint64_t v48 = v207.__r_.__value_.__r.__words[0];
              CFTypeRef v49 = *v47;
              if (*v47) {
                CFRetain(*v47);
              }
              CFTypeRef v199 = v49;
              uint64_t v51 = HALS_System::CopyTapByUID(v48, v49, 0);
              if (v199) {
                CFRelease(v199);
              }
              if (v207.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v207.__r_.__value_.__l.__size_);
              }
              if (v51)
              {
                int v52 = *(unsigned __int8 *)(v51 + 81);
                std::string::basic_string[abi:ne180100]<0>(&v198, "{ ");
                CFDictionaryRef v204 = 0;
                CFDictionaryRef v205 = 0;
                uint64_t v206 = 0;
                std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v204, *(const void **)(v51 + 208), *(void *)(v51 + 216), (uint64_t)(*(void *)(v51 + 216) - *(void *)(v51 + 208)) >> 2);
                int8x8_t v53 = (int *)v205;
                CFDictionaryRef cfa = v204;
                if (v204 != v205)
                {
                  char v54 = 1;
                  mach_port_t v55 = (int *)v204;
                  do
                  {
                    if ((v54 & 1) == 0)
                    {
                      if (SHIBYTE(v202) >= 0) {
                        int v56 = (const std::string::value_type *)&v201;
                      }
                      else {
                        int v56 = (const std::string::value_type *)v201.i64[0];
                      }
                      if (SHIBYTE(v202) >= 0) {
                        std::string::size_type v57 = HIBYTE(v202);
                      }
                      else {
                        std::string::size_type v57 = v201.u64[1];
                      }
                      std::string::append(&v198, v56, v57);
                    }
                    v197[0] = 0;
                    v197[1] = 0;
                    HALS_System::GetInstance(&v207, 0, v197);
                    mach_port_t v59 = (CFTypeRef *)HALS_System::CopyClientByObjectID((HALS_System *)v207.__r_.__value_.__l.__data_, *v55);
                    if (v207.__r_.__value_.__l.__size_) {
                      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v207.__r_.__value_.__l.__size_);
                    }
                    if (v59)
                    {
                      CFTypeRef v60 = v59[30];
                      if (v60)
                      {
                        CFRetain(v60);
                        CFTypeRef v61 = v59[30];
                        if (v61) {
                          CFRetain(v59[30]);
                        }
                      }
                      else
                      {
                        CFTypeRef v61 = 0;
                      }
                      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v196, v61);
                      if (!v196.__r_.__value_.__r.__words[0])
                      {
                        uint64_t v160 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::runtime_error::runtime_error(v160, "Could not construct");
                        __cxa_throw(v160, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                      }
                      applesauce::CF::convert_to<std::string,0>((uint64_t)&v207, (const __CFString *)v196.__r_.__value_.__l.__data_);
                      if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        char v62 = &v207;
                      }
                      else {
                        char v62 = (std::string *)v207.__r_.__value_.__r.__words[0];
                      }
                      if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type size = HIBYTE(v207.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type size = v207.__r_.__value_.__l.__size_;
                      }
                      std::string::append(&v198, (const std::string::value_type *)v62, size);
                      if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v207.__r_.__value_.__l.__data_);
                      }
                      if (v196.__r_.__value_.__r.__words[0]) {
                        CFRelease(v196.__r_.__value_.__l.__data_);
                      }
                    }
                    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v59, v58);
                    char v54 = 0;
                    ++v55;
                  }
                  while (v55 != v53);
                }
                std::string::append(&v198, " }", 2uLL);
                if ((v184 & 1) == 0)
                {
                  std::string::basic_string[abi:ne180100]<0>(&v207, "tap_name_list");
                  unint64_t v203 = &v207;
                  uint64_t v64 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v207, (_OWORD **)&v203)+ 56);
                  if (SHIBYTE(v202) >= 0) {
                    uint8x8_t v65 = (const std::string::value_type *)&v201;
                  }
                  else {
                    uint8x8_t v65 = (const std::string::value_type *)v201.i64[0];
                  }
                  if (SHIBYTE(v202) >= 0) {
                    std::string::size_type v66 = HIBYTE(v202);
                  }
                  else {
                    std::string::size_type v66 = v201.u64[1];
                  }
                  std::string::append(v64, v65, v66);
                  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v207.__r_.__value_.__l.__data_);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v207, "tap_is_mono_list");
                  unint64_t v203 = &v207;
                  int v67 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v207, (_OWORD **)&v203)+ 56);
                  if (SHIBYTE(v202) >= 0) {
                    unint64_t v68 = (const std::string::value_type *)&v201;
                  }
                  else {
                    unint64_t v68 = (const std::string::value_type *)v201.i64[0];
                  }
                  if (SHIBYTE(v202) >= 0) {
                    std::string::size_type v69 = HIBYTE(v202);
                  }
                  else {
                    std::string::size_type v69 = v201.u64[1];
                  }
                  std::string::append(v67, v68, v69);
                  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v207.__r_.__value_.__l.__data_);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v207, "tap_mute_behavior_list");
                  unint64_t v203 = &v207;
                  float v70 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v207, (_OWORD **)&v203)+ 56);
                  if (SHIBYTE(v202) >= 0) {
                    uint64_t v71 = (const std::string::value_type *)&v201;
                  }
                  else {
                    uint64_t v71 = (const std::string::value_type *)v201.i64[0];
                  }
                  if (SHIBYTE(v202) >= 0) {
                    std::string::size_type v72 = HIBYTE(v202);
                  }
                  else {
                    std::string::size_type v72 = v201.u64[1];
                  }
                  std::string::append(v70, v71, v72);
                  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v207.__r_.__value_.__l.__data_);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v207, "tap_is_exclusive_list");
                  unint64_t v203 = &v207;
                  unint64_t v73 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v207, (_OWORD **)&v203)+ 56);
                  if (SHIBYTE(v202) >= 0) {
                    uint64_t v74 = (const std::string::value_type *)&v201;
                  }
                  else {
                    uint64_t v74 = (const std::string::value_type *)v201.i64[0];
                  }
                  if (SHIBYTE(v202) >= 0) {
                    std::string::size_type v75 = HIBYTE(v202);
                  }
                  else {
                    std::string::size_type v75 = v201.u64[1];
                  }
                  std::string::append(v73, v74, v75);
                  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v207.__r_.__value_.__l.__data_);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v207, "tap_process_list_list");
                  unint64_t v203 = &v207;
                  uint64_t v76 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v207, (_OWORD **)&v203)+ 56);
                  if (SHIBYTE(v202) >= 0) {
                    uint64_t v77 = (const std::string::value_type *)&v201;
                  }
                  else {
                    uint64_t v77 = (const std::string::value_type *)v201.i64[0];
                  }
                  if (SHIBYTE(v202) >= 0) {
                    std::string::size_type v78 = HIBYTE(v202);
                  }
                  else {
                    std::string::size_type v78 = v201.u64[1];
                  }
                  std::string::append(v76, v77, v78);
                  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v207.__r_.__value_.__l.__data_);
                  }
                }
                std::string::basic_string[abi:ne180100]<0>(&v196, "tap_name_list");
                unint64_t v203 = &v196;
                uint64_t v79 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v196, (_OWORD **)&v203);
                HALS_Tap::GetName(&v203, *(const void **)(v51 + 56));
                if (!v203)
                {
                  uint64_t v162 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v162, "Could not construct");
                  __cxa_throw(v162, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                std::string::basic_string[abi:ne180100]<0>(&v194, "Unknown");
                CFStringRef v80 = (const __CFString *)v203;
                if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v207, v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v207 = v194;
                }
                if (v80 && (CFTypeID TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(v80)))
                {
                  applesauce::CF::details::CFString_get_value<false>((uint64_t)&__p, v80);
                  if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v207.__r_.__value_.__l.__data_);
                  }
                }
                else
                {
                  std::string __p = v207;
                }
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  p_p = &__p;
                }
                else {
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v83 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v83 = __p.__r_.__value_.__l.__size_;
                }
                std::string::append((std::string *)((char *)v79 + 56), (const std::string::value_type *)p_p, v83);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v194.__r_.__value_.__l.__data_);
                }
                if (v203) {
                  CFRelease(v203);
                }
                if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v196.__r_.__value_.__l.__data_);
                }
                std::string::basic_string[abi:ne180100]<0>(&v207, "tap_is_mono_list");
                unint64_t v203 = &v207;
                uint64_t v84 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v207, (_OWORD **)&v203);
                std::to_string(&v196, *(unsigned __int8 *)(v51 + 80));
                if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v85 = &v196;
                }
                else {
                  uint64_t v85 = (std::string *)v196.__r_.__value_.__r.__words[0];
                }
                if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v86 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v86 = v196.__r_.__value_.__l.__size_;
                }
                std::string::append((std::string *)((char *)v84 + 56), (const std::string::value_type *)v85, v86);
                if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v196.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v207.__r_.__value_.__l.__data_);
                }
                std::string::basic_string[abi:ne180100]<0>(&v207, "tap_mute_behavior_list");
                unint64_t v203 = &v207;
                int v87 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v207, (_OWORD **)&v203);
                std::string::basic_string[abi:ne180100]<0>(&v196, off_1E62312D8[*(int *)(v51 + 84)]);
                if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  char v88 = &v196;
                }
                else {
                  char v88 = (std::string *)v196.__r_.__value_.__r.__words[0];
                }
                if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v89 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v89 = v196.__r_.__value_.__l.__size_;
                }
                std::string::append((std::string *)((char *)v87 + 56), (const std::string::value_type *)v88, v89);
                if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v196.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v207.__r_.__value_.__l.__data_);
                }
                std::string::basic_string[abi:ne180100]<0>(&v207, "tap_is_exclusive_list");
                unint64_t v203 = &v207;
                __int16 v90 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v207, (_OWORD **)&v203);
                std::to_string(&v196, v52);
                if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v91 = &v196;
                }
                else {
                  uint64_t v91 = (std::string *)v196.__r_.__value_.__r.__words[0];
                }
                if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v92 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v92 = v196.__r_.__value_.__l.__size_;
                }
                std::string::append((std::string *)((char *)v90 + 56), (const std::string::value_type *)v91, v92);
                if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v196.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v207.__r_.__value_.__l.__data_);
                }
                std::string::basic_string[abi:ne180100]<0>(&v207, "tap_process_list_list");
                unint64_t v203 = &v207;
                uint64_t v93 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v207, (_OWORD **)&v203)+ 56);
                if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  char v94 = &v198;
                }
                else {
                  char v94 = (std::string *)v198.__r_.__value_.__r.__words[0];
                }
                if ((v198.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v95 = HIBYTE(v198.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v95 = v198.__r_.__value_.__l.__size_;
                }
                std::string::append(v93, (const std::string::value_type *)v94, v95);
                if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v207.__r_.__value_.__l.__data_);
                }
                uint64_t v5 = v185;
                if (cfa) {
                  operator delete(cfa);
                }
                if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v198.__r_.__value_.__l.__data_);
                }
                char v184 = 0;
              }
              HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v51, v50);
              ++v47;
            }
            while (v47 != v182);
          }
          if (SHIBYTE(v202) < 0) {
            operator delete((void *)v201.i64[0]);
          }
          CFStringRef cfb = CFStringCreateWithBytes(0, (const UInt8 *)"uid", 3, 0x8000100u, 0);
          if (!cfb)
          {
            unint64_t v168 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v168, "Could not construct");
            __cxa_throw(v168, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          CFStringRef v96 = CFStringCreateWithBytes(0, (const UInt8 *)"stream groups", 13, 0x8000100u, 0);
          if (!v96)
          {
            unint64_t v169 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v169, "Could not construct");
            __cxa_throw(v169, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          CFStringRef v176 = v96;
          int64x2_t v201 = 0uLL;
          uint8x8_t v202 = 0;
          if (!v192)
          {
LABEL_336:
            uint64_t v161 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v161, "Could not construct");
            __cxa_throw(v161, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(&v198, (CFDictionaryRef)v192, @"grid-out");
          if (v198.__r_.__value_.__s.__data_[8])
          {
            CFArrayRef theArray = (const __CFArray *)v198.__r_.__value_.__r.__words[0];
            if (v198.__r_.__value_.__r.__words[0])
            {
              CFIndex v175 = CFArrayGetCount((CFArrayRef)v198.__r_.__value_.__l.__data_);
              std::string::size_type v174 = v198.__r_.__value_.__r.__words[0];
              CFIndex v173 = v198.__r_.__value_.__r.__words[0]
                   ? CFArrayGetCount((CFArrayRef)v198.__r_.__value_.__l.__data_)
                   : 0;
              if (v175)
              {
                unint64_t v179 = 0;
                while (1)
                {
                  if (theArray == (const __CFArray *)v174 && v179 == v173) {
                    goto LABEL_274;
                  }
                  applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&__p, theArray, v179);
                  if (!__p.__r_.__value_.__r.__words[0]) {
                    goto LABEL_336;
                  }
                  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef const&>(&v204, (const __CFDictionary *)__p.__r_.__value_.__l.__data_, v176);
                  if ((_BYTE)v205)
                  {
                    CFArrayRef v97 = v204;
                    if (v204)
                    {
                      CFIndex v183 = CFArrayGetCount(v204);
                      CFDictionaryRef v180 = v204;
                      CFIndex v178 = v204 ? CFArrayGetCount(v204) : 0;
                      if (v183) {
                        break;
                      }
                    }
                  }
LABEL_271:
                  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v204);
                  if (__p.__r_.__value_.__r.__words[0]) {
                    CFRelease(__p.__r_.__value_.__l.__data_);
                  }
                  if (++v179 == v175) {
                    goto LABEL_274;
                  }
                }
                unint64_t v98 = 0;
                while (1)
                {
                  if (v97 == v180 && v98 == v178) {
                    goto LABEL_271;
                  }
                  CFArrayRef v99 = v97;
                  applesauce::CF::details::at_to<applesauce::CF::ArrayRef>((applesauce::CF::ArrayRef *)&v194, v97, v98);
                  CFArrayRef v100 = (const __CFArray *)v194.__r_.__value_.__r.__words[0];
                  if (v194.__r_.__value_.__r.__words[0]) {
                    break;
                  }
LABEL_270:
                  ++v98;
                  CFArrayRef v97 = v99;
                  if (v98 == v183) {
                    goto LABEL_271;
                  }
                }
                CFIndex v101 = CFArrayGetCount((CFArrayRef)v194.__r_.__value_.__l.__data_);
                CFIndex v102 = v101;
                std::string::size_type v103 = v194.__r_.__value_.__r.__words[0];
                if (v194.__r_.__value_.__r.__words[0])
                {
                  CFIndex v104 = CFArrayGetCount((CFArrayRef)v194.__r_.__value_.__l.__data_);
                  if (!v102)
                  {
LABEL_268:
                    if (v194.__r_.__value_.__r.__words[0]) {
                      CFRelease(v194.__r_.__value_.__l.__data_);
                    }
                    goto LABEL_270;
                  }
                }
                else
                {
                  CFIndex v104 = 0;
                  if (!v101) {
                    goto LABEL_268;
                  }
                }
                unint64_t v105 = 0;
                do
                {
                  if (v100 == (const __CFArray *)v103 && v105 == v104) {
                    break;
                  }
                  applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)v200, v100, v105);
                  if (!v200[0]) {
                    goto LABEL_336;
                  }
                  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,applesauce::CF::StringRef const&>(&v196, v200[0], cfb);
                  if (v196.__r_.__value_.__s.__data_[8])
                  {
                    if (v201.i64[1] >= (unint64_t)v202)
                    {
                      uint64_t v107 = (v201.i64[1] - v201.i64[0]) >> 3;
                      if ((unint64_t)(v107 + 1) >> 61) {
                        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                      }
                      unint64_t v108 = (uint64_t)&v202[-v201.i64[0]] >> 2;
                      if (v108 <= v107 + 1) {
                        unint64_t v108 = v107 + 1;
                      }
                      if ((unint64_t)&v202[-v201.i64[0]] >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v109 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v109 = v108;
                      }
                      uint64_t v209 = (std::string::size_type *)&v202;
                      if (v109)
                      {
                        unint64_t v111 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v109);
                      }
                      else
                      {
                        unint64_t v111 = 0;
                        uint64_t v110 = 0;
                      }
                      unint64_t v112 = (char *)&v111[v110];
                      std::string::size_type v208 = (std::string::size_type)v112;
                      mach_port_t v113 = std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v111[v107], v196.__r_.__value_.__l.__data_);
                      int v106 = v113 + 1;
                      v207.__r_.__value_.__r.__words[2] = (std::string::size_type)(v113 + 1);
                      uint8x8_t v114 = (void *)v201.i64[1];
                      uint64_t v115 = (void *)v201.i64[0];
                      if (v201.i64[1] == v201.i64[0])
                      {
                        int64x2_t v117 = vdupq_n_s64(v201.u64[1]);
                      }
                      else
                      {
                        do
                        {
                          uint64_t v116 = *--v114;
                          *--mach_port_t v113 = v116;
                          void *v114 = 0;
                        }
                        while (v114 != v115);
                        int64x2_t v117 = v201;
                        int v106 = (void *)v207.__r_.__value_.__r.__words[2];
                        unint64_t v112 = (char *)v208;
                      }
                      v201.i64[0] = (uint64_t)v113;
                      v201.i64[1] = (uint64_t)v106;
                      *(int64x2_t *)&v207.__r_.__value_.__r.__words[1] = v117;
                      std::string::size_type v118 = (std::string::size_type)v202;
                      uint8x8_t v202 = v112;
                      std::string::size_type v208 = v118;
                      v207.__r_.__value_.__r.__words[0] = v117.i64[0];
                      std::__split_buffer<applesauce::CF::StringRef>::~__split_buffer((uint64_t)&v207);
                      uint64_t v5 = v185;
                    }
                    else
                    {
                      int v106 = std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>((void *)v201.i64[1], v196.__r_.__value_.__l.__data_)+ 1;
                    }
                    v201.i64[1] = (uint64_t)v106;
                  }
                  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v196);
                  if (v200[0]) {
                    CFRelease(v200[0]);
                  }
                  ++v105;
                }
                while (v105 != v102);
                goto LABEL_268;
              }
            }
          }
LABEL_274:
          std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v198);
          CFRelease(v176);
          CFRelease(cfb);
          int64x2_t v119 = v201;
          if (v201.i64[1] - v201.i64[0] < 1)
          {
            long long v120 = 0;
            uint64_t v122 = 0;
          }
          else
          {
            long long v120 = (const __CFString **)std::get_temporary_buffer[abi:ne180100]<applesauce::CF::StringRef>((v201.i64[1] - v201.i64[0]) >> 3);
            uint64_t v122 = v121;
          }
          std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>((const __CFString **)v119.i64[0], (const __CFString **)v119.i64[1], (uint64_t)&v198, (v119.i64[1] - v119.i64[0]) >> 3, v120, v122);
          if (v120) {
            operator delete(v120);
          }
          std::logic_error v123 = (uint64_t *)std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<applesauce::CF::StringRef *>,std::__wrap_iter<applesauce::CF::StringRef *>,std::__equal_to &>((const __CFString **)v201.i64[0], (const __CFString **)v201.i64[1]);
          std::vector<applesauce::CF::StringRef>::erase((uint64_t)&v201, v123, (uint64_t *)v201.i64[1]);
          CFStringRef v124 = CFStringCreateWithBytes(0, (const UInt8 *)"uid", 3, 0x8000100u, 0);
          if (!v124)
          {
            v170 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v170, "Could not construct");
            __cxa_throw(v170, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          CFStringRef v125 = CFStringCreateWithBytes(0, (const UInt8 *)"stream groups", 13, 0x8000100u, 0);
          if (!v125)
          {
            unint64_t v171 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v171, "Could not construct");
            __cxa_throw(v171, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          memset(&v198, 0, sizeof(v198));
          if (!v192)
          {
LABEL_359:
            long long v172 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v172, "Could not construct");
            __cxa_throw(v172, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(&v204, (CFDictionaryRef)v192, @"grid-in");
          if (!(_BYTE)v205) {
            goto LABEL_313;
          }
          CFArrayRef v126 = v204;
          if (!v204) {
            goto LABEL_313;
          }
          CFIndex v127 = CFArrayGetCount(v204);
          CFIndex v128 = v127;
          CFDictionaryRef v129 = v204;
          if (v204)
          {
            CFIndex v130 = CFArrayGetCount(v204);
            if (!v128) {
              goto LABEL_313;
            }
          }
          else
          {
            CFIndex v130 = 0;
            if (!v127)
            {
LABEL_313:
              std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v204);
              CFRelease(v125);
              CFRelease(v124);
              long long v145 = *(_OWORD *)&v198.__r_.__value_.__l.__data_;
              unint64_t v146 = (uint64_t)(v198.__r_.__value_.__l.__size_ - v198.__r_.__value_.__r.__words[0]) >> 3;
              if ((uint64_t)(v198.__r_.__value_.__l.__size_ - v198.__r_.__value_.__r.__words[0]) < 1)
              {
                std::string::size_type v147 = 0;
                uint64_t v149 = 0;
              }
              else
              {
                std::string::size_type v147 = (const __CFString **)std::get_temporary_buffer[abi:ne180100]<applesauce::CF::StringRef>((uint64_t)(v198.__r_.__value_.__l.__size_ - v198.__r_.__value_.__r.__words[0]) >> 3);
                uint64_t v149 = v148;
              }
              std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>((const __CFString **)v145, *((const __CFString ***)&v145 + 1), (uint64_t)&v204, v146, v147, v149);
              if (v147) {
                operator delete(v147);
              }
              uint64_t v150 = (uint64_t *)std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<applesauce::CF::StringRef *>,std::__wrap_iter<applesauce::CF::StringRef *>,std::__equal_to &>((const __CFString **)v198.__r_.__value_.__l.__data_, (const __CFString **)v198.__r_.__value_.__l.__size_);
              std::vector<applesauce::CF::StringRef>::erase((uint64_t)&v198, v150, (uint64_t *)v198.__r_.__value_.__l.__size_);
              char v151 = 0;
              uint64_t v152 = 0;
              CFDictionaryRef v204 = (const __CFDictionary *)1;
              do
              {
                int v153 = *((_DWORD *)&v204 + v152);
                char v154 = v151;
                if (v153 == 1) {
                  int v155 = &v198;
                }
                else {
                  int v155 = (std::string *)&v201;
                }
                if (v155->__r_.__value_.__l.__size_ != v155->__r_.__value_.__r.__words[0])
                {
                  CFStringRef v156 = *(const __CFString **)v155->__r_.__value_.__l.__data_;
                  v189[0] = 0;
                  v189[1] = 0;
                  HALS_System::GetInstance(&v207, 0, v189);
                  uint64_t v157 = HALS_System::CopyDeviceByUID((HALS_System *)v207.__r_.__value_.__l.__data_, v156, 0);
                  v196.__r_.__value_.__r.__words[0] = (std::string::size_type)v157;
                  if (v207.__r_.__value_.__l.__size_) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v207.__r_.__value_.__l.__size_);
                  }
                  if (v157) {
                  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                  }
                  {
                    LODWORD(v207.__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)v207.__r_.__value_.__r.__words + 4) = (std::string::size_type)"HALS_IOContextReporter.cpp";
                    WORD2(v207.__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&v207.__r_.__value_.__r.__words[1] + 6) = 205;
                    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReportDeviceMetrics: no HALS_Device object", (uint8_t *)&v207, 0x12u);
                  }
                  v159 = __cxa_allocate_exception(0x10uLL);
                  *(void *)v159 = off_1F148A5D8;
                  v159[2] = 560947818;
                }
                char v151 = 1;
                uint64_t v152 = 1;
              }
              while ((v154 & 1) == 0);
              v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&v198;
              std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
              v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&v201;
              std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
              v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&v190;
              std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
              if (v192) {
                CFRelease(v192);
              }
              unint64_t v7 = v193;
              goto LABEL_331;
            }
          }
          unint64_t v131 = 0;
          do
          {
            if (v126 == v129 && v131 == v130) {
              break;
            }
            applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&__p, v126, v131);
            if (!__p.__r_.__value_.__r.__words[0]) {
              goto LABEL_359;
            }
            applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,applesauce::CF::StringRef const&>(&v196, (const __CFDictionary *)__p.__r_.__value_.__l.__data_, v124);
            if (v196.__r_.__value_.__s.__data_[8])
            {
              if (v198.__r_.__value_.__l.__size_ >= v198.__r_.__value_.__r.__words[2])
              {
                uint64_t v133 = (uint64_t)(v198.__r_.__value_.__l.__size_ - v198.__r_.__value_.__r.__words[0]) >> 3;
                if ((unint64_t)(v133 + 1) >> 61) {
                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v134 = (uint64_t)(v198.__r_.__value_.__r.__words[2] - v198.__r_.__value_.__r.__words[0]) >> 2;
                if (v134 <= v133 + 1) {
                  unint64_t v134 = v133 + 1;
                }
                if (v198.__r_.__value_.__r.__words[2] - v198.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v135 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v135 = v134;
                }
                uint64_t v209 = &v198.__r_.__value_.__r.__words[2];
                if (v135)
                {
                  v137 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v135);
                }
                else
                {
                  v137 = 0;
                  uint64_t v136 = 0;
                }
                std::string::size_type v138 = (std::string::size_type)&v137[v136];
                std::string::size_type v208 = v138;
                int v139 = std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v137[v133], v196.__r_.__value_.__l.__data_);
                uint64_t v132 = v139 + 1;
                v207.__r_.__value_.__r.__words[2] = (std::string::size_type)(v139 + 1);
                char v140 = (void *)v198.__r_.__value_.__l.__size_;
                std::string::size_type v141 = v198.__r_.__value_.__r.__words[0];
                if (v198.__r_.__value_.__l.__size_ == v198.__r_.__value_.__r.__words[0])
                {
                  int64x2_t v143 = vdupq_n_s64(v198.__r_.__value_.__l.__size_);
                }
                else
                {
                  do
                  {
                    uint64_t v142 = *--v140;
                    *--int v139 = v142;
                    void *v140 = 0;
                  }
                  while (v140 != (void *)v141);
                  int64x2_t v143 = *(int64x2_t *)&v198.__r_.__value_.__l.__data_;
                  uint64_t v132 = (void *)v207.__r_.__value_.__r.__words[2];
                  std::string::size_type v138 = v208;
                }
                v198.__r_.__value_.__r.__words[0] = (std::string::size_type)v139;
                v198.__r_.__value_.__l.__size_ = (std::string::size_type)v132;
                *(int64x2_t *)&v207.__r_.__value_.__r.__words[1] = v143;
                std::string::size_type v144 = v198.__r_.__value_.__r.__words[2];
                v198.__r_.__value_.__r.__words[2] = v138;
                std::string::size_type v208 = v144;
                v207.__r_.__value_.__r.__words[0] = v143.i64[0];
                std::__split_buffer<applesauce::CF::StringRef>::~__split_buffer((uint64_t)&v207);
                uint64_t v5 = v185;
              }
              else
              {
                uint64_t v132 = std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>((void *)v198.__r_.__value_.__l.__size_, v196.__r_.__value_.__l.__data_)+ 1;
              }
              v198.__r_.__value_.__l.__size_ = (std::string::size_type)v132;
            }
            std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v196);
            if (__p.__r_.__value_.__r.__words[0]) {
              CFRelease(__p.__r_.__value_.__l.__data_);
            }
            ++v131;
          }
          while (v131 != v128);
          goto LABEL_313;
        }
      }
      else
      {
        CFIndex v25 = 0;
        if (!Count) {
          goto LABEL_62;
        }
      }
      unint64_t v29 = 0;
      CFIndex v181 = v25;
      while (1)
      {
        if (v21 == v24 && v29 == v25) {
          goto LABEL_62;
        }
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v204, v21, v29);
        if (!v204) {
          break;
        }
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,applesauce::CF::StringRef const&>(&v198, v204, v19);
        if (v198.__r_.__value_.__s.__data_[8])
        {
          if (v190.i64[1] >= (unint64_t)v191)
          {
            uint64_t v31 = (v190.i64[1] - v190.i64[0]) >> 3;
            if ((unint64_t)(v31 + 1) >> 61) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v32 = (uint64_t)&v191[-v190.i64[0]] >> 2;
            if (v32 <= v31 + 1) {
              unint64_t v32 = v31 + 1;
            }
            if ((unint64_t)&v191[-v190.i64[0]] >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v32;
            }
            uint64_t v209 = (std::string::size_type *)&v191;
            if (v33)
            {
              char v35 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v33);
            }
            else
            {
              char v35 = 0;
              uint64_t v34 = 0;
            }
            char v36 = (char *)&v35[v34];
            std::string::size_type v208 = (std::string::size_type)v36;
            uint64_t v37 = std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v35[v31], v198.__r_.__value_.__l.__data_);
            std::logic_error v30 = v37 + 1;
            v207.__r_.__value_.__r.__words[2] = (std::string::size_type)(v37 + 1);
            uint64_t v38 = (void *)v190.i64[1];
            uint64_t v39 = (void *)v190.i64[0];
            if (v190.i64[1] == v190.i64[0])
            {
              int64x2_t v41 = vdupq_n_s64(v190.u64[1]);
            }
            else
            {
              do
              {
                uint64_t v40 = *--v38;
                *--uint64_t v37 = v40;
                *uint64_t v38 = 0;
              }
              while (v38 != v39);
              int64x2_t v41 = v190;
              std::logic_error v30 = (void *)v207.__r_.__value_.__r.__words[2];
              char v36 = (char *)v208;
            }
            v190.i64[0] = (uint64_t)v37;
            v190.i64[1] = (uint64_t)v30;
            *(int64x2_t *)&v207.__r_.__value_.__r.__words[1] = v41;
            std::string::size_type v42 = (std::string::size_type)v191;
            unint64_t v191 = v36;
            std::string::size_type v208 = v42;
            v207.__r_.__value_.__r.__words[0] = v41.i64[0];
            std::__split_buffer<applesauce::CF::StringRef>::~__split_buffer((uint64_t)&v207);
            CFIndex v25 = v181;
          }
          else
          {
            std::logic_error v30 = std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>((void *)v190.i64[1], v198.__r_.__value_.__l.__data_)+ 1;
          }
          v190.i64[1] = (uint64_t)v30;
        }
        std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v198);
        if (v204) {
          CFRelease(v204);
        }
        if (++v29 == v23) {
          goto LABEL_62;
        }
      }
      long long v163 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v163, "Could not construct");
    }
    else
    {
      long long v163 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v163, "Could not construct");
    }
    __cxa_throw(v163, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::to_string(&v207, 0);
  std::string::basic_string[abi:ne180100]<0>(&v201, "device_is_aggregate");
  v198.__r_.__value_.__r.__words[0] = (std::string::size_type)&v201;
  long long v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v201, &v198);
  uint64_t v27 = (void **)v26 + 7;
  if (*((char *)v26 + 79) < 0) {
    operator delete(*v27);
  }
  *(std::string *)uint64_t v27 = v207;
  *((unsigned char *)&v207.__r_.__value_.__s + 23) = 0;
  v207.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v202) < 0)
  {
    operator delete((void *)v201.i64[0]);
    if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v207.__r_.__value_.__l.__data_);
    }
  }
  if (HALS_Device::GetNumberStreamsExcludingReferenceStreams(v7, 1)) {
  if (HALS_Device::GetNumberStreamsExcludingReferenceStreams(v7, 0))
  }
LABEL_331:
  HALS_ObjectMap::ReleaseObject(v7, v28);
  HALS_ObjectMap::ReleaseObject(v5, v158);
}

void sub_1BAC39EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, HALS_ObjectMap *a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAC3A340(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,HALS_ObjectMap *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  if (a2)
  {
    *(void *)(v42 - 144) = &a41;
    std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](v42 - 144);
    *(void *)(v42 - 144) = v42 - 208;
    std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](v42 - 144);
    uint64_t v44 = a29;
    *(void *)(v42 - 144) = &a25;
    std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](v42 - 144);
    applesauce::CF::DictionaryRef::~DictionaryRef((applesauce::CF::DictionaryRef *)&a28);
    HALS_ObjectMap::ReleaseObject(v44, v45);
    HALS_ObjectMap::ReleaseObject(v41, v46);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAC39968);
  }
  JUMPOUT(0x1BAC3A330);
}

void sub_1BAC3A34C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,const void *a28,HALS_ObjectMap *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  if (a2)
  {
    uint64_t v44 = *(std::__shared_weak_count **)(v42 - 136);
    if (v44) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v44);
    }
    *(void *)(v42 - 144) = &a41;
    std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 144));
    *(void *)(v42 - 144) = v42 - 208;
    std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 144));
    uint64_t v45 = a29;
    *(void *)(v42 - 144) = &a25;
    std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 144));
    applesauce::CF::DictionaryRef::~DictionaryRef(&a28);
    HALS_ObjectMap::ReleaseObject(v45, v46);
    HALS_ObjectMap::ReleaseObject(v41, v47);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAC39968);
  }
  JUMPOUT(0x1BAC3A330);
}

void sub_1BAC3A364(uint64_t a1, int a2)
{
  if (a2)
  {
    pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
    JUMPOUT(0x1BAC3A388);
  }
  JUMPOUT(0x1BAC3A330);
}

void HALS_IOContextReporter::anonymous namespace'::ReportCurrentStreamInfo(uint64_t **a1, HALS_ObjectMap *a2)
{
  v75[1] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v61, ", ");
  std::string::basic_string[abi:ne180100]<0>(v55, "format_id");
  std::string::basic_string[abi:ne180100]<0>(v56, "bytes_per_packet");
  std::string::basic_string[abi:ne180100]<0>(v57, "frames_per_packet");
  std::string::basic_string[abi:ne180100]<0>(v58, "bytes_per_frame");
  std::string::basic_string[abi:ne180100]<0>(v59, "channels_per_frame");
  std::string::basic_string[abi:ne180100]<0>(v60, "bits_per_channel");
  uint64_t v50 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(a2);
  if (!v50)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_IOContextReporter.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 389;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReportTransportType: no HALS_IOContext object", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 560947818;
  }
  int v4 = 0;
  uint64_t v5 = 0;
  v75[0] = 1;
  uint64_t v47 = MEMORY[0x1E4F143A8];
  uint64_t v45 = &v64.__r_.__value_.__s.__data_[16];
  int v46 = ___ZNK14HALS_IOContext16GetNumberStreamsEb_block_invoke;
  do
  {
    int v6 = *((_DWORD *)v75 + v5);
    int v49 = v4;
    v64.__r_.__value_.__r.__words[0] = 0;
    v64.__r_.__value_.__l.__size_ = (std::string::size_type)&v64;
    v64.__r_.__value_.__r.__words[2] = 0x2000000000;
    LODWORD(v65) = 0;
    *(void *)AudioObjectPropertyAddress buf = v47;
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&buf[16] = v46;
    uint64_t v71 = &unk_1E6233E50;
    std::string::size_type v72 = &v64;
    unint64_t v73 = v50;
    LOBYTE(v74) = v6 == 1;
    unint64_t v7 = (HALB_Mutex *)(*(uint64_t (**)(HALS_ObjectMap *))(*(void *)v50 + 56))(v50);
    HALB_CommandGate::ExecuteCommand(v7, (uint64_t)buf);
    unint64_t v8 = *(unsigned int *)(v64.__r_.__value_.__l.__size_ + 24);
    _Block_object_dispose(&v64, 8);
    uint64_t v48 = &v45;
    MEMORY[0x1F4188790](v9);
    int v52 = (char *)&v45 - ((v10 + 15) & 0x3FFFFFFFF0);
    uint64_t v51 = 4 * v8;
    if (v8)
    {
      uint64_t v11 = 0;
      std::string::size_type v12 = MEMORY[0x1E4F143A8];
      do
      {
        v64.__r_.__value_.__r.__words[0] = v12;
        v64.__r_.__value_.__l.__size_ = 0x40000000;
        v64.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK14HALS_IOContext20GetStreamInfoAtIndexEbjR25AudioIOContext_StreamInfo_block_invoke;
        uint8x8_t v65 = &__block_descriptor_tmp_7_10824;
        BOOL v69 = v6 == 1;
        int v68 = v11;
        std::string::size_type v66 = v50;
        int v67 = buf;
        int v13 = (HALB_Mutex *)(*(uint64_t (**)(HALS_ObjectMap *))(*(void *)v50 + 56))(v50);
        HALB_CommandGate::ExecuteCommand(v13, (uint64_t)&v64);
        uint64_t v14 = v51;
        unsigned int v15 = &v52[4 * v11];
        int v16 = (int)v72;
        *(_DWORD *)unsigned int v15 = v71;
        unint64_t v17 = &v15[4 * v8];
        *(_DWORD *)unint64_t v17 = v16;
        unint64_t v18 = &v17[v14];
        int v19 = (int)v73;
        *(_DWORD *)unint64_t v18 = HIDWORD(v72);
        CFStringRef v20 = &v18[v14];
        *(_DWORD *)CFStringRef v20 = v19;
        CFArrayRef v21 = &v20[v14];
        int v22 = v74;
        *(_DWORD *)CFArrayRef v21 = HIDWORD(v73);
        *(_DWORD *)&v21[v14] = v22;
        ++v11;
      }
      while (v8 != v11);
    }
    if (v6 == 1) {
      CFIndex v23 = "input_";
    }
    else {
      CFIndex v23 = "output_";
    }
    std::string::basic_string[abi:ne180100]<0>(buf, v23);
    uint64_t v24 = 0;
    CFIndex v25 = v52;
    do
    {
      long long v26 = (unsigned int *)&v52[4 * v24 * v8];
      if (v8 < 0x81)
      {
LABEL_14:
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(v26, &v26[v8], v8, 0, 0);
      }
      else
      {
        unint64_t v27 = v8;
        while (1)
        {
          std::string v28 = (unsigned int *)operator new(4 * v27, MEMORY[0x1E4FBA2D0]);
          if (v28) {
            break;
          }
          BOOL v29 = v27 > 1;
          v27 >>= 1;
          if (!v29) {
            goto LABEL_14;
          }
        }
        unint64_t v32 = v28;
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(v26, &v26[v8], v8, v28, v27);
        operator delete(v32);
      }
      if (v8)
      {
        for (unint64_t i = 0; i != v8; ++i)
        {
          unsigned int v34 = *(_DWORD *)&v25[4 * i];
          if (v24)
          {
            std::to_string(&v64, v34);
          }
          else
          {
            v31.i32[0] = bswap32(v34);
            *(int8x8_t *)v31.i8 = vzip1_s8(*(int8x8_t *)v31.i8, *(int8x8_t *)v31.i8);
            v35.i64[0] = 0x1F0000001FLL;
            v35.i64[1] = 0x1F0000001FLL;
            v36.i64[0] = 0x5F0000005FLL;
            v36.i64[1] = 0x5F0000005FLL;
            *(int8x8_t *)v31.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v36, (uint32x4_t)vsraq_n_s32(v35, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v31.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v31.i8, (int8x8_t)0x2E002E002E002ELL);
            *((unsigned char *)&v64.__r_.__value_.__s + 23) = 4;
            LODWORD(v64.__r_.__value_.__l.__data_) = vmovn_s16(v31).u32[0];
            v64.__r_.__value_.__s.__data_[4] = 0;
          }
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v53, (const void **)buf, (const void **)&v55[3 * v24]);
          unint64_t v63 = v53;
          uint64_t v37 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, v53, (_OWORD **)&v63)+ 56);
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v38 = &v64;
          }
          else {
            uint64_t v38 = (std::string *)v64.__r_.__value_.__r.__words[0];
          }
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v64.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v64.__r_.__value_.__l.__size_;
          }
          std::string::append(v37, (const std::string::value_type *)v38, size);
          if (v54 < 0) {
            operator delete(v53[0]);
          }
          if (i < (v8 - 1))
          {
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)v53, (const void **)buf, (const void **)&v55[3 * v24]);
            unint64_t v63 = v53;
            uint64_t v40 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, v53, (_OWORD **)&v63)+ 56);
            int64x2_t v41 = (v62 & 0x80u) == 0 ? (const std::string::value_type *)v61 : (const std::string::value_type *)v61[0];
            uint64_t v42 = (v62 & 0x80u) == 0 ? (void *)v62 : v61[1];
            std::string::append(v40, v41, (std::string::size_type)v42);
            if (v54 < 0) {
              operator delete(v53[0]);
            }
          }
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v64.__r_.__value_.__l.__data_);
          }
        }
      }
      ++v24;
      v25 += v51;
    }
    while (v24 != 6);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    int v4 = 1;
    uint64_t v5 = 1;
  }
  while ((v49 & 1) == 0);
  HALS_ObjectMap::ReleaseObject(v50, v30);
  for (uint64_t j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v60[j + 2]) < 0) {
      operator delete((void *)v60[j]);
    }
  }
  if ((char)v62 < 0) {
    operator delete(v61[0]);
  }
}

void applesauce::CF::make_DictionaryRef<std::string,std::string>(CFDictionaryRef *a1, const UInt8 **a2)
{
  int64x2_t v61 = 0uLL;
  v62[0] = 0;
  unint64_t v4 = (unint64_t)a2[2];
  if (v4)
  {
    if (v4 >> 60) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    BOOL v69 = v62;
    uint64_t v5 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v4);
    unint64_t v7 = &v5[16 * v6];
    v67.i64[1] = (uint64_t)v5;
    unint64_t v68 = (unint64_t)v7;
    unint64_t v8 = (void *)v61.i64[1];
    uint64_t v9 = (void *)v61.i64[0];
    if (v61.i64[1] == v61.i64[0])
    {
      int64x2_t v12 = vdupq_n_s64(v61.u64[1]);
      uint64_t v10 = v5;
    }
    else
    {
      uint64_t v10 = v5;
      do
      {
        uint64_t v11 = *(v8 - 2);
        v8 -= 2;
        *((void *)v10 - 2) = v11;
        v10 -= 16;
        *unint64_t v8 = 0;
        *((void *)v10 + 1) = v8[1];
        v8[1] = 0;
      }
      while (v8 != v9);
      int64x2_t v12 = v61;
      uint64_t v5 = (char *)v67.i64[1];
      unint64_t v7 = (char *)v68;
    }
    v61.i64[0] = (uint64_t)v10;
    v61.i64[1] = (uint64_t)v5;
    int64x2_t v67 = v12;
    unint64_t v13 = v62[0];
    v62[0] = v7;
    unint64_t v68 = v13;
    keys = (void **)v12.i64[0];
    std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&keys);
  }
  int v16 = *a2;
  uint64_t v14 = a2 + 1;
  unsigned int v15 = v16;
  if (v16 == (const UInt8 *)v14)
  {
    unint64_t v17 = (CFStringRef *)v61.i64[1];
  }
  else
  {
    unint64_t v17 = (CFStringRef *)v61.i64[1];
    do
    {
      if ((unint64_t)v17 >= v62[0])
      {
        uint64_t v18 = ((uint64_t)v17 - v61.i64[0]) >> 4;
        if ((unint64_t)(v18 + 1) >> 60) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v19 = (v62[0] - v61.i64[0]) >> 3;
        if (v19 <= v18 + 1) {
          unint64_t v19 = v18 + 1;
        }
        if (v62[0] - v61.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL) {
          unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v19;
        }
        BOOL v69 = v62;
        if (v20) {
          unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v20);
        }
        else {
          uint64_t v21 = 0;
        }
        keys = (void **)v20;
        v67.i64[0] = v20 + 16 * v18;
        v67.i64[1] = v67.i64[0];
        unint64_t v68 = v20 + 16 * v21;
        applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::string const&>((CFStringRef *)v67.i64[0], v15 + 32, (uint64_t)(v15 + 56));
        uint64_t v22 = v67.i64[0];
        unint64_t v17 = (CFStringRef *)(v67.i64[1] + 16);
        v67.i64[1] += 16;
        CFIndex v23 = (void *)v61.i64[1];
        uint64_t v24 = (void *)v61.i64[0];
        if (v61.i64[1] == v61.i64[0])
        {
          int64x2_t v26 = vdupq_n_s64(v61.u64[1]);
        }
        else
        {
          do
          {
            uint64_t v25 = *(v23 - 2);
            v23 -= 2;
            *(void *)(v22 - 16) = v25;
            v22 -= 16;
            *CFIndex v23 = 0;
            *(void *)(v22 + 8) = v23[1];
            v23[1] = 0;
          }
          while (v23 != v24);
          int64x2_t v26 = v61;
          unint64_t v17 = (CFStringRef *)v67.i64[1];
        }
        v61.i64[0] = v22;
        v61.i64[1] = (uint64_t)v17;
        int64x2_t v67 = v26;
        unint64_t v27 = v62[0];
        v62[0] = v68;
        unint64_t v68 = v27;
        keys = (void **)v26.i64[0];
        std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&keys);
      }
      else
      {
        applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::string const&>(v17, v15 + 32, (uint64_t)(v15 + 56));
        v17 += 2;
      }
      v61.i64[1] = (uint64_t)v17;
      std::string v28 = (UInt8 *)*((void *)v15 + 1);
      if (v28)
      {
        do
        {
          BOOL v29 = (const UInt8 **)v28;
          std::string v28 = *(UInt8 **)v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          BOOL v29 = (const UInt8 **)*((void *)v15 + 2);
          BOOL v30 = *v29 == v15;
          unsigned int v15 = (const UInt8 *)v29;
        }
        while (!v30);
      }
      unsigned int v15 = (const UInt8 *)v29;
    }
    while (v29 != v14);
  }
  uint64_t v31 = ((uint64_t)v17 - v61.i64[0]) >> 4;
  keys = 0;
  int64x2_t v67 = 0uLL;
  std::vector<void const*>::reserve((void **)&keys, v31);
  values = 0;
  std::string v64 = 0;
  unint64_t v65 = 0;
  std::vector<void const*>::reserve((void **)&values, v31);
  unint64_t v33 = (void **)v61.i64[1];
  for (unint64_t i = (void **)v61.i64[0]; i != v33; i += 2)
  {
    unsigned int v34 = *i;
    if (!*i || !i[1])
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int32x4_t v35 = (void **)v67.i64[0];
    if (v67.i64[0] >= (unint64_t)v67.i64[1])
    {
      uint64_t v37 = keys;
      uint64_t v38 = (v67.i64[0] - (uint64_t)keys) >> 3;
      unint64_t v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 61) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v40 = v67.i64[1] - (void)keys;
      if ((v67.i64[1] - (uint64_t)keys) >> 2 > v39) {
        unint64_t v39 = v40 >> 2;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v39;
      }
      if (v41) {
        unint64_t v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v41);
      }
      else {
        uint64_t v42 = 0;
      }
      uint64_t v43 = (void **)(v41 + 8 * v38);
      *uint64_t v43 = v34;
      uint32x4_t v36 = v43 + 1;
      if (v35 != v37)
      {
        do
        {
          uint64_t v44 = *--v35;
          *--uint64_t v43 = v44;
        }
        while (v35 != v37);
        int32x4_t v35 = keys;
      }
      keys = v43;
      v67.i64[1] = v41 + 8 * v42;
      if (v35) {
        operator delete(v35);
      }
    }
    else
    {
      *(void *)v67.i64[0] = v34;
      uint32x4_t v36 = v35 + 1;
    }
    v67.i64[0] = (uint64_t)v36;
    uint64_t v45 = i[1];
    int v46 = v64;
    if ((unint64_t)v64 >= v65)
    {
      uint64_t v48 = values;
      uint64_t v49 = v64 - values;
      unint64_t v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 61) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v51 = v65 - (void)values;
      if ((uint64_t)(v65 - (void)values) >> 2 > v50) {
        unint64_t v50 = v51 >> 2;
      }
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v52 = v50;
      }
      if (v52) {
        unint64_t v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v52);
      }
      else {
        uint64_t v53 = 0;
      }
      char v54 = (void **)(v52 + 8 * v49);
      _opaque_pthread_t *v54 = v45;
      uint64_t v47 = v54 + 1;
      if (v46 != v48)
      {
        do
        {
          mach_port_t v55 = *--v46;
          *--char v54 = v55;
        }
        while (v46 != v48);
        int v46 = values;
      }
      values = v54;
      unint64_t v65 = v52 + 8 * v53;
      if (v46) {
        operator delete(v46);
      }
    }
    else
    {
      std::string *v64 = v45;
      uint64_t v47 = v46 + 1;
    }
    std::string v64 = v47;
  }
  int v56 = keys;
  std::string::size_type v57 = values;
  CFDictionaryRef v58 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v31, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  if (!v58)
  {
    CFTypeRef v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v60, "Could not construct");
    __cxa_throw(v60, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v57) {
    operator delete(v57);
  }
  if (v56) {
    operator delete(v56);
  }
  keys = (void **)&v61;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&keys);
  *a1 = v58;
}

void sub_1BAC3B060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *__p, uint64_t a14, uint64_t a15, void *a16)
{
  __cxa_free_exception(v16);
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  std::string __p = &a9;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void *___Z28AudioStatisticsLibraryLoaderv_block_invoke()
{
  __n128 result = dlopen("/usr/lib/libAudioStatistics.dylib", 1);
  if (result)
  {
    uint64_t v1 = result;
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(result, "CreateSharedCAReportingClient");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientCreateReporterID");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientCreateReporterIDFromSessionID");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientCreatePerformanceReporterID");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientStartReporter");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientStopReporter");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientSetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientGetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientSetConfiguration");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientCopyConfiguration");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void, void, void))dlsym(v1, "CAReportingClientSendMessage");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = dlsym(v1, "CAReportingClientSendSingleMessage");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientDestroyReporterID");
    __n128 result = dlsym(v1, "CAReportingClientRequestMessage");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)result;
  }
  return result;
}

void std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
}

CFStringRef *applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::string const&>(CFStringRef *a1, const UInt8 *a2, uint64_t a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v8 = *(char *)(a3 + 23);
  if (v8 >= 0) {
    uint64_t v9 = (const UInt8 *)a3;
  }
  else {
    uint64_t v9 = *(const UInt8 **)a3;
  }
  if (v8 >= 0) {
    CFIndex v10 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    CFIndex v10 = *(void *)(a3 + 8);
  }
  CFStringRef v11 = CFStringCreateWithBytes(0, v9, v10, 0x8000100u, 0);
  a1[1] = v11;
  if (!v11)
  {
    uint64_t v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
    __cxa_throw(v14, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return a1;
}

void sub_1BAC3B49C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(i - 16);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unsigned int *std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(unsigned int *result, unsigned int *a2, unint64_t a3, unsigned int *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    CFIndex v6 = result;
    if (a3 == 2)
    {
      unsigned int v7 = *(a2 - 1);
      unsigned int v8 = *result;
      if (v7 < *result)
      {
        void *result = v7;
        *(a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      unint64_t v19 = (char *)a4;
      unint64_t v20 = a3 >> 1;
      uint64_t v21 = &result[a3 >> 1];
      unint64_t v22 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(result, v21, v22, a4);
        CFIndex v23 = (unsigned int *)&v19[4 * v20];
        __n128 result = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v23);
        uint64_t v24 = &v19[4 * a3];
        uint64_t v25 = v23;
        while (v25 != (unsigned int *)v24)
        {
          unsigned int v26 = *v25;
          BOOL v27 = *v25 < *(_DWORD *)v19;
          if (*v25 >= *(_DWORD *)v19) {
            unsigned int v26 = *(_DWORD *)v19;
          }
          v19 += 4 * (*v25 >= *(_DWORD *)v19);
          v25 += v27;
          *v6++ = v26;
          if (v19 == (char *)v23)
          {
            if (v25 != (unsigned int *)v24)
            {
              uint64_t v28 = 0;
              do
              {
                v6[v28] = v25[v28];
                ++v28;
              }
              while (&v25[v28] != (unsigned int *)v24);
            }
            return result;
          }
        }
        if (v19 != (char *)v23)
        {
          uint64_t v29 = 0;
          do
          {
            v6[v29] = *(_DWORD *)&v19[v29 * 4];
            ++v29;
          }
          while (&v19[v29 * 4] != (char *)v23);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(result, v21, v22, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v19, a5);
        return std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(v6, &v6[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v19, a5);
      }
    }
    else if (result != a2)
    {
      CFIndex v10 = result + 1;
      if (result + 1 != a2)
      {
        uint64_t v11 = 4;
        int64x2_t v12 = result;
        do
        {
          unsigned int v14 = *v12;
          unsigned int v13 = v12[1];
          int64x2_t v12 = v10;
          if (v13 < v14)
          {
            uint64_t v15 = v11;
            while (1)
            {
              *(unsigned int *)((char *)result + v15) = v14;
              uint64_t v16 = v15 - 4;
              if (v15 == 4) {
                break;
              }
              unsigned int v14 = *(unsigned int *)((char *)result + v15 - 8);
              v15 -= 4;
              if (v13 >= v14)
              {
                unint64_t v17 = (unsigned int *)((char *)result + v16);
                goto LABEL_15;
              }
            }
            unint64_t v17 = result;
LABEL_15:
            *unint64_t v17 = v13;
          }
          CFIndex v10 = v12 + 1;
          v11 += 4;
        }
        while (v12 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t a1, const void **a2, const void **a3)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (*((char *)a3 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v6 = (size_t)a3[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a1, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    unsigned int v8 = (char *)result;
  }
  else {
    unsigned int v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  CFIndex v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v11 = a3;
    }
    else {
      uint64_t v11 = *a3;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void *a2, _OWORD **a3)
{
  size_t v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  size_t v6 = *v5;
  if (!*v5)
  {
    unsigned int v7 = (uint64_t **)v5;
    size_t v6 = operator new(0x50uLL);
    v11[1] = a1 + 1;
    unsigned int v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    *unsigned int v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((void *)v6 + 8) = 0;
    *((void *)v6 + 9) = 0;
    *((void *)v6 + 7) = 0;
    char v12 = 1;
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

unsigned int *std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(unsigned int *result, unsigned int *a2, unint64_t a3, unsigned int *a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    size_t v6 = result;
    if (a3 == 1)
    {
LABEL_9:
      *uint64_t v4 = *v6;
      return result;
    }
    if (a3 == 2)
    {
      unsigned int v9 = *(a2 - 1);
      unsigned int v8 = v9;
      BOOL v10 = v9 >= *result;
      if (v9 >= *result) {
        unsigned int v8 = *result;
      }
      *a4 = v8;
      uint64_t v4 = a4 + 1;
      if (v10) {
        size_t v6 = a2 - 1;
      }
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v20 = &result[a3 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(result, v20, a3 >> 1, a4, a3 >> 1);
      uint64_t result = (unsigned int *)std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(&v6[a3 >> 1], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      uint64_t v21 = (int *)&v6[a3 >> 1];
      while (v21 != (int *)a2)
      {
        unsigned int v22 = *v21;
        BOOL v23 = *v21 >= *v6;
        if (*v21 >= *v6) {
          unsigned int v22 = *v6;
        }
        v21 += *v21 < *v6;
        v6 += v23;
        *v4++ = v22;
        if (v6 == v20)
        {
          if (v21 != (int *)a2)
          {
            uint64_t v24 = 0;
            do
            {
              v4[v24] = v21[v24];
              ++v24;
            }
            while (&v21[v24] != (int *)a2);
          }
          return result;
        }
      }
      if (v6 != v20)
      {
        uint64_t v25 = 0;
        do
        {
          v4[v25] = v6[v25];
          ++v25;
        }
        while (&v6[v25] != v20);
      }
    }
    else if (result != a2)
    {
      uint64_t v11 = result + 1;
      *a4 = *result;
      if (result + 1 != a2)
      {
        uint64_t v12 = 0;
        uint64_t v13 = a4;
        unsigned int v14 = a4;
        do
        {
          unsigned int v16 = *v14++;
          unsigned int v15 = v16;
          if (*v11 >= v16)
          {
            unsigned int *v14 = *v11;
          }
          else
          {
            v13[1] = v15;
            unint64_t v17 = a4;
            if (v13 != a4)
            {
              uint64_t v18 = v12;
              while (1)
              {
                unint64_t v17 = (unsigned int *)((char *)a4 + v18);
                unsigned int v19 = *(unsigned int *)((char *)a4 + v18 - 4);
                if (*v11 >= v19) {
                  break;
                }
                *unint64_t v17 = v19;
                v18 -= 4;
                if (!v18)
                {
                  unint64_t v17 = a4;
                  break;
                }
              }
            }
            *unint64_t v17 = *v11;
          }
          ++v11;
          v12 += 4;
          uint64_t v13 = v14;
        }
        while (v11 != a2);
      }
    }
  }
  return result;
}

unsigned int *std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(unsigned int *result, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v8 = a5;
    uint64_t v11 = result;
    while (v8 > a7 && a4 > a7)
    {
      if (!a4) {
        return result;
      }
      unsigned int v12 = *a2;
      while (1)
      {
        unsigned int v13 = *v11;
        if (v12 < *v11) {
          break;
        }
        ++v11;
        if (!--a4) {
          return result;
        }
      }
      if (a4 >= v8)
      {
        if (a4 == 1)
        {
          unsigned int *v11 = v12;
          *a2 = v13;
          return result;
        }
        if (a4 >= 0) {
          uint64_t v24 = a4;
        }
        else {
          uint64_t v24 = a4 + 1;
        }
        uint64_t v23 = v24 >> 1;
        unint64_t v17 = &v11[v24 >> 1];
        unsigned int v16 = a3;
        if (a3 != a2)
        {
          unint64_t v25 = a3 - a2;
          unsigned int v16 = a2;
          do
          {
            unint64_t v26 = v25 >> 1;
            BOOL v27 = &v16[v25 >> 1];
            unsigned int v29 = *v27;
            uint64_t v28 = v27 + 1;
            v25 += ~(v25 >> 1);
            if (v29 < *v17) {
              unsigned int v16 = v28;
            }
            else {
              unint64_t v25 = v26;
            }
          }
          while (v25);
        }
        uint64_t v15 = v16 - a2;
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v14 = v8;
        }
        else {
          uint64_t v14 = v8 + 1;
        }
        uint64_t v15 = v14 >> 1;
        unsigned int v16 = &a2[v14 >> 1];
        unint64_t v17 = a2;
        if (a2 != v11)
        {
          unint64_t v18 = a2 - v11;
          unint64_t v17 = v11;
          do
          {
            unint64_t v19 = v18 >> 1;
            unint64_t v20 = &v17[v18 >> 1];
            unsigned int v22 = *v20;
            uint64_t v21 = v20 + 1;
            v18 += ~(v18 >> 1);
            if (*v16 < v22) {
              unint64_t v18 = v19;
            }
            else {
              unint64_t v17 = v21;
            }
          }
          while (v18);
        }
        uint64_t v23 = v17 - v11;
      }
      BOOL v30 = v16;
      if (v17 != a2)
      {
        BOOL v30 = v17;
        if (a2 != v16)
        {
          if (v17 + 1 == a2)
          {
            unsigned int v71 = *v17;
            int64_t v37 = (char *)v16 - (char *)a2;
            uint64_t v73 = v23;
            std::string::size_type v75 = a6;
            uint64_t v38 = a3;
            uint64_t v39 = v15;
            memmove(v17, a2, (char *)v16 - (char *)a2);
            uint64_t v15 = v39;
            uint64_t v23 = v73;
            a6 = v75;
            a3 = v38;
            BOOL v30 = (unsigned int *)((char *)v17 + v37);
            unsigned int *v30 = v71;
          }
          else if (a2 + 1 == v16)
          {
            unsigned int v40 = *(v16 - 1);
            BOOL v30 = v17 + 1;
            if (v16 - 1 != v17)
            {
              uint64_t v74 = v23;
              uint64_t v76 = a6;
              unint64_t v41 = a3;
              uint64_t v42 = v15;
              unsigned int v72 = *(v16 - 1);
              memmove(v17 + 1, v17, (char *)(v16 - 1) - (char *)v17);
              unsigned int v40 = v72;
              uint64_t v15 = v42;
              uint64_t v23 = v74;
              a6 = v76;
              a3 = v41;
            }
            *unint64_t v17 = v40;
          }
          else
          {
            uint64_t v31 = a2 - v17;
            if (v31 == v16 - a2)
            {
              uint64_t v32 = 0;
              do
              {
                unsigned int v33 = v17[v32];
                v17[v32] = a2[v32];
                uint64_t v34 = (uint64_t)&v17[v32 + 1];
                a2[v32] = v33;
                uint64_t v35 = (uint64_t)&a2[++v32];
              }
              while ((unsigned int *)v34 != a2 && v35 != (void)v16);
              BOOL v30 = a2;
            }
            else
            {
              uint64_t v43 = v16 - a2;
              uint64_t v44 = a2 - v17;
              do
              {
                uint64_t v45 = v44;
                uint64_t v44 = v43;
                uint64_t v43 = v45 % v43;
              }
              while (v43);
              if (v44)
              {
                int v46 = &v17[v44];
                do
                {
                  unsigned int v48 = *--v46;
                  unsigned int v47 = v48;
                  uint64_t v49 = &v46[v31];
                  unint64_t v50 = v46;
                  do
                  {
                    uint64_t v51 = v50;
                    unint64_t v50 = v49;
                    *uint64_t v51 = *v49;
                    BOOL v52 = __OFSUB__(v31, v16 - v49);
                    uint64_t v54 = v31 - (v16 - v49);
                    char v53 = (v54 < 0) ^ v52;
                    uint64_t v49 = &v17[v54];
                    if (v53) {
                      uint64_t v49 = &v50[v31];
                    }
                  }
                  while (v49 != v46);
                  *unint64_t v50 = v47;
                }
                while (v46 != v17);
              }
              BOOL v30 = &v17[v16 - a2];
            }
          }
        }
      }
      a4 -= v23;
      v8 -= v15;
      if (v23 + v15 >= a4 + v8)
      {
        uint64_t v58 = a4;
        uint64_t v59 = v15;
        int v56 = a6;
        uint64_t result = (unsigned int *)std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(v30, v16, a3, v58, v8, a6, a7);
        unsigned int v16 = v17;
        uint64_t v8 = v59;
        a4 = v23;
        a3 = v30;
      }
      else
      {
        mach_port_t v55 = v11;
        int v56 = a6;
        std::string::size_type v57 = a3;
        uint64_t result = (unsigned int *)std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,unsigned int *>(v55, v17, v30, v23, v15, a6, a7);
        a3 = v57;
        uint64_t v11 = v30;
      }
      a2 = v16;
      a6 = v56;
      if (!v8) {
        return result;
      }
    }
    if (a4 <= v8)
    {
      if (v11 != a2)
      {
        uint64_t v66 = 0;
        do
        {
          *(_DWORD *)&a6[v66 * 4] = v11[v66];
          ++v66;
        }
        while (&v11[v66] != a2);
        int64x2_t v67 = &a6[v66 * 4];
        if (v67 != a6)
        {
          while (a2 != a3)
          {
            unsigned int v68 = *a2;
            BOOL v69 = *a2 < *(_DWORD *)a6;
            if (*a2 >= *(_DWORD *)a6) {
              unsigned int v68 = *(_DWORD *)a6;
            }
            a6 += 4 * (*a2 >= *(_DWORD *)a6);
            a2 += v69;
            *v11++ = v68;
            if (a6 == v67) {
              return result;
            }
          }
          return (unsigned int *)memmove(v11, a6, v67 - a6);
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v60 = 0;
      do
      {
        *(_DWORD *)&a6[v60 * 4] = a2[v60];
        ++v60;
      }
      while (&a2[v60] != a3);
      int64x2_t v61 = &a6[v60 * 4];
      if (v61 != a6)
      {
        unsigned __int8 v62 = a3 - 1;
        while (a2 != v11)
        {
          unsigned int v63 = *((_DWORD *)v61 - 1);
          unsigned int v64 = *(a2 - 1);
          BOOL v65 = v63 >= v64;
          if (v63 <= v64) {
            unsigned int v63 = *(a2 - 1);
          }
          if (v65) {
            v61 -= 4;
          }
          else {
            --a2;
          }
          *v62-- = v63;
          if (v61 == a6) {
            return result;
          }
        }
        uint64_t v70 = 0;
        do
        {
          v62[v70] = *(_DWORD *)&v61[v70 * 4 - 4];
          --v70;
        }
        while (&v61[v70 * 4] != a6);
      }
    }
  }
  return result;
}

void HALS_IOContextReporter::anonymous namespace'::PopulateDevice(uint64_t **a1, HALS_IODevice **a2, int a3, char a4)
{
  if (a3) {
    unsigned int v7 = 1768845428;
  }
  else {
    unsigned int v7 = 1869968496;
  }
  int TransportType = HALS_IODevice::GetTransportType(*a2);
  if (TransportType <= 1685090931)
  {
    if (TransportType <= 1651274861)
    {
      switch(TransportType)
      {
        case 825440564:
          unsigned int v9 = "FireWire";
LABEL_41:
          std::string::basic_string[abi:ne180100]<0>(&v50, v9);
          std::string::basic_string[abi:ne180100]<0>(&v48, "device_transport_list");
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v47, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
          }
          else {
            std::string v47 = v50;
          }
          std::operator+<char>();
          v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
          BOOL v10 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, v53, &v40)+ 56);
          if (SHIBYTE(v53[0].__col_) < 0) {
            operator delete(v53[0].__loc_.__locale_);
          }
          if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v11 = &v47;
          }
          else {
            uint64_t v11 = (std::string *)v47.__r_.__value_.__r.__words[0];
          }
          if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v47.__r_.__value_.__l.__size_;
          }
          std::string::append(v10, (const std::string::value_type *)v11, size);
          if ((a4 & 1) == 0) {
            std::string::append(v10, ", ", 2uLL);
          }
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v47.__r_.__value_.__l.__data_);
          }
          if (v49 < 0) {
            operator delete(v48);
          }
          LODWORD(v40.__r_.__value_.__l.__data_) = 1818456950;
          *(std::string::size_type *)((char *)v40.__r_.__value_.__r.__words + 4) = v7;
          memset(v53, 0, 24);
          (*(void (**)(void))(*(void *)*a2 + 616))();
          ct = v53[0].__ct_;
          if (ct == (const std::ctype<char> *)v14)
          {
            float v17 = 1.0;
          }
          else
          {
            unsigned int v16 = v14;
            float v17 = 0.0;
            do
            {
              uint64_t v18 = *v16;
              uint64_t v19 = *(unsigned int *)(*v16 + 16);
              uint64_t v51 = 0;
              (*(void (**)(uint64_t, uint64_t, std::string *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)v18 + 112))(v18, v19, &v40, 4, &v51, (char *)&v51 + 4, 0, 0, 0);
              float v20 = *((float *)&v51 + 1);
              unsigned int v16 = v21;
              if (v17 < v20) {
                float v17 = v20;
              }
            }
            while (ct != (const std::ctype<char> *)v21);
          }
          HALS_Device::BasicControlList::~BasicControlList((HALS_ObjectMap ***)v53, v15);
          std::string::basic_string[abi:ne180100]<0>(&__p, "device_volume_list");
          std::to_string(&v44, v17);
          std::operator+<char>();
          v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
          unsigned int v22 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, v53, &v40)+ 56);
          if (SHIBYTE(v53[0].__col_) < 0) {
            operator delete(v53[0].__loc_.__locale_);
          }
          if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v23 = &v44;
          }
          else {
            uint64_t v23 = (std::string *)v44.__r_.__value_.__r.__words[0];
          }
          if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v24 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v24 = v44.__r_.__value_.__l.__size_;
          }
          std::string::append(v22, (const std::string::value_type *)v23, v24);
          if ((a4 & 1) == 0) {
            std::string::append(v22, ", ", 2uLL);
          }
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v44.__r_.__value_.__l.__data_);
          }
          if (v46 < 0) {
            operator delete(__p);
          }
          LODWORD(v40.__r_.__value_.__l.__data_) = 1650685548;
          *(std::string::size_type *)((char *)v40.__r_.__value_.__r.__words + 4) = v7;
          memset(v53, 0, 24);
          (*(void (**)(void))(*(void *)*a2 + 616))();
          unint64_t v25 = v53[0].__ct_;
          if (v25 == (const std::ctype<char> *)v26)
          {
            BOOL v29 = 0;
          }
          else
          {
            uint64_t v28 = v26;
            LOBYTE(v29) = 1;
            BOOL v30 = (uint64_t *)v25;
            do
            {
              if (v29)
              {
                uint64_t v31 = *v28;
                uint64_t v32 = *(unsigned int *)(*v28 + 16);
                uint64_t v52 = 0;
                (*(void (**)(uint64_t, uint64_t, std::string *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)v31 + 112))(v31, v32, &v40, 4, &v52, (char *)&v52 + 4, 0, 0, 0);
                BOOL v29 = HIDWORD(v52) != 0;
                BOOL v30 = (uint64_t *)v53[0].__ct_;
              }
              else
              {
                BOOL v29 = 0;
              }
            }
            while (v25 != (const std::ctype<char> *)v28);
          }
          HALS_Device::BasicControlList::~BasicControlList((HALS_ObjectMap ***)v53, v27);
          std::string::basic_string[abi:ne180100]<0>(&v42, "device_is_muted_list");
          std::to_string(&v41, v29);
          std::operator+<char>();
          v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
          unsigned int v33 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, v53, &v40)+ 56);
          if (SHIBYTE(v53[0].__col_) < 0) {
            operator delete(v53[0].__loc_.__locale_);
          }
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v34 = &v41;
          }
          else {
            uint64_t v34 = (std::string *)v41.__r_.__value_.__r.__words[0];
          }
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v35 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v35 = v41.__r_.__value_.__l.__size_;
          }
          std::string::append(v33, (const std::string::value_type *)v34, v35);
          if ((a4 & 1) == 0) {
            std::string::append(v33, ", ", 2uLL);
          }
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v41.__r_.__value_.__l.__data_);
          }
          if (v43 < 0) {
            operator delete(v42);
          }
          uint32x4_t v36 = (const void *)(*(uint64_t (**)(void))(*(void *)*a2 + 200))();
          int64_t v37 = v36;
          if (v36) {
            CFRetain(v36);
          }
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v53, v37);
          if (v53[0].__loc_.__locale_)
          {
            applesauce::CF::convert_to<std::string,0>((uint64_t)&v40, (const __CFString *)v53[0].__loc_.__locale_);
            if (v53[0].__loc_.__locale_) {
              CFRelease(v53[0].__loc_.__locale_);
            }
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v39, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
            }
            else {
              std::string v39 = v40;
            }
            std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v53, "[a-fA-F0-9:]{17}|[a-fA-F0-9]{12}|[a-fA-F0-9.]{5}|[a-fA-F0-9-]{4}");
          }
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        case 1634300528:
          unsigned int v9 = "AirPlay";
          goto LABEL_41;
        case 1651271009:
          unsigned int v9 = "BluetoothLE";
          goto LABEL_41;
      }
    }
    else if (TransportType > 1667463011)
    {
      if (TransportType == 1667463012)
      {
        unsigned int v9 = "ContinuityCaptureWired";
        goto LABEL_41;
      }
      if (TransportType == 1667463020)
      {
        unsigned int v9 = "ContinuityCaptureWireless";
        goto LABEL_41;
      }
    }
    else
    {
      if (TransportType == 1651274862)
      {
        unsigned int v9 = "BuiltIn";
        goto LABEL_41;
      }
      if (TransportType == 1651275109)
      {
        unsigned int v9 = "Bluetooth";
        goto LABEL_41;
      }
    }
  }
  else if (TransportType > 1885563167)
  {
    if (TransportType > 1970496031)
    {
      if (TransportType == 1970496032)
      {
        unsigned int v9 = "USB";
        goto LABEL_41;
      }
      if (TransportType == 1986622068)
      {
        unsigned int v9 = "Virtual";
        goto LABEL_41;
      }
    }
    else
    {
      if (TransportType == 1885563168)
      {
        unsigned int v9 = "PCI";
        goto LABEL_41;
      }
      if (TransportType == 1953002862)
      {
        unsigned int v9 = "Thunderbolt";
        goto LABEL_41;
      }
    }
  }
  else if (TransportType > 1735554415)
  {
    if (TransportType == 1735554416)
    {
      unsigned int v9 = "Aggregate";
      goto LABEL_41;
    }
    if (TransportType == 1751412073)
    {
      unsigned int v9 = "HDMI";
      goto LABEL_41;
    }
  }
  else
  {
    if (TransportType == 1685090932)
    {
      unsigned int v9 = "DisplayPort";
      goto LABEL_41;
    }
    if (TransportType == 1700886114)
    {
      unsigned int v9 = "AVB";
      goto LABEL_41;
    }
  }
  unsigned int v9 = "Unknown";
  goto LABEL_41;
}

void sub_1BAC3CED4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a48 < 0) {
    JUMPOUT(0x1BAC3D02CLL);
  }
  JUMPOUT(0x1BAC3D030);
}

void sub_1BAC3CF34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    JUMPOUT(0x1BAC3CFF8);
  }
  JUMPOUT(0x1BAC3CFFCLL);
}

void sub_1BAC3CF3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (*(char *)(v45 - 169) < 0) {
    operator delete(*(void **)(v45 - 192));
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a45 < 0) {
    JUMPOUT(0x1BAC3D02CLL);
  }
  JUMPOUT(0x1BAC3D030);
}

void sub_1BAC3CF54()
{
}

void sub_1BAC3CF60(void *a1)
{
}

void sub_1BAC3CF74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (*(char *)(v39 - 169) < 0) {
    operator delete(*(void **)(v39 - 192));
  }
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    JUMPOUT(0x1BAC3CFF8);
  }
  JUMPOUT(0x1BAC3CFFCLL);
}

void sub_1BAC3CF8C()
{
}

HALS_ObjectMap ***HALS_IOContextReporter::anonymous namespace'::PopulateAvailableStreamFormats(uint64_t a1, uint64_t a2, char a3)
{
  unsigned int v9 = 0;
  BOOL v10 = 0;
  uint64_t v11 = 0;
  HALS_Device::CopyStreamList(a2, a3, (char **)&v9);
  uint64_t v4 = v9;
  size_t v5 = (HALS_Stream **)v10;
  if (v9 != (HALS_Stream **)v10)
  {
    do
    {
      if (!HALS_Stream::IsReferenceStream(*v4))
      {
        size_t v6 = *v4;
        uint64_t v7 = *((unsigned int *)*v4 + 4);
        uint64_t v12 = 0x676C6F6270667461;
        LODWORD(v13) = 0;
        (*(void (**)(HALS_Stream *, uint64_t, uint64_t *, void, void, void))(*(void *)v6 + 104))(v6, v7, &v12, 0, 0, 0);
        operator new[]();
      }
      ++v4;
    }
    while (v4 != v5);
  }
  return HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser(&v9, v3);
}

void sub_1BAC3D3F0(void *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)va, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAC3D3CCLL);
}

uint64_t HALS_IOContext::CopyDescription(HALS_IOContext *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v3 = 0x676C6F6261636F6DLL;
  int v4 = 0;
  uint64_t v6 = 0;
  int v5 = 0;
  (*(void (**)(HALS_IOContext *, uint64_t, uint64_t *, uint64_t, int *, uint64_t *, void, void, void))(*(void *)this + 112))(this, v1, &v3, 8, &v5, &v6, 0, 0, 0);
  return v6;
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef const&>(unsigned char *a1, const __CFDictionary *a2, const void *a3)
{
  int v4 = applesauce::CF::details::at_key<applesauce::CF::StringRef const&>(a2, a3);
  if (!v4) {
    goto LABEL_5;
  }
  int v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFArrayGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    char v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(void *)a1 = v5;
  char v7 = 1;
LABEL_6:
  a1[8] = v7;
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,applesauce::CF::StringRef const&>(unsigned char *a1, const __CFDictionary *a2, const void *a3)
{
  int v4 = applesauce::CF::details::at_key<applesauce::CF::StringRef const&>(a2, a3);
  if (!v4) {
    goto LABEL_5;
  }
  int v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFStringGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    char v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(void *)a1 = v5;
  char v7 = 1;
LABEL_6:
  a1[8] = v7;
}

void *std::get_temporary_buffer[abi:ne180100]<applesauce::CF::StringRef>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0xFFFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    uint64_t result = operator new(8 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(const __CFString **a1, const __CFString **a2, uint64_t a3, unint64_t a4, const __CFString **a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    char v7 = a1;
    if (a4 == 2)
    {
      if ((unint64_t)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(a2 - 1), a1) >= 2)
      {
        CFStringRef v8 = *v7;
        *char v7 = 0;
        *char v7 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      if (a1 != a2)
      {
        unsigned int v16 = a1 + 1;
        if (a1 + 1 != a2)
        {
          uint64_t v17 = 0;
          uint64_t v18 = a1;
          do
          {
            uint64_t v19 = v18;
            uint64_t v18 = v16;
            if ((unint64_t)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v16, v19) >= 2)
            {
              CFStringRef v20 = *v18;
              *uint64_t v18 = 0;
              uint64_t v21 = v17;
              while (1)
              {
                unsigned int v22 = (const __CFString **)((char *)v7 + v21);
                uint64_t v24 = *(uint64_t *)((char *)v7 + v21);
                uint64_t v23 = *(const __CFString **)((char *)v7 + v21 + 8);
                *unsigned int v22 = v23;
                v22[1] = v24;
                if (!v21) {
                  break;
                }
                v21 -= 8;
                unint64_t v25 = (char *)v7 + v21;
                if ((unint64_t)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(v20, (const __CFString **)((char *)v7 + v21)) <= kCFCompareGreaterThan)
                {
                  unint64_t v26 = (const __CFString **)(v25 + 8);
                  uint64_t v23 = (const void *)*((void *)v25 + 1);
                  goto LABEL_19;
                }
              }
              unint64_t v26 = v7;
LABEL_19:
              *unint64_t v26 = v20;
              if (v23) {
                CFRelease(v23);
              }
            }
            unsigned int v16 = v18 + 1;
            v17 += 8;
          }
          while (v18 + 1 != a2);
        }
      }
    }
    else
    {
      uint64_t v13 = a4 >> 1;
      uint64_t v14 = &a1[a4 >> 1];
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(a1, &a1[a4 >> 1], a3, a4 >> 1, a5);
        BOOL v27 = &a5[v13];
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(&v7[a4 >> 1], a2, a3, a4 - v13, v27);
        unint64_t v37 = a4;
        uint64_t v28 = &a5[a4];
        BOOL v29 = v27;
        BOOL v30 = a5;
        while (v29 != v28)
        {
          CFComparisonResult v31 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v29, v30);
          CFStringRef v32 = *v7;
          if ((unint64_t)v31 < 2)
          {
            *char v7 = *v30;
            *v30++ = v32;
          }
          else
          {
            *char v7 = *v29;
            *v29++ = v32;
          }
          ++v7;
          if (v30 == v27)
          {
            if (v29 != v28)
            {
              uint64_t v33 = 0;
              do
              {
                CFStringRef v34 = v7[v33];
                v7[v33] = v29[v33];
                v29[v33++] = v34;
              }
              while (&v29[v33] != v28);
            }
            goto LABEL_36;
          }
        }
        if (v30 != v27)
        {
          uint64_t v35 = 0;
          do
          {
            CFStringRef v36 = v7[v35];
            v7[v35] = v30[v35];
            v30[v35++] = v36;
          }
          while (&v30[v35] != v27);
        }
LABEL_36:
        if (a5) {
          std::__destruct_n::__process[abi:ne180100]<applesauce::CF::StringRef>(&v37, (uint64_t)a5);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(a1, &a1[a4 >> 1], a3, a4 >> 1, a5, a6);
        uint64_t v15 = a4 - v13;
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(v14, a2, a3, v15, a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(v7, v14, a2, a3, v13, v15, (uint64_t)a5, a6);
      }
    }
  }
}

void sub_1BAC3D918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  if (v10) {
    std::__destruct_n::__process[abi:ne180100]<applesauce::CF::StringRef>(&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

const __CFString **std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<applesauce::CF::StringRef *>,std::__wrap_iter<applesauce::CF::StringRef *>,std::__equal_to &>(const __CFString **a1, const __CFString **a2)
{
  uint64_t v2 = a2;
  if (a1 != a2)
  {
    for (uint64_t i = a1 + 1; i != v2; ++i)
    {
      BOOL v4 = i - 1;
      if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(i - 1), i) == kCFCompareEqualTo)
      {
        for (uint64_t j = v4 + 2; j != v2; ++j)
        {
          if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v4, j))
          {
            CFStringRef v7 = v4[1];
            *++BOOL v4 = *j;
            *uint64_t j = v7;
          }
        }
        return v4 + 1;
      }
    }
  }
  return v2;
}

void std::vector<applesauce::CF::StringRef>::erase(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = a2;
    int v5 = a3;
    CFTypeID v6 = *(uint64_t **)(a1 + 8);
    if (a3 != v6)
    {
      uint64_t v7 = a3 - a2;
      do
      {
        uint64_t v8 = *v3;
        *uint64_t v3 = v3[v7];
        v3[v7] = v8;
        ++v3;
      }
      while (&v3[v7] != v6);
      int v5 = *(uint64_t **)(a1 + 8);
    }
    while (v5 != v3)
    {
      unsigned int v9 = (const void *)*--v5;
      std::__destroy_at[abi:ne180100]<applesauce::CF::StringRef,0>(v9);
    }
    *(void *)(a1 + 8) = v3;
  }
}

void *applesauce::CF::details::CFString_get_value<false>(uint64_t a1, CFStringRef theString)
{
  CStringPtr = (char *)CFStringGetCStringPtr(theString, 0x8000100u);
  if (CStringPtr) {
    return std::string::basic_string[abi:ne180100]<0>((void *)a1, CStringPtr);
  }
  CFIndex Length = CFStringGetLength(theString);
  maxBufLeuint64_t n = 0;
  v9.locatiouint64_t n = 0;
  v9.length = Length;
  CFStringGetBytes(theString, v9, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  std::string::basic_string[abi:ne180100]((void *)a1, maxBufLen, 0);
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v7 = (UInt8 *)a1;
  }
  else {
    uint64_t v7 = *(UInt8 **)a1;
  }
  v10.locatiouint64_t n = 0;
  v10.length = Length;
  return (void *)CFStringGetBytes(theString, v10, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const* const&>(unsigned char *a1, CFDictionaryRef theDict, void *key)
{
  if (!key) {
    goto LABEL_6;
  }
  Value = CFDictionaryGetValue(theDict, key);
  int v5 = Value;
  if (!Value) {
    goto LABEL_6;
  }
  CFRetain(Value);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFArrayGetTypeID())
  {
    CFRelease(v5);
LABEL_6:
    char v7 = 0;
    *a1 = 0;
    goto LABEL_7;
  }
  *(void *)a1 = v5;
  char v7 = 1;
LABEL_7:
  a1[8] = v7;
}

applesauce::CF::ArrayRef *applesauce::CF::details::at_to<applesauce::CF::ArrayRef>(applesauce::CF::ArrayRef *a1, CFArrayRef theArray, unint64_t a3)
{
  if (CFArrayGetCount(theArray) <= a3
    || (ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3), (char v7 = ValueAtIndex) == 0))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(ValueAtIndex);

  return applesauce::CF::ArrayRef::ArrayRef(a1, v7);
}

void sub_1BAC3DC74(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const __CFString **std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(const __CFString **result, const __CFString **a2, uint64_t a3, unint64_t a4, const __CFString **a5)
{
  if (a4)
  {
    int v5 = a5;
    char v7 = result;
    if (a4 == 1)
    {
LABEL_10:
      *int v5 = *v7;
      *char v7 = 0;
      return result;
    }
    if (a4 == 2)
    {
      CFRange v9 = a2 - 1;
      uint64_t result = (const __CFString **)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(a2 - 1), result);
      if ((unint64_t)result <= 1) {
        CFRange v10 = v7;
      }
      else {
        CFRange v10 = v9;
      }
      *v5++ = *v10;
      if ((unint64_t)result <= 1) {
        char v7 = v9;
      }
      *CFRange v10 = 0;
      goto LABEL_10;
    }
    if ((uint64_t)a4 > 8)
    {
      uint64_t v19 = &result[a4 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(result, v19, a3, a4 >> 1, a5, a4 >> 1);
      uint64_t result = (const __CFString **)std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      CFStringRef v20 = &v7[a4 >> 1];
      while (v20 != a2)
      {
        uint64_t result = (const __CFString **)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v20, v7);
        if ((unint64_t)result < 2)
        {
          *int v5 = *v7;
          *v7++ = 0;
        }
        else
        {
          *int v5 = *v20;
          *v20++ = 0;
        }
        ++v5;
        if (v7 == v19)
        {
          if (v20 != a2)
          {
            uint64_t v21 = 0;
            do
            {
              v5[v21] = v20[v21];
              v20[v21++] = 0;
            }
            while (&v20[v21] != a2);
          }
          return result;
        }
      }
      if (v7 != v19)
      {
        uint64_t v22 = 0;
        do
        {
          v5[v22] = v7[v22];
          v7[v22++] = 0;
        }
        while (&v7[v22] != v19);
      }
    }
    else if (result != a2)
    {
      *a5 = *result;
      void *result = 0;
      uint64_t v11 = result + 1;
      if (result + 1 != a2)
      {
        uint64_t v12 = 0;
        uint64_t v13 = a5;
        do
        {
          uint64_t result = (const __CFString **)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v11, v13);
          if ((unint64_t)result < 2)
          {
            CFStringRef v17 = 0;
            uint64_t v15 = v13 + 1;
          }
          else
          {
            CFStringRef v14 = *v13;
            unsigned int *v13 = 0;
            v13[1] = v14;
            uint64_t v15 = v5;
            if (v13 != v5)
            {
              uint64_t v16 = v12;
              while (1)
              {
                uint64_t v15 = (const __CFString **)((char *)v5 + v16);
                uint64_t result = (const __CFString **)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v11, (const __CFString **)((char *)v5 + v16 - 8));
                if ((unint64_t)result < 2) {
                  break;
                }
                *(int8x16_t *)((char *)v5 + v16 - 8) = vextq_s8(*(int8x16_t *)((char *)v5 + v16 - 8), *(int8x16_t *)((char *)v5 + v16 - 8), 8uLL);
                v16 -= 8;
                if (!v16)
                {
                  uint64_t v15 = v5;
                  break;
                }
              }
            }
            CFStringRef v17 = *v15;
          }
          *uint64_t v15 = *v11;
          *v11++ = v17;
          v12 += 8;
          ++v13;
        }
        while (v11 != a2);
      }
    }
  }
  return result;
}

void std::__destruct_n::__process[abi:ne180100]<applesauce::CF::StringRef>(unint64_t *a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  if (*a1)
  {
    unint64_t v5 = 0;
    do
    {
      CFTypeID v6 = *(const void **)(a2 + 8 * v5);
      if (v6)
      {
        CFRelease(v6);
        unint64_t v2 = *a1;
      }
      ++v5;
    }
    while (v5 < v2);
  }
}

void std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(const __CFString **a1, const __CFString **a2, const __CFString **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a6) {
    return;
  }
  uint64_t v10 = a6;
  while (v10 > a8 && a5 > a8)
  {
    if (!a5) {
      return;
    }
    while ((unint64_t)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*a2, a1) <= kCFCompareGreaterThan)
    {
      ++a1;
      if (!--a5) {
        return;
      }
    }
    uint64_t v61 = a8;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        CFStringRef v52 = *a1;
        *a1 = 0;
        *a1 = *a2;
        *a2 = v52;
        return;
      }
      if (a5 >= 0) {
        uint64_t v21 = a5;
      }
      else {
        uint64_t v21 = a5 + 1;
      }
      uint64_t v20 = v21 >> 1;
      uint64_t v18 = &a1[v21 >> 1];
      CFStringRef v17 = a2;
      if (a2 != a3)
      {
        uint64_t v58 = v21 >> 1;
        uint64_t v59 = a3;
        uint64_t v60 = a7;
        unint64_t v22 = a3 - a2;
        CFStringRef v17 = a2;
        do
        {
          uint64_t v23 = &v17[v22 >> 1];
          CFStringRef v25 = *v23;
          uint64_t v24 = v23 + 1;
          CFComparisonResult v26 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(v25, v18);
          if ((unint64_t)v26 <= kCFCompareGreaterThan) {
            v22 >>= 1;
          }
          else {
            v22 += ~(v22 >> 1);
          }
          if ((unint64_t)v26 > kCFCompareGreaterThan) {
            CFStringRef v17 = v24;
          }
        }
        while (v22);
        a3 = v59;
        a7 = v60;
        uint64_t v20 = v58;
      }
      uint64_t v16 = v17 - a2;
    }
    else
    {
      if (v10 >= 0) {
        uint64_t v15 = v10;
      }
      else {
        uint64_t v15 = v10 + 1;
      }
      uint64_t v16 = v15 >> 1;
      CFStringRef v17 = &a2[v15 >> 1];
      uint64_t v18 = a2;
      if (a2 != a1)
      {
        uint64_t v57 = v15 >> 1;
        unint64_t v19 = a2 - a1;
        uint64_t v18 = a1;
        do
        {
          if ((unint64_t)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v17, &v18[v19 >> 1]) > kCFCompareGreaterThan)
          {
            v19 >>= 1;
          }
          else
          {
            v18 += (v19 >> 1) + 1;
            v19 += ~(v19 >> 1);
          }
        }
        while (v19);
        uint64_t v16 = v57;
      }
      uint64_t v20 = v18 - a1;
    }
    if (v18 == a2)
    {
      uint64_t v28 = v17;
    }
    else if (v17 == a2)
    {
      uint64_t v28 = v18;
    }
    else
    {
      CFStringRef v27 = *v18;
      *uint64_t v18 = 0;
      *uint64_t v18 = *a2;
      uint64_t v28 = v18 + 1;
      for (uint64_t i = a2; ; *v28++ = *i)
      {
        *i++ = v27;
        if (i == v17) {
          break;
        }
        if (v28 == a2) {
          a2 = i;
        }
        CFStringRef v27 = *v28;
        *uint64_t v28 = 0;
      }
      if (v28 != a2)
      {
        BOOL v30 = v28;
        CFComparisonResult v31 = a2;
        do
        {
          while (1)
          {
            CFStringRef v32 = *v30;
            uint64_t *v30 = 0;
            *v30++ = *v31;
            *v31++ = v32;
            if (v31 == v17) {
              break;
            }
            if (v30 == a2) {
              a2 = v31;
            }
          }
          CFComparisonResult v31 = a2;
        }
        while (v30 != a2);
      }
    }
    a5 -= v20;
    v10 -= v16;
    if (v20 + v16 >= a5 + v10)
    {
      CFStringRef v34 = v17;
      uint64_t v35 = v20;
      uint64_t v36 = a5;
      uint64_t v37 = v16;
      std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(v28, v34, a3, a4, v36, v10, a7, v61);
      a2 = v18;
      a8 = v61;
      uint64_t v10 = v37;
      a5 = v35;
      a3 = v28;
      if (!v10) {
        return;
      }
    }
    else
    {
      uint64_t v33 = v18;
      a8 = v61;
      std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<applesauce::CF::StringRef *>>(a1, v33, v28, a4, v20, v16, a7, v61);
      a1 = v28;
      a2 = v17;
      if (!v10) {
        return;
      }
    }
  }
  if (a5 <= v10)
  {
    if (a1 != a2)
    {
      uint64_t v45 = a3;
      uint64_t v46 = 0;
      unint64_t v47 = 0;
      do
      {
        *(void *)(a7 + v46 * 8) = a1[v46];
        a1[v46] = 0;
        ++v47;
        ++v46;
      }
      while (&a1[v46] != a2);
      unsigned int v48 = (const __CFString **)(a7 + v46 * 8);
      unint64_t v63 = v47;
      if (a7 + v46 * 8 != a7)
      {
        char v49 = (const __CFString **)a7;
        while (a2 != v45)
        {
          CFComparisonResult v50 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*a2, v49);
          CFStringRef v51 = *a1;
          if ((unint64_t)v50 < 2)
          {
            *a1 = *v49;
            *v49++ = v51;
          }
          else
          {
            *a1 = *a2;
            *a2++ = v51;
          }
          ++a1;
          if (v49 == v48) {
            goto LABEL_90;
          }
        }
        uint64_t v55 = 0;
        do
        {
          CFStringRef v56 = a1[v55];
          a1[v55] = v49[v55];
          v49[v55++] = v56;
        }
        while (&v49[v55 - 1] != v48 - 1);
      }
      goto LABEL_90;
    }
  }
  else if (a3 != a2)
  {
    uint64_t v38 = 0;
    unint64_t v39 = 0;
    do
    {
      *(void *)(a7 + v38 * 8) = a2[v38];
      a2[v38] = 0;
      ++v39;
      ++v38;
    }
    while (&a2[v38] != a3);
    uint64_t v40 = a7 + v38 * 8;
    unint64_t v63 = v39;
    if (a7 + v38 * 8 != a7)
    {
      std::string v41 = a3 - 1;
      while (a2 != a1)
      {
        CFComparisonResult v42 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(v40 - 8), a2 - 1);
        CFStringRef v43 = *v41;
        if ((unint64_t)v42 <= kCFCompareGreaterThan) {
          std::string v44 = (const __CFString **)v40;
        }
        else {
          std::string v44 = a2;
        }
        if ((unint64_t)v42 <= kCFCompareGreaterThan) {
          v40 -= 8;
        }
        else {
          --a2;
        }
        *v41-- = *(v44 - 1);
        *(v44 - 1) = v43;
        if (v40 == a7) {
          goto LABEL_90;
        }
      }
      uint64_t v53 = 0;
      do
      {
        CFStringRef v54 = v41[v53];
        v41[v53] = *(const __CFString **)(v40 + v53 * 8 - 8);
        *(void *)(v40 + v53 * 8 - 8) = v54;
        --v53;
      }
      while (v40 + v53 * 8 != a7);
    }
    goto LABEL_90;
  }
  unint64_t v63 = 0;
LABEL_90:
  if (a7) {
    std::__destruct_n::__process[abi:ne180100]<applesauce::CF::StringRef>(&v63, a7);
  }
}

void HALS_IOContextReporter::anonymous namespace'::PopulateAvailableStreamInfo(uint64_t **a1, void *a2, int a3, int a4, int a5, char a6)
{
  std::string::basic_string[abi:ne180100]<0>(&v91, ", ");
  if (a4) {
    uint64_t v11 = "input_";
  }
  else {
    uint64_t v11 = "output_";
  }
  std::string::basic_string[abi:ne180100]<0>(&v88, v11);
  if (a5) {
    uint64_t v12 = "phys";
  }
  else {
    uint64_t v12 = "virt";
  }
  std::string::basic_string[abi:ne180100]<0>(&v85, v12);
  std::string::basic_string[abi:ne180100]<0>(&v84, "{ ");
  if (a3)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      uint64_t v15 = *a2 + v13;
      double v16 = *(double *)v15;
      unsigned int v17 = *(_DWORD *)(v15 + 8);
      unsigned int v18 = *(_DWORD *)(v15 + 28);
      std::to_string(&v74, *(_DWORD *)(v15 + 32));
      unint64_t v19 = std::string::insert(&v74, 0, "[", 1uLL);
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v75.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      uint64_t v21 = std::string::append(&v75, "/", 1uLL);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v76.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v73, (int)v16);
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v23 = &v73;
      }
      else {
        uint64_t v23 = (std::string *)v73.__r_.__value_.__r.__words[0];
      }
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v73.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v73.__r_.__value_.__l.__size_;
      }
      CFStringRef v25 = std::string::append(&v76, (const std::string::value_type *)v23, size);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      CFStringRef v27 = std::string::append(&v77, "/", 1uLL);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v72, v18);
      if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v29 = &v72;
      }
      else {
        BOOL v29 = (std::string *)v72.__r_.__value_.__r.__words[0];
      }
      if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v30 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v30 = v72.__r_.__value_.__l.__size_;
      }
      CFComparisonResult v31 = std::string::append(&v78, (const std::string::value_type *)v29, v30);
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      uint64_t v33 = std::string::append(&v79, " ", 1uLL);
      int16x8_t v34 = *(int16x8_t *)&v33->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(int16x8_t *)&v80.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      v34.i32[0] = bswap32(v17);
      *(int8x8_t *)v34.i8 = vzip1_s8(*(int8x8_t *)v34.i8, *(int8x8_t *)v34.i8);
      v35.i64[0] = 0x1F0000001FLL;
      v35.i64[1] = 0x1F0000001FLL;
      v36.i64[0] = 0x5F0000005FLL;
      v36.i64[1] = 0x5F0000005FLL;
      *(int8x8_t *)v34.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v36, (uint32x4_t)vsraq_n_s32(v35, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v34.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v34.i8, (int8x8_t)0x2E002E002E002ELL);
      char v71 = 4;
      *(_DWORD *)std::string __s = vmovn_s16(v34).u32[0];
      __s[4] = 0;
      uint64_t v37 = std::string::append(&v80, __s, 4uLL);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      unint64_t v39 = std::string::append(&v81, "]", 1uLL);
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      int64_t v83 = v39->__r_.__value_.__r.__words[2];
      long long v82 = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v81.__r_.__value_.__l.__data_);
      }
      if (v71 < 0) {
        operator delete(*(void **)__s);
      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v79.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v72.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v73.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v75.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v74.__r_.__value_.__l.__data_);
      }
      if (v83 >= 0) {
        std::string v41 = (const std::string::value_type *)&v82;
      }
      else {
        std::string v41 = (const std::string::value_type *)v82;
      }
      if (v83 >= 0) {
        std::string::size_type v42 = HIBYTE(v83);
      }
      else {
        std::string::size_type v42 = *((void *)&v82 + 1);
      }
      std::string::append(&v84, v41, v42);
      if (v14 < (a3 - 1))
      {
        if ((v93 & 0x80u) == 0) {
          CFStringRef v43 = (const std::string::value_type *)&v91;
        }
        else {
          CFStringRef v43 = v91;
        }
        if ((v93 & 0x80u) == 0) {
          std::string::size_type v44 = v93;
        }
        else {
          std::string::size_type v44 = v92;
        }
        std::string::append(&v84, v43, v44);
      }
      if (SHIBYTE(v83) < 0) {
        operator delete((void *)v82);
      }
      ++v14;
      v13 += 56;
    }
    while (a3 != v14);
  }
  std::string::append(&v84, " }", 2uLL);
  if ((v90 & 0x80u) == 0) {
    size_t v45 = v90;
  }
  else {
    size_t v45 = v89;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v80, v45 + 6);
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v46 = &v80;
  }
  else {
    uint64_t v46 = (std::string *)v80.__r_.__value_.__r.__words[0];
  }
  if (v45)
  {
    if ((v90 & 0x80u) == 0) {
      unint64_t v47 = (void **)&v88;
    }
    else {
      unint64_t v47 = v88;
    }
    memmove(v46, v47, v45);
  }
  strcpy((char *)v46 + v45, "avail_");
  if ((v87 & 0x80u) == 0) {
    unsigned int v48 = (const std::string::value_type *)&v85;
  }
  else {
    unsigned int v48 = v85;
  }
  if ((v87 & 0x80u) == 0) {
    std::string::size_type v49 = v87;
  }
  else {
    std::string::size_type v49 = v86;
  }
  CFComparisonResult v50 = std::string::append(&v80, v48, v49);
  long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v81.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  CFStringRef v52 = std::string::append(&v81, "_formats", 8uLL);
  long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  int64_t v83 = v52->__r_.__value_.__r.__words[2];
  long long v82 = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v82;
  CFStringRef v54 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v82, &v79)+ 56);
  if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v55 = &v84;
  }
  else {
    uint64_t v55 = (std::string *)v84.__r_.__value_.__r.__words[0];
  }
  if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v56 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v56 = v84.__r_.__value_.__l.__size_;
  }
  std::string::append(v54, (const std::string::value_type *)v55, v56);
  if (SHIBYTE(v83) < 0) {
    operator delete((void *)v82);
  }
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v81.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80.__r_.__value_.__l.__data_);
  }
  if ((a6 & 1) == 0)
  {
    if ((v90 & 0x80u) == 0) {
      size_t v57 = v90;
    }
    else {
      size_t v57 = v89;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v80, v57 + 6);
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v58 = &v80;
    }
    else {
      uint64_t v58 = (std::string *)v80.__r_.__value_.__r.__words[0];
    }
    if (v57)
    {
      if ((v90 & 0x80u) == 0) {
        uint64_t v59 = (void **)&v88;
      }
      else {
        uint64_t v59 = v88;
      }
      memmove(v58, v59, v57);
    }
    strcpy((char *)v58 + v57, "avail_");
    if ((v87 & 0x80u) == 0) {
      uint64_t v60 = (const std::string::value_type *)&v85;
    }
    else {
      uint64_t v60 = v85;
    }
    if ((v87 & 0x80u) == 0) {
      std::string::size_type v61 = v87;
    }
    else {
      std::string::size_type v61 = v86;
    }
    unsigned __int8 v62 = std::string::append(&v80, v60, v61);
    long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    unsigned int v64 = std::string::append(&v81, "_formats", 8uLL);
    long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    int64_t v83 = v64->__r_.__value_.__r.__words[2];
    long long v82 = v65;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v82;
    uint64_t v66 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, &v82, &v79)+ 56);
    if ((v93 & 0x80u) == 0) {
      int64x2_t v67 = (const std::string::value_type *)&v91;
    }
    else {
      int64x2_t v67 = v91;
    }
    if ((v93 & 0x80u) == 0) {
      std::string::size_type v68 = v93;
    }
    else {
      std::string::size_type v68 = v92;
    }
    std::string::append(v66, v67, v68);
    if (SHIBYTE(v83) < 0) {
      operator delete((void *)v82);
    }
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v81.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v80.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v84.__r_.__value_.__l.__data_);
  }
  if ((char)v87 < 0) {
    operator delete(v85);
  }
  if ((char)v90 < 0) {
    operator delete(v88);
  }
  if ((char)v93 < 0) {
    operator delete(v91);
  }
}

uint64_t *std::ranges::__find_if_impl[abi:ne180100]<std::__wrap_iter<HALS_Control **>,std::__wrap_iter<HALS_Control **>,std::reference_wrapper<HALS_IOContextReporter::anonymous namespace'::GetVolume(HALS_Releaser<HALS_Device> const&,unsigned int)::$_0>,std::identity>(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    do
    {
      uint64_t v2 = *result;
      if (*result)
      {
        int v4 = *(_DWORD *)(v2 + 20);
        int v3 = *(_DWORD *)(v2 + 24);
        if (v4 == v3 || v4 == 1986817381)
        {
          if (v4 == 1986817381 || v4 != v3) {
            return result;
          }
        }
        else if (v3 == 1986817381)
        {
          return result;
        }
      }
      ++result;
    }
    while (result != a2);
    return a2;
  }
  return result;
}

uint64_t *std::ranges::__find_if_impl[abi:ne180100]<std::__wrap_iter<HALS_Control **>,std::__wrap_iter<HALS_Control **>,std::reference_wrapper<HALS_IOContextReporter::anonymous namespace'::IsMuted(HALS_Releaser<HALS_Device> const&,unsigned int)::$_0>,std::identity>(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    do
    {
      uint64_t v2 = *result;
      if (*result)
      {
        int v4 = *(_DWORD *)(v2 + 20);
        int v3 = *(_DWORD *)(v2 + 24);
        if (v4 == v3 || v4 == 1836414053)
        {
          if (v4 == 1836414053 || v4 != v3) {
            return result;
          }
        }
        else if (v3 == 1836414053)
        {
          return result;
        }
      }
      ++result;
    }
    while (result != a2);
    return a2;
  }
  return result;
}

void std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(std::string *a1, char *a2, char *a3, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *a4, const char *a5)
{
  CFTypeID v6 = a2;
  v50.__begin_.__i_ = a2;
  v50.__end_.__i_ = a3;
  v50.__pregex_ = a4;
  v50.__flags_ = match_default;
  memset(&v50.__match_.__prefix_, 0, 17);
  memset(&v50.__match_.__suffix_, 0, 17);
  v50.__match_.__ready_ = 0;
  v50.__match_.__position_start_.__i_ = 0;
  memset(&v50.__match_, 0, 41);
  memset(&__p.__match_.__matches_.__end_cap_, 0, 17);
  memset(&__p.__match_.__unmatched_.matched, 0, 17);
  __p.__match_.__prefix_.matched = 0;
  __p.__match_.__suffix_.first.__i_ = 0;
  memset(&__p, 0, 41);
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)a4, (std::sub_match<const char *> *)a2, (std::sub_match<const char *> *)a3, (std::vector<std::csub_match> *)&__p, 0);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)&v50.__match_, (uint64_t)v6, (uint64_t)a3, (uint64_t *)&__p, 0);
  if (__p.__begin_.__i_) {
    operator delete((void *)__p.__begin_.__i_);
  }
  memset(&__p.__match_.__prefix_, 0, 17);
  memset(&__p.__match_.__suffix_, 0, 17);
  __p.__match_.__ready_ = 0;
  __p.__match_.__position_start_.__i_ = 0;
  memset(&__p.__match_, 0, 41);
  memset(&__p, 0, 28);
  if (std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v50, &__p))
  {
    while (v6 != a3)
      std::string::push_back(a1, *v6++);
    goto LABEL_68;
  }
  size_t v8 = strlen(a5);
  std::__wrap_iter<const char *>::iterator_type v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = (unsigned __int8 *)&a5[v8];
  size_t v46 = v8;
  while (!std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v50, &__p))
  {
    std::__wrap_iter<const char *>::iterator_type i = v50.__match_.__prefix_.first.__i_;
    std::__wrap_iter<const char *>::iterator_type v13 = v50.__match_.__prefix_.second.__i_;
    if (v50.__match_.__prefix_.first.__i_ != v50.__match_.__prefix_.second.__i_)
    {
      unint64_t v14 = (std::string::value_type *)v50.__match_.__prefix_.first.__i_;
      do
        std::string::push_back(a1, *v14++);
      while (v14 != v13);
    }
    begiuint64_t n = v50.__match_.__matches_.__begin_;
    if (v46)
    {
      uint64_t v10 = (std::string::value_type *)v50.__match_.__suffix_.first.__i_;
      std::__wrap_iter<const char *>::iterator_type v9 = v50.__match_.__suffix_.second.__i_;
      std::vector<std::ssub_match>::pointer end = v50.__match_.__matches_.__end_;
      unint64_t v48 = 0xAAAAAAAAAAAAAAABLL
          * (((char *)v50.__match_.__matches_.__end_ - (char *)v50.__match_.__matches_.__begin_) >> 3);
      double v16 = a5;
      while (1)
      {
        int v17 = *(unsigned __int8 *)v16;
        if (v17 == 36)
        {
          unsigned int v18 = (unsigned __int8 *)(v16 + 1);
          if (v16 + 1 == (const char *)v11) {
            goto LABEL_44;
          }
          int v19 = (char)*v18;
          int v17 = *v18;
          if (v19 > 38)
          {
            if (v19 == 39)
            {
              if (v10 != v9)
              {
                uint64_t v23 = v10;
                do
                  std::string::push_back(a1, *v23++);
                while (v23 != v9);
              }
              goto LABEL_46;
            }
            if (v19 == 96)
            {
              if (i != v13)
              {
                long long v22 = (std::string::value_type *)i;
                do
                  std::string::push_back(a1, *v22++);
                while (v22 != v13);
              }
              goto LABEL_46;
            }
LABEL_32:
            if ((v17 - 48) <= 9)
            {
              unint64_t v24 = *v18 - 48;
              if (v16 + 2 != (const char *)v11)
              {
                uint64_t v25 = *((unsigned __int8 *)v16 + 2);
                unsigned int v26 = v25 - 48;
                uint64_t v27 = v25 + 10 * (int)v24 - 48;
                if (v26 > 9)
                {
                  unsigned int v18 = (unsigned __int8 *)(v16 + 1);
                }
                else
                {
                  unint64_t v24 = v27;
                  unsigned int v18 = (unsigned __int8 *)(v16 + 2);
                }
              }
              long long v28 = &begin[(int)v24];
              BOOL v29 = v48 > v24;
              p_unmatched = &v50.__match_.__unmatched_;
              if (v29) {
                p_unmatched = v28;
              }
              CFComparisonResult v31 = (std::string::value_type *)p_unmatched->first.__i_;
              p_second = &v28->second;
              if (!v29) {
                p_second = &v50.__match_.__unmatched_.second;
              }
              uint64_t v33 = (std::string::value_type *)p_second->__i_;
              while (v31 != v33)
                std::string::push_back(a1, *v31++);
              goto LABEL_46;
            }
LABEL_44:
            LOBYTE(v17) = 36;
            goto LABEL_45;
          }
          if (v19 != 36)
          {
            if (v19 == 38)
            {
              uint64_t v21 = (std::string::value_type *)begin->first.__i_;
              long long v20 = (std::string::value_type *)begin->second.__i_;
              while (v21 != v20)
                std::string::push_back(a1, *v21++);
              goto LABEL_46;
            }
            goto LABEL_32;
          }
          ++v16;
        }
LABEL_45:
        std::string::push_back(a1, v17);
        unsigned int v18 = (unsigned __int8 *)v16;
LABEL_46:
        double v16 = (const char *)(v18 + 1);
        if (v18 + 1 == v11)
        {
          std::vector<std::ssub_match>::pointer v34 = end;
          goto LABEL_49;
        }
      }
    }
    uint64_t v10 = (std::string::value_type *)v50.__match_.__suffix_.first.__i_;
    std::__wrap_iter<const char *>::iterator_type v9 = v50.__match_.__suffix_.second.__i_;
    std::vector<std::ssub_match>::pointer v34 = v50.__match_.__matches_.__end_;
LABEL_49:
    std::regex_constants::match_flag_type flags = v50.__flags_;
    unsigned __int32 v36 = v50.__flags_ | 0x800;
    v50.__flags_ |= 0x800u;
    BOOL v37 = v34 == begin;
    long long v38 = &v50.__match_.__unmatched_;
    if (!v37) {
      long long v38 = begin;
    }
    unint64_t v39 = &begin->second;
    if (v37) {
      unint64_t v39 = &v50.__match_.__unmatched_.second;
    }
    long long v40 = (std::sub_match<const char *> *)v39->__i_;
    std::string v41 = (std::sub_match<const char *> *)v50.__end_.__i_;
    if (v38->first.__i_ != v39->__i_) {
      goto LABEL_54;
    }
    if ((std::sub_match<const char *> *)v50.__end_.__i_ == v40)
    {
LABEL_63:
      if (begin) {
        operator delete(begin);
      }
      v50.__match_.__ready_ = 0;
      memset(&v50.__match_, 0, 41);
      memset(&v50.__match_.__prefix_, 0, 17);
      memset(&v50.__match_.__suffix_, 0, 17);
      v50.__match_.__position_start_.__i_ = 0;
    }
    else
    {
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      char v54 = 0;
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      char v57 = 0;
      char v58 = 0;
      uint64_t v59 = 0;
      memset(v51, 0, 41);
      char v43 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v50.__pregex_, v40, (std::sub_match<const char *> *)v50.__end_.__i_, v51, flags | 0x860);
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)&v50.__match_, (uint64_t)v40, (uint64_t)v41, (uint64_t *)v51, 1);
      if (v51[0].__begin_) {
        operator delete(v51[0].__begin_);
      }
      if ((v43 & 1) == 0)
      {
        long long v40 = (std::sub_match<const char *> *)((char *)v40 + 1);
        unsigned __int32 v36 = v50.__flags_;
        std::string v41 = (std::sub_match<const char *> *)v50.__end_.__i_;
LABEL_54:
        v50.__flags_ = v36 | 0x80;
        uint64_t v52 = 0;
        uint64_t v53 = 0;
        char v54 = 0;
        uint64_t v55 = 0;
        uint64_t v56 = 0;
        char v57 = 0;
        char v58 = 0;
        uint64_t v59 = 0;
        memset(v51, 0, 41);
        char v42 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v50.__pregex_, v40, v41, v51, v36 | 0x80);
        std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)&v50.__match_, (uint64_t)v40, (uint64_t)v41, (uint64_t *)v51, (v36 & 0x800) != 0);
        if (v51[0].__begin_) {
          operator delete(v51[0].__begin_);
        }
        if ((v42 & 1) == 0)
        {
          begiuint64_t n = v50.__match_.__matches_.__begin_;
          goto LABEL_63;
        }
      }
    }
  }
  while (v10 != v9)
    std::string::push_back(a1, *v10++);
LABEL_68:
  std::vector<std::ssub_match>::pointer v44 = v50.__match_.__matches_.__begin_;
  if (v50.__match_.__matches_.__begin_)
  {
    operator delete(v44);
  }
}

void sub_1BAC3F06C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(const std::regex_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_iterator<std::__wrap_iter<const char *>, char> *__x)
{
  p_match = &this->__match_;
  begiuint64_t n = this->__match_.__matches_.__begin_;
  std::vector<std::ssub_match>::pointer end = p_match->__matches_.__end_;
  std::__wrap_iter<const char *>::iterator_type v9 = &__x->__match_;
  std::vector<std::ssub_match>::pointer v7 = __x->__match_.__matches_.__begin_;
  size_t v8 = v9->__matches_.__end_;
  BOOL v10 = v8 == v7 && end == begin;
  if (end != begin && v8 != v7) {
    return this->__begin_.__i_ == __x->__begin_.__i_
  }
        && this->__end_.__i_ == __x->__end_.__i_
        && this->__pregex_ == __x->__pregex_
        && this->__flags_ == __x->__flags_
        && std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t)begin, (uint64_t)v7) == 0;
  return v10;
}

uint64_t std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&v19, *(char **)a1, *(char **)(a1 + 8), *(void *)(a1 + 8) - *(void *)a1);
  }
  else
  {
    int v19 = 0;
    size_t v20 = 0;
    uint64_t v21 = 0;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&v16, *(char **)a2, *(char **)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
    unsigned int v3 = HIBYTE(v18);
    unint64_t v5 = v16;
    size_t v4 = v17;
  }
  else
  {
    size_t v4 = 0;
    unint64_t v5 = 0;
    unsigned int v3 = 0;
    double v16 = 0;
    size_t v17 = 0;
    uint64_t v18 = 0;
  }
  int v6 = SHIBYTE(v21);
  std::vector<std::ssub_match>::pointer v7 = v19;
  if (v21 >= 0) {
    size_t v8 = HIBYTE(v21);
  }
  else {
    size_t v8 = v20;
  }
  if (v21 >= 0) {
    std::__wrap_iter<const char *>::iterator_type v9 = &v19;
  }
  else {
    std::__wrap_iter<const char *>::iterator_type v9 = (void **)v19;
  }
  if ((v3 & 0x80u) == 0) {
    size_t v10 = v3;
  }
  else {
    size_t v10 = v4;
  }
  if ((v3 & 0x80u) == 0) {
    uint64_t v11 = (void **)&v16;
  }
  else {
    uint64_t v11 = v5;
  }
  if (v10 >= v8) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v10;
  }
  unsigned int v13 = memcmp(v9, v11, v12);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_24;
    }
  }
  else if ((v6 & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v7);
LABEL_24:
  unsigned int v14 = v10 < v8;
  if (v8 < v10) {
    unsigned int v14 = -1;
  }
  if (v13) {
    return v13;
  }
  else {
    return v14;
  }
}

void sub_1BAC3F280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ADS::Device::AbortConfigChange(ADS::Device *this, unint64_t a2, void *a3)
{
  if (a3) {
    return (*(uint64_t (**)(void *))(*(void *)a3 + 8))(a3);
  }
  return result;
}

void ADS::Device::PerformConfigChange(ADS::Device *this, unint64_t a2, char *a3)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 55))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      info[0].numer = 136315394;
      *(void *)&info[0].denouint64_t m = "ADS_Device.cpp";
      LOWORD(info[1].denom) = 1024;
      *(uint32_t *)((char *)&info[1].denom + 2) = 1760;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::PerformConfigChange:: Config change is being called while IO is still running!", (uint8_t *)info, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852990585;
  }
  unint64_t v5 = this;
  atomic_store(1u, (unsigned __int8 *)this + 436);
  int v6 = *((_DWORD *)a3 + 3);
  if (v6 > 1752197474)
  {
    if (v6 <= 1885762591)
    {
      if (v6 > 1768515183)
      {
        if (v6 != 1768515184)
        {
          if (v6 == 1853059700)
          {
            double v16 = *((double *)a3 + 7);
            (*(void (**)(char *))(*(void *)a3 + 8))(a3);
            if (!ADS::Device::isSupportedSampleRate(v5, v16))
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                info[0].numer = 136315394;
                *(void *)&info[0].denouint64_t m = "ADS_Device.cpp";
                LOWORD(info[1].denom) = 1024;
                *(uint32_t *)((char *)&info[1].denom + 2) = 1779;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::PerformConfigChange: unsupported sample rate", (uint8_t *)info, 0x12u);
              }
              size_t v89 = __cxa_allocate_exception(0x10uLL);
              *(void *)size_t v89 = off_1F148A5D8;
              v89[2] = 560226676;
            }
            uint64_t v17 = *((void *)v5 + 15);
            CFStringRef v96 = (char *)v5 + 120;
            char v97 = (*(uint64_t (**)(void))(v17 + 16))();
            *((double *)v5 + 80) = v16;
            uint64_t v107 = 0;
            unint64_t v108 = 0;
            uint64_t v109 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v107, *((const void **)v5 + 45), *((void *)v5 + 46), (uint64_t)(*((void *)v5 + 46) - *((void *)v5 + 45)) >> 2);
            uint64_t v110 = 0;
            v111[0] = 0;
            v111[1] = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v110, *((const void **)v5 + 48), *((void *)v5 + 49), (uint64_t)(*((void *)v5 + 49) - *((void *)v5 + 48)) >> 2);
            char v18 = 0;
            uint64_t v19 = 0;
            do
            {
              char v90 = v18;
              unsigned __int8 v93 = 0;
              char v94 = 0;
              uint64_t v95 = 0;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v93, (&v107)[3 * v19], (uint64_t)*(&v107 + 3 * v19 + 1), *(&v107 + 3 * v19 + 1) - (&v107)[3 * v19]);
              uint64_t v21 = v93;
              size_t v20 = v94;
              uint64_t v91 = v94;
              if (v93 != v94)
              {
                do
                {
                  uint64_t v22 = ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*v21);
                  if (*(_DWORD *)(v22 + 20) != *((_DWORD *)v5 + 2))
                  {
                    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                      mach_port_t v113 = "ADS_Stream.cpp";
                      __int16 v114 = 1024;
                      int v115 = 360;
                      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Stream::UpdateSampleRate: This function is only to be called by a stream's owning device.", buf, 0x12u);
                    }
                    std::string::size_type v86 = __cxa_allocate_exception(0x10uLL);
                    *(void *)std::string::size_type v86 = off_1F148A5D8;
                    v86[2] = 1970171760;
                  }
                  uint64_t v23 = *(void *)(v22 + 136);
                  uint64_t v103 = v22 + 136;
                  char v104 = (*(uint64_t (**)(void))(v23 + 16))();
                  if (*(double *)(v22 + 56) != v16)
                  {
                    unint64_t v24 = *(void **)(v22 + 104);
                    uint64_t v25 = 0;
                    if (v24 == (void *)(v22 + 112)) {
                      goto LABEL_146;
                    }
                    unsigned int v26 = 0;
                    unint64_t v27 = 0;
                    do
                    {
                      long long v28 = v24 + 9;
                      if (*((double *)v24 + 9) <= v16 && *((double *)v24 + 10) >= v16)
                      {
                        std::string::size_type v30 = (long long *)(v24 + 4);
                        if ((unint64_t)v26 >= v27)
                        {
                          unint64_t v33 = 0x6DB6DB6DB6DB6DB7 * (((char *)v26 - (char *)v25) >> 3) + 1;
                          if (v33 > 0x492492492492492) {
                            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                          }
                          if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v27 - (void)v25) >> 3) > v33) {
                            unint64_t v33 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v27 - (void)v25) >> 3);
                          }
                          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v27 - (void)v25) >> 3)) >= 0x249249249249249) {
                            unint64_t v34 = 0x492492492492492;
                          }
                          else {
                            unint64_t v34 = v33;
                          }
                          if (v34) {
                            unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v34);
                          }
                          else {
                            uint64_t v35 = 0;
                          }
                          unint64_t v36 = v34 + 8 * (((char *)v26 - (char *)v25) >> 3);
                          long long v37 = *v30;
                          long long v38 = *((_OWORD *)v24 + 3);
                          *(void *)(v36 + 32) = v24[8];
                          *(_OWORD *)unint64_t v36 = v37;
                          *(_OWORD *)(v36 + 16) = v38;
                          *(_OWORD *)(v36 + 40) = *v28;
                          if (v26 == v25)
                          {
                            long long v40 = (AudioStreamBasicDescription *)(v34 + 8 * (((char *)v26 - (char *)v25) >> 3));
                          }
                          else
                          {
                            unint64_t v39 = v34 + 8 * (((char *)v26 - (char *)v25) >> 3);
                            do
                            {
                              long long v40 = (AudioStreamBasicDescription *)(v39 - 56);
                              long long v41 = *(_OWORD *)&v26[-2].mBytesPerFrame;
                              long long v42 = *(_OWORD *)&v26[-1].mSampleRate;
                              *(void *)(v39 - 24) = *(void *)&v26[-1].mBytesPerPacket;
                              *(_OWORD *)(v39 - 40) = v42;
                              *(_OWORD *)(v39 - 56) = v41;
                              *(_OWORD *)(v39 - 16) = *(_OWORD *)&v26[-1].mBytesPerFrame;
                              unsigned int v26 = (AudioStreamBasicDescription *)((char *)v26 - 56);
                              v39 -= 56;
                            }
                            while (v26 != v25);
                          }
                          unint64_t v27 = v34 + 56 * v35;
                          unsigned int v26 = (AudioStreamBasicDescription *)(v36 + 56);
                          if (v25) {
                            operator delete(v25);
                          }
                          uint64_t v25 = v40;
                        }
                        else
                        {
                          long long v31 = *v30;
                          long long v32 = *((_OWORD *)v24 + 3);
                          *(void *)&v26->mBitsPerChannel = v24[8];
                          *(_OWORD *)&v26->mSampleRate = v31;
                          *(_OWORD *)&v26->mBytesPerPacket = v32;
                          *(_OWORD *)&v26[1].mSampleRate = *v28;
                          unsigned int v26 = (AudioStreamBasicDescription *)((char *)v26 + 56);
                        }
                      }
                      char v43 = (void *)v24[1];
                      if (v43)
                      {
                        do
                        {
                          std::vector<std::ssub_match>::pointer v44 = v43;
                          char v43 = (void *)*v43;
                        }
                        while (v43);
                      }
                      else
                      {
                        do
                        {
                          std::vector<std::ssub_match>::pointer v44 = (void *)v24[2];
                          BOOL v45 = *v44 == (void)v24;
                          unint64_t v24 = v44;
                        }
                        while (!v45);
                      }
                      unint64_t v24 = v44;
                    }
                    while (v44 != (void *)(v22 + 112));
                    if (v25 == v26)
                    {
LABEL_146:
                      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                        mach_port_t v113 = "ADS_Stream.cpp";
                        __int16 v114 = 1024;
                        int v115 = 380;
                        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Stream::UpdateSampleRate: Sample rate not supported by this stream", buf, 0x12u);
                      }
                      unsigned __int8 v87 = __cxa_allocate_exception(0x10uLL);
                      *(void *)unsigned __int8 v87 = off_1F148A5D8;
                      v87[2] = 560226676;
                    }
                    uint32_t v46 = *(_DWORD *)(v22 + 64);
                    info[0] = *(mach_timebase_info *)&v16;
                    *(_OWORD *)&info[1].denouint64_t m = *(_OWORD *)(v22 + 68);
                    *(_OWORD *)&info[3].numer = *(_OWORD *)(v22 + 80);
                    info[1].numer = v46;
                    info[5].numer = 2;
                    unint64_t v47 = v25;
                    while (!CA::StreamDescription::IsEquivalent((CA::Implementation *)info, v47, 2u)
                         || v47[1].mSampleRate > v16
                         || *(double *)&v47[1].mFormatID < v16)
                    {
                      unint64_t v47 = (const AudioStreamBasicDescription *)((char *)v47 + 56);
                      if (v47 == v26)
                      {
                        std::string::size_type v49 = v25;
                        uint64_t v50 = v22 + 56;
                        goto LABEL_75;
                      }
                    }
                    std::string::size_type v49 = v25;
                    uint64_t v50 = v22 + 56;
                    if (v47 == v26)
                    {
LABEL_75:
                      while (v49->mFormatID != v46)
                      {
                        std::string::size_type v49 = (AudioStreamBasicDescription *)((char *)v49 + 56);
                        if (v49 == v26) {
                          goto LABEL_79;
                        }
                      }
                      unint64_t v47 = v49;
                      if (v49 != v26) {
                        goto LABEL_81;
                      }
LABEL_79:
                      unint64_t v47 = v25;
                    }
LABEL_81:
                    long long v52 = *(_OWORD *)&v47->mSampleRate;
                    long long v51 = *(_OWORD *)&v47->mBytesPerPacket;
                    *(void *)(v50 + 32) = *(void *)&v47->mBitsPerChannel;
                    *(_OWORD *)uint64_t v50 = v52;
                    *(_OWORD *)(v50 + 16) = v51;
                    *(double *)uint64_t v50 = v16;
                    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
                    block = (char *)MEMORY[0x1E4F143A8];
                    uint64_t v99 = 0x40000000;
                    CFArrayRef v100 = ___ZN3ADS6Stream16UpdateSampleRateEjd_block_invoke;
                    CFIndex v101 = &__block_descriptor_tmp_3_4613;
                    uint64_t v102 = v22;
                    uint64_t v53 = (dispatch_queue_t *)ADS::Simulator::sServerDefaultPriorityQueue;
                    unint64_t v5 = this;
                    size_t v20 = v91;
                    if (ADS::Simulator::sServerDefaultPriorityQueue)
                    {
                      unsigned __int8 v54 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 32));
                      if (v54) {
                        atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
                      }
                      dispatch_async(*v53, &block);
                    }
                    if (v25) {
                      operator delete(v25);
                    }
                  }
                  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v103);
                  ADS::ObjectManager::ReleaseObject((ADS::ObjectManager *)v22, v55);
                  ++v21;
                }
                while (v21 != v20);
                uint64_t v21 = v93;
              }
              if (v21) {
                operator delete(v21);
              }
              char v18 = 1;
              uint64_t v19 = 1;
            }
            while ((v90 & 1) == 0);
            for (uint64_t i = 0; i != -6; i -= 3)
            {
              char v57 = (void *)v111[i - 1];
              if (v57)
              {
                v111[i] = v57;
                operator delete(v57);
              }
            }
            mach_timebase_info(info);
            LODWORD(v59) = info[0].numer;
            LODWORD(v58) = info[0].denom;
            *((double *)v5 + 59) = (double)v58 / (double)v59 * 1000000000.0 / *((double *)v5 + 80);
            p_block = (mach_timebase_info *)&v96;
            goto LABEL_128;
          }
          goto LABEL_130;
        }
        uint64_t v82 = *((void *)this + 15);
        info[0] = (mach_timebase_info)((char *)this + 120);
        LOBYTE(info[1].numer) = (*(uint64_t (**)(void))(v82 + 16))();
        int64_t v83 = (const void *)*((void *)a3 + 7);
        if (v83) {
          CFRetain(*((CFTypeRef *)a3 + 7));
        }
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v107, v83);
        std::string v84 = (unsigned int *)*((void *)v5 + 75);
        *((void *)v5 + 75) = v107;
        uint64_t v107 = v84;
        if (v84) {
          CFRelease(v84);
        }
        CAExtAudioFile::Close((ADS::Device *)((char *)v5 + 608));
      }
      else if (v6 == 1752197475)
      {
        uint64_t v76 = *((void *)this + 15);
        info[0] = (mach_timebase_info)((char *)this + 120);
        LOBYTE(info[1].numer) = (*(uint64_t (**)(void))(v76 + 16))();
        *((void *)v5 + 72) = *((void *)a3 + 7);
      }
      else
      {
        if (v6 != 1752525155) {
          goto LABEL_130;
        }
        uint64_t v9 = *((void *)this + 15);
        info[0] = (mach_timebase_info)((char *)this + 120);
        LOBYTE(info[1].numer) = (*(uint64_t (**)(void))(v9 + 16))();
        *((void *)v5 + 73) = *((void *)a3 + 7);
      }
      goto LABEL_126;
    }
    if (v6 > 1936092531)
    {
      if (v6 != 1936092532)
      {
        if (v6 != 1937008739) {
          goto LABEL_130;
        }
        uint64_t v62 = *((void *)this + 15);
        info[0] = (mach_timebase_info)((char *)this + 120);
        LOBYTE(info[1].numer) = (*(uint64_t (**)(void))(v62 + 16))();
        *((void *)v5 + 74) = *((void *)a3 + 7);
        goto LABEL_126;
      }
    }
    else if (v6 != 1885762592)
    {
      if (v6 != 1935892848) {
        goto LABEL_130;
      }
      uint64_t v12 = *((void *)this + 15);
      info[0] = (mach_timebase_info)((char *)this + 120);
      LOBYTE(info[1].numer) = (*(uint64_t (**)(void))(v12 + 16))();
      *((unsigned char *)v5 + 544) = *((double *)a3 + 7) != 0.0;
      goto LABEL_126;
    }
    uint64_t v63 = *((void *)this + 15);
    block = (char *)this + 120;
    LOBYTE(v99) = (*(uint64_t (**)(void))(v63 + 16))();
    memset(info, 0, 24);
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(info, *((const void **)v5 + 45), *((void *)v5 + 46), (uint64_t)(*((void *)v5 + 46) - *((void *)v5 + 45)) >> 2);
    memset(&info[3], 0, 24);
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&info[3], *((const void **)v5 + 48), *((void *)v5 + 49), (uint64_t)(*((void *)v5 + 49) - *((void *)v5 + 48)) >> 2);
    char v64 = 0;
    uint64_t v65 = 0;
    do
    {
      char v66 = v64;
      uint64_t v107 = 0;
      unint64_t v108 = 0;
      uint64_t v109 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v107, *(const void **)&info[3 * v65], *(void *)&info[3 * v65 + 1], (uint64_t)(*(void *)&info[3 * v65 + 1] - *(void *)&info[3 * v65]) >> 2);
      int64x2_t v67 = v107;
      std::string::size_type v68 = v108;
      for (uint64_t j = v107; j != v68; ++j)
      {
        uint64_t v70 = (ADS::ObjectManager *)*j;
        if (v70 == *((_DWORD *)a3 + 2))
        {
          char v71 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID(v70);
          (*(void (**)(ADS::ObjectManager *, unint64_t, char *))(*(void *)v71 + 72))(v71, a2, a3);
          *((void *)this + 80) = *((void *)v71 + 7);
          ADS::ObjectManager::ReleaseObject(v71, v72);
        }
      }
      if (v67) {
        operator delete(v67);
      }
      char v64 = 1;
      uint64_t v65 = 1;
    }
    while ((v66 & 1) == 0);
    uint64_t v73 = 0;
    unint64_t v5 = this;
    do
    {
      std::string v74 = (void *)info[v73 + 3];
      if (v74)
      {
        info[v73 + 4] = (mach_timebase_info)v74;
        operator delete(v74);
      }
      v73 -= 3;
    }
    while (v73 != -6);
    p_block = (mach_timebase_info *)&block;
    goto LABEL_128;
  }
  if (v6 > 1685484384)
  {
    if (v6 > 1751738722)
    {
      if (v6 == 1751738723)
      {
        uint64_t v85 = *((void *)this + 15);
        info[0] = (mach_timebase_info)((char *)this + 120);
        LOBYTE(info[1].numer) = (*(uint64_t (**)(void))(v85 + 16))();
        *((void *)v5 + 71) = *((void *)a3 + 7);
      }
      else
      {
        if (v6 != 1751740259) {
          goto LABEL_130;
        }
        uint64_t v61 = *((void *)this + 15);
        info[0] = (mach_timebase_info)((char *)this + 120);
        LOBYTE(info[1].numer) = (*(uint64_t (**)(void))(v61 + 16))();
        *((void *)v5 + 70) = *((void *)a3 + 7);
      }
    }
    else
    {
      if (v6 == 1685484385)
      {
        long long v77 = *(_OWORD *)(a3 + 72);
        *(_OWORD *)&info[0].numer = *(_OWORD *)(a3 + 56);
        *(_OWORD *)&info[2].numer = v77;
        long long v78 = *(_OWORD *)(a3 + 104);
        *(_OWORD *)&info[4].numer = *(_OWORD *)(a3 + 88);
        long long v106 = v78;
        ADS::Device::performDeviceAction((uint64_t)this, (uint64_t)info);
        (*(void (**)(char *))(*(void *)a3 + 8))(a3);
        goto LABEL_129;
      }
      if (v6 != 1685484386) {
        goto LABEL_130;
      }
      uint64_t v10 = *((void *)this + 15);
      info[0] = (mach_timebase_info)((char *)this + 120);
      LOBYTE(info[1].numer) = (*(uint64_t (**)(void))(v10 + 16))();
      atomic_store(*((_DWORD *)a3 + 14), (unsigned int *)v5 + 191);
      char v11 = atomic_load((unsigned int *)v5 + 191);
      *((unsigned char *)v5 + 545) = (v11 & 0x40) != 0;
    }
LABEL_126:
    (*(void (**)(char *))(*(void *)a3 + 8))(a3);
    goto LABEL_127;
  }
  if (v6 <= 1634690671)
  {
    if (v6 != 1634038341)
    {
      if (v6 == 1634038357)
      {
        uint64_t v7 = *((void *)this + 15);
        info[0] = (mach_timebase_info)((char *)this + 120);
        LOBYTE(info[1].numer) = (*(uint64_t (**)(void))(v7 + 16))();
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v107, *((CFTypeRef *)a3 + 7));
        size_t v8 = (unsigned int *)*((void *)v5 + 94);
        *((void *)v5 + 94) = v107;
        uint64_t v107 = v8;
        if (v8) {
          CFRelease(v8);
        }
        goto LABEL_127;
      }
LABEL_130:
      ADS::BaseObject::PerformConfigChange(this, a2, a3);
      goto LABEL_129;
    }
    uint64_t v75 = *((void *)this + 15);
    info[0] = (mach_timebase_info)((char *)this + 120);
    LOBYTE(info[1].numer) = (*(uint64_t (**)(void))(v75 + 16))();
    *((_DWORD *)v5 + 190) = *((_DWORD *)a3 + 14);
LABEL_127:
    p_block = info;
LABEL_128:
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)p_block);
    goto LABEL_129;
  }
  if (v6 == 1634690672)
  {
    uint64_t v79 = *((void *)this + 15);
    info[0] = (mach_timebase_info)((char *)this + 120);
    LOBYTE(info[1].numer) = (*(uint64_t (**)(void))(v79 + 16))();
    std::string v80 = OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)&v107, *((CFTypeRef *)a3 + 8));
    std::string v81 = (unsigned int *)*((void *)v5 + 67);
    *((void *)v5 + 67) = v108;
    uint64_t v107 = (unsigned int *)&unk_1F1489A20;
    unint64_t v108 = v81;
    OS::CF::UntypedObject::~UntypedObject(v80);
    goto LABEL_126;
  }
  if (v6 != 1650685548) {
    goto LABEL_130;
  }
  uint64_t v13 = ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*((unsigned int *)a3 + 2));
  uint64_t v15 = (ADS::ObjectManager *)v13;
  if (v13) {
    (*(void (**)(uint64_t, unint64_t, char *))(*(void *)v13 + 72))(v13, a2, a3);
  }
  ADS::ObjectManager::ReleaseObject(v15, v14);
LABEL_129:
  atomic_store(0, (unsigned __int8 *)v5 + 436);
}

void sub_1BAC40258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

BOOL ADS::Device::isSupportedSampleRate(ADS::Device *this, double a2)
{
  uint64_t v2 = (char *)*((void *)this + 42);
  unsigned int v3 = (char *)this + 344;
  if (v2 != (char *)this + 344)
  {
    while (*((double *)v2 + 4) > a2 || *((double *)v2 + 5) < a2)
    {
      unint64_t v5 = (char *)*((void *)v2 + 1);
      if (v5)
      {
        do
        {
          int v6 = v5;
          unint64_t v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          int v6 = (char *)*((void *)v2 + 2);
          BOOL v7 = *(void *)v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
      if (v6 == v3)
      {
        uint64_t v2 = (char *)this + 344;
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

void ADS::Device::performDeviceAction(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1 + 120;
  uint64_t v4 = *(void *)(a1 + 120);
  uint64_t v26 = a1 + 120;
  char v27 = (*(uint64_t (**)(uint64_t))(v4 + 16))(a1 + 120);
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 648) = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 696) = v7;
  *(_OWORD *)(v5 + 680) = v6;
  *(_OWORD *)(v5 + 664) = v8;
  int v9 = *(_DWORD *)(v5 + 648);
  if (v9 != 3)
  {
    if (v9 != 2)
    {
      if (v9 == 1)
      {
        if (ADS::Device::isSupportedSampleRate((ADS::Device *)a1, *(double *)(a2 + 8))) {
          operator new();
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3603;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::PerformConfigChange via DeviceAction: unsupported sample rate", buf, 0x12u);
        }
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = off_1F148A5D8;
        exception[2] = 560226676;
      }
      goto LABEL_19;
    }
    if (*(void *)(a2 + 16))
    {
      if ((*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 32))(a1, *(unsigned int *)(a1 + 8), 0))
      {
        LODWORD(v25.__r_.__value_.__l.__data_) = 0;
        memset(buf, 0, 24);
        (*(void (**)(uint64_t, void, void, void, void, void, void, void, std::string *, uint8_t *, char))(*(void *)a1 + 64))(a1, *(unsigned int *)(a1 + 8), 0, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24), *(void *)(a2 + 32), *(unsigned int *)(a2 + 40), *(void *)(a2 + 48), &v25, buf, 1);
        if (LODWORD(v25.__r_.__value_.__l.__data_))
        {
          pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 1174405120;
          block[2] = ___ZN3ADS6Device19performDeviceActionERK20FakeDeviceActionData_block_invoke;
          block[3] = &__block_descriptor_tmp_251;
          int data = (int)v25.__r_.__value_.__l.__data_;
          block[4] = a1;
          std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 0;
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&__p, *(const void **)buf, *(uint64_t *)&buf[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 2));
          uint64_t v10 = (dispatch_queue_t *)ADS::Simulator::sServerHighPriorityQueue;
          if (ADS::Simulator::sServerHighPriorityQueue)
          {
            unsigned __int8 v11 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerHighPriorityQueue + 32));
            if (v11) {
              atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerHighPriorityQueue + 33));
            }
            dispatch_async(*v10, block);
          }
          if (__p)
          {
            uint64_t v22 = __p;
            operator delete(__p);
          }
        }
        if (*(void *)buf)
        {
          *(void *)&uint8_t buf[8] = *(void *)buf;
          operator delete(*(void **)buf);
        }
        goto LABEL_19;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        caulk::string_from_4cc(&v25, **(_DWORD **)(a2 + 16));
        char v18 = (v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v25
            : (std::string *)v25.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3613;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v18;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::SetPropertyData via privileged DeviceAction: device does not have property %s", buf, 0x1Cu);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v25.__r_.__value_.__l.__data_);
        }
      }
      int v16 = 2003332927;
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3612;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::SetPropertyData via privileged DeviceAction: device action property address was NULL", buf, 0x12u);
      }
      int v16 = 1852797029;
    }
    uint64_t v19 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v19 = off_1F148A5D8;
    v19[2] = v16;
  }
  pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
  uint64_t v12 = ADS::Simulator::sInstance;
  uint64_t v13 = *(void *)(ADS::Simulator::sInstance + 56);
  *(void *)AudioObjectPropertyAddress buf = ADS::Simulator::sInstance + 56;
  uint8_t buf[8] = (*(uint64_t (**)(void))(v13 + 16))();
  *(unsigned char *)(v12 + 216) = 1;
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)buf);
  strcpy((char *)buf, "#vedbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  if (ADS::Simulator::sHost)
  {
    uint64_t v14 = *(unsigned int *)(a1 + 20);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint8_t *))ADS::Simulator::sHost;
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    v15(ADS::Simulator::sHost, v14, 1, buf);
  }
LABEL_19:
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v26);
}

void sub_1BAC40A88(_Unwind_Exception *a1)
{
  MEMORY[0x1C1859840](v1, 0x10A1C40E7D7FC54);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)(v2 - 112));
  _Unwind_Resume(a1);
}

OpaqueExtAudioFile *CAExtAudioFile::Close(CAExtAudioFile *this)
{
  uint64_t result = (OpaqueExtAudioFile *)*((void *)this + 1);
  if (result)
  {
    *((void *)this + 1) = 0;
    uint64_t v3 = ExtAudioFileDispose(result);
    uint64_t v4 = *(uint64_t (**)(CAExtAudioFile *, uint64_t, const char *))(*(void *)this + 16);
    return (OpaqueExtAudioFile *)v4(this, v3, "ExtAudioFileClose");
  }
  return result;
}

uint64_t ADS::ChangeInfoData<double>::ChangeInfoData(uint64_t a1, int a2, uint64_t a3, int a4, double a5)
{
  v8[4] = *MEMORY[0x1E4F143B8];
  int v8[3] = 0;
  *(void *)a1 = &unk_1F14674F0;
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  std::__function::__value_func<int ()(void)>::__value_func[abi:ne180100](a1 + 24, (uint64_t)v8);
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](v8);
  *(void *)a1 = &unk_1F1466A00;
  *(double *)(a1 + 56) = a5;
  return a1;
}

void sub_1BAC40C20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

std::string *caulk::string_from_4cc(std::string *retstr, unsigned int __val)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v2 = bswap32(__val);
  int v5 = v2;
  if (((char)v2 - 32) > 0x5E
    || (((__int16)v2 >> 8) - 32) > 0x5E
    || ((v2 << 8 >> 24) - 32) > 0x5E
    || ((v2 >> 24) - 32) > 0x5E)
  {
    return std::to_string(retstr, __val);
  }
  __int16 v6 = 39;
  char v4 = 39;
  return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, &v4);
}

void sub_1BAC40CE8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t ___ZN3ADS6Device19performDeviceActionERK20FakeDeviceActionData_block_invoke(uint64_t result)
{
  if (ADS::Simulator::sHost)
  {
    uint64_t v1 = *(void *)(result + 40);
    uint64_t v2 = *(unsigned int *)(*(void *)(result + 32) + 8);
    uint64_t v3 = *(unsigned int *)(result + 64);
    char v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))ADS::Simulator::sHost;
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    return v4(ADS::Simulator::sHost, v2, v3, v1);
  }
  return result;
}

void sub_1BAC40D6C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void __destroy_helper_block_e8_40c68_ZTSNSt3__16vectorI26AudioObjectPropertyAddressNS_9allocatorIS1_EEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void *__copy_helper_block_e8_40c68_ZTSNSt3__16vectorI26AudioObjectPropertyAddressNS_9allocatorIS1_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = (void *)(a1 + 40);
  v2[2] = 0;
  return std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(v2, *(const void **)(a2 + 40), *(void *)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2));
}

void ADS::ChangeInfoData<double>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);

  JUMPOUT(0x1C1859840);
}

void *ADS::ChangeInfoData<double>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);
  return a1;
}

void ADS::Device::SetPropertyData(uint64_t a1, ADS::ObjectManager *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, unint64_t *a10, char a11)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 8) == a2)
  {
    ADS::Device::Device_SetPropertyData(a1, (int)a2, a3, a4, a5, a7, a8, a9, a10, a11);
  }
  else
  {
    uint64_t v17 = ADS::ObjectManager::CopyObjectByObjectID(a2);
    char v18 = (ADS::ObjectManager *)v17;
    if (!v17)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v23 = "ADS_Device.cpp";
        __int16 v24 = 1024;
        int v25 = 2029;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::GetPropertyData: unknown device", buf, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = 560947818;
    }
    (*(void (**)(uint64_t, ADS::ObjectManager *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *, unint64_t *, char))(*(void *)v17 + 64))(v17, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    ADS::ObjectManager::ReleaseObject(v18, v19);
  }
}

void sub_1BAC410A0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ADS::Device::Device_SetPropertyData(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD *a8, unint64_t *a9, unsigned __int8 a10)
{
  uint64_t v242 = *MEMORY[0x1E4F143B8];
  int v12 = *(_DWORD *)a4;
  if (*(int *)a4 <= 1751740258)
  {
    if (v12 <= 1685484384)
    {
      if (v12 <= 1634690671)
      {
        if (v12 == 1634038341)
        {
          if ((a10 & 1) == 0)
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            CFIndex v178 = **(NSObject ***)buf;
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (os_log_type_enabled(v178, OS_LOG_TYPE_ERROR))
            {
              unint64_t v179 = pthread_self();
              mach_port_t v180 = pthread_mach_thread_np(v179);
              *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v180;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = "ADS_Device.cpp";
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = 3438;
              *(_WORD *)&unsigned char buf[24] = 2080;
              *(void *)&buf[26] = "policy != SettabilityPolicy::IgnoreSettability";
              _os_log_error_impl(&dword_1BAA78000, v178, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Setting priveleged property failed", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v213);
            __cxa_allocate_exception(0x40uLL);
            std::runtime_error::runtime_error(&v212, "Setting priveleged property failed");
            std::runtime_error::runtime_error(&v234, &v212);
            uint64_t v236 = 0;
            uint64_t v237 = 0;
            uint64_t v238 = 0;
            int v239 = -1;
            v234.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
            mach_port_t v235 = &unk_1F148A9D0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v234);
            *(void *)&buf[32] = "void ADS::Device::Device_SetPropertyData(AudioObjectID, pid_t, const AudioObjectProper"
                                  "tyAddress &, UInt32, const void *, UInt32, const void *, UInt32 &, std::vector<AudioOb"
                                  "jectPropertyAddress> &, SettabilityPolicy)";
            *(void *)&uint8_t buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/ADS/AudioObjects/ADS_Device.cpp";
            LODWORD(v241) = 3438;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v207);
            long long v210 = v207;
            uint64_t v209 = &unk_1F148AA90;
            uint64_t v211 = v208;
            long long v207 = 0uLL;
            uint64_t v208 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
          }
          int v50 = *(_DWORD *)a7;
          int v51 = *(_DWORD *)(a1 + 8);
          pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
          v201[0] = MEMORY[0x1E4F143A8];
          v201[1] = 0x40000000;
          v201[2] = ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_249;
          v201[3] = &__block_descriptor_tmp_250;
          int v202 = v51;
          int v203 = v50;
          long long v52 = (NSObject **)ADS::Simulator::sServerDefaultPriorityQueue;
          if (ADS::Simulator::sServerDefaultPriorityQueue)
          {
            unsigned __int8 v53 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 32));
            if (v53) {
              atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
            }
            uint64_t v17 = *v52;
            char v18 = v201;
            goto LABEL_118;
          }
          return;
        }
        if (v12 == 1634038357)
        {
          if ((a10 & 1) == 0)
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            CFIndex v181 = **(NSObject ***)buf;
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
            {
              unint64_t v182 = pthread_self();
              mach_port_t v183 = pthread_mach_thread_np(v182);
              *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v183;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = "ADS_Device.cpp";
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = 3423;
              *(_WORD *)&unsigned char buf[24] = 2080;
              *(void *)&buf[26] = "policy != SettabilityPolicy::IgnoreSettability";
              _os_log_error_impl(&dword_1BAA78000, v181, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Setting priveleged property failed", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v213);
            __cxa_allocate_exception(0x40uLL);
            std::runtime_error::runtime_error(&v212, "Setting priveleged property failed");
            std::runtime_error::runtime_error(&v234, &v212);
            uint64_t v236 = 0;
            uint64_t v237 = 0;
            uint64_t v238 = 0;
            int v239 = -1;
            v234.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
            mach_port_t v235 = &unk_1F148A9D0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v234);
            *(void *)&buf[32] = "void ADS::Device::Device_SetPropertyData(AudioObjectID, pid_t, const AudioObjectProper"
                                  "tyAddress &, UInt32, const void *, UInt32, const void *, UInt32 &, std::vector<AudioOb"
                                  "jectPropertyAddress> &, SettabilityPolicy)";
            *(void *)&uint8_t buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/ADS/AudioObjects/ADS_Device.cpp";
            LODWORD(v241) = 3423;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v207);
            long long v210 = v207;
            uint64_t v209 = &unk_1F148AA90;
            uint64_t v211 = v208;
            long long v207 = 0uLL;
            uint64_t v208 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
          }
          CFTypeRef v19 = *(CFTypeRef *)a7;
          if (*(void *)a7)
          {
            CFRetain(*(CFTypeRef *)a7);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, v19);
          }
          else
          {
            *(void *)AudioObjectPropertyAddress buf = 0;
          }
          int v87 = *(_DWORD *)(a1 + 8);
          pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
          v204[0] = MEMORY[0x1E4F143A8];
          v204[1] = 1174405120;
          v204[2] = ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_247;
          v204[3] = &__block_descriptor_tmp_248;
          int v206 = v87;
          char v88 = *(const void **)buf;
          if (*(void *)buf) {
            CFRetain(*(CFTypeRef *)buf);
          }
          CFDictionaryRef v205 = v88;
          size_t v89 = (dispatch_queue_t *)ADS::Simulator::sServerDefaultPriorityQueue;
          if (ADS::Simulator::sServerDefaultPriorityQueue)
          {
            unsigned __int8 v90 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 32));
            if (v90) {
              atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
            }
            dispatch_async(*v89, v204);
            char v88 = v205;
          }
          if (v88) {
            CFRelease(v88);
          }
          if (*(void *)buf) {
            CFRelease(*(CFTypeRef *)buf);
          }
          return;
        }
        goto LABEL_120;
      }
      if (v12 == 1634690672)
      {
        if (*(_DWORD *)(a1 + 12) == 1633905771)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3089;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: clock devices do not have streams (kAudioFakeDevicePropertyAudioOutFilePath)", buf, 0x12u);
          }
          exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
          *(void *)exceptiouint64_t n = off_1F148A5D8;
          exception[2] = 1970171760;
        }
        if (a6 != 8)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3090;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for kAudioFakeDevicePropertyAudioOutFilePath", buf, 0x12u);
          }
          std::string v198 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::string v198 = off_1F148A5D8;
          v198[2] = 561211770;
        }
        uint64_t v56 = *(const char **)a7;
        if (*(void *)a7) {
          CFRetain(*(CFTypeRef *)a7);
        }
        v234.__vftable = (std::runtime_error_vtbl *)&unk_1F1489A20;
        v234.__imp_.__imp_ = v56;
        OS::CF::String::AsStdString((std::string *)buf, (uint64_t)&v234);
        if (buf[23] >= 0) {
          char v57 = buf;
        }
        else {
          char v57 = *(const char **)buf;
        }
        int v58 = access(v57, 2);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (v58)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3093;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: cannot write to the requested path.", buf, 0x12u);
          }
          unint64_t v200 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v200 = off_1F148A5D8;
          v200[2] = 560492391;
        }
        if (*(void *)(a1 + 440))
        {
          int v59 = *(_DWORD *)(a1 + 8);
          pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 1174405120;
          block[2] = ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke;
          block[3] = &__block_descriptor_tmp_4243;
          int v233 = v59;
          OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v232, v234.__imp_.__imp_);
          v232[0] = &unk_1F1489A20;
          uint64_t v60 = (dispatch_queue_t *)ADS::Simulator::sServerDefaultPriorityQueue;
          if (ADS::Simulator::sServerDefaultPriorityQueue)
          {
            unsigned __int8 v61 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 32));
            if (v61) {
              atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
            }
            dispatch_async(*v60, block);
          }
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v232);
        }
        else
        {
          OS::CF::UntypedObject::operator=(a1 + 528, v234.__imp_.__imp_);
          *a8 = 1;
          std::string v84 = (_DWORD *)a9[1];
          unint64_t v85 = a9[2];
          if ((unint64_t)v84 >= v85)
          {
            unint64_t v141 = 0x1555555555555555;
            uint64_t v142 = (_DWORD *)*a9;
            unint64_t v143 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v84 - *a9) >> 2);
            unint64_t v144 = v143 + 1;
            if (v143 + 1 > 0x1555555555555555) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v145 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (void)v142) >> 2);
            if (2 * v145 > v144) {
              unint64_t v144 = 2 * v145;
            }
            if (v145 < 0xAAAAAAAAAAAAAAALL) {
              unint64_t v141 = v144;
            }
            if (v141)
            {
              unint64_t v141 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v141);
              uint64_t v142 = (_DWORD *)*a9;
              std::string v84 = (_DWORD *)a9[1];
            }
            else
            {
              uint64_t v146 = 0;
            }
            unint64_t v172 = v141 + 12 * v143;
            unint64_t v173 = v141 + 12 * v146;
            *(void *)unint64_t v172 = 0x676C6F62616F6670;
            *(_DWORD *)(v172 + 8) = 0;
            unint64_t v86 = v172 + 12;
            if (v84 != v142)
            {
              do
              {
                uint64_t v174 = *(void *)(v84 - 3);
                v84 -= 3;
                int v175 = v84[2];
                *(void *)(v172 - 12) = v174;
                v172 -= 12;
                *(_DWORD *)(v172 + 8) = v175;
              }
              while (v84 != v142);
              uint64_t v142 = (_DWORD *)*a9;
            }
            *a9 = v172;
            a9[1] = v86;
            a9[2] = v173;
            if (v142) {
              operator delete(v142);
            }
          }
          else
          {
            *(void *)std::string v84 = 0x676C6F62616F6670;
            v84[2] = 0;
            unint64_t v86 = (unint64_t)(v84 + 3);
          }
          a9[1] = v86;
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v234);
        return;
      }
      if (v12 != 1685087596) {
        goto LABEL_120;
      }
      if (a6 != 4)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3190;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for kAudioDevicePropertyEnableListening", buf, 0x12u);
        }
        unint64_t v191 = __cxa_allocate_exception(0x10uLL);
        *(void *)unint64_t v191 = off_1F148A5D8;
        v191[2] = 561211770;
      }
      if (*(_DWORD *)(a1 + 632) == *(_DWORD *)a7) {
        return;
      }
      *(_DWORD *)(a1 + 632) = *(_DWORD *)a7;
      *a8 = 1;
      long long v28 = (_DWORD *)a9[1];
      unint64_t v29 = a9[2];
      if ((unint64_t)v28 >= v29)
      {
        unint64_t v96 = 0x1555555555555555;
        uint64_t v70 = (_DWORD *)*a9;
        unint64_t v97 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v28 - *a9) >> 2);
        unint64_t v98 = v97 + 1;
        if (v97 + 1 > 0x1555555555555555) {
          goto LABEL_307;
        }
        unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (void)v70) >> 2);
        if (2 * v99 > v98) {
          unint64_t v98 = 2 * v99;
        }
        if (v99 < 0xAAAAAAAAAAAAAAALL) {
          unint64_t v96 = v98;
        }
        if (v96)
        {
          unint64_t v96 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v96);
          uint64_t v70 = (_DWORD *)*a9;
          long long v28 = (_DWORD *)a9[1];
        }
        else
        {
          uint64_t v100 = 0;
        }
        unint64_t v136 = v96 + 12 * v97;
        unint64_t v137 = v96 + 12 * v100;
        *(void *)unint64_t v136 = 0x676C6F626470656CLL;
        *(_DWORD *)(v136 + 8) = 0;
        unint64_t v138 = v136 + 12;
        if (v28 == v70) {
          goto LABEL_293;
        }
        do
        {
          uint64_t v156 = *(void *)(v28 - 3);
          v28 -= 3;
          int v157 = v28[2];
          *(void *)(v136 - 12) = v156;
          v136 -= 12;
          *(_DWORD *)(v136 + 8) = v157;
        }
        while (v28 != v70);
        goto LABEL_292;
      }
      uint64_t v30 = 0x676C6F626470656CLL;
      goto LABEL_236;
    }
    if (v12 > 1751737453)
    {
      if (v12 == 1751737454)
      {
        if (!a10) {
          return;
        }
        *(unsigned char *)(a1 + 482) = *(_DWORD *)a7 != 0;
        *a8 = 1;
        long long v28 = (_DWORD *)a9[1];
        unint64_t v62 = a9[2];
        if ((unint64_t)v28 >= v62)
        {
          unint64_t v91 = 0x1555555555555555;
          uint64_t v70 = (_DWORD *)*a9;
          unint64_t v92 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v28 - *a9) >> 2);
          unint64_t v93 = v92 + 1;
          if (v92 + 1 > 0x1555555555555555) {
            goto LABEL_307;
          }
          unint64_t v94 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - (void)v70) >> 2);
          if (2 * v94 > v93) {
            unint64_t v93 = 2 * v94;
          }
          if (v94 < 0xAAAAAAAAAAAAAAALL) {
            unint64_t v91 = v93;
          }
          if (v91)
          {
            unint64_t v91 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v91);
            uint64_t v70 = (_DWORD *)*a9;
            long long v28 = (_DWORD *)a9[1];
          }
          else
          {
            uint64_t v95 = 0;
          }
          unint64_t v136 = v91 + 12 * v92;
          unint64_t v137 = v91 + 12 * v95;
          *(void *)unint64_t v136 = 0x676C6F626869646ELL;
          *(_DWORD *)(v136 + 8) = 0;
          unint64_t v138 = v136 + 12;
          if (v28 == v70) {
            goto LABEL_293;
          }
          do
          {
            uint64_t v154 = *(void *)(v28 - 3);
            v28 -= 3;
            int v155 = v28[2];
            *(void *)(v136 - 12) = v154;
            v136 -= 12;
            *(_DWORD *)(v136 + 8) = v155;
          }
          while (v28 != v70);
          goto LABEL_292;
        }
        uint64_t v30 = 0x676C6F626869646ELL;
        goto LABEL_236;
      }
      if (v12 != 1751738723) {
        goto LABEL_120;
      }
      if (a6 != 8)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3254;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for kAudioFakeDevicePropertyHardwareIsolatedIOCallback", buf, 0x12u);
        }
        CFTypeRef v192 = __cxa_allocate_exception(0x10uLL);
        *(void *)CFTypeRef v192 = off_1F148A5D8;
        v192[2] = 561211770;
      }
      CFTypeRef v31 = *(CFTypeRef *)a7;
      if (*(void *)(a1 + 440))
      {
        int v32 = *(_DWORD *)(a1 + 8);
        pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
        v224[0] = MEMORY[0x1E4F143A8];
        v224[1] = 0x40000000;
        v224[2] = ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_233;
        v224[3] = &__block_descriptor_tmp_234;
        int v225 = v32;
        v224[4] = v31;
        unint64_t v33 = (NSObject **)ADS::Simulator::sServerDefaultPriorityQueue;
        if (ADS::Simulator::sServerDefaultPriorityQueue)
        {
          unsigned __int8 v34 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 32));
          if (v34) {
            atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
          }
          uint64_t v17 = *v33;
          char v18 = v224;
          goto LABEL_118;
        }
        return;
      }
      *(void *)(a1 + 568) = v31;
      *a8 = 1;
      long long v28 = (_DWORD *)a9[1];
      unint64_t v82 = a9[2];
      if ((unint64_t)v28 < v82)
      {
        uint64_t v30 = 0x676C6F6268696963;
        goto LABEL_236;
      }
      unint64_t v126 = 0x1555555555555555;
      uint64_t v70 = (_DWORD *)*a9;
      unint64_t v127 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v28 - *a9) >> 2);
      unint64_t v128 = v127 + 1;
      if (v127 + 1 > 0x1555555555555555) {
        goto LABEL_307;
      }
      unint64_t v129 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82 - (void)v70) >> 2);
      if (2 * v129 > v128) {
        unint64_t v128 = 2 * v129;
      }
      if (v129 < 0xAAAAAAAAAAAAAAALL) {
        unint64_t v126 = v128;
      }
      if (v126)
      {
        unint64_t v126 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v126);
        uint64_t v70 = (_DWORD *)*a9;
        long long v28 = (_DWORD *)a9[1];
      }
      else
      {
        uint64_t v130 = 0;
      }
      unint64_t v136 = v126 + 12 * v127;
      unint64_t v137 = v126 + 12 * v130;
      *(void *)unint64_t v136 = 0x676C6F6268696963;
      *(_DWORD *)(v136 + 8) = 0;
      unint64_t v138 = v136 + 12;
      if (v28 == v70) {
        goto LABEL_293;
      }
      do
      {
        uint64_t v168 = *(void *)(v28 - 3);
        v28 -= 3;
        int v169 = v28[2];
        *(void *)(v136 - 12) = v168;
        v136 -= 12;
        *(_DWORD *)(v136 + 8) = v169;
      }
      while (v28 != v70);
    }
    else
    {
      if (v12 == 1685484385)
      {
        if (a6 != 64)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3233;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for kAudioFakeDevicePropertyTriggerAction", buf, 0x12u);
          }
          std::string v194 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::string v194 = off_1F148A5D8;
          v194[2] = 561211770;
        }
        long long v54 = *(_OWORD *)(a7 + 16);
        *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)a7;
        *(_OWORD *)&buf[16] = v54;
        long long v55 = *(_OWORD *)(a7 + 48);
        *(_OWORD *)&buf[32] = *(_OWORD *)(a7 + 32);
        long long v241 = v55;
        if (*(void *)(a1 + 440) || (*(_DWORD *)buf | 2) == 3) {
          operator new();
        }
        ADS::Device::performDeviceAction(a1, (uint64_t)buf);
        *a8 = 1;
        v234.__vftable = (std::runtime_error_vtbl *)0x676C6F6264767361;
        LODWORD(v234.__imp_.__imp_) = 0;
        std::vector<AudioObjectPropertyAddress>::push_back[abi:ne180100](a9, (uint64_t *)&v234);
        return;
      }
      if (v12 != 1685484386) {
        goto LABEL_120;
      }
      if (a6 != 4)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3205;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for kAudioFakeDevicePropertySelectBehavior", buf, 0x12u);
        }
        int64x2_t v190 = __cxa_allocate_exception(0x10uLL);
        *(void *)int64x2_t v190 = off_1F148A5D8;
        v190[2] = 561211770;
      }
      if (*(void *)(a1 + 440)) {
        operator new();
      }
      atomic_store(*(_DWORD *)a7, (unsigned int *)(a1 + 764));
      char v80 = atomic_load((unsigned int *)(a1 + 764));
      *(unsigned char *)(a1 + 545) = (v80 & 0x40) != 0;
      *a8 = 1;
      long long v28 = (_DWORD *)a9[1];
      unint64_t v81 = a9[2];
      if ((unint64_t)v28 < v81)
      {
        uint64_t v30 = 0x676C6F6264767362;
        goto LABEL_236;
      }
      unint64_t v121 = 0x1555555555555555;
      uint64_t v70 = (_DWORD *)*a9;
      unint64_t v122 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v28 - *a9) >> 2);
      unint64_t v123 = v122 + 1;
      if (v122 + 1 > 0x1555555555555555) {
        goto LABEL_307;
      }
      unint64_t v124 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - (void)v70) >> 2);
      if (2 * v124 > v123) {
        unint64_t v123 = 2 * v124;
      }
      if (v124 < 0xAAAAAAAAAAAAAAALL) {
        unint64_t v121 = v123;
      }
      if (v121)
      {
        unint64_t v121 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v121);
        uint64_t v70 = (_DWORD *)*a9;
        long long v28 = (_DWORD *)a9[1];
      }
      else
      {
        uint64_t v125 = 0;
      }
      unint64_t v136 = v121 + 12 * v122;
      unint64_t v137 = v121 + 12 * v125;
      *(void *)unint64_t v136 = 0x676C6F6264767362;
      *(_DWORD *)(v136 + 8) = 0;
      unint64_t v138 = v136 + 12;
      if (v28 == v70) {
        goto LABEL_293;
      }
      do
      {
        uint64_t v166 = *(void *)(v28 - 3);
        v28 -= 3;
        int v167 = v28[2];
        *(void *)(v136 - 12) = v166;
        v136 -= 12;
        *(_DWORD *)(v136 + 8) = v167;
      }
      while (v28 != v70);
    }
    goto LABEL_292;
  }
  if (v12 <= 1769302371)
  {
    if (v12 <= 1752525154)
    {
      if (v12 == 1751740259)
      {
        if (a6 != 8)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3362;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for kAudioFakeDevicePropertyHardwareIOCallback", buf, 0x12u);
          }
          v186 = __cxa_allocate_exception(0x10uLL);
          *(void *)v186 = off_1F148A5D8;
          v186[2] = 561211770;
        }
        CFTypeRef v38 = *(CFTypeRef *)a7;
        if (*(void *)(a1 + 440))
        {
          int v39 = *(_DWORD *)(a1 + 8);
          pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
          v216[0] = MEMORY[0x1E4F143A8];
          v216[1] = 0x40000000;
          v216[2] = ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_241;
          v216[3] = &__block_descriptor_tmp_242;
          int v217 = v39;
          v216[4] = v38;
          long long v40 = (NSObject **)ADS::Simulator::sServerDefaultPriorityQueue;
          if (ADS::Simulator::sServerDefaultPriorityQueue)
          {
            unsigned __int8 v41 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 32));
            if (v41) {
              atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
            }
            uint64_t v17 = *v40;
            char v18 = v216;
            goto LABEL_118;
          }
          return;
        }
        *(void *)(a1 + 560) = v38;
        *a8 = 1;
        long long v28 = (_DWORD *)a9[1];
        unint64_t v75 = a9[2];
        if ((unint64_t)v28 >= v75)
        {
          unint64_t v101 = 0x1555555555555555;
          uint64_t v70 = (_DWORD *)*a9;
          unint64_t v102 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v28 - *a9) >> 2);
          unint64_t v103 = v102 + 1;
          if (v102 + 1 > 0x1555555555555555) {
            goto LABEL_307;
          }
          unint64_t v104 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - (void)v70) >> 2);
          if (2 * v104 > v103) {
            unint64_t v103 = 2 * v104;
          }
          if (v104 < 0xAAAAAAAAAAAAAAALL) {
            unint64_t v101 = v103;
          }
          if (v101)
          {
            unint64_t v101 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v101);
            uint64_t v70 = (_DWORD *)*a9;
            long long v28 = (_DWORD *)a9[1];
          }
          else
          {
            uint64_t v105 = 0;
          }
          unint64_t v136 = v101 + 12 * v102;
          unint64_t v137 = v101 + 12 * v105;
          *(void *)unint64_t v136 = 0x676C6F6268696F63;
          *(_DWORD *)(v136 + 8) = 0;
          unint64_t v138 = v136 + 12;
          if (v28 == v70) {
            goto LABEL_293;
          }
          do
          {
            uint64_t v158 = *(void *)(v28 - 3);
            v28 -= 3;
            int v159 = v28[2];
            *(void *)(v136 - 12) = v158;
            v136 -= 12;
            *(_DWORD *)(v136 + 8) = v159;
          }
          while (v28 != v70);
          goto LABEL_292;
        }
        uint64_t v30 = 0x676C6F6268696F63;
      }
      else
      {
        if (v12 != 1752197475) {
          goto LABEL_120;
        }
        if (a6 != 8)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3281;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for AudioFakeDeviceSetupForIsolatedIOCallback", buf, 0x12u);
          }
          char v184 = __cxa_allocate_exception(0x10uLL);
          *(void *)char v184 = off_1F148A5D8;
          v184[2] = 561211770;
        }
        CFTypeRef v20 = *(CFTypeRef *)a7;
        if (*(void *)(a1 + 440))
        {
          int v21 = *(_DWORD *)(a1 + 8);
          pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
          v222[0] = MEMORY[0x1E4F143A8];
          v222[1] = 0x40000000;
          v222[2] = ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_235;
          v222[3] = &__block_descriptor_tmp_236;
          int v223 = v21;
          v222[4] = v20;
          uint64_t v22 = (NSObject **)ADS::Simulator::sServerDefaultPriorityQueue;
          if (ADS::Simulator::sServerDefaultPriorityQueue)
          {
            unsigned __int8 v23 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 32));
            if (v23) {
              atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
            }
            uint64_t v17 = *v22;
            char v18 = v222;
            goto LABEL_118;
          }
          return;
        }
        *(void *)(a1 + 576) = v20;
        *a8 = 1;
        long long v28 = (_DWORD *)a9[1];
        unint64_t v77 = a9[2];
        if ((unint64_t)v28 >= v77)
        {
          unint64_t v111 = 0x1555555555555555;
          uint64_t v70 = (_DWORD *)*a9;
          unint64_t v112 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v28 - *a9) >> 2);
          unint64_t v113 = v112 + 1;
          if (v112 + 1 > 0x1555555555555555) {
            goto LABEL_307;
          }
          unint64_t v114 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - (void)v70) >> 2);
          if (2 * v114 > v113) {
            unint64_t v113 = 2 * v114;
          }
          if (v114 < 0xAAAAAAAAAAAAAAALL) {
            unint64_t v111 = v113;
          }
          if (v111)
          {
            unint64_t v111 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v111);
            uint64_t v70 = (_DWORD *)*a9;
            long long v28 = (_DWORD *)a9[1];
          }
          else
          {
            uint64_t v115 = 0;
          }
          unint64_t v136 = v111 + 12 * v112;
          unint64_t v137 = v111 + 12 * v115;
          *(void *)unint64_t v136 = 0x676C6F6268706963;
          *(_DWORD *)(v136 + 8) = 0;
          unint64_t v138 = v136 + 12;
          if (v28 == v70) {
            goto LABEL_293;
          }
          do
          {
            uint64_t v162 = *(void *)(v28 - 3);
            v28 -= 3;
            int v163 = v28[2];
            *(void *)(v136 - 12) = v162;
            v136 -= 12;
            *(_DWORD *)(v136 + 8) = v163;
          }
          while (v28 != v70);
          goto LABEL_292;
        }
        uint64_t v30 = 0x676C6F6268706963;
      }
LABEL_236:
      *(void *)long long v28 = v30;
      uint64_t v28[2] = 0;
      unint64_t v138 = (unint64_t)(v28 + 3);
LABEL_295:
      a9[1] = v138;
      return;
    }
    if (v12 == 1752525155)
    {
      if (a6 != 8)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3308;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for AudioFakeDeviceTeardownForIsolatedIOCallback", buf, 0x12u);
        }
        uint64_t v187 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v187 = off_1F148A5D8;
        v187[2] = 561211770;
      }
      CFTypeRef v42 = *(CFTypeRef *)a7;
      if (*(void *)(a1 + 440))
      {
        int v43 = *(_DWORD *)(a1 + 8);
        pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
        v220[0] = MEMORY[0x1E4F143A8];
        v220[1] = 0x40000000;
        v220[2] = ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_237;
        v220[3] = &__block_descriptor_tmp_238;
        int v221 = v43;
        v220[4] = v42;
        std::vector<std::ssub_match>::pointer v44 = (NSObject **)ADS::Simulator::sServerDefaultPriorityQueue;
        if (ADS::Simulator::sServerDefaultPriorityQueue)
        {
          unsigned __int8 v45 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 32));
          if (v45) {
            atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
          }
          uint64_t v17 = *v44;
          char v18 = v220;
          goto LABEL_118;
        }
        return;
      }
      *(void *)(a1 + 584) = v42;
      *a8 = 1;
      long long v28 = (_DWORD *)a9[1];
      unint64_t v76 = a9[2];
      if ((unint64_t)v28 >= v76)
      {
        unint64_t v106 = 0x1555555555555555;
        uint64_t v70 = (_DWORD *)*a9;
        unint64_t v107 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v28 - *a9) >> 2);
        unint64_t v108 = v107 + 1;
        if (v107 + 1 > 0x1555555555555555) {
          goto LABEL_307;
        }
        unint64_t v109 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76 - (void)v70) >> 2);
        if (2 * v109 > v108) {
          unint64_t v108 = 2 * v109;
        }
        if (v109 < 0xAAAAAAAAAAAAAAALL) {
          unint64_t v106 = v108;
        }
        if (v106)
        {
          unint64_t v106 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v106);
          uint64_t v70 = (_DWORD *)*a9;
          long long v28 = (_DWORD *)a9[1];
        }
        else
        {
          uint64_t v110 = 0;
        }
        unint64_t v136 = v106 + 12 * v107;
        unint64_t v137 = v106 + 12 * v110;
        *(void *)unint64_t v136 = 0x676C6F6268756963;
        *(_DWORD *)(v136 + 8) = 0;
        unint64_t v138 = v136 + 12;
        if (v28 == v70) {
          goto LABEL_293;
        }
        do
        {
          uint64_t v160 = *(void *)(v28 - 3);
          v28 -= 3;
          int v161 = v28[2];
          *(void *)(v136 - 12) = v160;
          v136 -= 12;
          *(_DWORD *)(v136 + 8) = v161;
        }
        while (v28 != v70);
        goto LABEL_292;
      }
      uint64_t v30 = 0x676C6F6268756963;
      goto LABEL_236;
    }
    if (v12 != 1768515184) {
      goto LABEL_120;
    }
    if (a6 != 8)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3395;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for kAudioFakeDevicePropertyInputInjectionFilePath", buf, 0x12u);
      }
      uint8x8_t v185 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint8x8_t v185 = off_1F148A5D8;
      v185[2] = 561211770;
    }
    CFTypeRef v24 = *(CFTypeRef *)a7;
    if (*(void *)(a1 + 440))
    {
      int v25 = *(_DWORD *)(a1 + 8);
      pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
      v214[0] = MEMORY[0x1E4F143A8];
      v214[1] = 0x40000000;
      v214[2] = ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_243;
      v214[3] = &__block_descriptor_tmp_244;
      int v215 = v25;
      v214[4] = v24;
      uint64_t v26 = (NSObject **)ADS::Simulator::sServerDefaultPriorityQueue;
      if (ADS::Simulator::sServerDefaultPriorityQueue)
      {
        unsigned __int8 v27 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 32));
        if (v27) {
          atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
        }
        uint64_t v17 = *v26;
        char v18 = v214;
        goto LABEL_118;
      }
      return;
    }
    if (v24)
    {
      CFRetain(*(CFTypeRef *)a7);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, v24);
      uint64_t v78 = *(void *)buf;
    }
    else
    {
      uint64_t v78 = 0;
    }
    std::string::size_type v147 = *(const void **)(a1 + 600);
    *(void *)(a1 + 600) = v78;
    *(void *)AudioObjectPropertyAddress buf = v147;
    if (v147) {
      CFRelease(v147);
    }
    CAExtAudioFile::Close((CAExtAudioFile *)(a1 + 608));
    *a8 = 1;
    long long v28 = (_DWORD *)a9[1];
    unint64_t v148 = a9[2];
    if ((unint64_t)v28 < v148)
    {
      uint64_t v30 = 0x676C6F6269696670;
      goto LABEL_236;
    }
    unint64_t v149 = 0x1555555555555555;
    uint64_t v70 = (_DWORD *)*a9;
    unint64_t v150 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v28 - *a9) >> 2);
    unint64_t v151 = v150 + 1;
    if (v150 + 1 > 0x1555555555555555) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v152 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v148 - (void)v70) >> 2);
    if (2 * v152 > v151) {
      unint64_t v151 = 2 * v152;
    }
    if (v152 < 0xAAAAAAAAAAAAAAALL) {
      unint64_t v149 = v151;
    }
    if (v149)
    {
      unint64_t v149 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v149);
      uint64_t v70 = (_DWORD *)*a9;
      long long v28 = (_DWORD *)a9[1];
    }
    else
    {
      uint64_t v153 = 0;
    }
    unint64_t v136 = v149 + 12 * v150;
    unint64_t v137 = v149 + 12 * v153;
    *(void *)unint64_t v136 = 0x676C6F6269696670;
    *(_DWORD *)(v136 + 8) = 0;
    unint64_t v138 = v136 + 12;
    if (v28 == v70)
    {
LABEL_293:
      *a9 = v136;
      a9[1] = v138;
      a9[2] = v137;
      if (v70) {
        operator delete(v70);
      }
      goto LABEL_295;
    }
    do
    {
      uint64_t v176 = *(void *)(v28 - 3);
      v28 -= 3;
      int v177 = v28[2];
      *(void *)(v136 - 12) = v176;
      v136 -= 12;
      *(_DWORD *)(v136 + 8) = v177;
    }
    while (v28 != v70);
LABEL_292:
    uint64_t v70 = (_DWORD *)*a9;
    goto LABEL_293;
  }
  if (v12 <= 1853059699)
  {
    if (v12 == 1769302372)
    {
      *(_DWORD *)(a1 + 836) = *(_DWORD *)a7;
      return;
    }
    if (v12 != 1819173229) {
      goto LABEL_120;
    }
    if (a6 != 8)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3079;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for kAudioObjectPropertyName", buf, 0x12u);
      }
      uint64_t v193 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v193 = off_1F148A5D8;
      v193[2] = 561211770;
    }
    CFTypeRef v35 = *(CFTypeRef *)a7;
    if (*(void *)a7) {
      CFRetain(*(CFTypeRef *)a7);
    }
    uint64_t v36 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v35;
    *(void *)AudioObjectPropertyAddress buf = &unk_1F1489A20;
    *(void *)&uint8_t buf[8] = v36;
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
    *a8 = 1;
    long long v28 = (_DWORD *)a9[1];
    unint64_t v37 = a9[2];
    if ((unint64_t)v28 >= v37)
    {
      unint64_t v69 = 0x1555555555555555;
      uint64_t v70 = (_DWORD *)*a9;
      unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v28 - *a9) >> 2);
      unint64_t v72 = v71 + 1;
      if (v71 + 1 > 0x1555555555555555) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - (void)v70) >> 2);
      if (2 * v73 > v72) {
        unint64_t v72 = 2 * v73;
      }
      if (v73 < 0xAAAAAAAAAAAAAAALL) {
        unint64_t v69 = v72;
      }
      if (v69)
      {
        unint64_t v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v69);
        uint64_t v70 = (_DWORD *)*a9;
        long long v28 = (_DWORD *)a9[1];
      }
      else
      {
        uint64_t v74 = 0;
      }
      unint64_t v136 = v69 + 12 * v71;
      unint64_t v137 = v69 + 12 * v74;
      *(void *)unint64_t v136 = 0x676C6F626C6E616DLL;
      *(_DWORD *)(v136 + 8) = 0;
      unint64_t v138 = v136 + 12;
      if (v28 == v70) {
        goto LABEL_293;
      }
      do
      {
        uint64_t v139 = *(void *)(v28 - 3);
        v28 -= 3;
        int v140 = v28[2];
        *(void *)(v136 - 12) = v139;
        v136 -= 12;
        *(_DWORD *)(v136 + 8) = v140;
      }
      while (v28 != v70);
      goto LABEL_292;
    }
    uint64_t v30 = 0x676C6F626C6E616DLL;
    goto LABEL_236;
  }
  if (v12 == 1853059700)
  {
    if (a6 != 8)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3148;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for kAudioDevicePropertyNominalSampleRate", buf, 0x12u);
      }
      std::string v196 = __cxa_allocate_exception(0x10uLL);
      *(void *)std::string v196 = off_1F148A5D8;
      v196[2] = 561211770;
    }
    double v63 = *(double *)a7;
    uint64_t v64 = *(void *)(a1 + 120);
    v234.__vftable = (std::runtime_error_vtbl *)(a1 + 120);
    LOBYTE(v234.__imp_.__imp_) = (*(uint64_t (**)(void))(v64 + 16))();
    if (!ADS::Device::isSupportedSampleRate((ADS::Device *)a1, v63))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3156;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::setSampleRate: unsupported value for kAudioDevicePropertyNominalSampleRate", buf, 0x12u);
      }
      CFTypeRef v199 = __cxa_allocate_exception(0x10uLL);
      *(void *)CFTypeRef v199 = off_1F148A5D8;
      v199[2] = 560226676;
    }
    double v65 = *(double *)(a1 + 640);
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v234);
    if (v63 != v65)
    {
      int v66 = *(_DWORD *)(a1 + 8);
      pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
      v226[0] = MEMORY[0x1E4F143A8];
      v226[1] = 0x40000000;
      v226[2] = ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_231;
      v226[3] = &__block_descriptor_tmp_232;
      int v227 = v66;
      *(double *)&v226[4] = v63;
      int64x2_t v67 = (NSObject **)ADS::Simulator::sServerDefaultPriorityQueue;
      if (ADS::Simulator::sServerDefaultPriorityQueue)
      {
        unsigned __int8 v68 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 32));
        if (v68) {
          atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
        }
        uint64_t v17 = *v67;
        char v18 = v226;
        goto LABEL_118;
      }
    }
    return;
  }
  if (v12 != 1935892848)
  {
    if (v12 == 1937008739)
    {
      if (a6 != 8)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3335;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for kAudioFakeDevicePropertyIOThreadStateChangeCallback", buf, 0x12u);
        }
        unint64_t v189 = __cxa_allocate_exception(0x10uLL);
        *(void *)unint64_t v189 = off_1F148A5D8;
        uint64_t v189[2] = 561211770;
      }
      CFTypeRef v13 = *(CFTypeRef *)a7;
      if (*(void *)(a1 + 440))
      {
        int v14 = *(_DWORD *)(a1 + 8);
        pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
        v218[0] = MEMORY[0x1E4F143A8];
        v218[1] = 0x40000000;
        v218[2] = ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_239;
        v218[3] = &__block_descriptor_tmp_240;
        int v219 = v14;
        v218[4] = v13;
        uint64_t v15 = (NSObject **)ADS::Simulator::sServerDefaultPriorityQueue;
        if (ADS::Simulator::sServerDefaultPriorityQueue)
        {
          unsigned __int8 v16 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 32));
          if (v16) {
            atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
          }
          uint64_t v17 = *v15;
          char v18 = v218;
LABEL_118:
          dispatch_async(v17, v18);
          return;
        }
        return;
      }
      *(void *)(a1 + 592) = v13;
      *a8 = 1;
      long long v28 = (_DWORD *)a9[1];
      unint64_t v79 = a9[2];
      if ((unint64_t)v28 < v79)
      {
        uint64_t v30 = 0x676C6F6273746863;
        goto LABEL_236;
      }
      unint64_t v116 = 0x1555555555555555;
      uint64_t v70 = (_DWORD *)*a9;
      unint64_t v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v28 - *a9) >> 2);
      unint64_t v118 = v117 + 1;
      if (v117 + 1 <= 0x1555555555555555)
      {
        unint64_t v119 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - (void)v70) >> 2);
        if (2 * v119 > v118) {
          unint64_t v118 = 2 * v119;
        }
        if (v119 < 0xAAAAAAAAAAAAAAALL) {
          unint64_t v116 = v118;
        }
        if (v116)
        {
          unint64_t v116 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v116);
          uint64_t v70 = (_DWORD *)*a9;
          long long v28 = (_DWORD *)a9[1];
        }
        else
        {
          uint64_t v120 = 0;
        }
        unint64_t v136 = v116 + 12 * v117;
        unint64_t v137 = v116 + 12 * v120;
        *(void *)unint64_t v136 = 0x676C6F6273746863;
        *(_DWORD *)(v136 + 8) = 0;
        unint64_t v138 = v136 + 12;
        if (v28 == v70) {
          goto LABEL_293;
        }
        do
        {
          uint64_t v164 = *(void *)(v28 - 3);
          v28 -= 3;
          int v165 = v28[2];
          *(void *)(v136 - 12) = v164;
          v136 -= 12;
          *(_DWORD *)(v136 + 8) = v165;
        }
        while (v28 != v70);
        goto LABEL_292;
      }
LABEL_307:
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
LABEL_120:
    ADS::BaseObject::SetPropertyData(a1, a2, a3, a4, a5, a6, a6, a7, a8, a9, a10);
    return;
  }
  if (*(_DWORD *)(a1 + 12) == 1633905771)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3117;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: clock devices do not have streams (kAudioFakeDevicePropertyStreamCaptureEnabled)", buf, 0x12u);
    }
    unint64_t v188 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v188 = off_1F148A5D8;
    v188[2] = 1970171760;
  }
  if (a6 != 4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3118;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_SetPropertyData: wrong size for the data for kAudioFakeDevicePropertyStreamCaptureEnabled", buf, 0x12u);
    }
    v197 = __cxa_allocate_exception(0x10uLL);
    *(void *)v197 = off_1F148A5D8;
    uint64_t v197[2] = 561211770;
  }
  int v46 = *(_DWORD *)a7;
  if (!*(void *)(a1 + 440))
  {
    *(unsigned char *)(a1 + 544) = v46 != 0;
    *a8 = 1;
    long long v28 = (_DWORD *)a9[1];
    unint64_t v83 = a9[2];
    if ((unint64_t)v28 < v83)
    {
      uint64_t v30 = 0x676C6F6273636170;
      goto LABEL_236;
    }
    unint64_t v131 = 0x1555555555555555;
    uint64_t v70 = (_DWORD *)*a9;
    unint64_t v132 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v28 - *a9) >> 2);
    unint64_t v133 = v132 + 1;
    if (v132 + 1 > 0x1555555555555555) {
      goto LABEL_307;
    }
    unint64_t v134 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83 - (void)v70) >> 2);
    if (2 * v134 > v133) {
      unint64_t v133 = 2 * v134;
    }
    if (v134 < 0xAAAAAAAAAAAAAAALL) {
      unint64_t v131 = v133;
    }
    if (v131)
    {
      unint64_t v131 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v131);
      uint64_t v70 = (_DWORD *)*a9;
      long long v28 = (_DWORD *)a9[1];
    }
    else
    {
      uint64_t v135 = 0;
    }
    unint64_t v136 = v131 + 12 * v132;
    unint64_t v137 = v131 + 12 * v135;
    *(void *)unint64_t v136 = 0x676C6F6273636170;
    *(_DWORD *)(v136 + 8) = 0;
    unint64_t v138 = v136 + 12;
    if (v28 == v70) {
      goto LABEL_293;
    }
    do
    {
      uint64_t v170 = *(void *)(v28 - 3);
      v28 -= 3;
      int v171 = v28[2];
      *(void *)(v136 - 12) = v170;
      v136 -= 12;
      *(_DWORD *)(v136 + 8) = v171;
    }
    while (v28 != v70);
    goto LABEL_292;
  }
  int v47 = *(_DWORD *)(a1 + 8);
  pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
  v228[0] = MEMORY[0x1E4F143A8];
  v228[1] = 0x40000000;
  v228[2] = ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_229;
  v228[3] = &__block_descriptor_tmp_230;
  int v229 = v47;
  int v230 = v46;
  unint64_t v48 = (NSObject **)ADS::Simulator::sServerDefaultPriorityQueue;
  if (ADS::Simulator::sServerDefaultPriorityQueue)
  {
    unsigned __int8 v49 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 32));
    if (v49) {
      atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
    }
    uint64_t v17 = *v48;
    char v18 = v228;
    goto LABEL_118;
  }
}

void sub_1BAC43A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,std::runtime_error a33,int a34,__int16 a35,char a36,char a37)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1BAC43D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  if (a2)
  {
    std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](&a12);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a10);
    MEMORY[0x1C1859840](v12, 0x10E1C40BFE29AC7);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAC43D14);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_229()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v0 = 136315394;
    uint64_t v1 = "ADS_Device.cpp";
    __int16 v2 = 1024;
    int v3 = 3134;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::Device_SetPropertyData: sending the request to the host to enable stream capture.", (uint8_t *)&v0, 0x12u);
  }
  operator new();
}

void sub_1BAC43EE0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    MEMORY[0x1C1859840](v2, 0x10A1C40E7D7FC54);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAC43EB0);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_231()
{
}

void sub_1BAC43FD0(void *a1)
{
  MEMORY[0x1C1859840](v1, 0x10A1C40E7D7FC54);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void std::vector<AudioObjectPropertyAddress>::push_back[abi:ne180100](unint64_t *a1, uint64_t *a2)
{
  unint64_t v5 = a1[1];
  unint64_t v4 = a1[2];
  if (v5 >= v4)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 2);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0x1555555555555555) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x1555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v13 = v11 + 12 * v8;
    unint64_t v14 = v11 + 12 * v12;
    uint64_t v15 = *a2;
    *(_DWORD *)(v13 + 8) = *((_DWORD *)a2 + 2);
    *(void *)unint64_t v13 = v15;
    unint64_t v7 = v13 + 12;
    uint64_t v17 = (_DWORD *)*a1;
    unsigned __int8 v16 = (_DWORD *)a1[1];
    if (v16 != (_DWORD *)*a1)
    {
      do
      {
        uint64_t v18 = *(void *)(v16 - 3);
        v16 -= 3;
        int v19 = v16[2];
        *(void *)(v13 - 12) = v18;
        v13 -= 12;
        *(_DWORD *)(v13 + 8) = v19;
      }
      while (v16 != v17);
      unsigned __int8 v16 = (_DWORD *)*a1;
    }
    *a1 = v13;
    a1[1] = v7;
    a1[2] = v14;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    uint64_t v6 = *a2;
    *(_DWORD *)(v5 + 8) = *((_DWORD *)a2 + 2);
    *(void *)unint64_t v5 = v6;
    unint64_t v7 = v5 + 12;
  }
  a1[1] = v7;
}

void ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_233()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v0 = 136315394;
    uint64_t v1 = "ADS_Device.cpp";
    __int16 v2 = 1024;
    int v3 = 3270;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::Device_SetPropertyData: sending the request to the host to enable stream capture.", (uint8_t *)&v0, 0x12u);
  }
  operator new();
}

void sub_1BAC442C8(_Unwind_Exception *exception_object, int a2, ...)
{
  va_start(va, a2);
  if (a2)
  {
    std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
    MEMORY[0x1C1859840](v2, 0x10A1C40E4F7B131);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAC44298);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_235()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v0 = 136315394;
    uint64_t v1 = "ADS_Device.cpp";
    __int16 v2 = 1024;
    int v3 = 3297;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::Device_SetPropertyData: sending the request to the host to enable stream capture.", (uint8_t *)&v0, 0x12u);
  }
  operator new();
}

void sub_1BAC444B0(_Unwind_Exception *exception_object, int a2, ...)
{
  va_start(va, a2);
  if (a2)
  {
    std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
    MEMORY[0x1C1859840](v2, 0x10A1C40E4F7B131);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAC44480);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_237()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v0 = 136315394;
    uint64_t v1 = "ADS_Device.cpp";
    __int16 v2 = 1024;
    int v3 = 3324;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::Device_SetPropertyData: sending the request to the host to enable stream capture.", (uint8_t *)&v0, 0x12u);
  }
  operator new();
}

void sub_1BAC44698(_Unwind_Exception *exception_object, int a2, ...)
{
  va_start(va, a2);
  if (a2)
  {
    std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
    MEMORY[0x1C1859840](v2, 0x10A1C40E4F7B131);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAC44668);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_239()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v0 = 136315394;
    uint64_t v1 = "ADS_Device.cpp";
    __int16 v2 = 1024;
    int v3 = 3351;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::Device_SetPropertyData: sending the request to the host to enable stream capture.", (uint8_t *)&v0, 0x12u);
  }
  operator new();
}

void sub_1BAC44880(_Unwind_Exception *exception_object, int a2, ...)
{
  va_start(va, a2);
  if (a2)
  {
    std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
    MEMORY[0x1C1859840](v2, 0x10A1C40E4F7B131);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAC44850);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_241()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v0 = 136315394;
    uint64_t v1 = "ADS_Device.cpp";
    __int16 v2 = 1024;
    int v3 = 3378;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::Device_SetPropertyData: sending the request to the host to enable stream capture.", (uint8_t *)&v0, 0x12u);
  }
  operator new();
}

void sub_1BAC44A68(_Unwind_Exception *exception_object, int a2, ...)
{
  va_start(va, a2);
  if (a2)
  {
    std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
    MEMORY[0x1C1859840](v2, 0x10A1C40E4F7B131);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAC44A38);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_243()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v0 = 136315394;
    uint64_t v1 = "ADS_Device.cpp";
    __int16 v2 = 1024;
    int v3 = 3412;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::Device_SetPropertyData: sending the request to the host to set the input file path.", (uint8_t *)&v0, 0x12u);
  }
  operator new();
}

void sub_1BAC44BF8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    MEMORY[0x1C1859840](v2, 0x10E1C404817AA86);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAC44BC8);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_247()
{
}

void sub_1BAC44CE8(void *a1)
{
  MEMORY[0x1C1859840](v1, 0x10E1C404817AA86);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZN3ADS6Device22Device_SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke_249()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void __destroy_helper_block_e8_32c32_ZTSKN10applesauce2CF9StringRefE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
}

void *__copy_helper_block_e8_32c32_ZTSKN10applesauce2CF9StringRefE(void *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(a2 + 32);
  if (v3) {
    uint64_t result = CFRetain(*(CFTypeRef *)(a2 + 32));
  }
  v2[4] = v3;
  return result;
}

uint64_t ADS::ChangeInfoData<__CFString const*>::ChangeInfoData(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  v8[4] = *MEMORY[0x1E4F143B8];
  int v8[3] = 0;
  *(void *)a1 = &unk_1F14674F0;
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  std::__function::__value_func<int ()(void)>::__value_func[abi:ne180100](a1 + 24, (uint64_t)v8);
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](v8);
  *(void *)a1 = &unk_1F1467030;
  *(void *)(a1 + 56) = a5;
  return a1;
}

void sub_1BAC44FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ADS::ChangeInfoData<__CFString const*>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);

  JUMPOUT(0x1C1859840);
}

void *ADS::ChangeInfoData<__CFString const*>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);
  return a1;
}

void ADS::ChangeInfoData<void (*)(unsigned int,unsigned int,unsigned int,unsigned int,AudioServerPlugInIOCycleInfo const*,void *,void *)>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);

  JUMPOUT(0x1C1859840);
}

void *ADS::ChangeInfoData<void (*)(unsigned int,unsigned int,unsigned int,unsigned int,AudioServerPlugInIOCycleInfo const*,void *,void *)>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);
  return a1;
}

void ADS::ChangeInfoData<void (*)(__CFDictionary const*)>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);

  JUMPOUT(0x1C1859840);
}

void *ADS::ChangeInfoData<void (*)(__CFDictionary const*)>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);
  return a1;
}

void ADS::ChangeInfoData<int (*)(unsigned int,IsolatedAudio_UseCaseID)>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);

  JUMPOUT(0x1C1859840);
}

void *ADS::ChangeInfoData<int (*)(unsigned int,IsolatedAudio_UseCaseID)>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);
  return a1;
}

void ADS::ChangeInfoData<int (*)(unsigned int,unsigned int,IsolatedAudio_UseCaseID)>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);

  JUMPOUT(0x1C1859840);
}

void *ADS::ChangeInfoData<int (*)(unsigned int,unsigned int,IsolatedAudio_UseCaseID)>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);
  return a1;
}

void ADS::ChangeInfoData<int (*)(unsigned int,IsolatedAudio_UseCaseID,unsigned int,unsigned int,AudioServerPlugInIOCycleInfo const*)>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);

  JUMPOUT(0x1C1859840);
}

void *ADS::ChangeInfoData<int (*)(unsigned int,IsolatedAudio_UseCaseID,unsigned int,unsigned int,AudioServerPlugInIOCycleInfo const*)>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);
  return a1;
}

void ADS::ChangeInfoData<FakeDeviceActionData>::~ChangeInfoData(uint64_t a1)
{
  ADS::ChangeInfoData<FakeDeviceActionData>::~ChangeInfoData(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t ADS::ChangeInfoData<FakeDeviceActionData>::~ChangeInfoData(uint64_t a1)
{
  *(void *)a1 = &unk_1F14669C8;
  BOOL v3 = *(_DWORD *)(a1 + 96) == 8 && *(unsigned char *)(a1 + 112) != 0;
  uint64_t v4 = *(_DWORD **)(a1 + 72);
  unint64_t v5 = *(CFTypeRef **)(a1 + 104);
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  char v7 = v6;
  if (v6 || v3)
  {
    if (v7) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (*v4 == 1768515184)
  {
LABEL_18:
    CFRelease(*v5);
    uint64_t v4 = *(_DWORD **)(a1 + 72);
LABEL_19:
    if (!v4) {
      goto LABEL_21;
    }
  }
  MEMORY[0x1C1859840]();
LABEL_21:
  uint64_t v8 = *(void *)(a1 + 88);
  if (v8) {
    MEMORY[0x1C1859810](v8, 0x1000C8077774924);
  }
  uint64_t v9 = *(void *)(a1 + 104);
  if (v9) {
    MEMORY[0x1C1859810](v9, 0x1000C8077774924);
  }
  *(void *)a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
  return a1;
}

void ADS::ChangeInfoData<FakeDeviceBehavior>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);

  JUMPOUT(0x1C1859840);
}

void *ADS::ChangeInfoData<FakeDeviceBehavior>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);
  return a1;
}

void __destroy_helper_block_e8_32c19_ZTSN2OS2CF6StringE(uint64_t a1)
{
}

OS::CF::UntypedObject *__copy_helper_block_e8_32c19_ZTSN2OS2CF6StringE(uint64_t a1, uint64_t a2)
{
  uint64_t result = OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(a1 + 32), *(CFTypeRef *)(a2 + 40));
  *(void *)(a1 + 32) = &unk_1F1489A20;
  return result;
}

void ADS::ChangeInfoData<OS::CF::String>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F1466EA8;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 7));
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);

  JUMPOUT(0x1C1859840);
}

void *ADS::ChangeInfoData<OS::CF::String>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F1466EA8;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 7));
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);
  return a1;
}

void ADS::Device::GetPropertyData(ADS::Device *this, ADS::ObjectManager *a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6, const void *a7, unsigned int *a8, unsigned int *a9)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 2) == a2)
  {
    ADS::Device::Device_GetPropertyData(this, a2, a3, a4, a5, a7, a8, (char *)a9, a9);
  }
  else
  {
    uint64_t v16 = ADS::ObjectManager::CopyObjectByObjectID(a2);
    uint64_t v17 = (ADS::ObjectManager *)v16;
    if (!v16)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        int v21 = "ADS_Device.cpp";
        __int16 v22 = 1024;
        int v23 = 2013;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::GetPropertyData: unknown device", buf, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = 560947818;
    }
    (*(void (**)(uint64_t, ADS::ObjectManager *, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, const void *, unsigned int *, unsigned int *))(*(void *)v16 + 56))(v16, a2, a3, a4, a5, a6, a7, a8, a9);
    ADS::ObjectManager::ReleaseObject(v17, v18);
  }
}

void sub_1BAC45948(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ADS::Device::Device_GetPropertyData(ADS::Device *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6, unsigned int *a7, char *a8, void *a9)
{
  uint64_t v9 = (unsigned int *)a8;
  unsigned int v11 = a6;
  v130[2] = *MEMORY[0x1E4F143B8];
  signed int mSelector = a4->mSelector;
  if ((int)a4->mSelector <= 1752197474)
  {
    if (mSelector <= 1685087595)
    {
      if (mSelector <= 1668639075)
      {
        if (mSelector <= 1634690671)
        {
          if (mSelector != 1634038341)
          {
            if (mSelector != 1634038357)
            {
              if (mSelector == 1634429294)
              {
                if (a6 >= 4)
                {
                  unint64_t v14 = (uint64_t *)*((void *)this + 39);
                  if (v14)
                  {
                    unint64_t v15 = 0;
                    do
                    {
                      *(_DWORD *)&a8[4 * v15++] = *((_DWORD *)v14 + 4);
                      unint64_t v14 = (uint64_t *)*v14;
                      BOOL v16 = v15 >= a6 >> 2 || v14 == 0;
                    }
                    while (!v16);
                  }
                }
                return;
              }
LABEL_214:
              ADS::BaseObject::GetPropertyData(this, a2, a3, a4, a5, a6, a6, a7, a8);
              return;
            }
            uint64_t v39 = *((void *)this + 15);
            CFTypeRef v38 = (char *)this + 120;
            *(void *)AudioObjectPropertyAddress buf = (char *)this + 120;
            uint8_t buf[8] = (*(uint64_t (**)(char *))(v39 + 16))((char *)this + 120);
            long long v40 = (const void *)*((void *)v38 + 79);
            if (v40)
            {
              CFRetain(v40);
              unsigned int v35 = 8;
            }
            else
            {
              unsigned int v35 = 0;
            }
            *(void *)uint64_t v9 = v40;
LABEL_222:
            *a7 = v35;
            CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)buf);
            return;
          }
          uint64_t v53 = *((void *)this + 15);
          long long v52 = (char *)this + 120;
          *(void *)AudioObjectPropertyAddress buf = (char *)this + 120;
          uint8_t buf[8] = (*(uint64_t (**)(char *))(v53 + 16))((char *)this + 120);
          unsigned int v21 = *((_DWORD *)v52 + 160);
LABEL_166:
          unsigned int *v9 = v21;
          unsigned int v35 = 4;
          goto LABEL_222;
        }
        if (mSelector != 1634690672)
        {
          if (mSelector != 1668049764)
          {
            if (mSelector != 1668575852) {
              goto LABEL_214;
            }
            unsigned int v26 = a6 >> 2;
            AudioObjectPropertyScope mScope = a4->mScope;
            switch(mScope)
            {
              case 0x6F757470u:
                ADS::Device::getControlsWithScope((ADS::Device *)buf, *((_DWORD **)this + 51), *((_DWORD **)this + 52), 1869968496);
                std::vector<std::vector<unsigned int>>::vector[abi:ne180100](v115, (uint64_t)buf, 1uLL);
                *a7 = 4 * ADS::Device::getRequestedSubObjects(v115[0], v115[1], v26, (uint64_t)v9);
                long long v28 = v115;
                break;
              case 0x696E7074u:
                ADS::Device::getControlsWithScope((ADS::Device *)buf, *((_DWORD **)this + 51), *((_DWORD **)this + 52), 1768845428);
                std::vector<std::vector<unsigned int>>::vector[abi:ne180100](v116, (uint64_t)buf, 1uLL);
                *a7 = 4 * ADS::Device::getRequestedSubObjects(v116[0], v116[1], v26, (uint64_t)v9);
                long long v28 = v116;
                break;
              case 0x676C6F62u:
                memset(buf, 0, sizeof(buf));
                std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(buf, *((const void **)this + 51), *((void *)this + 52), (uint64_t)(*((void *)this + 52) - *((void *)this + 51)) >> 2);
                std::vector<std::vector<unsigned int>>::vector[abi:ne180100](v117, (uint64_t)buf, 1uLL);
                *a7 = 4 * ADS::Device::getRequestedSubObjects(v117[0], v117[1], v26, (uint64_t)v9);
                long long v28 = v117;
                break;
              default:
                return;
            }
            goto LABEL_239;
          }
          if (a6 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2627;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyClockDomain for the device", buf, 0x12u);
            }
            exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
            *(void *)exceptiouint64_t n = off_1F148A5D8;
            exception[2] = 561211770;
          }
          unsigned int v18 = *((_DWORD *)this + 108);
          goto LABEL_217;
        }
        if (*((_DWORD *)this + 3) == 1633905771)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2830;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: clock devices do not have streams (kAudioFakeDevicePropertyAudioOutFilePath)", buf, 0x12u);
          }
          unint64_t v102 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v102 = off_1F148A5D8;
          v102[2] = 1970171760;
        }
        if (a6 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2831;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioFakeDevicePropertyAudioOutFilePath for the device", buf, 0x12u);
          }
          unint64_t v112 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v112 = off_1F148A5D8;
          v112[2] = 561211770;
        }
        CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x1E4F1CF88];
        CFStringRef v31 = (const __CFString *)*((void *)this + 67);
        goto LABEL_207;
      }
      if (mSelector <= 1684236337)
      {
        if (mSelector != 1668639076)
        {
          if (mSelector == 1668641652)
          {
            if (a6 <= 0xA7)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2873;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioObjectPropertyCustomPropertyInfoList", buf, 0x12u);
              }
              char v88 = __cxa_allocate_exception(0x10uLL);
              *(void *)char v88 = off_1F148A5D8;
              v88[2] = 561211770;
            }
            *(_OWORD *)a8 = xmmword_1BAFF9500;
            *((_OWORD *)a8 + 1) = xmmword_1BAFF9510;
            *((_OWORD *)a8 + 2) = xmmword_1BAFF9520;
            *((_OWORD *)a8 + 3) = xmmword_1BAFF9530;
            *((_OWORD *)a8 + 4) = xmmword_1BAFF9540;
            *((_OWORD *)a8 + 5) = xmmword_1BAFF9550;
            *((_OWORD *)a8 + 6) = xmmword_1BAFF9560;
            *((_OWORD *)a8 + 7) = xmmword_1BAFF9570;
            *((_OWORD *)a8 + 8) = xmmword_1BAFF9580;
            *((_OWORD *)a8 + 9) = xmmword_1BAFF9590;
            *((void *)a8 + 20) = 1918990199;
            *(_DWORD *)AudioObjectPropertyAddress buf = a6 - 168;
            ADS::BaseObject::GetPropertyData(this, a2, a3, a4, a5, a6, a6, (unsigned int *)buf, a8 + 168);
            int v45 = *(_DWORD *)buf + 168;
            goto LABEL_218;
          }
          if (mSelector != 1684107364) {
            goto LABEL_214;
          }
          if (a6 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2852;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyAvailablePastData", buf, 0x12u);
            }
            unint64_t v76 = __cxa_allocate_exception(0x10uLL);
            *(void *)unint64_t v76 = off_1F148A5D8;
            v76[2] = 561211770;
          }
          unsigned int v18 = *((_DWORD *)this + 157);
          goto LABEL_217;
        }
        goto LABEL_116;
      }
      if (mSelector == 1684236338)
      {
        if (*((_DWORD *)this + 3) == 1633905771)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2788;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: clock devices do not have streams (kAudioDevicePropertyPreferredChannelsForStereo)", buf, 0x12u);
          }
          unint64_t v106 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v106 = off_1F148A5D8;
          v106[2] = 1970171760;
        }
        if (a6 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2791;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyPreferredChannelsForStereo for the device", buf, 0x12u);
          }
          unint64_t v114 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v114 = off_1F148A5D8;
          v114[2] = 561211770;
        }
        *(_DWORD *)a8 = *((_DWORD *)this + 121);
        *((_DWORD *)a8 + 1) = *((_DWORD *)this + 122);
        goto LABEL_209;
      }
      if (mSelector != 1684434036)
      {
        if (mSelector != 1684893796) {
          goto LABEL_214;
        }
        if (a6 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2859;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyMaximumPastData", buf, 0x12u);
          }
          int v32 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v32 = off_1F148A5D8;
          uint64_t v32[2] = 561211770;
        }
LABEL_131:
        unsigned int v18 = *((_DWORD *)this + 165);
        goto LABEL_217;
      }
      if (a6 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2656;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyDeviceCanBeDefaultDevice for the device", buf, 0x12u);
        }
        uint64_t v95 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v95 = off_1F148A5D8;
        v95[2] = 561211770;
      }
      if (*((_DWORD *)this + 3) != 1633905771)
      {
        unsigned int v18 = *((unsigned __int8 *)this + 480);
        goto LABEL_217;
      }
LABEL_151:
      unsigned int v18 = 0;
      goto LABEL_217;
    }
    if (mSelector <= 1719105133)
    {
      if (mSelector > 1685484384)
      {
        switch(mSelector)
        {
          case 1685484385:
            if (a6 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2954;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioFakeDevicePropertyTriggerAction for the device", buf, 0x12u);
              }
              unint64_t v104 = __cxa_allocate_exception(0x10uLL);
              *(void *)unint64_t v104 = off_1F148A5D8;
              v104[2] = 561211770;
            }
            long long v65 = *((_OWORD *)this + 48);
            long long v66 = *((_OWORD *)this + 49);
            long long v67 = *((_OWORD *)this + 51);
            *((_OWORD *)a8 + 2) = *((_OWORD *)this + 50);
            *((_OWORD *)a8 + 3) = v67;
            *(_OWORD *)a8 = v65;
            *((_OWORD *)a8 + 1) = v66;
            int v45 = 64;
            goto LABEL_218;
          case 1685484386:
            if (a6 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2947;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioFakeDevicePropertySelectBehavior for the device", buf, 0x12u);
              }
              unint64_t v93 = __cxa_allocate_exception(0x10uLL);
              *(void *)unint64_t v93 = off_1F148A5D8;
              v93[2] = 561211770;
            }
            unsigned int v18 = atomic_load((unsigned int *)this + 191);
            break;
          case 1718841206:
            if (a6 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3004;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioFakeDevicePropertySafetyOffsetViolationCheckFailed for the device", buf, 0x12u);
              }
              unint64_t v81 = __cxa_allocate_exception(0x10uLL);
              *(void *)unint64_t v81 = off_1F148A5D8;
              v81[2] = 561211770;
            }
            uint64_t v29 = 696;
            if (a4->mScope == 1768845428) {
              uint64_t v29 = 700;
            }
            unsigned int v18 = *(_DWORD *)((char *)this + v29);
            break;
          default:
            goto LABEL_214;
        }
        goto LABEL_217;
      }
      if (mSelector == 1685087596)
      {
        if (a6 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2866;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyEnableListening", buf, 0x12u);
          }
          unint64_t v98 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v98 = off_1F148A5D8;
          v98[2] = 561211770;
        }
        unsigned int v18 = *((_DWORD *)this + 158);
        goto LABEL_217;
      }
      if (mSelector != 1685278578)
      {
        if (mSelector != 1685287012) {
          goto LABEL_214;
        }
        if (a6 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2845;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertySupportsPastData", buf, 0x12u);
          }
          uint64_t v74 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v74 = off_1F148A5D8;
          v74[2] = 561211770;
        }
        unsigned int v18 = *((_DWORD *)this + 156);
        goto LABEL_217;
      }
      if (a6 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3033;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyDSPOffloadRequested", buf, 0x12u);
        }
        unint64_t v86 = __cxa_allocate_exception(0x10uLL);
        *(void *)unint64_t v86 = off_1F148A5D8;
        v86[2] = 561211770;
      }
      unsigned __int8 v41 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D528];
      CFTypeRef v42 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D538];
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
      *(void *)AudioObjectPropertyAddress buf = Mutable;
      CFMutableDictionaryRef v44 = CFDictionaryCreateMutable(0, 0, v41, v42);
      mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v124, v44);
      mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::DictionaryRef>(Mutable, @"all available", v124);
      if (v124) {
        CFRelease(v124);
      }
      if (v44) {
        CFRelease(v44);
      }
      mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v124, Mutable);
      *(void *)uint64_t v9 = v124;
      *a7 = 8;
      if (Mutable) {
        CFRelease(Mutable);
      }
      return;
    }
    if (mSelector <= 1751737453)
    {
      if (mSelector != 1719105134)
      {
        if (mSelector != 1719301235)
        {
          if (mSelector != 1735354734) {
            goto LABEL_214;
          }
          if (a6 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2643;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyDeviceIsRunning for the device", buf, 0x12u);
            }
            uint64_t v78 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v78 = off_1F148A5D8;
            v78[2] = 561211770;
          }
          uint64_t v20 = *((void *)this + 15);
          int v19 = (char *)this + 120;
          *(void *)AudioObjectPropertyAddress buf = (char *)this + 120;
          uint8_t buf[8] = (*(uint64_t (**)(char *))(v20 + 16))((char *)this + 120);
          unsigned int v21 = *((void *)v19 + 40) != 0;
          goto LABEL_166;
        }
        if (a6 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2995;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioFakeDevicePropertyFirstZTSSampleTime for the device", buf, 0x12u);
          }
          unsigned __int8 v90 = __cxa_allocate_exception(0x10uLL);
          *(void *)unsigned __int8 v90 = off_1F148A5D8;
          v90[2] = 561211770;
        }
        if (*((unsigned char *)this + 545)) {
          double v46 = (double)(*((void *)this + 69) * (unint64_t)*((unsigned int *)this + 165));
        }
        else {
          double v46 = 0.0;
        }
        *(double *)a8 = v46;
        goto LABEL_209;
      }
      if (a6 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2518;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioObjectPropertyFirmwareVersion for the device", buf, 0x12u);
        }
        uint64_t v100 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v100 = off_1F148A5D8;
        v100[2] = 561211770;
      }
      CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x1E4F1CF88];
      CFStringRef v31 = (const __CFString *)*((void *)this + 89);
      goto LABEL_207;
    }
    switch(mSelector)
    {
      case 1751737454:
        if (a6 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2782;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyIsHidden for the device", buf, 0x12u);
          }
          unint64_t v108 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v108 = off_1F148A5D8;
          v108[2] = 561211770;
        }
        unsigned int v18 = *((unsigned __int8 *)this + 482);
        goto LABEL_217;
      case 1751738723:
        if (a6 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2967;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of AudioFakeDeviceIsolatedIOOperationCallback for the device", buf, 0x12u);
          }
          unint64_t v96 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v96 = off_1F148A5D8;
          v96[2] = 561211770;
        }
        uint64_t v36 = *((void *)this + 71);
        break;
      case 1751740259:
        if (a6 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2960;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioFakeDevicePropertyHardwareIOCallback for the device", buf, 0x12u);
          }
          std::string v84 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::string v84 = off_1F148A5D8;
          v84[2] = 561211770;
        }
        uint64_t v36 = *((void *)this + 70);
        break;
      default:
        goto LABEL_214;
    }
LABEL_169:
    *(void *)a8 = v36;
LABEL_209:
    int v45 = 8;
    goto LABEL_218;
  }
  if (mSelector <= 1870098019)
  {
    if (mSelector <= 1819107690)
    {
      if (mSelector <= 1768777572)
      {
        switch(mSelector)
        {
          case 1752197475:
            if (a6 <= 7)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2974;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioFakeDevicePropertyHardwareSetupForIsolatedIOCallback for the device", buf, 0x12u);
              }
              unint64_t v97 = __cxa_allocate_exception(0x10uLL);
              *(void *)unint64_t v97 = off_1F148A5D8;
              v97[2] = 561211770;
            }
            uint64_t v36 = *((void *)this + 72);
            break;
          case 1752525155:
            if (a6 <= 7)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2981;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioFakeDevicePropertyHardwareTeardownForIsolatedIOCallback for the device", buf, 0x12u);
              }
              unint64_t v85 = __cxa_allocate_exception(0x10uLL);
              *(void *)unint64_t v85 = off_1F148A5D8;
              v85[2] = 561211770;
            }
            uint64_t v36 = *((void *)this + 73);
            break;
          case 1768515184:
            if (a6 <= 7)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3012;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioFakeDevicePropertyInputInjectionFilePath for the device", buf, 0x12u);
              }
              unint64_t v73 = __cxa_allocate_exception(0x10uLL);
              *(void *)unint64_t v73 = off_1F148A5D8;
              v73[2] = 561211770;
            }
            Copy = PropertyListDeepImmutableCopy(*((const __CFString **)this + 75));
            goto LABEL_208;
          default:
            goto LABEL_214;
        }
        goto LABEL_169;
      }
      if (mSelector == 1768777573)
      {
        if (a6 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2941;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyRawImageData for the device", buf, 0x12u);
          }
          unint64_t v103 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v103 = off_1F148A5D8;
          v103[2] = 561211770;
        }
        Copy = CFDataCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF88], *((CFDataRef *)this + 93));
        goto LABEL_208;
      }
      if (mSelector == 1769302372)
      {
        *a7 = 4;
        *(_DWORD *)a8 = *((_DWORD *)this + 209);
        return;
      }
      if (mSelector != 1818850926) {
        goto LABEL_214;
      }
      if (a6 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2635;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyDeviceIsAlive for the device", buf, 0x12u);
        }
        char v80 = __cxa_allocate_exception(0x10uLL);
        *(void *)char v80 = off_1F148A5D8;
        v80[2] = 561211770;
      }
      unsigned int v18 = 1;
      goto LABEL_217;
    }
    if (mSelector > 1836411235)
    {
      if (mSelector != 1836411236)
      {
        if (mSelector != 1853059619)
        {
          if (mSelector != 1853059700) {
            goto LABEL_214;
          }
          if (a6 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2752;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  SA_ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyNominalSampleRate for the device", buf, 0x12u);
            }
            unint64_t v83 = __cxa_allocate_exception(0x10uLL);
            *(void *)unint64_t v83 = off_1F148A5D8;
            v83[2] = 561211770;
          }
          uint64_t v34 = *((void *)this + 15);
          unint64_t v33 = (char *)this + 120;
          *(void *)AudioObjectPropertyAddress buf = (char *)this + 120;
          uint8_t buf[8] = (*(uint64_t (**)(char *))(v34 + 16))((char *)this + 120);
          *(void *)uint64_t v9 = *((void *)v33 + 65);
          unsigned int v35 = 8;
          goto LABEL_222;
        }
        unint64_t v47 = *((void *)this + 44);
        if (v47 >= a6 >> 4) {
          LODWORD(v47) = a6 >> 4;
        }
        if (v47)
        {
          unint64_t v48 = (void *)*((void *)this + 42);
          *(_OWORD *)a8 = *((_OWORD *)v48 + 2);
          int v49 = v47 - 1;
          if (v47 != 1)
          {
            do
            {
              int v50 = (void *)v48[1];
              if (v50)
              {
                do
                {
                  int v51 = v50;
                  int v50 = (void *)*v50;
                }
                while (v50);
              }
              else
              {
                do
                {
                  int v51 = (void *)v48[2];
                  BOOL v16 = *v51 == (void)v48;
                  unint64_t v48 = v51;
                }
                while (!v16);
              }
              *((_OWORD *)v9 + 1) = *((_OWORD *)v51 + 2);
              v9 += 4;
              unint64_t v48 = v51;
              --v49;
            }
            while (v49);
          }
        }
        int v45 = 16 * v47;
LABEL_218:
        *a7 = v45;
        return;
      }
      if (a6 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2582;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyModelUID for the device", buf, 0x12u);
        }
        unint64_t v107 = __cxa_allocate_exception(0x10uLL);
        *(void *)unint64_t v107 = off_1F148A5D8;
        v107[2] = 561211770;
      }
      CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x1E4F1CF88];
      CFStringRef v31 = (const __CFString *)*((void *)this + 14);
      goto LABEL_207;
    }
    switch(mSelector)
    {
      case 1819107691:
        if (a6 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2504;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioObjectPropertyManufacturer for the device", buf, 0x12u);
          }
          unint64_t v99 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v99 = off_1F148A5D8;
          void v99[2] = 561211770;
        }
        CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x1E4F1CF88];
        CFStringRef v31 = (const __CFString *)*((void *)this + 10);
        break;
      case 1819173229:
        if (a6 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2496;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioObjectPropertyName for the device", buf, 0x12u);
          }
          size_t v89 = __cxa_allocate_exception(0x10uLL);
          *(void *)size_t v89 = off_1F148A5D8;
          v89[2] = 561211770;
        }
        CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x1E4F1CF88];
        CFStringRef v31 = (const __CFString *)*((void *)this + 8);
        break;
      case 1819569763:
        if (a6 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2674;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyLatency for the device", buf, 0x12u);
          }
          unint64_t v77 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v77 = off_1F148A5D8;
          v77[2] = 561211770;
        }
        unsigned int v18 = *((_DWORD *)this + 163);
        goto LABEL_217;
      default:
        goto LABEL_214;
    }
LABEL_207:
    Copy = (void *)CFStringCreateCopy(v30, v31);
LABEL_208:
    *(void *)uint64_t v9 = Copy;
    goto LABEL_209;
  }
  if (mSelector > 1936879203)
  {
    if (mSelector <= 1953653101)
    {
      if (mSelector == 1936879204)
      {
        if (*((_DWORD *)this + 3) == 1633905771)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2798;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: clock devices do not have streams (kAudioDevicePropertyPreferredChannelLayout)", buf, 0x12u);
          }
          unint64_t v101 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v101 = off_1F148A5D8;
          v101[2] = 1970171760;
        }
        uint64_t v58 = 496;
        if (a4->mScope == 1768845428) {
          uint64_t v58 = 492;
        }
        unsigned int v59 = atomic_load((unsigned int *)((char *)this + v58));
        uint64_t v60 = v59 - 1;
        int v61 = caulk::numeric::exceptional_mul<unsigned int>(v59 - 1);
        unsigned int v62 = caulk::numeric::exceptional_add<unsigned int>(v61);
        if (v62 > v11)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2805;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyPreferredChannelLayout for the device", buf, 0x12u);
          }
          unint64_t v111 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v111 = off_1F148A5D8;
          void v111[2] = 561211770;
        }
        *(void *)uint64_t v9 = 0;
        void v9[2] = v60;
        if (v60)
        {
          uint64_t v63 = 0;
          uint64_t v64 = v9 + 4;
          do
          {
            *((_DWORD *)v64 - 1) = ++v63;
            void *v64 = 0;
            v64[1] = 0;
            uint64_t v64 = (void *)((char *)v64 + 20);
          }
          while (v60 != v63);
        }
        *a7 = v62;
        return;
      }
      if (mSelector != 1937008739)
      {
        if (mSelector != 1937009955) {
          goto LABEL_214;
        }
        if (*((_DWORD *)this + 3) == 1633905771)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2680;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: clock devices do not have streams (kAudioDevicePropertyStreams)", buf, 0x12u);
          }
          unint64_t v79 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v79 = off_1F148A5D8;
          v79[2] = 1970171760;
        }
        unsigned int v22 = a6 >> 2;
        AudioObjectPropertyScope v23 = a4->mScope;
        if (v23 == 1869968496)
        {
          memset(buf, 0, sizeof(buf));
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(buf, *((const void **)this + 48), *((void *)this + 49), (uint64_t)(*((void *)this + 49) - *((void *)this + 48)) >> 2);
          std::vector<std::vector<unsigned int>>::vector[abi:ne180100](v118, (uint64_t)buf, 1uLL);
          *a7 = 4 * ADS::Device::getRequestedSubObjects(v118[0], v118[1], v22, (uint64_t)v9);
          long long v28 = v118;
        }
        else
        {
          if (v23 != 1768845428)
          {
            if (v23 == 1735159650)
            {
              memset(buf, 0, sizeof(buf));
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(buf, *((const void **)this + 45), *((void *)this + 46), (uint64_t)(*((void *)this + 46) - *((void *)this + 45)) >> 2);
              uint64_t v126 = 0;
              uint64_t v127 = 0;
              uint64_t v128 = 0;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v126, *((const void **)this + 48), *((void *)this + 49), (uint64_t)(*((void *)this + 49) - *((void *)this + 48)) >> 2);
              std::vector<std::vector<unsigned int>>::vector[abi:ne180100](v120, (uint64_t)buf, 2uLL);
              *a7 = 4 * ADS::Device::getRequestedSubObjects(v120[0], v120[1], v22, (uint64_t)v9);
              unint64_t v124 = (void **)v120;
              std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v124);
              for (uint64_t i = 0; i != -48; i -= 24)
              {
                int v25 = *(void **)&buf[i + 24];
                if (v25)
                {
                  *(uint64_t *)((char *)&v127 + i) = (uint64_t)v25;
                  operator delete(v25);
                }
              }
            }
            return;
          }
          memset(buf, 0, sizeof(buf));
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(buf, *((const void **)this + 45), *((void *)this + 46), (uint64_t)(*((void *)this + 46) - *((void *)this + 45)) >> 2);
          std::vector<std::vector<unsigned int>>::vector[abi:ne180100](v119, (uint64_t)buf, 1uLL);
          *a7 = 4 * ADS::Device::getRequestedSubObjects(v119[0], v119[1], v22, (uint64_t)v9);
          long long v28 = v119;
        }
LABEL_239:
        unint64_t v124 = (void **)v28;
        std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v124);
        if (*(void *)buf)
        {
          *(void *)&uint8_t buf[8] = *(void *)buf;
          operator delete(*(void **)buf);
        }
        return;
      }
      if (a6 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2988;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioFakeDevicePropertyIOThreadStateChangeCallback for the device", buf, 0x12u);
        }
        unint64_t v91 = __cxa_allocate_exception(0x10uLL);
        *(void *)unint64_t v91 = off_1F148A5D8;
        v91[2] = 561211770;
      }
      uint64_t v36 = *((void *)this + 74);
      goto LABEL_169;
    }
    if (mSelector != 1953653102)
    {
      if (mSelector != 1969841184)
      {
        if (mSelector == 1986294896)
        {
          *a7 = 4;
          *(_DWORD *)a8 = 0;
          return;
        }
        goto LABEL_214;
      }
LABEL_116:
      if (a6 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2564;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyDeviceUID for the device", buf, 0x12u);
        }
        unint64_t v72 = __cxa_allocate_exception(0x10uLL);
        *(void *)unint64_t v72 = off_1F148A5D8;
        v72[2] = 561211770;
      }
      *(void *)AudioObjectPropertyAddress buf = &unk_1F1489A20;
      *(void *)&uint8_t buf[8] = @"deleteme";
      BOOL v37 = OS::CF::operator==(*((CFStringRef *)this + 12), @"deleteme");
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
      if (v37) {
        Copy = 0;
      }
      else {
        Copy = (void *)CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF88], *((CFStringRef *)this + 12));
      }
      goto LABEL_208;
    }
    if (a6 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2591;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyTransportType for the device", buf, 0x12u);
      }
      unint64_t v109 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v109 = off_1F148A5D8;
      v109[2] = 561211770;
    }
    unsigned int v18 = *((_DWORD *)this + 164);
LABEL_217:
    *(_DWORD *)a8 = v18;
    int v45 = 4;
    goto LABEL_218;
  }
  if (mSelector > 1935892847)
  {
    if (mSelector == 1935892848)
    {
      if (*((_DWORD *)this + 3) == 1633905771)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2837;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: clock devices do not have streams (kAudioFakeDevicePropertyStreamCaptureEnabled)", buf, 0x12u);
        }
        uint64_t v105 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v105 = off_1F148A5D8;
        v105[2] = 1970171760;
      }
      if (a6 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2838;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioFakeDevicePropertyStreamCaptureEnabled for the device", buf, 0x12u);
        }
        unint64_t v113 = __cxa_allocate_exception(0x10uLL);
        *(void *)unint64_t v113 = off_1F148A5D8;
        v113[2] = 561211770;
      }
      unsigned int v18 = *((unsigned __int8 *)this + 544);
      goto LABEL_217;
    }
    if (mSelector == 1936092276)
    {
      if (a6 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2666;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyDeviceCanBeDefaultSystemDevice for the device", buf, 0x12u);
        }
        unint64_t v94 = __cxa_allocate_exception(0x10uLL);
        *(void *)unint64_t v94 = off_1F148A5D8;
        v94[2] = 561211770;
      }
      if (*((_DWORD *)this + 3) != 1633905771)
      {
        unsigned int v18 = *((unsigned __int8 *)this + 481);
        goto LABEL_217;
      }
      goto LABEL_151;
    }
    if (mSelector != 1936618861) {
      goto LABEL_214;
    }
    if (a6 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2511;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioObjectPropertySerialNumber for the device", buf, 0x12u);
      }
      unint64_t v82 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v82 = off_1F148A5D8;
      v82[2] = 561211770;
    }
    CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x1E4F1CF88];
    CFStringRef v31 = (const __CFString *)*((void *)this + 91);
    goto LABEL_207;
  }
  if (mSelector != 1870098020)
  {
    if (mSelector != 1919512167)
    {
      if (mSelector != 1935763060) {
        goto LABEL_214;
      }
      if (*((_DWORD *)this + 3) == 1633905771)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2742;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: clock devices do not have streams (kAudioDevicePropertySafetyOffset)", buf, 0x12u);
        }
        unint64_t v75 = __cxa_allocate_exception(0x10uLL);
        *(void *)unint64_t v75 = off_1F148A5D8;
        v75[2] = 1970171760;
      }
      if (a6 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2743;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  SA_ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertySafetyOffset for the device", buf, 0x12u);
        }
        uint64_t v110 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v110 = off_1F148A5D8;
        v110[2] = 561211770;
      }
      unsigned int v18 = *((_DWORD *)this + 166);
      goto LABEL_217;
    }
    if (a6 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2824;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::Device_GetPropertyData: not enough space for the return value of kAudioDevicePropertyZeroTimeStampPeriod for the device", buf, 0x12u);
      }
      int v87 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v87 = off_1F148A5D8;
      v87[2] = 561211770;
    }
    goto LABEL_131;
  }
  unsigned int v54 = a6 >> 2;
  AudioObjectPropertyScope v55 = a4->mScope;
  switch(v55)
  {
    case 0x6F757470u:
      memset(buf, 0, sizeof(buf));
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(buf, *((const void **)this + 48), *((void *)this + 49), (uint64_t)(*((void *)this + 49) - *((void *)this + 48)) >> 2);
      ADS::Device::getControlsWithScope((ADS::Device *)&v126, *((_DWORD **)this + 51), *((_DWORD **)this + 52), 1869968496);
      std::vector<std::vector<unsigned int>>::vector[abi:ne180100](v121, (uint64_t)buf, 2uLL);
      *a7 = ADS::Device::getRequestedSubObjects(v121[0], v121[1], v54, (uint64_t)v9);
      unint64_t v124 = (void **)v121;
      std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v124);
      for (uint64_t j = 0; j != -48; j -= 24)
      {
        unint64_t v71 = *(void **)&buf[j + 24];
        if (v71)
        {
          *(uint64_t *)((char *)&v127 + j) = (uint64_t)v71;
          operator delete(v71);
        }
      }
      break;
    case 0x696E7074u:
      memset(buf, 0, sizeof(buf));
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(buf, *((const void **)this + 45), *((void *)this + 46), (uint64_t)(*((void *)this + 46) - *((void *)this + 45)) >> 2);
      ADS::Device::getControlsWithScope((ADS::Device *)&v126, *((_DWORD **)this + 51), *((_DWORD **)this + 52), 1768845428);
      std::vector<std::vector<unsigned int>>::vector[abi:ne180100](v122, (uint64_t)buf, 2uLL);
      *a7 = ADS::Device::getRequestedSubObjects(v122[0], v122[1], v54, (uint64_t)v9);
      unint64_t v124 = (void **)v122;
      std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v124);
      for (uint64_t k = 0; k != -48; k -= 24)
      {
        unint64_t v69 = *(void **)&buf[k + 24];
        if (v69)
        {
          *(uint64_t *)((char *)&v127 + k) = (uint64_t)v69;
          operator delete(v69);
        }
      }
      break;
    case 0x676C6F62u:
      memset(buf, 0, sizeof(buf));
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(buf, *((const void **)this + 45), *((void *)this + 46), (uint64_t)(*((void *)this + 46) - *((void *)this + 45)) >> 2);
      uint64_t v126 = 0;
      uint64_t v127 = 0;
      uint64_t v128 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v126, *((const void **)this + 48), *((void *)this + 49), (uint64_t)(*((void *)this + 49) - *((void *)this + 48)) >> 2);
      uint64_t v129 = 0;
      v130[0] = 0;
      v130[1] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v129, *((const void **)this + 51), *((void *)this + 52), (uint64_t)(*((void *)this + 52) - *((void *)this + 51)) >> 2);
      std::vector<std::vector<unsigned int>>::vector[abi:ne180100](v123, (uint64_t)buf, 3uLL);
      *a7 = ADS::Device::getRequestedSubObjects(v123[0], v123[1], v54, (uint64_t)v9);
      unint64_t v124 = (void **)v123;
      std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v124);
      for (uint64_t m = 0; m != -9; m -= 3)
      {
        char v57 = (void *)v130[m - 1];
        if (v57)
        {
          v130[m] = v57;
          operator delete(v57);
        }
      }
      break;
  }
}

void sub_1BAC48928(_Unwind_Exception *a1)
{
  *(void *)(v1 - 136) = v1 - 160;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 136));
  uint64_t v3 = 0;
  uint64_t v4 = v1 - 128;
  while (1)
  {
    unint64_t v5 = *(void **)(v4 + v3 + 48);
    if (v5)
    {
      *(void *)(v4 + v3 + 56) = v5;
      operator delete(v5);
    }
    v3 -= 24;
    if (v3 == -72) {
      _Unwind_Resume(a1);
    }
  }
}

void *std::vector<std::vector<unsigned int>>::vector[abi:ne180100](void *a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = a1 + 2;
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = 3 * a3;
    char v7 = operator new(24 * a3);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[v6];
    unint64_t v13 = v7;
    unint64_t v14 = v7;
    uint64_t v8 = a2 + 8 * v6;
    v11[0] = v4;
    v11[1] = &v13;
    void v11[2] = &v14;
    uint64_t v9 = v7;
    char v12 = 0;
    do
    {
      void *v9 = 0;
      v9[1] = 0;
      void v9[2] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v9, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      uint64_t v9 = v14 + 3;
      v14 += 3;
      a2 += 24;
    }
    while (a2 != v8);
    char v12 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
    a1[1] = v9;
  }
  return a1;
}

void sub_1BAC48C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

unint64_t ADS::Device::getRequestedSubObjects(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a1 == a2) {
    return 0;
  }
  uint64_t v6 = a1;
  unint64_t v7 = 0;
  unint64_t v8 = a3;
  do
  {
    std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
    uint64_t v9 = __p;
    if (v7 < v8)
    {
      unsigned int v10 = 0;
      unint64_t v11 = (v14 - (uint64_t)__p) >> 2;
      while (v11 > v10)
      {
        *(_DWORD *)(a4 + 4 * v7) = v9[v10++];
        if (v8 == ++v7)
        {
          unint64_t v7 = v8;
          goto LABEL_10;
        }
      }
      unint64_t v7 = v7;
    }
    if (v9) {
LABEL_10:
    }
      operator delete(v9);
    v6 += 24;
  }
  while (v6 != a2);
  return v7;
}

void std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (char *)v1[1];
      do
      {
        unint64_t v8 = (void *)*((void *)v6 - 3);
        v6 -= 24;
        unint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 2) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ADS::Device::getControlsWithScope(ADS::Device *this, _DWORD *a2, _DWORD *a3, int a4)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  unsigned int v10 = this;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      unint64_t v7 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*v6);
      int v8 = *((_DWORD *)v7 + 13);
      ADS::ObjectManager::ReleaseObject(v7, v9);
      if (v8 == a4) {
        std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:ne180100]((uint64_t *)&v10, v6);
      }
      ++v6;
    }
    while (v6 != a3);
  }
}

void sub_1BAC48E7C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL OS::CF::operator==(CFStringRef theString1, const __CFString *a2)
{
  BOOL result = 0;
  if (theString1)
  {
    if (a2) {
      return CFEqual(theString1, a2);
    }
  }
  return result;
}

void mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::DictionaryRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1) {
    CFDictionaryAddValue(a1, a2, a3);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      uint64_t v4 = **(void **)(a1 + 16);
      do
      {
        uint64_t v6 = *(void **)(v4 - 24);
        v4 -= 24;
        unint64_t v5 = v6;
        if (v6)
        {
          *(void *)(v2 - 16) = v5;
          operator delete(v5);
        }
        uint64_t v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

uint64_t ADS::Device::GetPropertyDataSize(ADS::Device *this, ADS::ObjectManager *a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 2) != a2)
  {
    uint64_t v15 = ADS::ObjectManager::CopyObjectByObjectID(a2);
    BOOL v16 = (ADS::ObjectManager *)v15;
    if (!v15)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v34 = 136315394;
        unsigned int v35 = "ADS_Device.cpp";
        __int16 v36 = 1024;
        int v37 = 1997;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::GetPropertyData: unknown device", (uint8_t *)&v34, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = 560947818;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, ADS::ObjectManager *, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)v15 + 48))(v15, a2, a3, a4, a5, a6);
    ADS::ObjectManager::ReleaseObject(v16, v17);
    return v9;
  }
  signed int mSelector = a4->mSelector;
  uint64_t v9 = 8;
  if ((int)a4->mSelector <= 1752197474)
  {
    if (mSelector <= 1685087595)
    {
      if (mSelector <= 1668639075)
      {
        if (mSelector <= 1634690671)
        {
          if (mSelector != 1634038341)
          {
            if (mSelector != 1634038357)
            {
              if (mSelector == 1634429294)
              {
                unsigned int v10 = *((_DWORD *)this + 80);
                return 4 * v10;
              }
              goto LABEL_93;
            }
            return v9;
          }
          return 4;
        }
        switch(mSelector)
        {
          case 1634690672:
            return v9;
          case 1668049764:
            return 4;
          case 1668575852:
            AudioObjectPropertyScope mScope = a4->mScope;
            switch(mScope)
            {
              case 0x6F757470u:
                int v32 = std::count_if[abi:ne180100]<std::__wrap_iter<unsigned int const*>,ADS::Device::Device_GetPropertyDataSize(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*)::$_3>(*((unsigned int **)this + 51), *((unsigned int **)this + 52));
                break;
              case 0x696E7074u:
                int v32 = std::count_if[abi:ne180100]<std::__wrap_iter<unsigned int const*>,ADS::Device::Device_GetPropertyDataSize(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*)::$_2>(*((unsigned int **)this + 51), *((unsigned int **)this + 52));
                break;
              case 0x676C6F62u:
                int v22 = *((_DWORD *)this + 104);
                int v23 = *((_DWORD *)this + 102);
                return (v22 - v23) & 0xFFFFFFFC;
              default:
                return 0;
            }
            return (4 * v32);
        }
        goto LABEL_93;
      }
      if (mSelector > 1684236337)
      {
        if (mSelector == 1684236338) {
          return v9;
        }
        if (mSelector == 1684434036) {
          return 4;
        }
        int v19 = 1684893796;
      }
      else
      {
        if (mSelector == 1668639076) {
          return v9;
        }
        if (mSelector == 1668641652) {
          return 12 * ((*((void *)this + 4) - *((void *)this + 3)) >> 4) + 168;
        }
        int v19 = 1684107364;
      }
LABEL_78:
      if (mSelector == v19) {
        return 4;
      }
      goto LABEL_93;
    }
    if (mSelector <= 1719105133)
    {
      if (mSelector > 1685484384)
      {
        if (mSelector == 1685484385) {
          return 64;
        }
        if (mSelector == 1685484386) {
          return 4;
        }
        int v19 = 1718841206;
      }
      else
      {
        if (mSelector == 1685087596) {
          return 4;
        }
        if (mSelector == 1685278578) {
          return v9;
        }
        int v19 = 1685287012;
      }
      goto LABEL_78;
    }
    if (mSelector <= 1751737453)
    {
      if (mSelector == 1719105134 || mSelector == 1719301235) {
        return v9;
      }
      int v19 = 1735354734;
      goto LABEL_78;
    }
    if (mSelector == 1751737454) {
      return 4;
    }
    if (mSelector == 1751738723) {
      return v9;
    }
    int v18 = 1751740259;
LABEL_73:
    if (mSelector == v18) {
      return v9;
    }
    goto LABEL_93;
  }
  if (mSelector <= 1870098019)
  {
    if (mSelector > 1819107690)
    {
      if (mSelector <= 1836411235)
      {
        if (mSelector == 1819107691 || mSelector == 1819173229) {
          return v9;
        }
        int v19 = 1819569763;
        goto LABEL_78;
      }
      if (mSelector == 1836411236) {
        return v9;
      }
      if (mSelector == 1853059619) {
        return (16 * *((_DWORD *)this + 88));
      }
      int v18 = 1853059700;
    }
    else
    {
      if (mSelector > 1768777572)
      {
        if (mSelector == 1768777573) {
          return v9;
        }
        if (mSelector == 1769302372) {
          return 4;
        }
        int v19 = 1818850926;
        goto LABEL_78;
      }
      if (mSelector == 1752197475 || mSelector == 1752525155) {
        return v9;
      }
      int v18 = 1768515184;
    }
    goto LABEL_73;
  }
  if (mSelector <= 1936879203)
  {
    if (mSelector <= 1935892847)
    {
      if (mSelector == 1870098020)
      {
        AudioObjectPropertyScope v25 = a4->mScope;
        switch(v25)
        {
          case 0x6F757470u:
            int v29 = std::count_if[abi:ne180100]<std::__wrap_iter<unsigned int const*>,ADS::Device::Device_GetPropertyDataSize(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*)::$_1>(*((unsigned int **)this + 51), *((unsigned int **)this + 52));
            int v30 = *((_DWORD *)this + 98);
            int v31 = *((_DWORD *)this + 96);
            break;
          case 0x696E7074u:
            int v29 = std::count_if[abi:ne180100]<std::__wrap_iter<unsigned int const*>,ADS::Device::Device_GetPropertyDataSize(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*)::$_0>(*((unsigned int **)this + 51), *((unsigned int **)this + 52));
            int v30 = *((_DWORD *)this + 92);
            int v31 = *((_DWORD *)this + 90);
            break;
          case 0x676C6F62u:
            unsigned int v10 = ((*((_DWORD *)this + 98) - *((_DWORD *)this + 96)) >> 2)
                + ((*((_DWORD *)this + 92) - *((_DWORD *)this + 90)) >> 2)
                + ((*((_DWORD *)this + 104) - *((_DWORD *)this + 102)) >> 2);
            return 4 * v10;
          default:
            return 0;
        }
        unsigned int v10 = v29 + ((v30 - v31) >> 2);
        return 4 * v10;
      }
      if (mSelector == 1919512167) {
        return 4;
      }
      int v19 = 1935763060;
      goto LABEL_78;
    }
    if (mSelector == 1935892848 || mSelector == 1936092276) {
      return 4;
    }
    int v18 = 1936618861;
    goto LABEL_73;
  }
  if (mSelector > 1953653101)
  {
    if (mSelector == 1953653102) {
      return 4;
    }
    if (mSelector == 1969841184) {
      return v9;
    }
    int v19 = 1986294896;
    goto LABEL_78;
  }
  if (mSelector != 1936879204)
  {
    if (mSelector == 1937008739) {
      return v9;
    }
    if (mSelector == 1937009955)
    {
      AudioObjectPropertyScope v20 = a4->mScope;
      switch(v20)
      {
        case 0x6F757470u:
          int v22 = *((_DWORD *)this + 98);
          int v23 = *((_DWORD *)this + 96);
          return (v22 - v23) & 0xFFFFFFFC;
        case 0x696E7074u:
          int v22 = *((_DWORD *)this + 92);
          int v23 = *((_DWORD *)this + 90);
          return (v22 - v23) & 0xFFFFFFFC;
        case 0x676C6F62u:
          unsigned int v10 = ((*((_DWORD *)this + 98) - *((_DWORD *)this + 96)) >> 2)
              + ((*((_DWORD *)this + 92) - *((_DWORD *)this + 90)) >> 2);
          return 4 * v10;
      }
      return 0;
    }
LABEL_93:
    return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
  }
  uint64_t v26 = 496;
  if (a4->mScope == 1768845428) {
    uint64_t v26 = 492;
  }
  unsigned int v27 = atomic_load((unsigned int *)((char *)this + v26));
  int v28 = caulk::numeric::exceptional_mul<unsigned int>(v27 - 1);

  return caulk::numeric::exceptional_add<unsigned int>(v28);
}

void sub_1BAC4972C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t std::count_if[abi:ne180100]<std::__wrap_iter<unsigned int const*>,ADS::Device::Device_GetPropertyDataSize(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*)::$_0>(unsigned int *a1, unsigned int *a2)
{
  if (a1 == a2) {
    return 0;
  }
  uint64_t v3 = a1;
  uint64_t v4 = 0;
  do
  {
    unint64_t v5 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*v3);
    int v6 = *((_DWORD *)v5 + 13);
    ADS::ObjectManager::ReleaseObject(v5, v7);
    if (v6 == 1768845428) {
      ++v4;
    }
    ++v3;
  }
  while (v3 != a2);
  return v4;
}

uint64_t std::count_if[abi:ne180100]<std::__wrap_iter<unsigned int const*>,ADS::Device::Device_GetPropertyDataSize(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*)::$_1>(unsigned int *a1, unsigned int *a2)
{
  if (a1 == a2) {
    return 0;
  }
  uint64_t v3 = a1;
  uint64_t v4 = 0;
  do
  {
    unint64_t v5 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*v3);
    int v6 = *((_DWORD *)v5 + 13);
    ADS::ObjectManager::ReleaseObject(v5, v7);
    if (v6 == 1869968496) {
      ++v4;
    }
    ++v3;
  }
  while (v3 != a2);
  return v4;
}

uint64_t std::count_if[abi:ne180100]<std::__wrap_iter<unsigned int const*>,ADS::Device::Device_GetPropertyDataSize(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*)::$_2>(unsigned int *a1, unsigned int *a2)
{
  if (a1 == a2) {
    return 0;
  }
  uint64_t v3 = a1;
  uint64_t v4 = 0;
  do
  {
    unint64_t v5 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*v3);
    int v6 = *((_DWORD *)v5 + 13);
    ADS::ObjectManager::ReleaseObject(v5, v7);
    if (v6 == 1768845428) {
      ++v4;
    }
    ++v3;
  }
  while (v3 != a2);
  return v4;
}

uint64_t std::count_if[abi:ne180100]<std::__wrap_iter<unsigned int const*>,ADS::Device::Device_GetPropertyDataSize(unsigned int,int,AudioObjectPropertyAddress const&,unsigned int,void const*)::$_3>(unsigned int *a1, unsigned int *a2)
{
  if (a1 == a2) {
    return 0;
  }
  uint64_t v3 = a1;
  uint64_t v4 = 0;
  do
  {
    unint64_t v5 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*v3);
    int v6 = *((_DWORD *)v5 + 13);
    ADS::ObjectManager::ReleaseObject(v5, v7);
    if (v6 == 1869968496) {
      ++v4;
    }
    ++v3;
  }
  while (v3 != a2);
  return v4;
}

uint64_t ADS::Device::IsPropertySettable(ADS::Device *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  if (*((_DWORD *)this + 2) != a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 560947818;
  }
  uint64_t result = 0;
  signed int mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1752197474)
  {
    if (mSelector > 1853059699)
    {
      if (mSelector > 1936879203)
      {
        if (mSelector > 1953653101)
        {
          if (mSelector == 1953653102 || mSelector == 1969841184) {
            return result;
          }
          int v7 = 1986294896;
          goto LABEL_58;
        }
        if (mSelector == 1936879204) {
          return result;
        }
        if (mSelector != 1937008739)
        {
          int v7 = 1937009955;
          goto LABEL_58;
        }
      }
      else
      {
        if (mSelector > 1935892847)
        {
          if (mSelector != 1935892848)
          {
            if (mSelector == 1936092276) {
              return result;
            }
            int v7 = 1936618861;
LABEL_58:
            if (mSelector == v7) {
              return result;
            }
            goto LABEL_69;
          }
          return *((_DWORD *)this + 3) != 1633905771;
        }
        if (mSelector != 1853059700)
        {
          if (mSelector == 1919512167) {
            return result;
          }
          int v7 = 1935763060;
          goto LABEL_58;
        }
      }
      return 1;
    }
    if (mSelector <= 1818850925)
    {
      if (mSelector <= 1768515183)
      {
        if (mSelector == 1752197475) {
          return 1;
        }
        int v8 = 1752525155;
      }
      else
      {
        if (mSelector == 1768515184) {
          return 1;
        }
        if (mSelector == 1768777573) {
          return result;
        }
        int v8 = 1769302372;
      }
    }
    else
    {
      if (mSelector > 1819569762)
      {
        if (mSelector == 1819569763 || mSelector == 1836411236) {
          return result;
        }
        int v7 = 1853059619;
        goto LABEL_58;
      }
      if (mSelector == 1818850926 || mSelector == 1819107691) {
        return result;
      }
      int v8 = 1819173229;
    }
  }
  else
  {
    if (mSelector <= 1685087595)
    {
      if (mSelector <= 1668639075)
      {
        if (mSelector <= 1634690671)
        {
          if (mSelector == 1634038341 || mSelector == 1634038357) {
            return result;
          }
          int v7 = 1634429294;
          goto LABEL_58;
        }
        if (mSelector != 1634690672)
        {
          if (mSelector == 1668049764) {
            return result;
          }
          int v7 = 1668575852;
          goto LABEL_58;
        }
        return *((_DWORD *)this + 3) != 1633905771;
      }
      if (mSelector > 1684236337)
      {
        if (mSelector == 1684236338 || mSelector == 1684434036) {
          return result;
        }
        int v7 = 1684893796;
        goto LABEL_58;
      }
      if (mSelector == 1668639076) {
        return result;
      }
      if (mSelector != 1668641652)
      {
        int v7 = 1684107364;
        goto LABEL_58;
      }
      return 1;
    }
    if (mSelector <= 1719105133)
    {
      if (mSelector <= 1685484384)
      {
        if (mSelector != 1685087596)
        {
          if (mSelector == 1685278578) {
            return result;
          }
          int v7 = 1685287012;
          goto LABEL_58;
        }
        return *((_DWORD *)this + 3) != 1633905771;
      }
      if ((mSelector - 1685484385) >= 2)
      {
        int v7 = 1718841206;
        goto LABEL_58;
      }
      return 1;
    }
    if (mSelector <= 1751737453)
    {
      if (mSelector == 1719105134 || mSelector == 1719301235) {
        return result;
      }
      int v7 = 1735354734;
      goto LABEL_58;
    }
    if (mSelector == 1751737454) {
      return result;
    }
    if (mSelector == 1751738723) {
      return 1;
    }
    int v8 = 1751740259;
  }
  if (mSelector == v8) {
    return 1;
  }
LABEL_69:

  return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
}

BOOL ADS::Device::HasProperty(ADS::Device *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  if (*((_DWORD *)this + 2) != a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 560947818;
  }
  signed int mSelector = a4->mSelector;
  BOOL result = 1;
  if ((int)a4->mSelector > 1752197474)
  {
    if (mSelector <= 1853059699)
    {
      if (mSelector > 1818850925)
      {
        if (mSelector <= 1819569762)
        {
          if (mSelector == 1818850926 || mSelector == 1819107691) {
            return result;
          }
          int v7 = 1819173229;
          goto LABEL_74;
        }
        if (mSelector == 1819569763)
        {
          AudioObjectPropertyScope mScope = a4->mScope;
          return mScope == 1768845428 || mScope == 1869968496;
        }
        if (mSelector == 1836411236) {
          return result;
        }
        int v7 = 1853059619;
        goto LABEL_74;
      }
      if (mSelector <= 1768515183)
      {
        if (mSelector == 1752197475) {
          return result;
        }
        int v7 = 1752525155;
        goto LABEL_74;
      }
      if (mSelector == 1768515184 || mSelector == 1768777573) {
        return result;
      }
      int v9 = 1769302372;
    }
    else
    {
      if (mSelector <= 1936879203)
      {
        if (mSelector <= 1935892847)
        {
          if (mSelector == 1853059700 || mSelector == 1919512167) {
            return result;
          }
          if (mSelector != 1935763060) {
            goto LABEL_75;
          }
          goto LABEL_69;
        }
        if (mSelector == 1935892848) {
          return *((_DWORD *)this + 3) != 1633905771;
        }
        if (mSelector == 1936092276) {
          return result;
        }
        int v7 = 1936618861;
LABEL_74:
        if (mSelector == v7) {
          return result;
        }
        goto LABEL_75;
      }
      if (mSelector <= 1953653101)
      {
        if (mSelector != 1936879204)
        {
          if (mSelector == 1937008739) {
            return result;
          }
          int v8 = 1937009955;
          goto LABEL_56;
        }
LABEL_69:
        AudioObjectPropertyScope v12 = a4->mScope;
        if (v12 != 1869968496 && v12 != 1768845428) {
          return 0;
        }
        return *((_DWORD *)this + 3) != 1633905771;
      }
      if (mSelector == 1953653102 || mSelector == 1969841184) {
        return result;
      }
      int v9 = 1986294896;
    }
    if (mSelector != v9) {
      goto LABEL_75;
    }
    __int16 v10 = atomic_load((unsigned int *)this + 191);
    if ((v10 & 0x100) == 0) {
      goto LABEL_75;
    }
    return a4->mScope == 1735159650 && a4->mElement == 0;
  }
  if (mSelector > 1685087595)
  {
    if (mSelector > 1719105133)
    {
      if (mSelector > 1751737453)
      {
        if (mSelector == 1751737454 || mSelector == 1751738723) {
          return result;
        }
        int v7 = 1751740259;
      }
      else
      {
        if (mSelector == 1719105134 || mSelector == 1719301235) {
          return result;
        }
        int v7 = 1735354734;
      }
      goto LABEL_74;
    }
    if (mSelector <= 1685484384)
    {
      if (mSelector == 1685087596) {
        return *((_DWORD *)this + 3) != 1633905771;
      }
      if (mSelector == 1685278578)
      {
        unsigned int v13 = atomic_load((unsigned int *)this + 191);
        return (a4->mScope == 1768845428) & (v13 >> 10);
      }
      int v8 = 1685287012;
      goto LABEL_56;
    }
    if ((mSelector - 1685484385) < 2) {
      return result;
    }
    int v7 = 1718841206;
    goto LABEL_74;
  }
  if (mSelector <= 1668639075)
  {
    if (mSelector <= 1634690671)
    {
      if (mSelector == 1634038341 || mSelector == 1634038357) {
        return result;
      }
      int v7 = 1634429294;
      goto LABEL_74;
    }
    if (mSelector != 1634690672)
    {
      if (mSelector == 1668049764) {
        return result;
      }
      int v7 = 1668575852;
      goto LABEL_74;
    }
    return *((_DWORD *)this + 3) != 1633905771;
  }
  if (mSelector <= 1684236337)
  {
    if (mSelector != 1668639076)
    {
      if (mSelector == 1668641652) {
        return result;
      }
      int v8 = 1684107364;
      goto LABEL_56;
    }
    return *((_DWORD *)this + 3) == 1633905771;
  }
  if (mSelector == 1684236338) {
    goto LABEL_69;
  }
  if (mSelector == 1684434036) {
    return result;
  }
  int v8 = 1684893796;
LABEL_56:
  if (mSelector == v8) {
    return *((_DWORD *)this + 3) != 1633905771;
  }
LABEL_75:

  return ADS::BaseObject::HasProperty(this, a2, a3, a4);
}

void ADS::Device::~Device(ADS::Device *this)
{
  ADS::Device::~Device(this);

  JUMPOUT(0x1C1859840);
}

{
  const void *v2;
  const void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t vars8;

  *(void *)this = &unk_1F14667D8;
  uint64_t v2 = (const void *)*((void *)this + 94);
  if (v2) {
    CFRelease(v2);
  }
  OS::CF::UntypedObject::~UntypedObject((ADS::Device *)((char *)this + 736));
  OS::CF::UntypedObject::~UntypedObject((ADS::Device *)((char *)this + 720));
  OS::CF::UntypedObject::~UntypedObject((ADS::Device *)((char *)this + 704));
  CAExtAudioFile::~CAExtAudioFile((ADS::Device *)((char *)this + 608));
  uint64_t v3 = (const void *)*((void *)this + 75);
  if (v3) {
    CFRelease(v3);
  }
  OS::CF::UntypedObject::~UntypedObject((ADS::Device *)((char *)this + 528));
  uint64_t v4 = (void *)*((void *)this + 63);
  if (v4)
  {
    *((void *)this + 64) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 51);
  if (v5)
  {
    *((void *)this + 52) = v5;
    operator delete(v5);
  }
  int v6 = (void *)*((void *)this + 48);
  if (v6)
  {
    *((void *)this + 49) = v6;
    operator delete(v6);
  }
  int v7 = (void *)*((void *)this + 45);
  if (v7)
  {
    *((void *)this + 46) = v7;
    operator delete(v7);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 43));
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)this + 296);
  CADeprecated::CAMutex::~CAMutex((ADS::Device *)((char *)this + 208));
  CADeprecated::CAMutex::~CAMutex((ADS::Device *)((char *)this + 120));
  OS::CF::UntypedObject::~UntypedObject((ADS::Device *)((char *)this + 104));
  OS::CF::UntypedObject::~UntypedObject((ADS::Device *)((char *)this + 88));
  OS::CF::UntypedObject::~UntypedObject((ADS::Device *)((char *)this + 72));
  OS::CF::UntypedObject::~UntypedObject((ADS::Device *)((char *)this + 56));

  ADS::BaseObject::~BaseObject(this);
}

void CAExtAudioFile::~CAExtAudioFile(CAExtAudioFile *this)
{
  *(void *)this = &unk_1F14668E8;
  CAExtAudioFile::Close(this);
}

{
  uint64_t vars8;

  CAExtAudioFile::~CAExtAudioFile(this);

  JUMPOUT(0x1C1859840);
}

void CAExtAudioFile::CheckProperty(CAExtAudioFile *this, int a2, const char *a3, int a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    v6[0] = HIBYTE(a4);
    v6[1] = BYTE2(a4);
    v6[2] = BYTE1(a4);
    v6[3] = a4;
    v6[4] = 0;
    snprintf(__str, 0x80uLL, "%s ('%s') failed", a3, v6);
    exceptiouint64_t n = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, __str, a2);
  }
}

void sub_1BAC4A4FC(_Unwind_Exception *exception_object)
{
}

void CAXException::CAXException(CAXException *this, const char *__s, int a3)
{
  *(void *)this = &unk_1F146B040;
  *((_DWORD *)this + 66) = a3;
  if (__s)
  {
    size_t v5 = strlen(__s);
    int v6 = (char *)this + 8;
    if (v5 < 0x100)
    {
      strlcpy(v6, __s, 0x100uLL);
    }
    else
    {
      long long v7 = *(_OWORD *)__s;
      long long v8 = *((_OWORD *)__s + 1);
      long long v9 = *((_OWORD *)__s + 3);
      *(_OWORD *)((char *)this + 40) = *((_OWORD *)__s + 2);
      *(_OWORD *)((char *)this + 56) = v9;
      *(_OWORD *)int v6 = v7;
      *(_OWORD *)((char *)this + 24) = v8;
      long long v10 = *((_OWORD *)__s + 4);
      long long v11 = *((_OWORD *)__s + 5);
      long long v12 = *((_OWORD *)__s + 7);
      *(_OWORD *)((char *)this + 104) = *((_OWORD *)__s + 6);
      *(_OWORD *)((char *)this + 120) = v12;
      *(_OWORD *)((char *)this + 72) = v10;
      *(_OWORD *)((char *)this + 88) = v11;
      long long v13 = *((_OWORD *)__s + 8);
      long long v14 = *((_OWORD *)__s + 9);
      long long v15 = *((_OWORD *)__s + 11);
      *(_OWORD *)((char *)this + 168) = *((_OWORD *)__s + 10);
      *(_OWORD *)((char *)this + 184) = v15;
      *(_OWORD *)((char *)this + 136) = v13;
      *(_OWORD *)((char *)this + 152) = v14;
      long long v16 = *((_OWORD *)__s + 12);
      long long v17 = *((_OWORD *)__s + 13);
      long long v18 = *((_OWORD *)__s + 14);
      *(_OWORD *)((char *)this + 247) = *(_OWORD *)(__s + 239);
      *(_OWORD *)((char *)this + 216) = v17;
      *(_OWORD *)((char *)this + 232) = v18;
      *(_OWORD *)((char *)this + 200) = v16;
      *((unsigned char *)this + 263) = 0;
    }
  }
  else
  {
    *((unsigned char *)this + 8) = 0;
  }
}

void sub_1BAC4A5E0(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void CAExtAudioFile::Check(CAExtAudioFile *this, int a2, const char *a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    snprintf(__str, 0x80uLL, "%s failed", a3);
    exceptiouint64_t n = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, __str, a2);
  }
}

void sub_1BAC4A6A0(_Unwind_Exception *exception_object)
{
}

void ADS::Device::Deactivate(ADS::Device *this)
{
  v24[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 15);
  int v19 = (char *)this + 120;
  char v20 = (*(uint64_t (**)(void))(v2 + 16))();
  uint64_t v3 = *((void *)this + 26);
  long long v17 = (char *)this + 208;
  char v18 = (*(uint64_t (**)(void))(v3 + 16))();
  *((unsigned char *)this + 48) = 0;
  memset(v21, 0, sizeof(v21));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v21, *((const void **)this + 45), *((void *)this + 46), (uint64_t)(*((void *)this + 46) - *((void *)this + 45)) >> 2);
  memset(v22, 0, sizeof(v22));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v22, *((const void **)this + 48), *((void *)this + 49), (uint64_t)(*((void *)this + 49) - *((void *)this + 48)) >> 2);
  uint64_t v23 = 0;
  v24[0] = 0;
  v24[1] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v23, *((const void **)this + 51), *((void *)this + 52), (uint64_t)(*((void *)this + 52) - *((void *)this + 51)) >> 2);
  for (uint64_t i = 0; i != 3; ++i)
  {
    long long v14 = 0;
    long long v15 = 0;
    uint64_t v16 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v14, (const void *)v21[3 * i], v21[3 * i + 1], (uint64_t)(v21[3 * i + 1] - v21[3 * i]) >> 2);
    size_t v5 = v14;
    uint64_t v6 = v15;
    for (uint64_t j = v14; j != v6; ++j)
    {
      uint64_t v8 = ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*j);
      long long v10 = (ADS::ObjectManager *)v8;
      if (v8)
      {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        ADS::ObjectManager::ReleaseObject(v10, v11);
      }
      ADS::ObjectManager::ReleaseObject(v10, v9);
    }
    if (v5) {
      operator delete(v5);
    }
  }
  for (uint64_t k = 0; k != -9; k -= 3)
  {
    long long v13 = (void *)v24[k - 1];
    if (v13)
    {
      v24[k] = v13;
      operator delete(v13);
    }
  }
  *((void *)this + 46) = *((void *)this + 45);
  *((void *)this + 49) = *((void *)this + 48);
  *((void *)this + 52) = *((void *)this + 51);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v17);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v19);
}

void sub_1BAC4A920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)va);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)va1);
  _Unwind_Resume(a1);
}

void ADS::Device::Activate(ADS::Device *this)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  memset(v13, 0, sizeof(v13));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v13, *((const void **)this + 45), *((void *)this + 46), (uint64_t)(*((void *)this + 46) - *((void *)this + 45)) >> 2);
  memset(v14, 0, sizeof(v14));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v14, *((const void **)this + 48), *((void *)this + 49), (uint64_t)(*((void *)this + 49) - *((void *)this + 48)) >> 2);
  uint64_t v15 = 0;
  v16[0] = 0;
  v16[1] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v15, *((const void **)this + 51), *((void *)this + 52), (uint64_t)(*((void *)this + 52) - *((void *)this + 51)) >> 2);
  for (uint64_t i = 0; i != 3; ++i)
  {
    long long v10 = 0;
    long long v11 = 0;
    uint64_t v12 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v10, (const void *)v13[3 * i], v13[3 * i + 1], (uint64_t)(v13[3 * i + 1] - v13[3 * i]) >> 2);
    uint64_t v3 = v10;
    uint64_t v4 = v11;
    for (uint64_t j = v10; j != v4; ++j)
    {
      uint64_t v6 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*j);
      (**(void (***)(ADS::ObjectManager *))v6)(v6);
      ADS::ObjectManager::ReleaseObject(v6, v7);
    }
    if (v3) {
      operator delete(v3);
    }
  }
  for (uint64_t k = 0; k != -9; k -= 3)
  {
    long long v9 = (void *)v16[k - 1];
    if (v9)
    {
      v16[k] = v9;
      operator delete(v9);
    }
  }
  *((unsigned char *)this + 48) = 1;
}

void sub_1BAC4AB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t ADS::Device::Device(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = a1;
  uint64_t v381 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 12) = 0x616F626A61646576;
  *(_DWORD *)(a1 + 20) = a3;
  *(void *)(a1 + 24) = 0;
  uint64_t v207 = a1 + 24;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)a1 = &unk_1F14667D8;
  uint64_t v6 = a1 + 56;
  OS::CF::String::String((OS::CF::String *)(a1 + 56), "Unnamed Device");
  OS::CF::String::String((OS::CF::String *)(v5 + 72), "Apple Inc.");
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF88];
  CFStringRef v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF88], 0, @"TestDevice_%d", a2);
  uint64_t v206 = v5 + 88;
  *(void *)(v5 + 88) = &unk_1F1489A20;
  *(void *)(v5 + 96) = v8;
  *(void *)(v5 + 104) = &unk_1F1489A20;
  *(void *)(v5 + 112) = @"SimulatorDeviceModelUID";
  CADeprecated::CAMutex::CAMutex((CADeprecated::CAMutex *)(v5 + 120), "Device State");
  CADeprecated::CAMutex::CAMutex((CADeprecated::CAMutex *)(v5 + 208), "IO Mutex");
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_DWORD *)(v5 + 328) = 1065353216;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v5 + 296, a2, a2);
  *(void *)(v5 + 344) = 0;
  *(void *)(v5 + 352) = 0;
  CFDictionaryRef v204 = (uint64_t *)(v5 + 344);
  *(void *)(v5 + 336) = v5 + 344;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 421) = 0u;
  *(void *)(v5 + 472) = 0;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 456) = 0u;
  *(_WORD *)(v5 + 480) = 257;
  *(unsigned char *)(v5 + 482) = 0;
  CFDictionaryRef v205 = (_DWORD *)(v5 + 484);
  *(_OWORD *)(v5 + 484) = xmmword_1BAFF95A0;
  *(void *)(v5 + 504) = 0;
  *(void *)(v5 + 512) = 0;
  *(void *)(v5 + 520) = 0;
  uint64_t v202 = v5 + 528;
  OS::CF::String::String((OS::CF::String *)(v5 + 528), "/tmp");
  *(_WORD *)(v5 + 544) = 0;
  *(void *)(v5 + 552) = 10;
  *(_OWORD *)(v5 + 560) = 0u;
  *(_OWORD *)(v5 + 576) = 0u;
  *(void *)(v5 + 592) = 0;
  CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)"", 0, 0x8000100u, 0);
  *(void *)(v5 + 600) = v9;
  uint64_t v209 = v5;
  if (!v9)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)(v5 + 608) = &unk_1F14668E8;
  *(void *)(v5 + 616) = 0;
  *(void *)(v5 + 624) = 0xF424000000000;
  *(_DWORD *)(v5 + 632) = 0;
  *(_OWORD *)(v5 + 640) = 0u;
  *(void *)(v5 + 656) = 1986622068;
  *(_DWORD *)(v5 + 664) = 0;
  *(void *)(v5 + 712) = 0;
  *(_OWORD *)(v5 + 672) = 0u;
  *(_OWORD *)(v5 + 688) = 0u;
  *(void *)(v5 + 704) = &unk_1F1489A20;
  *(void *)(v5 + 728) = 0;
  *(void *)(v5 + 720) = &unk_1F1489A20;
  *(void *)(v5 + 744) = CFDataCreate(0, DUMMY_IMAGE, 4);
  *(void *)(v5 + 736) = &unk_1F1466928;
  *(void *)(v5 + 800) = 0;
  *(_DWORD *)(v5 + 808) = 0;
  *(void *)(v5 + 816) = 0;
  *(unsigned char *)(v5 + 824) = 0;
  *(unsigned char *)(v5 + 832) = 0;
  *(_DWORD *)(v5 + 836) = 0;
  *(_OWORD *)(v5 + 752) = 0u;
  *(_DWORD *)(v5 + 768) = 0;
  *(void *)(v5 + 784) = 0;
  *(void *)(v5 + 776) = 0;
  *(_DWORD *)(v5 + 792) = 0;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v331, *(CFDictionaryRef *)(a4 + 8), @"uuid");
  if (v332)
  {
    OS::CF::UntypedObject::operator=(v206, v332);
  }
  else
  {
    *(void *)&uint8_t buf[8] = CFUUIDCreate(v7);
    *(void *)AudioObjectPropertyAddress buf = &unk_1F1466978;
    v358.i64[1] = (uint64_t)CFUUIDCreateString(0, *(CFUUIDRef *)&buf[8]);
    v358.i64[0] = (uint64_t)&unk_1F1489A20;
    OS::CF::String::AsStdString((std::string *)__p, (uint64_t)&v358);
    if (__p[23] >= 0) {
      long long v10 = __p;
    }
    else {
      long long v10 = *(unsigned char **)__p;
    }
    CFStringRef v11 = CFStringCreateWithFormat(v7, 0, @"TestDevice_%s", v10);
    OS::CF::UntypedObject::operator=(v206, (uint64_t)v11);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v358);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v329, *(CFDictionaryRef *)(a4 + 8), @"model");
  if (v330) {
    OS::CF::UntypedObject::operator=(v5 + 104, v330);
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v327, *(CFDictionaryRef *)(a4 + 8), @"name");
  if (v328)
  {
    OS::CF::UntypedObject::operator=(v6, v328);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v325, "ADS::Device::Device");
    std::string::basic_string[abi:ne180100]<0>(&v323, "name");
    if (v324 < 0) {
      operator delete(v323);
    }
    if (v326 < 0) {
      operator delete(v325);
    }
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v321, *(CFDictionaryRef *)(a4 + 8), @"serial number");
  if (v322)
  {
    OS::CF::UntypedObject::operator=(v5 + 720, v322);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v319, "ADS::Device::Device");
    std::string::basic_string[abi:ne180100]<0>(&v317, "serial number");
    if (v318 < 0) {
      operator delete(v317);
    }
    if (v320 < 0) {
      operator delete(v319);
    }
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v315, *(CFDictionaryRef *)(a4 + 8), @"manufacturer");
  if (v316) {
    OS::CF::UntypedObject::operator=(v5 + 72, v316);
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v313, *(CFDictionaryRef *)(a4 + 8), @"firmware version");
  if (v314)
  {
    OS::CF::UntypedObject::operator=(v5 + 704, v314);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v311, "ADS::Device::Device");
    std::string::basic_string[abi:ne180100]<0>(&v309, "firmware version");
    if (v310 < 0) {
      operator delete(v309);
    }
    if (v312 < 0) {
      operator delete(v311);
    }
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v307, *(CFDictionaryRef *)(a4 + 8), @"clock latency");
  if (v308)
  {
    *(_DWORD *)(v5 + 648) = OS::CF::Number::GetValue<unsigned int>(v308, 0);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v305, "ADS::Device::Device");
    std::string::basic_string[abi:ne180100]<0>(&v303, "clock latency");
    if (v304 < 0) {
      operator delete(v303);
    }
    if (v306 < 0) {
      operator delete(v305);
    }
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v301, *(CFDictionaryRef *)(a4 + 8), @"latency");
  if (v302)
  {
    *(_DWORD *)(v5 + 652) = OS::CF::Number::GetValue<unsigned int>(v302, 0);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v299, "ADS::Device::Device");
    std::string::basic_string[abi:ne180100]<0>(&v297, "latency");
    if (v298 < 0) {
      operator delete(v297);
    }
    if (v300 < 0) {
      operator delete(v299);
    }
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(&v295, *(CFDictionaryRef *)(a4 + 8), @"hidden");
  if (v296)
  {
    *(unsigned char *)(v5 + 482) = OS::CF::Boolean::AsBool(v296);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v293, "ADS::Device::Device");
    std::string::basic_string[abi:ne180100]<0>(&v291, "hidden");
    if (v292 < 0) {
      operator delete(v291);
    }
    if (v294 < 0) {
      operator delete(v293);
    }
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v289, *(CFDictionaryRef *)(a4 + 8), @"ring buffer frame size");
  if (v290)
  {
    int v12 = OS::CF::Number::GetValue<unsigned int>(v290, 0);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v287, "ADS::Device::Device");
    std::string::basic_string[abi:ne180100]<0>(&v285, "ring buffer frame size");
    if (v286 < 0) {
      operator delete(v285);
    }
    if (v288 < 0) {
      operator delete(v287);
    }
    int v12 = 0x4000;
  }
  *(_DWORD *)(v5 + 660) = v12;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v283, *(CFDictionaryRef *)(a4 + 8), @"transport type");
  if (v284)
  {
    *(_DWORD *)(v5 + 656) = OS::CF::Number::GetValue<unsigned int>(v284, 0);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v281, "ADS::Device::Device");
    std::string::basic_string[abi:ne180100]<0>(&v279, "transport type");
    if (v280 < 0) {
      operator delete(v279);
    }
    if (v282 < 0) {
      operator delete(v281);
    }
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v277, *(CFDictionaryRef *)(a4 + 8), @"clock domain");
  if (v278)
  {
    *(_DWORD *)(v5 + 432) = OS::CF::Number::GetValue<unsigned int>(v278, 0);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v275, "ADS::Device::Device");
    std::string::basic_string[abi:ne180100]<0>(&v273, "clock domain");
    if (v274 < 0) {
      operator delete(v273);
    }
    if (v276 < 0) {
      operator delete(v275);
    }
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v271, *(CFDictionaryRef *)(a4 + 8), @"related devices");
  CFArrayRef v13 = v272;
  if (v272)
  {
    for (unint64_t i = 0; i < (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v13); ++i)
    {
      OS::CF::ArrayBase<__CFArray const*>::operator[]((const __CFArray *)buf, (uint64_t)v271, i);
      OS::CF::UntypedObject::As<OS::CF::Number>(__p, (uint64_t)buf);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
      if (*(void *)&__p[8])
      {
        unsigned int v15 = OS::CF::Number::GetValue<unsigned int>(*(const __CFNumber **)&__p[8], 0);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>(v5 + 296, v15, v15);
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)__p);
      CFArrayRef v13 = v272;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v269, "ADS::Device::Device");
    std::string::basic_string[abi:ne180100]<0>(&v267, "related devices");
    if (v268 < 0) {
      operator delete(v267);
    }
    if (v270 < 0) {
      operator delete(v269);
    }
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v265, *(CFDictionaryRef *)(a4 + 8), @"custom");
  CFArrayRef v16 = v266;
  if (v266)
  {
    unint64_t v17 = 0;
    char v18 = MEMORY[0x1E4F14500];
    while (1)
    {
      if (v17 >= (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v16)) {
        goto LABEL_218;
      }
      OS::CF::ArrayBase<__CFArray const*>::operator[]((const __CFArray *)__p, (uint64_t)v265, v17);
      OS::CF::UntypedObject::As<OS::CF::Dictionary>(&v354, (uint64_t)__p);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)__p);
      if (*(void *)type) {
        break;
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
        *(void *)&__p[4] = "ADS_Device.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 225;
        _os_log_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::Device: Invalid custom property. Skipping and continuing.", __p, 0x12u);
      }
LABEL_217:
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v354);
      ++v17;
      CFArrayRef v16 = v266;
    }
    OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)&v263, *(CFTypeRef *)type);
    mach_port_t v263 = &unk_1F14898A0;
    CFTypeRef v19 = cf;
    if (cf)
    {
      CFRetain(cf);
      applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v352, v19);
      CFDictionaryRef v20 = (const __CFDictionary *)v352;
      if (v352)
      {
        CFRetain(v352);
        char v21 = 0;
        goto LABEL_90;
      }
    }
    else
    {
      CFDictionaryRef v20 = 0;
      CFTypeRef v352 = 0;
    }
    char v21 = 1;
LABEL_90:
    CFDictionaryRef v345 = v20;
    GetFourCharacterCodeFromKey((applesauce::CF::NumberRef *)&v350, v20, "selector");
    if ((v21 & 1) == 0) {
      CFRelease(v20);
    }
    CFTypeRef v22 = v352;
    if (v352) {
      CFRetain(v352);
    }
    v339[0] = v22;
    GetFourCharacterCodeFromKey((applesauce::CF::NumberRef *)&v340, (const __CFDictionary *)v22, "scope");
    if (v22) {
      CFRelease(v22);
    }
    CFTypeRef v23 = v352;
    if (v352) {
      CFRetain(v352);
    }
    CFTypeRef v260 = v23;
    GetFourCharacterCodeFromKey((applesauce::CF::NumberRef *)v262, (const __CFDictionary *)v23, "element");
    if (v23) {
      CFRelease(v23);
    }
    CFNumberRef v24 = v262[0];
    if (v350 && v340 && v262[0])
    {
      unsigned int v25 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v350);
      if (!v340)
      {
        std::string v194 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v194, "Could not construct");
        __cxa_throw(v194, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unint64_t v26 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v340);
      if (!v262[0])
      {
        uint64_t v193 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v193, "Could not construct");
        __cxa_throw(v193, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v27 = applesauce::CF::convert_to<unsigned int,0>(v262[0]);
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v358, (CFDictionaryRef)cf, @"type");
      if (v358.i64[1])
      {
        OS::CF::String::AsStdString((std::string *)__p, (uint64_t)&v358);
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(&v347, (CFDictionaryRef)cf, @"settable");
        if (v347.i64[1])
        {
          unsigned __int8 v28 = OS::CF::Boolean::AsBool((const __CFBoolean *)v347.i64[1]);
        }
        else
        {
          unsigned __int8 v28 = 0;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 529;
            _os_log_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::addCustomProperty: Missing value for 'settable.' Using default.", buf, 0x12u);
            unsigned __int8 v28 = 0;
          }
        }
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(&v336, (CFDictionaryRef)cf, @"requires set request");
        if (v336.i64[1])
        {
          unsigned __int8 v29 = OS::CF::Boolean::AsBool((const __CFBoolean *)v336.i64[1]);
        }
        else
        {
          unsigned __int8 v29 = 0;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 541;
            _os_log_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::addCustomProperty: Missing value for 'requires set request.' Using default.", buf, 0x12u);
            unsigned __int8 v29 = 0;
          }
        }
        uint64_t v30 = __p[23];
        if (__p[23] < 0) {
          uint64_t v30 = *(void *)&__p[8];
        }
        switch(v30)
        {
          case 3:
            if (__p[23] >= 0) {
              int v31 = (unsigned __int16 *)__p;
            }
            else {
              int v31 = *(unsigned __int16 **)__p;
            }
            int v32 = *v31;
            int v33 = *((unsigned __int8 *)v31 + 2);
            BOOL v34 = v32 == 28265 && v33 == 116;
            if (!v34) {
              goto LABEL_180;
            }
            OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v342, (CFDictionaryRef)cf, @"data");
            if (*(void *)v343)
            {
              OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)buf, (CFDictionaryRef)cf, @"supported values");
              int v35 = OS::CF::Number::GetValue<unsigned int>(*(const __CFNumber **)v343, 0);
              __int16 v36 = (char *)operator new(0x58uLL);
              *((void *)v36 + 1) = 0;
              *(void *)__int16 v36 = &unk_1F1466A38;
              v36[32] = v28;
              v36[33] = v29;
              *(void *)(v36 + 36) = v25 | (v26 << 32);
              *((_DWORD *)v36 + 11) = v27;
              *((_DWORD *)v36 + 12) = v25;
              *((void *)v36 + 2) = 0;
              *((void *)v36 + 3) = &unk_1F1466A88;
              *((_DWORD *)v36 + 15) = v35;
              *((void *)v36 + 9) = 0;
              *((void *)v36 + 10) = 0;
              *((void *)v36 + 8) = 0;
              *(void *)(v36 + 52) = 1918990199;
              uint64_t v333 = v36 + 24;
              v334 = (OS::CF::Boolean *)v36;
              atomic_fetch_add_explicit((atomic_ullong *volatile)v36 + 1, 1uLL, memory_order_relaxed);
              ADS::PropertyManager::AddProperty(v207, &v333);
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v36);
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v36);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
              goto LABEL_203;
            }
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_203;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 555;
            uint64_t v64 = v18;
            long long v65 = "%25s:%-5d  ADS::Device::addCustomProperty: 'data' for int type must be a number. Skipping this property.";
            goto LABEL_202;
          case 4:
          case 7:
          case 8:
          case 9:
            goto LABEL_180;
          case 5:
            long long v52 = *(unsigned char **)__p;
            if (__p[23] >= 0) {
              long long v52 = __p;
            }
            int v53 = *(_DWORD *)v52;
            int v54 = v52[4];
            if (v53 == 1634692198 && v54 == 116)
            {
              OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v342, (CFDictionaryRef)cf, @"data");
              if (*(void *)v343)
              {
                OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)buf, (CFDictionaryRef)cf, @"supported values");
                double v60 = OS::CF::Number::GetValue<float>(*(const __CFNumber **)v343);
                int v61 = LODWORD(v60);
                unsigned int v62 = (char *)operator new(0x58uLL);
                *((void *)v62 + 1) = 0;
                *(void *)unsigned int v62 = &unk_1F1466B60;
                v62[32] = v28;
                v62[33] = v29;
                *(void *)(v62 + 36) = v25 | (v26 << 32);
                *((_DWORD *)v62 + 11) = v27;
                *((_DWORD *)v62 + 12) = v25;
                *((void *)v62 + 2) = 0;
                *((void *)v62 + 3) = &unk_1F1466BB0;
                *((_DWORD *)v62 + 15) = v61;
                *((void *)v62 + 9) = 0;
                *((void *)v62 + 10) = 0;
                *((void *)v62 + 8) = 0;
                *(void *)(v62 + 52) = 1918990199;
                uint64_t v333 = v62 + 24;
                v334 = (OS::CF::Boolean *)v62;
                atomic_fetch_add_explicit((atomic_ullong *volatile)v62 + 1, 1uLL, memory_order_relaxed);
                ADS::PropertyManager::AddProperty(v207, &v333);
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v62);
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v62);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
                goto LABEL_203;
              }
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 569;
                uint64_t v64 = v18;
                long long v65 = "%25s:%-5d  ADS::Device::addCustomProperty: 'data' for float type must be a number. Skipping this property.";
                goto LABEL_202;
              }
            }
            else
            {
              if (__p[23] >= 0) {
                uint64_t v56 = __p;
              }
              else {
                uint64_t v56 = *(unsigned char **)__p;
              }
              int v57 = *(_DWORD *)v56;
              int v58 = v56[4];
              if (v57 != 1634890337 || v58 != 121) {
                goto LABEL_180;
              }
              OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)&v342, (CFDictionaryRef)cf, @"data");
              CFNumberRef v47 = *(const __CFNumber **)v343;
              if (*(void *)v343) {
                goto LABEL_187;
              }
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 621;
                uint64_t v64 = v18;
                long long v65 = "%25s:%-5d  ADS::Device::addCustomProperty: 'data' for array type must be an array. Skipping this property.";
                goto LABEL_202;
              }
            }
            goto LABEL_203;
          case 6:
            if (__p[23] >= 0) {
              CFTypeRef v42 = __p;
            }
            else {
              CFTypeRef v42 = *(unsigned char **)__p;
            }
            if (*(_DWORD *)v42 == 1769108595 && *((_WORD *)v42 + 2) == 26478)
            {
              OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v342, (CFDictionaryRef)cf, @"data");
              CFNumberRef v47 = *(const __CFNumber **)v343;
              if (*(void *)v343)
              {
LABEL_187:
                uint64_t v63 = (char *)operator new(0x60uLL);
                *((void *)v63 + 1) = 0;
                *((void *)v63 + 2) = 0;
                *(void *)uint64_t v63 = &unk_1F1466C78;
                v63[32] = v28;
                v63[33] = v29;
                *(void *)(v63 + 36) = v25 | (v26 << 32);
                *((_DWORD *)v63 + 11) = v27;
                *((void *)v63 + 3) = &unk_1F1466CC8;
                *((void *)v63 + 8) = CFRetain(v47);
                *((void *)v63 + 9) = 0;
                *((void *)v63 + 10) = 0;
                *((void *)v63 + 11) = 0;
                *((_DWORD *)v63 + 12) = v25;
                *(void *)(v63 + 52) = 1886155636;
                *(void *)AudioObjectPropertyAddress buf = v63 + 24;
                *(void *)&uint8_t buf[8] = v63;
                atomic_fetch_add_explicit((atomic_ullong *volatile)v63 + 1, 1uLL, memory_order_relaxed);
                ADS::PropertyManager::AddProperty(v207, buf);
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v63);
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v63);
                uint64_t v5 = v209;
                goto LABEL_203;
              }
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 582;
                uint64_t v64 = v18;
                long long v65 = "%25s:%-5d  ADS::Device::addCustomProperty: 'data' for string type must be a string. Skipping this property.";
                goto LABEL_202;
              }
LABEL_203:
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v342);
              goto LABEL_204;
            }
            int v44 = *(_DWORD *)v42;
            int v45 = *((unsigned __int16 *)v42 + 2);
            if (v44 == 1651340654 && v45 == 29285)
            {
              OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v342, (CFDictionaryRef)cf, @"data");
              CFNumberRef v47 = *(const __CFNumber **)v343;
              if (*(void *)v343) {
                goto LABEL_187;
              }
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 595;
                uint64_t v64 = v18;
                long long v65 = "%25s:%-5d  ADS::Device::addCustomProperty: 'data' for number type must be a number. Skipping this property.";
LABEL_202:
                _os_log_impl(&dword_1BAA78000, v64, OS_LOG_TYPE_DEFAULT, v65, buf, 0x12u);
              }
              goto LABEL_203;
            }
LABEL_180:
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 646;
              _os_log_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Unsupported custom property type. Skipping this property.", buf, 0x12u);
            }
LABEL_204:
            OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v336);
            OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v347);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            break;
          case 10:
            if (__p[23] >= 0) {
              unint64_t v48 = __p;
            }
            else {
              unint64_t v48 = *(unsigned char **)__p;
            }
            uint64_t v49 = *(void *)v48;
            int v50 = *((unsigned __int16 *)v48 + 4);
            if (v49 != 0x616E6F6974636964 || v50 != 31090) {
              goto LABEL_180;
            }
            OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Dictionary>((uint64_t)&v342, (CFDictionaryRef)cf, @"data");
            CFNumberRef v47 = *(const __CFNumber **)v343;
            if (*(void *)v343) {
              goto LABEL_187;
            }
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_203;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 607;
            uint64_t v64 = v18;
            long long v65 = "%25s:%-5d  ADS::Device::addCustomProperty: 'data' for dictionary type must be a dictionary. Skipping this property.";
            goto LABEL_202;
          default:
            if (v30 != 15) {
              goto LABEL_180;
            }
            int v37 = __p[23] >= 0 ? (uint64_t *)__p : *(uint64_t **)__p;
            uint64_t v38 = *v37;
            uint64_t v39 = *(uint64_t *)((char *)v37 + 7);
            if (v38 != 0x6C61766F69647561 || v39 != 0x65676E617265756CLL) {
              goto LABEL_180;
            }
            OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)&v342, (CFDictionaryRef)cf, @"data");
            if (*(void *)v343)
            {
              OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)&v333, *(CFTypeRef *)v343);
              uint64_t v333 = &unk_1F1489968;
              ADS::Device::getRangeOptFromArray((uint64_t)buf, (uint64_t)&v333);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v333);
              if (buf[16])
              {
                unsigned __int8 v41 = (std::__shared_weak_count *)operator new(0x68uLL);
                v41->__shared_owners_ = 0;
                v41->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1466D90;
                LOBYTE(v41[1].__shared_owners_) = v28;
                BYTE1(v41[1].__shared_owners_) = v29;
                *(uint64_t *)((char *)&v41[1].__shared_owners_ + 4) = v25 | (v26 << 32);
                HIDWORD(v41[1].__shared_weak_owners_) = v27;
                LODWORD(v41[2].__vftable) = v25;
                v41->__shared_weak_owners_ = 0;
                v41[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1466DE0;
                *(_OWORD *)&v41[2].__shared_weak_owners_ = *(_OWORD *)buf;
                v41[3].__shared_weak_owners_ = 0;
                v41[4].__vftable = 0;
                v41[3].__shared_owners_ = 0;
                *(std::__shared_weak_count_vtbl **)((char *)&v41[2].__vftable + 4) = (std::__shared_weak_count_vtbl *)1918990199;
                v356 = v41 + 1;
                CFTypeRef v357 = v41;
                atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
                ADS::PropertyManager::AddProperty(v207, &v356);
                std::__shared_weak_count::__release_shared[abi:ne180100](v41);
                std::__shared_weak_count::__release_shared[abi:ne180100](v41);
              }
              goto LABEL_203;
            }
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_203;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 633;
            uint64_t v64 = v18;
            long long v65 = "%25s:%-5d  ADS::Device::addCustomProperty: 'data' for array type must be an array. Skipping this property.";
            goto LABEL_202;
        }
      }
      else if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
        *(void *)&__p[4] = "ADS_Device.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 520;
        _os_log_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::addCustomProperty: Cannot create custom property of unknown type. Skipping this property.", __p, 0x12u);
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v358);
    }
    else
    {
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
LABEL_208:
        if (v24) {
          CFRelease(v24);
        }
        if (v340) {
          CFRelease(v340);
        }
        if (v350) {
          CFRelease(v350);
        }
        if (v352) {
          CFRelease(v352);
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v263);
        goto LABEL_217;
      }
      *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
      *(void *)&__p[4] = "ADS_Device.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 512;
      _os_log_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::addCustomProperty: Invalid address for custom property. Skipping this property.", __p, 0x12u);
    }
    CFNumberRef v24 = v262[0];
    goto LABEL_208;
  }
LABEL_218:
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v262, *(CFDictionaryRef *)(a4 + 8), @"type");
  if (!v262[1]) {
    goto LABEL_235;
  }
  OS::CF::String::AsStdString((std::string *)__p, (uint64_t)v262);
  uint64_t v66 = __p[23];
  if (__p[23] < 0) {
    uint64_t v66 = *(void *)&__p[8];
  }
  if (v66 != 5)
  {
    BOOL v71 = 0;
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_231;
    }
    goto LABEL_234;
  }
  long long v67 = *(unsigned char **)__p;
  if (__p[23] >= 0) {
    long long v67 = __p;
  }
  int v68 = *(_DWORD *)v67;
  int v69 = v67[4];
  BOOL v71 = v68 == 1668246627 && v69 == 107;
  if ((__p[23] & 0x80000000) != 0)
  {
LABEL_234:
    operator delete(*(void **)__p);
    if (v71) {
      goto LABEL_232;
    }
LABEL_235:
    if (*(_DWORD *)(v5 + 12) == 1633905771) {
      goto LABEL_236;
    }
    int v203 = (uint64_t **)(v5 + 336);
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)&v260, *(CFDictionaryRef *)(a4 + 8), @"streams");
    CFArrayRef v78 = v261;
    if (v261)
    {
      for (unint64_t j = 0; ; ++j)
      {
        if (j >= (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v78)) {
          goto LABEL_310;
        }
        OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v258, (uint64_t)&v260, j);
        OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)&v256, v259);
        v256 = &unk_1F14898A0;
        if (*(_DWORD *)(v5 + 12) == 1633905771)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
            *(void *)&__p[4] = "ADS_Device.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 787;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::createAndAddStream: Clock devices cannot have streams.", __p, 0x12u);
          }
          CFTypeRef v192 = __cxa_allocate_exception(0x10uLL);
          *(void *)CFTypeRef v192 = off_1F148A5D8;
          v192[2] = 1970171760;
        }
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(&v354, theDict, @"is input");
        if (*(void *)type) {
          break;
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
          *(void *)&__p[4] = "ADS_Device.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 793;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddStream: Stream could not be created - 'is input' missing or invalid.", __p, 0x12u);
        }
LABEL_302:
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v354);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v256);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v258);
        CFArrayRef v78 = v261;
      }
      OS::CF::Boolean::AsBool(*(const __CFBoolean **)type);
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Dictionary>((uint64_t)&v352, theDict, @"basic description");
      if (*(void *)v353)
      {
        OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)&v350, *(CFTypeRef *)v353);
        CFTypeRef v350 = &unk_1F14898A0;
        ADS::Device::ASBDfromDictionary((uint64_t)&v358, (uint64_t)&v350);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v350);
        int16x8_t v347 = v358;
        long long v348 = v359;
        uint64_t v349 = v360;
        if (ADS::Device::isASBDValid(&v347, v80))
        {
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)&v345, theDict, @"supported formats");
          CFArrayRef v81 = v346;
          if (v346)
          {
            unint64_t v82 = 0;
            *(void *)v343 = 0;
            uint64_t v344 = 0;
            uint64_t v342 = v343;
            unint64_t v83 = MEMORY[0x1E4F14500];
            while (v82 < (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v81))
            {
              memset(v365, 0, sizeof(v365));
              memset(__p, 0, sizeof(__p));
              OS::CF::ArrayBase<__CFArray const*>::operator[]((const __CFArray *)v339, (uint64_t)&v345, v82);
              OS::CF::UntypedObject::As<OS::CF::Dictionary>(&v340, (uint64_t)v339);
              OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, *(CFTypeRef *)v341);
              *(void *)AudioObjectPropertyAddress buf = &unk_1F14898A0;
              ADS::Device::ASBDfromDictionary((uint64_t)__p, (uint64_t)buf);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
              OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v333, *(CFDictionaryRef *)v341, @"min sample rate");
              OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v356, *(CFDictionaryRef *)v341, @"max sample rate");
              if (!v334
                || ((double v84 = OS::CF::Number::GetValue<float>(v334), *(float *)&v84 > 0.0)
                  ? (BOOL v85 = v357 == 0)
                  : (BOOL v85 = 1),
                    v85 || (double v86 = OS::CF::Number::GetValue<float>((const __CFNumber *)v357), *(float *)&v86 <= 0.0)))
              {
                v365[2] = *(void *)__p;
                v365[1] = *(void *)__p;
              }
              else
              {
                double v87 = OS::CF::Number::GetValue<float>(v334);
                *(double *)&v365[1] = *(float *)&v87;
                double v88 = OS::CF::Number::GetValue<float>((const __CFNumber *)v357);
                *(double *)&v365[2] = *(float *)&v88;
              }
              *(void *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 0;
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v356);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v333);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v340);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v339);
              int16x8_t v336 = *(int16x8_t *)__p;
              long long v337 = *(_OWORD *)&__p[16];
              uint64_t v338 = v365[0];
              if (ADS::Device::isASBDValid(&v336, v89))
              {
                *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)__p;
                *(_OWORD *)&buf[16] = *(_OWORD *)&__p[16];
                uint64_t v362 = v365[0];
                long long v363 = *(_OWORD *)&v365[1];
                unsigned __int8 v90 = std::__tree<CAStreamRangedDescription,CAStreamRangedDescription_ReverseSort,std::allocator<CAStreamRangedDescription>>::__find_equal<CAStreamRangedDescription>((uint64_t)&v342, &v333, (CAStreamRangedDescription *)buf);
                if (!*v90)
                {
                  unint64_t v91 = v90;
                  unint64_t v92 = operator new(0x58uLL);
                  long long v93 = *(_OWORD *)&__p[16];
                  v92[2] = *(_OWORD *)__p;
                  v92[3] = v93;
                  *((void *)v92 + 8) = v365[0];
                  *(_OWORD *)((char *)v92 + 72) = *(_OWORD *)&v365[1];
                  unint64_t v94 = v333;
                  *(void *)unint64_t v92 = 0;
                  *((void *)v92 + 1) = 0;
                  *((void *)v92 + 2) = v94;
                  void *v91 = v92;
                  if (*(void *)v342)
                  {
                    uint64_t v342 = *(os_log_type_t **)v342;
                    unint64_t v92 = (_OWORD *)*v91;
                  }
                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)v343, (uint64_t *)v92);
                  ++v344;
                }
              }
              else if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
              {
                CA::StreamDescription::AsString((CA::StreamDescription *)&v333, &v358, v95, v96);
                unint64_t v97 = &v333;
                if (v335 < 0) {
                  unint64_t v97 = v333;
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                *(void *)&uint8_t buf[4] = "ADS_Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 832;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v97;
                _os_log_impl(&dword_1BAA78000, v83, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddStream: Skipping supported format %s for this stream", buf, 0x1Cu);
                if (v335 < 0) {
                  operator delete(v333);
                }
              }
              ++v82;
              CFArrayRef v81 = v346;
            }
            OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v333, theDict, @"terminal type");
            if (v334)
            {
              OS::CF::Number::GetValue<unsigned int>(v334, 0);
            }
            else if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
              *(void *)&__p[4] = "ADS_Device.cpp";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 842;
              _os_log_impl(&dword_1BAA78000, v83, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddStream: 'terminal type' missing or invalid. Using default value.", __p, 0x12u);
            }
            OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(&v356, theDict, @"is reference");
            uint64_t v100 = (ADS::ObjectManager *)v357;
            if (v357)
            {
              uint64_t v100 = OS::CF::Boolean::AsBool((const __CFBoolean *)v357);
              *(unsigned char *)(v5 + 832) = (_BYTE)v100;
            }
            ADS::ObjectManager::GetNextObjectID(v100);
            operator new();
          }
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
            *(void *)&__p[4] = "ADS_Device.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 817;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddStream: Stream could not be created - 'supported formats' missing or invalid.", __p, 0x12u);
          }
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v345);
          goto LABEL_301;
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
          *(void *)&__p[4] = "ADS_Device.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 809;
          unint64_t v98 = MEMORY[0x1E4F14500];
          unint64_t v99 = "%25s:%-5d  ADS::Device::createAndAddStream: Stream could not be created - bad ASBD.";
          goto LABEL_292;
        }
      }
      else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
        *(void *)&__p[4] = "ADS_Device.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 802;
        unint64_t v98 = MEMORY[0x1E4F14500];
        unint64_t v99 = "%25s:%-5d  ADS::Device::createAndAddStream: Stream could not be created - 'basic description' missing or invalid.";
LABEL_292:
        _os_log_impl(&dword_1BAA78000, v98, OS_LOG_TYPE_DEFAULT, v99, __p, 0x12u);
      }
LABEL_301:
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v352);
      goto LABEL_302;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
      *(void *)&__p[4] = "ADS_Device.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 250;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::Device: No streams to instantiate", __p, 0x12u);
    }
LABEL_310:
    if (*(_DWORD *)(v5 + 12) == 1633905771)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
        *(void *)&__p[4] = "ADS_Device.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 1193;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::updateSupportedSampleRates: clock devices do not have streams to populate the list of supported sample rates.", __p, 0x12u);
      }
      std::string v196 = __cxa_allocate_exception(0x10uLL);
      *(void *)std::string v196 = off_1F148A5D8;
      v196[2] = 1970171760;
    }
    *(void *)&buf[16] = 0;
    *(void *)&uint8_t buf[8] = 0;
    *(void *)AudioObjectPropertyAddress buf = &buf[8];
    memset(__p, 0, 24);
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, *(const void **)(v5 + 360), *(void *)(v5 + 368), (uint64_t)(*(void *)(v5 + 368) - *(void *)(v5 + 360)) >> 2);
    v365[0] = 0;
    *(void *)&__p[24] = 0;
    v365[1] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p[24], *(const void **)(v5 + 384), *(void *)(v5 + 392), (uint64_t)(*(void *)(v5 + 392) - *(void *)(v5 + 384)) >> 2);
    char v102 = 0;
    uint64_t v103 = 0;
    do
    {
      char v104 = v102;
      int16x8_t v358 = 0uLL;
      *(void *)&long long v359 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v358, *(const void **)&__p[24 * v103], *(void *)&__p[24 * v103 + 8], (uint64_t)(*(void *)&__p[24 * v103 + 8] - *(void *)&__p[24 * v103]) >> 2);
      int16x8_t v105 = v358;
      for (uint64_t k = (unsigned int *)v358.i64[0]; k != (unsigned int *)v105.i64[1]; ++k)
      {
        unint64_t v107 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*k);
        v347.i64[1] = 0;
        *(void *)&long long v348 = 0;
        v347.i64[0] = (uint64_t)&v347.i64[1];
        unint64_t v108 = (void *)*((void *)v107 + 13);
        if (v108 != (void *)((char *)v107 + 112))
        {
          do
          {
            int16x8_t v336 = *(int16x8_t *)(v108 + 9);
            std::__tree<ADS::AudioValueRangeWrapper>::__emplace_unique_key_args<ADS::AudioValueRangeWrapper,ADS::AudioValueRangeWrapper>(v347.i64, &v336, *(double *)v336.i64, *(double *)&v336.i64[1]);
            unint64_t v109 = (void *)v108[1];
            if (v109)
            {
              do
              {
                uint64_t v110 = v109;
                unint64_t v109 = (void *)*v109;
              }
              while (v109);
            }
            else
            {
              do
              {
                uint64_t v110 = (void *)v108[2];
                BOOL v34 = *v110 == (void)v108;
                unint64_t v108 = v110;
              }
              while (!v34);
            }
            unint64_t v108 = v110;
          }
          while (v110 != (void *)((char *)v107 + 112));
          unint64_t v111 = (int16x8_t *)v347.i64[0];
          if ((unint64_t *)v347.i64[0] != &v347.u64[1])
          {
            do
            {
              int16x8_t v336 = v111[2];
              std::__tree<ADS::AudioValueRangeWrapper>::__emplace_unique_key_args<ADS::AudioValueRangeWrapper,ADS::AudioValueRangeWrapper>((uint64_t *)buf, &v336, *(double *)v336.i64, *(double *)&v336.i64[1]);
              unint64_t v112 = (int16x8_t *)v111->i64[1];
              if (v112)
              {
                do
                {
                  unint64_t v113 = v112;
                  unint64_t v112 = (int16x8_t *)v112->i64[0];
                }
                while (v112);
              }
              else
              {
                do
                {
                  unint64_t v113 = (int16x8_t *)v111[1].i64[0];
                  BOOL v34 = v113->i64[0] == (void)v111;
                  unint64_t v111 = v113;
                }
                while (!v34);
              }
              unint64_t v111 = v113;
            }
            while (v113 != (int16x8_t *)&v347.u64[1]);
          }
        }
        std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v347.i64[1]);
        ADS::ObjectManager::ReleaseObject(v107, v114);
        uint64_t v5 = v209;
      }
      if (v105.i64[0]) {
        operator delete((void *)v105.i64[0]);
      }
      char v102 = 1;
      uint64_t v103 = 1;
    }
    while ((v104 & 1) == 0);
    for (uint64_t m = 0; m != -48; m -= 24)
    {
      unint64_t v116 = *(void **)&__p[m + 24];
      if (v116)
      {
        *(void *)&__p[m + 32] = v116;
        operator delete(v116);
      }
    }
    if (v203 == (uint64_t **)buf)
    {
LABEL_367:
      std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(void **)&buf[8]);
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)buf, *(CFDictionaryRef *)(a4 + 8), @"preferred channel stereo L");
      if (*(void *)&buf[8])
      {
        *CFDictionaryRef v205 = OS::CF::Number::GetValue<unsigned int>(*(const __CFNumber **)&buf[8], 0);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v254, "ADS::Device::Device");
        std::string::basic_string[abi:ne180100]<0>(&v252, "preferred channel stereo L");
        if (v253 < 0) {
          operator delete(v252);
        }
        if (v255 < 0) {
          operator delete(v254);
        }
      }
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v358, *(CFDictionaryRef *)(a4 + 8), @"preferred channel stereo R");
      if (v358.i64[1])
      {
        *(_DWORD *)(v5 + 488) = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v358.i64[1], 0);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v250, "ADS::Device::Device");
        std::string::basic_string[abi:ne180100]<0>(&v248, "preferred channel stereo R");
        if (v249 < 0) {
          operator delete(v248);
        }
        if (v251 < 0) {
          operator delete(v250);
        }
      }
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v347, *(CFDictionaryRef *)(a4 + 8), @"safety offset");
      if (v347.i64[1])
      {
        *(_DWORD *)(v5 + 664) = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v347.i64[1], 0);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v246, "ADS::Device::Device");
        std::string::basic_string[abi:ne180100]<0>(&v244, "safety offset");
        if (v245 < 0) {
          operator delete(v244);
        }
        if (v247 < 0) {
          operator delete(v246);
        }
      }
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(&v336, *(CFDictionaryRef *)(a4 + 8), @"can be content default");
      if (v336.i64[1])
      {
        *(unsigned char *)(v5 + 480) = OS::CF::Boolean::AsBool((const __CFBoolean *)v336.i64[1]);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v242, "ADS::Device::Device");
        std::string::basic_string[abi:ne180100]<0>(&v240, "can be content default");
        if (v241 < 0) {
          operator delete(v240);
        }
        if (v243 < 0) {
          operator delete(v242);
        }
      }
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(&v342, *(CFDictionaryRef *)(a4 + 8), @"can be system default");
      if (*(void *)v343)
      {
        *(unsigned char *)(v5 + 481) = OS::CF::Boolean::AsBool(*(const __CFBoolean **)v343);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v238, "ADS::Device::Device");
        std::string::basic_string[abi:ne180100]<0>(&v236, "can be system default");
        if (v237 < 0) {
          operator delete(v236);
        }
        if (v239 < 0) {
          operator delete(v238);
        }
      }
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(&v333, *(CFDictionaryRef *)(a4 + 8), @"supports catchup mode");
      if (v334)
      {
        unsigned int v131 = OS::CF::Boolean::AsBool(v334);
        *(_DWORD *)(v5 + 624) = v131;
        if (!v131) {
          goto LABEL_412;
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v234, "ADS::Device::Device");
        std::string::basic_string[abi:ne180100]<0>(&v232, "supports catchup mode");
        if (v233 < 0) {
          operator delete(v232);
        }
        if (v235 < 0) {
          operator delete(v234);
        }
        if (!*(_DWORD *)(v5 + 624))
        {
LABEL_412:
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v356, *(CFDictionaryRef *)(a4 + 8), @"audio out directory");
          if (!v357)
          {
            std::string::basic_string[abi:ne180100]<0>(&v226, "ADS::Device::Device");
            std::string::basic_string[abi:ne180100]<0>(&v224, "audio out directory");
            if (v225 < 0) {
              operator delete(v224);
            }
            if (v227 < 0) {
              operator delete(v226);
            }
            goto LABEL_426;
          }
          OS::CF::String::AsStdString((std::string *)__p, (uint64_t)&v356);
          if (__p[23] >= 0) {
            unint64_t v132 = __p;
          }
          else {
            unint64_t v132 = *(const char **)__p;
          }
          int v133 = access(v132, 2);
          int v134 = v133;
          if ((__p[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__p);
            if (v134)
            {
LABEL_418:
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
                *(void *)&__p[4] = "ADS_Device.cpp";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 340;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Provided filepath for audio out is not writeable. Reverting to default.", __p, 0x12u);
              }
              goto LABEL_426;
            }
          }
          else if (v133)
          {
            goto LABEL_418;
          }
          OS::CF::UntypedObject::operator=(v202, v357);
LABEL_426:
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v356);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v333);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v342);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v336);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v347);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v358);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
          unint64_t v101 = &v260;
          goto LABEL_427;
        }
      }
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)__p, *(CFDictionaryRef *)(a4 + 8), @"frames to save");
      if (*(void *)&__p[8])
      {
        *(_DWORD *)(v5 + 628) = OS::CF::Number::GetValue<unsigned int>(*(const __CFNumber **)&__p[8], 0);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v230, "ADS::Device::Device");
        std::string::basic_string[abi:ne180100]<0>(&v228, "frames to save");
        if (v229 < 0) {
          operator delete(v228);
        }
        if (v231 < 0) {
          operator delete(v230);
        }
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)__p);
      goto LABEL_412;
    }
    unint64_t v117 = *(unsigned char **)buf;
    if (*(void *)(v5 + 352))
    {
      unint64_t v118 = *v203;
      std::string *v203 = v204;
      *(void *)(*v204 + 16) = 0;
      *CFDictionaryRef v204 = 0;
      v204[1] = 0;
      if (v118[1]) {
        unint64_t v119 = (uint64_t *)v118[1];
      }
      else {
        unint64_t v119 = v118;
      }
      if (v119)
      {
        uint64_t v120 = std::__tree<DSP_Host_Types::AudioProcessingType>::_DetachedTreeCache::__detach_next((uint64_t)v119);
        if (v117 == &buf[8])
        {
          unint64_t v117 = &buf[8];
        }
        else
        {
          unint64_t v121 = v117;
          do
          {
            unint64_t v122 = v119;
            unint64_t v119 = v120;
            *((_OWORD *)v122 + 2) = *((_OWORD *)v121 + 2);
            leaf_high = (uint64_t **)std::__tree<ADS::AudioValueRangeWrapper>::__find_leaf_high((uint64_t)v203, __p, *((double *)v122 + 4), *((double *)v122 + 5));
            std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(v203, *(uint64_t *)__p, leaf_high, v122);
            if (v120) {
              uint64_t v120 = std::__tree<DSP_Host_Types::AudioProcessingType>::_DetachedTreeCache::__detach_next((uint64_t)v120);
            }
            unint64_t v124 = (void *)*((void *)v121 + 1);
            if (v124)
            {
              do
              {
                unint64_t v117 = v124;
                unint64_t v124 = (void *)*v124;
              }
              while (v124);
            }
            else
            {
              do
              {
                unint64_t v117 = (unsigned char *)*((void *)v121 + 2);
                BOOL v34 = *(void *)v117 == (void)v121;
                unint64_t v121 = v117;
              }
              while (!v34);
            }
            if (!v119) {
              break;
            }
            unint64_t v121 = v117;
          }
          while (v117 != &buf[8]);
        }
        std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v119);
        if (!v120) {
          goto LABEL_360;
        }
        for (uint64_t n = (uint64_t *)v120[2]; n; uint64_t n = (uint64_t *)n[2])
          uint64_t v120 = n;
        uint64_t v125 = v120;
      }
      else
      {
        uint64_t v125 = 0;
      }
      std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v125);
    }
LABEL_360:
    if (v117 != &buf[8])
    {
      do
      {
        uint64_t v127 = operator new(0x30uLL);
        *((_OWORD *)v127 + 2) = *((_OWORD *)v117 + 2);
        uint64_t v128 = (uint64_t **)std::__tree<ADS::AudioValueRangeWrapper>::__find_leaf_high((uint64_t)v203, __p, *((double *)v127 + 4), *((double *)v127 + 5));
        std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(v203, *(uint64_t *)__p, v128, (uint64_t *)v127);
        uint64_t v129 = (void *)*((void *)v117 + 1);
        if (v129)
        {
          do
          {
            uint64_t v130 = v129;
            uint64_t v129 = (void *)*v129;
          }
          while (v129);
        }
        else
        {
          do
          {
            uint64_t v130 = (unsigned char *)*((void *)v117 + 2);
            BOOL v34 = *(void *)v130 == (void)v117;
            unint64_t v117 = v130;
          }
          while (!v34);
        }
        unint64_t v117 = v130;
      }
      while (v130 != &buf[8]);
    }
    goto LABEL_367;
  }
LABEL_231:
  if (!v71) {
    goto LABEL_235;
  }
LABEL_232:
  *(_DWORD *)(v5 + 12) = 1633905771;
LABEL_236:
  *(_WORD *)(v5 + 480) = 0;
  *(void *)CFDictionaryRef v205 = 0;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)__p, *(CFDictionaryRef *)(a4 + 8), @"supported sample rates");
  CFArrayRef v72 = *(const __CFArray **)&__p[8];
  if (*(void *)&__p[8])
  {
    for (iunint64_t i = 0; ii < (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v72); ++ii)
    {
      OS::CF::ArrayBase<__CFArray const*>::operator[]((const __CFArray *)&v358, (uint64_t)__p, ii);
      OS::CF::UntypedObject::As<OS::CF::Dictionary>(buf, (uint64_t)&v358);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v358);
      if (*(void *)&buf[8])
      {
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v358, *(CFDictionaryRef *)&buf[8], @"min sample rate");
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v347, *(CFDictionaryRef *)&buf[8], @"max sample rate");
        if (v358.i64[1] && v347.i64[1])
        {
          double v74 = OS::CF::Number::GetValue<float>((const __CFNumber *)v358.i64[1]);
          double v75 = *(float *)&v74;
          double v76 = OS::CF::Number::GetValue<float>((const __CFNumber *)v347.i64[1]);
          *(double *)v336.i64 = v75;
          *(double *)&v336.i64[1] = *(float *)&v76;
          std::__tree<ADS::AudioValueRangeWrapper>::__emplace_unique_key_args<ADS::AudioValueRangeWrapper,ADS::AudioValueRangeWrapper>((uint64_t *)(v5 + 336), &v336, v75, *(float *)&v76);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v222, "ADS::Device::Device");
          std::string::basic_string[abi:ne180100]<0>(&v220, "supported sample rate range (clock device)");
          if (v221 < 0) {
            operator delete(v220);
          }
          if (v223 < 0) {
            operator delete(v222);
          }
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v347);
      }
      else
      {
        OS::CF::ArrayBase<__CFArray const*>::operator[]((const __CFArray *)&v347, (uint64_t)__p, ii);
        OS::CF::UntypedObject::As<OS::CF::Number>(&v358, (uint64_t)&v347);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v347);
        if (v358.i64[1])
        {
          double v77 = OS::CF::Number::GetValue<float>((const __CFNumber *)v358.i64[1]);
          *(double *)v347.i64 = *(float *)&v77;
          *(double *)&v347.i64[1] = *(float *)&v77;
          std::__tree<ADS::AudioValueRangeWrapper>::__emplace_unique_key_args<ADS::AudioValueRangeWrapper,ADS::AudioValueRangeWrapper>((uint64_t *)(v5 + 336), &v347, *(float *)&v77, *(float *)&v77);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v218, "ADS::Device::Device");
          std::string::basic_string[abi:ne180100]<0>(&v216, "supported sample rate (clock device)");
          if (v217 < 0) {
            operator delete(v216);
          }
          if (v219 < 0) {
            operator delete(v218);
          }
        }
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v358);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
      CFArrayRef v72 = *(const __CFArray **)&__p[8];
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v214, "ADS::Device::Device");
    std::string::basic_string[abi:ne180100]<0>(&v212, "supported sample rates (clock device)");
    if (v213 < 0) {
      operator delete(v212);
    }
    if (v215 < 0) {
      operator delete(v214);
    }
  }
  unint64_t v101 = (CFTypeRef *)__p;
LABEL_427:
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v101);
  if (*(void *)(v5 + 352))
  {
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)buf, *(CFDictionaryRef *)(a4 + 8), @"sample rate");
    if (*(void *)&buf[8])
    {
      double v135 = OS::CF::Number::GetValue<float>(*(const __CFNumber **)&buf[8]);
      double v136 = *(float *)&v135;
    }
    else
    {
      double v136 = 0.0;
    }
    if (!ADS::Device::isSupportedSampleRate((ADS::Device *)v5, v136))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
        *(void *)&__p[4] = "ADS_Device.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 407;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::Device: No valid, supported sample rate provided. Using default.", __p, 0x12u);
      }
      ADS::Device::isSupportedSampleRate((ADS::Device *)v5, 44100.0);
    }
    operator new();
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
    *(void *)&__p[4] = "ADS_Device.cpp";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = 432;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::Device: Device does not support any sample rates.", __p, 0x12u);
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)&v345, *(CFDictionaryRef *)(a4 + 8), @"controls");
  if (v346)
  {
    unint64_t v137 = 0;
    unint64_t v138 = MEMORY[0x1E4F14500];
    while (1)
    {
      if (v137 >= (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v346)) {
        goto LABEL_644;
      }
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)&v340, (uint64_t)&v345, v137);
      if (*(void *)v341) {
        break;
      }
      if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
        *(void *)&__p[4] = "ADS_Device.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 444;
        _os_log_impl(&dword_1BAA78000, v138, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::Device: Invalid control. Skipping and continuing.", __p, 0x12u);
      }
LABEL_631:
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v340);
      ++v137;
    }
    OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)&v210, *(CFTypeRef *)v341);
    long long v210 = &unk_1F14898A0;
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v342, (CFDictionaryRef)v211, @"type");
    if (!*(void *)v343)
    {
      if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
        *(void *)&__p[4] = "ADS_Device.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 884;
        _os_log_impl(&dword_1BAA78000, v138, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: Control must have a 'type.' Skipping this control.", __p, 0x12u);
      }
      goto LABEL_630;
    }
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v333, (CFDictionaryRef)v211, @"subtype");
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v356, (CFDictionaryRef)v211, @"subtype");
    OS::CF::String::AsStdString((std::string *)&v347, (uint64_t)&v342);
    CFTypeRef v139 = v211;
    if (v211) {
      CFRetain(v211);
    }
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v260, v139);
    GetFourCharacterCodeFromKey((applesauce::CF::NumberRef *)v339, (const __CFDictionary *)v260, "scope");
    if (v260) {
      CFRelease(v260);
    }
    if (v339[0])
    {
      unint64_t v140 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v339[0]);
      int v141 = v140;
    }
    else
    {
      unint64_t v140 = os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT);
      int v141 = 1735159650;
      if (v140)
      {
        *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
        *(void *)&__p[4] = "ADS_Device.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 895;
        _os_log_impl(&dword_1BAA78000, v138, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: No valid 'scope' provided. Using default.", __p, 0x12u);
      }
    }
    ADS::ObjectManager::GetNextObjectID((ADS::ObjectManager *)v140);
    uint64_t v142 = BYTE7(v348);
    if (SBYTE7(v348) < 0) {
      uint64_t v142 = v347.i64[1];
    }
    switch(v142)
    {
      case 5:
        unint64_t v143 = (int16x8_t *)v347.i64[0];
        if ((SBYTE7(v348) & 0x80u) == 0) {
          unint64_t v143 = &v347;
        }
        __int32 v144 = v143->i32[0];
        int v145 = v143->u8[4];
        if (v144 == 1702258028 && v145 == 108)
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 0;
          *(void *)&buf[16] = 0;
          *(void *)&uint8_t buf[24] = 0;
          *(void *)&uint8_t buf[8] = &buf[16];
          LOBYTE(v362) = 1;
          HIDWORD(v362) = 5;
          *(void *)&long long v363 = 0x3F80000040000000;
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)&v354, (CFDictionaryRef)v211, @"dB range");
          if (*(void *)type)
          {
            OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)&v352, *(CFTypeRef *)type);
            CFTypeRef v352 = &unk_1F1489968;
            ADS::Device::getRangeOptFromArray((uint64_t)__p, (uint64_t)&v352);
            OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v352);
            if (__p[16])
            {
              HIDWORD(v171) = *(_DWORD *)&__p[4];
              *(float *)&double v171 = *(double *)__p;
              float v172 = *(double *)&__p[8];
              CAVolumeCurve::AddRange((CAVolumeCurve *)buf, 0, 5000, v171, v172);
            }
          }
          else
          {
            if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
              *(void *)&__p[4] = "ADS_Device.cpp";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 977;
              _os_log_impl(&dword_1BAA78000, v138, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: 'dB range' for array type must be an array. Using default dB range.", __p, 0x12u);
            }
            CAVolumeCurve::AddRange((CAVolumeCurve *)buf, 0, 5000, 0.0, 120.0);
          }
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v350, (CFDictionaryRef)v211, @"value");
          if (v351)
          {
            OS::CF::Number::GetValue<int>(v351, 0);
          }
          else
          {
            CFIndex v178 = MEMORY[0x1E4F14500];
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
              *(void *)&__p[4] = "ADS_Device.cpp";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 985;
              _os_log_impl(&dword_1BAA78000, v178, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: No valid 'value' given for level control. Using default.", __p, 0x12u);
            }
          }
          if (!v334)
          {
            if (v357)
            {
              OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v357, 0);
              operator new();
            }
            operator new();
          }
          OS::CF::String::AsStdString((std::string *)&v336, (uint64_t)&v333);
          std::string::basic_string[abi:ne180100]<0>(__p, "volume");
          *(_DWORD *)&__p[24] = 1986817381;
          std::string::basic_string[abi:ne180100]<0>(v365, "LFE volume");
          int v366 = 1937072758;
          std::unordered_map<std::string,unsigned int>::unordered_map(v358.i64, (uint64_t)__p, 2);
          for (uint64_t jj = 0; jj != -8; jj -= 4)
          {
            if (SHIBYTE(v365[jj + 2]) < 0) {
              operator delete(*(void **)&__p[jj * 8 + 32]);
            }
          }
          mach_port_t v180 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(&v358, (unsigned __int8 *)&v336);
          if (v180) {
            int v181 = *((_DWORD *)v180 + 10);
          }
          else {
            int v181 = 0;
          }
          std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)&v358);
          if (SBYTE7(v337) < 0)
          {
            operator delete((void *)v336.i64[0]);
            if (v181) {
LABEL_590:
            }
              operator new();
          }
          else if (v181)
          {
            goto LABEL_590;
          }
          OS::CF::String::AsStdString((std::string *)__p, (uint64_t)&v333);
          if ((__p[23] & 0x80000000) != 0)
          {
            uint64_t v185 = *(void *)&__p[8];
            operator delete(*(void **)__p);
            if (v185 != 4) {
              goto LABEL_660;
            }
          }
          else if (__p[23] != 4)
          {
LABEL_660:
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
              *(void *)&__p[4] = "ADS_Device.cpp";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 1000;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::createAndAddControl: Custom level control subtypes must be specified with 4-char code or UInt32", __p, 0x12u);
            }
            CFTypeRef v199 = __cxa_allocate_exception(0x10uLL);
            *(void *)CFTypeRef v199 = off_1F148A5D8;
            v199[2] = 2003332927;
          }
          OS::CF::String::AsStdString((std::string *)&v358, (uint64_t)&v333);
          operator new();
        }
        if ((SBYTE7(v348) & 0x80u) == 0) {
          std::string::size_type v147 = &v347;
        }
        else {
          std::string::size_type v147 = (int16x8_t *)v347.i64[0];
        }
        __int32 v148 = v147->i32[0];
        int v149 = v147->u8[4];
        if (v148 == 1668246626 && v149 == 107)
        {
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Dictionary>((uint64_t)__p, (CFDictionaryRef)v211, @"descriptor");
          unint64_t v151 = (OS::CF::UntypedObject *)__p;
LABEL_556:
          OS::CF::UntypedObject::~UntypedObject(v151);
        }
        else
        {
LABEL_508:
          if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
            *(void *)&__p[4] = "ADS_Device.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 1151;
            int v169 = v138;
            uint64_t v170 = "%25s:%-5d  Not a recognized type of control.";
LABEL_510:
            _os_log_impl(&dword_1BAA78000, v169, OS_LOG_TYPE_DEFAULT, v170, __p, 0x12u);
          }
        }
LABEL_625:
        if (v339[0]) {
          CFRelease(v339[0]);
        }
        if (SBYTE7(v348) < 0) {
          operator delete((void *)v347.i64[0]);
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v356);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v333);
LABEL_630:
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v342);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v210);
        goto LABEL_631;
      case 6:
        uint64_t v156 = &v347;
        if (SBYTE7(v348) < 0) {
          uint64_t v156 = (int16x8_t *)v347.i64[0];
        }
        __int32 v157 = v156->i32[0];
        int v158 = v156->u16[2];
        if (v157 != 1684630643 || v158 != 29285) {
          goto LABEL_508;
        }
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)buf, (CFDictionaryRef)v211, @"value");
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v358, (CFDictionaryRef)v211, @"min");
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v336, (CFDictionaryRef)v211, @"max");
        if (v358.i64[1])
        {
          unsigned int v160 = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v358.i64[1], 0);
        }
        else
        {
          unsigned int v160 = 0;
          if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
            *(void *)&__p[4] = "ADS_Device.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 915;
            _os_log_impl(&dword_1BAA78000, v138, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: No valid 'min' given for slider control. Using default.", __p, 0x12u);
            unsigned int v160 = 0;
          }
        }
        if (v336.i64[1])
        {
          unsigned int v176 = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v336.i64[1], 0);
        }
        else
        {
          if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
            *(void *)&__p[4] = "ADS_Device.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 925;
            _os_log_impl(&dword_1BAA78000, v138, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: No valid 'max' given for slider control. Using default.", __p, 0x12u);
          }
          unsigned int v176 = 10;
        }
        if (v160 > v176)
        {
          int v177 = MEMORY[0x1E4F14500];
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
            *(void *)&__p[4] = "ADS_Device.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 935;
            _os_log_impl(&dword_1BAA78000, v177, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: 'min' is greater than 'max.' Swapping these values.", __p, 0x12u);
          }
        }
        if (*(void *)&buf[8])
        {
          OS::CF::Number::GetValue<unsigned int>(*(const __CFNumber **)&buf[8], 0);
        }
        else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
          *(void *)&__p[4] = "ADS_Device.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 943;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: No valid 'value' given for slider control. Using default.", __p, 0x12u);
        }
        if (!v334)
        {
          if (v357)
          {
            OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v357, 0);
            operator new();
          }
          operator new();
        }
        OS::CF::String::AsStdString((std::string *)__p, (uint64_t)&v333);
        if ((__p[23] & 0x80000000) != 0)
        {
          uint64_t v184 = *(void *)&__p[8];
          operator delete(*(void **)__p);
          if (v184 != 4) {
            goto LABEL_654;
          }
        }
        else if (__p[23] != 4)
        {
LABEL_654:
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
            *(void *)&__p[4] = "ADS_Device.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 953;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::createAndAddControl: Custom slider control subtypes must be specified with 4-char code or UInt32", __p, 0x12u);
          }
          v197 = __cxa_allocate_exception(0x10uLL);
          *(void *)v197 = off_1F148A5D8;
          uint64_t v197[2] = 2003332927;
        }
        OS::CF::String::AsStdString((std::string *)__p, (uint64_t)&v333);
        operator new();
      case 7:
        unint64_t v152 = &v347;
        if (SBYTE7(v348) < 0) {
          unint64_t v152 = (int16x8_t *)v347.i64[0];
        }
        __int32 v153 = v152->i32[0];
        int v154 = *(__int32 *)((char *)v152->i32 + 3);
        if (v153 != 1819242338 || v154 != 1851876716) {
          goto LABEL_508;
        }
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v336, (CFDictionaryRef)v211, @"value");
        if (v336.i64[1])
        {
          OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v336.i64[1], 0);
        }
        else if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
          *(void *)&__p[4] = "ADS_Device.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 1023;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: No valid 'value' given for BOOLean control. Using default.", __p, 0x12u);
        }
        if (!v334)
        {
          if (v357)
          {
            OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v357, 0);
            operator new();
          }
          operator new();
        }
        OS::CF::String::AsStdString((std::string *)&v358, (uint64_t)&v333);
        std::string::basic_string[abi:ne180100]<0>(__p, "mute");
        *(_DWORD *)&__p[24] = 1836414053;
        std::string::basic_string[abi:ne180100]<0>(v365, "solo");
        int v366 = 1936682095;
        std::string::basic_string[abi:ne180100]<0>(v367, "jack");
        int v368 = 1784767339;
        std::string::basic_string[abi:ne180100]<0>(v369, "LFE mute");
        int v370 = 1937072749;
        std::string::basic_string[abi:ne180100]<0>(v371, "phantom");
        int v372 = 1885888878;
        std::string::basic_string[abi:ne180100]<0>(v373, "phase invert");
        int v374 = 1885893481;
        std::string::basic_string[abi:ne180100]<0>(v375, "clip light");
        int v376 = 1668049264;
        std::string::basic_string[abi:ne180100]<0>(v377, "talkback");
        int v378 = 1952541794;
        std::string::basic_string[abi:ne180100]<0>(v379, "listenback");
        int v380 = 1819504226;
        std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t *)buf, (uint64_t)__p, 9);
        uint64_t v173 = 288;
        do
        {
          if ((char)__p[v173 + 7] < 0) {
            operator delete(*(void **)((char *)&v362 + v173));
          }
          v173 -= 32;
        }
        while (v173);
        uint64_t v174 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(buf, (unsigned __int8 *)&v358);
        if (v174) {
          int v175 = *((_DWORD *)v174 + 10);
        }
        else {
          int v175 = 0;
        }
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)buf);
        if (SBYTE7(v359) < 0)
        {
          operator delete((void *)v358.i64[0]);
          if (v175) {
LABEL_598:
          }
            operator new();
        }
        else if (v175)
        {
          goto LABEL_598;
        }
        OS::CF::String::AsStdString((std::string *)__p, (uint64_t)&v333);
        if ((__p[23] & 0x80000000) != 0)
        {
          uint64_t v186 = *(void *)&__p[8];
          operator delete(*(void **)__p);
          if (v186 != 4) {
            goto LABEL_657;
          }
        }
        else if (__p[23] != 4)
        {
LABEL_657:
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
            *(void *)&__p[4] = "ADS_Device.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 1034;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::createAndAddControl: Custom BOOLean control subtypes must be specified with 4-char code or UInt32", __p, 0x12u);
          }
          std::string v198 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::string v198 = off_1F148A5D8;
          v198[2] = 2003332927;
        }
        OS::CF::String::AsStdString((std::string *)__p, (uint64_t)&v333);
        operator new();
      case 8:
        int v161 = &v347;
        if (SBYTE7(v348) < 0) {
          int v161 = (int16x8_t *)v347.i64[0];
        }
        if (v161->i64[0] != 0x726F7463656C6573) {
          goto LABEL_508;
        }
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)&v336, (CFDictionaryRef)v211, @"items");
        if (v336.i64[1])
        {
          if (!v334)
          {
            if (v357)
            {
              OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v357, 0);
              operator new();
            }
            operator new();
          }
          OS::CF::String::AsStdString((std::string *)&v358, (uint64_t)&v333);
          std::string::basic_string[abi:ne180100]<0>(__p, "data source");
          *(_DWORD *)&__p[24] = 1685287523;
          std::string::basic_string[abi:ne180100]<0>(v365, "data destination");
          int v366 = 1684370292;
          std::string::basic_string[abi:ne180100]<0>(v367, "clock source");
          int v368 = 1668047723;
          std::string::basic_string[abi:ne180100]<0>(v369, "line level");
          int v370 = 1852601964;
          std::string::basic_string[abi:ne180100]<0>(v371, "hpf");
          int v372 = 1751740518;
          std::unordered_map<std::string,unsigned int>::unordered_map((uint64_t *)buf, (uint64_t)__p, 5);
          for (uint64_t kk = 0; kk != -20; kk -= 4)
          {
            if (SHIBYTE(v371[kk + 2]) < 0) {
              operator delete((void *)v371[kk]);
            }
          }
          int v163 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(buf, (unsigned __int8 *)&v358);
          if (v163) {
            int v164 = *((_DWORD *)v163 + 10);
          }
          else {
            int v164 = 0;
          }
          std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table((uint64_t)buf);
          if (SBYTE7(v359) < 0)
          {
            operator delete((void *)v358.i64[0]);
            if (v164) {
LABEL_617:
            }
              operator new();
          }
          else if (v164)
          {
            goto LABEL_617;
          }
          OS::CF::String::AsStdString((std::string *)__p, (uint64_t)&v333);
          if ((__p[23] & 0x80000000) != 0)
          {
            uint64_t v188 = *(void *)&__p[8];
            operator delete(*(void **)__p);
            if (v188 != 4) {
              goto LABEL_666;
            }
          }
          else if (__p[23] != 4)
          {
LABEL_666:
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
              *(void *)&__p[4] = "ADS_Device.cpp";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 1064;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::createAndAddControl: Custom selector control subtypes must be specified with 4-char code or UInt32", __p, 0x12u);
            }
            int64x2_t v201 = __cxa_allocate_exception(0x10uLL);
            *(void *)int64x2_t v201 = off_1F148A5D8;
            v201[2] = 2003332927;
          }
          OS::CF::String::AsStdString((std::string *)__p, (uint64_t)&v333);
          operator new();
        }
        if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
          *(void *)&__p[4] = "ADS_Device.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 1052;
          _os_log_impl(&dword_1BAA78000, v138, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: No valid 'items' list given for selector control. Skipping this control.", __p, 0x12u);
        }
        unint64_t v151 = (OS::CF::UntypedObject *)&v336;
        goto LABEL_556;
      case 10:
        int v165 = &v347;
        if (SBYTE7(v348) < 0) {
          int v165 = (int16x8_t *)v347.i64[0];
        }
        uint64_t v166 = v165->i64[0];
        int v167 = v165->u16[4];
        if (v166 != 0x70206F6572657473 || v167 != 28257) {
          goto LABEL_508;
        }
        if (v141 == 1768845428 || v141 == 1869968496)
        {
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)buf, (CFDictionaryRef)v211, @"value");
          if (*(void *)&buf[8])
          {
            OS::CF::Number::GetValue<float>(*(const __CFNumber **)&buf[8]);
          }
          else if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
            *(void *)&__p[4] = "ADS_Device.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 1094;
            _os_log_impl(&dword_1BAA78000, v138, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: No valid 'value' given for stereo pan control. Using default.", __p, 0x12u);
          }
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v358, (CFDictionaryRef)v211, @"channel A");
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v336, (CFDictionaryRef)v211, @"channel B");
          uint64_t v182 = 496;
          if (v141 == 1768845428) {
            uint64_t v182 = 492;
          }
          unsigned int v183 = atomic_load((unsigned int *)(v5 + v182));
          if (v183 > 2)
          {
            if (v358.i64[1] && OS::CF::Number::GetValue<int>((const __CFNumber *)v358.i64[1], 0) < v183)
            {
              OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v358.i64[1], 0);
            }
            else if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
              *(void *)&__p[4] = "ADS_Device.cpp";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 1115;
              _os_log_impl(&dword_1BAA78000, v138, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: No valid 'channel A' given for stereo pan control. Using default.", __p, 0x12u);
            }
            if (v336.i64[1] && OS::CF::Number::GetValue<int>((const __CFNumber *)v336.i64[1], 0) < v183)
            {
              OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v336.i64[1], 0);
            }
            else if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
              *(void *)&__p[4] = "ADS_Device.cpp";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 1126;
              _os_log_impl(&dword_1BAA78000, v138, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: No valid 'channel A' given for stereo pan control. Using default.", __p, 0x12u);
            }
            if (!v334)
            {
              if (v357)
              {
                OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v357, 0);
                operator new();
              }
              operator new();
            }
            OS::CF::String::AsStdString((std::string *)__p, (uint64_t)&v333);
            if ((__p[23] & 0x80000000) != 0)
            {
              uint64_t v187 = *(void *)&__p[8];
              operator delete(*(void **)__p);
              if (v187 != 4) {
                goto LABEL_663;
              }
            }
            else if (__p[23] != 4)
            {
LABEL_663:
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
                *(void *)&__p[4] = "ADS_Device.cpp";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 1132;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::createAndAddControl: Custom stereo pan control subtypes must be specified with 4-char code or UInt32", __p, 0x12u);
              }
              unint64_t v200 = __cxa_allocate_exception(0x10uLL);
              *(void *)unint64_t v200 = off_1F148A5D8;
              v200[2] = 2003332927;
            }
            OS::CF::String::AsStdString((std::string *)__p, (uint64_t)&v333);
            operator new();
          }
          if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
            *(void *)&__p[4] = "ADS_Device.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 1104;
            _os_log_impl(&dword_1BAA78000, v138, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::createAndAddControl: Cannot create a stereo pan control for a stream with fewer than two channels. Skipping this control.", __p, 0x12u);
          }
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v336);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v358);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
          goto LABEL_625;
        }
        if (!os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_625;
        }
        *(_DWORD *)std::regex_iterator<std::__wrap_iter<const char *>, char> __p = 136315394;
        *(void *)&__p[4] = "ADS_Device.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 1082;
        int v169 = v138;
        uint64_t v170 = "%25s:%-5d  ADS::Device::createAndAddControl: Invalid scope for stereo pan control. Skipping this control.";
        goto LABEL_510;
      default:
        goto LABEL_508;
    }
  }
LABEL_644:
  mach_timebase_info((mach_timebase_info_t)__p);
  LODWORD(v189) = *(_DWORD *)&__p[4];
  LODWORD(v190) = *(_DWORD *)__p;
  *(double *)(v5 + 472) = (double)v189 / (double)v190 * 1000000000.0 / *(double *)(v5 + 640);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v345);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v262);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v265);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v271);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v277);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v283);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v289);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v295);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v301);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v307);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v313);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v315);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v321);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v327);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v329);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v331);
  return v5;
}

void sub_1BAC4FC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, OS::CF::UntypedObject *a16, OS::CF::UntypedObject *a17, CAExtAudioFile *a18, const void **a19, CADeprecated::CAMutex *a20,CADeprecated::CAMutex *a21,OS::CF::UntypedObject *a22,uint64_t a23,void **a24,uint64_t a25,void **a26,OS::CF::UntypedObject *a27,OS::CF::UntypedObject *a28,OS::CF::UntypedObject *a29,OS::CF::UntypedObject *a30,uint64_t a31,OS::CF::UntypedObject *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  MEMORY[0x1C1859840](v44, 0x10F1C407846C2C0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x660]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x738]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x760]);
  applesauce::CF::NumberRef::~NumberRef((const void **)&STACK[0x688]);
  if (SLOBYTE(STACK[0x6E7]) < 0) {
    operator delete((void *)STACK[0x6D0]);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x728]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x648]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x6A8]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a44);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x698]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x6C0]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x368]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x388]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x3C8]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x408]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x448]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x488]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x4C8]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x508]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x548]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x588]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x598]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x5D8]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x618]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x628]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&STACK[0x638]);
  applesauce::CF::StringRef::~StringRef((const void **)(a43 + 752));
  OS::CF::UntypedObject::~UntypedObject(a17);
  OS::CF::UntypedObject::~UntypedObject(a28);
  OS::CF::UntypedObject::~UntypedObject(a27);
  CAExtAudioFile::~CAExtAudioFile(a18);
  applesauce::CF::StringRef::~StringRef(a19);
  OS::CF::UntypedObject::~UntypedObject(a22);
  double v46 = *(void **)(a43 + 504);
  if (v46)
  {
    *(void *)(a43 + 512) = v46;
    operator delete(v46);
  }
  CFNumberRef v47 = *(void **)(a43 + 408);
  if (v47)
  {
    *(void *)(a43 + 416) = v47;
    operator delete(v47);
  }
  unint64_t v48 = *(void **)(a43 + 384);
  if (v48)
  {
    *(void *)(a43 + 392) = v48;
    operator delete(v48);
  }
  uint64_t v49 = *a26;
  if (*a26)
  {
    *(void *)(a43 + 368) = v49;
    operator delete(v49);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*a24);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(a33);
  CADeprecated::CAMutex::~CAMutex(a20);
  CADeprecated::CAMutex::~CAMutex(a21);
  OS::CF::UntypedObject::~UntypedObject(a29);
  OS::CF::UntypedObject::~UntypedObject(a32);
  OS::CF::UntypedObject::~UntypedObject(a30);
  OS::CF::UntypedObject::~UntypedObject(a16);
  ADS::BaseObject::~BaseObject((ADS::BaseObject *)a43);
  _Unwind_Resume(a1);
}

OS::CF::String *OS::CF::String::String(OS::CF::String *this, const char *__s)
{
  CFIndex v4 = strlen(__s);
  CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v4, 0x8000100u, 0);
  *(void *)this = &unk_1F1489A20;
  *((void *)this + 1) = v5;
  return this;
}

uint64_t OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>(uint64_t result, CFDictionaryRef theDict, void *key)
{
  *(void *)BOOL result = &unk_1F14899D0;
  *(void *)(result + 8) = 0;
  if (theDict)
  {
    uint64_t v3 = result;
    value = 0;
    BOOL result = CFDictionaryGetValueIfPresent(theDict, key, (const void **)&value);
    if (result)
    {
      CFTypeID v4 = value ? CFGetTypeID(value) : 0;
      BOOL result = CFNumberGetTypeID();
      if (v4 == result)
      {
        CFStringRef v5 = value;
        if (value)
        {
          CFRetain(value);
          uint64_t v6 = v3;
          uint64_t v7 = (uint64_t)v5;
        }
        else
        {
          uint64_t v6 = v3;
          uint64_t v7 = 0;
        }
        return OS::CF::UntypedObject::operator=(v6, v7);
      }
    }
  }
  return result;
}

void OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(void *a1, CFDictionaryRef theDict, void *key)
{
  *a1 = &unk_1F1481FE8;
  a1[1] = 0;
  if (theDict)
  {
    value = 0;
    if (CFDictionaryGetValueIfPresent(theDict, key, (const void **)&value))
    {
      if (value) {
        CFTypeID v4 = CFGetTypeID(value);
      }
      else {
        CFTypeID v4 = 0;
      }
      CFTypeID TypeID = CFBooleanGetTypeID();
      CFTypeID v6 = (CFTypeID)value;
      if (v4 == TypeID)
      {
        if (value)
        {
          CFRetain(value);
          uint64_t v7 = (uint64_t)a1;
          uint64_t v8 = v6;
        }
        else
        {
          uint64_t v7 = (uint64_t)a1;
          uint64_t v8 = 0;
        }
        OS::CF::UntypedObject::operator=(v7, v8);
      }
      else
      {
        if (value) {
          CFTypeID v6 = CFGetTypeID(value);
        }
        if (v6 == CFNumberGetTypeID())
        {
          CFNumberRef v9 = (const __CFNumber *)value;
          if (value) {
            CFRetain(value);
          }
          v14[0] = &unk_1F14899D0;
          v14[1] = v9;
          BOOL v10 = OS::CF::Number::GetValue<int>(v9, 0) != 0;
          OS::CF::Boolean::Boolean((OS::CF::Boolean *)v12, v10);
          uint64_t v11 = a1[1];
          a1[1] = v13;
          uint64_t v13 = v11;
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v12);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v14);
        }
      }
    }
  }
}

const __CFBoolean *OS::CF::Boolean::AsBool(const __CFBoolean *this)
{
  if (this) {
    return (const __CFBoolean *)(CFBooleanGetValue(this) != 0);
  }
  return this;
}

uint64_t OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>(uint64_t result, CFDictionaryRef theDict, void *key)
{
  *(void *)BOOL result = &unk_1F1489968;
  *(void *)(result + 8) = 0;
  if (theDict)
  {
    uint64_t v3 = result;
    value = 0;
    BOOL result = CFDictionaryGetValueIfPresent(theDict, key, (const void **)&value);
    if (result)
    {
      CFTypeID v4 = value ? CFGetTypeID(value) : 0;
      BOOL result = CFArrayGetTypeID();
      if (v4 == result)
      {
        CFStringRef v5 = value;
        if (value)
        {
          CFRetain(value);
          uint64_t v6 = v3;
          uint64_t v7 = (uint64_t)v5;
        }
        else
        {
          uint64_t v6 = v3;
          uint64_t v7 = 0;
        }
        return OS::CF::UntypedObject::operator=(v6, v7);
      }
    }
  }
  return result;
}

const __CFArray *OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>(const __CFArray *result, uint64_t a2, CFIndex a3)
{
  *(void *)BOOL result = &unk_1F14898A0;
  *((void *)result + 1) = 0;
  if ((a3 & 0x8000000000000000) == 0)
  {
    CFArrayRef v4 = result;
    BOOL result = *(const __CFArray **)(a2 + 8);
    if (result)
    {
      BOOL result = (const __CFArray *)CFArrayGetCount(result);
      if ((uint64_t)result > a3)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), a3);
        uint64_t v7 = ValueAtIndex;
        CFTypeID v8 = ValueAtIndex ? CFGetTypeID(ValueAtIndex) : 0;
        BOOL result = (const __CFArray *)CFDictionaryGetTypeID();
        if ((const __CFArray *)v8 == result)
        {
          if (v7)
          {
            CFRetain(v7);
            uint64_t v9 = (uint64_t)v4;
            uint64_t v10 = (uint64_t)v7;
          }
          else
          {
            uint64_t v9 = (uint64_t)v4;
            uint64_t v10 = 0;
          }
          return (const __CFArray *)OS::CF::UntypedObject::operator=(v9, v10);
        }
      }
    }
  }
  return result;
}

double OS::CF::Number::GetValue<float>(const __CFNumber *a1)
{
  int valuePtr = 0;
  if (!a1) {
    return 0.0;
  }
  CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
  LODWORD(result) = valuePtr;
  return result;
}

uint64_t *std::__tree<ADS::AudioValueRangeWrapper>::__emplace_unique_key_args<ADS::AudioValueRangeWrapper,ADS::AudioValueRangeWrapper>(uint64_t *result, _OWORD *a2, double a3, double a4)
{
  CFStringRef v5 = (uint64_t **)result;
  uint64_t v7 = (uint64_t **)(result + 1);
  uint64_t v6 = result[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v6;
        double v8 = *(double *)(v6 + 32);
        if (v8 <= a3) {
          break;
        }
LABEL_5:
        uint64_t v6 = *(void *)v6;
        uint64_t v10 = v7;
        if (!*v7) {
          goto LABEL_17;
        }
      }
      if (v8 == a3)
      {
        double v9 = *(double *)(v6 + 40);
        if (v9 > a4) {
          goto LABEL_5;
        }
        if (v8 >= a3 && v9 >= a4) {
          return result;
        }
      }
      else if (v8 >= a3)
      {
        return result;
      }
      uint64_t v10 = (uint64_t **)(v6 + 8);
      uint64_t v6 = *(void *)(v6 + 8);
      if (!v6) {
        goto LABEL_17;
      }
    }
  }
  uint64_t v10 = (uint64_t **)(result + 1);
LABEL_17:
  int v12 = (uint64_t *)operator new(0x30uLL);
  *((_OWORD *)v12 + 2) = *a2;

  return std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(v5, (uint64_t)v7, v10, v12);
}

uint64_t GetFourCharacterCodeFromKey(applesauce::CF::NumberRef *a1, const __CFDictionary *a2, const char *a3)
{
  if (!a2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v3 = (const UInt8 *)a3;
  CFIndex v6 = strlen(a3);
  if (v3)
  {
    uint64_t v3 = (const UInt8 *)CFStringCreateWithBytes(0, v3, v6, 0x8000100u, 0);
    __p[0] = (void *)v3;
    if (!v3)
    {
      uint64_t v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v7, "Could not construct");
      __cxa_throw(v7, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    __p[0] = 0;
  }
  Value = CFDictionaryGetValue(a2, v3);
  if (v3) {
    CFRelease(v3);
  }
  if (!Value)
  {
    LOBYTE(cf) = 0;
    char v21 = 0;
    goto LABEL_25;
  }
  CFRetain(Value);
  CFTypeRef cf = Value;
  char v21 = 1;
  CFTypeID v9 = CFGetTypeID(Value);
  if (v9 == CFNumberGetTypeID())
  {
    applesauce::CF::TypeRef::operator applesauce::CF::NumberRef(a1, &cf);
    return std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  }
  CFTypeID v10 = CFGetTypeID(cf);
  if (v10 != CFStringGetTypeID())
  {
LABEL_25:
    *(void *)a1 = 0;
    return std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  }
  applesauce::CF::TypeRef::operator applesauce::CF::StringRef((applesauce::CF::StringRef *)&v19, &cf);
  if (!v19)
  {
    long long v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
    __cxa_throw(v14, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)v19);
  if (v18 >= 0) {
    uint64_t v11 = (unsigned int *)__p;
  }
  else {
    uint64_t v11 = (unsigned int *)__p[0];
  }
  unsigned int valuePtr = bswap32(*v11);
  CFNumberRef v12 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)a1 = v12;
  if (!v12)
  {
    unsigned int v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v15, "Could not construct");
    __cxa_throw(v15, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (v19) {
    CFRelease(v19);
  }
  return std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void ADS::Device::getRangeOptFromArray(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Number>(&v11, a2, 0);
  OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Number>(&v9, a2, 1);
  if (v12) {
    BOOL v4 = v10 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      long long v14 = "ADS_Device.cpp";
      __int16 v15 = 1024;
      int v16 = 474;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Device::getRangeFromArray: Requires numerical data for value types at indices 0 and 1", buf, 0x12u);
    }
    char v8 = 0;
    *(unsigned char *)a1 = 0;
  }
  else
  {
    double v5 = OS::CF::Number::GetValue<float>(v12);
    double v6 = *(float *)&v5;
    double v7 = OS::CF::Number::GetValue<float>(v10);
    *(double *)a1 = v6;
    *(double *)(a1 + 8) = *(float *)&v7;
    char v8 = 1;
  }
  *(unsigned char *)(a1 + 16) = v8;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v9);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v11);
}

uint64_t OS::CF::Number::GetValue<int>(const __CFNumber *a1, uint64_t a2)
{
  unsigned int valuePtr = a2;
  if (a1)
  {
    CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
    return valuePtr;
  }
  return a2;
}

uint64_t *std::unordered_map<std::string,unsigned int>::unordered_map(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_DWORD *)a1 + 8) = 1065353216;
  if (a3)
  {
    uint64_t v5 = a2;
    uint64_t v6 = 0;
    double v7 = a1 + 2;
    uint64_t v41 = a2 + 32 * a3;
    while (1)
    {
      unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](v5);
      unint64_t v9 = v8;
      unint64_t v10 = a1[1];
      if (v10)
      {
        uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
        v11.i16[0] = vaddlv_u8(v11);
        unint64_t v12 = v11.u32[0];
        if (v11.u32[0] > 1uLL)
        {
          unint64_t v3 = v8;
          if (v8 >= v10) {
            unint64_t v3 = v8 % v10;
          }
        }
        else
        {
          unint64_t v3 = (v10 - 1) & v8;
        }
        uint64_t v13 = *(unsigned __int8 ***)(*a1 + 8 * v3);
        if (v13)
        {
          for (unint64_t i = *v13; i; unint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v15 = *((void *)i + 1);
            if (v15 == v9)
            {
              if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(i + 16, (unsigned __int8 *)v5)) {
                goto LABEL_78;
              }
            }
            else
            {
              if (v12 > 1)
              {
                if (v15 >= v10) {
                  v15 %= v10;
                }
              }
              else
              {
                v15 &= v10 - 1;
              }
              if (v15 != v3) {
                break;
              }
            }
          }
        }
      }
      int v16 = (char *)operator new(0x30uLL);
      *(void *)int v16 = 0;
      *((void *)v16 + 1) = v9;
      uint64_t v17 = (std::string *)(v16 + 16);
      if (*(char *)(v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v5, *(void *)(v5 + 8));
        uint64_t v6 = a1[3];
      }
      else
      {
        long long v18 = *(_OWORD *)v5;
        *((void *)v16 + 4) = *(void *)(v5 + 16);
        *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
      }
      *((_DWORD *)v16 + 10) = *(_DWORD *)(v5 + 24);
      float v19 = (float)(unint64_t)(v6 + 1);
      float v20 = *((float *)a1 + 8);
      if (!v10 || (float)(v20 * (float)v10) < v19) {
        break;
      }
LABEL_68:
      uint64_t v36 = *a1;
      int v37 = *(void **)(*a1 + 8 * v3);
      if (v37)
      {
        *(void *)int v16 = *v37;
      }
      else
      {
        *(void *)int v16 = *v7;
        *double v7 = v16;
        *(void *)(v36 + 8 * v3) = v7;
        if (!*(void *)v16) {
          goto LABEL_77;
        }
        unint64_t v38 = *(void *)(*(void *)v16 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v38 >= v10) {
            v38 %= v10;
          }
        }
        else
        {
          v38 &= v10 - 1;
        }
        int v37 = (void *)(*a1 + 8 * v38);
      }
      void *v37 = v16;
LABEL_77:
      uint64_t v6 = a1[3] + 1;
      a1[3] = v6;
LABEL_78:
      v5 += 32;
      if (v5 == v41) {
        return a1;
      }
    }
    BOOL v21 = (v10 & (v10 - 1)) != 0;
    if (v10 < 3) {
      BOOL v21 = 1;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = a1[1];
    if (*(void *)&prime > v10) {
      goto LABEL_34;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unsigned int v25 = operator new(8 * *(void *)&prime);
          unint64_t v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v27++) = 0;
          while (*(void *)&prime != v27);
          unsigned __int8 v28 = (void *)*v7;
          if (*v7)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v29) = v7;
            BOOL v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(void *)(*a1 + 8 * v35))
                  {
                    *(void *)(*a1 + 8 * v35) = v28;
                    goto LABEL_59;
                  }
                  *unsigned __int8 v28 = *v34;
                  *BOOL v34 = **(void **)(*a1 + 8 * v35);
                  **(void **)(*a1 + 8 * v35) = v34;
                  BOOL v34 = v28;
                }
                unint64_t v35 = v29;
LABEL_59:
                unsigned __int8 v28 = v34;
                BOOL v34 = (void *)*v34;
                unint64_t v29 = v35;
              }
              while (v34);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_63;
        }
        uint64_t v39 = (void *)*a1;
        *a1 = 0;
        if (v39) {
          operator delete(v39);
        }
        unint64_t v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_63:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
    goto LABEL_68;
  }
  return a1;
}

void sub_1BAC51968(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](1, v2);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  BOOL v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

const __CFArray *OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Number>(void *a1, uint64_t a2, CFIndex a3)
{
  *a1 = &unk_1F14899D0;
  a1[1] = 0;
  CFArrayRef result = *(const __CFArray **)(a2 + 8);
  if (result)
  {
    CFArrayRef result = (const __CFArray *)CFArrayGetCount(result);
    if ((uint64_t)result > a3)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), a3);
      unint64_t v8 = ValueAtIndex;
      CFTypeID v9 = ValueAtIndex ? CFGetTypeID(ValueAtIndex) : 0;
      CFArrayRef result = (const __CFArray *)CFNumberGetTypeID();
      if ((const __CFArray *)v9 == result)
      {
        if (v8)
        {
          CFRetain(v8);
          uint64_t v10 = (uint64_t)a1;
          uint64_t v11 = (uint64_t)v8;
        }
        else
        {
          uint64_t v10 = (uint64_t)a1;
          uint64_t v11 = 0;
        }
        return (const __CFArray *)OS::CF::UntypedObject::operator=(v10, v11);
      }
    }
  }
  return result;
}

void OS::CF::Number::~Number(OS::CF::Number *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);

  JUMPOUT(0x1C1859840);
}

void OS::CF::Array::~Array(OS::CF::Array *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);

  JUMPOUT(0x1C1859840);
}

uint64_t std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

void *std::__tree<ADS::AudioValueRangeWrapper>::__find_leaf_high(uint64_t a1, void *a2, double a3, double a4)
{
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  BOOL v4 = (void *)(a1 + 8);
  uint64_t v5 = v6;
  if (v6)
  {
    do
    {
      while (1)
      {
        BOOL v4 = v5;
        double v7 = *((double *)v5 + 4);
        if (v7 <= a3 && (v7 != a3 || *((double *)v5 + 5) <= a4)) {
          break;
        }
        uint64_t v5 = (uint64_t *)*v5;
        unint64_t v8 = v4;
        if (!*v4) {
          goto LABEL_10;
        }
      }
      uint64_t v5 = (uint64_t *)v5[1];
    }
    while (v5);
    unint64_t v8 = v4 + 1;
  }
  else
  {
    unint64_t v8 = v4;
  }
LABEL_10:
  *a2 = v4;
  return v8;
}

void ADS::Device::ASBDfromDictionary(uint64_t a1, uint64_t a2)
{
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v19, *(CFDictionaryRef *)(a2 + 8), @"sample rate");
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v17, *(CFDictionaryRef *)(a2 + 8), @"format id");
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v15, *(CFDictionaryRef *)(a2 + 8), @"format flags");
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v13, *(CFDictionaryRef *)(a2 + 8), @"bytes per frame");
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v11, *(CFDictionaryRef *)(a2 + 8), @"frames per packet");
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v9, *(CFDictionaryRef *)(a2 + 8), @"channels per frame");
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v7, *(CFDictionaryRef *)(a2 + 8), @"bits per channel");
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v5, *(CFDictionaryRef *)(a2 + 8), @"bytes per packet");
  if (v20 && v18 && v16 && v14 && v12 && v10 && v8 && v6)
  {
    double v4 = OS::CF::Number::GetValue<float>(v20);
    *(double *)a1 = *(float *)&v4;
    *(_DWORD *)(a1 + 8) = OS::CF::Number::GetValue<unsigned int>(v18, 0);
    *(_DWORD *)(a1 + 12) = OS::CF::Number::GetValue<unsigned int>(v16, 0);
    *(_DWORD *)(a1 + 24) = OS::CF::Number::GetValue<unsigned int>(v14, 0);
    *(_DWORD *)(a1 + 20) = OS::CF::Number::GetValue<unsigned int>(v12, 0);
    *(_DWORD *)(a1 + 28) = OS::CF::Number::GetValue<unsigned int>(v10, 0);
    *(_DWORD *)(a1 + 32) = OS::CF::Number::GetValue<unsigned int>(v8, 0);
    *(_DWORD *)(a1 + 16) = OS::CF::Number::GetValue<unsigned int>(v6, 0);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v5);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v7);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v9);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v11);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v13);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v15);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v17);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v19);
}

uint64_t ADS::Device::isASBDValid(int16x8_t *this, AudioStreamBasicDescription *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = this[1].u32[2];
  if (this[1].i32[1] * v3 == this[1].i32[0] || this->i32[2] != 1819304813)
  {
    if (*(double *)this->i64 >= 0.0)
    {
      unsigned int v13 = this[2].u32[0];
      if ((this->i8[12] & 1) != 0 || v13 < 0x19)
      {
        if (v3 >= (this[1].i32[3] * v13) >> 3 || this->i32[2] != 1819304813) {
          return 1;
        }
        BOOL v17 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (!v17) {
          return result;
        }
        int16x8_t v18 = this[1];
        int16x8_t v20 = *this;
        int16x8_t v21 = v18;
        uint64_t v22 = this[2].i64[0];
        CA::StreamDescription::AsString((CA::StreamDescription *)__p, &v20, *(double *)v20.i64, v18);
        if (v24 >= 0) {
          float v19 = __p;
        }
        else {
          float v19 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        unint64_t v26 = "ADS_Device.cpp";
        __int16 v27 = 1024;
        int v28 = 777;
        __int16 v29 = 2080;
        uint8x8_t v30 = v19;
        CFNumberRef v8 = MEMORY[0x1E4F14500];
        CFTypeID v9 = "%25s:%-5d  ASBD is not valid because not (asbd.mBitsPerChannel * asbd.mChannelsPerFrame / 8 == asbd.mBytesP"
             "erFrame) and asbd.mFormatID == kAudioFormatLinearPCM. ASBD: %s";
      }
      else
      {
        BOOL v14 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (!v14) {
          return result;
        }
        int16x8_t v15 = this[1];
        int16x8_t v20 = *this;
        int16x8_t v21 = v15;
        uint64_t v22 = this[2].i64[0];
        CA::StreamDescription::AsString((CA::StreamDescription *)__p, &v20, *(double *)v20.i64, v15);
        if (v24 >= 0) {
          CFNumberRef v16 = __p;
        }
        else {
          CFNumberRef v16 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        unint64_t v26 = "ADS_Device.cpp";
        __int16 v27 = 1024;
        int v28 = 771;
        __int16 v29 = 2080;
        uint8x8_t v30 = v16;
        CFNumberRef v8 = MEMORY[0x1E4F14500];
        CFTypeID v9 = "%25s:%-5d  ASBD is not valid because !(asbd.mFormatFlags & kAudioFormatFlagIsFloat) && (asbd.mBitsPerChanne"
             "l > 24). ASBD: %s";
      }
    }
    else
    {
      BOOL v10 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v10) {
        return result;
      }
      int16x8_t v11 = this[1];
      int16x8_t v20 = *this;
      int16x8_t v21 = v11;
      uint64_t v22 = this[2].i64[0];
      CA::StreamDescription::AsString((CA::StreamDescription *)__p, &v20, *(double *)v20.i64, v11);
      if (v24 >= 0) {
        CFNumberRef v12 = __p;
      }
      else {
        CFNumberRef v12 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      unint64_t v26 = "ADS_Device.cpp";
      __int16 v27 = 1024;
      int v28 = 765;
      __int16 v29 = 2080;
      uint8x8_t v30 = v12;
      CFNumberRef v8 = MEMORY[0x1E4F14500];
      CFTypeID v9 = "%25s:%-5d  ASBD is not valid because sample rate was less than 0. ASBD: %s";
    }
  }
  else
  {
    BOOL v4 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
    int16x8_t v6 = this[1];
    int16x8_t v20 = *this;
    int16x8_t v21 = v6;
    uint64_t v22 = this[2].i64[0];
    CA::StreamDescription::AsString((CA::StreamDescription *)__p, &v20, *(double *)v20.i64, v6);
    if (v24 >= 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    unint64_t v26 = "ADS_Device.cpp";
    __int16 v27 = 1024;
    int v28 = 759;
    __int16 v29 = 2080;
    uint8x8_t v30 = v7;
    CFNumberRef v8 = MEMORY[0x1E4F14500];
    CFTypeID v9 = "%25s:%-5d  ASBD is not valid because (asbd.mBytesPerFrame * asbd.mFramesPerPacket == asbd.mBytesPerPacket) and "
         "asbd.mFormatID == kAudioFormatLinearPCM returned false. ASBD: %s";
  }
  _os_log_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, 0x1Cu);
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

uint64_t std::set<CAStreamRangedDescription,CAStreamRangedDescription_ReverseSort,std::allocator<CAStreamRangedDescription>>::set[abi:ne180100](uint64_t a1, void *a2, const AudioStreamRangedDescription *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v5 = a2 + 1;
  int16x8_t v6 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v7 = *(void *)(a1 + 8);
      CFNumberRef v8 = (void *)v4;
      if (*(void *)a1 == v4) {
        goto LABEL_8;
      }
      CFTypeID v9 = *(void **)(a1 + 8);
      BOOL v10 = (void *)v4;
      if (v7)
      {
        do
        {
          CFNumberRef v8 = v9;
          CFTypeID v9 = (void *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          CFNumberRef v8 = (void *)v10[2];
          BOOL v11 = *v8 == (void)v10;
          BOOL v10 = v8;
        }
        while (v11);
      }
      if (CAStreamRangedDescription::Sorter((CAStreamRangedDescription *)(v8 + 4), (const AudioStreamRangedDescription *)(v6 + 4), a3))
      {
LABEL_8:
        if (!v7)
        {
          float v19 = (void *)v4;
          CFNumberRef v12 = (uint64_t **)v4;
LABEL_14:
          unsigned int v13 = (char *)operator new(0x58uLL);
          long long v14 = *((_OWORD *)v6 + 2);
          long long v15 = *((_OWORD *)v6 + 3);
          *((void *)v13 + 8) = v6[8];
          *((_OWORD *)v13 + 2) = v14;
          *((_OWORD *)v13 + 3) = v15;
          *(_OWORD *)(v13 + 72) = *(_OWORD *)(v6 + 9);
          std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v19, v12, (uint64_t *)v13);
          goto LABEL_15;
        }
        float v19 = v8;
        CFNumberRef v12 = (uint64_t **)(v8 + 1);
      }
      else
      {
        CFNumberRef v12 = (uint64_t **)std::__tree<CAStreamRangedDescription,CAStreamRangedDescription_ReverseSort,std::allocator<CAStreamRangedDescription>>::__find_equal<CAStreamRangedDescription>(a1, &v19, (CAStreamRangedDescription *)(v6 + 4));
      }
      if (!*v12) {
        goto LABEL_14;
      }
LABEL_15:
      CFNumberRef v16 = (void *)v6[1];
      if (v16)
      {
        do
        {
          BOOL v17 = v16;
          CFNumberRef v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          BOOL v17 = (void *)v6[2];
          BOOL v11 = *v17 == (void)v6;
          int16x8_t v6 = v17;
        }
        while (!v11);
      }
      int16x8_t v6 = v17;
    }
    while (v17 != v5);
  }
  return a1;
}

void sub_1BAC52280(_Unwind_Exception *a1)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*v1);
  _Unwind_Resume(a1);
}

void *std::__tree<CAStreamRangedDescription,CAStreamRangedDescription_ReverseSort,std::allocator<CAStreamRangedDescription>>::__find_equal<CAStreamRangedDescription>(uint64_t a1, void *a2, CAStreamRangedDescription *this)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        CFNumberRef v8 = (CAStreamRangedDescription *)(v4 + 4);
        if (!CAStreamRangedDescription::Sorter(this, (const AudioStreamRangedDescription *)(v4 + 4), (const AudioStreamRangedDescription *)this))break; {
        uint64_t v4 = (void *)*v7;
        }
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!CAStreamRangedDescription::Sorter(v8, (const AudioStreamRangedDescription *)this, (const AudioStreamRangedDescription *)this))break; {
      uint64_t v5 = v7 + 1;
      }
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t ADS::TypedProperty<AudioValueRange>::IsSupportedValue(uint64_t a1, double *a2)
{
  unsigned int v3 = *(double **)(a1 + 56);
  uint64_t v2 = *(double **)(a1 + 64);
  if (v2 == v3) {
    return 1;
  }
  double v4 = *a2;
  double v5 = a2[1];
  while (1)
  {
    double v6 = v3[1];
    if (v6 >= v4)
    {
      double v7 = *v3;
      if (*v3 >= v4 || v6 > v5)
      {
        BOOL v9 = v7 >= v4 || v6 <= v5;
        BOOL v10 = v9 && v7 == v4;
        if (v10 && v6 == v5) {
          break;
        }
      }
    }
    v3 += 2;
    if (v3 == v2)
    {
      unsigned int v3 = *(double **)(a1 + 64);
      return v3 != v2;
    }
  }
  return v3 != v2;
}

void ADS::TypedProperty<AudioValueRange>::~TypedProperty(void *a1)
{
  *a1 = &unk_1F1466DE0;
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C1859840);
}

void *ADS::TypedProperty<AudioValueRange>::~TypedProperty(void *a1)
{
  *a1 = &unk_1F1466DE0;
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t ADS::Property::GetPropertyInfo(ADS::Property *this)
{
  return *((void *)this + 3);
}

uint64_t ADS::Property::GetAddress(ADS::Property *this)
{
  return *(void *)((char *)this + 12);
}

uint64_t ADS::Property::RequiresSetRequest(ADS::Property *this)
{
  return *((unsigned __int8 *)this + 9);
}

uint64_t ADS::Property::IsPropertySettable(ADS::Property *this)
{
  return *((unsigned __int8 *)this + 8);
}

void ADS::TypedProperty<AudioValueRange>::GetChangeInfo()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1BAC526AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  MEMORY[0x1C1859840](v4, 0x10A1C40AD1A5B81);
  _Unwind_Resume(a1);
}

void ADS::ChangeInfoData<AudioValueRange>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);

  JUMPOUT(0x1C1859840);
}

void *ADS::ChangeInfoData<AudioValueRange>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);
  return a1;
}

uint64_t ADS::TypedProperty<AudioValueRange>::AbortConfigChange(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  }
  return result;
}

double ADS::TypedProperty<AudioValueRange>::PerformConfigChange(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  long long v5 = *(_OWORD *)(a2 + 56);
  (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
  if (((*(uint64_t (**)(uint64_t, long long *))(*(void *)a1 + 96))(a1, &v5) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      double v7 = "ADS_Property.h";
      __int16 v8 = 1024;
      int v9 = 245;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::PerformConfigChange: proposed property value is not supported.", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  double result = *(double *)&v5;
  *(_OWORD *)(a1 + 40) = v5;
  return result;
}

BOOL ADS::TypedProperty<AudioValueRange>::SetPropertyData(uint64_t a1, _OWORD *a2, int a3, char a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if ((a4 & 1) == 0 && !*(unsigned char *)(a1 + 8))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      BOOL v11 = "ADS_Property.h";
      __int16 v12 = 1024;
      int v13 = 266;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::SetPropertyData: this property cannot be set.", (uint8_t *)&v10, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    int v9 = 1970171760;
LABEL_17:
    exception[2] = v9;
  }
  if (a3 != 16)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      BOOL v11 = "ADS_Property.h";
      __int16 v12 = 1024;
      int v13 = 268;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::SetPropertyData: wrong size for the data for this property.", (uint8_t *)&v10, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    int v9 = 561211770;
    goto LABEL_17;
  }
  if (((*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)a1 + 96))(a1, a2) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      BOOL v11 = "ADS_Property.h";
      __int16 v12 = 1024;
      int v13 = 269;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::SetPropertyData: proposed property value is not supported.", (uint8_t *)&v10, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    int v9 = 1852797029;
    goto LABEL_17;
  }
  int v6 = *(unsigned __int8 *)(a1 + 9);
  if (!*(unsigned char *)(a1 + 9)) {
    *(_OWORD *)(a1 + 40) = *a2;
  }
  return v6 == 0;
}

uint64_t ADS::TypedProperty<AudioValueRange>::GetPropertyData(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(a1 + 40);
  return 16;
}

uint64_t ADS::TypedProperty<AudioValueRange>::GetPropertyDataSize()
{
  return 16;
}

uint64_t std::__shared_ptr_emplace<ADS::TypedProperty<AudioValueRange>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 80))();
}

void std::__shared_ptr_emplace<ADS::TypedProperty<AudioValueRange>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1466D90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<ADS::TypedProperty<AudioValueRange>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1466D90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL ADS::CFProperty::IsSupportedValue(CFTypeRef *this, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  CFTypeID v4 = CFGetTypeID(*a2);
  if (v4 != CFGetTypeID(this[5])) {
    return 0;
  }
  int v6 = (CFTypeRef *)this[6];
  long long v5 = (CFTypeRef *)this[7];
  if (v5 == v6) {
    return 1;
  }
  while (*v6 != v3)
  {
    if (++v6 == v5)
    {
      int v6 = (CFTypeRef *)this[7];
      return v6 != v5;
    }
  }
  return v6 != v5;
}

void ADS::CFProperty::~CFProperty(CFTypeRef *this)
{
  ADS::CFProperty::~CFProperty(this);

  JUMPOUT(0x1C1859840);
}

{
  void *v2;

  *this = &unk_1F1466CC8;
  CFRelease(this[5]);
  uint64_t v2 = (void *)this[6];
  if (v2)
  {
    this[7] = v2;
    operator delete(v2);
  }
}

void ADS::CFProperty::GetChangeInfo(ADS::CFProperty *this, const void *a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1BAC52FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  MEMORY[0x1C1859840](v4, 0x10E1C40D062FDF8);
  _Unwind_Resume(a1);
}

void ADS::ChangeInfoData<void const*>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);

  JUMPOUT(0x1C1859840);
}

void *ADS::ChangeInfoData<void const*>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);
  return a1;
}

uint64_t ADS::CFProperty::AbortConfigChange(ADS::CFProperty *this, void *a2)
{
  if (a2) {
    return (*(uint64_t (**)(void *))(*(void *)a2 + 8))(a2);
  }
  return result;
}

void ADS::CFProperty::PerformConfigChange(ADS::CFProperty *this, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2[7];
  (*(void (**)(void *))(*a2 + 8))(a2);
  if (((*(uint64_t (**)(ADS::CFProperty *, uint64_t *))(*(void *)this + 96))(this, &v5) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      double v7 = "ADS_Property.h";
      __int16 v8 = 1024;
      int v9 = 143;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  CFProperty::PerformConfigChange: proposed property value is not supported.", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  CFTypeRef v3 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = v5;
  CFRelease(v3);
}

BOOL ADS::CFProperty::SetPropertyData(uint64_t a1, CFPropertyListRef *a2, int a3, char a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if ((a4 & 1) == 0 && !*(unsigned char *)(a1 + 8))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      __int16 v12 = "ADS_Property.h";
      __int16 v13 = 1024;
      int v14 = 167;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  CFProperty::SetPropertyData: this property cannot be set.", (uint8_t *)&v11, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    int v10 = 1970171760;
LABEL_17:
    exception[2] = v10;
  }
  if (a3 != 8)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      __int16 v12 = "ADS_Property.h";
      __int16 v13 = 1024;
      int v14 = 169;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  CFProperty::SetPropertyData: wrong size for the data for this property.", (uint8_t *)&v11, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    int v10 = 561211770;
    goto LABEL_17;
  }
  if (((*(uint64_t (**)(uint64_t, CFPropertyListRef *))(*(void *)a1 + 96))(a1, a2) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      __int16 v12 = "ADS_Property.h";
      __int16 v13 = 1024;
      int v14 = 170;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  CFProperty::SetPropertyData: proposed property value is not supported.", (uint8_t *)&v11, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    int v10 = 1852797029;
    goto LABEL_17;
  }
  int v6 = *(unsigned __int8 *)(a1 + 9);
  if (!*(unsigned char *)(a1 + 9))
  {
    double v7 = *(const void **)(a1 + 40);
    *(void *)(a1 + 40) = CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF88], *a2, 0);
    CFRelease(v7);
  }
  return v6 == 0;
}

uint64_t ADS::CFProperty::GetPropertyData(const __CFString **this, CFDictionaryRef *a2)
{
  *a2 = PropertyListDeepImmutableCopy(this[5]);
  return 8;
}

uint64_t ADS::CFProperty::GetPropertyDataSize(ADS::CFProperty *this)
{
  return 8;
}

uint64_t std::__shared_ptr_emplace<ADS::CFProperty>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 80))();
}

void std::__shared_ptr_emplace<ADS::CFProperty>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1466C78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<ADS::CFProperty>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1466C78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t ADS::TypedProperty<float>::IsSupportedValue(uint64_t a1, float *a2)
{
  CFTypeRef v3 = *(float **)(a1 + 40);
  uint64_t v2 = *(float **)(a1 + 48);
  if (v2 == v3) {
    return 1;
  }
  while (*v3 != *a2)
  {
    if (++v3 == v2)
    {
      CFTypeRef v3 = *(float **)(a1 + 48);
      return v3 != v2;
    }
  }
  return v3 != v2;
}

void ADS::TypedProperty<float>::~TypedProperty(void *a1)
{
  *a1 = &unk_1F1466BB0;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C1859840);
}

void *ADS::TypedProperty<float>::~TypedProperty(void *a1)
{
  *a1 = &unk_1F1466BB0;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return a1;
}

void ADS::TypedProperty<float>::GetChangeInfo()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1BAC538FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  MEMORY[0x1C1859840](v4, 0x10A1C401BAC4818);
  _Unwind_Resume(a1);
}

void ADS::ChangeInfoData<float>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);

  JUMPOUT(0x1C1859840);
}

void *ADS::ChangeInfoData<float>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);
  return a1;
}

uint64_t ADS::TypedProperty<float>::AbortConfigChange(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  }
  return result;
}

float ADS::TypedProperty<float>::PerformConfigChange(float *a1, float *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  float v5 = a2[14];
  (*(void (**)(float *))(*(void *)a2 + 8))(a2);
  if (((*(uint64_t (**)(float *, float *))(*(void *)a1 + 96))(a1, &v5) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      double v7 = "ADS_Property.h";
      __int16 v8 = 1024;
      int v9 = 245;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::PerformConfigChange: proposed property value is not supported.", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  float result = v5;
  a1[9] = v5;
  return result;
}

BOOL ADS::TypedProperty<float>::SetPropertyData(uint64_t a1, _DWORD *a2, int a3, char a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if ((a4 & 1) == 0 && !*(unsigned char *)(a1 + 8))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      int v11 = "ADS_Property.h";
      __int16 v12 = 1024;
      int v13 = 266;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::SetPropertyData: this property cannot be set.", (uint8_t *)&v10, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    int v9 = 1970171760;
LABEL_17:
    exception[2] = v9;
  }
  if (a3 != 4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      int v11 = "ADS_Property.h";
      __int16 v12 = 1024;
      int v13 = 268;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::SetPropertyData: wrong size for the data for this property.", (uint8_t *)&v10, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    int v9 = 561211770;
    goto LABEL_17;
  }
  if (((*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a1 + 96))(a1, a2) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      int v11 = "ADS_Property.h";
      __int16 v12 = 1024;
      int v13 = 269;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::SetPropertyData: proposed property value is not supported.", (uint8_t *)&v10, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    int v9 = 1852797029;
    goto LABEL_17;
  }
  int v6 = *(unsigned __int8 *)(a1 + 9);
  if (!*(unsigned char *)(a1 + 9)) {
    *(_DWORD *)(a1 + 36) = *a2;
  }
  return v6 == 0;
}

uint64_t ADS::TypedProperty<float>::GetPropertyData(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 36);
  return 4;
}

uint64_t ADS::TypedProperty<float>::GetPropertyDataSize()
{
  return 4;
}

uint64_t std::__shared_ptr_emplace<ADS::TypedProperty<float>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 80))();
}

void std::__shared_ptr_emplace<ADS::TypedProperty<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1466B60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<ADS::TypedProperty<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1466B60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL ADS::TypedProperty<unsigned int>::IsSupportedValue(uint64_t a1, __int32 *a2)
{
  uint64_t v5 = a1 + 40;
  CFTypeRef v3 = *(__int32 **)(a1 + 40);
  uint64_t v4 = *(__int32 **)(v5 + 8);
  if (v4 == v3) {
    return 1;
  }
  int v6 = wmemchr(v3, *a2, v4 - v3);
  if (v6) {
    double v7 = v6;
  }
  else {
    double v7 = v4;
  }
  return v7 != *(__int32 **)(a1 + 48);
}

void ADS::TypedProperty<unsigned int>::~TypedProperty(void *a1)
{
  *a1 = &unk_1F1466A88;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C1859840);
}

void *ADS::TypedProperty<unsigned int>::~TypedProperty(void *a1)
{
  *a1 = &unk_1F1466A88;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return a1;
}

void ADS::TypedProperty<unsigned int>::GetChangeInfo()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1BAC54200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  MEMORY[0x1C1859840](v4, 0x10A1C401BAC4818);
  _Unwind_Resume(a1);
}

uint64_t ADS::TypedProperty<unsigned int>::AbortConfigChange(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  }
  return result;
}

uint64_t ADS::TypedProperty<unsigned int>::PerformConfigChange(_DWORD *a1, _DWORD *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v5 = a2[14];
  (*(void (**)(_DWORD *))(*(void *)a2 + 8))(a2);
  uint64_t result = (*(uint64_t (**)(_DWORD *, int *))(*(void *)a1 + 96))(a1, &v5);
  if ((result & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      double v7 = "ADS_Property.h";
      __int16 v8 = 1024;
      int v9 = 245;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::PerformConfigChange: proposed property value is not supported.", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  a1[9] = v5;
  return result;
}

BOOL ADS::TypedProperty<unsigned int>::SetPropertyData(uint64_t a1, _DWORD *a2, int a3, char a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if ((a4 & 1) == 0 && !*(unsigned char *)(a1 + 8))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      int v11 = "ADS_Property.h";
      __int16 v12 = 1024;
      int v13 = 266;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::SetPropertyData: this property cannot be set.", (uint8_t *)&v10, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    int v9 = 1970171760;
LABEL_17:
    exception[2] = v9;
  }
  if (a3 != 4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      int v11 = "ADS_Property.h";
      __int16 v12 = 1024;
      int v13 = 268;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::SetPropertyData: wrong size for the data for this property.", (uint8_t *)&v10, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    int v9 = 561211770;
    goto LABEL_17;
  }
  if (((*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a1 + 96))(a1, a2) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      int v11 = "ADS_Property.h";
      __int16 v12 = 1024;
      int v13 = 269;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  TypedProperty::SetPropertyData: proposed property value is not supported.", (uint8_t *)&v10, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    int v9 = 1852797029;
    goto LABEL_17;
  }
  int v6 = *(unsigned __int8 *)(a1 + 9);
  if (!*(unsigned char *)(a1 + 9)) {
    *(_DWORD *)(a1 + 36) = *a2;
  }
  return v6 == 0;
}

uint64_t ADS::TypedProperty<unsigned int>::GetPropertyData(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 36);
  return 4;
}

uint64_t ADS::TypedProperty<unsigned int>::GetPropertyDataSize()
{
  return 4;
}

uint64_t std::__shared_ptr_emplace<ADS::TypedProperty<unsigned int>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 80))();
}

void std::__shared_ptr_emplace<ADS::TypedProperty<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1466A38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<ADS::TypedProperty<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1466A38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

OS::CF::Boolean *OS::CF::Boolean::Boolean(OS::CF::Boolean *this, int a2)
{
  CFTypeRef v3 = (CFTypeRef *)MEMORY[0x1E4F1CFD8];
  if (!a2) {
    CFTypeRef v3 = (CFTypeRef *)MEMORY[0x1E4F1CFC0];
  }
  CFTypeRef v4 = *v3;
  if (*v3) {
    CFRetain(*v3);
  }
  *(void *)this = &unk_1F1481FE8;
  *((void *)this + 1) = v4;
  return this;
}

void OS::CF::Boolean::~Boolean(OS::CF::Boolean *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);

  JUMPOUT(0x1C1859840);
}

void OS::CF::UUID::~UUID(OS::CF::UUID *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);

  JUMPOUT(0x1C1859840);
}

void OS::CF::Data::~Data(OS::CF::Data *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<ADS::Device::testOutputSafetyViolation(AudioTimeStamp const&)::$_0,std::tuple<unsigned int,char const*,int,double>>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v4;
    *(_WORD *)int v10 = 2080;
    *(void *)&v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 2048;
    uint64_t v14 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Output Safety Offset Violation check failed, theSafetyViolation %f", (uint8_t *)&v9, 0x22u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAC54980(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<ADS::Device::testOutputSafetyViolation(AudioTimeStamp const&)::$_0,std::tuple<unsigned int,char const*,int,double>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void CAX4CCString::CAX4CCString(CAX4CCString *this)
{
  *(_DWORD *)((char *)this + 1) = -1;
  if (!__maskrune(-1, 0x40000uLL)) {
    goto LABEL_14;
  }
  unsigned int v2 = *((char *)this + 2);
  uint64_t v3 = MEMORY[0x1E4F14390];
  if ((v2 & 0x80000000) != 0)
  {
    if (!__maskrune(v2, 0x40000uLL)) {
      goto LABEL_14;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v2 + 60) & 0x40000) == 0)
  {
    goto LABEL_14;
  }
  unsigned int v4 = *((char *)this + 3);
  if ((v4 & 0x80000000) != 0)
  {
    if (!__maskrune(v4, 0x40000uLL)) {
      goto LABEL_14;
    }
  }
  else if ((*(_DWORD *)(v3 + 4 * v4 + 60) & 0x40000) == 0)
  {
    goto LABEL_14;
  }
  unsigned int v5 = *((char *)this + 4);
  if ((v5 & 0x80000000) != 0)
  {
    if (__maskrune(v5, 0x40000uLL)) {
      goto LABEL_12;
    }
  }
  else if ((*(_DWORD *)(v3 + 4 * v5 + 60) & 0x40000) != 0)
  {
LABEL_12:
    *(_WORD *)((char *)this + 5) = 39;
    *(unsigned char *)this = 39;
    return;
  }
LABEL_14:
  snprintf((char *)this, 0x10uLL, "%d", -1);
}

uint64_t caulk::concurrent::details::rt_message_call<ADS::Device::testInputSafetyViolation(AudioTimeStamp const&,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,double>>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  unsigned int v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v4;
    *(_WORD *)int v10 = 2080;
    *(void *)&v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 2048;
    uint64_t v14 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Input Safety Offset Violation check failed, theSafetyViolation %f", (uint8_t *)&v9, 0x22u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAC54BFC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<ADS::Device::testInputSafetyViolation(AudioTimeStamp const&,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,double>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void AudioObjectShow(AudioObjectID inObjectID)
{
  uint64_t v1 = *(HALS_ObjectMap **)&inObjectID;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (AllowHALClientsInThisProcess())
  {
    HALS_System::StartServer(&v13, 0);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    unsigned int v2 = (unsigned int *)HALS_ObjectMap::CopyObjectByObjectID(v1);
    os_log_type_t v3 = v2;
    if (!v2)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buffer = 136315650;
        CFNumberRef v16 = "HALS_Framework-ios-imp.cpp";
        __int16 v17 = 1024;
        int v18 = 343;
        __int16 v19 = 1024;
        int v20 = (int)v1;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectShow: no object with given ID %u", buffer, 0x18u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = 560947818;
    }
    unsigned int v4 = v2[5];
    v12[0] = HIBYTE(v4);
    v12[1] = BYTE2(v4);
    v12[2] = BYTE1(v4);
    v12[3] = v4;
    uint64_t v12[4] = 0;
    uint64_t v10 = 0x676C6F626C6E616DLL;
    int v11 = 0;
    CFStringRef theString = 0;
    int v8 = 8;
    (*(void (**)(unsigned int *, HALS_ObjectMap *, uint64_t *, uint64_t, int *, CFStringRef *, void, void, void))(*(void *)v2 + 112))(v2, v1, &v10, 8, &v8, &theString, 0, 0, 0);
    buffer[0] = 0;
    if (theString)
    {
      usedBufLeuint64_t n = 0;
      v22.length = CFStringGetLength(theString);
      v22.locatiouint64_t n = 0;
      CFStringGetBytes(theString, v22, 0x8000100u, 0, 0, buffer, 255, &usedBufLen);
      buffer[usedBufLen] = 0;
      CFRelease(theString);
    }
    printf("AudioObjectID:\t\t0x%lX\n\tAudioClassID:\t'%s'\n\tName:\t\t\t%s\n", v3[4], v12, (const char *)buffer);
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v3, v5);
  }
}

void sub_1BAC54E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

OSStatus AudioObjectIsPropertySettable(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, Boolean *outIsSettable)
{
  uint64_t v5 = *(HALS_ObjectMap **)&inObjectID;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (AllowHALClientsInThisProcess())
  {
    HALS_System::StartServer(&v32.mElement, 0);
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    if (!outIsSettable)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        unint64_t v35 = "HALS_Framework-ios-imp.cpp";
        __int16 v36 = 1024;
        int v37 = 531;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectIsPropertySettable: the outIsSettable argument is NULL", buf, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    int v6 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v5);
    int v8 = v6;
    if (!v6)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        unint64_t v35 = "HALS_Framework-ios-imp.cpp";
        __int16 v36 = 1024;
        int v37 = 535;
        __int16 v38 = 1024;
        int v39 = (int)v5;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectIsPropertySettable: no object with given ID %u", buf, 0x18u);
      }
      int v28 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v28 = off_1F148A5D8;
      uint64_t v28[2] = 560947818;
    }
    int v9 = *((_DWORD *)v6 + 5);
    if (v9 <= 1701078389)
    {
      if (v9 == 1633773415) {
        goto LABEL_14;
      }
      int v10 = 1633969526;
    }
    else
    {
      if (v9 == 1701078390 || v9 == 1701733488) {
        goto LABEL_14;
      }
      int v10 = 1919182198;
    }
    if (v9 != v10)
    {
      int v24 = *((_DWORD *)v6 + 6);
      if (v9 != v24)
      {
        if (v24 <= 1701078389)
        {
          if (v24 == 1633773415) {
            goto LABEL_14;
          }
          int v25 = 1633969526;
        }
        else
        {
          if (v24 == 1701078390 || v24 == 1919182198) {
            goto LABEL_14;
          }
          int v25 = 1701733488;
        }
        if (v24 == v25) {
          goto LABEL_14;
        }
      }
      if (!(*(unsigned int (**)(HALS_ObjectMap *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v6 + 88))(v6, v5, inAddress, 0))
      {
        OSStatus v11 = 2003332927;
        *outIsSettable = 0;
        goto LABEL_43;
      }
      LOBYTE(v22) = (*(uint64_t (**)(HALS_ObjectMap *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v8 + 96))(v8, v5, inAddress, 0);
      goto LABEL_33;
    }
LABEL_14:
    *(void *)&v32.signed int mSelector = 0;
    int v31 = 0;
    *(void *)uint8x8_t v30 = 0;
    HALB_Info::TranslateDeviceAddressToControlAddress((int *)inAddress, (const AudioObjectPropertyAddress *)&v32.mScope, &v32.mSelector, v30, v7);
    if (v32.mScope)
    {
      int v12 = (unsigned int *)(*(uint64_t (**)(HALS_ObjectMap *))(*(void *)v8 + 640))(v8);
      uint64_t v13 = v12;
      if (v12)
      {
        int v14 = (*(uint64_t (**)(unsigned int *, void, unsigned int *, void))(*(void *)v12 + 88))(v12, v12[4], v30, 0);
        if (v14)
        {
          uint64_t v5 = (HALS_ObjectMap *)v13[4];
          inAddress = (const AudioObjectPropertyAddress *)v30;
          CFNumberRef v16 = v13;
LABEL_27:
          LOBYTE(v14) = (*(uint64_t (**)(void *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v16 + 96))(v16, v5, inAddress, 0);
          OSStatus v11 = 0;
LABEL_29:
          *outIsSettable = v14;
          HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v13, v15);
LABEL_43:
          HALS_ObjectMap::ReleaseObject(v8, v23);
          return v11;
        }
      }
      else
      {
        int v14 = (*(uint64_t (**)(HALS_ObjectMap *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v8 + 88))(v8, v5, inAddress, 0);
        if (v14)
        {
          CFNumberRef v16 = v8;
          goto LABEL_27;
        }
      }
      OSStatus v11 = 2003332927;
      goto LABEL_29;
    }
    if ((HALB_Info::IsIOContextProperty((HALB_Info *)inAddress->mSelector, 0) & 1) != 0
      && (*(unsigned int (**)(HALS_ObjectMap *))(*(void *)v8 + 832))(v8))
    {
      InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(v8);
      uint64_t v18 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
      __int16 v19 = (HALS_ObjectMap *)v18;
      if (!v18)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          unint64_t v35 = "HALS_Framework-ios-imp.cpp";
          __int16 v36 = 1024;
          int v37 = 601;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectIsPropertySettable: no IO Context with given description", buf, 0x12u);
        }
        __int16 v29 = __cxa_allocate_exception(0x10uLL);
        *(void *)__int16 v29 = off_1F148A5D8;
        v29[2] = 2003332927;
      }
      int v20 = (*(uint64_t (**)(uint64_t, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v18 + 88))(v18, InternalIOContextID, inAddress, 0);
      if (v20)
      {
        LOBYTE(v20) = (*(uint64_t (**)(HALS_ObjectMap *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v19 + 96))(v19, InternalIOContextID, inAddress, 0);
        OSStatus v11 = 0;
      }
      else
      {
        OSStatus v11 = 2003332927;
      }
      *outIsSettable = v20;
      HALS_ObjectMap::ReleaseObject(v19, v21);
      goto LABEL_43;
    }
    int v22 = (*(uint64_t (**)(HALS_ObjectMap *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v8 + 88))(v8, v5, inAddress, 0);
    if (!v22)
    {
      OSStatus v11 = 2003332927;
      goto LABEL_35;
    }
    LOBYTE(v22) = (*(uint64_t (**)(HALS_ObjectMap *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v8 + 96))(v8, v5, inAddress, 0);
LABEL_33:
    OSStatus v11 = 0;
LABEL_35:
    *outIsSettable = v22;
    goto LABEL_43;
  }
  return 560033144;
}

void sub_1BAC555CC(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

OSStatus AudioObjectGetPropertyDataSize(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, const void *inQualifierData, UInt32 *outDataSize)
{
  uint64_t v7 = *(void *)&inQualifierDataSize;
  int v9 = *(HALS_ObjectMap **)&inObjectID;
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (AllowHALClientsInThisProcess())
  {
    HALS_System::StartServer(&v36.mElement, 0);
    if (v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
    }
    if (!outDataSize)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        int v39 = "HALS_Framework-ios-imp.cpp";
        __int16 v40 = 1024;
        int v41 = 715;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectGetPropertyDataSize: the outDataSize argument is NULL", buf, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    *outDataSize = 0;
    int v10 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v9);
    int v12 = v10;
    if (!v10)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        int v39 = "HALS_Framework-ios-imp.cpp";
        __int16 v40 = 1024;
        int v41 = 719;
        __int16 v42 = 1024;
        int v43 = (int)v9;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectGetPropertyDataSize: no object with given ID %u", buf, 0x18u);
      }
      AudioObjectPropertyAddress v32 = __cxa_allocate_exception(0x10uLL);
      *(void *)AudioObjectPropertyAddress v32 = off_1F148A5D8;
      uint64_t v32[2] = 560947818;
    }
    int v13 = *((_DWORD *)v10 + 5);
    if (v13 <= 1701078389)
    {
      if (v13 == 1633773415) {
        goto LABEL_14;
      }
      int v14 = 1633969526;
    }
    else
    {
      if (v13 == 1701078390 || v13 == 1701733488) {
        goto LABEL_14;
      }
      int v14 = 1919182198;
    }
    if (v13 != v14)
    {
      int v28 = *((_DWORD *)v10 + 6);
      if (v13 != v28)
      {
        if (v28 <= 1701078389)
        {
          if (v28 == 1633773415) {
            goto LABEL_14;
          }
          int v29 = 1633969526;
        }
        else
        {
          if (v28 == 1701078390 || v28 == 1919182198) {
            goto LABEL_14;
          }
          int v29 = 1701733488;
        }
        if (v28 == v29) {
          goto LABEL_14;
        }
      }
      if (!(*(unsigned int (**)(HALS_ObjectMap *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v10 + 88))(v10, v9, inAddress, 0))
      {
        OSStatus v15 = 2003332927;
        *outDataSize = 0;
        goto LABEL_43;
      }
      UInt32 v26 = (*(uint64_t (**)(HALS_ObjectMap *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, uint64_t, const void *, void))(*(void *)v12 + 104))(v12, v9, inAddress, v7, inQualifierData, 0);
      goto LABEL_33;
    }
LABEL_14:
    *(void *)&v36.signed int mSelector = 0;
    int v35 = 0;
    *(void *)BOOL v34 = 0;
    HALB_Info::TranslateDeviceAddressToControlAddress((int *)inAddress, (const AudioObjectPropertyAddress *)&v36.mScope, &v36.mSelector, v34, v11);
    if (v36.mScope)
    {
      CFNumberRef v16 = (unsigned int *)(*(uint64_t (**)(HALS_ObjectMap *))(*(void *)v12 + 640))(v12);
      __int16 v17 = v16;
      if (v16)
      {
        UInt32 v18 = (*(uint64_t (**)(unsigned int *, void, unsigned int *, void))(*(void *)v16 + 88))(v16, v16[4], v34, 0);
        if (v18)
        {
          int v9 = (HALS_ObjectMap *)v17[4];
          inAddress = (const AudioObjectPropertyAddress *)v34;
          int v20 = v17;
LABEL_27:
          UInt32 v18 = (*(uint64_t (**)(void *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, uint64_t, const void *, void))(*(void *)v20 + 104))(v20, v9, inAddress, v7, inQualifierData, 0);
          OSStatus v15 = 0;
LABEL_29:
          *outDataSize = v18;
          HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v17, v19);
LABEL_43:
          HALS_ObjectMap::ReleaseObject(v12, v27);
          return v15;
        }
      }
      else
      {
        UInt32 v18 = (*(uint64_t (**)(HALS_ObjectMap *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v12 + 88))(v12, v9, inAddress, 0);
        if (v18)
        {
          int v20 = v12;
          goto LABEL_27;
        }
      }
      OSStatus v15 = 2003332927;
      goto LABEL_29;
    }
    if ((HALB_Info::IsIOContextProperty((HALB_Info *)inAddress->mSelector, 0) & 1) != 0
      && (*(unsigned int (**)(HALS_ObjectMap *))(*(void *)v12 + 832))(v12))
    {
      InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(v12);
      uint64_t v22 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
      unint64_t v23 = (HALS_ObjectMap *)v22;
      if (!v22)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          int v39 = "HALS_Framework-ios-imp.cpp";
          __int16 v40 = 1024;
          int v41 = 785;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectGetPropertyDataSize: no IO Context with given description", buf, 0x12u);
        }
        uint64_t v33 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v33 = off_1F148A5D8;
        v33[2] = 2003332927;
      }
      UInt32 v24 = (*(uint64_t (**)(uint64_t, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v22 + 88))(v22, InternalIOContextID, inAddress, 0);
      if (v24)
      {
        UInt32 v24 = (*(uint64_t (**)(HALS_ObjectMap *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, uint64_t, const void *, void))(*(void *)v23 + 104))(v23, InternalIOContextID, inAddress, v7, inQualifierData, 0);
        OSStatus v15 = 0;
      }
      else
      {
        OSStatus v15 = 2003332927;
      }
      *outDataSize = v24;
      HALS_ObjectMap::ReleaseObject(v23, v25);
      goto LABEL_43;
    }
    UInt32 v26 = (*(uint64_t (**)(HALS_ObjectMap *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v12 + 88))(v12, v9, inAddress, 0);
    if (!v26)
    {
      OSStatus v15 = 2003332927;
      goto LABEL_35;
    }
    UInt32 v26 = (*(uint64_t (**)(HALS_ObjectMap *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, uint64_t, const void *, void))(*(void *)v12 + 104))(v12, v9, inAddress, v7, inQualifierData, 0);
LABEL_33:
    OSStatus v15 = 0;
LABEL_35:
    *outDataSize = v26;
    goto LABEL_43;
  }
  return 560033144;
}

void sub_1BAC55D98(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

OSStatus AudioObjectGetPropertyData(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, const void *inQualifierData, UInt32 *ioDataSize, void *outData)
{
  uint64_t v9 = *(void *)&inQualifierDataSize;
  OSStatus v11 = *(HALS_ObjectMap **)&inObjectID;
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  HALS_System::StartServer(&v44.mElement, 0);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if (!ioDataSize)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_77;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    CFNumberRef v47 = "HALS_Framework-ios-imp.cpp";
    __int16 v48 = 1024;
    int v49 = 894;
    int v37 = MEMORY[0x1E4F14500];
    __int16 v38 = "%25s:%-5d  AudioObjectGetPropertyData: the ioDataSize argument is NULL";
    goto LABEL_76;
  }
  if (!outData)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_77;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    CFNumberRef v47 = "HALS_Framework-ios-imp.cpp";
    __int16 v48 = 1024;
    int v49 = 895;
    int v37 = MEMORY[0x1E4F14500];
    __int16 v38 = "%25s:%-5d  AudioObjectGetPropertyData: the outData argument is NULL";
LABEL_76:
    _os_log_impl(&dword_1BAA78000, v37, OS_LOG_TYPE_ERROR, v38, buf, 0x12u);
LABEL_77:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  int v12 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID(v11);
  int v14 = v12;
  if (!v12)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      CFNumberRef v47 = "HALS_Framework-ios-imp.cpp";
      __int16 v48 = 1024;
      int v49 = 899;
      __int16 v50 = 1024;
      int v51 = (int)v11;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectGetPropertyData: no object with given ID %u", buf, 0x18u);
    }
    __int16 v40 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v40 = off_1F148A5D8;
    v40[2] = 560947818;
  }
  int v15 = *((_DWORD *)v12 + 5);
  if (v15 <= 1701078389)
  {
    if (v15 == 1633773415) {
      goto LABEL_15;
    }
    int v16 = 1633969526;
  }
  else
  {
    if (v15 == 1701078390 || v15 == 1701733488) {
      goto LABEL_15;
    }
    int v16 = 1919182198;
  }
  if (v15 == v16) {
    goto LABEL_15;
  }
  int v29 = *((_DWORD *)v12 + 6);
  if (v15 == v29)
  {
LABEL_32:
    int v30 = (*(uint64_t (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v12 + 88))(v12, v11, inAddress, 0);
    size_t v25 = *ioDataSize;
    if (v30)
    {
      (*(void (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, size_t, UInt32 *, void *, uint64_t, const void *, void))(*(void *)v14 + 112))(v14, v11, inAddress, v25, ioDataSize, outData, v9, inQualifierData, 0);
      goto LABEL_34;
    }
LABEL_35:
    OSStatus v17 = 2003332927;
    bzero(outData, v25);
    *ioDataSize = 0;
    goto LABEL_64;
  }
  if (v29 <= 1701078389)
  {
    if (v29 == 1633773415) {
      goto LABEL_15;
    }
    int v32 = 1633969526;
  }
  else
  {
    if (v29 == 1701078390 || v29 == 1919182198) {
      goto LABEL_15;
    }
    int v32 = 1701733488;
  }
  if (v29 != v32) {
    goto LABEL_32;
  }
LABEL_15:
  *(void *)&v44.signed int mSelector = 0;
  int v43 = 0;
  *(void *)__int16 v42 = 0;
  HALB_Info::TranslateDeviceAddressToControlAddress((int *)inAddress, (const AudioObjectPropertyAddress *)&v44.mScope, &v44.mSelector, v42, v13);
  if (v44.mScope)
  {
    UInt32 v18 = (unsigned int *)(*(uint64_t (**)(HALS_Device *))(*(void *)v14 + 640))(v14);
    __int16 v19 = v18;
    if (v18)
    {
      if ((*(unsigned int (**)(unsigned int *, void, unsigned int *, void))(*(void *)v18 + 88))(v18, v18[4], v42, 0))
      {
        signed int mSelector = inAddress->mSelector;
        if (HALB_Info::IsAVTProperty((HALB_Info *)inAddress->mSelector))
        {
          (*(void (**)(unsigned int *, void, unsigned int *, void, char *, void, void, void, void))(*(void *)v19 + 112))(v19, v19[4], v42, *((unsigned int *)outData + 6), (char *)outData + 24, *((void *)outData + 2), *((unsigned int *)outData + 2), *(void *)outData, 0);
LABEL_62:
          OSStatus v17 = 0;
          goto LABEL_63;
        }
        if (mSelector > 1935946357)
        {
          if (mSelector > 1936811891)
          {
            if (mSelector == 1936811892 || mSelector == 1983013986) {
              goto LABEL_61;
            }
            int v31 = 1937125988;
          }
          else
          {
            if (mSelector == 1935946358 || mSelector == 1936092525) {
              goto LABEL_61;
            }
            int v31 = 1936811878;
          }
        }
        else
        {
          if (mSelector <= 1836462691)
          {
            if (mSelector != 1684157046 && mSelector != 1818453107)
            {
              int v31 = 1818456932;
              goto LABEL_60;
            }
LABEL_61:
            (*(void (**)(unsigned int *, void, unsigned int *, void, UInt32 *, void *, void, void *, void))(*(void *)v19 + 112))(v19, v19[4], v42, *ioDataSize, ioDataSize, outData, *ioDataSize, outData, 0);
            goto LABEL_62;
          }
          if (mSelector == 1836462692 || mSelector == 1836462707) {
            goto LABEL_61;
          }
          int v31 = 1885762669;
        }
LABEL_60:
        if (mSelector != v31)
        {
          (*(void (**)(unsigned int *, void, unsigned int *, void, UInt32 *, void *, uint64_t, const void *, void))(*(void *)v19 + 112))(v19, v19[4], v42, *ioDataSize, ioDataSize, outData, v9, inQualifierData, 0);
          goto LABEL_62;
        }
        goto LABEL_61;
      }
      LODWORD(v28) = *ioDataSize;
    }
    else
    {
      int v27 = (*(uint64_t (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v14 + 88))(v14, v11, inAddress, 0);
      uint64_t v28 = *ioDataSize;
      if (v27)
      {
        (*(void (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, uint64_t, UInt32 *, void *, uint64_t, const void *, void))(*(void *)v14 + 112))(v14, v11, inAddress, v28, ioDataSize, outData, v9, inQualifierData, 0);
        goto LABEL_62;
      }
    }
    OSStatus v17 = 2003332927;
    bzero(outData, v28);
    *ioDataSize = 0;
LABEL_63:
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v19, v21);
    goto LABEL_64;
  }
  if ((HALB_Info::IsIOContextProperty((HALB_Info *)inAddress->mSelector, 0) & 1) != 0
    && (*(unsigned int (**)(HALS_Device *))(*(void *)v14 + 832))(v14))
  {
    InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(v14);
    uint64_t v23 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
    __int16 v19 = (unsigned int *)v23;
    if (!v23)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        CFNumberRef v47 = "HALS_Framework-ios-imp.cpp";
        __int16 v48 = 1024;
        int v49 = 982;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectGetPropertyData: no IO Context with given description", buf, 0x12u);
      }
      int v41 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v41 = off_1F148A5D8;
      v41[2] = 2003332927;
    }
    if ((*(unsigned int (**)(uint64_t, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v23 + 88))(v23, InternalIOContextID, inAddress, 0))
    {
      (*(void (**)(unsigned int *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void, UInt32 *, void *, uint64_t, const void *, void))(*(void *)v19 + 112))(v19, InternalIOContextID, inAddress, *ioDataSize, ioDataSize, outData, v9, inQualifierData, 0);
      OSStatus v17 = 0;
    }
    else
    {
      OSStatus v17 = 2003332927;
      bzero(outData, *ioDataSize);
      *ioDataSize = 0;
    }
    goto LABEL_63;
  }
  int v24 = (*(uint64_t (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v14 + 88))(v14, v11, inAddress, 0);
  size_t v25 = *ioDataSize;
  if (!v24) {
    goto LABEL_35;
  }
  (*(void (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, size_t, UInt32 *, void *, uint64_t, const void *, void))(*(void *)v14 + 112))(v14, v11, inAddress, v25, ioDataSize, outData, v9, inQualifierData, 0);
LABEL_34:
  OSStatus v17 = 0;
LABEL_64:
  uint64_t v33 = (HALB_Info *)inAddress->mSelector;
  if (HALB_Info::IsLocalizedStringProperty(v33, v26))
  {
    if (HALB_Info::IsAVTProperty(v33))
    {
      int v35 = (const __CFString **)*((void *)outData + 2);
      if (v35) {
        **((void **)outData + 2) = HALS_Object::CopyLocalizedString(v14, inAddress, *v35);
      }
    }
    else
    {
      *(void *)outData = HALS_Object::CopyLocalizedString(v14, inAddress, *(const __CFString **)outData);
    }
  }
  HALS_ObjectMap::ReleaseObject(v14, v34);
  return v17;
}

void sub_1BAC5681C(_Unwind_Exception *exception_object, HALS_Object *a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  int v7 = (int)a2;
  HALS_ObjectMap::ReleaseObject(v5, a2);
  HALS_ObjectMap::ReleaseObject(v4, v8);
  __cxa_begin_catch(exception_object);
  if (v7 == 2)
  {
    if (!v2) {
      goto LABEL_9;
    }
  }
  else if (!v2)
  {
    goto LABEL_9;
  }
  if (v3) {
    bzero(v3, *v2);
  }
  _DWORD *v2 = 0;
LABEL_9:
  __cxa_end_catch();
  JUMPOUT(0x1BAC56518);
}

OSStatus AudioObjectSetPropertyData(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, const void *inQualifierData, UInt32 inDataSize, const void *inData)
{
  uint64_t v7 = *(void *)&inDataSize;
  uint64_t v9 = *(void *)&inQualifierDataSize;
  OSStatus v11 = *(HALS_ObjectMap **)&inObjectID;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (AllowHALClientsInThisProcess())
  {
    HALS_System::StartServer(&v38.mElement, 0);
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    }
    OSStatus v12 = 2003332927;
    if (!inData)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v41.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)"HALS_Framework-ios-imp.cpp";
        WORD2(v41.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v41.__r_.__value_.__r.__words[1] + 6) = 1135;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectSetPropertyData: the inData argument is NULL", (uint8_t *)&v41, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    int v13 = (unsigned int *)HALS_ObjectMap::CopyObjectByObjectID(v11);
    int v15 = v13;
    if (!v13)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v41.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)"HALS_Framework-ios-imp.cpp";
        WORD2(v41.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v41.__r_.__value_.__r.__words[1] + 6) = 1139;
        WORD1(v41.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v41.__r_.__value_.__r.__words[2]) = v11;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectSetPropertyData: no object with given ID %u", (uint8_t *)&v41, 0x18u);
      }
      int v32 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v32 = off_1F148A5D8;
      uint64_t v32[2] = 560947818;
    }
    int v16 = v13[5];
    if (v16 <= 1701078389)
    {
      if (v16 == 1633773415) {
        goto LABEL_14;
      }
      int v17 = 1633969526;
    }
    else
    {
      if (v16 == 1701078390 || v16 == 1701733488) {
        goto LABEL_14;
      }
      int v17 = 1919182198;
    }
    if (v16 == v17) {
      goto LABEL_14;
    }
    int v28 = v13[6];
    if (v16 == v28)
    {
LABEL_39:
      if ((*(unsigned int (**)(unsigned int *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v13 + 88))(v13, v11, inAddress, 0))
      {
        if ((*(unsigned int (**)(unsigned int *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v15 + 96))(v15, v11, inAddress, 0))
        {
          (*(void (**)(unsigned int *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *, void))(*(void *)v15 + 120))(v15, v11, inAddress, v7, inData, v9, inQualifierData, 0);
          goto LABEL_42;
        }
LABEL_44:
        OSStatus v12 = 1852797029;
      }
LABEL_75:
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v15, v27);
      return v12;
    }
    if (v28 <= 1701078389)
    {
      if (v28 == 1633773415) {
        goto LABEL_14;
      }
      int v29 = 1633969526;
    }
    else
    {
      if (v28 == 1701078390 || v28 == 1919182198) {
        goto LABEL_14;
      }
      int v29 = 1701733488;
    }
    if (v28 != v29) {
      goto LABEL_39;
    }
LABEL_14:
    *(void *)&v38.signed int mSelector = 0;
    int v37 = 0;
    *(void *)AudioObjectPropertyAddress v36 = 0;
    HALB_Info::TranslateDeviceAddressToControlAddress((int *)inAddress, (const AudioObjectPropertyAddress *)&v38.mScope, &v38.mSelector, v36, v14);
    if (v38.mScope)
    {
      UInt32 v18 = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v15 + 640))(v15);
      __int16 v19 = v18;
      if (v18)
      {
        if ((*(unsigned int (**)(unsigned int *, void, unsigned int *, void))(*(void *)v18 + 88))(v18, v18[4], v36, 0))
        {
          if ((*(unsigned int (**)(unsigned int *, void, unsigned int *, void))(*(void *)v19 + 96))(v19, v19[4], v36, 0))
          {
            if (inAddress->mSelector == 1987013741 || inAddress->mSelector == 1987013732)
            {
              std::string::basic_string[abi:ne180100]<0>(&v35, "AudioObjectSetPropertyData");
              uint64_t v21 = v15[4];
              unint64_t v22 = *(void *)&inAddress->mSelector;
              uint64_t mElement = inAddress->mElement;
              std::string::basic_string[abi:ne180100]<0>(&__p, "(nullptr)");
              if (v7 == 4)
              {
                std::to_string(&v41, *(float *)inData);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                std::string __p = v41;
              }
              v41.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
              v41.__r_.__value_.__l.__size_ = 1174405120;
              v41.__r_.__value_.__r.__words[2] = (std::string::size_type)___Z34LogVolumeChangeForClientSideDeviceNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj26AudioObjectPropertyAddressjPKv_block_invoke;
              __int16 v42 = &__block_descriptor_tmp_18;
              if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v43, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
              }
              else {
                std::string v43 = v35;
              }
              uint64_t v44 = v21;
              int v45 = (void *)bswap32(v22);
              char v46 = 5;
              CFNumberRef v47 = (void *)((v22 >> 40) & 0xFF00 | HIBYTE(v22) | (v22 >> 24) & 0xFF0000 | (v22 >> 8) & 0xFF000000);
              char v48 = 5;
              uint64_t v49 = mElement;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v50, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              }
              else {
                std::string v50 = __p;
              }
              AMCP::Utility::Dispatch_Queue::async_on_global(&v41);
              if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v50.__r_.__value_.__l.__data_);
              }
              if (v48 < 0) {
                operator delete(v47);
              }
              if (v46 < 0) {
                operator delete(v45);
              }
              if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v43.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v35.__r_.__value_.__l.__data_);
              }
              kdebug_trace();
            }
            (*(void (**)(unsigned int *, void, unsigned int *, uint64_t, const void *, uint64_t, const void *, void))(*(void *)v19 + 120))(v19, v19[4], v36, v7, inData, v9, inQualifierData, 0);
            if (inAddress->mSelector == 1987013741 || inAddress->mSelector == 1987013732) {
              kdebug_trace();
            }
            goto LABEL_73;
          }
LABEL_43:
          OSStatus v12 = 1852797029;
        }
      }
      else if ((*(unsigned int (**)(unsigned int *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v15 + 88))(v15, v11, inAddress, 0))
      {
        if ((*(unsigned int (**)(unsigned int *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v15 + 96))(v15, v11, inAddress, 0))
        {
          (*(void (**)(unsigned int *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *, void))(*(void *)v15 + 120))(v15, v11, inAddress, v7, inData, v9, inQualifierData, 0);
LABEL_73:
          OSStatus v12 = 0;
          goto LABEL_74;
        }
        goto LABEL_43;
      }
LABEL_74:
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v19, v20);
      goto LABEL_75;
    }
    if ((HALB_Info::IsIOContextProperty((HALB_Info *)inAddress->mSelector, 0) & 1) != 0
      && (*(unsigned int (**)(unsigned int *))(*(void *)v15 + 832))(v15))
    {
      InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID((HALS_Device *)v15);
      uint64_t v24 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
      size_t v25 = (HALS_ObjectMap *)v24;
      if (!v24)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v41.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v41.__r_.__value_.__r.__words + 4) = (std::string::size_type)"HALS_Framework-ios-imp.cpp";
          WORD2(v41.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v41.__r_.__value_.__r.__words[1] + 6) = 1225;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectSetPropertyData: no IO Context with given description", (uint8_t *)&v41, 0x12u);
        }
        uint64_t v33 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v33 = off_1F148A5D8;
        v33[2] = 2003332927;
      }
      if ((*(unsigned int (**)(uint64_t, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v24 + 88))(v24, InternalIOContextID, inAddress, 0))
      {
        if ((*(unsigned int (**)(HALS_ObjectMap *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v25 + 96))(v25, InternalIOContextID, inAddress, 0))
        {
          (*(void (**)(HALS_ObjectMap *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *, void))(*(void *)v25 + 120))(v25, InternalIOContextID, inAddress, v7, inData, v9, inQualifierData, 0);
          OSStatus v12 = 0;
        }
        else
        {
          OSStatus v12 = 1852797029;
        }
      }
      HALS_ObjectMap::ReleaseObject(v25, v26);
      goto LABEL_75;
    }
    if ((*(unsigned int (**)(unsigned int *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v15 + 88))(v15, v11, inAddress, 0))
    {
      if ((*(unsigned int (**)(unsigned int *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v15 + 96))(v15, v11, inAddress, 0))
      {
        (*(void (**)(unsigned int *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *, void))(*(void *)v15 + 120))(v15, v11, inAddress, v7, inData, v9, inQualifierData, 0);
LABEL_42:
        OSStatus v12 = 0;
        goto LABEL_75;
      }
      goto LABEL_44;
    }
    goto LABEL_75;
  }
  return 560033144;
}

void sub_1BAC57398(_Unwind_Exception *exception_object, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a2)
  {
    if (a51 < 0) {
      operator delete(__p);
    }
    if (a45 < 0) {
      operator delete(a40);
    }
    if (a38 < 0) {
      operator delete(a33);
    }
    if (a27 < 0) {
      operator delete(a22);
    }
    if (a16 < 0) {
      operator delete(a11);
    }
    HALS_ObjectMap::ReleaseObject(v52, a2);
    HALS_ObjectMap::ReleaseObject(v51, v54);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAC57128);
  }
  _Unwind_Resume(exception_object);
}

OSStatus AudioObjectAddPropertyListenerBlock(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, dispatch_queue_t inDispatchQueue, AudioObjectPropertyListenerBlock inListener)
{
  uint64_t v7 = *(HALS_ObjectMap **)&inObjectID;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  HALS_System::StartServer(&v17, 0);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (!inAddress)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    int v20 = "HALS_Framework-ios-imp.cpp";
    __int16 v21 = 1024;
    int v22 = 1344;
    OSStatus v12 = MEMORY[0x1E4F14500];
    int v13 = "%25s:%-5d  AudioObjectAddPropertyListenerBlock: can't add a listener proc without an address";
    goto LABEL_16;
  }
  if (!inListener)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    int v20 = "HALS_Framework-ios-imp.cpp";
    __int16 v21 = 1024;
    int v22 = 1345;
    OSStatus v12 = MEMORY[0x1E4F14500];
    int v13 = "%25s:%-5d  AudioObjectAddPropertyListenerBlock: can't add a NULL listener proc";
LABEL_16:
    _os_log_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, v13, buf, 0x12u);
LABEL_17:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  int v8 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v7);
  if (!v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      int v20 = "HALS_Framework-ios-imp.cpp";
      __int16 v21 = 1024;
      int v22 = 1349;
      __int16 v23 = 1024;
      int v24 = (int)v7;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectAddPropertyListenerBlock: no object with given ID %u", buf, 0x18u);
    }
    int v15 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v15 = off_1F148A5D8;
    uint64_t v15[2] = 560947818;
  }
  HALS_Listener::HALS_Listener(v16, inDispatchQueue, inListener);
  buf[0] = 0;
  char v25 = 0;
  HALS_NotificationManager::AddPropertyListener((uint64_t)v16, v7, (char *)inAddress, (uint64_t)buf);
  if (v25) {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)buf);
  }
  HALS_Listener::~HALS_Listener((HALS_Listener *)v16);
  HALS_ObjectMap::ReleaseObject(v8, v9);
  return 0;
}

void sub_1BAC577B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

OSStatus AudioObjectRemovePropertyListenerBlock(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, dispatch_queue_t inDispatchQueue, AudioObjectPropertyListenerBlock inListener)
{
  uint64_t v7 = *(HALS_ObjectMap **)&inObjectID;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  HALS_System::StartServer(&v18, 0);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (!inAddress)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    __int16 v21 = "HALS_Framework-ios-imp.cpp";
    __int16 v22 = 1024;
    int v23 = 1395;
    int v14 = MEMORY[0x1E4F14500];
    int v15 = "%25s:%-5d  AudioObjectRemovePropertyListenerBlock: can't remove a listener proc without an address";
    goto LABEL_14;
  }
  if (!inListener)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    __int16 v21 = "HALS_Framework-ios-imp.cpp";
    __int16 v22 = 1024;
    int v23 = 1396;
    int v14 = MEMORY[0x1E4F14500];
    int v15 = "%25s:%-5d  AudioObjectRemovePropertyListenerBlock: can't remove a NULL listener proc";
LABEL_14:
    _os_log_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, v15, buf, 0x12u);
LABEL_15:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  int v8 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v7);
  if (!v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int16 v21 = "HALS_Framework-ios-imp.cpp";
      __int16 v22 = 1024;
      int v23 = 1400;
      __int16 v24 = 1024;
      int v25 = (int)v7;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectRemovePropertyListenerBlock: no object with given ID %u", buf, 0x18u);
    }
    uint64_t v17 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v17 = off_1F148A5D8;
    v17[2] = 560947818;
  }
  HALS_Listener::HALS_Listener(buf, inDispatchQueue, inListener);
  HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)buf, v7, inAddress, v9, v10);
  HALS_Listener::~HALS_Listener((HALS_Listener *)buf);
  HALS_ObjectMap::ReleaseObject(v8, v11);
  return 0;
}

void sub_1BAC57B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

OSStatus AudioObjectAddPropertyListener(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, AudioObjectPropertyListenerProc inListener, void *inClientData)
{
  uint64_t v7 = *(HALS_ObjectMap **)&inObjectID;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  HALS_System::StartServer(&v22, 0);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (!inAddress)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    int v25 = "HALS_Framework-ios-imp.cpp";
    __int16 v26 = 1024;
    int v27 = 1451;
    OSStatus v12 = MEMORY[0x1E4F14500];
    int v13 = "%25s:%-5d  AudioObjectAddPropertyListener: can't add a listener proc without an address";
    goto LABEL_16;
  }
  if (!inListener)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    int v25 = "HALS_Framework-ios-imp.cpp";
    __int16 v26 = 1024;
    int v27 = 1452;
    OSStatus v12 = MEMORY[0x1E4F14500];
    int v13 = "%25s:%-5d  AudioObjectAddPropertyListener: can't add a NULL listener proc";
LABEL_16:
    _os_log_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, v13, buf, 0x12u);
LABEL_17:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  int v8 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v7);
  if (!v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      int v25 = "HALS_Framework-ios-imp.cpp";
      __int16 v26 = 1024;
      int v27 = 1456;
      __int16 v28 = 1024;
      int v29 = (int)v7;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectAddPropertyListener: no object with given ID %u", buf, 0x18u);
    }
    int v15 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v15 = off_1F148A5D8;
    uint64_t v15[2] = 560947818;
  }
  int v16 = 3;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  int v19 = 0;
  AudioObjectPropertyListenerProc v20 = inListener;
  __int16 v21 = inClientData;
  buf[0] = 0;
  char v30 = 0;
  HALS_NotificationManager::AddPropertyListener((uint64_t)&v16, v7, (char *)inAddress, (uint64_t)buf);
  if (v30) {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)buf);
  }
  HALS_Listener::~HALS_Listener((HALS_Listener *)&v16);
  HALS_ObjectMap::ReleaseObject(v8, v9);
  return 0;
}

void sub_1BAC57E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

OSStatus AudioObjectRemovePropertyListener(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, AudioObjectPropertyListenerProc inListener, void *inClientData)
{
  uint64_t v7 = *(HALS_ObjectMap **)&inObjectID;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  HALS_System::StartServer(&v18, 0);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (!inAddress)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    __int16 v21 = "HALS_Framework-ios-imp.cpp";
    LOWORD(v22) = 1024;
    *(_DWORD *)((char *)&v22 + 2) = 1552;
    int v14 = MEMORY[0x1E4F14500];
    int v15 = "%25s:%-5d  AudioObjectRemovePropertyListener: can't remove a listener proc without an address";
    goto LABEL_14;
  }
  if (!inListener)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    __int16 v21 = "HALS_Framework-ios-imp.cpp";
    LOWORD(v22) = 1024;
    *(_DWORD *)((char *)&v22 + 2) = 1553;
    int v14 = MEMORY[0x1E4F14500];
    int v15 = "%25s:%-5d  AudioObjectRemovePropertyListener: can't remove a NULL listener proc";
LABEL_14:
    _os_log_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, v15, buf, 0x12u);
LABEL_15:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  int v10 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v7);
  if (!v10)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int16 v21 = "HALS_Framework-ios-imp.cpp";
      uint64_t v22 = 0x400000006150400;
      int v23 = (int)v7;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectRemovePropertyListener: no object with given ID %u", buf, 0x18u);
    }
    uint64_t v17 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v17 = off_1F148A5D8;
    v17[2] = 560947818;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = 3;
  uint64_t v22 = 0;
  __int16 v21 = 0;
  int v23 = 0;
  AudioObjectPropertyListenerProc v24 = inListener;
  int v25 = inClientData;
  HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)buf, v7, inAddress, v8, v9);
  HALS_Listener::~HALS_Listener((HALS_Listener *)buf);
  HALS_ObjectMap::ReleaseObject(v10, v11);
  return 0;
}

void sub_1BAC581F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

OSStatus AudioHardwareUnload(void)
{
  if (AllowHALClientsInThisProcess()) {
    return 0;
  }
  else {
    return 560033144;
  }
}

OSStatus AudioHardwareCreateAggregateDevice(CFDictionaryRef inDescription, AudioObjectID *outDeviceID)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (AllowHALClientsInThisProcess())
  {
    HALS_System::StartServer(&v8, 0);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (inDescription)
    {
      if (outDeviceID) {
        HALS_MetaManager::CreateDevice((HALS_MetaManager *)HALS_MetaManager::sInstance, inDescription, 0);
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
LABEL_13:
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = off_1F148A5D8;
        exception[2] = 1852797029;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      OSStatus v11 = "HALS_Framework-ios-imp.cpp";
      __int16 v12 = 1024;
      int v13 = 1634;
      uint64_t v5 = MEMORY[0x1E4F14500];
      int v6 = "%25s:%-5d  AudioHardwareCreateAggregateDevice: nowhere to put the return value";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_13;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      OSStatus v11 = "HALS_Framework-ios-imp.cpp";
      __int16 v12 = 1024;
      int v13 = 1633;
      uint64_t v5 = MEMORY[0x1E4F14500];
      int v6 = "%25s:%-5d  AudioHardwareCreateAggregateDevice: can't create an Agggregate Device with a NULL description";
    }
    _os_log_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, v6, buf, 0x12u);
    goto LABEL_13;
  }
  return 560033144;
}

void sub_1BAC5846C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      if (v2) {
        _DWORD *v2 = 0;
      }
    }
    else if (v2)
    {
      _DWORD *v2 = 0;
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAC58330);
  }
  _Unwind_Resume(a1);
}

OSStatus AudioHardwareDestroyAggregateDevice(AudioObjectID inDeviceID)
{
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  HALS_System::StartServer(&v4, 0);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  HALS_MetaManager::DestroyDevice((HALS_System **)HALS_MetaManager::sInstance, inDeviceID);
  return 0;
}

void sub_1BAC58528(void *a1)
{
}

OSStatus AudioDeviceCreateIOProcID(AudioObjectID inDevice, AudioDeviceIOProc inProc, void *inClientData, AudioDeviceIOProcID *outIOProcID)
{
  uint64_t v7 = *(HALS_ObjectMap **)&inDevice;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (AllowHALClientsInThisProcess())
  {
    if (inProc)
    {
      if (outIOProcID)
      {
        uint64_t v8 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v7);
        int v10 = v8;
        if (v8)
        {
          int v12 = *((_DWORD *)v8 + 5);
          int v11 = *((_DWORD *)v8 + 6);
          if (v12 <= 1701078389)
          {
            if (v12 == 1633773415)
            {
LABEL_13:
              *outIOProcID = (AudioDeviceIOProcID)(*(uint64_t (**)(HALS_ObjectMap *, AudioDeviceIOProc, void *))(*(void *)v8 + 840))(v8, inProc, inClientData);
              HALS_ObjectMap::ReleaseObject(v10, v15);
              return 0;
            }
            int v13 = 1633969526;
          }
          else
          {
            if (v12 == 1701078390 || v12 == 1701733488) {
              goto LABEL_13;
            }
            int v13 = 1919182198;
          }
          if (v12 == v13) {
            goto LABEL_13;
          }
          if (v12 != v11)
          {
            if (v11 <= 1701078389)
            {
              if (v11 == 1633773415) {
                goto LABEL_13;
              }
              int v17 = 1633969526;
            }
            else
            {
              if (v11 == 1701078390 || v11 == 1701733488) {
                goto LABEL_13;
              }
              int v17 = 1919182198;
            }
            if (v11 == v17) {
              goto LABEL_13;
            }
          }
          HALS_ObjectMap::ReleaseObject(v8, v9);
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          int v22 = 136315394;
          int v23 = "HALS_Framework-ios-imp.cpp";
          __int16 v24 = 1024;
          int v25 = 1733;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceCreateIOProcID: no device with given ID", (uint8_t *)&v22, 0x12u);
        }
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = off_1F148A5D8;
        exception[2] = 560947818;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
LABEL_32:
        __int16 v21 = __cxa_allocate_exception(0x10uLL);
        *(void *)__int16 v21 = off_1F148A5D8;
        v21[2] = 1852797029;
      }
      int v22 = 136315394;
      int v23 = "HALS_Framework-ios-imp.cpp";
      __int16 v24 = 1024;
      int v25 = 1729;
      int v19 = MEMORY[0x1E4F14500];
      AudioObjectPropertyListenerProc v20 = "%25s:%-5d  AudioDeviceCreateIOProcID: nowhere to put the return value";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_32;
      }
      int v22 = 136315394;
      int v23 = "HALS_Framework-ios-imp.cpp";
      __int16 v24 = 1024;
      int v25 = 1728;
      int v19 = MEMORY[0x1E4F14500];
      AudioObjectPropertyListenerProc v20 = "%25s:%-5d  AudioDeviceCreateIOProcID: can't create an AudioDeviceIOProcID for a NULL IOProc";
    }
    _os_log_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&v22, 0x12u);
    goto LABEL_32;
  }
  return 560033144;
}

void sub_1BAC588C0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAC588D8(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAC588C8);
  }
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (!v2) {
      goto LABEL_7;
    }
  }
  else if (!v2)
  {
LABEL_7:
    __cxa_end_catch();
    JUMPOUT(0x1BAC5865CLL);
  }
  void *v2 = 0;
  goto LABEL_7;
}

void sub_1BAC58944()
{
}

OSStatus AudioDeviceCreateIOProcIDWithBlock(AudioDeviceIOProcID *outIOProcID, AudioObjectID inDevice, dispatch_queue_t inDispatchQueue, AudioDeviceIOBlock inIOBlock)
{
  int v6 = *(HALS_ObjectMap **)&inDevice;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (AllowHALClientsInThisProcess())
  {
    if (inIOBlock)
    {
      if (outIOProcID)
      {
        uint64_t v8 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v6);
        int v10 = v8;
        if (v8)
        {
          int v12 = *((_DWORD *)v8 + 5);
          int v11 = *((_DWORD *)v8 + 6);
          if (v12 <= 1701078389)
          {
            if (v12 == 1633773415)
            {
LABEL_13:
              *outIOProcID = (AudioDeviceIOProcID)(*(uint64_t (**)(HALS_ObjectMap *, dispatch_queue_t, AudioDeviceIOBlock))(*(void *)v8 + 848))(v8, inDispatchQueue, inIOBlock);
              HALS_ObjectMap::ReleaseObject(v10, v15);
              return 0;
            }
            int v13 = 1633969526;
          }
          else
          {
            if (v12 == 1701078390 || v12 == 1701733488) {
              goto LABEL_13;
            }
            int v13 = 1919182198;
          }
          if (v12 == v13) {
            goto LABEL_13;
          }
          if (v12 != v11)
          {
            if (v11 <= 1701078389)
            {
              if (v11 == 1633773415) {
                goto LABEL_13;
              }
              int v17 = 1633969526;
            }
            else
            {
              if (v11 == 1701078390 || v11 == 1701733488) {
                goto LABEL_13;
              }
              int v17 = 1919182198;
            }
            if (v11 == v17) {
              goto LABEL_13;
            }
          }
          HALS_ObjectMap::ReleaseObject(v8, v9);
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          int v22 = 136315394;
          int v23 = "HALS_Framework-ios-imp.cpp";
          __int16 v24 = 1024;
          int v25 = 1793;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceCreateIOProcIDWithBlock: no device with given ID", (uint8_t *)&v22, 0x12u);
        }
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = off_1F148A5D8;
        exception[2] = 560947818;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
LABEL_32:
        __int16 v21 = __cxa_allocate_exception(0x10uLL);
        *(void *)__int16 v21 = off_1F148A5D8;
        v21[2] = 1852797029;
      }
      int v22 = 136315394;
      int v23 = "HALS_Framework-ios-imp.cpp";
      __int16 v24 = 1024;
      int v25 = 1789;
      int v19 = MEMORY[0x1E4F14500];
      AudioObjectPropertyListenerProc v20 = "%25s:%-5d  AudioDeviceCreateIOProcIDWithBlock: nowhere to put the return value";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_32;
      }
      int v22 = 136315394;
      int v23 = "HALS_Framework-ios-imp.cpp";
      __int16 v24 = 1024;
      int v25 = 1788;
      int v19 = MEMORY[0x1E4F14500];
      AudioObjectPropertyListenerProc v20 = "%25s:%-5d  AudioDeviceCreateIOProcIDWithBlock: can't create an AudioDeviceIOProcID for a NULL IOBlock";
    }
    _os_log_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&v22, 0x12u);
    goto LABEL_32;
  }
  return 560033144;
}

void sub_1BAC58CBC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAC58CD4(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAC58CC4);
  }
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (!v2) {
      goto LABEL_7;
    }
  }
  else if (!v2)
  {
LABEL_7:
    __cxa_end_catch();
    JUMPOUT(0x1BAC58A58);
  }
  void *v2 = 0;
  goto LABEL_7;
}

void sub_1BAC58D40()
{
}

OSStatus AudioDeviceDestroyIOProcID(AudioObjectID inDevice, AudioDeviceIOProcID inIOProcID)
{
  os_log_type_t v3 = *(HALS_ObjectMap **)&inDevice;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (AllowHALClientsInThisProcess())
  {
    uint64_t v4 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v3);
    int v6 = v4;
    if (v4)
    {
      int v8 = *((_DWORD *)v4 + 5);
      int v7 = *((_DWORD *)v4 + 6);
      if (v8 <= 1701078389)
      {
        if (v8 == 1633773415)
        {
LABEL_11:
          (*(void (**)(HALS_ObjectMap *, AudioDeviceIOProcID))(*(void *)v4 + 856))(v4, inIOProcID);
          HALS_ObjectMap::ReleaseObject(v6, v11);
          return 0;
        }
        int v9 = 1633969526;
      }
      else
      {
        if (v8 == 1701078390 || v8 == 1701733488) {
          goto LABEL_11;
        }
        int v9 = 1919182198;
      }
      if (v8 == v9) {
        goto LABEL_11;
      }
      if (v8 != v7)
      {
        if (v7 <= 1701078389)
        {
          if (v7 == 1633773415) {
            goto LABEL_11;
          }
          int v13 = 1633969526;
        }
        else
        {
          if (v7 == 1701078390 || v7 == 1701733488) {
            goto LABEL_11;
          }
          int v13 = 1919182198;
        }
        if (v7 == v13) {
          goto LABEL_11;
        }
      }
      HALS_ObjectMap::ReleaseObject(v4, v5);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      int v16 = "HALS_Framework-ios-imp.cpp";
      __int16 v17 = 1024;
      int v18 = 1969;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceDestroyIOProcID: no device with given ID", (uint8_t *)&v15, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 560947818;
  }
  return 560033144;
}

void sub_1BAC58F94(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAC58FAC(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAC58E3CLL);
  }
  JUMPOUT(0x1BAC58F9CLL);
}

void sub_1BAC58FFC()
{
}

OSStatus AudioDeviceStart(AudioObjectID inDevice, AudioDeviceIOProcID inProcID)
{
  os_log_type_t v3 = *(HALS_ObjectMap **)&inDevice;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (AllowHALClientsInThisProcess())
  {
    uint64_t v4 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v3);
    int v6 = v4;
    if (v4)
    {
      int v8 = *((_DWORD *)v4 + 5);
      int v7 = *((_DWORD *)v4 + 6);
      if (v8 <= 1701078389)
      {
        if (v8 == 1633773415)
        {
LABEL_11:
          (*(void (**)(HALS_ObjectMap *, AudioDeviceIOProcID))(*(void *)v4 + 880))(v4, inProcID);
          HALS_ObjectMap::ReleaseObject(v6, v11);
          return 0;
        }
        int v9 = 1633969526;
      }
      else
      {
        if (v8 == 1701078390 || v8 == 1701733488) {
          goto LABEL_11;
        }
        int v9 = 1919182198;
      }
      if (v8 == v9) {
        goto LABEL_11;
      }
      if (v8 != v7)
      {
        if (v7 <= 1701078389)
        {
          if (v7 == 1633773415) {
            goto LABEL_11;
          }
          int v13 = 1633969526;
        }
        else
        {
          if (v7 == 1701078390 || v7 == 1701733488) {
            goto LABEL_11;
          }
          int v13 = 1919182198;
        }
        if (v7 == v13) {
          goto LABEL_11;
        }
      }
      HALS_ObjectMap::ReleaseObject(v4, v5);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      int v16 = "HALS_Framework-ios-imp.cpp";
      __int16 v17 = 1024;
      int v18 = 2018;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceStart: no device with given ID", (uint8_t *)&v15, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 560947818;
  }
  return 560033144;
}

void sub_1BAC59250(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAC59268(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAC590F8);
  }
  JUMPOUT(0x1BAC59258);
}

void sub_1BAC592B8()
{
}

OSStatus AudioDeviceStartAtTime(AudioObjectID inDevice, AudioDeviceIOProcID inProcID, AudioTimeStamp *ioRequestedStartTime, UInt32 inFlags)
{
  uint64_t v4 = *(void *)&inFlags;
  int v7 = *(HALS_ObjectMap **)&inDevice;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  if (ioRequestedStartTime)
  {
    int v8 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v7);
    int v10 = v8;
    if (v8)
    {
      int v12 = *((_DWORD *)v8 + 5);
      int v11 = *((_DWORD *)v8 + 6);
      if (v12 <= 1701078389)
      {
        if (v12 == 1633773415)
        {
LABEL_13:
          (*(void (**)(HALS_ObjectMap *, AudioDeviceIOProcID, AudioTimeStamp *, uint64_t))(*(void *)v8 + 888))(v8, inProcID, ioRequestedStartTime, v4);
          HALS_ObjectMap::ReleaseObject(v10, v15);
          return 0;
        }
        int v13 = 1633969526;
      }
      else
      {
        if (v12 == 1701078390 || v12 == 1701733488) {
          goto LABEL_13;
        }
        int v13 = 1919182198;
      }
      if (v12 == v13) {
        goto LABEL_13;
      }
      if (v12 != v11)
      {
        if (v11 <= 1701078389)
        {
          if (v11 == 1633773415) {
            goto LABEL_13;
          }
          int v17 = 1633969526;
        }
        else
        {
          if (v11 == 1701078390 || v11 == 1701733488) {
            goto LABEL_13;
          }
          int v17 = 1919182198;
        }
        if (v11 == v17) {
          goto LABEL_13;
        }
      }
      HALS_ObjectMap::ReleaseObject(v8, v9);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315394;
      AudioObjectPropertyListenerProc v20 = "HALS_Framework-ios-imp.cpp";
      __int16 v21 = 1024;
      int v22 = 2078;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceStartAtTime: no device with given ID", (uint8_t *)&v19, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 560947818;
  }
  return AudioDeviceStart((AudioObjectID)v7, inProcID);
}

void sub_1BAC59534(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAC593DCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BAC595AC()
{
}

OSStatus AudioDeviceGetCurrentTime(AudioObjectID inDevice, AudioTimeStamp *outTime)
{
  os_log_type_t v3 = *(HALS_ObjectMap **)&inDevice;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (AllowHALClientsInThisProcess())
  {
    if (!outTime)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v16 = 136315394;
        int v17 = "HALS_Framework-ios-imp.cpp";
        __int16 v18 = 1024;
        int v19 = 2175;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceGetCurrentTime: time stamp can't be NULL", (uint8_t *)&v16, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    uint64_t v4 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v3);
    int v6 = v4;
    if (v4)
    {
      int v8 = *((_DWORD *)v4 + 5);
      int v7 = *((_DWORD *)v4 + 6);
      if (v8 <= 1701078389)
      {
        if (v8 == 1633773415)
        {
LABEL_12:
          (*(void (**)(HALS_ObjectMap *, AudioTimeStamp *))(*(void *)v4 + 904))(v4, outTime);
          HALS_ObjectMap::ReleaseObject(v6, v11);
          return 0;
        }
        int v9 = 1633969526;
      }
      else
      {
        if (v8 == 1701078390 || v8 == 1701733488) {
          goto LABEL_12;
        }
        int v9 = 1919182198;
      }
      if (v8 == v9) {
        goto LABEL_12;
      }
      if (v8 != v7)
      {
        if (v7 <= 1701078389)
        {
          if (v7 == 1633773415) {
            goto LABEL_12;
          }
          int v13 = 1633969526;
        }
        else
        {
          if (v7 == 1701078390 || v7 == 1701733488) {
            goto LABEL_12;
          }
          int v13 = 1919182198;
        }
        if (v7 == v13) {
          goto LABEL_12;
        }
      }
      HALS_ObjectMap::ReleaseObject(v4, v5);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      int v17 = "HALS_Framework-ios-imp.cpp";
      __int16 v18 = 1024;
      int v19 = 2179;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceGetCurrentTime: no device with given ID", (uint8_t *)&v16, 0x12u);
    }
    uint64_t v14 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v14 = off_1F148A5D8;
    void v14[2] = 560947818;
  }
  return 560033144;
}

void sub_1BAC598B8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAC598D0(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAC598C0);
  }
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (!v2) {
      goto LABEL_7;
    }
  }
  else if (!v2)
  {
LABEL_7:
    __cxa_end_catch();
    JUMPOUT(0x1BAC596ACLL);
  }
  v2[2] = 0u;
  v2[3] = 0u;
  _OWORD *v2 = 0u;
  v2[1] = 0u;
  goto LABEL_7;
}

void sub_1BAC59944()
{
}

OSStatus AudioDeviceTranslateTime(AudioObjectID inDevice, const AudioTimeStamp *inTime, AudioTimeStamp *outTime)
{
  uint64_t v5 = *(HALS_ObjectMap **)&inDevice;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (AllowHALClientsInThisProcess())
  {
    if (inTime)
    {
      if (outTime)
      {
        int v6 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v5);
        int v8 = v6;
        if (v6)
        {
          int v10 = *((_DWORD *)v6 + 5);
          int v9 = *((_DWORD *)v6 + 6);
          if (v10 <= 1701078389)
          {
            if (v10 == 1633773415)
            {
LABEL_13:
              (*(void (**)(HALS_ObjectMap *, const AudioTimeStamp *, AudioTimeStamp *))(*(void *)v6 + 912))(v6, inTime, outTime);
              HALS_ObjectMap::ReleaseObject(v8, v13);
              return 0;
            }
            int v11 = 1633969526;
          }
          else
          {
            if (v10 == 1701078390 || v10 == 1701733488) {
              goto LABEL_13;
            }
            int v11 = 1919182198;
          }
          if (v10 == v11) {
            goto LABEL_13;
          }
          if (v10 != v9)
          {
            if (v9 <= 1701078389)
            {
              if (v9 == 1633773415) {
                goto LABEL_13;
              }
              int v15 = 1633969526;
            }
            else
            {
              if (v9 == 1701078390 || v9 == 1701733488) {
                goto LABEL_13;
              }
              int v15 = 1919182198;
            }
            if (v9 == v15) {
              goto LABEL_13;
            }
          }
          HALS_ObjectMap::ReleaseObject(v6, v7);
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          int v20 = 136315394;
          __int16 v21 = "HALS_Framework-ios-imp.cpp";
          __int16 v22 = 1024;
          int v23 = 2253;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceTranslateTime: no device with given ID", (uint8_t *)&v20, 0x12u);
        }
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = off_1F148A5D8;
        exception[2] = 560947818;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
LABEL_32:
        int v19 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v19 = off_1F148A5D8;
        v19[2] = 1852797029;
      }
      int v20 = 136315394;
      __int16 v21 = "HALS_Framework-ios-imp.cpp";
      __int16 v22 = 1024;
      int v23 = 2249;
      int v17 = MEMORY[0x1E4F14500];
      __int16 v18 = "%25s:%-5d  AudioDeviceTranslateTime: output time stamp can't be NULL";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_32;
      }
      int v20 = 136315394;
      __int16 v21 = "HALS_Framework-ios-imp.cpp";
      __int16 v22 = 1024;
      int v23 = 2248;
      int v17 = MEMORY[0x1E4F14500];
      __int16 v18 = "%25s:%-5d  AudioDeviceTranslateTime: input time stamp can't be NULL";
    }
    _os_log_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&v20, 0x12u);
    goto LABEL_32;
  }
  return 560033144;
}

void sub_1BAC59CB4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAC59CCC(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAC59CBCLL);
  }
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (!v2) {
      goto LABEL_7;
    }
  }
  else if (!v2)
  {
LABEL_7:
    __cxa_end_catch();
    JUMPOUT(0x1BAC59A50);
  }
  v2[2] = 0u;
  v2[3] = 0u;
  _OWORD *v2 = 0u;
  v2[1] = 0u;
  goto LABEL_7;
}

void sub_1BAC59D40()
{
}

OSStatus AudioDeviceGetNearestStartTime(AudioObjectID inDevice, AudioTimeStamp *ioRequestedStartTime, UInt32 inFlags)
{
  uint64_t v3 = *(void *)&inFlags;
  uint64_t v5 = *(HALS_ObjectMap **)&inDevice;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (AllowHALClientsInThisProcess())
  {
    if (!ioRequestedStartTime)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v18 = 136315394;
        int v19 = "HALS_Framework-ios-imp.cpp";
        __int16 v20 = 1024;
        int v21 = 2323;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceGetNearestStartTime: time stamp can't be NULL", (uint8_t *)&v18, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    int v6 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v5);
    int v8 = v6;
    if (v6)
    {
      int v10 = *((_DWORD *)v6 + 5);
      int v9 = *((_DWORD *)v6 + 6);
      if (v10 <= 1701078389)
      {
        if (v10 == 1633773415)
        {
LABEL_12:
          (*(void (**)(HALS_ObjectMap *, AudioTimeStamp *, uint64_t))(*(void *)v6 + 920))(v6, ioRequestedStartTime, v3);
          HALS_ObjectMap::ReleaseObject(v8, v13);
          return 0;
        }
        int v11 = 1633969526;
      }
      else
      {
        if (v10 == 1701078390 || v10 == 1701733488) {
          goto LABEL_12;
        }
        int v11 = 1919182198;
      }
      if (v10 == v11) {
        goto LABEL_12;
      }
      if (v10 != v9)
      {
        if (v9 <= 1701078389)
        {
          if (v9 == 1633773415) {
            goto LABEL_12;
          }
          int v15 = 1633969526;
        }
        else
        {
          if (v9 == 1701078390 || v9 == 1701733488) {
            goto LABEL_12;
          }
          int v15 = 1919182198;
        }
        if (v9 == v15) {
          goto LABEL_12;
        }
      }
      HALS_ObjectMap::ReleaseObject(v6, v7);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      int v19 = "HALS_Framework-ios-imp.cpp";
      __int16 v20 = 1024;
      int v21 = 2327;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceGetNearestStartTime: no device with given ID", (uint8_t *)&v18, 0x12u);
    }
    int v16 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v16 = off_1F148A5D8;
    v16[2] = 560947818;
  }
  return 560033144;
}

void sub_1BAC5A054(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAC5A06C(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAC5A05CLL);
  }
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (!v2) {
      goto LABEL_7;
    }
  }
  else if (!v2)
  {
LABEL_7:
    __cxa_end_catch();
    JUMPOUT(0x1BAC59E48);
  }
  v2[2] = 0u;
  v2[3] = 0u;
  _OWORD *v2 = 0u;
  v2[1] = 0u;
  goto LABEL_7;
}

void sub_1BAC5A0E0()
{
}

uint64_t AudioHardwareCreateProcessTap()
{
  return 2003329396;
}

uint64_t AudioHardwareDestroyProcessTap()
{
  return 2003329396;
}

uint64_t AudioDriverPlugInOpen()
{
  return 1970171760;
}

uint64_t AudioDriverPlugInClose()
{
  return 1970171760;
}

uint64_t AudioDriverPlugInDeviceGetPropertyInfo()
{
  return 1970171760;
}

uint64_t AudioDriverPlugInDeviceGetProperty()
{
  return 1970171760;
}

uint64_t AudioDriverPlugInDeviceSetProperty()
{
  return 1970171760;
}

uint64_t AudioDriverPlugInStreamGetPropertyInfo()
{
  return 1970171760;
}

uint64_t AudioDriverPlugInStreamGetProperty()
{
  return 1970171760;
}

uint64_t AudioDriverPlugInStreamSetProperty()
{
  return 1970171760;
}

const char *CAException::what(CAException *this)
{
  return "CAException";
}

_DWORD *HALS_Device_HostedDSP::RationalizeDSPOffloadsForClient(HALS_Device_HostedDSP *this, HALS_Device_HostedDSP *a2, HALS_Client *a3, uint64_t a4)
{
  char v5 = (char)a3;
  CFDictionaryRef v19 = 0;
  __int16 v20 = (char *)a2 + 40;
  int v24 = 0;
  BOOL OffloadsAvailableForDevice = 0;
  CFDictionaryRef v17 = 0;
  int v18 = 0;
  int v21 = *(_DWORD *)(*(void *)a2 + 16);
  if (a4) {
    int v8 = *(_DWORD *)(a4 + 16);
  }
  else {
    int v8 = 0;
  }
  int v22 = v8;
  BOOL OffloadsAvailableForDevice = HALS_Device_HostedDSP::GetOffloadsAvailableForDevice(a2, a3, &v17);
  if ((v5 & 1) == 0) {
    goto LABEL_39;
  }
  if (!HALS_Device::GetNumberStreamsExcludingReferenceStreams(*(HALS_Device **)a2, 1))
  {
    int v24 = 2;
LABEL_39:
    *(void *)this = 0;
    goto LABEL_40;
  }
  uint64_t v14 = 0;
  int v15 = 0;
  CFDictionaryRef theDict = 0;
  DSP_Host_OffloadDictionary::make_empty((DSP_Host_OffloadDictionary *)&v14);
  if ((*(unsigned int (**)(void, void, const char *, void))(**(void **)a2 + 88))(*(void *)a2, *(unsigned int *)(*(void *)a2 + 16), "rOsdtpni", 0))
  {
    LODWORD(v25[0]) = 8;
    CFStringRef v26 = 0;
    (*(void (**)(void, void, const char *, uint64_t, CFDictionaryRef *, const __CFString **, void, void, void))(**(void **)a2 + 112))(*(void *)a2, *(unsigned int *)(*(void *)a2 + 16), "rOsdtpni", 8, v25, &v26, 0, 0, 0);
    if (v26)
    {
      DSP_Host_OffloadDictionary::deep_copy_from((DSP_Host_OffloadDictionary *)&v14, v26);
      CFRelease(v26);
    }
    if (theDict) {
      CFDictionaryGetCount(theDict);
    }
  }
  uint64_t v11 = 0;
  int v12 = 0;
  CFDictionaryRef v13 = 0;
  DSP_Host_OffloadDictionary::make_empty((DSP_Host_OffloadDictionary *)&v11);
  if ((*(unsigned int (**)(void, void, const char *, uint64_t))(**(void **)a2 + 88))(*(void *)a2, *(unsigned int *)(*(void *)a2 + 16), "bOsdtpni", a4))
  {
    LODWORD(v25[0]) = 8;
    CFStringRef v26 = 0;
    (*(void (**)(void, void, const char *, uint64_t, CFDictionaryRef *, const __CFString **, void, void, uint64_t))(**(void **)a2 + 112))(*(void *)a2, *(unsigned int *)(*(void *)a2 + 16), "bOsdtpni", 8, v25, &v26, 0, 0, a4);
    if (v26)
    {
      DSP_Host_OffloadDictionary::deep_copy_from((DSP_Host_OffloadDictionary *)&v11, v26);
      CFRelease(v26);
    }
    if (v13) {
      CFDictionaryGetCount(v13);
    }
  }
  if (theDict && CFDictionaryGetCount(theDict))
  {
    if (theDict && CFDictionaryGetCount(theDict) && !OffloadsAvailableForDevice)
    {
      int v9 = 1;
    }
    else
    {
      if (!v13 || !CFDictionaryGetCount(v13)) {
        goto LABEL_24;
      }
      int v9 = 4;
    }
  }
  else
  {
    int v9 = 3;
  }
  int v24 = v9;
LABEL_24:
  *(void *)this = 0;
  if (v19 && CFDictionaryGetCount(v19))
  {
    if (theDict
      && CFDictionaryGetCount(theDict)
      && !DSP_Host_OffloadDictionary::has_all_id((DSP_Host_OffloadDictionary *)&v14))
    {
      DSP_Host_OffloadDictionary::deep_copy((DSP_Host_OffloadDictionary *)&v26);
    }
    operator new();
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_40:
  if (v19) {
    CFRelease(v19);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  return HALS_Device_HostedDSP::RationalizeDSPOffloadsForClient(BOOL,HALS_Client *)const::LogExplanation::~LogExplanation(&v20);
}

void sub_1BAC5A94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,const void *a22,uint64_t a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  applesauce::CF::DictionaryRef::~DictionaryRef(&a22);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)(v32 - 112));
  std::string __p = (void *)(v32 - 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  void *v30 = 0;
  if (v31) {
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v31);
  }
  DSP_Host_OffloadDictionary::~DSP_Host_OffloadDictionary((DSP_Host_OffloadDictionary *)&a10);
  DSP_Host_OffloadDictionary::~DSP_Host_OffloadDictionary((DSP_Host_OffloadDictionary *)&a13);
  DSP_Host_OffloadDictionary::~DSP_Host_OffloadDictionary((DSP_Host_OffloadDictionary *)&a16);
  HALS_Device_HostedDSP::RationalizeDSPOffloadsForClient(BOOL,HALS_Client *)const::LogExplanation::~LogExplanation(&a19);
  _Unwind_Resume(a1);
}

BOOL HALS_Device_HostedDSP::GetOffloadsAvailableForDevice(HALS_Device_HostedDSP *this, int a2, const __CFDictionary **a3)
{
  DSP_Host_OffloadDictionary::make_empty((DSP_Host_OffloadDictionary *)a3);
  v33[0] = 0;
  v33[1] = 0;
  uint64_t v32 = (void (**)(void **, CFMutableDictionaryRef *))&unk_1F147EDD8;
  std::string::basic_string[abi:ne180100]<0>(&v38, "device model uid");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v34, (uint64_t)&v38);
  v34[0] = &unk_1F147F0A0;
  v35.__r_.__value_.__s.__data_[0] = 0;
  char v36 = 0;
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  int v6 = (std::string *)((char *)this + 8);
  if (*((unsigned char *)this + 32))
  {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, (long long *)((char *)this + 8));
  }
  else
  {
    v38.__r_.__value_.__s.__data_[0] = 0;
    char v39 = 0;
    CFMutableDictionaryRef Mutable = *(CFMutableDictionaryRef *)"diumbolg";
    int v41 = 0;
    if ((*(unsigned int (**)(void, void, CFMutableDictionaryRef *, void))(**(void **)this + 88))(*(void *)this, *(unsigned int *)(*(void *)this + 16), &Mutable, 0))
    {
      CFTypeRef cf = 0;
      LODWORD(v43) = 8;
      (*(void (**)(void, void, CFMutableDictionaryRef *, uint64_t, std::string::size_type *, CFTypeRef *, void, void, void))(**(void **)this + 112))(*(void *)this, *(unsigned int *)(*(void *)this + 16), &Mutable, 8, &v43, &cf, 0, 0, 0);
      CFTypeRef v7 = cf;
      if (cf)
      {
        CFRetain(cf);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v44, v7);
        if (!v44)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)&v37, v44);
        std::string v38 = v37;
        memset(&v37, 0, sizeof(v37));
        char v39 = 1;
        if (v44) {
          CFRelease(v44);
        }
        CFRelease(cf);
        std::string::size_type size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v38.__r_.__value_.__l.__size_;
        }
        if (size) {
          std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(v6, &v38);
        }
      }
    }
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, (long long *)v6);
    if (v39 && SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
  }
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(&v35, &__p);
  if (v31 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v27[0] = 0;
  v27[1] = 0;
  HALS_System::GetInstance(&cf, 0, v27);
  int v9 = cf;
  if ((AMCP::Feature_Flags::force_mock_dsp_type(0, v10) & 1) != 0
    || (AMCP::Feature_Flags::allow_adm_dsp_offloads(0, v11) & 1) != 0
    || (std::string::size_type v12 = 0, v14 = 0, g_static_start_options == 1))
  {
    std::string::size_type v12 = 0;
    uint64_t v13 = v9[188];
    if (!v13)
    {
      uint64_t v14 = 0;
      goto LABEL_71;
    }
    uint64_t v14 = 0;
    if (!a2) {
      goto LABEL_71;
    }
    uint64_t v14 = *(AudioObjectPropertyAddress **)(v13 + 32);
    int v15 = *(std::__shared_weak_count **)(v13 + 40);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v14)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      __p.__r_.__value_.__s.__data_[8] = 0;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
      v32[3]((void **)&v32, &Mutable);
      mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v44, Mutable);
      v38.__r_.__value_.__s.__data_[0] = 0;
      v38.__r_.__value_.__s.__data_[8] = 0;
      if (v44)
      {
        CFDataRef Data = CFPropertyListCreateData(0, v44, kCFPropertyListBinaryFormat_v1_0, 0, 0);
        if (Data)
        {
          applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v37, Data);
          int v17 = 1;
          v38.__r_.__value_.__s.__data_[8] = 1;
          v38.__r_.__value_.__r.__words[0] = v37.__r_.__value_.__r.__words[0];
        }
        else
        {
          int v17 = v38.__r_.__value_.__s.__data_[8];
        }
      }
      else
      {
        int v17 = 0;
      }
      if (__p.__r_.__value_.__s.__data_[8] == v17)
      {
        if (__p.__r_.__value_.__s.__data_[8])
        {
          std::string::size_type v18 = __p.__r_.__value_.__r.__words[0];
          __p.__r_.__value_.__r.__words[0] = v38.__r_.__value_.__r.__words[0];
          v38.__r_.__value_.__r.__words[0] = v18;
        }
      }
      else if (__p.__r_.__value_.__s.__data_[8])
      {
        if (__p.__r_.__value_.__r.__words[0]) {
          CFRelease(__p.__r_.__value_.__l.__data_);
        }
        __p.__r_.__value_.__s.__data_[8] = 0;
      }
      else
      {
        __p.__r_.__value_.__r.__words[0] = v38.__r_.__value_.__r.__words[0];
        v38.__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__s.__data_[8] = 1;
      }
      std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v38);
      if (v44) {
        CFRelease(v44);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (__p.__r_.__value_.__s.__data_[8])
      {
        LOBYTE(Mutable) = 0;
        LOBYTE(v41) = 0;
        CFDictionaryRef v19 = (__CFDictionary *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0]) {
          CFRetain(__p.__r_.__value_.__l.__data_);
        }
        CFMutableDictionaryRef Mutable = v19;
        LOBYTE(v41) = 1;
        if (DSP_Host_PropertySet::getHostedDSPPropertyDataType(v14, (AudioObjectPropertyAddress *)"aOsdtpni") != 7)goto LABEL_62; {
        v38.__r_.__value_.__s.__data_[0] = 0;
        }
        v38.__r_.__value_.__s.__data_[8] = 0;
        if ((_BYTE)v41)
        {
          CFMutableDictionaryRef v20 = Mutable;
          if (Mutable) {
            CFRetain(Mutable);
          }
          v38.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
          v38.__r_.__value_.__s.__data_[8] = 1;
        }
        (*(void (**)(const __CFData **__return_ptr, AudioObjectPropertyAddress *, const char *, std::string *))(*(void *)&v14->mSelector + 40))(&v42, v14, "aOsdtpni", &v38);
        std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v38);
        if (v42)
        {
          v37.__r_.__value_.__s.__data_[0] = 0;
          v37.__r_.__value_.__s.__data_[8] = 0;
          CFPropertyListRef v21 = CFPropertyListCreateWithData(0, v42, 0, 0, 0);
          mcp_applesauce::CF::PropertyListRef::PropertyListRef((mcp_applesauce::CF::PropertyListRef *)&v44, v21);
          CFStringRef v22 = v44;
          CFStringRef v44 = 0;
          applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v43, v22);
          v37.__r_.__value_.__s.__data_[8] = 1;
          v37.__r_.__value_.__r.__words[0] = v43;
          if (v44) {
            CFRelease(v44);
          }
          if (v42) {
            CFRelease(v42);
          }
        }
        else
        {
LABEL_62:
          v37.__r_.__value_.__s.__data_[0] = 0;
          v37.__r_.__value_.__s.__data_[8] = 0;
        }
        std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&Mutable);
        std::string::size_type v12 = 0;
        if (v37.__r_.__value_.__s.__data_[8])
        {
          uint64_t v14 = 0;
          if (v37.__r_.__value_.__r.__words[0])
          {
            _ZNSt3__115allocate_sharedB8ne180100I26DSP_Host_OffloadDictionaryNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v38);
            uint64_t v14 = (AudioObjectPropertyAddress *)v38.__r_.__value_.__l.__size_;
            std::string::size_type v12 = v38.__r_.__value_.__r.__words[0];
            DSP_Host_OffloadDictionary::deep_copy_from((DSP_Host_OffloadDictionary *)v38.__r_.__value_.__l.__data_, (const __CFString *)v37.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          uint64_t v14 = 0;
        }
        std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v37);
      }
      else
      {
        std::string::size_type v12 = 0;
        uint64_t v14 = 0;
      }
      std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
      if (v15) {
        goto LABEL_70;
      }
    }
    else
    {
      std::string::size_type v12 = 0;
      if (v15) {
LABEL_70:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
LABEL_71:
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (v12) {
    DSP_Host_OffloadDictionary::deep_copy_from((DSP_Host_OffloadDictionary *)a3, *(const __CFString **)(v12 + 16));
  }
  else {
    DSP_Host_OffloadDictionary::make_empty((DSP_Host_OffloadDictionary *)a3);
  }
  CFDictionaryRef v23 = a3[2];
  if (v23 && CFDictionaryGetCount(v23))
  {
    BOOL v24 = !DSP_Host_OffloadDictionary::has_all_id((DSP_Host_OffloadDictionary *)a3);
    if (!v14) {
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  BOOL v24 = 0;
  if (v14) {
LABEL_81:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v14);
LABEL_82:
  uint64_t v32 = (void (**)(void **, CFMutableDictionaryRef *))&unk_1F147EDD8;
  v34[0] = &unk_1F147F0A0;
  if (v36 && SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)v34);
  uint64_t v32 = (void (**)(void **, CFMutableDictionaryRef *))&unk_1F147F2C0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v33);
  return v24;
}

void sub_1BAC5B1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  mcp_applesauce::CF::PropertyListRef::~PropertyListRef((const void **)(v29 - 88));
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a28);
  applesauce::CF::DataRef::~DataRef((const void **)(v29 - 104));
  std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100](v29 - 120);
  std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a15);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  DSP_Host_Types::DeviceDSPOffloadInfo::~DeviceDSPOffloadInfo((DSP_Host_Types::DeviceDSPOffloadInfo *)&a19);
  _Unwind_Resume(a1);
}

void DSP_Host_OffloadDictionary::~DSP_Host_OffloadDictionary(DSP_Host_OffloadDictionary *this)
{
  unsigned int v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

_DWORD *HALS_Device_HostedDSP::RationalizeDSPOffloadsForClient(BOOL,HALS_Client *)const::LogExplanation::~LogExplanation(_DWORD *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[5];
  if ((v2 - 2) >= 3)
  {
    if (v2 == 1 && !*((unsigned char *)a1 + 16))
    {
      uint64_t v9 = *(void *)a1;
      int v10 = *(unsigned __int8 *)(*(void *)a1 + 4);
      if (!*(unsigned char *)(*(void *)a1 + 4) || **(_DWORD **)a1 != 1)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          int v13 = a1[2];
          int v12 = a1[3];
          int v16 = 136316162;
          int v17 = "HALS_Device_HostedDSP.cpp";
          __int16 v18 = 1024;
          int v19 = 111;
          __int16 v20 = 1024;
          int v21 = v12;
          __int16 v22 = 1024;
          int v23 = v13;
          __int16 v24 = 2080;
          int v25 = "Offloads NOT Available And Device Requests Offloads";
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  [hal_dsp][offloads] (Client ID: %d) (Device ID: %d) This device will not offload -> %s", (uint8_t *)&v16, 0x28u);
          uint64_t v9 = *(void *)a1;
          int v10 = *(unsigned __int8 *)(*(void *)a1 + 4);
          int v14 = a1[5];
        }
        else
        {
          int v14 = 1;
        }
        if (!v10) {
          *(unsigned char *)(v9 + 4) = 1;
        }
        *(_DWORD *)uint64_t v9 = v14;
      }
    }
  }
  else if (*((unsigned char *)a1 + 16))
  {
    uint64_t v3 = *(void *)a1;
    int v4 = *(unsigned __int8 *)(*(void *)a1 + 4);
    if (!*(unsigned char *)(*(void *)a1 + 4) || v2 != **(_DWORD **)a1)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        int v6 = HALS_Device_HostedDSP::RationalizeDSPOffloadsForClient(BOOL,HALS_Client *)const::kExplanationStrings[v2];
        int v8 = a1[2];
        int v7 = a1[3];
        int v16 = 136316162;
        int v17 = "HALS_Device_HostedDSP.cpp";
        __int16 v18 = 1024;
        int v19 = 102;
        __int16 v20 = 1024;
        int v21 = v7;
        __int16 v22 = 1024;
        int v23 = v8;
        __int16 v24 = 2080;
        int v25 = v6;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  [hal_dsp][offloads] (Client ID: %d) (Device ID: %d) Offloads are available, but this device will not offload -> %s", (uint8_t *)&v16, 0x28u);
        uint64_t v3 = *(void *)a1;
        int v4 = *(unsigned __int8 *)(*(void *)a1 + 4);
        LODWORD(v2) = a1[5];
      }
      if (!v4) {
        *(unsigned char *)(v3 + 4) = 1;
      }
      *(_DWORD *)uint64_t v3 = v2;
    }
  }
  return a1;
}

void DSP_Host_Types::DeviceDSPOffloadInfo::~DeviceDSPOffloadInfo(DSP_Host_Types::DeviceDSPOffloadInfo *this)
{
  *(void *)this = &unk_1F147EDD8;
  uint64_t v2 = (DSP_Host_Types::DeviceDSPOffloadInfo *)((char *)this + 24);
  *((void *)this + 3) = &unk_1F147F0A0;
  if (*((unsigned char *)this + 64) && *((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *(void *)this = &unk_1F147F2C0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  DSP_Dictionariable::DictionariableKvp *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F147EDD8;
  uint64_t v2 = (DSP_Host_Types::DeviceDSPOffloadInfo *)((char *)this + 24);
  *((void *)this + 3) = &unk_1F147F0A0;
  if (*((unsigned char *)this + 64) && *((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *(void *)this = &unk_1F147F2C0;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);

  JUMPOUT(0x1C1859840);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::DeviceDSPOffloadInfo>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf) {
    CFRelease(cf);
  }
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1BAC5B73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::DeviceDSPOffloadInfo>::description(uint64_t a1@<X0>, void *a2@<X8>)
{
  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_) {
    CFRelease(cf.__begin_);
  }
  CFStringRef v4 = CFCopyDescription(v8);
  CFStringRef v5 = v4;
  if (v4)
  {
    CFIndex Length = CFStringGetLength(v4);
    CFIndex v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    std::vector<char>::value_type __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if (v7) {
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    }
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1BAC5B8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
}

const __CFDictionary *DSP_Host_OffloadDictionary::has_specific_offloads(DSP_Host_OffloadDictionary *this)
{
  CFDictionaryRef result = (const __CFDictionary *)*((void *)this + 2);
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetCount(result);
    if (result) {
      return (const __CFDictionary *)!DSP_Host_OffloadDictionary::has_all_id(this);
    }
  }
  return result;
}

void HALS_Device_HostedDSP::DiscoverDSPPropertySetsForClient(HALS_Device **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a4 + 24)) {
    return;
  }
  if (!a2)
  {
    int InternalIOContextID = HALS_Device::GetInternalIOContextID(*a1);
    CFTypeRef v8 = operator new(4uLL);
    *CFTypeRef v8 = InternalIOContextID;
    CFIndex v7 = v8 + 1;
    __int16 v22 = v8 + 1;
    int v23 = v8 + 1;
    int v21 = v8;
LABEL_8:
    while (1)
    {
      uint64_t v10 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v8);
      int v12 = (HALS_ObjectMap *)v10;
      if (v10) {
        break;
      }
LABEL_25:
      int v16 = 0;
LABEL_26:
      HALS_ObjectMap::ReleaseObject(v12, v11);
      if ((v16 == 3 || !v16) && ++v8 != v7) {
        continue;
      }
      CFIndex v7 = v21;
      if (!v21) {
        return;
      }
LABEL_5:
      __int16 v22 = v7;
      operator delete(v7);
      return;
    }
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v10 + 96) + 736))(&v19);
    uint64_t v13 = v19;
    if (v19)
    {
      if (!a5)
      {
LABEL_13:
        uint64_t v17 = v13;
        __int16 v18 = v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v14 = *(void *)(a4 + 24);
        if (!v14) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        int v15 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v14 + 48))(v14, &v17);
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        if (v15) {
          int v16 = 0;
        }
        else {
          int v16 = 2;
        }
LABEL_22:
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
        if ((v15 & 1) == 0) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v19 + 24))(v19))
      {
        uint64_t v13 = v19;
        goto LABEL_13;
      }
    }
    LOBYTE(v15) = 0;
    int v16 = 3;
    goto LABEL_22;
  }
  (*(void (**)(_DWORD **__return_ptr, uint64_t))(*(void *)a2 + 200))(&v21, a2);
  CFTypeRef v8 = v21;
  CFIndex v7 = v22;
  if (v21 != v22) {
    goto LABEL_8;
  }
  if (v22) {
    goto LABEL_5;
  }
}

void sub_1BAC5BB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, NSObject **buf, long long a14)
{
  if (a2)
  {
    uint64_t v14 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    int v15 = *buf;
    if ((void)a14) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a14);
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = pthread_self();
      mach_port_t v17 = pthread_mach_thread_np(v16);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v17;
      LOWORD(a14) = 2080;
      *(void *)((char *)&a14 + 2) = "HALS_Device_HostedDSP.cpp";
      WORD5(a14) = 1024;
      HIDWORD(a14) = 312;
      _os_log_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d [hal_dsp] Encountered an unknown issue while enumerating DSP property sets.", (uint8_t *)&buf, 0x18u);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAC5BC88()
{
}

uint64_t HALS_Device_HostedDSP::HasProperty(HALS_Device **this, uint64_t a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  unsigned __int16 v13 = 0;
  if (*(_DWORD *)a2 == 1684500589)
  {
    if (*(_DWORD *)(a2 + 4) != 1768845428
      || ((uint64_t v9 = (*(uint64_t (**)(HALS_Device *))(*(void *)*this + 464))(*this), (v9 & 0xFF00000000) != 0)
        ? (BOOL v10 = v9 == 0)
        : (BOOL v10 = 1),
          v10))
    {
      unsigned __int8 v5 = 0;
      int v6 = 0;
      return v5 | (v6 << 8);
    }
    *(void *)&long long v14 = *(void *)a2;
    DWORD2(v14) = *(_DWORD *)(a2 + 8);
    int v12 = (char *)operator new(0x20uLL);
    *(void *)int v12 = &unk_1F1467118;
    *(_OWORD *)(v12 + 8) = v14;
    *((void *)v12 + 3) = &v13;
    v15[3] = v12;
    HALS_Device_HostedDSP::DiscoverDSPPropertySetsForClient(this, (uint64_t)a3, a2, (uint64_t)v15, 0);
    std::__function::__value_func<BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::~__value_func[abi:ne180100](v15);
  }
  else if (*(_DWORD *)a2 == 1983997011)
  {
    unsigned __int16 v13 = (*(_DWORD *)(a2 + 4) == 1768845428) | 0x100;
  }
  unsigned __int8 v5 = v13;
  int v6 = HIBYTE(v13);
  return v5 | (v6 << 8);
}

void sub_1BAC5BE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target_type()
{
}

uint64_t std::__function::__func<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK21HALS_Device_HostedDSP11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_ClientE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1 + 8;
  uint64_t v4 = *a2;
  unsigned __int8 v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  int v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 24))(v4, v3);
  **(_WORD **)(a1 + 24) = (unsigned __int16)v6 | 0x100;
  AMCP::Log::Scope_Registry::get(v6);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
  CFIndex v7 = *v13;
  if (*(void *)v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    CFTypeRef v8 = pthread_self();
    mach_port_t v9 = pthread_mach_thread_np(v8);
    BOOL v10 = *(unsigned char **)(a1 + 24);
    uint64_t v11 = "DOES NOT HAVE";
    if (v10[1] && *v10) {
      uint64_t v11 = "HAS";
    }
    LODWORD(v13) = 67109890;
    HIDWORD(v13) = v9;
    *(_WORD *)long long v14 = 2080;
    *(void *)&void v14[2] = "HALS_Device_HostedDSP.cpp";
    __int16 v15 = 1024;
    int v16 = 501;
    __int16 v17 = 2080;
    __int16 v18 = v11;
    _os_log_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d [hal_dsp][graph] Hosted DSP %s kAudioDevicePropertyDSPGraphParameter", (uint8_t *)&v13, 0x22u);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return 0;
}

void sub_1BAC5C090(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1467118;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F1467118;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::HasProperty(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::~__func()
{
}

BOOL HALS_Device_HostedDSP::IsPropertySettable(HALS_Device **this, uint64_t a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  BOOL result = 0;
  v11[4] = *MEMORY[0x1E4F143B8];
  char v9 = 0;
  if (*(_DWORD *)a2 == 1684500589)
  {
    *(void *)&long long v10 = *(void *)a2;
    DWORD2(v10) = *(_DWORD *)(a2 + 8);
    CFTypeRef v8 = (char *)operator new(0x20uLL);
    *(void *)CFTypeRef v8 = &unk_1F14671A8;
    *(_OWORD *)(v8 + 8) = v10;
    *((void *)v8 + 3) = &v9;
    void v11[3] = v8;
    HALS_Device_HostedDSP::DiscoverDSPPropertySetsForClient(this, (uint64_t)a3, a2, (uint64_t)v11, 1);
    std::__function::__value_func<BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::~__value_func[abi:ne180100](v11);
    return v9 != 0;
  }
  return result;
}

void sub_1BAC5C240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target_type()
{
}

uint64_t std::__function::__func<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK21HALS_Device_HostedDSP18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_ClientE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const AudioObjectPropertyAddress **)a2;
  unsigned __int8 v5 = *(std::__shared_weak_count **)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  DSP_Host_PropertySet::getHostedDSPPropertyInfo((DSP_Host_PropertySet *)&v8, v4, (_DWORD *)(a1 + 8));
  uint64_t v6 = v8;
  if (v8)
  {
    if (*(unsigned char *)(v8 + 113)) {
      BOOL v2 = *(unsigned char *)(v8 + 112) != 0;
    }
    else {
      BOOL v2 = 0;
    }
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  **(unsigned char **)(a1 + 24) = v6 != 0 && v2;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return 0;
}

void sub_1BAC5C33C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14671A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1)
{
  BOOL v2 = (char *)operator new(0x20uLL);
  *(void *)BOOL v2 = &unk_1F14671A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::IsPropertySettable(unsigned int,AudioObjectPropertyAddress const&,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::~__func()
{
}

uint64_t HALS_Device_HostedDSP::GetPropertyDataSize(HALS_Device **this, uint64_t a2, const AudioObjectPropertyAddress *a3, unsigned int a4, const void *a5, HALS_Client *a6)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  unsigned int v11 = 0;
  if (*(_DWORD *)a2 == 1684500589)
  {
    *(void *)&long long v12 = *(void *)a2;
    DWORD2(v12) = *(_DWORD *)(a2 + 8);
    long long v10 = (char *)operator new(0x20uLL);
    *(void *)long long v10 = &unk_1F1467228;
    *(_OWORD *)(v10 + 8) = v12;
    *((void *)v10 + 3) = &v11;
    void v13[3] = v10;
    HALS_Device_HostedDSP::DiscoverDSPPropertySetsForClient(this, (uint64_t)a3, a2, (uint64_t)v13, 1);
    std::__function::__value_func<BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::~__value_func[abi:ne180100](v13);
    return v11;
  }
  else if (*(_DWORD *)a2 == 1983997011)
  {
    return 4;
  }
  else
  {
    return 0;
  }
}

void sub_1BAC5C4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target_type()
{
}

uint64_t std::__function::__func<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK21HALS_Device_HostedDSP19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_ClientE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (AudioObjectPropertyAddress *)(a1 + 8);
  uint64_t v4 = *(AudioObjectPropertyAddress **)a2;
  unsigned __int8 v5 = *(std::__shared_weak_count **)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unsigned int v6 = DSP_Host_PropertySet::getHostedDSPPropertyDataType(v4, v3) - 3;
  if (v6 > 4) {
    LODWORD(v7) = 0;
  }
  else {
    uint64_t v7 = qword_1BB02ACE8[v6];
  }
  **(_DWORD **)(a1 + 24) = v7;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return 0;
}

void sub_1BAC5C5C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1467228;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1)
{
  BOOL v2 = (char *)operator new(0x20uLL);
  *(void *)BOOL v2 = &unk_1F1467228;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyDataSize(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::~__func()
{
}

void HALS_Device_HostedDSP::GetPropertyData(HALS_Device_HostedDSP *this, _DWORD *a2, const AudioObjectPropertyAddress *a3, _DWORD *a4, unsigned int *a5, void *a6, uint64_t a7, _DWORD *a8, HALS_Client *a9)
{
  int v11 = (int)a3;
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  double v60 = a5;
  if (*a2 != 1684500589)
  {
    if (*a2 != 1983997011) {
      return;
    }
    if (!a5)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      std::string v38 = *buf;
      if (*(void *)v66) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v66);
      }
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        char v39 = pthread_self();
        mach_port_t v40 = pthread_mach_thread_np(v39);
        LODWORD(buf) = 67109890;
        HIDWORD(buf) = v40;
        *(_WORD *)uint64_t v66 = 2080;
        *(void *)&v66[2] = "HALS_Device_HostedDSP.cpp";
        __int16 v67 = 1024;
        int v68 = 568;
        __int16 v69 = 2080;
        *(void *)uint64_t v70 = "outData == nullptr";
        _os_log_error_impl(&dword_1BAA78000, v38, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: outData is nullptr for kAudioDevicePropertyVoiceActivityDetectionState", (uint8_t *)&buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v59);
      __cxa_allocate_exception(0x40uLL);
      std::string v50 = off_1F148A5D8;
      int v51 = 1852797029;
      int v53 = 1852797029;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      int v58 = -1;
      uint64_t v52 = &unk_1F1487130;
      int v54 = &unk_1F1487158;
      uint64_t v55 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)&buf, (uint64_t)&v52);
      *(void *)&v70[6] = "void HALS_Device_HostedDSP::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &"
                           ", UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
      *(void *)&v70[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device_HostedDSP.cpp";
      int v71 = 568;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v45);
      long long v48 = v45;
      uint64_t v49 = v46;
      long long v45 = 0uLL;
      uint64_t v46 = 0;
      CFNumberRef v47 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
    }
    if (a3 != 4)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      int v41 = *buf;
      if (*(void *)v66) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v66);
      }
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        CFDataRef v42 = pthread_self();
        mach_port_t v43 = pthread_mach_thread_np(v42);
        LODWORD(buf) = 67109890;
        HIDWORD(buf) = v43;
        *(_WORD *)uint64_t v66 = 2080;
        *(void *)&v66[2] = "HALS_Device_HostedDSP.cpp";
        __int16 v67 = 1024;
        int v68 = 569;
        __int16 v69 = 2080;
        *(void *)uint64_t v70 = "inDataSize != sizeof(UInt32)";
        _os_log_error_impl(&dword_1BAA78000, v41, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inDataSize is not UInt32 for kAudioDevicePropertyVoiceActivityDetectionState", (uint8_t *)&buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v59);
      __cxa_allocate_exception(0x40uLL);
      std::string v50 = off_1F148A5D8;
      int v51 = 1852797029;
      int v53 = 1852797029;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      int v58 = -1;
      uint64_t v52 = &unk_1F1487130;
      int v54 = &unk_1F1487158;
      uint64_t v55 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)&buf, (uint64_t)&v52);
      *(void *)&v70[6] = "void HALS_Device_HostedDSP::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &"
                           ", UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
      *(void *)&v70[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device_HostedDSP.cpp";
      int v71 = 569;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v45);
      long long v48 = v45;
      uint64_t v49 = v46;
      long long v45 = 0uLL;
      uint64_t v46 = 0;
      CFNumberRef v47 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
    }
    LOBYTE(v52) = 0;
    BYTE4(v52) = 0;
    uint64_t v64 = 0;
    long long v14 = operator new(0x20uLL);
    void *v14 = &unk_1F14672A8;
    v14[1] = &v52;
    void v14[2] = *(void *)a2;
    *((_DWORD *)v14 + 6) = a2[2];
    uint64_t v64 = v14;
    HALS_Device_HostedDSP::DiscoverDSPPropertySetsForClient((HALS_Device **)this, (uint64_t)a8, (uint64_t)a2, (uint64_t)v63, 1);
    __int16 v15 = (AMCP::Log::Scope_Registry *)std::__function::__value_func<BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::~__value_func[abi:ne180100](v63);
    if (BYTE4(v52))
    {
      AMCP::Log::Scope_Registry::get(v15);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      int v16 = *buf;
      if (*(void *)v66) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v66);
      }
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_27;
      }
      __int16 v17 = pthread_self();
      mach_port_t v18 = pthread_mach_thread_np(v17);
      if (a8) {
        int v19 = a8[4];
      }
      else {
        int v19 = 0;
      }
      int v32 = *(_DWORD *)(*(void *)this + 16);
      LODWORD(buf) = 67110402;
      HIDWORD(buf) = v18;
      *(_WORD *)uint64_t v66 = 2080;
      *(void *)&v66[2] = "HALS_Device_HostedDSP.cpp";
      __int16 v67 = 1024;
      int v68 = 583;
      __int16 v69 = 1024;
      *(_DWORD *)uint64_t v70 = v19;
      *(_WORD *)&v70[4] = 1024;
      *(_DWORD *)&v70[6] = v32;
      *(_WORD *)&v70[10] = 1024;
      *(_DWORD *)&v70[12] = v52;
      uint64_t v33 = "%6u %32s:%-5d [hal_dsp][mtd] (Client ID: %d) (Device ID: %d) Reading kAudioDevicePropertyVoiceActivityDetect"
            "ionState with %d.";
      BOOL v34 = v16;
      uint32_t v35 = 42;
    }
    else
    {
      AMCP::Log::Scope_Registry::get(v15);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      __int16 v28 = *buf;
      if (*(void *)v66) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v66);
      }
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_27;
      }
      uint64_t v29 = pthread_self();
      mach_port_t v30 = pthread_mach_thread_np(v29);
      if (a8) {
        int v31 = a8[4];
      }
      else {
        int v31 = 0;
      }
      int v36 = *(_DWORD *)(*(void *)this + 16);
      LODWORD(buf) = 67110146;
      HIDWORD(buf) = v30;
      *(_WORD *)uint64_t v66 = 2080;
      *(void *)&v66[2] = "HALS_Device_HostedDSP.cpp";
      __int16 v67 = 1024;
      int v68 = 588;
      __int16 v69 = 1024;
      *(_DWORD *)uint64_t v70 = v31;
      *(_WORD *)&v70[4] = 1024;
      *(_DWORD *)&v70[6] = v36;
      uint64_t v33 = "%6u %32s:%-5d [hal_dsp][mtd] (Client ID: %d) (Device ID: %d) Unable to read kAudioDevicePropertyVoiceActivit"
            "yDetectionState, no DSP properties found/available (defaulting to 0).";
      BOOL v34 = v28;
      uint32_t v35 = 36;
    }
    _os_log_impl(&dword_1BAA78000, v34, OS_LOG_TYPE_DEFAULT, v33, (uint8_t *)&buf, v35);
LABEL_27:
    *a4 = 4;
    if (BYTE4(v52)) {
      unsigned int v37 = v52;
    }
    else {
      unsigned int v37 = 0;
    }
    unsigned int *v60 = v37;
    return;
  }
  int v21 = (int)a6;
  char v59 = 0;
  unsigned int v62 = 0;
  __int16 v22 = operator new(0x40uLL);
  uint64_t v23 = *(void *)a2;
  *__int16 v22 = &unk_1F1467328;
  v22[1] = v23;
  *((_DWORD *)v22 + 4) = a2[2];
  *((_DWORD *)v22 + 5) = v11;
  void v22[3] = a7;
  *((_DWORD *)v22 + 8) = v21;
  v22[5] = &v60;
  v22[6] = a4;
  void v22[7] = &v59;
  unsigned int v62 = v22;
  HALS_Device_HostedDSP::DiscoverDSPPropertySetsForClient((HALS_Device **)this, (uint64_t)a8, (uint64_t)a2, (uint64_t)v61, 1);
  uint64_t v24 = (AMCP::Log::Scope_Registry *)std::__function::__value_func<BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::~__value_func[abi:ne180100](v61);
  if (!v59)
  {
    AMCP::Log::Scope_Registry::get(v24);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    int v25 = *buf;
    if (*(void *)v66) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v66);
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = pthread_self();
      mach_port_t v27 = pthread_mach_thread_np(v26);
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v27;
      *(_WORD *)uint64_t v66 = 2080;
      *(void *)&v66[2] = "HALS_Device_HostedDSP.cpp";
      __int16 v67 = 1024;
      int v68 = 619;
      __int16 v69 = 2080;
      *(void *)uint64_t v70 = "!didCopyData";
      _os_log_error_impl(&dword_1BAA78000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device_HostedDSP::GetPropertyData returned no data", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
    __cxa_allocate_exception(0x40uLL);
    std::string v50 = off_1F148A5D8;
    int v51 = 1852797029;
    int v53 = 1852797029;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    int v58 = -1;
    uint64_t v52 = &unk_1F1487130;
    int v54 = &unk_1F1487158;
    uint64_t v55 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)&buf, (uint64_t)&v52);
    *(void *)&v70[6] = "void HALS_Device_HostedDSP::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &, "
                         "UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
    *(void *)&v70[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device_HostedDSP.cpp";
    int v71 = 619;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v45);
    long long v48 = v45;
    uint64_t v49 = v46;
    long long v45 = 0uLL;
    uint64_t v46 = 0;
    CFNumberRef v47 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
  }
}

void sub_1BAC5CF98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,std::exception a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a2)
  {
    std::__function::__value_func<BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::~__value_func[abi:ne180100](&a39);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAC5C764);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &unk_1F148A978;
  *(void *)a1 = &unk_1F14870F0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = &unk_1F148A9F0;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_1F1487038;
  *(void *)(a1 + 16) = &unk_1F1487070;
  *(void *)(a1 + 56) = &unk_1F14870A8;
  uint64_t v10 = 0;
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 40))(&v9);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v10, v9);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v9);
    uint64_t v7 = v10;
  }
  else
  {
    uint64_t v7 = 0;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 24), v7);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
  return a1;
}

{
  uint64_t v4;
  long long v5;

  *(void *)(a1 + 56) = &unk_1F148A978;
  *(void *)a1 = &unk_1F14870F0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_1F148A9F0;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_1F1487038;
  *(void *)(a1 + 16) = &unk_1F1487070;
  *(void *)(a1 + 56) = &unk_1F14870A8;
  return a1;
}

void sub_1BAC5D27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  void *v13 = v11;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v12);
  std::exception::~exception(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>()
{
}

void sub_1BAC5D428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  boost::detail::shared_count::~shared_count((atomic_uint **)va);
  _Unwind_Resume(a1);
}

void sub_1BAC5D574(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::~clone_impl(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));

  std::exception::~exception((std::exception *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)a1);

  JUMPOUT(0x1C1859840);
}

void boost::exception_detail::error_info_injector<CAException>::~error_info_injector(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));

  std::exception::~exception((std::exception *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)a1);

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target_type()
{
}

uint64_t std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK21HALS_Device_HostedDSP15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_ClientE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  long long v5 = *(const UInt8 **)(a1 + 24);
  if (v5 && (CFIndex v6 = *(unsigned int *)(a1 + 32), v6))
  {
    CFDataRef v7 = CFDataCreate(0, v5, v6);
    applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&cf, v7);
    CFTypeRef v8 = cf;
    if (cf) {
      CFRetain(cf);
    }
  }
  else
  {
    CFTypeRef v8 = 0;
  }
  CFTypeRef cf = v8;
  char v18 = 1;
  (*(void (**)(CFDataRef *__return_ptr, uint64_t, uint64_t, CFTypeRef *))(*(void *)v4 + 40))(&theData, v4, a1 + 8, &cf);
  std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  if (theData)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 20);
    if (CFDataGetLength(theData) <= v9)
    {
      if (!theData)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v10 = **(void ***)(a1 + 40);
      BytePtr = CFDataGetBytePtr(theData);
      if (!theData)
      {
        __int16 v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v15, "Could not construct");
        __cxa_throw(v15, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      CFIndex Length = CFDataGetLength(theData);
      memcpy(v10, BytePtr, Length);
      if (!theData)
      {
        int v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v16, "Could not construct");
        __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      **(_DWORD **)(a1 + 48) = CFDataGetLength(theData);
      **(unsigned char **)(a1 + 56) = 1;
    }
    if (theData) {
      CFRelease(theData);
    }
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return 0;
}

void sub_1BAC5D894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1467328;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1)
{
  BOOL v2 = (char *)operator new(0x40uLL);
  *(void *)BOOL v2 = &unk_1F1467328;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

void std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_1>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::~__func()
{
}

void *std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target_type()
{
}

uint64_t std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK21HALS_Device_HostedDSP15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_ClientE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::operator()(uint64_t a1, uint64_t a2)
{
  long long v5 = *(AudioObjectPropertyAddress **)a2;
  long long v4 = *(std::__shared_weak_count **)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v6 = a1 + 16;
  LOBYTE(cf) = 0;
  char v17 = 0;
  if (DSP_Host_PropertySet::getHostedDSPPropertyDataType(v5, (AudioObjectPropertyAddress *)(a1 + 16)) != 5) {
    goto LABEL_13;
  }
  LOBYTE(v18) = 0;
  char v19 = 0;
  (*(void (**)(CFDataRef *__return_ptr, AudioObjectPropertyAddress *, uint64_t, uint64_t *))(*(void *)&v5->mSelector + 40))(&theData, v5, v6, &v18);
  std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v18);
  if (!theData) {
    goto LABEL_13;
  }
  if (CFDataGetLength(theData) != 4) {
    goto LABEL_8;
  }
  if (!theData)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (CFDataGetBytePtr(theData))
  {
    if (!theData)
    {
      __int16 v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v15, "Could not construct");
      __cxa_throw(v15, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    char v7 = 0;
    unsigned int v8 = *(_DWORD *)CFDataGetBytePtr(theData);
    unsigned int v2 = v8 >> 8;
  }
  else
  {
LABEL_8:
    LOBYTE(v8) = 0;
    char v7 = 1;
  }
  if (theData) {
    CFRelease(theData);
  }
  if ((v7 & 1) == 0)
  {
    uint64_t v9 = 0x100000000;
  }
  else
  {
LABEL_13:
    uint64_t v9 = 0;
    LOBYTE(v8) = 0;
  }
  unint64_t v10 = v9 | v8 | (v2 << 8);
  if (v10 <= 0x100000000) {
    LODWORD(v10) = 0;
  }
  uint64_t v11 = *(void *)(a1 + 8);
  *(_DWORD *)uint64_t v11 = v10;
  *(unsigned char *)(v11 + 4) = 1;
  std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  int v12 = **(_DWORD **)(a1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v12 == 0;
}

void sub_1BAC5DC1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  applesauce::CF::DataRef::~DataRef((const void **)va1);
  std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14672A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x20uLL);
  *(void *)unsigned int v2 = &unk_1F14672A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::GetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,unsigned int &,void *,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::~__func()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::~clone_impl(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  *((void *)v1 + 2) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 3);
  std::exception::~exception((std::exception *)v1);

  JUMPOUT(0x1C1859840);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  *((void *)v1 + 2) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 3);

  std::exception::~exception((std::exception *)v1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::rethrow(void *a1)
{
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::rethrow(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)exception, a1);
}

void sub_1BAC5DE90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone()
{
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone()
{
}

void sub_1BAC5E0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  void *v13 = v11;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v12);
  std::exception::~exception(v10);
  MEMORY[0x1C1859840]();
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::~clone_impl(void *a1)
{
  uint64_t v1 = (std::exception *)(a1 - 2);
  *a1 = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception(v1);

  JUMPOUT(0x1C1859840);
}

{
  std::exception *v1;
  uint64_t vars8;

  uint64_t v1 = (std::exception *)(a1 - 2);
  *a1 = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);

  std::exception::~exception(v1);
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<CAException>::~error_info_injector(void *a1)
{
  uint64_t v1 = (std::exception *)(a1 - 2);
  *a1 = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception(v1);

  JUMPOUT(0x1C1859840);
}

{
  std::exception *v1;
  uint64_t vars8;

  uint64_t v1 = (std::exception *)(a1 - 2);
  *a1 = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);

  std::exception::~exception(v1);
}

void *std::__function::__func<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target_type()
{
}

uint64_t std::__function::__func<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN21HALS_Device_HostedDSP15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_ClientE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  long long v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  CFDataRef v5 = CFDataCreate(0, *(const UInt8 **)(a1 + 24), *(unsigned int *)(a1 + 32));
  applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v27, v5);
  uint64_t v6 = *(const UInt8 **)(a1 + 40);
  if (v6 && (CFIndex v7 = *(unsigned int *)(a1 + 48), v7))
  {
    CFDataRef v8 = CFDataCreate(0, v6, v7);
    applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&cf, v8);
    unsigned int v9 = (*(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, CFTypeRef *))(*(void *)v4 + 32))(v4, a1 + 8, &v27, &cf);
    unint64_t v10 = (AMCP::Log::Scope_Registry *)cf;
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    unint64_t v10 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(*(void *)v4 + 32))(v4, a1 + 8, &v27, 0);
    unsigned int v9 = v10;
  }
  if (v9)
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&cf, "com.apple.coreaudio", "AMCP");
    int v12 = *(NSObject **)cf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      unsigned __int16 v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      int v15 = *(_DWORD *)(a1 + 16);
      v16.i32[0] = bswap32(*(_DWORD *)(a1 + 12));
      int8x8_t v17 = vzip1_s8(v16, v16);
      v18.i64[0] = 0x1F0000001FLL;
      v18.i64[1] = 0x1F0000001FLL;
      v19.i64[0] = 0x1F0000001FLL;
      v19.i64[1] = 0x1F0000001FLL;
      v20.i64[0] = 0x5F0000005FLL;
      v20.i64[1] = 0x5F0000005FLL;
      *(int8x8_t *)v21.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v20, (uint32x4_t)vsraq_n_s32(v19, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v17), 0x18uLL), 0x18uLL))), v17, (int8x8_t)0x2E002E002E002ELL);
      char v26 = 4;
      *(int8x8_t *)v21.i8 = vmovn_s16(v21);
      LODWORD(v25) = v21.i32[0];
      BYTE4(v25) = 0;
      v21.i32[0] = bswap32(v9);
      *(int8x8_t *)v21.i8 = vzip1_s8(*(int8x8_t *)v21.i8, *(int8x8_t *)v21.i8);
      char v24 = 4;
      *(int8x8_t *)v21.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v20, (uint32x4_t)vsraq_n_s32(v18, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v21.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v21.i8, (int8x8_t)0x2E002E002E002ELL);
      LODWORD(__p) = vmovn_s16(v21).u32[0];
      BYTE4(__p) = 0;
      LODWORD(cf) = 67110402;
      HIDWORD(cf) = v14;
      *(_WORD *)uint64_t v29 = 2080;
      *(void *)&v29[2] = "HALS_Device_HostedDSP.cpp";
      __int16 v30 = 1024;
      int v31 = 661;
      __int16 v32 = 2080;
      uint64_t v33 = &v25;
      __int16 v34 = 1024;
      int v35 = v15;
      __int16 v36 = 2080;
      p_p = &__p;
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp][graph] kAudioDevicePropertyDSPGraphParameter from setHostedDSPProperty scope:%s el:%d err:%s", (uint8_t *)&cf, 0x32u);
      if (v24 < 0) {
        operator delete(__p);
      }
      if (v26 < 0) {
        operator delete(v25);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v9;
  }
  if (v27) {
    CFRelease(v27);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return 0;
}

void sub_1BAC5E684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef a16, CFTypeRef cf)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

__n128 std::__function::__func<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14673A8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::__clone(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x38uLL);
  *(void *)unsigned int v2 = &unk_1F14673A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

void std::__function::__func<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0,std::allocator<HALS_Device_HostedDSP::SetPropertyData(unsigned int,AudioObjectPropertyAddress const&,unsigned int,void const*,unsigned int,void const*,HALS_Client *)::$_0>,BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::~__func()
{
}

void ADS::Stream::AbortConfigChange(ADS::Stream *this, unint64_t a2, ADS::BaseObject *a3)
{
  if (*(_DWORD *)a3 == 1936092532 || *(_DWORD *)a3 == 1885762592) {
    (*(void (**)(ADS::BaseObject *))(*(void *)a3 + 8))(a3);
  }
  else {
    ADS::BaseObject::AbortConfigChange(this, a2, (char *)a3);
  }
}

void ADS::Stream::PerformConfigChange(ADS::Stream *this, unint64_t a2, char *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v5 = *((_DWORD *)a3 + 3);
  if (v5 == 1936092532 || v5 == 1885762592)
  {
    long long v7 = *(_OWORD *)(a3 + 72);
    long long v12 = *(_OWORD *)(a3 + 56);
    long long v13 = v7;
    uint64_t v14 = *((void *)a3 + 11);
    if (!ADS::Stream::IsSupportedFormat((uint64_t)this, (uint64_t)&v12))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_Stream.cpp";
        __int16 v16 = 1024;
        int v17 = 433;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream::PerformConfigChange: unsupported sample format", buf, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = 560226676;
    }
    uint64_t v9 = *((void *)this + 17);
    CFDataRef v8 = (char *)this + 136;
    *(void *)AudioObjectPropertyAddress buf = v8;
    uint8_t buf[8] = (*(uint64_t (**)(char *))(v9 + 16))(v8);
    *((void *)v8 - 6) = v14;
    long long v10 = v13;
    *((_OWORD *)v8 - 5) = v12;
    *((_OWORD *)v8 - 4) = v10;
    (*(void (**)(char *))(*(void *)a3 + 8))(a3);
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)buf);
  }
  else
  {
    ADS::BaseObject::PerformConfigChange(this, a2, a3);
  }
}

BOOL ADS::Stream::IsSupportedFormat(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(void **)(a1 + 104);
  long long v3 = (void *)(a1 + 112);
  long long v4 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v4;
  uint64_t v12 = *(void *)(a2 + 32);
  int v13 = 3;
  if (v2 != (void *)(a1 + 112))
  {
    double v5 = *(double *)v11;
    while (!CA::StreamDescription::IsEquivalent((CA::Implementation *)v11, (const AudioStreamBasicDescription *)(v2 + 4), 3u)|| *((double *)v2 + 9) > v5|| *((double *)v2 + 10) < v5)
    {
      long long v7 = (void *)v2[1];
      if (v7)
      {
        do
        {
          CFDataRef v8 = v7;
          long long v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          CFDataRef v8 = (void *)v2[2];
          BOOL v9 = *v8 == (void)v2;
          unsigned int v2 = v8;
        }
        while (!v9);
      }
      unsigned int v2 = v8;
      if (v8 == v3)
      {
        unsigned int v2 = v3;
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

void ADS::Stream::SetPropertyData(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, unint64_t *a10, unsigned __int8 a11)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  int v13 = *(_DWORD *)a4;
  if (*(_DWORD *)a4 == 1885762592 || v13 == 1936092532)
  {
    if (a7 != 40)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_Stream.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 310;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_SetPropertyData: wrong size for the data for kAudioStreamPropertyPhysicalFormat", buf, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = 561211770;
    }
    long long v15 = *(_OWORD *)(a8 + 16);
    *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)a8;
    *(_OWORD *)&buf[16] = v15;
    uint64_t v40 = *(void *)(a8 + 32);
    uint64_t v16 = *(void *)(a1 + 136);
    *(void *)int v41 = a1 + 136;
    v41[8] = (*(uint64_t (**)(uint64_t))(v16 + 16))(a1 + 136);
    long long v17 = *(_OWORD *)(a1 + 72);
    *(_OWORD *)&v38.mSampleRate = *(_OWORD *)(a1 + 56);
    *(_OWORD *)&v38.mBytesPerPacket = v17;
    *(void *)&v38.mBitsPerChannel = *(void *)(a1 + 88);
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)v41);
    if (*(double *)buf != 0.0 && v38.mSampleRate != 0.0 && *(double *)buf != v38.mSampleRate
      || *(_DWORD *)&buf[8] && v38.mFormatID && *(_DWORD *)&buf[8] != v38.mFormatID
      || *(_DWORD *)&buf[16] && v38.mBytesPerPacket && *(_DWORD *)&buf[16] != v38.mBytesPerPacket
      || *(_DWORD *)&buf[20] && v38.mFramesPerPacket && *(_DWORD *)&buf[20] != v38.mFramesPerPacket
      || *(_DWORD *)&buf[24] && v38.mBytesPerFrame && *(_DWORD *)&buf[24] != v38.mBytesPerFrame
      || *(_DWORD *)&buf[28] && v38.mChannelsPerFrame && *(_DWORD *)&buf[28] != v38.mChannelsPerFrame
      || v40 && v38.mBitsPerChannel && v40 != v38.mBitsPerChannel
      || !CA::Implementation::EquivalentFormatFlags((CA::Implementation *)buf, &v38, (const AudioStreamBasicDescription *)1, 1))
    {
      if (ADS::Stream::IsSupportedFormat(a1, (uint64_t)buf)) {
        operator new();
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v41 = 136315394;
        *(void *)&v41[4] = "ADS_Stream.cpp";
        __int16 v42 = 1024;
        int v43 = 324;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Stream::SetPropertyData: unsupported format for kAudioStreamPropertyPhysicalFormat/kAudioStreamPropertyVirtualFormat", v41, 0x12u);
      }
      __int16 v36 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v36 = off_1F148A5D8;
      unsigned int v36[2] = 560226676;
    }
  }
  else if (v13 == 1935762292)
  {
    if (a7 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_Stream.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 287;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_SetPropertyData: wrong size for the data for kAudioDevicePropertyNominalSampleRate", buf, 0x12u);
      }
      unsigned int v37 = __cxa_allocate_exception(0x10uLL);
      *(void *)unsigned int v37 = off_1F148A5D8;
      v37[2] = 561211770;
    }
    int v18 = *(_DWORD *)a8;
    uint64_t v19 = *(void *)(a1 + 136);
    *(void *)AudioObjectPropertyAddress buf = a1 + 136;
    uint8_t buf[8] = (*(uint64_t (**)(void))(v19 + 16))();
    if (v18) {
      uint32x4_t v20 = *(void (***)(uint64_t))a1;
    }
    else {
      uint32x4_t v20 = (void (**)(uint64_t))(*(void *)a1 + 8);
    }
    (*v20)(a1);
    *a9 = 1;
    int v21 = *((_DWORD *)a4 + 1);
    __int16 v22 = (_DWORD *)a10[1];
    unint64_t v23 = a10[2];
    if ((unint64_t)v22 >= v23)
    {
      unint64_t v25 = 0x1555555555555555;
      char v26 = (_DWORD *)*a10;
      unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v22 - *a10) >> 2);
      unint64_t v28 = v27 + 1;
      if (v27 + 1 > 0x1555555555555555) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (void)v26) >> 2);
      if (2 * v29 > v28) {
        unint64_t v28 = 2 * v29;
      }
      if (v29 < 0xAAAAAAAAAAAAAAALL) {
        unint64_t v25 = v28;
      }
      if (v25)
      {
        unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v25);
        char v26 = (_DWORD *)*a10;
        __int16 v22 = (_DWORD *)a10[1];
      }
      else
      {
        uint64_t v30 = 0;
      }
      int v31 = (_DWORD *)(v25 + 12 * v27);
      unint64_t v32 = v25 + 12 * v30;
      *int v31 = 1935762292;
      v31[1] = v21;
      v31[2] = 0;
      char v24 = v31 + 3;
      if (v22 != v26)
      {
        do
        {
          uint64_t v33 = *(void *)(v22 - 3);
          v22 -= 3;
          int v34 = v22[2];
          *(void *)(v31 - 3) = v33;
          v31 -= 3;
          v31[2] = v34;
        }
        while (v22 != v26);
        char v26 = (_DWORD *)*a10;
      }
      *a10 = (unint64_t)v31;
      a10[1] = (unint64_t)v24;
      a10[2] = v32;
      if (v26) {
        operator delete(v26);
      }
    }
    else
    {
      *__int16 v22 = 1935762292;
      v22[1] = v21;
      v22[2] = 0;
      char v24 = v22 + 3;
    }
    a10[1] = (unint64_t)v24;
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)buf);
  }
  else
  {
    ADS::BaseObject::SetPropertyData(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  }
}

void sub_1BAC5F1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3ADS6Stream15SetPropertyDataEjiRK26AudioObjectPropertyAddressjPKvjS5_RjRNSt3__16vectorIS1_NS7_9allocatorIS1_EEEENS_17SettabilityPolicyE_block_invoke(uint64_t result)
{
  if (ADS::Simulator::sHost)
  {
    uint64_t v1 = *(unsigned int *)(result + 40);
    uint64_t v2 = *(void *)(result + 32);
    long long v3 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(ADS::Simulator::sHost + 32);
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    return v3(ADS::Simulator::sHost, v1, 0, v2);
  }
  return result;
}

void sub_1BAC5F270(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ADS::ChangeInfoData<AudioStreamBasicDescription>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);

  JUMPOUT(0x1C1859840);
}

void *ADS::ChangeInfoData<AudioStreamBasicDescription>::~ChangeInfoData(void *a1)
{
  *a1 = &unk_1F14674F0;
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](a1 + 3);
  return a1;
}

void ADS::Stream::GetPropertyData(ADS::Stream *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6, unsigned int a7, unsigned int *a8, _OWORD *a9)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  signed int mSelector = a4->mSelector;
  if ((int)a4->mSelector <= 1935894637)
  {
    if (mSelector <= 1885762591)
    {
      switch(mSelector)
      {
        case 1650682995:
          if (a7 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)char v39 = 136315394;
              *(void *)&v39[4] = "ADS_Stream.cpp";
              __int16 v40 = 1024;
              int v41 = 155;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_GetPropertyData: not enough space for the return value of kAudioObjectPropertyBaseClass for the volume control", v39, 0x12u);
            }
            exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
            *(void *)exceptiouint64_t n = off_1F148A5D8;
            exception[2] = 561211770;
          }
          int v11 = *((_DWORD *)this + 4);
          goto LABEL_52;
        case 1668047219:
          if (a7 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)char v39 = 136315394;
              *(void *)&v39[4] = "ADS_Stream.cpp";
              __int16 v40 = 1024;
              int v41 = 162;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_GetPropertyData: not enough space for the return value of kAudioObjectPropertyClass for the volume control", v39, 0x12u);
            }
            __int16 v36 = __cxa_allocate_exception(0x10uLL);
            *(void *)__int16 v36 = off_1F148A5D8;
            unsigned int v36[2] = 561211770;
          }
          int v11 = *((_DWORD *)this + 3);
          goto LABEL_52;
        case 1819569763:
          if (a7 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)char v39 = 136315394;
              *(void *)&v39[4] = "ADS_Stream.cpp";
              __int16 v40 = 1024;
              int v41 = 227;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_GetPropertyData: not enough space for the return value of kAudioStreamPropertyStartingChannel for the stream", v39, 0x12u);
            }
            unsigned int v37 = __cxa_allocate_exception(0x10uLL);
            *(void *)unsigned int v37 = off_1F148A5D8;
            v37[2] = 561211770;
          }
          *(_DWORD *)a9 = 0;
          goto LABEL_53;
      }
      goto LABEL_54;
    }
    if (mSelector == 1885762592)
    {
LABEL_27:
      if (a7 <= 0x27)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)char v39 = 136315394;
          *(void *)&v39[4] = "ADS_Stream.cpp";
          __int16 v40 = 1024;
          int v41 = 238;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_GetPropertyData: not enough space for the return value of kAudioStreamPropertyVirtualFormat for the stream", v39, 0x12u);
        }
        unint64_t v29 = __cxa_allocate_exception(0x10uLL);
        *(void *)unint64_t v29 = off_1F148A5D8;
        v29[2] = 561211770;
      }
      uint64_t v16 = *((void *)this + 17);
      long long v15 = (char *)this + 136;
      *(void *)char v39 = (char *)this + 136;
      v39[8] = (*(uint64_t (**)(char *))(v16 + 16))((char *)this + 136);
      uint64_t v17 = *((void *)v15 - 6);
      long long v18 = *((_OWORD *)v15 - 4);
      *a9 = *((_OWORD *)v15 - 5);
      a9[1] = v18;
      *((void *)a9 + 4) = v17;
      unsigned int v14 = 40;
LABEL_29:
      *a8 = v14;
      CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)v39);
      return;
    }
    if (mSelector != 1885762657)
    {
      if (mSelector == 1935762292)
      {
        if (a7 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)char v39 = 136315394;
            *(void *)&v39[4] = "ADS_Stream.cpp";
            __int16 v40 = 1024;
            int v41 = 179;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_GetPropertyData: not enough space for the return value of kAudioStreamPropertyIsActive for the stream", v39, 0x12u);
          }
          AudioStreamBasicDescription v38 = __cxa_allocate_exception(0x10uLL);
          *(void *)AudioStreamBasicDescription v38 = off_1F148A5D8;
          v38[2] = 561211770;
        }
        uint64_t v13 = *((void *)this + 17);
        uint64_t v12 = (char *)this + 136;
        *(void *)char v39 = (char *)this + 136;
        v39[8] = (*(uint64_t (**)(char *))(v13 + 16))((char *)this + 136);
        *(_DWORD *)a9 = *(v12 - 88);
        unsigned int v14 = 4;
        goto LABEL_29;
      }
      goto LABEL_54;
    }
  }
  else
  {
    if (mSelector > 1936092531)
    {
      if (mSelector > 1952542834)
      {
        if (mSelector == 1952542835)
        {
          if (a7 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)char v39 = 136315394;
              *(void *)&v39[4] = "ADS_Stream.cpp";
              __int16 v40 = 1024;
              int v41 = 192;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_GetPropertyData: not enough space for the return value of kAudioStreamPropertyIsReferenceStream for the stream", v39, 0x12u);
            }
            uint64_t v30 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v30 = off_1F148A5D8;
            unsigned int v30[2] = 561211770;
          }
          int v11 = *((unsigned __int8 *)this + 128);
          goto LABEL_52;
        }
        if (mSelector == 1952805485)
        {
          if (a7 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)char v39 = 136315394;
              *(void *)&v39[4] = "ADS_Stream.cpp";
              __int16 v40 = 1024;
              int v41 = 210;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_GetPropertyData: not enough space for the return value of kAudioStreamPropertyTerminalType for the stream", v39, 0x12u);
            }
            unint64_t v32 = __cxa_allocate_exception(0x10uLL);
            *(void *)unint64_t v32 = off_1F148A5D8;
            uint64_t v32[2] = 561211770;
          }
          int v11 = *((_DWORD *)this + 13);
          goto LABEL_52;
        }
        goto LABEL_54;
      }
      if (mSelector != 1936092532)
      {
        if (mSelector == 1937007734)
        {
          if (a7 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)char v39 = 136315394;
              *(void *)&v39[4] = "ADS_Stream.cpp";
              __int16 v40 = 1024;
              int v41 = 169;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_GetPropertyData: not enough space for the return value of kAudioObjectPropertyOwner for the volume control", v39, 0x12u);
            }
            int v31 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v31 = off_1F148A5D8;
            v31[2] = 561211770;
          }
          int v11 = *((_DWORD *)this + 5);
LABEL_52:
          *(_DWORD *)a9 = v11;
LABEL_53:
          *a8 = 4;
          return;
        }
        goto LABEL_54;
      }
      goto LABEL_27;
    }
    if (mSelector == 1935894638)
    {
      if (a7 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)char v39 = 136315394;
          *(void *)&v39[4] = "ADS_Stream.cpp";
          __int16 v40 = 1024;
          int v41 = 220;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_GetPropertyData: not enough space for the return value of kAudioStreamPropertyStartingChannel for the stream", v39, 0x12u);
        }
        uint64_t v33 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v33 = off_1F148A5D8;
        void v33[2] = 561211770;
      }
      int v11 = *((_DWORD *)this + 24);
      goto LABEL_52;
    }
    if (mSelector == 1935960434)
    {
      if (a7 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)char v39 = 136315394;
          *(void *)&v39[4] = "ADS_Stream.cpp";
          __int16 v40 = 1024;
          int v41 = 201;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Stream_GetPropertyData: not enough space for the return value of kAudioStreamPropertyDirection for the stream", v39, 0x12u);
        }
        int v34 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v34 = off_1F148A5D8;
        void v34[2] = 561211770;
      }
      int v11 = *((unsigned __int8 *)this + 49);
      goto LABEL_52;
    }
    if (mSelector != 1936092513)
    {
LABEL_54:
      ADS::BaseObject::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, (char *)a9);
      return;
    }
  }
  unsigned int v19 = 0;
  if (a7 >= 0x38)
  {
    uint32x4_t v20 = (void *)*((void *)this + 13);
    if (v20 != (void *)((char *)this + 112))
    {
      unint64_t v21 = 0;
      do
      {
        __int16 v22 = (char *)a9 + 56 * v21;
        long long v23 = *((_OWORD *)v20 + 2);
        long long v24 = *((_OWORD *)v20 + 3);
        long long v25 = *((_OWORD *)v20 + 4);
        *((void *)v22 + 6) = v20[10];
        *((_OWORD *)v22 + 1) = v24;
        *((_OWORD *)v22 + 2) = v25;
        *(_OWORD *)__int16 v22 = v23;
        char v26 = (void *)v20[1];
        unint64_t v27 = v20;
        if (v26)
        {
          do
          {
            uint32x4_t v20 = v26;
            char v26 = (void *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            uint32x4_t v20 = (void *)v27[2];
            BOOL v28 = *v20 == (void)v27;
            unint64_t v27 = v20;
          }
          while (!v28);
        }
        ++v21;
      }
      while (v21 < a7 / 0x38uLL && v20 != (void *)((char *)this + 112));
      unsigned int v19 = 56 * v21;
    }
  }
  *a8 = v19;
}

uint64_t ADS::Stream::GetPropertyDataSize(ADS::Stream *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6)
{
  signed int mSelector = a4->mSelector;
  uint64_t v7 = 4;
  if ((int)a4->mSelector <= 1935960433)
  {
    if (mSelector > 1885762656)
    {
      if (mSelector != 1885762657)
      {
        if (mSelector != 1935762292 && mSelector != 1935894638) {
          return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
        }
        return v7;
      }
      return (56 * *((_DWORD *)this + 30));
    }
    if (mSelector == 1819569763) {
      return v7;
    }
    int v9 = 1885762592;
    goto LABEL_15;
  }
  if (mSelector > 1936092531)
  {
    if (mSelector == 1952805485 || mSelector == 1952542835) {
      return v7;
    }
    int v9 = 1936092532;
LABEL_15:
    if (mSelector == v9) {
      return 40;
    }
    return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
  }
  if (mSelector == 1935960434) {
    return v7;
  }
  if (mSelector == 1936092513) {
    return (56 * *((_DWORD *)this + 30));
  }
  return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
}

uint64_t ADS::Stream::IsPropertySettable(ADS::Stream *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  uint64_t v4 = 0;
  signed int mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1935960433)
  {
    if (mSelector <= 1936092531)
    {
      if (mSelector != 1935960434 && mSelector != 1936092513) {
        return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
      }
      return v4;
    }
    if (mSelector == 1952805485 || mSelector == 1952542835) {
      return v4;
    }
    int v7 = 1936092532;
  }
  else
  {
    if (mSelector > 1885762656)
    {
      if (mSelector == 1885762657) {
        return v4;
      }
      if (mSelector != 1935762292)
      {
        if (mSelector != 1935894638) {
          return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
        }
        return v4;
      }
      return 1;
    }
    if (mSelector == 1819569763) {
      return v4;
    }
    int v7 = 1885762592;
  }
  if (mSelector == v7) {
    return 1;
  }
  return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
}

BOOL ADS::Stream::HasProperty(ADS::Stream *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  signed int mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1935960433)
  {
    if (mSelector <= 1936092531)
    {
      BOOL v5 = mSelector == 1935960434;
      int v6 = 1936092513;
    }
    else
    {
      BOOL v5 = mSelector == 1936092532 || mSelector == 1952542835;
      int v6 = 1952805485;
    }
  }
  else if (mSelector <= 1885762656)
  {
    BOOL v5 = mSelector == 1819569763;
    int v6 = 1885762592;
  }
  else
  {
    BOOL v5 = mSelector == 1885762657 || mSelector == 1935762292;
    int v6 = 1935894638;
  }
  return v5 || mSelector == v6 || ADS::BaseObject::HasProperty(this, a2, a3, a4);
}

void ADS::Stream::~Stream(ADS::Stream *this)
{
  *(void *)this = &unk_1F1467428;
  CADeprecated::CAMutex::~CAMutex((ADS::Stream *)((char *)this + 136));
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 14));
  ADS::BaseObject::~BaseObject(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F1467428;
  CADeprecated::CAMutex::~CAMutex((ADS::Stream *)((char *)this + 136));
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 14));

  ADS::BaseObject::~BaseObject(this);
}

uint64_t ADS::Stream::Stream(uint64_t a1, int a2, const AudioStreamRangedDescription *a3, void *a4, long long *a5, char a6, int a7, int a8, char a9)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 12) = 0x616F626A61737472;
  *(_DWORD *)(a1 + 20) = a3;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)a1 = &unk_1F1467428;
  *(unsigned char *)(a1 + 49) = a6;
  *(_DWORD *)(a1 + 52) = a7;
  long long v10 = *a5;
  long long v11 = a5[1];
  *(void *)(a1 + 88) = *((void *)a5 + 4);
  *(_OWORD *)(a1 + 72) = v11;
  *(_OWORD *)(a1 + 56) = v10;
  *(_DWORD *)(a1 + 96) = a8;
  std::set<CAStreamRangedDescription,CAStreamRangedDescription_ReverseSort,std::allocator<CAStreamRangedDescription>>::set[abi:ne180100](a1 + 104, a4, a3);
  *(unsigned char *)(a1 + 128) = a9;
  CADeprecated::CAMutex::CAMutex((CADeprecated::CAMutex *)(a1 + 136), "Stream State");
  return a1;
}

void sub_1BAC601E4(_Unwind_Exception *a1)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)v1 + 14));
  ADS::BaseObject::~BaseObject(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3ADS6Stream16UpdateSampleRateEjd_block_invoke(uint64_t result)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(result + 32);
  long long v4 = *(_OWORD *)"tmfsbolg";
  uint64_t v5 = 1735159650;
  if (ADS::Simulator::sHost)
  {
    uint64_t v2 = *(unsigned int *)(v1 + 8);
    long long v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, long long *))ADS::Simulator::sHost;
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    return v3(ADS::Simulator::sHost, v2, 2, &v4);
  }
  return result;
}

void sub_1BAC602C4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAC60294);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<AMCP::Graph::Timebase>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<AMCP::IOAudio2::Stream>>,std::reverse_iterator<std::shared_ptr<AMCP::IOAudio2::Stream>*>,std::reverse_iterator<std::shared_ptr<AMCP::IOAudio2::Stream>*>,std::reverse_iterator<std::shared_ptr<AMCP::IOAudio2::Stream>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = result;
  uint64_t v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t AMCP::Graph::Timebase_Set::stop(AMCP::Graph::Timebase_Set *this)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (unsigned int *)*((void *)this + 5);
  uint64_t v2 = (unsigned int *)*((void *)this + 6);
  if (v1 == v2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v6 = **(NSObject ***)buf;
    if (*(void *)v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v24);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)long long v24 = 2080;
      *(void *)&v24[2] = "Timebase_Set.cpp";
      __int16 v25 = 1024;
      int v26 = 104;
      __int16 v27 = 2080;
      *(void *)BOOL v28 = "not (not m_state.empty())";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v22);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v14);
    std::logic_error::logic_error(&v15, &v14);
    v15.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v16, &v15);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = -1;
    v16.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v17 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v16);
    *(void *)&v28[6] = "Start_Stop_Result AMCP::Graph::Timebase_Set::stop() const";
    unint64_t v29 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Timebase_Set.cpp";
    int v30 = 104;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v9);
    long long v12 = v9;
    uint64_t v13 = v10;
    long long v9 = 0uLL;
    uint64_t v10 = 0;
    long long v11 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  do
  {
    for (unint64_t i = (uint64_t **)*((void *)this + 2); i; unint64_t i = (uint64_t **)*i)
      (*(void (**)(uint64_t *, void))(*i[2] + 112))(i[2], *v1);
    ++v1;
  }
  while (v1 != v2);
  return 0;
}

void sub_1BAC60638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v26 - 128);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a24);
  MEMORY[0x1C1859090](&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v25) {
    __cxa_free_exception(v24);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v26 - 129));
  _Unwind_Resume(a1);
}

std::string *AMCP::Graph::Timebase_Set::wait_for_time_to_start(AMCP::Log::Scope_Registry *a1, uint64_t a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!*((void *)a1 + 3))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v18 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = pthread_self();
      mach_port_t v20 = pthread_mach_thread_np(v19);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v20;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Timebase_Set.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 126;
      __int16 v34 = 2080;
      *(void *)int v35 = "not (not m_timebases.empty())";
      _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to run an manifest with no timebases", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to run an manifest with no timebases", (uint64_t)&__p);
    std::logic_error::logic_error(&v26, &__p);
    v26.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v27, &v26);
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    int v31 = -1;
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v27.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v27);
    *(void *)&void v35[6] = "Start_Stop_Result AMCP::Graph::Timebase_Set::wait_for_time_to_start(const std::atomic_uint32_t &) const";
    __int16 v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Timebase_Set.cpp";
    int v37 = 126;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
    *(_OWORD *)&v23.__r_.__value_.__r.__words[1] = v21;
    uint64_t v24 = v22;
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  long long v3 = (std::string *)(*(uint64_t (**)(void, AMCP::Log::Scope_Registry *, uint64_t))(**(void **)(*((void *)a1 + 2) + 16)
                                                                                              + 200))(*(void *)(*((void *)a1 + 2) + 16), a1, a2);
  long long v4 = v3;
  if (v3 == 1)
  {
    memset(&v27, 0, sizeof(v27));
    uint64_t v5 = (uint64_t **)*((void *)a1 + 2);
    if (v5)
    {
      int v6 = 0;
      do
      {
        if (v6) {
          std::string::basic_string[abi:ne180100]<0>(&v23, ", ");
        }
        else {
          memset(&v23, 0, sizeof(v23));
        }
        (*(void (**)(std::string *__return_ptr))(*v5[2] + 24))(&__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        long long v9 = std::string::append(&v23, (const std::string::value_type *)p_p, size);
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        *(void *)&buf[16] = *((void *)&v9->__r_.__value_.__l + 2);
        *(_OWORD *)AudioObjectPropertyAddress buf = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        if (buf[23] >= 0) {
          long long v11 = buf;
        }
        else {
          long long v11 = *(const std::string::value_type **)buf;
        }
        if (buf[23] >= 0) {
          std::string::size_type v12 = buf[23];
        }
        else {
          std::string::size_type v12 = *(void *)&buf[8];
        }
        long long v3 = std::string::append(&v27, v11, v12);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v23.__r_.__value_.__l.__data_);
        }
        uint64_t v5 = (uint64_t **)*v5;
        --v6;
      }
      while (v5);
    }
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v13 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      std::logic_error v15 = pthread_self();
      mach_port_t v16 = pthread_mach_thread_np(v15);
      uint64_t v17 = &v27;
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v17 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v16;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Timebase_Set.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 139;
      __int16 v34 = 2080;
      *(void *)int v35 = v17;
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Failure to start hardware: %s", buf, 0x22u);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
  }
  return v4;
}

void sub_1BAC60B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *AMCP::Graph::Timebase_Set::for_each(void *a1, uint64_t a2)
{
  char v9[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
  for (; a1; a1 = (void *)*a1)
  {
    long long v3 = (std::__shared_weak_count *)a1[3];
    uint64_t v5 = a1[2];
    int v6 = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v8) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 48))(v8, &v5);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  std::__function::__value_func<void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)v7);
  std::__function::__value_func<void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::~__value_func[abi:ne180100](v9);
  return std::__function::__value_func<void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::~__value_func[abi:ne180100](v7);
}

void sub_1BAC60D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  std::__function::__value_func<void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  long long v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    long long v3 = (void *)(a1 + 24);
  }
  *long long v3 = 0;
  return a1;
}

void std::vector<AMCP::Utility::Dispatch_Queue::Event_Source>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      int v6 = (char *)v1[1];
      do
      {
        uint64_t v8 = *((void *)v6 - 2);
        v6 -= 16;
        uint64_t v7 = v8;
        if (v8)
        {
          dispatch_release(v7);
          *((void *)v4 - 2) = 0;
        }
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(AMCP::Utility::Dispatch_Queue *this)
{
  dispatch_release(*((dispatch_object_t *)this + 39));
  std::mutex::~mutex((std::mutex *)((char *)this + 240));
  uint64_t v4 = (void **)((char *)this + 216);
  std::vector<AMCP::Utility::Dispatch_Queue::Event_Source>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::mutex::~mutex((std::mutex *)((char *)this + 152));
  uint64_t v4 = (void **)((char *)this + 128);
  std::vector<AMCP::Utility::Dispatch_Queue::Event_Source>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::mutex::~mutex((std::mutex *)this + 1);
  uint64_t v4 = (void **)((char *)this + 40);
  std::vector<AMCP::Utility::Dispatch_Queue::Event_Source>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  if (*(void *)this) {
    dispatch_release(*(dispatch_object_t *)this);
  }
}

void AMCP::Utility::Dispatch_Queue::create_serial_with_workloop(AMCP::Utility::Dispatch_Queue *a1, char *label)
{
  inactive = dispatch_workloop_create_inactive(label);
  if (inactive)
  {
    dispatch_workloop_set_scheduler_priority();
    dispatch_activate(inactive);
  }
  uint64_t v5 = dispatch_queue_create_with_target_V2(label, 0, inactive);
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue(a1, v5);
  if (v5) {
    dispatch_release(v5);
  }
  int v6 = *((void *)a1 + 3);
  *((void *)a1 + 3) = inactive;
  if (v6)
  {
    dispatch_release(v6);
  }
}

void AMCP::Utility::Dispatch_Queue::create_concurrent_with_workloop(AMCP::Utility::Dispatch_Queue *a1, char *label)
{
  inactive = dispatch_workloop_create_inactive(label);
  if (inactive)
  {
    dispatch_workloop_set_scheduler_priority();
    dispatch_activate(inactive);
  }
  uint64_t v5 = dispatch_queue_create_with_target_V2(label, MEMORY[0x1E4F14430], inactive);
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue(a1, v5);
  if (v5) {
    dispatch_release(v5);
  }
  int v6 = *((void *)a1 + 3);
  *((void *)a1 + 3) = inactive;
  if (v6)
  {
    dispatch_release(v6);
  }
}

void AMCP::Utility::Dispatch_Queue::after(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 32));
  if (v4) {
    atomic_store(1u, (unsigned __int8 *)(a1 + 33));
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    int v6 = std::__shared_weak_count::lock(v5);
    uint64_t v7 = v6;
    if (v6)
    {
      uint64_t v8 = *(void *)(a1 + 8);
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  atomic_fetch_add((atomic_ullong *volatile)(a1 + 304), 1uLL);
  dispatch_time_t v9 = dispatch_time(0, 12000);
  long long v10 = *(NSObject **)a1;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1174405120;
  _OWORD v11[2] = ___ZNK4AMCP7Utility14Dispatch_Queue5afterEyU13block_pointerFvvE_block_invoke;
  void v11[3] = &unk_1F1467508;
  void v11[5] = a1;
  v11[6] = v8;
  std::string::size_type v12 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  v11[4] = a2;
  dispatch_after(v9, v10, v11);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZNK4AMCP7Utility14Dispatch_Queue5afterEyU13block_pointerFvvE_block_invoke(void *a1)
{
  uint64_t v2 = a1[5];
  long long v3 = (std::__shared_weak_count *)a1[7];
  if (v3)
  {
    unsigned __int8 v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = a1[6];
      if (v5)
      {
        unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v5 + 32));
        if ((v6 & 1) == 0) {
          (*(void (**)(void))(a1[4] + 16))();
        }
      }
    }
  }
  else
  {
    unsigned __int8 v4 = 0;
  }
  atomic_fetch_add((atomic_ullong *volatile)(v2 + 304), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 312));
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1BAC61230(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_48c55_ZTSNSt3__18weak_ptrIKN4AMCP7Utility14Dispatch_QueueEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_e8_48c55_ZTSNSt3__18weak_ptrIKN4AMCP7Utility14Dispatch_QueueEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void AMCP::Utility::Dispatch_Queue::async_on_global(void *a1)
{
  global_queue = dispatch_get_global_queue(-2, 0);
  if (global_queue)
  {
    long long v3 = global_queue;
    dispatch_retain(global_queue);
    dispatch_async(v3, a1);
    dispatch_release(v3);
  }
  else
  {
    dispatch_async(0, a1);
  }
}

void AMCP::Utility::Dispatch_Queue::flush_all_work(AMCP::Utility::Dispatch_Queue *this)
{
  if (*(void *)this)
  {
    atomic_store(0, (unsigned __int8 *)this + 33);
    atomic_store(1u, (unsigned __int8 *)this + 32);
    uint64_t v2 = atomic_load((unint64_t *)this + 38);
    if (v2 >= 1)
    {
      do
      {
        dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 39), 0xFFFFFFFFFFFFFFFFLL);
        uint64_t v3 = atomic_load((unint64_t *)this + 38);
      }
      while (v3 > 0);
    }
    unsigned __int8 v4 = *(NSObject **)this;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZN10applesauce8dispatch2v19sync_implIZNK4AMCP7Utility14Dispatch_Queue14flush_all_workEvE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke;
    block[3] = &__block_descriptor_tmp_8_4665;
    void block[4] = &v5;
    dispatch_sync(v4, block);
  }
}

void ___ZN4AMCP7Utility14Dispatch_Queue26install_mach_port_receiverEjU13block_pointerFvvEbb_block_invoke(uint64_t a1)
{
  kern_return_t v5;
  kern_return_t v6;
  kern_return_t v7;
  kern_return_t v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  kern_return_t v14;
  uint64_t v15;

  std::logic_error v15 = *MEMORY[0x1E4F143B8];
  mach_port_name_t v1 = *(_DWORD *)(a1 + 32);
  if (v1)
  {
    int v2 = *(unsigned __int8 *)(a1 + 36);
    int v3 = *(unsigned __int8 *)(a1 + 37);
    if (!(v2 | v3) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      dispatch_time_t v9 = 136315394;
      long long v10 = "Dispatch_Queue.cpp";
      long long v11 = 1024;
      std::string::size_type v12 = 140;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AMCP::Utility::Destroy_Port: not going to destroy anything this way", (uint8_t *)&v9, 0x12u);
    }
    unsigned __int8 v4 = (ipc_space_t *)MEMORY[0x1E4F14960];
    if (v2)
    {
      char v5 = mach_port_deallocate(*MEMORY[0x1E4F14960], v1);
      if (v5)
      {
        unsigned __int8 v6 = v5;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          dispatch_time_t v9 = 136315650;
          long long v10 = "Dispatch_Queue.cpp";
          long long v11 = 1024;
          std::string::size_type v12 = 148;
          uint64_t v13 = 1024;
          std::string v14 = v6;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AMCP::Utility::Destroy_Port: deallocating the send right failed, Error: 0x%X", (uint8_t *)&v9, 0x18u);
        }
      }
    }
    if (v3)
    {
      uint64_t v7 = mach_port_mod_refs(*v4, v1, 1u, -1);
      if (v7)
      {
        uint64_t v8 = v7;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          dispatch_time_t v9 = 136315650;
          long long v10 = "Dispatch_Queue.cpp";
          long long v11 = 1024;
          std::string::size_type v12 = 158;
          uint64_t v13 = 1024;
          std::string v14 = v8;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AMCP::Utility::Destroy_Port: deallocating the receive right failed, Error: 0x%X", (uint8_t *)&v9, 0x18u);
        }
      }
    }
  }
}

void AMCP::Utility::Dispatch_Queue::remove_mach_port_receiver(AMCP::Utility::Dispatch_Queue *this, int a2)
{
  unsigned __int8 v4 = (std::mutex *)((char *)this + 152);
  std::mutex::lock((std::mutex *)((char *)this + 152));
  uint64_t v5 = *((void *)this + 16);
  uint64_t v6 = *((void *)this + 17);
  if (v5 != v6)
  {
    while (*(_DWORD *)(v5 + 8) != a2)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_21;
      }
    }
  }
  if (v5 != v6)
  {
    if (*(void *)v5)
    {
      dispatch_source_cancel(*(dispatch_source_t *)v5);
      uint64_t v6 = *((void *)this + 17);
    }
    if (v5 + 16 != v6)
    {
      do
      {
        if (*(void *)v5) {
          dispatch_release(*(dispatch_object_t *)v5);
        }
        uint64_t v7 = *(NSObject **)(v5 + 16);
        *(void *)uint64_t v5 = v7;
        *(_DWORD *)(v5 + 8) = *(_DWORD *)(v5 + 24);
        if (v7) {
          dispatch_retain(v7);
        }
        uint64_t v8 = v5 + 16;
        uint64_t v9 = v5 + 32;
        v5 += 16;
      }
      while (v9 != v6);
      uint64_t v6 = *((void *)this + 17);
      uint64_t v5 = v8;
    }
    if (v6 != v5)
    {
      uint64_t v10 = v6;
      do
      {
        std::string::size_type v12 = *(NSObject **)(v10 - 16);
        v10 -= 16;
        long long v11 = v12;
        if (v12)
        {
          dispatch_release(v11);
          *(void *)(v6 - 16) = 0;
        }
        uint64_t v6 = v10;
      }
      while (v10 != v5);
    }
    *((void *)this + 17) = v5;
  }
LABEL_21:

  std::mutex::unlock(v4);
}

void HALS_PDPlugIn::ObjectPropertiesChanged(HALS_PDPlugIn *this, HALS_ObjectMap *a2, unsigned int a3, const AudioObjectPropertyAddress *a4, HALS_Client *a5)
{
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2000000000;
  char v20 = 0;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 0x40000000;
  uint64_t v15[2] = ___ZN13HALS_PDPlugIn23ObjectPropertiesChangedEjjPK26AudioObjectPropertyAddressP11HALS_Client_block_invoke;
  v15[3] = &unk_1E6231508;
  int v16 = (int)a2;
  v15[4] = &v17;
  void v15[5] = this;
  uint64_t v10 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPlugIn *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v10, (uint64_t)v15);
  if (*((unsigned char *)v18 + 24))
  {
    uint64_t v11 = HALS_ObjectMap::CopyObjectByObjectID(a2);
    uint64_t v13 = (HALS_ObjectMap *)v11;
    if (v11)
    {
      if (a5) {
        uint64_t v14 = *((unsigned int *)a5 + 4);
      }
      else {
        uint64_t v14 = 0;
      }
      HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*(unsigned int *)(v11 + 16), v14, a3, a4);
    }
    HALS_ObjectMap::ReleaseObject(v13, v12);
  }
  _Block_object_dispose(&v17, 8);
}

void sub_1BAC617D8(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  HALS_ObjectMap::ReleaseObject(v17, a2);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

__int32 *___ZN13HALS_PDPlugIn23ObjectPropertiesChangedEjjPK26AudioObjectPropertyAddressP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(__int32 **)(v2 + 552);
  uint64_t result = wmemchr(*(__int32 **)(v2 + 544), *(_DWORD *)(a1 + 48), ((uint64_t)v3 - *(void *)(v2 + 544)) >> 2);
  if (result) {
    uint64_t v5 = result;
  }
  else {
    uint64_t v5 = v3;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v5 != *(__int32 **)(v2 + 552);
  return result;
}

void HALS_PDPlugIn::ObjectsPublishedAndDied(HALS_PDPlugIn *this, HALS_ObjectMap *a2, uint64_t a3, const unsigned int *a4, uint64_t a5, const unsigned int *a6, HALS_Client *a7)
{
  uint64_t v21 = 0;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x2000000000;
  char v24 = 0;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 0x40000000;
  v18[2] = ___ZN13HALS_PDPlugIn23ObjectsPublishedAndDiedEjjPKjjS1_P11HALS_Client_block_invoke;
  void v18[3] = &unk_1E62314E0;
  v18[4] = &v21;
  v18[5] = this;
  int v19 = a5;
  int v20 = a3;
  v18[6] = a6;
  v18[7] = a4;
  uint64_t v13 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPlugIn *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v13, (uint64_t)v18);
  if (a2 == 1)
  {
    HALS_ObjectMap::RetainObject(this, v14);
    std::logic_error v15 = this;
  }
  else
  {
    std::logic_error v15 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(a2);
    if (!v15) {
      goto LABEL_5;
    }
  }
  (*(void (**)(HALS_ObjectMap *, uint64_t, const unsigned int *, uint64_t, const unsigned int *))(*(void *)v15 + 192))(v15, a3, a4, a5, a6);
LABEL_5:
  if (*((unsigned char *)v22 + 24))
  {
    uint64_t v17 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    *(void *)&v25.signed int mSelector = 0x676C6F6264657623;
    v25.uint64_t mElement = 0;
    HALS_Object::PropertiesChanged(this, v17, 0, 1u, &v25);
  }
  HALS_ObjectMap::ReleaseObject(v15, v16);
  _Block_object_dispose(&v21, 8);
}

void sub_1BAC61A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN13HALS_PDPlugIn23ObjectsPublishedAndDiedEjjPKjjS1_P11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(_DWORD *)(a1 + 64))
  {
    unint64_t v3 = 0;
    do
    {
      unsigned __int8 v4 = (HALS_ObjectMap *)*(unsigned int *)(*(void *)(a1 + 48) + 4 * v3);
      uint64_t v5 = *(__int32 **)(v2 + 600);
      uint64_t v6 = wmemchr(*(__int32 **)(v2 + 592), *(_DWORD *)(*(void *)(a1 + 48) + 4 * v3), ((uint64_t)v5 - *(void *)(v2 + 592)) >> 2);
      if (v6) {
        uint64_t v5 = v6;
      }
      uint64_t v7 = *(__int32 **)(v2 + 600);
      if (v5 != v7)
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
        int64_t v8 = (char *)v7 - (char *)(v5 + 1);
        if (v7 != v5 + 1) {
          memmove(v5, v5 + 1, (char *)v7 - (char *)(v5 + 1));
        }
        *(void *)(v2 + 600) = (char *)v5 + v8;
      }
      uint64_t v9 = *(__int32 **)(v2 + 576);
      uint64_t v10 = wmemchr(*(__int32 **)(v2 + 568), (__int32)v4, ((uint64_t)v9 - *(void *)(v2 + 568)) >> 2);
      if (v10) {
        uint64_t v9 = v10;
      }
      uint64_t v11 = *(__int32 **)(v2 + 576);
      if (v9 != v11)
      {
        int64_t v12 = (char *)v11 - (char *)(v9 + 1);
        if (v11 != v9 + 1) {
          memmove(v9, v9 + 1, (char *)v11 - (char *)(v9 + 1));
        }
        *(void *)(v2 + 576) = (char *)v9 + v12;
      }
      uint64_t v13 = *(__int32 **)(v2 + 552);
      uint64_t v14 = wmemchr(*(__int32 **)(v2 + 544), (__int32)v4, ((uint64_t)v13 - *(void *)(v2 + 544)) >> 2);
      if (v14) {
        uint64_t v13 = v14;
      }
      std::logic_error v15 = *(__int32 **)(v2 + 552);
      if (v13 != v15)
      {
        int64_t v16 = (char *)v15 - (char *)(v13 + 1);
        if (v15 != v13 + 1) {
          memmove(v13, v13 + 1, (char *)v15 - (char *)(v13 + 1));
        }
        *(void *)(v2 + 552) = (char *)v13 + v16;
      }
      uint64_t v17 = HALS_ObjectMap::CopyObjectByObjectID(v4);
      uint64_t v18 = (HALS_ObjectMap *)v17;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
      HALS_ObjectMap::ObjectIsDead(v4);
      HALS_ObjectMap::ReleaseObject(v18, v19);
      ++v3;
    }
    while (v3 < *(unsigned int *)(a1 + 64));
  }
  if (*(_DWORD *)(a1 + 68))
  {
    for (unint64_t i = 0; i < *(unsigned int *)(a1 + 68); ++i)
    {
      uint64_t v21 = (HALS_ObjectMap *)*(unsigned int *)(*(void *)(a1 + 56) + 4 * i);
      uint64_t v22 = *(__int32 **)(v2 + 576);
      uint64_t v23 = wmemchr(*(__int32 **)(v2 + 568), *(_DWORD *)(*(void *)(a1 + 56) + 4 * i), ((uint64_t)v22 - *(void *)(v2 + 568)) >> 2);
      if (v23) {
        uint64_t v22 = v23;
      }
      char v24 = *(__int32 **)(v2 + 576);
      if (v22 == v24) {
        continue;
      }
      int64_t v25 = (char *)v24 - (char *)(v22 + 1);
      if (v24 != v22 + 1) {
        memmove(v22, v22 + 1, (char *)v24 - (char *)(v22 + 1));
      }
      *(void *)(v2 + 576) = (char *)v22 + v25;
      uint64_t v26 = HALS_ObjectMap::CopyObjectByObjectID(v21);
      uint64_t v28 = (HALS_Device *)v26;
      if (v26)
      {
        int v29 = *(_DWORD *)(v26 + 20);
        if (v29 <= 1701078389)
        {
          if (v29 == 1633773415 || v29 == 1633969526)
          {
LABEL_46:
            *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
            uint64_t v33 = *(char **)(v2 + 600);
            unint64_t v34 = *(void *)(v2 + 608);
            if ((unint64_t)v33 >= v34)
            {
              __int16 v36 = *(char **)(v2 + 592);
              uint64_t v37 = (v33 - v36) >> 2;
              unint64_t v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 62) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v39 = v34 - (void)v36;
              if (v39 >> 1 > v38) {
                unint64_t v38 = v39 >> 1;
              }
              BOOL v40 = (unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v40) {
                unint64_t v41 = v38;
              }
              if (v41)
              {
                unint64_t v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v41);
                uint64_t v33 = *(char **)(v2 + 600);
                __int16 v36 = *(char **)(v2 + 592);
              }
              else
              {
                uint64_t v42 = 0;
              }
              int v43 = (_DWORD *)(v41 + 4 * v37);
              *int v43 = v21;
              int v35 = v43 + 1;
              while (v33 != v36)
              {
                int v44 = *((_DWORD *)v33 - 1);
                v33 -= 4;
                *--int v43 = v44;
              }
              *(void *)(v2 + 592) = v43;
              *(void *)(v2 + 600) = v35;
              *(void *)(v2 + 608) = v41 + 4 * v42;
              if (v36) {
                operator delete(v36);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v33 = v21;
              int v35 = v33 + 4;
            }
            *(void *)(v2 + 600) = v35;
            (**(void (***)(HALS_Device *))v28)(v28);
            HALS_Device::UpdateInternalIOContext(v28);
            goto LABEL_62;
          }
        }
        else if (v29 == 1701078390 || v29 == 1701733488 || v29 == 1919182198)
        {
          goto LABEL_46;
        }
        int v45 = *(_DWORD *)(v26 + 24);
        if (v29 != v45)
        {
          if (v45 <= 1701078389)
          {
            if (v45 == 1633773415 || v45 == 1633969526) {
              goto LABEL_46;
            }
          }
          else if (v45 == 1701078390 || v45 == 1919182198 || v45 == 1701733488)
          {
            goto LABEL_46;
          }
        }
        (**(void (***)(uint64_t))v26)(v26);
      }
LABEL_62:
      HALS_ObjectMap::ReleaseObject(v28, v27);
    }
  }
}

void sub_1BAC61E34(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void HALS_PDPlugIn::CreateObject(HALS_PDPlugIn *this, HALS_Object *a2, HALS_ObjectMap *a3, HALS_Client *a4)
{
  if (a3 == 1) {
    HALS_ObjectMap::RetainObject(this, a2);
  }
  else {
    HALS_ObjectMap::CopyObjectByObjectID(a3);
  }
  if ((int)a2 > 1701078389)
  {
    if (a2 != 1701078390 && a2 != 1919182198 && a2 != 1701733488) {
      goto LABEL_13;
    }
  }
  else if (a2 != 1633773415 && a2 != 1633969526)
  {
    if (a2 == 1634956402) {
      operator new();
    }
LABEL_13:
    if (HALB_Info::IsSubClass(a2, 1633907820)) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1BAC621C8(_Unwind_Exception *a1)
{
  MEMORY[0x1C1859840](v2, 0x10E1C4000EA2748);
  HALS_ObjectMap::ReleaseObject(v1, v4);
  _Unwind_Resume(a1);
}

void ___ZN13HALS_PDPlugIn12CreateObjectEjjP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  unint64_t v3 = (char *)v2[69];
  unint64_t v4 = v2[70];
  if ((unint64_t)v3 >= v4)
  {
    uint64_t v6 = (char *)v2[68];
    uint64_t v7 = (v3 - v6) >> 2;
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 62) {
      goto LABEL_32;
    }
    uint64_t v9 = v4 - (void)v6;
    if (v9 >> 1 > v8) {
      unint64_t v8 = v9 >> 1;
    }
    BOOL v10 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v10) {
      unint64_t v11 = v8;
    }
    if (v11)
    {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v11);
      unint64_t v3 = (char *)v2[69];
      uint64_t v6 = (char *)v2[68];
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = (_DWORD *)(v11 + 4 * v7);
    unint64_t v14 = v11 + 4 * v12;
    _DWORD *v13 = *(_DWORD *)(a1 + 40);
    uint64_t v5 = v13 + 1;
    while (v3 != v6)
    {
      int v15 = *((_DWORD *)v3 - 1);
      v3 -= 4;
      *--uint64_t v13 = v15;
    }
    v2[68] = v13;
    v2[69] = v5;
    v2[70] = v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v3 = *(_DWORD *)(a1 + 40);
    uint64_t v5 = v3 + 4;
  }
  v2[69] = v5;
  int64_t v16 = (char *)v2[72];
  unint64_t v17 = v2[73];
  if ((unint64_t)v16 < v17)
  {
    *(_DWORD *)int64_t v16 = *(_DWORD *)(a1 + 40);
    uint64_t v18 = v16 + 4;
    goto LABEL_31;
  }
  int v19 = (char *)v2[71];
  uint64_t v20 = (v16 - v19) >> 2;
  unint64_t v21 = v20 + 1;
  if ((unint64_t)(v20 + 1) >> 62) {
LABEL_32:
  }
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  uint64_t v22 = v17 - (void)v19;
  if (v22 >> 1 > v21) {
    unint64_t v21 = v22 >> 1;
  }
  BOOL v10 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL;
  unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
  if (!v10) {
    unint64_t v23 = v21;
  }
  if (v23)
  {
    unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v23);
    int64_t v16 = (char *)v2[72];
    int v19 = (char *)v2[71];
  }
  else
  {
    uint64_t v24 = 0;
  }
  int64_t v25 = (_DWORD *)(v23 + 4 * v20);
  unint64_t v26 = v23 + 4 * v24;
  *int64_t v25 = *(_DWORD *)(a1 + 40);
  uint64_t v18 = v25 + 1;
  while (v16 != v19)
  {
    int v27 = *((_DWORD *)v16 - 1);
    v16 -= 4;
    *--int64_t v25 = v27;
  }
  v2[71] = v25;
  v2[72] = v18;
  v2[73] = v26;
  if (v19) {
    operator delete(v19);
  }
LABEL_31:
  v2[72] = v18;
}

void HALS_PDPlugIn::_CopyDeviceList(uint64_t a1, void **a2)
{
  uint64_t v2 = *(unsigned int **)(a1 + 592);
  for (unint64_t i = *(unsigned int **)(a1 + 600); v2 != i; ++v2)
  {
    uint64_t v5 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v2);
    uint64_t v7 = v5;
    if (v5)
    {
      HALS_ObjectMap::RetainObject(v5, v6);
      uint64_t v9 = (HALS_ObjectMap **)a2[1];
      unint64_t v8 = (unint64_t)a2[2];
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v11 = ((char *)v9 - (unsigned char *)*a2) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v8 - (void)*a2;
        uint64_t v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
          uint64_t v13 = v11 + 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v14);
        }
        else {
          uint64_t v6 = 0;
        }
        int v15 = (HALS_ObjectMap **)(v14 + 8 * v11);
        *int v15 = v7;
        BOOL v10 = v15 + 1;
        unint64_t v17 = (char *)*a2;
        int64_t v16 = (char *)a2[1];
        if (v16 != *a2)
        {
          do
          {
            uint64_t v18 = (HALS_ObjectMap *)*((void *)v16 - 1);
            v16 -= 8;
            *--int v15 = v18;
          }
          while (v16 != v17);
          int64_t v16 = (char *)*a2;
        }
        *a2 = v15;
        a2[1] = v10;
        a2[2] = (void *)(v14 + 8 * (void)v6);
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        __int32 *v9 = v7;
        BOOL v10 = v9 + 1;
      }
      a2[1] = v10;
    }
    HALS_ObjectMap::ReleaseObject(v7, v6);
  }
}

void sub_1BAC62504(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_PDPlugIn::GetMIGDispatchQueue(HALS_PDPlugIn *this)
{
  return *((void *)this + 42);
}

{
  return *((void *)this + 42);
}

uint64_t HALS_PDPlugIn::GetCommandGate(HALS_PDPlugIn *this)
{
  return *((void *)this + 41);
}

{
  return *((void *)this + 41);
}

uint64_t HALS_PDPlugIn::_Deactivate(uint64_t (**this)(void))
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t result = this[47]();
  if (result)
  {
    v4[0] = BYTE3(result);
    v4[1] = BYTE2(result);
    v4[2] = BYTE1(result);
    int v3 = result;
    v4[3] = result;
    v4[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v6 = "HALS_PDPUCPlugIn.cpp";
      __int16 v7 = 1024;
      int v8 = 117;
      __int16 v9 = 1024;
      int v10 = v3;
      __int16 v11 = 2080;
      uint64_t v12 = v4;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPUCPlugIn::Teardown: got an error from the plug-in, Error: %d (%s)", buf, 0x22u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v3;
  }
  return result;
}

void HALS_PDPlugIn::~HALS_PDPlugIn(HALS_PDPlugIn *this)
{
  HALS_PDPlugIn::~HALS_PDPlugIn(this);

  JUMPOUT(0x1C1859840);
}

{
  HALB_Mutex *v2;
  AMCP::Utility::Dispatch_Queue *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1F1467548;
  uint64_t v2 = (HALB_Mutex *)*((void *)this + 41);
  if (v2)
  {
    HALB_Mutex::~HALB_Mutex(v2);
    MEMORY[0x1C1859840]();
  }
  int v3 = (AMCP::Utility::Dispatch_Queue *)*((void *)this + 42);
  if (v3)
  {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v3);
    MEMORY[0x1C1859840]();
  }
  unint64_t v4 = (void *)*((void *)this + 74);
  if (v4)
  {
    *((void *)this + 75) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 71);
  if (v5)
  {
    *((void *)this + 72) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 68);
  if (v6)
  {
    *((void *)this + 69) = v6;
    operator delete(v6);
  }
  HALB_CFBundle::~HALB_CFBundle((HALS_PDPlugIn *)((char *)this + 344));
  *(void *)this = &unk_1F14725F8;
  CACFString::~CACFString((HALS_PDPlugIn *)((char *)this + 48));

  HALS_Object::~HALS_Object(this);
}

uint64_t HALS_PDPlugIn::Activate(HALS_PDPlugIn *this, HALS_Object *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  HALS_Object::Activate(this, a2);
  uint64_t result = (*((uint64_t (**)(char *))this + 46))((char *)this + 488);
  if (result)
  {
    v6[0] = BYTE3(result);
    v6[1] = BYTE2(result);
    v6[2] = BYTE1(result);
    int v4 = result;
    v6[3] = result;
    v6[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      int v8 = "HALS_PDPUCPlugIn.cpp";
      __int16 v9 = 1024;
      int v10 = 111;
      __int16 v11 = 1024;
      int v12 = v4;
      __int16 v13 = 2080;
      unint64_t v14 = v6;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPUCPlugIn::Initialize: got an error from the plug-in, Error: %d (%s)", buf, 0x22u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v4;
  }
  return result;
}

void HALS_PDPlugIn::HALS_PDPlugIn(HALS_PDPlugIn *this, HALS_System *a2, const __CFURL *a3, uint64_t a4, HALS_Object *a5)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  HALS_DeviceManager::HALS_DeviceManager(this, a2, @"temporary", a4, a5);
  *__int16 v7 = &unk_1F1467548;
  if (a3) {
    CFRetain(a3);
  }
  v52[0] = &unk_1F14676A0;
  v52[1] = a3;
  *((void *)this + 43) = &unk_1F1461AA8;
  int v8 = CFBundleCreate(0, a3);
  *((void *)this + 44) = v8;
  *((unsigned char *)this + 360) = 1;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((void *)this + 60) = 0;
  if (!v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_PDPUCPlugIn.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 47;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: failed to create the bundle", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  if (CFBundlePreflightExecutable(v8, 0))
  {
    __int16 v9 = (__CFBundle *)*((void *)this + 44);
    if (v9 && CFBundleLoadExecutableAndReturnError(v9, 0))
    {
      int v10 = (void *)((char *)this + 368);
      __int16 v11 = (__CFBundle *)*((void *)this + 44);
      if (v11)
      {
        FunctionPointerForName = CFBundleGetFunctionPointerForName(v11, @"PhysicalDevicePlugIn_Initialize");
        *int v10 = FunctionPointerForName;
        if (FunctionPointerForName)
        {
          __int16 v13 = (__CFBundle *)*((void *)this + 44);
          if (v13)
          {
            unint64_t v14 = CFBundleGetFunctionPointerForName(v13, @"PhysicalDevicePlugIn_Teardown");
            *((void *)this + 47) = v14;
            if (v14)
            {
              uint64_t v15 = (__CFBundle *)*((void *)this + 44);
              if (v15)
              {
                int64_t v16 = CFBundleGetFunctionPointerForName(v15, @"PhysicalDevicePlugIn_ObjectHasProperty");
                *((void *)this + 49) = v16;
                if (v16)
                {
                  unint64_t v17 = (__CFBundle *)*((void *)this + 44);
                  if (v17)
                  {
                    uint64_t v18 = CFBundleGetFunctionPointerForName(v17, @"PhysicalDevicePlugIn_ObjectIsPropertySettable");
                    *((void *)this + 50) = v18;
                    if (v18)
                    {
                      int v19 = (__CFBundle *)*((void *)this + 44);
                      if (v19)
                      {
                        uint64_t v20 = CFBundleGetFunctionPointerForName(v19, @"PhysicalDevicePlugIn_ObjectGetPropertyDataSize");
                        *((void *)this + 51) = v20;
                        if (v20)
                        {
                          unint64_t v21 = (__CFBundle *)*((void *)this + 44);
                          if (v21)
                          {
                            uint64_t v22 = CFBundleGetFunctionPointerForName(v21, @"PhysicalDevicePlugIn_ObjectGetPropertyData");
                            *((void *)this + 52) = v22;
                            if (v22)
                            {
                              unint64_t v23 = (__CFBundle *)*((void *)this + 44);
                              if (v23)
                              {
                                uint64_t v24 = CFBundleGetFunctionPointerForName(v23, @"PhysicalDevicePlugIn_ObjectSetPropertyData");
                                *((void *)this + 53) = v24;
                                if (v24)
                                {
                                  int64_t v25 = (__CFBundle *)*((void *)this + 44);
                                  if (v25)
                                  {
                                    unint64_t v26 = CFBundleGetFunctionPointerForName(v25, @"PhysicalDevicePlugIn_GetZeroTimeStamp");
                                    *((void *)this + 54) = v26;
                                    if (v26)
                                    {
                                      int v27 = (__CFBundle *)*((void *)this + 44);
                                      if (v27)
                                      {
                                        uint64_t v28 = CFBundleGetFunctionPointerForName(v27, @"PhysicalDevicePlugIn_BeginIOCycle");
                                        *((void *)this + 55) = v28;
                                        if (v28)
                                        {
                                          int v29 = (__CFBundle *)*((void *)this + 44);
                                          if (v29)
                                          {
                                            uint64_t v30 = CFBundleGetFunctionPointerForName(v29, @"PhysicalDevicePlugIn_AcquireIOBufferForStream");
                                            *((void *)this + 56) = v30;
                                            if (v30)
                                            {
                                              int v31 = (__CFBundle *)*((void *)this + 44);
                                              if (v31)
                                              {
                                                char v32 = CFBundleGetFunctionPointerForName(v31, @"PhysicalDevicePlugIn_ReadFromStream");
                                                *((void *)this + 57) = v32;
                                                if (v32)
                                                {
                                                  uint64_t v33 = (__CFBundle *)*((void *)this + 44);
                                                  if (v33)
                                                  {
                                                    unint64_t v34 = CFBundleGetFunctionPointerForName(v33, @"PhysicalDevicePlugIn_WriteToStream");
                                                    *((void *)this + 58) = v34;
                                                    if (v34)
                                                    {
                                                      int v35 = (__CFBundle *)*((void *)this + 44);
                                                      if (v35)
                                                      {
                                                        __int16 v36 = CFBundleGetFunctionPointerForName(v35, @"PhysicalDevicePlugIn_ReleaseIOBufferForStream");
                                                        *((void *)this + 59) = v36;
                                                        if (v36)
                                                        {
                                                          uint64_t v37 = (__CFBundle *)*((void *)this + 44);
                                                          if (v37)
                                                          {
                                                            unint64_t v38 = CFBundleGetFunctionPointerForName(v37, @"PhysicalDevicePlugIn_EndIOCycle");
                                                            *((void *)this + 60) = v38;
                                                            if (v38)
                                                            {
                                                              uint64_t v39 = (__CFBundle *)*((void *)this + 44);
                                                              if (v39)
                                                              {
                                                                BOOL v40 = CFBundleGetFunctionPointerForName(v39, @"PhysicalDevicePlugIn_PerformDeviceConfigChange");
                                                                *((void *)this + 48) = v40;
                                                                if (v40)
                                                                {
                                                                  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v52);
                                                                  *((void *)this + 61) = HALS_PDPlugIn::Host_ObjectPropertyChanged;
                                                                  *((void *)this + 62) = HALS_PDPlugIn::Host_PhysicalDevicesCreated;
                                                                  *((void *)this + 63) = HALS_PDPlugIn::Host_PhysicalDevicesDestroyed;
                                                                  *((void *)this + 64) = HALS_PDPlugIn::Host_RequestDeviceConfigChange;
                                                                  *((void *)this + 65) = this;
                                                                  *((void *)this + 66) = *((unsigned int *)this + 4);
                                                                  *((void *)this + 67) = HALS_PDPlugIn::Host_ObjectsCreatedAndDestroyed;
                                                                  *((_OWORD *)this + 34) = 0u;
                                                                  *((_OWORD *)this + 35) = 0u;
                                                                  *((_OWORD *)this + 36) = 0u;
                                                                  *((_OWORD *)this + 37) = 0u;
                                                                  *((void *)this + 76) = 0;
                                                                  unint64_t v41 = (__CFBundle *)*((void *)this + 44);
                                                                  if (v41) {
                                                                    CFStringRef Identifier = CFBundleGetIdentifier(v41);
                                                                  }
                                                                  else {
                                                                    CFStringRef Identifier = 0;
                                                                  }
                                                                  *(void *)AudioObjectPropertyAddress buf = &unk_1F1489A20;
                                                                  *(void *)&uint8_t buf[8] = Identifier;
                                                                  CACFString::operator=((uint64_t)this + 48, Identifier);
                                                                  CFIndex v43 = OS::CF::String::AsCString((CFIndex)buf, (UInt8 *)this + 64, 256);
                                                                  MEMORY[0x1F4188790](v43);
                                                                  snprintf(v51, 0x11FuLL, "com.apple.audio.manager.%s", (const char *)this + 64);
                                                                  operator new();
                                                                }
                                                              }
                                                              else
                                                              {
                                                                *((void *)this + 48) = 0;
                                                              }
                                                              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))goto LABEL_96; {
                                                              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                                                              }
                                                              *(void *)&uint8_t buf[4] = "HALS_PDPUCPlugIn.cpp";
                                                              *(_WORD *)&unsigned char buf[12] = 1024;
                                                              *(_DWORD *)&buf[14] = 101;
                                                              long long v48 = MEMORY[0x1E4F14500];
                                                              uint64_t v49 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't"
                                                                    " get a pointer to the PerformDeviceConfigChange routine";
                                                              goto LABEL_95;
                                                            }
                                                          }
                                                          else
                                                          {
                                                            *((void *)this + 60) = 0;
                                                          }
                                                          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                                                          {
                                                            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                                                            *(void *)&uint8_t buf[4] = "HALS_PDPUCPlugIn.cpp";
                                                            *(_WORD *)&unsigned char buf[12] = 1024;
                                                            *(_DWORD *)&buf[14] = 98;
                                                            long long v48 = MEMORY[0x1E4F14500];
                                                            uint64_t v49 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't g"
                                                                  "et a pointer to the EndIOCycle routine";
                                                            goto LABEL_95;
                                                          }
LABEL_96:
                                                          int v47 = 2003329396;
LABEL_97:
                                                          std::string v50 = __cxa_allocate_exception(0x10uLL);
                                                          *(void *)std::string v50 = off_1F148A5D8;
                                                          v50[2] = v47;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        *((void *)this + 59) = 0;
                                                      }
                                                      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                                                        goto LABEL_96;
                                                      }
                                                      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                                                      *(void *)&uint8_t buf[4] = "HALS_PDPUCPlugIn.cpp";
                                                      *(_WORD *)&unsigned char buf[12] = 1024;
                                                      *(_DWORD *)&buf[14] = 95;
                                                      long long v48 = MEMORY[0x1E4F14500];
                                                      uint64_t v49 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a p"
                                                            "ointer to the ReleaseIOBufferForStream routine";
LABEL_95:
                                                      _os_log_impl(&dword_1BAA78000, v48, OS_LOG_TYPE_ERROR, v49, buf, 0x12u);
                                                      goto LABEL_96;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    *((void *)this + 58) = 0;
                                                  }
                                                  if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                                                    goto LABEL_96;
                                                  }
                                                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                                                  *(void *)&uint8_t buf[4] = "HALS_PDPUCPlugIn.cpp";
                                                  *(_WORD *)&unsigned char buf[12] = 1024;
                                                  *(_DWORD *)&buf[14] = 92;
                                                  long long v48 = MEMORY[0x1E4F14500];
                                                  uint64_t v49 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a point"
                                                        "er to the WriteToStream routine";
                                                  goto LABEL_95;
                                                }
                                              }
                                              else
                                              {
                                                *((void *)this + 57) = 0;
                                              }
                                              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                                                goto LABEL_96;
                                              }
                                              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                                              *(void *)&uint8_t buf[4] = "HALS_PDPUCPlugIn.cpp";
                                              *(_WORD *)&unsigned char buf[12] = 1024;
                                              *(_DWORD *)&buf[14] = 89;
                                              long long v48 = MEMORY[0x1E4F14500];
                                              uint64_t v49 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer t"
                                                    "o the ReadFromStream routine";
                                              goto LABEL_95;
                                            }
                                          }
                                          else
                                          {
                                            *((void *)this + 56) = 0;
                                          }
                                          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                                            goto LABEL_96;
                                          }
                                          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                                          *(void *)&uint8_t buf[4] = "HALS_PDPUCPlugIn.cpp";
                                          *(_WORD *)&unsigned char buf[12] = 1024;
                                          *(_DWORD *)&buf[14] = 86;
                                          long long v48 = MEMORY[0x1E4F14500];
                                          uint64_t v49 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to th"
                                                "e AcquireIOBufferForStream routine";
                                          goto LABEL_95;
                                        }
                                      }
                                      else
                                      {
                                        *((void *)this + 55) = 0;
                                      }
                                      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                                        goto LABEL_96;
                                      }
                                      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                                      *(void *)&uint8_t buf[4] = "HALS_PDPUCPlugIn.cpp";
                                      *(_WORD *)&unsigned char buf[12] = 1024;
                                      *(_DWORD *)&buf[14] = 83;
                                      long long v48 = MEMORY[0x1E4F14500];
                                      uint64_t v49 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the Be"
                                            "ginIOCycle routine";
                                      goto LABEL_95;
                                    }
                                  }
                                  else
                                  {
                                    *((void *)this + 54) = 0;
                                  }
                                  if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                                    goto LABEL_96;
                                  }
                                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                                  *(void *)&uint8_t buf[4] = "HALS_PDPUCPlugIn.cpp";
                                  *(_WORD *)&unsigned char buf[12] = 1024;
                                  *(_DWORD *)&buf[14] = 80;
                                  long long v48 = MEMORY[0x1E4F14500];
                                  uint64_t v49 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the GetZer"
                                        "oTimeStamp routine";
                                  goto LABEL_95;
                                }
                              }
                              else
                              {
                                *((void *)this + 53) = 0;
                              }
                              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                                goto LABEL_96;
                              }
                              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                              *(void *)&uint8_t buf[4] = "HALS_PDPUCPlugIn.cpp";
                              *(_WORD *)&unsigned char buf[12] = 1024;
                              *(_DWORD *)&buf[14] = 77;
                              long long v48 = MEMORY[0x1E4F14500];
                              uint64_t v49 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the ObjectSetP"
                                    "ropertyData routine";
                              goto LABEL_95;
                            }
                          }
                          else
                          {
                            *((void *)this + 52) = 0;
                          }
                          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                            goto LABEL_96;
                          }
                          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                          *(void *)&uint8_t buf[4] = "HALS_PDPUCPlugIn.cpp";
                          *(_WORD *)&unsigned char buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 74;
                          long long v48 = MEMORY[0x1E4F14500];
                          uint64_t v49 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the ObjectGetPropertyData routine";
                          goto LABEL_95;
                        }
                      }
                      else
                      {
                        *((void *)this + 51) = 0;
                      }
                      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                        goto LABEL_96;
                      }
                      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                      *(void *)&uint8_t buf[4] = "HALS_PDPUCPlugIn.cpp";
                      *(_WORD *)&unsigned char buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 71;
                      long long v48 = MEMORY[0x1E4F14500];
                      uint64_t v49 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the ObjectGetPropertyDataSize routine";
                      goto LABEL_95;
                    }
                  }
                  else
                  {
                    *((void *)this + 50) = 0;
                  }
                  if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                    goto LABEL_96;
                  }
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                  *(void *)&uint8_t buf[4] = "HALS_PDPUCPlugIn.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 68;
                  long long v48 = MEMORY[0x1E4F14500];
                  uint64_t v49 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the ObjectIsPropertySettable routine";
                  goto LABEL_95;
                }
              }
              else
              {
                *((void *)this + 49) = 0;
              }
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                goto LABEL_96;
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_PDPUCPlugIn.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 65;
              long long v48 = MEMORY[0x1E4F14500];
              uint64_t v49 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the ObjectHasProperty routine";
              goto LABEL_95;
            }
          }
          else
          {
            *((void *)this + 47) = 0;
          }
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_96;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_PDPUCPlugIn.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 62;
          long long v48 = MEMORY[0x1E4F14500];
          uint64_t v49 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the Teardown routine";
          goto LABEL_95;
        }
      }
      else
      {
        *int v10 = 0;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_96;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_PDPUCPlugIn.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 59;
      long long v48 = MEMORY[0x1E4F14500];
      uint64_t v49 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: Can't get a pointer to the Initialize routine";
      goto LABEL_95;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_PDPUCPlugIn.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 55;
      int v44 = MEMORY[0x1E4F14500];
      int v45 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: loading the bundle's executable failed";
LABEL_48:
      _os_log_impl(&dword_1BAA78000, v44, OS_LOG_TYPE_ERROR, v45, buf, 0x12u);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "HALS_PDPUCPlugIn.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 51;
    int v44 = MEMORY[0x1E4F14500];
    int v45 = "%25s:%-5d  HALS_PDPUCPlugIn::HALS_PDPUCPlugIn: preflighting the bundle failed";
    goto LABEL_48;
  }
  int v47 = 1852797029;
  goto LABEL_97;
}

void sub_1BAC63490(_Unwind_Exception *a1)
{
  int v4 = v1[74];
  if (v4)
  {
    v1[75] = v4;
    operator delete(v4);
  }
  uint64_t v5 = v1 + 68;
  uint64_t v6 = v1[71];
  if (v6)
  {
    v1[72] = v6;
    operator delete(v6);
  }
  __int16 v7 = *v5;
  if (*v5)
  {
    v1[69] = v7;
    operator delete(v7);
  }
  HALB_CFBundle::~HALB_CFBundle(v2);
  HALS_DeviceManager::~HALS_DeviceManager((HALS_DeviceManager *)v1);
  _Unwind_Resume(a1);
}

uint64_t HALS_PDPlugIn::Host_ObjectsCreatedAndDestroyed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 40));
  int v12 = (HALS_ObjectMap *)v11;
  if (!v11)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      unint64_t v17 = "HALS_PDPlugIn.cpp";
      __int16 v18 = 1024;
      int v19 = 585;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPlugIn::Host_ObjectsCreatedAndDestroyed: no plug-in", (uint8_t *)&v16, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 560947818;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v11 + 288))(v11, a2, a3, a4, a5, a6, 0);
  HALS_ObjectMap::ReleaseObject(v12, v13);
  return 0;
}

void sub_1BAC636D8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAC636F0(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAC635ECLL);
  }
  JUMPOUT(0x1BAC636E0);
}

void sub_1BAC63740()
{
}

uint64_t HALS_PDPlugIn::Host_RequestDeviceConfigChange(uint64_t a1, HALS_ObjectMap *a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 40));
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)blocuint64_t k = 136315394;
      *(void *)&void block[4] = "HALS_PDPlugIn.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 555;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPlugIn::Host_RequestDeviceConfigChange: no plug-in", block, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 560947818;
  }
  uint64_t v6 = HALS_ObjectMap::CopyObjectByObjectID(a2);
  if (!v6)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)blocuint64_t k = 136315394;
      *(void *)&void block[4] = "HALS_PDPlugIn.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 559;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPlugIn::Host_RequestDeviceConfigChange: no device", block, 0x12u);
    }
    __int16 v13 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v13 = off_1F148A5D8;
    v13[2] = 560947818;
  }
  kdebug_trace();
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2000000000;
  int v17 = 0;
  *(void *)blocuint64_t k = MEMORY[0x1E4F143A8];
  *(void *)&block[8] = 0x40000000;
  *(void *)&block[16] = ___ZN14HALS_PDPDevice32HandlePlugIn_RequestConfigChangeEPv_block_invoke;
  int v19 = &unk_1E6231260;
  uint64_t v20 = &v14;
  uint64_t v21 = v6;
  uint64_t v22 = a3;
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)(v6 + 1376));
  if (v7) {
    atomic_store(1u, (unsigned __int8 *)(v6 + 1377));
  }
  dispatch_sync(*(dispatch_queue_t *)(v6 + 1344), block);
  kdebug_trace();
  uint64_t v8 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(&v14, 8);
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v6, v9);
  HALS_ObjectMap::ReleaseObject(v5, v10);
  return v8;
}

void sub_1BAC63A18(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAC63A34(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2)
  {
    _Block_object_dispose(&a9, 8);
    HALS_ObjectMap::ReleaseObject(v10, v12);
    HALS_ObjectMap::ReleaseObject(v9, v13);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAC6387CLL);
  }
  JUMPOUT(0x1BAC63A24);
}

void sub_1BAC63AC0()
{
}

uint64_t HALS_PDPlugIn::Host_PhysicalDevicesDestroyed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 40));
  uint64_t v6 = (HALS_ObjectMap *)v5;
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      uint64_t v11 = "HALS_PDPlugIn.cpp";
      __int16 v12 = 1024;
      int v13 = 537;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPlugIn::Host_PhysicalDevicesDestroyed: no plug-in", (uint8_t *)&v10, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 560947818;
  }
  (*(void (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, void))(*(void *)v5 + 288))(v5, 1, 0, 0, a2, a3, 0);
  HALS_ObjectMap::ReleaseObject(v6, v7);
  return 0;
}

void sub_1BAC63C40(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAC63C58(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAC63B58);
  }
  JUMPOUT(0x1BAC63C48);
}

void sub_1BAC63C88()
{
}

uint64_t HALS_PDPlugIn::Host_PhysicalDevicesCreated(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (HALS_PDPUCPlugIn **)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 40));
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      buf.signed int mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALS_PDPlugIn.cpp";
      __int16 v26 = 1024;
      int v27 = 461;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPlugIn::Host_PhysicalDevicesCreated: no plug-in", (uint8_t *)&buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 560947818;
  }
  BYTE1(buf.mElement) = 0;
  HIWORD(buf.mElement) = 0;
  strcpy((char *)&buf, "#mtsbolg");
  if (a2)
  {
    uint64_t v6 = a2;
    unsigned __int8 v7 = a3;
    do
    {
      uint64_t PropertyDataSize = HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(v5[51], *v7, &buf, 0, 0);
      int v9 = MEMORY[0x1F4188790](PropertyDataSize);
      uint64_t v11 = &v23[-v10];
      unsigned int v24 = 4 * v9;
      HALS_PDPUCPlugIn::ObjectGetPropertyData(v5[52], *v7, &buf, 0, 0, &v24, &v23[-v10]);
      (*((void (**)(HALS_PDPUCPlugIn **, void, uint64_t, unsigned char *, void, void, void))*v5 + 36))(v5, *v7, PropertyDataSize, v11, 0, 0, 0);
      if (!PropertyDataSize)
      {
        strcpy((char *)&buf, "#mtstpni");
        BYTE1(buf.mElement) = 0;
        HIWORD(buf.mElement) = 0;
        uint64_t v12 = HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(v5[51], *v7, &buf, 0, 0);
        int v13 = MEMORY[0x1F4188790](v12);
        uint64_t v15 = &v23[-v14];
        unsigned int v24 = 4 * v13;
        HALS_PDPUCPlugIn::ObjectGetPropertyData(v5[52], *v7, &buf, 0, 0, &v24, &v23[-v14]);
        (*((void (**)(HALS_PDPUCPlugIn **, void, uint64_t, unsigned char *, void, void, void))*v5 + 36))(v5, *v7, v12, v15, 0, 0, 0);
        strcpy((char *)&buf, "#mtsptuo");
        BYTE1(buf.mElement) = 0;
        HIWORD(buf.mElement) = 0;
        uint64_t v16 = HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(v5[51], *v7, &buf, 0, 0);
        int v17 = MEMORY[0x1F4188790](v16);
        int v19 = &v23[-v18];
        unsigned int v24 = 4 * v17;
        HALS_PDPUCPlugIn::ObjectGetPropertyData(v5[52], *v7, &buf, 0, 0, &v24, &v23[-v18]);
        (*((void (**)(HALS_PDPUCPlugIn **, void, uint64_t, unsigned char *, void, void, void))*v5 + 36))(v5, *v7, v16, v19, 0, 0, 0);
      }
      ++v7;
      --v6;
    }
    while (v6);
  }
  (*((void (**)(HALS_PDPUCPlugIn **, uint64_t, uint64_t, unsigned int *, void, void, void))*v5 + 36))(v5, 1, a2, a3, 0, 0, 0);
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v5, v20);
  return 0;
}

void sub_1BAC640B4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAC640CC(void *a1, HALS_Object *a2)
{
  if (a2)
  {
    HALS_ObjectMap::ReleaseObject(v2, a2);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAC63FBCLL);
  }
  JUMPOUT(0x1BAC640BCLL);
}

void sub_1BAC6413C()
{
}

uint64_t HALS_PDPlugIn::Host_ObjectPropertyChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 40));
  uint64_t v8 = (HALS_ObjectMap *)v7;
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      int v13 = "HALS_PDPlugIn.cpp";
      __int16 v14 = 1024;
      int v15 = 443;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPlugIn::Host_ObjectPropertyChanged: no plug-in", (uint8_t *)&v12, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 560947818;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v7 + 296))(v7, a2, a3, a4, 0);
  HALS_ObjectMap::ReleaseObject(v8, v9);
  return 0;
}

void sub_1BAC642B8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAC642D0(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAC641D0);
  }
  JUMPOUT(0x1BAC642C0);
}

void sub_1BAC64300()
{
}

void OS::CF::URL::~URL(OS::CF::URL *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);

  JUMPOUT(0x1C1859840);
}

OS::CF::MutableArray *OS::CF::MutableArray::MutableArray(OS::CF::MutableArray *this)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  *(void *)this = &unk_1F1480558;
  *((void *)this + 1) = Mutable;
  return this;
}

void OS::CF::MutableArray::AppendValue<OS::CF::String>(__CFArray *a1, const void *a2)
{
  if (a1)
  {
    if (a2) {
      CFArrayAppendValue(a1, a2);
    }
  }
}

const __CFArray *OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::String>(const __CFArray *result, uint64_t a2, CFIndex a3)
{
  *(void *)uint64_t result = &unk_1F1489A20;
  *((void *)result + 1) = 0;
  if ((a3 & 0x8000000000000000) == 0)
  {
    CFArrayRef v4 = result;
    uint64_t result = *(const __CFArray **)(a2 + 8);
    if (result)
    {
      uint64_t result = (const __CFArray *)CFArrayGetCount(result);
      if ((uint64_t)result > a3)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), a3);
        uint64_t v7 = ValueAtIndex;
        CFTypeID v8 = ValueAtIndex ? CFGetTypeID(ValueAtIndex) : 0;
        uint64_t result = (const __CFArray *)CFStringGetTypeID();
        if ((const __CFArray *)v8 == result)
        {
          if (v7)
          {
            CFRetain(v7);
            uint64_t v9 = (uint64_t)v4;
            uint64_t v10 = (uint64_t)v7;
          }
          else
          {
            uint64_t v9 = (uint64_t)v4;
            uint64_t v10 = 0;
          }
          return (const __CFArray *)OS::CF::UntypedObject::operator=(v9, v10);
        }
      }
    }
  }
  return result;
}

void OS::CF::MutableArray::~MutableArray(OS::CF::MutableArray *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);

  JUMPOUT(0x1C1859840);
}

uint64_t Resampler2::SetPrimeMethod(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 108) == 1818848869)
  {
    *(_DWORD *)(this + 64) = 1;
  }
  else
  {
    *(_DWORD *)(this + 112) = a2;
    if (a2)
    {
      if (a2 == 2) {
        a2 = *(_DWORD *)(*(void *)(this + 48) + 12) - 1;
      }
      else {
        a2 = *(_DWORD *)(*(void *)(this + 48) + 20);
      }
    }
    *(_DWORD *)(this + 64) = a2;
    *(void *)(this + 184) = 0;
    *(unsigned char *)(this + 192) = 1;
    double v2 = *(double *)(this + 136);
    *(double *)(this + 152) = v2;
    if (v2 != 0.0)
    {
      *(unsigned char *)(this + 125) = 0;
      return Resampler2::SetConverterFunction(this);
    }
  }
  return this;
}

uint64_t Resampler2::SetConverterFunction(uint64_t this)
{
  mach_port_name_t v1 = Resampler2::ConvertLinear;
  if (*(_DWORD *)(this + 108) != 1818848869)
  {
    if (*(int *)(this + 120) < 1)
    {
      BOOL v2 = *(unsigned char *)(this + 256) == 0;
      int v3 = Resampler2::ConvertScalar<Resampler2::RampedRate>;
      mach_port_name_t v1 = Resampler2::ConvertScalar<Resampler2::FixedRate>;
    }
    else
    {
      mach_port_name_t v1 = Resampler2::ConvertSIMD_SmallIntegerRatio;
      if (*(unsigned char *)(this + 125)) {
        goto LABEL_8;
      }
      BOOL v2 = *(unsigned char *)(this + 256) == 0;
      int v3 = Resampler2::ConvertSIMD<Resampler2::RampedRate>;
      mach_port_name_t v1 = Resampler2::ConvertSIMD<Resampler2::FixedRate>;
    }
    if (!v2) {
      mach_port_name_t v1 = v3;
    }
  }
LABEL_8:
  *(void *)this = v1;
  *(void *)(this + 8) = 0;
  return this;
}

double Resampler2::ConvertSIMD_SmallIntegerRatio(Resampler2 *this, float *a2, float *a3, int a4, int a5)
{
  CFTypeID v8 = a2;
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *((void *)this + 6);
  int v11 = *((_DWORD *)this + 27);
  if (v11 == 1818848869)
  {
    unsigned int v12 = 2;
    if (!a4) {
      goto LABEL_38;
    }
  }
  else
  {
    unsigned int v12 = *(_DWORD *)(v10 + 12);
    if (!a4) {
      goto LABEL_38;
    }
  }
  unsigned int v13 = *(_DWORD *)(v10 + 16);
  unsigned int v15 = *((_DWORD *)this + 24);
  unsigned int v14 = *((_DWORD *)this + 25);
  unsigned int v16 = *((_DWORD *)this + 17) * v13;
  if (v15 + v14 * a4 <= v16)
  {
    uint64_t v17 = *(void *)v10;
    int v18 = v14 / v13;
    int v19 = v14 % v13;
    unsigned int v20 = v15 / v13;
    unsigned int v21 = v15 % v13;
    if (v11 == 1650553971)
    {
      uint64_t v22 = *((void *)this + 9);
      uint64_t v23 = v12 >> 2;
      if (a3)
      {
        uint64_t v24 = *((void *)this + 10);
        int v25 = a4;
        do
        {
          uint64_t v26 = v17 + 4 * v21 * v12;
          int v27 = (float32x4_t *)(v22 + 4 * v20);
          uint64_t v28 = (float32x4_t *)(v24 + 4 * v20);
          float32x4_t v29 = *(float32x4_t *)(v26 + 16);
          float32x4_t v30 = vmulq_f32(v27[1], v29);
          float32x4_t v31 = vmulq_f32(*v27, *(float32x4_t *)v26);
          float32x4_t v32 = vmulq_f32(v28[1], v29);
          float32x4_t v33 = vmulq_f32(*v28, *(float32x4_t *)v26);
          float32x4_t v34 = *(float32x4_t *)(v26 + 32);
          float32x4_t v35 = *(float32x4_t *)(v26 + 48);
          float32x4_t v36 = v28[2];
          float32x4_t v37 = v28[3];
          float32x4_t v38 = v27[2];
          float32x4_t v39 = v27[3];
          float64x2_t v40 = 0uLL;
          if (v23 == 4)
          {
            float64x2_t v41 = 0uLL;
            float64x2_t v42 = 0uLL;
            float64x2_t v43 = 0uLL;
          }
          else
          {
            int v44 = (float32x4_t *)(v26 + 64);
            int v45 = v28 + 4;
            uint64_t v46 = v27 + 4;
            float64x2_t v42 = 0uLL;
            float64x2_t v43 = 0uLL;
            int v47 = (float32x4_t *)(v26 + 16 * v23);
            float64x2_t v41 = 0uLL;
            do
            {
              float64x2_t v41 = vaddq_f64(v41, vaddq_f64(vcvt_hight_f64_f32(v30), vcvt_hight_f64_f32(v31)));
              float64x2_t v40 = vaddq_f64(v40, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v30.f32), vcvtq_f64_f32(*(float32x2_t *)v31.f32)));
              float64x2_t v43 = vaddq_f64(v43, vaddq_f64(vcvt_hight_f64_f32(v32), vcvt_hight_f64_f32(v33)));
              float64x2_t v42 = vaddq_f64(v42, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v32.f32), vcvtq_f64_f32(*(float32x2_t *)v33.f32)));
              float32x4_t v31 = vmulq_f32(v38, v34);
              float32x4_t v30 = vmulq_f32(v39, v35);
              float32x4_t v33 = vmulq_f32(v36, v34);
              float32x4_t v32 = vmulq_f32(v37, v35);
              float32x4_t v38 = *v46;
              float32x4_t v39 = v46[1];
              v46 += 2;
              float32x4_t v36 = *v45;
              float32x4_t v37 = v45[1];
              v45 += 2;
              float32x4_t v34 = *v44;
              float32x4_t v35 = v44[1];
              v44 += 2;
            }
            while (v44 != v47);
          }
          float32x4_t v48 = vmulq_f32(v35, v39);
          float32x4_t v49 = vmulq_f32(v34, v38);
          float32x4_t v50 = vmulq_f32(v35, v37);
          float32x4_t v51 = vmulq_f32(v34, v36);
          float64x2_t v52 = vaddq_f64(vaddq_f64(v43, vaddq_f64(vcvt_hight_f64_f32(v32), vcvt_hight_f64_f32(v33))), vaddq_f64(vcvt_hight_f64_f32(v50), vcvt_hight_f64_f32(v51)));
          float64x2_t v53 = vaddq_f64(vaddq_f64(v42, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v32.f32), vcvtq_f64_f32(*(float32x2_t *)v33.f32))), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v50.f32), vcvtq_f64_f32(*(float32x2_t *)v51.f32)));
          v50.f32[0] = vaddvq_f64(vaddq_f64(vaddq_f64(vaddq_f64(v40, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v30.f32), vcvtq_f64_f32(*(float32x2_t *)v31.f32))), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v48.f32), vcvtq_f64_f32(*(float32x2_t *)v49.f32))), vaddq_f64(vaddq_f64(v41, vaddq_f64(vcvt_hight_f64_f32(v30), vcvt_hight_f64_f32(v31))), vaddq_f64(vcvt_hight_f64_f32(v48), vcvt_hight_f64_f32(v49)))));
          *CFTypeID v8 = v50.f32[0];
          *(float *)v53.f64 = vaddvq_f64(vaddq_f64(v53, v52));
          *a3 = *(float *)v53.f64;
          v8 += a5;
          a3 += a5;
          v20 += v18;
          unsigned int v54 = v21 + v19;
          if (v21 + v19 >= v13) {
            ++v20;
          }
          if (v54 < v13) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = v13;
          }
          unsigned int v21 = v54 - v55;
          --v25;
        }
        while (v25);
      }
      else
      {
        int v56 = a4;
        do
        {
          uint64_t v57 = v17 + 4 * v21 * v12;
          int v58 = (float32x4_t *)(v22 + 4 * v20);
          float32x4_t v59 = vmulq_f32(v58[1], *(float32x4_t *)(v57 + 16));
          float32x4_t v60 = vmulq_f32(*v58, *(float32x4_t *)v57);
          float32x4_t v61 = *(float32x4_t *)(v57 + 32);
          float32x4_t v62 = *(float32x4_t *)(v57 + 48);
          float32x4_t v63 = v58[2];
          float32x4_t v64 = v58[3];
          float64x2_t v65 = 0uLL;
          if (v23 == 4)
          {
            float64x2_t v66 = 0uLL;
          }
          else
          {
            __int16 v67 = (float32x4_t *)(v57 + 16 * v23);
            int v68 = (float32x4_t *)(v57 + 64);
            __int16 v69 = v58 + 4;
            float64x2_t v66 = 0uLL;
            do
            {
              float64x2_t v66 = vaddq_f64(v66, vaddq_f64(vcvt_hight_f64_f32(v59), vcvt_hight_f64_f32(v60)));
              float64x2_t v65 = vaddq_f64(v65, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v59.f32), vcvtq_f64_f32(*(float32x2_t *)v60.f32)));
              float32x4_t v60 = vmulq_f32(v63, v61);
              float32x4_t v59 = vmulq_f32(v64, v62);
              float32x4_t v63 = *v69;
              float32x4_t v64 = v69[1];
              v69 += 2;
              float32x4_t v61 = *v68;
              float32x4_t v62 = v68[1];
              v68 += 2;
            }
            while (v68 != v67);
          }
          float32x4_t v70 = vmulq_f32(v62, v64);
          float32x4_t v71 = vmulq_f32(v61, v63);
          v71.f32[0] = vaddvq_f64(vaddq_f64(vaddq_f64(vaddq_f64(v65, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v59.f32), vcvtq_f64_f32(*(float32x2_t *)v60.f32))), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v70.f32), vcvtq_f64_f32(*(float32x2_t *)v71.f32))), vaddq_f64(vaddq_f64(v66, vaddq_f64(vcvt_hight_f64_f32(v59), vcvt_hight_f64_f32(v60))), vaddq_f64(vcvt_hight_f64_f32(v70), vcvt_hight_f64_f32(v71)))));
          *CFTypeID v8 = v71.f32[0];
          v8 += a5;
          v20 += v18;
          unsigned int v72 = v21 + v19;
          if (v21 + v19 >= v13) {
            ++v20;
          }
          if (v72 < v13) {
            unsigned int v73 = 0;
          }
          else {
            unsigned int v73 = v13;
          }
          unsigned int v21 = v72 - v73;
          --v56;
        }
        while (v56);
      }
    }
    else if (a3)
    {
      StereoMultiCoefsSRC_Neon((_OWORD *)(*((void *)this + 9) + 4 * v20), (_OWORD *)(*((void *)this + 10) + 4 * v20), v17, a2, a3, a4, a5, v18 | (v19 << 16), v21, v13, v12);
    }
    else if ((v12 & 3) == 0)
    {
      MonoMultiCoefsSRC_Neon((_OWORD *)(*((void *)this + 9) + 4 * v20), v17, a2, a4, a5, v18 | (v19 << 16), v21, v13, v12);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136317186;
    double v77 = "Resampler2.cpp";
    __int16 v78 = 1024;
    int v79 = 2303;
    __int16 v80 = 2080;
    CFArrayRef v81 = "ConvertSIMD_SmallIntegerRatio";
    __int16 v82 = 1024;
    int v83 = 2303;
    __int16 v84 = 1024;
    unsigned int v85 = v16;
    __int16 v86 = 1024;
    unsigned int v87 = v15;
    __int16 v88 = 1024;
    int v89 = v15 + v13 * a4;
    __int16 v90 = 1024;
    unsigned int v91 = v14;
    __int16 v92 = 1024;
    unsigned int v93 = v13;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "%25s:%-5d CADSPUtility:%s:%d: input buffer ticks %u but would read from %u to %u (tick rate %u, offsets %u)!", buf, 0x40u);
  }
LABEL_38:
  unsigned int v74 = *((_DWORD *)this + 24) + *((_DWORD *)this + 25) * a4;
  *((_DWORD *)this + 24) = v74;
  double result = *((double *)this + 18) * (double)v74;
  *((double *)this + 19) = result;
  return result;
}

uint64_t Resampler2::ConvertLinear(uint64_t this, float *a2, float *a3, int a4, unsigned int a5)
{
  double v5 = *(double *)(this + 152);
  double v6 = *(double *)(this + 160);
  uint64_t v7 = *(void *)(this + 72) + 4 * (int)v5;
  if (a3)
  {
    if (a4)
    {
      uint64_t v8 = 0;
      uint64_t v9 = *(void *)(this + 80) + 4 * (int)v5;
      do
      {
        float v10 = *(float *)(v7 + 4 * (int)v5);
        float v11 = *(float *)(v9 + 4 * (int)v5);
        uint64_t v12 = 4 * (int)v5 + 4;
        float v13 = *(float *)(v9 + v12);
        float v14 = v5 - (double)(int)v5;
        a2[v8] = v10 + (float)(v14 * (float)(*(float *)(v7 + v12) - v10));
        a3[v8] = v11 + (float)(v14 * (float)(v13 - v11));
        double v5 = v6 + v5;
        v8 += a5;
        --a4;
      }
      while (a4);
    }
  }
  else
  {
    for (; a4; --a4)
    {
      float v15 = v5 - (double)(int)v5;
      *a2 = *(float *)(v7 + 4 * (int)v5)
          + (float)(v15 * (float)(*(float *)(v7 + 4 * (int)v5 + 4) - *(float *)(v7 + 4 * (int)v5)));
      double v5 = v6 + v5;
      a2 += a5;
    }
  }
  *(double *)(this + 128) = *(double *)(this + 128) + (double)(int)v5;
  *(double *)(this + 152) = v5;
  return this;
}

float *Resampler2::ConvertScalar<Resampler2::RampedRate>(float *this, float *a2, _DWORD *a3, int a4, int a5)
{
  double v6 = a3;
  uint64_t v8 = (uint64_t)this;
  float64x2_t v9 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(-*((double *)this + 16)), 0);
  float64x2_t v10 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(-*((double *)this + 33)), 0);
  uint64_t v11 = *((void *)this + 6);
  if (*((_DWORD *)this + 27) == 1818848869) {
    int v12 = 2;
  }
  else {
    int v12 = *(_DWORD *)(v11 + 12);
  }
  double v13 = *((double *)this + 25);
  double v14 = *((double *)this + 26);
  double v15 = *((double *)this + 31);
  float64x2_t v465 = vaddq_f64(*(float64x2_t *)(this + 54), v9);
  float64x2_t v16 = vaddq_f64(*(float64x2_t *)(this + 58), v10);
  double v17 = (double)*((int *)this + 16);
  uint64_t v18 = *((void *)this + 9);
  double v19 = *((double *)this + 19);
  double v20 = (double)*(int *)(v11 + 16);
  if (a3)
  {
    if (a4 >= 1)
    {
      int v21 = 0;
      uint64_t v22 = *((void *)this + 10);
      uint64_t v23 = a5;
      double v24 = v16.f64[1];
      double v25 = 0.0;
      double v466 = v16.f64[0];
      do
      {
        if (v24 <= (double)(int)v25) {
          double v26 = v14;
        }
        else {
          double v26 = v13 + v15 * ((double)(int)v25 - v16.f64[0]);
        }
        *(double *)(v8 + 160) = v26;
        this = (float *)Resampler2::SetVarispeedSinc(v8, v26);
        if (v24 <= v25)
        {
          double v28 = (v25 - v24) * v14;
          double v27 = v465.f64[1];
        }
        else
        {
          double v27 = (v25 - v466) * (v13 + v15 * 0.5 * (v25 - v466));
          double v28 = v465.f64[0];
        }
        v16.f64[0] = v466;
        double v19 = fmax(v28 + v27, 0.0);
        if (v19 >= v17) {
          double v19 = v17;
        }
        double v29 = (v19 - (double)(int)v19) * v20;
        float32x4_t v30 = (float *)(**(void **)(v8 + 48) + 4 * v12 * (int)v29);
        float32x4_t v31 = &v30[v12];
        float32x4_t v32 = (float *)(v18 + 4 * (int)v19);
        float32x4_t v33 = (float *)(v22 + 4 * (int)v19);
        if (v12 < 32)
        {
          float v39 = 0.0;
          float v38 = 0.0;
          float v37 = 0.0;
          int v36 = v12;
          float v35 = 0.0;
        }
        else
        {
          uint64_t v34 = 0;
          float v35 = 0.0;
          int v36 = v12;
          float v37 = 0.0;
          float v38 = 0.0;
          float v39 = 0.0;
          do
          {
            this = &v30[v34];
            float v40 = v32[v34];
            float v41 = v32[v34 + 1];
            float v42 = v30[v34];
            float v43 = v30[v34 + 1];
            float v44 = v39 + (float)(v40 * v42);
            float v45 = v31[v34];
            float v46 = v31[v34 + 1];
            float v47 = v38 + (float)(v40 * v45);
            float v48 = v33[v34];
            float v49 = v33[v34 + 1];
            float v50 = v44 + (float)(v41 * v43);
            float v51 = v47 + (float)(v41 * v46);
            float v52 = (float)(v37 + (float)(v48 * v42)) + (float)(v49 * v43);
            float v53 = (float)(v35 + (float)(v48 * v45)) + (float)(v49 * v46);
            float v54 = v32[v34 + 2];
            float v55 = v32[v34 + 3];
            float v56 = v30[v34 + 2];
            float v57 = v30[v34 + 3];
            float v58 = v31[v34 + 2];
            float v59 = v31[v34 + 3];
            float v60 = v33[v34 + 2];
            float v61 = v33[v34 + 3];
            float v62 = (float)(v50 + (float)(v54 * v56)) + (float)(v55 * v57);
            float v63 = (float)(v51 + (float)(v54 * v58)) + (float)(v55 * v59);
            float v64 = (float)(v52 + (float)(v60 * v56)) + (float)(v61 * v57);
            float v65 = (float)(v53 + (float)(v60 * v58)) + (float)(v61 * v59);
            float v66 = v32[v34 + 4];
            float v67 = v32[v34 + 5];
            float v68 = v30[v34 + 4];
            float v69 = v30[v34 + 5];
            float v70 = v31[v34 + 4];
            float v71 = v31[v34 + 5];
            float v72 = v62 + (float)(v66 * v68);
            float v73 = v63 + (float)(v66 * v70);
            float v74 = v33[v34 + 4];
            float v75 = v33[v34 + 5];
            float v76 = v72 + (float)(v67 * v69);
            float v77 = v73 + (float)(v67 * v71);
            float v78 = (float)(v64 + (float)(v74 * v68)) + (float)(v75 * v69);
            float v79 = (float)(v65 + (float)(v74 * v70)) + (float)(v75 * v71);
            float v80 = v32[v34 + 6];
            float v81 = v32[v34 + 7];
            float v82 = v30[v34 + 6];
            float v83 = v30[v34 + 7];
            float v84 = v76 + (float)(v80 * v82);
            float v85 = v31[v34 + 6];
            float v86 = v31[v34 + 7];
            float v87 = v77 + (float)(v80 * v85);
            float v88 = v33[v34 + 6];
            float v89 = v33[v34 + 7];
            float v90 = v84 + (float)(v81 * v83);
            float v91 = v87 + (float)(v81 * v86);
            float v92 = (float)(v78 + (float)(v88 * v82)) + (float)(v89 * v83);
            float v93 = (float)(v79 + (float)(v88 * v85)) + (float)(v89 * v86);
            float v94 = v32[v34 + 8];
            float v95 = v32[v34 + 9];
            float v96 = v30[v34 + 8];
            float v97 = v30[v34 + 9];
            float v98 = v31[v34 + 8];
            float v99 = v31[v34 + 9];
            float v100 = v33[v34 + 8];
            float v101 = v33[v34 + 9];
            float v102 = (float)(v90 + (float)(v94 * v96)) + (float)(v95 * v97);
            float v103 = (float)(v91 + (float)(v94 * v98)) + (float)(v95 * v99);
            float v104 = (float)(v92 + (float)(v100 * v96)) + (float)(v101 * v97);
            float v105 = (float)(v93 + (float)(v100 * v98)) + (float)(v101 * v99);
            float v106 = v32[v34 + 10];
            float v107 = v32[v34 + 11];
            float v108 = v30[v34 + 10];
            float v109 = v30[v34 + 11];
            float v110 = v31[v34 + 10];
            float v111 = v31[v34 + 11];
            float v112 = v102 + (float)(v106 * v108);
            float v113 = v103 + (float)(v106 * v110);
            float v114 = v33[v34 + 10];
            float v115 = v33[v34 + 11];
            float v116 = v112 + (float)(v107 * v109);
            float v117 = v113 + (float)(v107 * v111);
            float v118 = (float)(v104 + (float)(v114 * v108)) + (float)(v115 * v109);
            float v119 = (float)(v105 + (float)(v114 * v110)) + (float)(v115 * v111);
            float v120 = v32[v34 + 12];
            float v121 = v32[v34 + 13];
            float v122 = v30[v34 + 12];
            float v123 = v30[v34 + 13];
            float v124 = v116 + (float)(v120 * v122);
            float v125 = v31[v34 + 12];
            float v126 = v31[v34 + 13];
            float v127 = v117 + (float)(v120 * v125);
            float v128 = v33[v34 + 12];
            float v129 = v33[v34 + 13];
            float v130 = v124 + (float)(v121 * v123);
            float v131 = v127 + (float)(v121 * v126);
            float v132 = (float)(v118 + (float)(v128 * v122)) + (float)(v129 * v123);
            float v133 = (float)(v119 + (float)(v128 * v125)) + (float)(v129 * v126);
            float v134 = v32[v34 + 14];
            float v135 = v32[v34 + 15];
            float v136 = v30[v34 + 14];
            float v137 = v30[v34 + 15];
            float v138 = v31[v34 + 14];
            float v139 = v31[v34 + 15];
            float v140 = v33[v34 + 14];
            float v141 = v33[v34 + 15];
            float v142 = (float)(v130 + (float)(v134 * v136)) + (float)(v135 * v137);
            float v143 = (float)(v131 + (float)(v134 * v138)) + (float)(v135 * v139);
            float v144 = (float)(v132 + (float)(v140 * v136)) + (float)(v141 * v137);
            float v145 = (float)(v133 + (float)(v140 * v138)) + (float)(v141 * v139);
            float v146 = v32[v34 + 16];
            float v147 = v32[v34 + 17];
            float v148 = v30[v34 + 16];
            float v149 = v30[v34 + 17];
            float v150 = v31[v34 + 16];
            float v151 = v31[v34 + 17];
            float v152 = v142 + (float)(v146 * v148);
            float v153 = v143 + (float)(v146 * v150);
            float v154 = v33[v34 + 16];
            float v155 = v33[v34 + 17];
            float v156 = v152 + (float)(v147 * v149);
            float v157 = v153 + (float)(v147 * v151);
            float v158 = (float)(v144 + (float)(v154 * v148)) + (float)(v155 * v149);
            float v159 = (float)(v145 + (float)(v154 * v150)) + (float)(v155 * v151);
            float v160 = v32[v34 + 18];
            float v161 = v32[v34 + 19];
            float v162 = v30[v34 + 18];
            float v163 = v30[v34 + 19];
            float v164 = v156 + (float)(v160 * v162);
            float v165 = v31[v34 + 18];
            float v166 = v31[v34 + 19];
            float v167 = v157 + (float)(v160 * v165);
            float v168 = v33[v34 + 18];
            float v169 = v33[v34 + 19];
            float v170 = v164 + (float)(v161 * v163);
            float v171 = v167 + (float)(v161 * v166);
            float v172 = (float)(v158 + (float)(v168 * v162)) + (float)(v169 * v163);
            float v173 = (float)(v159 + (float)(v168 * v165)) + (float)(v169 * v166);
            float v174 = v32[v34 + 20];
            float v175 = v32[v34 + 21];
            float v176 = v30[v34 + 20];
            float v177 = v30[v34 + 21];
            float v178 = v31[v34 + 20];
            float v179 = v31[v34 + 21];
            float v180 = v33[v34 + 20];
            float v181 = v33[v34 + 21];
            float v182 = (float)(v170 + (float)(v174 * v176)) + (float)(v175 * v177);
            float v183 = (float)(v171 + (float)(v174 * v178)) + (float)(v175 * v179);
            float v184 = (float)(v172 + (float)(v180 * v176)) + (float)(v181 * v177);
            float v185 = (float)(v173 + (float)(v180 * v178)) + (float)(v181 * v179);
            float v186 = v32[v34 + 22];
            float v187 = v32[v34 + 23];
            float v188 = v30[v34 + 22];
            float v189 = v30[v34 + 23];
            float v190 = v31[v34 + 22];
            float v191 = v31[v34 + 23];
            float v192 = v182 + (float)(v186 * v188);
            float v193 = v183 + (float)(v186 * v190);
            float v194 = v33[v34 + 22];
            float v195 = v33[v34 + 23];
            float v196 = v192 + (float)(v187 * v189);
            float v197 = v193 + (float)(v187 * v191);
            float v198 = (float)(v184 + (float)(v194 * v188)) + (float)(v195 * v189);
            float v199 = (float)(v185 + (float)(v194 * v190)) + (float)(v195 * v191);
            float v200 = v32[v34 + 24];
            float v201 = v32[v34 + 25];
            float v202 = v30[v34 + 24];
            float v203 = v30[v34 + 25];
            float v204 = v196 + (float)(v200 * v202);
            float v205 = v31[v34 + 24];
            float v206 = v31[v34 + 25];
            float v207 = v197 + (float)(v200 * v205);
            float v208 = v33[v34 + 24];
            float v209 = v33[v34 + 25];
            float v210 = v204 + (float)(v201 * v203);
            float v211 = v207 + (float)(v201 * v206);
            float v212 = (float)(v198 + (float)(v208 * v202)) + (float)(v209 * v203);
            float v213 = (float)(v199 + (float)(v208 * v205)) + (float)(v209 * v206);
            float v214 = v32[v34 + 26];
            float v215 = v32[v34 + 27];
            float v216 = v30[v34 + 26];
            float v217 = v30[v34 + 27];
            float v218 = v31[v34 + 26];
            float v219 = v31[v34 + 27];
            float v220 = v33[v34 + 26];
            float v221 = v33[v34 + 27];
            float v222 = (float)(v210 + (float)(v214 * v216)) + (float)(v215 * v217);
            float v223 = (float)(v211 + (float)(v214 * v218)) + (float)(v215 * v219);
            float v224 = (float)(v212 + (float)(v220 * v216)) + (float)(v221 * v217);
            float v225 = (float)(v213 + (float)(v220 * v218)) + (float)(v221 * v219);
            float v226 = v32[v34 + 28];
            float v227 = v32[v34 + 29];
            float v228 = v30[v34 + 28];
            float v229 = v30[v34 + 29];
            float v230 = v31[v34 + 28];
            float v231 = v31[v34 + 29];
            float v232 = v222 + (float)(v226 * v228);
            float v233 = v223 + (float)(v226 * v230);
            float v234 = v33[v34 + 28];
            float v235 = v33[v34 + 29];
            float v236 = v232 + (float)(v227 * v229);
            float v237 = v233 + (float)(v227 * v231);
            float v238 = (float)(v224 + (float)(v234 * v228)) + (float)(v235 * v229);
            float v239 = (float)(v225 + (float)(v234 * v230)) + (float)(v235 * v231);
            float v240 = v32[v34 + 30];
            float v241 = v32[v34 + 31];
            float v242 = v30[v34 + 30];
            float v243 = v30[v34 + 31];
            float v244 = v236 + (float)(v240 * v242);
            float v245 = v31[v34 + 30];
            float v246 = v31[v34 + 31];
            float v247 = v237 + (float)(v240 * v245);
            float v248 = v33[v34 + 30];
            float v249 = v33[v34 + 31];
            float v39 = v244 + (float)(v241 * v243);
            float v38 = v247 + (float)(v241 * v246);
            unsigned int v250 = v36;
            float v37 = (float)(v238 + (float)(v248 * v242)) + (float)(v249 * v243);
            float v35 = (float)(v239 + (float)(v248 * v245)) + (float)(v249 * v246);
            v36 -= 32;
            v34 += 32;
          }
          while (v250 > 0x3F);
          float32x4_t v33 = (float *)((char *)v33 + v34 * 4);
          float32x4_t v32 = (float *)((char *)v32 + v34 * 4);
          float32x4_t v31 = (float *)((char *)v31 + v34 * 4);
          float32x4_t v30 = (float *)((char *)v30 + v34 * 4);
        }
        if (v36 >= 16)
        {
          unsigned int v251 = v36 + 16;
          do
          {
            float v252 = v32[1];
            float v253 = v30[1];
            float v254 = v31[1];
            float v255 = v33[1];
            float v256 = (float)(v39 + (float)(*v32 * *v30)) + (float)(v252 * v253);
            float v257 = (float)(v38 + (float)(*v32 * *v31)) + (float)(v252 * v254);
            float v258 = (float)(v37 + (float)(*v33 * *v30)) + (float)(v255 * v253);
            float v259 = (float)(v35 + (float)(*v33 * *v31)) + (float)(v255 * v254);
            float v260 = v32[2];
            float v261 = v32[3];
            float v262 = v30[2];
            float v263 = v30[3];
            float v264 = v256 + (float)(v260 * v262);
            float v265 = v31[2];
            float v266 = v31[3];
            float v267 = v257 + (float)(v260 * v265);
            float v268 = v33[2];
            float v269 = v33[3];
            float v270 = v264 + (float)(v261 * v263);
            float v271 = v267 + (float)(v261 * v266);
            float v272 = (float)(v258 + (float)(v268 * v262)) + (float)(v269 * v263);
            float v273 = (float)(v259 + (float)(v268 * v265)) + (float)(v269 * v266);
            float v274 = v32[4];
            float v275 = v32[5];
            float v276 = v30[4];
            float v277 = v30[5];
            float v278 = v270 + (float)(v274 * v276);
            float v279 = v31[4];
            float v280 = v31[5];
            float v281 = v271 + (float)(v274 * v279);
            float v282 = v33[4];
            float v283 = v33[5];
            float v284 = v278 + (float)(v275 * v277);
            float v285 = v281 + (float)(v275 * v280);
            float v286 = (float)(v272 + (float)(v282 * v276)) + (float)(v283 * v277);
            float v287 = (float)(v273 + (float)(v282 * v279)) + (float)(v283 * v280);
            float v288 = v32[6];
            float v289 = v32[7];
            float v290 = v30[6];
            float v291 = v30[7];
            float v292 = v284 + (float)(v288 * v290);
            float v293 = v31[6];
            float v294 = v31[7];
            float v295 = v285 + (float)(v288 * v293);
            float v296 = v33[6];
            float v297 = v33[7];
            float v298 = v292 + (float)(v289 * v291);
            float v299 = v295 + (float)(v289 * v294);
            float v300 = (float)(v286 + (float)(v296 * v290)) + (float)(v297 * v291);
            float v301 = (float)(v287 + (float)(v296 * v293)) + (float)(v297 * v294);
            float v302 = v32[8];
            float v303 = v32[9];
            float v304 = v30[8];
            float v305 = v30[9];
            float v306 = v298 + (float)(v302 * v304);
            float v307 = v31[8];
            float v308 = v31[9];
            float v309 = v299 + (float)(v302 * v307);
            float v310 = v33[8];
            float v311 = v33[9];
            float v312 = v306 + (float)(v303 * v305);
            float v313 = v309 + (float)(v303 * v308);
            float v314 = (float)(v300 + (float)(v310 * v304)) + (float)(v311 * v305);
            float v315 = (float)(v301 + (float)(v310 * v307)) + (float)(v311 * v308);
            float v316 = v32[10];
            float v317 = v32[11];
            float v318 = v30[10];
            float v319 = v30[11];
            float v320 = v312 + (float)(v316 * v318);
            float v321 = v31[10];
            float v322 = v31[11];
            float v323 = v313 + (float)(v316 * v321);
            float v324 = v33[10];
            float v325 = v33[11];
            float v326 = v320 + (float)(v317 * v319);
            float v327 = v323 + (float)(v317 * v322);
            float v328 = (float)(v314 + (float)(v324 * v318)) + (float)(v325 * v319);
            float v329 = (float)(v315 + (float)(v324 * v321)) + (float)(v325 * v322);
            float v330 = v32[12];
            float v331 = v32[13];
            float v332 = v30[12];
            float v333 = v30[13];
            float v334 = v326 + (float)(v330 * v332);
            float v335 = v31[12];
            float v336 = v31[13];
            float v337 = v327 + (float)(v330 * v335);
            float v338 = v33[12];
            float v339 = v33[13];
            float v340 = v334 + (float)(v331 * v333);
            float v341 = v337 + (float)(v331 * v336);
            float v342 = (float)(v328 + (float)(v338 * v332)) + (float)(v339 * v333);
            float v343 = (float)(v329 + (float)(v338 * v335)) + (float)(v339 * v336);
            float v344 = v32[14];
            float v345 = v32[15];
            float v346 = v30[14];
            float v347 = v30[15];
            float v348 = v340 + (float)(v344 * v346);
            float v349 = v31[14];
            float v350 = v31[15];
            float v351 = v341 + (float)(v344 * v349);
            float v352 = v33[14];
            float v353 = v33[15];
            float v39 = v348 + (float)(v345 * v347);
            float v38 = v351 + (float)(v345 * v350);
            float v37 = (float)(v342 + (float)(v352 * v346)) + (float)(v353 * v347);
            v251 -= 16;
            v32 += 16;
            float v35 = (float)(v343 + (float)(v352 * v349)) + (float)(v353 * v350);
            v30 += 16;
            v31 += 16;
            v33 += 16;
          }
          while (v251 > 0x1F);
        }
        double v354 = v29 - (double)(int)v29;
        float v355 = v39 + v354 * (float)(v38 - v39);
        *a2 = v355;
        a2 += v23;
        *(float *)&double v354 = v37 + v354 * (float)(v35 - v37);
        _DWORD *v6 = LODWORD(v354);
        v6 += v23;
        ++v21;
        double v25 = v25 + 1.0;
      }
      while (v21 != a4);
    }
  }
  else if (a4 >= 1)
  {
    int v356 = 0;
    uint64_t v357 = a5;
    double v358 = v16.f64[1];
    double v359 = 0.0;
    double v467 = v16.f64[0];
    do
    {
      if (v358 <= (double)(int)v359) {
        double v360 = v14;
      }
      else {
        double v360 = v13 + v15 * ((double)(int)v359 - v16.f64[0]);
      }
      *(double *)(v8 + 160) = v360;
      this = (float *)Resampler2::SetVarispeedSinc(v8, v360);
      if (v358 <= v359)
      {
        double v362 = (v359 - v358) * v14;
        double v361 = v465.f64[1];
      }
      else
      {
        double v361 = (v359 - v467) * (v13 + v15 * 0.5 * (v359 - v467));
        double v362 = v465.f64[0];
      }
      v16.f64[0] = v467;
      double v19 = fmax(v362 + v361, 0.0);
      if (v19 >= v17) {
        double v19 = v17;
      }
      double v363 = (v19 - (double)(int)v19) * v20;
      v364 = (float *)(**(void **)(v8 + 48) + 4 * v12 * (int)v363);
      v365 = &v364[v12];
      int v366 = (float *)(v18 + 4 * (int)v19);
      if (v12 < 32)
      {
        float v370 = 0.0;
        float v368 = 0.0;
        int v369 = v12;
      }
      else
      {
        uint64_t v367 = 0;
        float v368 = 0.0;
        int v369 = v12;
        float v370 = 0.0;
        do
        {
          float v371 = v366[v367];
          float v372 = v366[v367 + 1];
          float v373 = (float)(v370 + (float)(v371 * v364[v367])) + (float)(v372 * v364[v367 + 1]);
          float v374 = (float)(v368 + (float)(v371 * v365[v367])) + (float)(v372 * v365[v367 + 1]);
          float v375 = v366[v367 + 2];
          float v376 = v366[v367 + 3];
          float v377 = (float)(v373 + (float)(v375 * v364[v367 + 2])) + (float)(v376 * v364[v367 + 3]);
          float v378 = (float)(v374 + (float)(v375 * v365[v367 + 2])) + (float)(v376 * v365[v367 + 3]);
          float v379 = v366[v367 + 4];
          float v380 = v366[v367 + 5];
          float v381 = (float)(v377 + (float)(v379 * v364[v367 + 4])) + (float)(v380 * v364[v367 + 5]);
          float v382 = (float)(v378 + (float)(v379 * v365[v367 + 4])) + (float)(v380 * v365[v367 + 5]);
          float v383 = v366[v367 + 6];
          float v384 = v366[v367 + 7];
          float v385 = (float)(v381 + (float)(v383 * v364[v367 + 6])) + (float)(v384 * v364[v367 + 7]);
          float v386 = (float)(v382 + (float)(v383 * v365[v367 + 6])) + (float)(v384 * v365[v367 + 7]);
          float v387 = v366[v367 + 8];
          float v388 = v366[v367 + 9];
          float v389 = (float)(v385 + (float)(v387 * v364[v367 + 8])) + (float)(v388 * v364[v367 + 9]);
          float v390 = (float)(v386 + (float)(v387 * v365[v367 + 8])) + (float)(v388 * v365[v367 + 9]);
          float v391 = v366[v367 + 10];
          float v392 = v366[v367 + 11];
          float v393 = (float)(v389 + (float)(v391 * v364[v367 + 10])) + (float)(v392 * v364[v367 + 11]);
          float v394 = (float)(v390 + (float)(v391 * v365[v367 + 10])) + (float)(v392 * v365[v367 + 11]);
          float v395 = v366[v367 + 12];
          float v396 = v366[v367 + 13];
          float v397 = (float)(v393 + (float)(v395 * v364[v367 + 12])) + (float)(v396 * v364[v367 + 13]);
          float v398 = (float)(v394 + (float)(v395 * v365[v367 + 12])) + (float)(v396 * v365[v367 + 13]);
          float v399 = v366[v367 + 14];
          float v400 = v366[v367 + 15];
          float v401 = (float)(v397 + (float)(v399 * v364[v367 + 14])) + (float)(v400 * v364[v367 + 15]);
          float v402 = (float)(v398 + (float)(v399 * v365[v367 + 14])) + (float)(v400 * v365[v367 + 15]);
          float v403 = v366[v367 + 16];
          float v404 = v366[v367 + 17];
          float v405 = (float)(v401 + (float)(v403 * v364[v367 + 16])) + (float)(v404 * v364[v367 + 17]);
          float v406 = (float)(v402 + (float)(v403 * v365[v367 + 16])) + (float)(v404 * v365[v367 + 17]);
          float v407 = v366[v367 + 18];
          float v408 = v366[v367 + 19];
          float v409 = (float)(v405 + (float)(v407 * v364[v367 + 18])) + (float)(v408 * v364[v367 + 19]);
          float v410 = (float)(v406 + (float)(v407 * v365[v367 + 18])) + (float)(v408 * v365[v367 + 19]);
          float v411 = v366[v367 + 20];
          float v412 = v366[v367 + 21];
          float v413 = (float)(v409 + (float)(v411 * v364[v367 + 20])) + (float)(v412 * v364[v367 + 21]);
          float v414 = (float)(v410 + (float)(v411 * v365[v367 + 20])) + (float)(v412 * v365[v367 + 21]);
          float v415 = v366[v367 + 22];
          float v416 = v366[v367 + 23];
          float v417 = (float)(v413 + (float)(v415 * v364[v367 + 22])) + (float)(v416 * v364[v367 + 23]);
          float v418 = (float)(v414 + (float)(v415 * v365[v367 + 22])) + (float)(v416 * v365[v367 + 23]);
          float v419 = v366[v367 + 24];
          float v420 = v366[v367 + 25];
          float v421 = (float)(v417 + (float)(v419 * v364[v367 + 24])) + (float)(v420 * v364[v367 + 25]);
          float v422 = (float)(v418 + (float)(v419 * v365[v367 + 24])) + (float)(v420 * v365[v367 + 25]);
          float v423 = v366[v367 + 26];
          float v424 = v366[v367 + 27];
          float v425 = (float)(v421 + (float)(v423 * v364[v367 + 26])) + (float)(v424 * v364[v367 + 27]);
          float v426 = (float)(v422 + (float)(v423 * v365[v367 + 26])) + (float)(v424 * v365[v367 + 27]);
          float v427 = v366[v367 + 28];
          float v428 = v366[v367 + 29];
          float v429 = (float)(v425 + (float)(v427 * v364[v367 + 28])) + (float)(v428 * v364[v367 + 29]);
          float v430 = (float)(v426 + (float)(v427 * v365[v367 + 28])) + (float)(v428 * v365[v367 + 29]);
          float v431 = v366[v367 + 30];
          float v432 = v366[v367 + 31];
          float v370 = (float)(v429 + (float)(v431 * v364[v367 + 30])) + (float)(v432 * v364[v367 + 31]);
          unsigned int v433 = v369;
          float v368 = (float)(v430 + (float)(v431 * v365[v367 + 30])) + (float)(v432 * v365[v367 + 31]);
          v369 -= 32;
          v367 += 32;
        }
        while (v433 > 0x3F);
        int v366 = (float *)((char *)v366 + v367 * 4);
        v365 = (float *)((char *)v365 + v367 * 4);
        v364 = (float *)((char *)v364 + v367 * 4);
      }
      if (v369 >= 16)
      {
        unsigned int v434 = v369 + 16;
        do
        {
          float v435 = v366[1];
          float v436 = (float)(v370 + (float)(*v366 * *v364)) + (float)(v435 * v364[1]);
          float v437 = (float)(v368 + (float)(*v366 * *v365)) + (float)(v435 * v365[1]);
          float v438 = v366[2];
          float v439 = v366[3];
          float v440 = (float)(v436 + (float)(v438 * v364[2])) + (float)(v439 * v364[3]);
          float v441 = (float)(v437 + (float)(v438 * v365[2])) + (float)(v439 * v365[3]);
          float v442 = v366[4];
          float v443 = v366[5];
          float v444 = (float)(v440 + (float)(v442 * v364[4])) + (float)(v443 * v364[5]);
          float v445 = (float)(v441 + (float)(v442 * v365[4])) + (float)(v443 * v365[5]);
          float v446 = v366[6];
          float v447 = v366[7];
          float v448 = (float)(v444 + (float)(v446 * v364[6])) + (float)(v447 * v364[7]);
          float v449 = (float)(v445 + (float)(v446 * v365[6])) + (float)(v447 * v365[7]);
          float v450 = v366[8];
          float v451 = v366[9];
          float v452 = (float)(v448 + (float)(v450 * v364[8])) + (float)(v451 * v364[9]);
          float v453 = (float)(v449 + (float)(v450 * v365[8])) + (float)(v451 * v365[9]);
          float v454 = v366[10];
          float v455 = v366[11];
          float v456 = (float)(v452 + (float)(v454 * v364[10])) + (float)(v455 * v364[11]);
          float v457 = (float)(v453 + (float)(v454 * v365[10])) + (float)(v455 * v365[11]);
          float v458 = v366[12];
          float v459 = v366[13];
          float v460 = (float)(v456 + (float)(v458 * v364[12])) + (float)(v459 * v364[13]);
          float v461 = (float)(v457 + (float)(v458 * v365[12])) + (float)(v459 * v365[13]);
          float v462 = v366[14];
          float v463 = v366[15];
          float v370 = (float)(v460 + (float)(v462 * v364[14])) + (float)(v463 * v364[15]);
          v434 -= 16;
          float v368 = (float)(v461 + (float)(v462 * v365[14])) + (float)(v463 * v365[15]);
          v366 += 16;
          v364 += 16;
          v365 += 16;
        }
        while (v434 > 0x1F);
      }
      float v464 = v363 - (double)(int)v363;
      *a2 = v370 + (float)(v464 * (float)(v368 - v370));
      a2 += v357;
      ++v356;
      double v359 = v359 + 1.0;
    }
    while (v356 != a4);
  }
  *(double *)(v8 + 152) = v19;
  return this;
}

uint64_t Resampler2::SetVarispeedSinc(uint64_t this, double a2)
{
  if (a2 <= 1.0)
  {
    uint64_t v2 = 0;
  }
  else if (a2 <= 7.98)
  {
    uint64_t v2 = sVarispeedRateTable[vcvtpd_s64_f64(a2 * 100.0) - 100];
  }
  else
  {
    uint64_t v2 = 35;
  }
  unsigned int v3 = *(_DWORD *)(this + 104) + 1;
  if (v3 >= 0x20) {
    unsigned int v4 = (v3 >> 5) - 1;
  }
  else {
    unsigned int v4 = 0;
  }
  *(void *)(this + 48) = *(void *)(**((void **)&sVarispeedSincKernels + v4) + 8 * v2);
  return this;
}

uint64_t Resampler2::ConvertScalar<Resampler2::FixedRate>(uint64_t result, float *a2, _DWORD *a3, int a4, int a5)
{
  double v5 = *(uint64_t **)(result + 48);
  if (*(_DWORD *)(result + 108) == 1818848869) {
    int v6 = 2;
  }
  else {
    int v6 = *((_DWORD *)v5 + 3);
  }
  uint64_t v7 = *(void *)(result + 72);
  double v8 = *(double *)(result + 152);
  double v9 = *(double *)(result + 160);
  double v10 = (double)*((int *)v5 + 4);
  if (a3)
  {
    if (a4 >= 1)
    {
      int v11 = 0;
      uint64_t v12 = *(void *)(result + 80);
      uint64_t v13 = *v5;
      uint64_t v14 = a5;
      do
      {
        double v15 = (v8 - (double)(int)v8) * v10;
        float64x2_t v16 = (float *)(v13 + 4 * v6 * (int)v15);
        double v17 = &v16[v6];
        uint64_t v18 = (float *)(v7 + 4 * (int)v8);
        double v19 = (float *)(v12 + 4 * (int)v8);
        if (v6 < 32)
        {
          float v25 = 0.0;
          float v24 = 0.0;
          float v23 = 0.0;
          int v22 = v6;
          float v21 = 0.0;
        }
        else
        {
          uint64_t v20 = 0;
          float v21 = 0.0;
          int v22 = v6;
          float v23 = 0.0;
          float v24 = 0.0;
          float v25 = 0.0;
          do
          {
            float v26 = v18[v20];
            float v27 = v18[v20 + 1];
            float v28 = v16[v20];
            float v29 = v16[v20 + 1];
            float v30 = v25 + (float)(v26 * v28);
            float v31 = v17[v20];
            float v32 = v17[v20 + 1];
            float v33 = v24 + (float)(v26 * v31);
            float v34 = v19[v20];
            float v35 = v19[v20 + 1];
            float v36 = v30 + (float)(v27 * v29);
            float v37 = v33 + (float)(v27 * v32);
            float v38 = (float)(v23 + (float)(v34 * v28)) + (float)(v35 * v29);
            float v39 = (float)(v21 + (float)(v34 * v31)) + (float)(v35 * v32);
            float v40 = v18[v20 + 2];
            float v41 = v18[v20 + 3];
            float v42 = v16[v20 + 2];
            float v43 = v16[v20 + 3];
            float v44 = v17[v20 + 2];
            float v45 = v17[v20 + 3];
            float v46 = v19[v20 + 2];
            float v47 = v19[v20 + 3];
            float v48 = (float)(v36 + (float)(v40 * v42)) + (float)(v41 * v43);
            float v49 = (float)(v37 + (float)(v40 * v44)) + (float)(v41 * v45);
            float v50 = (float)(v38 + (float)(v46 * v42)) + (float)(v47 * v43);
            float v51 = (float)(v39 + (float)(v46 * v44)) + (float)(v47 * v45);
            float v52 = v18[v20 + 4];
            float v53 = v18[v20 + 5];
            float v54 = v16[v20 + 4];
            float v55 = v16[v20 + 5];
            float v56 = v17[v20 + 4];
            float v57 = v17[v20 + 5];
            float v58 = v48 + (float)(v52 * v54);
            float v59 = v49 + (float)(v52 * v56);
            float v60 = v19[v20 + 4];
            float v61 = v19[v20 + 5];
            float v62 = v58 + (float)(v53 * v55);
            float v63 = v59 + (float)(v53 * v57);
            float v64 = (float)(v50 + (float)(v60 * v54)) + (float)(v61 * v55);
            float v65 = (float)(v51 + (float)(v60 * v56)) + (float)(v61 * v57);
            float v66 = v18[v20 + 6];
            float v67 = v18[v20 + 7];
            float v68 = v16[v20 + 6];
            float v69 = v16[v20 + 7];
            float v70 = v62 + (float)(v66 * v68);
            float v71 = v17[v20 + 6];
            float v72 = v17[v20 + 7];
            float v73 = v63 + (float)(v66 * v71);
            float v74 = v19[v20 + 6];
            float v75 = v19[v20 + 7];
            float v76 = v70 + (float)(v67 * v69);
            float v77 = v73 + (float)(v67 * v72);
            float v78 = (float)(v64 + (float)(v74 * v68)) + (float)(v75 * v69);
            float v79 = (float)(v65 + (float)(v74 * v71)) + (float)(v75 * v72);
            float v80 = v18[v20 + 8];
            float v81 = v18[v20 + 9];
            float v82 = v16[v20 + 8];
            float v83 = v16[v20 + 9];
            float v84 = v17[v20 + 8];
            float v85 = v17[v20 + 9];
            float v86 = v19[v20 + 8];
            float v87 = v19[v20 + 9];
            float v88 = (float)(v76 + (float)(v80 * v82)) + (float)(v81 * v83);
            float v89 = (float)(v77 + (float)(v80 * v84)) + (float)(v81 * v85);
            float v90 = (float)(v78 + (float)(v86 * v82)) + (float)(v87 * v83);
            float v91 = (float)(v79 + (float)(v86 * v84)) + (float)(v87 * v85);
            float v92 = v18[v20 + 10];
            float v93 = v18[v20 + 11];
            float v94 = v16[v20 + 10];
            float v95 = v16[v20 + 11];
            float v96 = v17[v20 + 10];
            float v97 = v17[v20 + 11];
            float v98 = v88 + (float)(v92 * v94);
            float v99 = v89 + (float)(v92 * v96);
            float v100 = v19[v20 + 10];
            float v101 = v19[v20 + 11];
            float v102 = v98 + (float)(v93 * v95);
            float v103 = v99 + (float)(v93 * v97);
            float v104 = (float)(v90 + (float)(v100 * v94)) + (float)(v101 * v95);
            float v105 = (float)(v91 + (float)(v100 * v96)) + (float)(v101 * v97);
            float v106 = v18[v20 + 12];
            float v107 = v18[v20 + 13];
            float v108 = v16[v20 + 12];
            float v109 = v16[v20 + 13];
            float v110 = v102 + (float)(v106 * v108);
            float v111 = v17[v20 + 12];
            float v112 = v17[v20 + 13];
            float v113 = v103 + (float)(v106 * v111);
            float v114 = v19[v20 + 12];
            float v115 = v19[v20 + 13];
            float v116 = v110 + (float)(v107 * v109);
            float v117 = v113 + (float)(v107 * v112);
            float v118 = (float)(v104 + (float)(v114 * v108)) + (float)(v115 * v109);
            float v119 = (float)(v105 + (float)(v114 * v111)) + (float)(v115 * v112);
            float v120 = v18[v20 + 14];
            float v121 = v18[v20 + 15];
            float v122 = v16[v20 + 14];
            float v123 = v16[v20 + 15];
            float v124 = v17[v20 + 14];
            float v125 = v17[v20 + 15];
            float v126 = v19[v20 + 14];
            float v127 = v19[v20 + 15];
            float v128 = (float)(v116 + (float)(v120 * v122)) + (float)(v121 * v123);
            float v129 = (float)(v117 + (float)(v120 * v124)) + (float)(v121 * v125);
            float v130 = (float)(v118 + (float)(v126 * v122)) + (float)(v127 * v123);
            float v131 = (float)(v119 + (float)(v126 * v124)) + (float)(v127 * v125);
            float v132 = v18[v20 + 16];
            float v133 = v18[v20 + 17];
            float v134 = v16[v20 + 16];
            float v135 = v16[v20 + 17];
            float v136 = v17[v20 + 16];
            float v137 = v17[v20 + 17];
            float v138 = v128 + (float)(v132 * v134);
            float v139 = v129 + (float)(v132 * v136);
            float v140 = v19[v20 + 16];
            float v141 = v19[v20 + 17];
            float v142 = v138 + (float)(v133 * v135);
            float v143 = v139 + (float)(v133 * v137);
            float v144 = (float)(v130 + (float)(v140 * v134)) + (float)(v141 * v135);
            float v145 = (float)(v131 + (float)(v140 * v136)) + (float)(v141 * v137);
            float v146 = v18[v20 + 18];
            float v147 = v18[v20 + 19];
            float v148 = v16[v20 + 18];
            float v149 = v16[v20 + 19];
            float v150 = v142 + (float)(v146 * v148);
            float v151 = v17[v20 + 18];
            float v152 = v17[v20 + 19];
            float v153 = v143 + (float)(v146 * v151);
            float v154 = v19[v20 + 18];
            float v155 = v19[v20 + 19];
            float v156 = v150 + (float)(v147 * v149);
            float v157 = v153 + (float)(v147 * v152);
            float v158 = (float)(v144 + (float)(v154 * v148)) + (float)(v155 * v149);
            float v159 = (float)(v145 + (float)(v154 * v151)) + (float)(v155 * v152);
            float v160 = v18[v20 + 20];
            float v161 = v18[v20 + 21];
            float v162 = v16[v20 + 20];
            float v163 = v16[v20 + 21];
            float v164 = v17[v20 + 20];
            float v165 = v17[v20 + 21];
            float v166 = v19[v20 + 20];
            float v167 = v19[v20 + 21];
            float v168 = (float)(v156 + (float)(v160 * v162)) + (float)(v161 * v163);
            float v169 = (float)(v157 + (float)(v160 * v164)) + (float)(v161 * v165);
            float v170 = (float)(v158 + (float)(v166 * v162)) + (float)(v167 * v163);
            float v171 = (float)(v159 + (float)(v166 * v164)) + (float)(v167 * v165);
            float v172 = v18[v20 + 22];
            float v173 = v18[v20 + 23];
            float v174 = v16[v20 + 22];
            float v175 = v16[v20 + 23];
            float v176 = v17[v20 + 22];
            float v177 = v17[v20 + 23];
            float v178 = v168 + (float)(v172 * v174);
            float v179 = v169 + (float)(v172 * v176);
            float v180 = v19[v20 + 22];
            float v181 = v19[v20 + 23];
            float v182 = v178 + (float)(v173 * v175);
            float v183 = v179 + (float)(v173 * v177);
            float v184 = (float)(v170 + (float)(v180 * v174)) + (float)(v181 * v175);
            float v185 = (float)(v171 + (float)(v180 * v176)) + (float)(v181 * v177);
            float v186 = v18[v20 + 24];
            float v187 = v18[v20 + 25];
            float v188 = v16[v20 + 24];
            float v189 = v16[v20 + 25];
            float v190 = v182 + (float)(v186 * v188);
            float v191 = v17[v20 + 24];
            float v192 = v17[v20 + 25];
            float v193 = v183 + (float)(v186 * v191);
            float v194 = v19[v20 + 24];
            float v195 = v19[v20 + 25];
            float v196 = v190 + (float)(v187 * v189);
            float v197 = v193 + (float)(v187 * v192);
            float v198 = (float)(v184 + (float)(v194 * v188)) + (float)(v195 * v189);
            float v199 = (float)(v185 + (float)(v194 * v191)) + (float)(v195 * v192);
            float v200 = v18[v20 + 26];
            float v201 = v18[v20 + 27];
            float v202 = v16[v20 + 26];
            float v203 = v16[v20 + 27];
            float v204 = v17[v20 + 26];
            float v205 = v17[v20 + 27];
            float v206 = v19[v20 + 26];
            float v207 = v19[v20 + 27];
            float v208 = (float)(v196 + (float)(v200 * v202)) + (float)(v201 * v203);
            float v209 = (float)(v197 + (float)(v200 * v204)) + (float)(v201 * v205);
            float v210 = (float)(v198 + (float)(v206 * v202)) + (float)(v207 * v203);
            float v211 = (float)(v199 + (float)(v206 * v204)) + (float)(v207 * v205);
            float v212 = v18[v20 + 28];
            float v213 = v18[v20 + 29];
            float v214 = v16[v20 + 28];
            float v215 = v16[v20 + 29];
            float v216 = v17[v20 + 28];
            float v217 = v17[v20 + 29];
            float v218 = v208 + (float)(v212 * v214);
            float v219 = v209 + (float)(v212 * v216);
            float v220 = v19[v20 + 28];
            float v221 = v19[v20 + 29];
            float v222 = v218 + (float)(v213 * v215);
            float v223 = v219 + (float)(v213 * v217);
            float v224 = (float)(v210 + (float)(v220 * v214)) + (float)(v221 * v215);
            float v225 = (float)(v211 + (float)(v220 * v216)) + (float)(v221 * v217);
            float v226 = v18[v20 + 30];
            float v227 = v18[v20 + 31];
            float v228 = v16[v20 + 30];
            float v229 = v16[v20 + 31];
            float v230 = v222 + (float)(v226 * v228);
            float v231 = v17[v20 + 30];
            float v232 = v17[v20 + 31];
            float v233 = v223 + (float)(v226 * v231);
            float v234 = v19[v20 + 30];
            float v235 = v19[v20 + 31];
            float v25 = v230 + (float)(v227 * v229);
            float v24 = v233 + (float)(v227 * v232);
            unsigned int v236 = v22;
            float v23 = (float)(v224 + (float)(v234 * v228)) + (float)(v235 * v229);
            float v21 = (float)(v225 + (float)(v234 * v231)) + (float)(v235 * v232);
            v22 -= 32;
            v20 += 32;
          }
          while (v236 > 0x3F);
          double v19 = (float *)((char *)v19 + v20 * 4);
          uint64_t v18 = (float *)((char *)v18 + v20 * 4);
          double v17 = (float *)((char *)v17 + v20 * 4);
          float64x2_t v16 = (float *)((char *)v16 + v20 * 4);
        }
        if (v22 >= 16)
        {
          unsigned int v237 = v22 + 16;
          do
          {
            float v238 = v18[1];
            float v239 = v16[1];
            float v240 = v17[1];
            float v241 = v19[1];
            float v242 = (float)(v25 + (float)(*v18 * *v16)) + (float)(v238 * v239);
            float v243 = (float)(v24 + (float)(*v18 * *v17)) + (float)(v238 * v240);
            float v244 = (float)(v23 + (float)(*v19 * *v16)) + (float)(v241 * v239);
            float v245 = (float)(v21 + (float)(*v19 * *v17)) + (float)(v241 * v240);
            float v246 = v18[2];
            float v247 = v18[3];
            float v248 = v16[2];
            float v249 = v16[3];
            float v250 = v242 + (float)(v246 * v248);
            float v251 = v17[2];
            float v252 = v17[3];
            float v253 = v243 + (float)(v246 * v251);
            float v254 = v19[2];
            float v255 = v19[3];
            float v256 = v250 + (float)(v247 * v249);
            float v257 = v253 + (float)(v247 * v252);
            float v258 = (float)(v244 + (float)(v254 * v248)) + (float)(v255 * v249);
            float v259 = (float)(v245 + (float)(v254 * v251)) + (float)(v255 * v252);
            float v260 = v18[4];
            float v261 = v18[5];
            float v262 = v16[4];
            float v263 = v16[5];
            float v264 = v256 + (float)(v260 * v262);
            float v265 = v17[4];
            float v266 = v17[5];
            float v267 = v257 + (float)(v260 * v265);
            float v268 = v19[4];
            float v269 = v19[5];
            float v270 = v264 + (float)(v261 * v263);
            float v271 = v267 + (float)(v261 * v266);
            float v272 = (float)(v258 + (float)(v268 * v262)) + (float)(v269 * v263);
            float v273 = (float)(v259 + (float)(v268 * v265)) + (float)(v269 * v266);
            float v274 = v18[6];
            float v275 = v18[7];
            float v276 = v16[6];
            float v277 = v16[7];
            float v278 = v270 + (float)(v274 * v276);
            float v279 = v17[6];
            float v280 = v17[7];
            float v281 = v271 + (float)(v274 * v279);
            float v282 = v19[6];
            float v283 = v19[7];
            float v284 = v278 + (float)(v275 * v277);
            float v285 = v281 + (float)(v275 * v280);
            float v286 = (float)(v272 + (float)(v282 * v276)) + (float)(v283 * v277);
            float v287 = (float)(v273 + (float)(v282 * v279)) + (float)(v283 * v280);
            float v288 = v18[8];
            float v289 = v18[9];
            float v290 = v16[8];
            float v291 = v16[9];
            float v292 = v284 + (float)(v288 * v290);
            float v293 = v17[8];
            float v294 = v17[9];
            float v295 = v285 + (float)(v288 * v293);
            float v296 = v19[8];
            float v297 = v19[9];
            float v298 = v292 + (float)(v289 * v291);
            float v299 = v295 + (float)(v289 * v294);
            float v300 = (float)(v286 + (float)(v296 * v290)) + (float)(v297 * v291);
            float v301 = (float)(v287 + (float)(v296 * v293)) + (float)(v297 * v294);
            float v302 = v18[10];
            float v303 = v18[11];
            float v304 = v16[10];
            float v305 = v16[11];
            float v306 = v298 + (float)(v302 * v304);
            float v307 = v17[10];
            float v308 = v17[11];
            float v309 = v299 + (float)(v302 * v307);
            float v310 = v19[10];
            float v311 = v19[11];
            float v312 = v306 + (float)(v303 * v305);
            float v313 = v309 + (float)(v303 * v308);
            float v314 = (float)(v300 + (float)(v310 * v304)) + (float)(v311 * v305);
            float v315 = (float)(v301 + (float)(v310 * v307)) + (float)(v311 * v308);
            float v316 = v18[12];
            float v317 = v18[13];
            float v318 = v16[12];
            float v319 = v16[13];
            float v320 = v312 + (float)(v316 * v318);
            float v321 = v17[12];
            float v322 = v17[13];
            float v323 = v313 + (float)(v316 * v321);
            float v324 = v19[12];
            float v325 = v19[13];
            float v326 = v320 + (float)(v317 * v319);
            float v327 = v323 + (float)(v317 * v322);
            float v328 = (float)(v314 + (float)(v324 * v318)) + (float)(v325 * v319);
            float v329 = (float)(v315 + (float)(v324 * v321)) + (float)(v325 * v322);
            float v330 = v18[14];
            float v331 = v18[15];
            float v332 = v16[14];
            float v333 = v16[15];
            float v334 = v326 + (float)(v330 * v332);
            float v335 = v17[14];
            float v336 = v17[15];
            float v337 = v327 + (float)(v330 * v335);
            float v338 = v19[14];
            float v339 = v19[15];
            float v25 = v334 + (float)(v331 * v333);
            float v24 = v337 + (float)(v331 * v336);
            float v23 = (float)(v328 + (float)(v338 * v332)) + (float)(v339 * v333);
            v237 -= 16;
            v18 += 16;
            float v21 = (float)(v329 + (float)(v338 * v335)) + (float)(v339 * v336);
            v16 += 16;
            v17 += 16;
            v19 += 16;
          }
          while (v237 > 0x1F);
        }
        double v340 = v15 - (double)(int)v15;
        float v341 = v25 + v340 * (float)(v24 - v25);
        *a2 = v341;
        a2 += v14;
        *(float *)&double v340 = v23 + v340 * (float)(v21 - v23);
        *a3 = LODWORD(v340);
        a3 += v14;
        double v8 = v9 + v8;
        ++v11;
      }
      while (v11 != a4);
    }
  }
  else if (a4 >= 1)
  {
    int v342 = 0;
    uint64_t v343 = *v5;
    uint64_t v344 = a5;
    do
    {
      double v345 = (v8 - (double)(int)v8) * v10;
      float v346 = (float *)(v343 + 4 * v6 * (int)v345);
      float v347 = &v346[v6];
      float v348 = (float *)(v7 + 4 * (int)v8);
      if (v6 < 32)
      {
        float v352 = 0.0;
        float v350 = 0.0;
        int v351 = v6;
      }
      else
      {
        uint64_t v349 = 0;
        float v350 = 0.0;
        int v351 = v6;
        float v352 = 0.0;
        do
        {
          float v353 = v348[v349];
          float v354 = v348[v349 + 1];
          float v355 = (float)(v352 + (float)(v353 * v346[v349])) + (float)(v354 * v346[v349 + 1]);
          float v356 = (float)(v350 + (float)(v353 * v347[v349])) + (float)(v354 * v347[v349 + 1]);
          float v357 = v348[v349 + 2];
          float v358 = v348[v349 + 3];
          float v359 = (float)(v355 + (float)(v357 * v346[v349 + 2])) + (float)(v358 * v346[v349 + 3]);
          float v360 = (float)(v356 + (float)(v357 * v347[v349 + 2])) + (float)(v358 * v347[v349 + 3]);
          float v361 = v348[v349 + 4];
          float v362 = v348[v349 + 5];
          float v363 = (float)(v359 + (float)(v361 * v346[v349 + 4])) + (float)(v362 * v346[v349 + 5]);
          float v364 = (float)(v360 + (float)(v361 * v347[v349 + 4])) + (float)(v362 * v347[v349 + 5]);
          float v365 = v348[v349 + 6];
          float v366 = v348[v349 + 7];
          float v367 = (float)(v363 + (float)(v365 * v346[v349 + 6])) + (float)(v366 * v346[v349 + 7]);
          float v368 = (float)(v364 + (float)(v365 * v347[v349 + 6])) + (float)(v366 * v347[v349 + 7]);
          float v369 = v348[v349 + 8];
          float v370 = v348[v349 + 9];
          float v371 = (float)(v367 + (float)(v369 * v346[v349 + 8])) + (float)(v370 * v346[v349 + 9]);
          float v372 = (float)(v368 + (float)(v369 * v347[v349 + 8])) + (float)(v370 * v347[v349 + 9]);
          float v373 = v348[v349 + 10];
          float v374 = v348[v349 + 11];
          float v375 = (float)(v371 + (float)(v373 * v346[v349 + 10])) + (float)(v374 * v346[v349 + 11]);
          float v376 = (float)(v372 + (float)(v373 * v347[v349 + 10])) + (float)(v374 * v347[v349 + 11]);
          float v377 = v348[v349 + 12];
          float v378 = v348[v349 + 13];
          float v379 = (float)(v375 + (float)(v377 * v346[v349 + 12])) + (float)(v378 * v346[v349 + 13]);
          float v380 = (float)(v376 + (float)(v377 * v347[v349 + 12])) + (float)(v378 * v347[v349 + 13]);
          float v381 = v348[v349 + 14];
          float v382 = v348[v349 + 15];
          float v383 = (float)(v379 + (float)(v381 * v346[v349 + 14])) + (float)(v382 * v346[v349 + 15]);
          float v384 = (float)(v380 + (float)(v381 * v347[v349 + 14])) + (float)(v382 * v347[v349 + 15]);
          float v385 = v348[v349 + 16];
          float v386 = v348[v349 + 17];
          float v387 = (float)(v383 + (float)(v385 * v346[v349 + 16])) + (float)(v386 * v346[v349 + 17]);
          float v388 = (float)(v384 + (float)(v385 * v347[v349 + 16])) + (float)(v386 * v347[v349 + 17]);
          float v389 = v348[v349 + 18];
          float v390 = v348[v349 + 19];
          float v391 = (float)(v387 + (float)(v389 * v346[v349 + 18])) + (float)(v390 * v346[v349 + 19]);
          float v392 = (float)(v388 + (float)(v389 * v347[v349 + 18])) + (float)(v390 * v347[v349 + 19]);
          float v393 = v348[v349 + 20];
          float v394 = v348[v349 + 21];
          float v395 = (float)(v391 + (float)(v393 * v346[v349 + 20])) + (float)(v394 * v346[v349 + 21]);
          float v396 = (float)(v392 + (float)(v393 * v347[v349 + 20])) + (float)(v394 * v347[v349 + 21]);
          float v397 = v348[v349 + 22];
          float v398 = v348[v349 + 23];
          float v399 = (float)(v395 + (float)(v397 * v346[v349 + 22])) + (float)(v398 * v346[v349 + 23]);
          float v400 = (float)(v396 + (float)(v397 * v347[v349 + 22])) + (float)(v398 * v347[v349 + 23]);
          float v401 = v348[v349 + 24];
          float v402 = v348[v349 + 25];
          float v403 = (float)(v399 + (float)(v401 * v346[v349 + 24])) + (float)(v402 * v346[v349 + 25]);
          float v404 = (float)(v400 + (float)(v401 * v347[v349 + 24])) + (float)(v402 * v347[v349 + 25]);
          float v405 = v348[v349 + 26];
          float v406 = v348[v349 + 27];
          float v407 = (float)(v403 + (float)(v405 * v346[v349 + 26])) + (float)(v406 * v346[v349 + 27]);
          float v408 = (float)(v404 + (float)(v405 * v347[v349 + 26])) + (float)(v406 * v347[v349 + 27]);
          float v409 = v348[v349 + 28];
          float v410 = v348[v349 + 29];
          float v411 = (float)(v407 + (float)(v409 * v346[v349 + 28])) + (float)(v410 * v346[v349 + 29]);
          float v412 = (float)(v408 + (float)(v409 * v347[v349 + 28])) + (float)(v410 * v347[v349 + 29]);
          float v413 = v348[v349 + 30];
          float v414 = v348[v349 + 31];
          float v352 = (float)(v411 + (float)(v413 * v346[v349 + 30])) + (float)(v414 * v346[v349 + 31]);
          unsigned int v415 = v351;
          float v350 = (float)(v412 + (float)(v413 * v347[v349 + 30])) + (float)(v414 * v347[v349 + 31]);
          v351 -= 32;
          v349 += 32;
        }
        while (v415 > 0x3F);
        float v348 = (float *)((char *)v348 + v349 * 4);
        float v347 = (float *)((char *)v347 + v349 * 4);
        float v346 = (float *)((char *)v346 + v349 * 4);
      }
      if (v351 >= 16)
      {
        unsigned int v416 = v351 + 16;
        do
        {
          float v417 = v348[1];
          float v418 = (float)(v352 + (float)(*v348 * *v346)) + (float)(v417 * v346[1]);
          float v419 = (float)(v350 + (float)(*v348 * *v347)) + (float)(v417 * v347[1]);
          float v420 = v348[2];
          float v421 = v348[3];
          float v422 = (float)(v418 + (float)(v420 * v346[2])) + (float)(v421 * v346[3]);
          float v423 = (float)(v419 + (float)(v420 * v347[2])) + (float)(v421 * v347[3]);
          float v424 = v348[4];
          float v425 = v348[5];
          float v426 = (float)(v422 + (float)(v424 * v346[4])) + (float)(v425 * v346[5]);
          float v427 = (float)(v423 + (float)(v424 * v347[4])) + (float)(v425 * v347[5]);
          float v428 = v348[6];
          float v429 = v348[7];
          float v430 = (float)(v426 + (float)(v428 * v346[6])) + (float)(v429 * v346[7]);
          float v431 = (float)(v427 + (float)(v428 * v347[6])) + (float)(v429 * v347[7]);
          float v432 = v348[8];
          float v433 = v348[9];
          float v434 = (float)(v430 + (float)(v432 * v346[8])) + (float)(v433 * v346[9]);
          float v435 = (float)(v431 + (float)(v432 * v347[8])) + (float)(v433 * v347[9]);
          float v436 = v348[10];
          float v437 = v348[11];
          float v438 = (float)(v434 + (float)(v436 * v346[10])) + (float)(v437 * v346[11]);
          float v439 = (float)(v435 + (float)(v436 * v347[10])) + (float)(v437 * v347[11]);
          float v440 = v348[12];
          float v441 = v348[13];
          float v442 = (float)(v438 + (float)(v440 * v346[12])) + (float)(v441 * v346[13]);
          float v443 = (float)(v439 + (float)(v440 * v347[12])) + (float)(v441 * v347[13]);
          float v444 = v348[14];
          float v445 = v348[15];
          float v352 = (float)(v442 + (float)(v444 * v346[14])) + (float)(v445 * v346[15]);
          v416 -= 16;
          float v350 = (float)(v443 + (float)(v444 * v347[14])) + (float)(v445 * v347[15]);
          v348 += 16;
          v346 += 16;
          v347 += 16;
        }
        while (v416 > 0x1F);
      }
      float v446 = v345 - (double)(int)v345;
      *a2 = v352 + (float)(v446 * (float)(v350 - v352));
      a2 += v344;
      double v8 = v9 + v8;
      ++v342;
    }
    while (v342 != a4);
  }
  *(double *)(result + 152) = v8;
  return result;
}

void Resampler2::ConvertSIMD<Resampler2::RampedRate>(Resampler2 *this, float *a2, float *a3, int a4, int a5)
{
  int v6 = a3;
  float64x2_t v9 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(-*((double *)this + 16)), 0);
  float64x2_t v10 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(-*((double *)this + 33)), 0);
  int v11 = *((_DWORD *)this + 27);
  uint64_t v12 = *((void *)this + 6);
  if (v11 == 1818848869) {
    int v13 = 2;
  }
  else {
    int v13 = *(_DWORD *)(v12 + 12);
  }
  double v14 = *((double *)this + 25);
  double v15 = *((double *)this + 26);
  double v16 = *((double *)this + 31);
  float64x2_t v270 = vaddq_f64(*(float64x2_t *)((char *)this + 216), v9);
  float64x2_t v17 = vaddq_f64(*(float64x2_t *)((char *)this + 232), v10);
  double v18 = (double)*((int *)this + 16);
  uint64_t v19 = 4 * v13;
  uint64_t v271 = *((void *)this + 9);
  double v20 = (double)*(int *)(v12 + 16);
  double v21 = *((double *)this + 19);
  if (a3)
  {
    if (a4 >= 1)
    {
      int v22 = 0;
      uint64_t v23 = *((void *)this + 10);
      uint64_t v24 = a5;
      double v25 = v17.f64[1];
      double v26 = 0.0;
      double v272 = v17.f64[0];
      do
      {
        if (v25 <= (double)(int)v26) {
          double v27 = v15;
        }
        else {
          double v27 = v14 + v16 * ((double)(int)v26 - v17.f64[0]);
        }
        *((double *)this + 20) = v27;
        Resampler2::SetVarispeedSinc((uint64_t)this, v27);
        if (v25 <= v26)
        {
          double v29 = (v26 - v25) * v15;
          double v28 = v270.f64[1];
        }
        else
        {
          double v28 = (v26 - v272) * (v14 + v16 * 0.5 * (v26 - v272));
          double v29 = v270.f64[0];
        }
        v17.f64[0] = v272;
        double v30 = fmax(v29 + v28, 0.0);
        if (v30 >= v18) {
          double v21 = v18;
        }
        else {
          double v21 = v30;
        }
        uint64_t v31 = **((void **)this + 6);
        double v32 = (v21 - (double)(int)v21) * v20;
        int v33 = v13 * (int)v32;
        float v34 = (const float *)(v31 + 4 * v33);
        float v35 = (float32x4_t *)(v271 + 4 * (int)v21);
        float v36 = (float32x4_t *)(v23 + 4 * (int)v21);
        double v37 = (double)(int)v32;
        if (v11 == 1650553971)
        {
          vdotprD2i(v35->f32, v36->f32, v34, &v34[v13], v32 - v37, a2, v6, v13);
          v17.f64[0] = v272;
        }
        else
        {
          float32x4_t v38 = 0uLL;
          float32x4_t v39 = 0uLL;
          float32x4_t v40 = 0uLL;
          int v41 = v13;
          float32x4_t v42 = 0uLL;
          if (v13 >= 64)
          {
            unint64_t v43 = 0;
            uint64_t v44 = v31 + v19 + 4 * v33;
            int v41 = v13;
            do
            {
              float32x4_t v45 = v35[v43 / 0x10];
              float32x4_t v46 = v35[v43 / 0x10 + 1];
              float32x4_t v47 = *(float32x4_t *)&v34[v43 / 4];
              float32x4_t v48 = *(float32x4_t *)&v34[v43 / 4 + 4];
              float32x4_t v49 = vmlaq_f32(v38, v47, v45);
              float32x4_t v50 = *(float32x4_t *)(v44 + v43);
              float32x4_t v51 = *(float32x4_t *)(v44 + v43 + 16);
              float32x4_t v52 = vmlaq_f32(v39, v50, v45);
              float32x4_t v53 = v36[v43 / 0x10];
              float32x4_t v54 = v36[v43 / 0x10 + 1];
              float32x4_t v55 = vmlaq_f32(v49, v48, v46);
              float32x4_t v56 = vmlaq_f32(v52, v51, v46);
              float32x4_t v57 = vmlaq_f32(vmlaq_f32(v40, v47, v53), v48, v54);
              float32x4_t v58 = vmlaq_f32(vmlaq_f32(v42, v50, v53), v51, v54);
              float32x4_t v59 = v35[v43 / 0x10 + 2];
              float32x4_t v60 = v35[v43 / 0x10 + 3];
              float32x4_t v61 = *(float32x4_t *)&v34[v43 / 4 + 8];
              float32x4_t v62 = *(float32x4_t *)&v34[v43 / 4 + 12];
              float32x4_t v63 = vmlaq_f32(v55, v61, v59);
              float32x4_t v64 = *(float32x4_t *)(v44 + v43 + 32);
              float32x4_t v65 = *(float32x4_t *)(v44 + v43 + 48);
              float32x4_t v66 = vmlaq_f32(v56, v64, v59);
              float32x4_t v67 = v36[v43 / 0x10 + 2];
              float32x4_t v68 = v36[v43 / 0x10 + 3];
              float32x4_t v69 = vmlaq_f32(v63, v62, v60);
              float32x4_t v70 = vmlaq_f32(v66, v65, v60);
              float32x4_t v71 = vmlaq_f32(vmlaq_f32(v57, v61, v67), v62, v68);
              float32x4_t v72 = vmlaq_f32(vmlaq_f32(v58, v64, v67), v65, v68);
              float32x4_t v73 = v35[v43 / 0x10 + 4];
              float32x4_t v74 = v35[v43 / 0x10 + 5];
              float32x4_t v75 = *(float32x4_t *)&v34[v43 / 4 + 16];
              float32x4_t v76 = *(float32x4_t *)&v34[v43 / 4 + 20];
              float32x4_t v77 = vmlaq_f32(v69, v75, v73);
              float32x4_t v78 = *(float32x4_t *)(v44 + v43 + 64);
              float32x4_t v79 = *(float32x4_t *)(v44 + v43 + 80);
              float32x4_t v80 = vmlaq_f32(v70, v78, v73);
              float32x4_t v81 = v36[v43 / 0x10 + 4];
              float32x4_t v82 = v36[v43 / 0x10 + 5];
              float32x4_t v83 = vmlaq_f32(v77, v76, v74);
              float32x4_t v84 = vmlaq_f32(v80, v79, v74);
              float32x4_t v85 = vmlaq_f32(vmlaq_f32(v71, v75, v81), v76, v82);
              float32x4_t v86 = vmlaq_f32(vmlaq_f32(v72, v78, v81), v79, v82);
              float32x4_t v87 = v35[v43 / 0x10 + 6];
              float32x4_t v88 = v35[v43 / 0x10 + 7];
              float32x4_t v89 = *(float32x4_t *)&v34[v43 / 4 + 24];
              float32x4_t v90 = *(float32x4_t *)&v34[v43 / 4 + 28];
              float32x4_t v91 = vmlaq_f32(v83, v89, v87);
              float32x4_t v92 = *(float32x4_t *)(v44 + v43 + 96);
              float32x4_t v93 = *(float32x4_t *)(v44 + v43 + 112);
              float32x4_t v94 = vmlaq_f32(v84, v92, v87);
              float32x4_t v95 = v36[v43 / 0x10 + 6];
              float32x4_t v96 = v36[v43 / 0x10 + 7];
              float32x4_t v97 = vmlaq_f32(v91, v90, v88);
              float32x4_t v98 = vmlaq_f32(v94, v93, v88);
              float32x4_t v99 = vmlaq_f32(vmlaq_f32(v85, v89, v95), v90, v96);
              float32x4_t v100 = vmlaq_f32(vmlaq_f32(v86, v92, v95), v93, v96);
              float32x4_t v101 = v35[v43 / 0x10 + 8];
              float32x4_t v102 = v35[v43 / 0x10 + 9];
              float32x4_t v103 = *(float32x4_t *)&v34[v43 / 4 + 32];
              float32x4_t v104 = *(float32x4_t *)&v34[v43 / 4 + 36];
              float32x4_t v105 = vmlaq_f32(v97, v103, v101);
              float32x4_t v106 = *(float32x4_t *)(v44 + v43 + 128);
              float32x4_t v107 = *(float32x4_t *)(v44 + v43 + 144);
              float32x4_t v108 = vmlaq_f32(v98, v106, v101);
              float32x4_t v109 = v36[v43 / 0x10 + 8];
              float32x4_t v110 = v36[v43 / 0x10 + 9];
              float32x4_t v111 = vmlaq_f32(v105, v104, v102);
              float32x4_t v112 = vmlaq_f32(v108, v107, v102);
              float32x4_t v113 = vmlaq_f32(vmlaq_f32(v99, v103, v109), v104, v110);
              float32x4_t v114 = vmlaq_f32(vmlaq_f32(v100, v106, v109), v107, v110);
              float32x4_t v115 = v35[v43 / 0x10 + 10];
              float32x4_t v116 = v35[v43 / 0x10 + 11];
              float32x4_t v117 = *(float32x4_t *)&v34[v43 / 4 + 40];
              float32x4_t v118 = *(float32x4_t *)&v34[v43 / 4 + 44];
              float32x4_t v119 = vmlaq_f32(v111, v117, v115);
              float32x4_t v120 = *(float32x4_t *)(v44 + v43 + 160);
              float32x4_t v121 = *(float32x4_t *)(v44 + v43 + 176);
              float32x4_t v122 = vmlaq_f32(v112, v120, v115);
              float32x4_t v123 = v36[v43 / 0x10 + 10];
              float32x4_t v124 = v36[v43 / 0x10 + 11];
              float32x4_t v125 = vmlaq_f32(v119, v118, v116);
              float32x4_t v126 = vmlaq_f32(v122, v121, v116);
              float32x4_t v127 = vmlaq_f32(vmlaq_f32(v113, v117, v123), v118, v124);
              float32x4_t v128 = vmlaq_f32(vmlaq_f32(v114, v120, v123), v121, v124);
              float32x4_t v129 = v35[v43 / 0x10 + 12];
              float32x4_t v130 = v35[v43 / 0x10 + 13];
              float32x4_t v131 = *(float32x4_t *)&v34[v43 / 4 + 48];
              float32x4_t v132 = *(float32x4_t *)&v34[v43 / 4 + 52];
              float32x4_t v133 = vmlaq_f32(v125, v131, v129);
              float32x4_t v134 = *(float32x4_t *)(v44 + v43 + 192);
              float32x4_t v135 = *(float32x4_t *)(v44 + v43 + 208);
              float32x4_t v136 = vmlaq_f32(v126, v134, v129);
              float32x4_t v137 = v36[v43 / 0x10 + 12];
              float32x4_t v138 = v36[v43 / 0x10 + 13];
              float32x4_t v139 = vmlaq_f32(v133, v132, v130);
              float32x4_t v140 = vmlaq_f32(v136, v135, v130);
              float32x4_t v141 = vmlaq_f32(vmlaq_f32(v127, v131, v137), v132, v138);
              float32x4_t v142 = vmlaq_f32(vmlaq_f32(v128, v134, v137), v135, v138);
              float32x4_t v143 = v35[v43 / 0x10 + 14];
              float32x4_t v144 = v35[v43 / 0x10 + 15];
              float32x4_t v145 = *(float32x4_t *)&v34[v43 / 4 + 56];
              float32x4_t v146 = *(float32x4_t *)&v34[v43 / 4 + 60];
              float32x4_t v147 = vmlaq_f32(v139, v145, v143);
              float32x4_t v148 = *(float32x4_t *)(v44 + v43 + 224);
              float32x4_t v149 = *(float32x4_t *)(v44 + v43 + 240);
              float32x4_t v150 = vmlaq_f32(v140, v148, v143);
              float32x4_t v151 = v36[v43 / 0x10 + 14];
              float32x4_t v152 = v36[v43 / 0x10 + 15];
              unsigned int v153 = v41;
              float32x4_t v38 = vmlaq_f32(v147, v146, v144);
              float32x4_t v39 = vmlaq_f32(v150, v149, v144);
              float32x4_t v40 = vmlaq_f32(vmlaq_f32(v141, v145, v151), v146, v152);
              float32x4_t v42 = vmlaq_f32(vmlaq_f32(v142, v148, v151), v149, v152);
              v41 -= 64;
              v43 += 256;
            }
            while (v153 > 0x7F);
            float v36 = (float32x4_t *)((char *)v36 + v43);
            float v35 = (float32x4_t *)((char *)v35 + v43);
            float v34 = (const float *)((char *)v34 + v43);
          }
          if (v41 >= 16)
          {
            unsigned int v154 = v41 + 16;
            float v155 = (float32x4_t *)(v34 + 8);
            do
            {
              float v156 = (float32x4_t *)((char *)v155 + v19);
              float32x4_t v157 = v35[1];
              float32x4_t v158 = v155[-2];
              float32x4_t v159 = v155[-1];
              float32x4_t v160 = *(float32x4_t *)((char *)v155 + v19 - 32);
              float32x4_t v161 = *(float32x4_t *)((char *)v155 + v19 - 16);
              float32x4_t v162 = v36[1];
              float32x4_t v163 = vmlaq_f32(vmlaq_f32(v38, v158, *v35), v159, v157);
              float32x4_t v164 = vmlaq_f32(vmlaq_f32(v39, v160, *v35), v161, v157);
              float32x4_t v165 = vmlaq_f32(vmlaq_f32(v40, v158, *v36), v159, v162);
              float32x4_t v166 = vmlaq_f32(vmlaq_f32(v42, v160, *v36), v161, v162);
              float32x4_t v167 = v35[2];
              float32x4_t v168 = v35[3];
              float32x4_t v169 = *v155;
              float32x4_t v170 = v155[1];
              v155 += 4;
              float32x4_t v171 = vmlaq_f32(v163, v169, v167);
              float32x4_t v172 = v156[1];
              float32x4_t v173 = vmlaq_f32(v164, *v156, v167);
              float32x4_t v174 = v36[2];
              float32x4_t v175 = v36[3];
              float32x4_t v38 = vmlaq_f32(v171, v170, v168);
              float32x4_t v39 = vmlaq_f32(v173, v172, v168);
              float32x4_t v40 = vmlaq_f32(vmlaq_f32(v165, v169, v174), v170, v175);
              v154 -= 16;
              float32x4_t v42 = vmlaq_f32(vmlaq_f32(v166, *v156, v174), v172, v175);
              v35 += 4;
              v36 += 4;
            }
            while (v154 > 0x1F);
          }
          float v176 = v32 - v37;
          int8x16_t v177 = (int8x16_t)vmlaq_n_f32(v38, vsubq_f32(v39, v38), v176);
          int8x16_t v178 = (int8x16_t)vmlaq_n_f32(v40, vsubq_f32(v42, v40), v176);
          *a2 = vaddv_f32(vadd_f32(*(float32x2_t *)v177.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v177, v177, 8uLL)));
          float *v6 = vaddv_f32(vadd_f32(*(float32x2_t *)v178.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v178, v178, 8uLL)));
        }
        a2 += v24;
        v6 += v24;
        ++v22;
        double v26 = v26 + 1.0;
      }
      while (v22 != a4);
    }
  }
  else if (a4 >= 1)
  {
    int v179 = 0;
    uint64_t v180 = a5;
    double v181 = v17.f64[1];
    uint64_t v182 = 4 * v13;
    double v183 = 0.0;
    double v273 = v17.f64[0];
    do
    {
      if (v181 <= (double)(int)v183) {
        double v184 = v15;
      }
      else {
        double v184 = v14 + v16 * ((double)(int)v183 - v17.f64[0]);
      }
      *((double *)this + 20) = v184;
      Resampler2::SetVarispeedSinc((uint64_t)this, v184);
      if (v181 <= v183)
      {
        double v186 = (v183 - v181) * v15;
        double v185 = v270.f64[1];
      }
      else
      {
        double v185 = (v183 - v273) * (v14 + v16 * 0.5 * (v183 - v273));
        double v186 = v270.f64[0];
      }
      v17.f64[0] = v273;
      double v187 = fmax(v186 + v185, 0.0);
      if (v187 >= v18) {
        double v21 = v18;
      }
      else {
        double v21 = v187;
      }
      uint64_t v188 = **((void **)this + 6);
      double v189 = (v21 - (double)(int)v21) * v20;
      int v190 = (int)v189;
      int v191 = v13 * (int)v189;
      float v192 = (float32x4_t *)(v188 + 4 * v191);
      float v193 = (float32x4_t *)(v271 + 4 * (int)v21);
      if (v11 == 1650553971)
      {
        float v194 = (float32x4_t *)((char *)v192 + 4 * v13);
        float32x4_t v195 = v193[1];
        float32x4_t v196 = vmulq_f32(v195, v192[1]);
        float32x4_t v197 = vmulq_f32(*v193, *v192);
        float32x4_t v198 = vmulq_f32(v195, v194[1]);
        float32x4_t v199 = vmulq_f32(*v193, *v194);
        float32x4_t v200 = v192[2];
        float32x4_t v201 = v192[3];
        float32x4_t v202 = v194[2];
        float32x4_t v203 = v194[3];
        float32x4_t v204 = v193[2];
        float32x4_t v205 = v193[3];
        float64x2_t v206 = 0uLL;
        if ((unint64_t)v13 >> 2 == 4)
        {
          float64x2_t v207 = 0uLL;
          float64x2_t v208 = 0uLL;
          float64x2_t v209 = 0uLL;
        }
        else
        {
          float v259 = v193 + 4;
          float64x2_t v208 = 0uLL;
          unint64_t v260 = 16 * ((unint64_t)v13 >> 2) - 64;
          float64x2_t v209 = 0uLL;
          float64x2_t v207 = 0uLL;
          do
          {
            float64x2_t v207 = vaddq_f64(v207, vaddq_f64(vcvt_hight_f64_f32(v196), vcvt_hight_f64_f32(v197)));
            float64x2_t v206 = vaddq_f64(v206, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v196.f32), vcvtq_f64_f32(*(float32x2_t *)v197.f32)));
            float64x2_t v209 = vaddq_f64(v209, vaddq_f64(vcvt_hight_f64_f32(v198), vcvt_hight_f64_f32(v199)));
            float64x2_t v208 = vaddq_f64(v208, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v198.f32), vcvtq_f64_f32(*(float32x2_t *)v199.f32)));
            float32x4_t v197 = vmulq_f32(v204, v200);
            float32x4_t v196 = vmulq_f32(v205, v201);
            float32x4_t v199 = vmulq_f32(v204, v202);
            float32x4_t v198 = vmulq_f32(v205, v203);
            float32x4_t v204 = *v259;
            float32x4_t v205 = v259[1];
            v259 += 2;
            float32x4_t v200 = v192[4];
            float32x4_t v201 = v192[5];
            float32x4_t v202 = *(float32x4_t *)((char *)v192 + v182 + 64);
            float32x4_t v203 = *(float32x4_t *)((char *)v192 + v182 + 80);
            v192 += 2;
            v260 -= 32;
          }
          while (v260);
        }
        float32x4_t v261 = vmulq_f32(v201, v205);
        float32x4_t v262 = vmulq_f32(v200, v204);
        float32x4_t v263 = vmulq_f32(v203, v205);
        float32x4_t v264 = vmulq_f32(v202, v204);
        float64x2_t v265 = vaddq_f64(vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v198), vcvt_hight_f64_f32(v199)), v209), vaddq_f64(vcvt_hight_f64_f32(v263), vcvt_hight_f64_f32(v264)));
        float64x2_t v266 = vaddq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v198.f32), vcvtq_f64_f32(*(float32x2_t *)v199.f32)), v208), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v263.f32), vcvtq_f64_f32(*(float32x2_t *)v264.f32)));
        int64x2_t v267 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v196.f32), vcvtq_f64_f32(*(float32x2_t *)v197.f32)), v206), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v261.f32), vcvtq_f64_f32(*(float32x2_t *)v262.f32))), vaddq_f64(vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v196), vcvt_hight_f64_f32(v197)), v207), vaddq_f64(vcvt_hight_f64_f32(v261), vcvt_hight_f64_f32(v262))));
        int64x2_t v268 = (int64x2_t)vaddq_f64(v266, v265);
        float64x2_t v269 = vaddq_f64((float64x2_t)vzip1q_s64(v268, v267), (float64x2_t)vzip2q_s64(v268, v267));
        float v258 = v269.f64[1] + (v189 - (double)v190) * (v269.f64[0] - v269.f64[1]);
      }
      else
      {
        float32x4_t v210 = 0uLL;
        float32x4_t v211 = 0uLL;
        int v212 = v13;
        if (v13 >= 64)
        {
          uint64_t v213 = 0;
          uint64_t v214 = v188 + v19 + 4 * v191;
          int v212 = v13;
          do
          {
            float32x4_t v215 = v193[v213];
            float32x4_t v216 = v193[v213 + 1];
            float32x4_t v217 = vmlaq_f32(vmlaq_f32(v210, v192[v213], v215), v192[v213 + 1], v216);
            float32x4_t v218 = vmlaq_f32(vmlaq_f32(v211, *(float32x4_t *)(v214 + v213 * 16), v215), *(float32x4_t *)(v214 + v213 * 16 + 16), v216);
            float32x4_t v219 = v193[v213 + 2];
            float32x4_t v220 = v193[v213 + 3];
            float32x4_t v221 = vmlaq_f32(vmlaq_f32(v217, v192[v213 + 2], v219), v192[v213 + 3], v220);
            float32x4_t v222 = vmlaq_f32(vmlaq_f32(v218, *(float32x4_t *)(v214 + v213 * 16 + 32), v219), *(float32x4_t *)(v214 + v213 * 16 + 48), v220);
            float32x4_t v223 = v193[v213 + 4];
            float32x4_t v224 = v193[v213 + 5];
            float32x4_t v225 = vmlaq_f32(vmlaq_f32(v221, v192[v213 + 4], v223), v192[v213 + 5], v224);
            float32x4_t v226 = vmlaq_f32(vmlaq_f32(v222, *(float32x4_t *)(v214 + v213 * 16 + 64), v223), *(float32x4_t *)(v214 + v213 * 16 + 80), v224);
            float32x4_t v227 = v193[v213 + 6];
            float32x4_t v228 = v193[v213 + 7];
            float32x4_t v229 = vmlaq_f32(vmlaq_f32(v225, v192[v213 + 6], v227), v192[v213 + 7], v228);
            float32x4_t v230 = vmlaq_f32(vmlaq_f32(v226, *(float32x4_t *)(v214 + v213 * 16 + 96), v227), *(float32x4_t *)(v214 + v213 * 16 + 112), v228);
            float32x4_t v231 = v193[v213 + 8];
            float32x4_t v232 = v193[v213 + 9];
            float32x4_t v233 = vmlaq_f32(vmlaq_f32(v229, v192[v213 + 8], v231), v192[v213 + 9], v232);
            float32x4_t v234 = vmlaq_f32(vmlaq_f32(v230, *(float32x4_t *)(v214 + v213 * 16 + 128), v231), *(float32x4_t *)(v214 + v213 * 16 + 144), v232);
            float32x4_t v235 = v193[v213 + 10];
            float32x4_t v236 = v193[v213 + 11];
            float32x4_t v237 = vmlaq_f32(vmlaq_f32(v233, v192[v213 + 10], v235), v192[v213 + 11], v236);
            float32x4_t v238 = vmlaq_f32(vmlaq_f32(v234, *(float32x4_t *)(v214 + v213 * 16 + 160), v235), *(float32x4_t *)(v214 + v213 * 16 + 176), v236);
            float32x4_t v239 = v193[v213 + 12];
            float32x4_t v240 = v193[v213 + 13];
            float32x4_t v241 = vmlaq_f32(vmlaq_f32(v237, v192[v213 + 12], v239), v192[v213 + 13], v240);
            float32x4_t v242 = vmlaq_f32(vmlaq_f32(v238, *(float32x4_t *)(v214 + v213 * 16 + 192), v239), *(float32x4_t *)(v214 + v213 * 16 + 208), v240);
            float32x4_t v243 = v193[v213 + 14];
            float32x4_t v244 = v193[v213 + 15];
            unsigned int v245 = v212;
            float32x4_t v210 = vmlaq_f32(vmlaq_f32(v241, v192[v213 + 14], v243), v192[v213 + 15], v244);
            float32x4_t v211 = vmlaq_f32(vmlaq_f32(v242, *(float32x4_t *)(v214 + v213 * 16 + 224), v243), *(float32x4_t *)(v214 + v213 * 16 + 240), v244);
            v212 -= 64;
            v213 += 16;
          }
          while (v245 > 0x7F);
          float v193 = (float32x4_t *)((char *)v193 + v213 * 16);
          float v192 = (float32x4_t *)((char *)v192 + v213 * 16);
        }
        if (v212 >= 16)
        {
          unsigned int v246 = v212 + 16;
          float v247 = v192 + 2;
          do
          {
            float v248 = (float32x4_t *)((char *)v247 + v19);
            float32x4_t v249 = v193[1];
            float32x4_t v250 = vmlaq_f32(vmlaq_f32(v210, v247[-2], *v193), v247[-1], v249);
            float32x4_t v251 = vmlaq_f32(vmlaq_f32(v211, *(float32x4_t *)((char *)v247 + v19 - 32), *v193), *(float32x4_t *)((char *)v247 + v19 - 16), v249);
            float32x4_t v252 = v193[2];
            float32x4_t v253 = v193[3];
            float32x4_t v254 = *v247;
            float32x4_t v255 = v247[1];
            v247 += 4;
            float32x4_t v210 = vmlaq_f32(vmlaq_f32(v250, v254, v252), v255, v253);
            float32x4_t v211 = vmlaq_f32(vmlaq_f32(v251, *v248, v252), v248[1], v253);
            v246 -= 16;
            v193 += 4;
          }
          while (v246 > 0x1F);
        }
        float v256 = v189 - (double)v190;
        int8x16_t v257 = (int8x16_t)vmlaq_n_f32(v210, vsubq_f32(v211, v210), v256);
        float v258 = vaddv_f32(vadd_f32(*(float32x2_t *)v257.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v257, v257, 8uLL)));
      }
      *a2 = v258;
      a2 += v180;
      ++v179;
      double v183 = v183 + 1.0;
    }
    while (v179 != a4);
  }
  *((double *)this + 19) = v21;
}

float vdotprD2i(const float *a1, const float *a2, const float *a3, const float *a4, double a5, float *a6, float *a7, unint64_t a8)
{
  float32x4_t v8 = *(float32x4_t *)(a1 + 4);
  float32x4_t v9 = *(float32x4_t *)(a2 + 4);
  float32x4_t v10 = *(float32x4_t *)(a3 + 4);
  float32x4_t v11 = *(float32x4_t *)(a4 + 4);
  float32x4_t v12 = vmulq_f32(v8, v10);
  float32x4_t v13 = vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a3);
  float32x4_t v14 = vmulq_f32(v9, v10);
  float32x4_t v15 = vmulq_f32(*(float32x4_t *)a2, *(float32x4_t *)a3);
  float32x4_t v16 = vmulq_f32(v8, v11);
  float32x4_t v17 = vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a4);
  float32x4_t v18 = vmulq_f32(v9, v11);
  float32x4_t v19 = *(float32x4_t *)(a3 + 8);
  float32x4_t v20 = *(float32x4_t *)(a3 + 12);
  float32x4_t v21 = *(float32x4_t *)(a4 + 8);
  float32x4_t v22 = *(float32x4_t *)(a4 + 12);
  float32x4_t v23 = *(float32x4_t *)(a2 + 8);
  float32x4_t v24 = *(float32x4_t *)(a2 + 12);
  float64x2_t v25 = 0uLL;
  float32x4_t v26 = *(float32x4_t *)(a1 + 8);
  float32x4_t v27 = *(float32x4_t *)(a1 + 12);
  if (a8 >> 2 == 4)
  {
    float64x2_t v28 = 0uLL;
    float64x2_t v29 = 0uLL;
    float64x2_t v30 = 0uLL;
    float64x2_t v31 = 0uLL;
    float64x2_t v32 = 0uLL;
    float64x2_t v33 = 0uLL;
    float64x2_t v34 = 0uLL;
  }
  else
  {
    float32x4_t v35 = vmulq_f32(*(float32x4_t *)a2, *(float32x4_t *)a4);
    float v36 = a4 + 16;
    float64x2_t v33 = 0uLL;
    double v37 = a3 + 16;
    float64x2_t v34 = 0uLL;
    float32x4_t v38 = a2 + 16;
    float32x4_t v39 = a1 + 16;
    float64x2_t v31 = 0uLL;
    float64x2_t v32 = 0uLL;
    float64x2_t v29 = 0uLL;
    float64x2_t v30 = 0uLL;
    float64x2_t v28 = 0uLL;
    do
    {
      float64x2_t v28 = vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v12), vcvt_hight_f64_f32(v13)), v28);
      float64x2_t v25 = vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v12.f32), vcvtq_f64_f32(*(float32x2_t *)v13.f32)), v25);
      float64x2_t v30 = vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v14), vcvt_hight_f64_f32(v15)), v30);
      float64x2_t v29 = vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v14.f32), vcvtq_f64_f32(*(float32x2_t *)v15.f32)), v29);
      float64x2_t v40 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v16.f32), vcvtq_f64_f32(*(float32x2_t *)v17.f32));
      float64x2_t v41 = vaddq_f64(vcvt_hight_f64_f32(v16), vcvt_hight_f64_f32(v17));
      float64x2_t v42 = vcvt_hight_f64_f32(v18);
      float64x2_t v43 = vcvtq_f64_f32(*(float32x2_t *)v18.f32);
      float64x2_t v44 = vcvt_hight_f64_f32(v35);
      float64x2_t v45 = vcvtq_f64_f32(*(float32x2_t *)v35.f32);
      float32x4_t v13 = vmulq_f32(v19, v26);
      float32x4_t v12 = vmulq_f32(v20, v27);
      float32x4_t v17 = vmulq_f32(v21, v26);
      float32x4_t v16 = vmulq_f32(v22, v27);
      float32x4_t v26 = *(float32x4_t *)v39;
      float32x4_t v27 = *(float32x4_t *)(v39 + 4);
      v39 += 8;
      float32x4_t v15 = vmulq_f32(v19, v23);
      float32x4_t v14 = vmulq_f32(v20, v24);
      float32x4_t v35 = vmulq_f32(v21, v23);
      float32x4_t v18 = vmulq_f32(v22, v24);
      float32x4_t v23 = *(float32x4_t *)v38;
      float32x4_t v24 = *(float32x4_t *)(v38 + 4);
      v38 += 8;
      float64x2_t v32 = vaddq_f64(v41, v32);
      float64x2_t v31 = vaddq_f64(v40, v31);
      float32x4_t v19 = *(float32x4_t *)v37;
      float32x4_t v20 = *(float32x4_t *)(v37 + 4);
      v37 += 8;
      float32x4_t v21 = *(float32x4_t *)v36;
      float32x4_t v22 = *(float32x4_t *)(v36 + 4);
      v36 += 8;
      float64x2_t v34 = vaddq_f64(vaddq_f64(v42, v44), v34);
      float64x2_t v33 = vaddq_f64(vaddq_f64(v43, v45), v33);
    }
    while (v37 != &a3[4 * (a8 >> 2)]);
  }
  float64x2_t v46 = vcvtq_f64_f32(*(float32x2_t *)v12.f32);
  float64x2_t v47 = vcvtq_f64_f32(*(float32x2_t *)v13.f32);
  float64x2_t v48 = vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v12), vcvt_hight_f64_f32(v13)), v28);
  float64x2_t v49 = vcvtq_f64_f32(*(float32x2_t *)v14.f32);
  float64x2_t v50 = vcvtq_f64_f32(*(float32x2_t *)v15.f32);
  float64x2_t v51 = vcvt_hight_f64_f32(v15);
  float64x2_t v52 = vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v14), v51), v30);
  float64x2_t v53 = vcvtq_f64_f32(*(float32x2_t *)v17.f32);
  float64x2_t v54 = vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v16), vcvt_hight_f64_f32(v17)), v32);
  float64x2_t v55 = vaddq_f64(vaddq_f64(v50, vcvtq_f64_f32(*(float32x2_t *)v18.f32)), v33);
  float64x2_t v56 = vaddq_f64(vaddq_f64(v51, vcvt_hight_f64_f32(v18)), v34);
  float32x4_t v57 = vmulq_f32(v20, v27);
  float32x4_t v58 = vmulq_f32(v19, v26);
  float32x4_t v59 = vmulq_f32(v20, v24);
  float32x4_t v60 = vmulq_f32(v19, v23);
  float32x4_t v61 = vmulq_f32(v22, v27);
  float32x4_t v62 = vmulq_f32(v21, v26);
  float32x4_t v63 = vmulq_f32(v22, v24);
  float32x4_t v64 = vmulq_f32(v21, v23);
  float64x2_t v65 = vaddq_f64(v56, vaddq_f64(vcvt_hight_f64_f32(v63), vcvt_hight_f64_f32(v64)));
  float64x2_t v66 = vaddq_f64(v55, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v63.f32), vcvtq_f64_f32(*(float32x2_t *)v64.f32)));
  int64x2_t v67 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(v46, v47), v25), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v57.f32), vcvtq_f64_f32(*(float32x2_t *)v58.f32))), vaddq_f64(v48, vaddq_f64(vcvt_hight_f64_f32(v57), vcvt_hight_f64_f32(v58))));
  int64x2_t v68 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v16.f32), v53), v31), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v61.f32), vcvtq_f64_f32(*(float32x2_t *)v62.f32))), vaddq_f64(v54, vaddq_f64(vcvt_hight_f64_f32(v61), vcvt_hight_f64_f32(v62))));
  float64x2_t v69 = vaddq_f64((float64x2_t)vzip1q_s64(v68, v67), (float64x2_t)vzip2q_s64(v68, v67));
  int64x2_t v70 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(v49, v50), v29), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v59.f32), vcvtq_f64_f32(*(float32x2_t *)v60.f32))), vaddq_f64(v52, vaddq_f64(vcvt_hight_f64_f32(v59), vcvt_hight_f64_f32(v60))));
  int64x2_t v71 = (int64x2_t)vaddq_f64(v66, v65);
  float64x2_t v72 = vaddq_f64((float64x2_t)vzip1q_s64(v71, v70), (float64x2_t)vzip2q_s64(v71, v70));
  *(float *)v65.f64 = v69.f64[1] + a5 * (v69.f64[0] - v69.f64[1]);
  *a6 = *(float *)v65.f64;
  float result = v72.f64[1] + a5 * (v72.f64[0] - v72.f64[1]);
  *a7 = result;
  return result;
}

void Resampler2::ConvertSIMD<Resampler2::FixedRate>(uint64_t a1, float *a2, float *a3, uint64_t a4, int a5)
{
  uint64_t v5 = a4;
  int v6 = a3;
  uint64_t v8 = a1;
  uint64_t v9 = *(unsigned int *)(a1 + 108);
  float32x4_t v10 = *(int **)(a1 + 48);
  if (v9 == 1818848869) {
    uint64_t v11 = 2;
  }
  else {
    uint64_t v11 = v10[3];
  }
  unint64_t v259 = (int)v11;
  uint64_t v12 = 4 * (int)v11;
  uint64_t v13 = *(void *)(a1 + 72);
  double v14 = (double)v10[4];
  double v15 = *(double *)(a1 + 152);
  double v16 = *(double *)(a1 + 160);
  if (a3)
  {
    if ((int)a4 >= 1)
    {
      int v17 = 0;
      uint64_t v18 = *(void *)(a1 + 80);
      uint64_t v19 = a5;
      do
      {
        uint64_t v20 = **(void **)(v8 + 48);
        double v21 = (v15 - (double)(int)v15) * v14;
        int v22 = v11 * (int)v21;
        float32x4_t v23 = (const float *)(v20 + 4 * v22);
        float32x4_t v24 = (float32x4_t *)(v13 + 4 * (int)v15);
        float64x2_t v25 = (float32x4_t *)(v18 + 4 * (int)v15);
        double v26 = (double)(int)v21;
        if (v9 == 1650553971)
        {
          int v260 = v17;
          uint64_t v27 = v11;
          uint64_t v28 = v5;
          uint64_t v29 = v9;
          uint64_t v30 = v13;
          uint64_t v31 = v8;
          uint64_t v32 = v19;
          vdotprD2i(v24->f32, v25->f32, v23, &v23[v259], v21 - v26, a2, v6, v259);
          int v17 = v260;
          uint64_t v19 = v32;
          uint64_t v8 = v31;
          uint64_t v13 = v30;
          uint64_t v9 = v29;
          uint64_t v5 = v28;
          uint64_t v11 = v27;
        }
        else
        {
          float32x4_t v33 = 0uLL;
          float32x4_t v34 = 0uLL;
          float32x4_t v35 = 0uLL;
          int v36 = v11;
          float32x4_t v37 = 0uLL;
          if ((int)v11 >= 64)
          {
            unint64_t v38 = 0;
            uint64_t v39 = v20 + v12 + 4 * v22;
            int v36 = v11;
            do
            {
              float32x4_t v40 = v24[v38 / 0x10];
              float32x4_t v41 = v24[v38 / 0x10 + 1];
              float32x4_t v42 = *(float32x4_t *)&v23[v38 / 4];
              float32x4_t v43 = *(float32x4_t *)&v23[v38 / 4 + 4];
              float32x4_t v44 = vmlaq_f32(v33, v42, v40);
              float32x4_t v45 = *(float32x4_t *)(v39 + v38);
              float32x4_t v46 = *(float32x4_t *)(v39 + v38 + 16);
              float32x4_t v47 = vmlaq_f32(v34, v45, v40);
              float32x4_t v48 = v25[v38 / 0x10];
              float32x4_t v49 = v25[v38 / 0x10 + 1];
              float32x4_t v50 = vmlaq_f32(v44, v43, v41);
              float32x4_t v51 = vmlaq_f32(v47, v46, v41);
              float32x4_t v52 = vmlaq_f32(vmlaq_f32(v35, v42, v48), v43, v49);
              float32x4_t v53 = vmlaq_f32(vmlaq_f32(v37, v45, v48), v46, v49);
              float32x4_t v54 = v24[v38 / 0x10 + 2];
              float32x4_t v55 = v24[v38 / 0x10 + 3];
              float32x4_t v56 = *(float32x4_t *)&v23[v38 / 4 + 8];
              float32x4_t v57 = *(float32x4_t *)&v23[v38 / 4 + 12];
              float32x4_t v58 = vmlaq_f32(v50, v56, v54);
              float32x4_t v59 = *(float32x4_t *)(v39 + v38 + 32);
              float32x4_t v60 = *(float32x4_t *)(v39 + v38 + 48);
              float32x4_t v61 = vmlaq_f32(v51, v59, v54);
              float32x4_t v62 = v25[v38 / 0x10 + 2];
              float32x4_t v63 = v25[v38 / 0x10 + 3];
              float32x4_t v64 = vmlaq_f32(v58, v57, v55);
              float32x4_t v65 = vmlaq_f32(v61, v60, v55);
              float32x4_t v66 = vmlaq_f32(vmlaq_f32(v52, v56, v62), v57, v63);
              float32x4_t v67 = vmlaq_f32(vmlaq_f32(v53, v59, v62), v60, v63);
              float32x4_t v68 = v24[v38 / 0x10 + 4];
              float32x4_t v69 = v24[v38 / 0x10 + 5];
              float32x4_t v70 = *(float32x4_t *)&v23[v38 / 4 + 16];
              float32x4_t v71 = *(float32x4_t *)&v23[v38 / 4 + 20];
              float32x4_t v72 = vmlaq_f32(v64, v70, v68);
              float32x4_t v73 = *(float32x4_t *)(v39 + v38 + 64);
              float32x4_t v74 = *(float32x4_t *)(v39 + v38 + 80);
              float32x4_t v75 = vmlaq_f32(v65, v73, v68);
              float32x4_t v76 = v25[v38 / 0x10 + 4];
              float32x4_t v77 = v25[v38 / 0x10 + 5];
              float32x4_t v78 = vmlaq_f32(v72, v71, v69);
              float32x4_t v79 = vmlaq_f32(v75, v74, v69);
              float32x4_t v80 = vmlaq_f32(vmlaq_f32(v66, v70, v76), v71, v77);
              float32x4_t v81 = vmlaq_f32(vmlaq_f32(v67, v73, v76), v74, v77);
              float32x4_t v82 = v24[v38 / 0x10 + 6];
              float32x4_t v83 = v24[v38 / 0x10 + 7];
              float32x4_t v84 = *(float32x4_t *)&v23[v38 / 4 + 24];
              float32x4_t v85 = *(float32x4_t *)&v23[v38 / 4 + 28];
              float32x4_t v86 = vmlaq_f32(v78, v84, v82);
              float32x4_t v87 = *(float32x4_t *)(v39 + v38 + 96);
              float32x4_t v88 = *(float32x4_t *)(v39 + v38 + 112);
              float32x4_t v89 = vmlaq_f32(v79, v87, v82);
              float32x4_t v90 = v25[v38 / 0x10 + 6];
              float32x4_t v91 = v25[v38 / 0x10 + 7];
              float32x4_t v92 = vmlaq_f32(v86, v85, v83);
              float32x4_t v93 = vmlaq_f32(v89, v88, v83);
              float32x4_t v94 = vmlaq_f32(vmlaq_f32(v80, v84, v90), v85, v91);
              float32x4_t v95 = vmlaq_f32(vmlaq_f32(v81, v87, v90), v88, v91);
              float32x4_t v96 = v24[v38 / 0x10 + 8];
              float32x4_t v97 = v24[v38 / 0x10 + 9];
              float32x4_t v98 = *(float32x4_t *)&v23[v38 / 4 + 32];
              float32x4_t v99 = *(float32x4_t *)&v23[v38 / 4 + 36];
              float32x4_t v100 = vmlaq_f32(v92, v98, v96);
              float32x4_t v101 = *(float32x4_t *)(v39 + v38 + 128);
              float32x4_t v102 = *(float32x4_t *)(v39 + v38 + 144);
              float32x4_t v103 = vmlaq_f32(v93, v101, v96);
              float32x4_t v104 = v25[v38 / 0x10 + 8];
              float32x4_t v105 = v25[v38 / 0x10 + 9];
              float32x4_t v106 = vmlaq_f32(v100, v99, v97);
              float32x4_t v107 = vmlaq_f32(v103, v102, v97);
              float32x4_t v108 = vmlaq_f32(vmlaq_f32(v94, v98, v104), v99, v105);
              float32x4_t v109 = vmlaq_f32(vmlaq_f32(v95, v101, v104), v102, v105);
              float32x4_t v110 = v24[v38 / 0x10 + 10];
              float32x4_t v111 = v24[v38 / 0x10 + 11];
              float32x4_t v112 = *(float32x4_t *)&v23[v38 / 4 + 40];
              float32x4_t v113 = *(float32x4_t *)&v23[v38 / 4 + 44];
              float32x4_t v114 = vmlaq_f32(v106, v112, v110);
              float32x4_t v115 = *(float32x4_t *)(v39 + v38 + 160);
              float32x4_t v116 = *(float32x4_t *)(v39 + v38 + 176);
              float32x4_t v117 = vmlaq_f32(v107, v115, v110);
              float32x4_t v118 = v25[v38 / 0x10 + 10];
              float32x4_t v119 = v25[v38 / 0x10 + 11];
              float32x4_t v120 = vmlaq_f32(v114, v113, v111);
              float32x4_t v121 = vmlaq_f32(v117, v116, v111);
              float32x4_t v122 = vmlaq_f32(vmlaq_f32(v108, v112, v118), v113, v119);
              float32x4_t v123 = vmlaq_f32(vmlaq_f32(v109, v115, v118), v116, v119);
              float32x4_t v124 = v24[v38 / 0x10 + 12];
              float32x4_t v125 = v24[v38 / 0x10 + 13];
              float32x4_t v126 = *(float32x4_t *)&v23[v38 / 4 + 48];
              float32x4_t v127 = *(float32x4_t *)&v23[v38 / 4 + 52];
              float32x4_t v128 = vmlaq_f32(v120, v126, v124);
              float32x4_t v129 = *(float32x4_t *)(v39 + v38 + 192);
              float32x4_t v130 = *(float32x4_t *)(v39 + v38 + 208);
              float32x4_t v131 = vmlaq_f32(v121, v129, v124);
              float32x4_t v132 = v25[v38 / 0x10 + 12];
              float32x4_t v133 = v25[v38 / 0x10 + 13];
              float32x4_t v134 = vmlaq_f32(v128, v127, v125);
              float32x4_t v135 = vmlaq_f32(v131, v130, v125);
              float32x4_t v136 = vmlaq_f32(vmlaq_f32(v122, v126, v132), v127, v133);
              float32x4_t v137 = vmlaq_f32(vmlaq_f32(v123, v129, v132), v130, v133);
              float32x4_t v138 = v24[v38 / 0x10 + 14];
              float32x4_t v139 = v24[v38 / 0x10 + 15];
              float32x4_t v140 = *(float32x4_t *)&v23[v38 / 4 + 56];
              float32x4_t v141 = *(float32x4_t *)&v23[v38 / 4 + 60];
              float32x4_t v142 = vmlaq_f32(v134, v140, v138);
              float32x4_t v143 = *(float32x4_t *)(v39 + v38 + 224);
              float32x4_t v144 = *(float32x4_t *)(v39 + v38 + 240);
              float32x4_t v145 = vmlaq_f32(v135, v143, v138);
              float32x4_t v146 = v25[v38 / 0x10 + 14];
              float32x4_t v147 = v25[v38 / 0x10 + 15];
              unsigned int v148 = v36;
              float32x4_t v33 = vmlaq_f32(v142, v141, v139);
              float32x4_t v34 = vmlaq_f32(v145, v144, v139);
              float32x4_t v35 = vmlaq_f32(vmlaq_f32(v136, v140, v146), v141, v147);
              float32x4_t v37 = vmlaq_f32(vmlaq_f32(v137, v143, v146), v144, v147);
              v36 -= 64;
              v38 += 256;
            }
            while (v148 > 0x7F);
            float64x2_t v25 = (float32x4_t *)((char *)v25 + v38);
            float32x4_t v24 = (float32x4_t *)((char *)v24 + v38);
            float32x4_t v23 = (const float *)((char *)v23 + v38);
          }
          if (v36 >= 16)
          {
            unsigned int v149 = v36 + 16;
            float32x4_t v150 = (float32x4_t *)(v23 + 8);
            do
            {
              float32x4_t v151 = (float32x4_t *)((char *)v150 + v12);
              float32x4_t v152 = v24[1];
              float32x4_t v153 = v150[-2];
              float32x4_t v154 = v150[-1];
              float32x4_t v155 = *(float32x4_t *)((char *)v150 + v12 - 32);
              float32x4_t v156 = *(float32x4_t *)((char *)v150 + v12 - 16);
              float32x4_t v157 = v25[1];
              float32x4_t v158 = vmlaq_f32(vmlaq_f32(v33, v153, *v24), v154, v152);
              float32x4_t v159 = vmlaq_f32(vmlaq_f32(v34, v155, *v24), v156, v152);
              float32x4_t v160 = vmlaq_f32(vmlaq_f32(v35, v153, *v25), v154, v157);
              float32x4_t v161 = vmlaq_f32(vmlaq_f32(v37, v155, *v25), v156, v157);
              float32x4_t v162 = v24[2];
              float32x4_t v163 = v24[3];
              float32x4_t v164 = *v150;
              float32x4_t v165 = v150[1];
              v150 += 4;
              float32x4_t v166 = vmlaq_f32(v158, v164, v162);
              float32x4_t v167 = v151[1];
              float32x4_t v168 = vmlaq_f32(v159, *v151, v162);
              float32x4_t v169 = v25[2];
              float32x4_t v170 = v25[3];
              float32x4_t v33 = vmlaq_f32(v166, v165, v163);
              float32x4_t v34 = vmlaq_f32(v168, v167, v163);
              float32x4_t v35 = vmlaq_f32(vmlaq_f32(v160, v164, v169), v165, v170);
              v149 -= 16;
              float32x4_t v37 = vmlaq_f32(vmlaq_f32(v161, *v151, v169), v167, v170);
              v24 += 4;
              v25 += 4;
            }
            while (v149 > 0x1F);
          }
          float v171 = v21 - v26;
          int8x16_t v172 = (int8x16_t)vmlaq_n_f32(v33, vsubq_f32(v34, v33), v171);
          int8x16_t v173 = (int8x16_t)vmlaq_n_f32(v35, vsubq_f32(v37, v35), v171);
          *a2 = vaddv_f32(vadd_f32(*(float32x2_t *)v172.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v172, v172, 8uLL)));
          float *v6 = vaddv_f32(vadd_f32(*(float32x2_t *)v173.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v173, v173, 8uLL)));
        }
        a2 += v19;
        v6 += v19;
        double v15 = v16 + v15;
        ++v17;
      }
      while (v17 != v5);
    }
  }
  else if ((int)a4 >= 1)
  {
    int v174 = 0;
    uint64_t v175 = *(void *)v10;
    uint64_t v176 = a5;
    uint64_t v177 = 4 * (int)v11;
    do
    {
      double v178 = (v15 - (double)(int)v15) * v14;
      int v179 = (int)v178;
      int v180 = v11 * (int)v178;
      double v181 = (float32x4_t *)(v175 + 4 * v180);
      uint64_t v182 = (float32x4_t *)(v13 + 4 * (int)v15);
      if (v9 == 1650553971)
      {
        double v183 = (float32x4_t *)((char *)v181 + 4 * (int)v11);
        float32x4_t v184 = v182[1];
        float32x4_t v185 = vmulq_f32(v184, v181[1]);
        float32x4_t v186 = vmulq_f32(*v182, *v181);
        float32x4_t v187 = vmulq_f32(v184, v183[1]);
        float32x4_t v188 = vmulq_f32(*v182, *v183);
        float32x4_t v189 = v181[2];
        float32x4_t v190 = v181[3];
        float32x4_t v191 = v183[2];
        float32x4_t v192 = v183[3];
        float32x4_t v193 = v182[2];
        float32x4_t v194 = v182[3];
        float64x2_t v195 = 0uLL;
        if ((unint64_t)(int)v11 >> 2 == 4)
        {
          float64x2_t v196 = 0uLL;
          float64x2_t v197 = 0uLL;
          float64x2_t v198 = 0uLL;
        }
        else
        {
          float v248 = v182 + 4;
          float64x2_t v197 = 0uLL;
          unint64_t v249 = 16 * ((unint64_t)(int)v11 >> 2) - 64;
          float64x2_t v198 = 0uLL;
          float64x2_t v196 = 0uLL;
          do
          {
            float64x2_t v196 = vaddq_f64(v196, vaddq_f64(vcvt_hight_f64_f32(v185), vcvt_hight_f64_f32(v186)));
            float64x2_t v195 = vaddq_f64(v195, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v185.f32), vcvtq_f64_f32(*(float32x2_t *)v186.f32)));
            float64x2_t v198 = vaddq_f64(v198, vaddq_f64(vcvt_hight_f64_f32(v187), vcvt_hight_f64_f32(v188)));
            float64x2_t v197 = vaddq_f64(v197, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v187.f32), vcvtq_f64_f32(*(float32x2_t *)v188.f32)));
            float32x4_t v186 = vmulq_f32(v193, v189);
            float32x4_t v185 = vmulq_f32(v194, v190);
            float32x4_t v188 = vmulq_f32(v193, v191);
            float32x4_t v187 = vmulq_f32(v194, v192);
            float32x4_t v193 = *v248;
            float32x4_t v194 = v248[1];
            v248 += 2;
            float32x4_t v189 = v181[4];
            float32x4_t v190 = v181[5];
            float32x4_t v191 = *(float32x4_t *)((char *)v181 + v177 + 64);
            float32x4_t v192 = *(float32x4_t *)((char *)v181 + v177 + 80);
            v181 += 2;
            v249 -= 32;
          }
          while (v249);
        }
        float32x4_t v250 = vmulq_f32(v190, v194);
        float32x4_t v251 = vmulq_f32(v189, v193);
        float32x4_t v252 = vmulq_f32(v192, v194);
        float32x4_t v253 = vmulq_f32(v191, v193);
        float64x2_t v254 = vaddq_f64(vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v187), vcvt_hight_f64_f32(v188)), v198), vaddq_f64(vcvt_hight_f64_f32(v252), vcvt_hight_f64_f32(v253)));
        float64x2_t v255 = vaddq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v187.f32), vcvtq_f64_f32(*(float32x2_t *)v188.f32)), v197), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v252.f32), vcvtq_f64_f32(*(float32x2_t *)v253.f32)));
        int64x2_t v256 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v185.f32), vcvtq_f64_f32(*(float32x2_t *)v186.f32)), v195), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v250.f32), vcvtq_f64_f32(*(float32x2_t *)v251.f32))), vaddq_f64(vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v185), vcvt_hight_f64_f32(v186)), v196), vaddq_f64(vcvt_hight_f64_f32(v250), vcvt_hight_f64_f32(v251))));
        int64x2_t v257 = (int64x2_t)vaddq_f64(v255, v254);
        float64x2_t v258 = vaddq_f64((float64x2_t)vzip1q_s64(v257, v256), (float64x2_t)vzip2q_s64(v257, v256));
        float v247 = v258.f64[1] + (v178 - (double)v179) * (v258.f64[0] - v258.f64[1]);
      }
      else
      {
        float32x4_t v199 = 0uLL;
        float32x4_t v200 = 0uLL;
        int v201 = v11;
        if ((int)v11 >= 64)
        {
          uint64_t v202 = 0;
          uint64_t v203 = v175 + v12 + 4 * v180;
          int v201 = v11;
          do
          {
            float32x4_t v204 = v182[v202];
            float32x4_t v205 = v182[v202 + 1];
            float32x4_t v206 = vmlaq_f32(vmlaq_f32(v199, v181[v202], v204), v181[v202 + 1], v205);
            float32x4_t v207 = vmlaq_f32(vmlaq_f32(v200, *(float32x4_t *)(v203 + v202 * 16), v204), *(float32x4_t *)(v203 + v202 * 16 + 16), v205);
            float32x4_t v208 = v182[v202 + 2];
            float32x4_t v209 = v182[v202 + 3];
            float32x4_t v210 = vmlaq_f32(vmlaq_f32(v206, v181[v202 + 2], v208), v181[v202 + 3], v209);
            float32x4_t v211 = vmlaq_f32(vmlaq_f32(v207, *(float32x4_t *)(v203 + v202 * 16 + 32), v208), *(float32x4_t *)(v203 + v202 * 16 + 48), v209);
            float32x4_t v212 = v182[v202 + 4];
            float32x4_t v213 = v182[v202 + 5];
            float32x4_t v214 = vmlaq_f32(vmlaq_f32(v210, v181[v202 + 4], v212), v181[v202 + 5], v213);
            float32x4_t v215 = vmlaq_f32(vmlaq_f32(v211, *(float32x4_t *)(v203 + v202 * 16 + 64), v212), *(float32x4_t *)(v203 + v202 * 16 + 80), v213);
            float32x4_t v216 = v182[v202 + 6];
            float32x4_t v217 = v182[v202 + 7];
            float32x4_t v218 = vmlaq_f32(vmlaq_f32(v214, v181[v202 + 6], v216), v181[v202 + 7], v217);
            float32x4_t v219 = vmlaq_f32(vmlaq_f32(v215, *(float32x4_t *)(v203 + v202 * 16 + 96), v216), *(float32x4_t *)(v203 + v202 * 16 + 112), v217);
            float32x4_t v220 = v182[v202 + 8];
            float32x4_t v221 = v182[v202 + 9];
            float32x4_t v222 = vmlaq_f32(vmlaq_f32(v218, v181[v202 + 8], v220), v181[v202 + 9], v221);
            float32x4_t v223 = vmlaq_f32(vmlaq_f32(v219, *(float32x4_t *)(v203 + v202 * 16 + 128), v220), *(float32x4_t *)(v203 + v202 * 16 + 144), v221);
            float32x4_t v224 = v182[v202 + 10];
            float32x4_t v225 = v182[v202 + 11];
            float32x4_t v226 = vmlaq_f32(vmlaq_f32(v222, v181[v202 + 10], v224), v181[v202 + 11], v225);
            float32x4_t v227 = vmlaq_f32(vmlaq_f32(v223, *(float32x4_t *)(v203 + v202 * 16 + 160), v224), *(float32x4_t *)(v203 + v202 * 16 + 176), v225);
            float32x4_t v228 = v182[v202 + 12];
            float32x4_t v229 = v182[v202 + 13];
            float32x4_t v230 = vmlaq_f32(vmlaq_f32(v226, v181[v202 + 12], v228), v181[v202 + 13], v229);
            float32x4_t v231 = vmlaq_f32(vmlaq_f32(v227, *(float32x4_t *)(v203 + v202 * 16 + 192), v228), *(float32x4_t *)(v203 + v202 * 16 + 208), v229);
            float32x4_t v232 = v182[v202 + 14];
            float32x4_t v233 = v182[v202 + 15];
            unsigned int v234 = v201;
            float32x4_t v199 = vmlaq_f32(vmlaq_f32(v230, v181[v202 + 14], v232), v181[v202 + 15], v233);
            float32x4_t v200 = vmlaq_f32(vmlaq_f32(v231, *(float32x4_t *)(v203 + v202 * 16 + 224), v232), *(float32x4_t *)(v203 + v202 * 16 + 240), v233);
            v201 -= 64;
            v202 += 16;
          }
          while (v234 > 0x7F);
          uint64_t v182 = (float32x4_t *)((char *)v182 + v202 * 16);
          double v181 = (float32x4_t *)((char *)v181 + v202 * 16);
        }
        if (v201 >= 16)
        {
          unsigned int v235 = v201 + 16;
          float32x4_t v236 = v181 + 2;
          do
          {
            float32x4_t v237 = (float32x4_t *)((char *)v236 + v12);
            float32x4_t v238 = v182[1];
            float32x4_t v239 = vmlaq_f32(vmlaq_f32(v199, v236[-2], *v182), v236[-1], v238);
            float32x4_t v240 = vmlaq_f32(vmlaq_f32(v200, *(float32x4_t *)((char *)v236 + v12 - 32), *v182), *(float32x4_t *)((char *)v236 + v12 - 16), v238);
            float32x4_t v241 = v182[2];
            float32x4_t v242 = v182[3];
            float32x4_t v243 = *v236;
            float32x4_t v244 = v236[1];
            v236 += 4;
            float32x4_t v199 = vmlaq_f32(vmlaq_f32(v239, v243, v241), v244, v242);
            float32x4_t v200 = vmlaq_f32(vmlaq_f32(v240, *v237, v241), v237[1], v242);
            v235 -= 16;
            v182 += 4;
          }
          while (v235 > 0x1F);
        }
        float v245 = v178 - (double)v179;
        int8x16_t v246 = (int8x16_t)vmlaq_n_f32(v199, vsubq_f32(v200, v199), v245);
        float v247 = vaddv_f32(vadd_f32(*(float32x2_t *)v246.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v246, v246, 8uLL)));
      }
      *a2 = v247;
      a2 += v176;
      double v15 = v16 + v15;
      ++v174;
    }
    while (v174 != v5);
  }
  *(double *)(v8 + 152) = v15;
}

void std::vector<SincKernel *>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unsigned int v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a2);
    uint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v7 = &v4[8 * v6];
    uint64_t v9 = (char *)*a1;
    uint64_t v8 = (char *)a1[1];
    float32x4_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      uint64_t v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void Resampler2::Resampler2(Resampler2 *this, double a2, double a3, int a4, double a5)
{
  double v5 = a3;
  double v6 = a2;
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((double *)this + 11) = a2;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 26) = a4;
  *((_DWORD *)this + 27) = 1852797549;
  *((_DWORD *)this + 29) = 0;
  *((_WORD *)this + 62) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 19) = 0;
  double v8 = a2 / a3;
  *((double *)this + 20) = v8;
  *((double *)this + 21) = 1.0 / v8;
  *((_WORD *)this + 88) = 1;
  *((void *)this + 23) = 0;
  *((unsigned char *)this + 192) = 1;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)((char *)this + 200) = _Q0;
  *(_OWORD *)((char *)this + 216) = xmmword_1BAFF95B0;
  *(_OWORD *)((char *)this + 232) = xmmword_1BAFF95B0;
  *((void *)this + 31) = 0;
  *((unsigned char *)this + 256) = 0;
  *((void *)this + 33) = 0;
  if (v6 <= 0.0 || a3 <= 0.0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v50 = 136315906;
      float32x4_t v51 = "Resampler2.cpp";
      __int16 v52 = 1024;
      int v53 = 262;
      __int16 v54 = 2048;
      double v55 = v6;
      __int16 v56 = 2048;
      double v57 = v5;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d Resampler2 bad sample rate(s) : %11.2f %11.2f", (uint8_t *)&v50, 0x26u);
    }
    if (v6 > 0.0 || v5 > 0.0)
    {
      BOOL v13 = v5 <= 0.0 && v6 > 0.0;
      if (v13) {
        double v14 = v6;
      }
      else {
        double v14 = v5;
      }
      if (v6 <= 0.0) {
        double v6 = v5;
      }
      double v5 = v14;
    }
    else
    {
      double v5 = 44100.0;
      double v6 = 44100.0;
    }
  }
  int v15 = *((_DWORD *)this + 27);
  if (v15 == 1818848869)
  {
    *((void *)this + 8) = 0x200200000001;
    *((void *)this + 23) = 1;
    unsigned int v16 = 8194;
    goto LABEL_73;
  }
  int v17 = vcvtmd_s64_f64(v6);
  int v18 = vcvtmd_s64_f64(v5);
  if (v6 != (double)v17 || v5 != (double)v18) {
    goto LABEL_41;
  }
  if (v17 >= 0) {
    int v20 = v17;
  }
  else {
    int v20 = -v17;
  }
  if (v18 >= 0) {
    unsigned int v21 = v18;
  }
  else {
    unsigned int v21 = -v18;
  }
  int v22 = 1;
  if (v20 >= 2 && v21 >= 2)
  {
    int v22 = v21;
    do
    {
      if (v20 <= v22) {
        unsigned int v23 = v22;
      }
      else {
        unsigned int v23 = v20;
      }
      if (v20 < v22) {
        int v22 = v20;
      }
      int v20 = v23 % v22;
    }
    while ((int)(v23 % v22) > 0);
  }
  int v24 = v18 / v22;
  if (v18 / v22 <= 640)
  {
    *((unsigned char *)this + 125) = 1;
    *((_DWORD *)this + 25) = v17 / v22;
    *((_DWORD *)this + 29) = v24;
    *((double *)this + 18) = 1.0 / (double)v24;
  }
  else
  {
LABEL_41:
    if (v15 == 1650553971) {
      int v24 = 512;
    }
    else {
      int v24 = 128;
    }
  }
  unsigned int v25 = *((_DWORD *)this + 26);
  double v26 = *((double *)this + 20);
  double v27 = fmax(v26, 1.0);
  if (v15 != 1650553971)
  {
    if (v25 < 0x7F)
    {
      double v29 = 0.9;
      if (v25 <= 0x5F)
      {
        if (v25 <= 0x3F) {
          double v30 = 80.0;
        }
        else {
          double v30 = 90.0;
        }
        if (v25 <= 0x3F) {
          signed int v31 = 16;
        }
        else {
          signed int v31 = 32;
        }
      }
      else
      {
        signed int v31 = 64;
        double v30 = 100.0;
      }
    }
    else
    {
      double v30 = dbl_1BAFF95C0[v26 < 1.09];
      signed int v31 = 96;
      double v29 = 0.9;
    }
    goto LABEL_54;
  }
  if (v25 > 0x7E)
  {
    double v28 = 1152.0;
    double v29 = 0.99;
LABEL_51:
    *(double *)&uint64_t v32 = 160.0;
    goto LABEL_52;
  }
  if (v25 > 0x5F)
  {
    double v28 = 555.0;
    double v29 = 0.98;
    goto LABEL_51;
  }
  if (v25 <= 0x3F)
  {
    double v29 = dbl_1BAFF95D0[v25 > 0x1F];
    if (v25 <= 0x1F) {
      double v30 = 120.0;
    }
    else {
      double v30 = 144.0;
    }
    double v28 = 88.2;
    if (v25 > 0x1F) {
      double v28 = 192.0;
    }
    goto LABEL_53;
  }
  double v28 = 323.4;
  double v29 = 0.97;
  *(double *)&uint64_t v32 = 144.0;
LABEL_52:
  double v30 = *(double *)&v32;
LABEL_53:
  signed int v31 = (vcvtpd_s64_f64(v27 * v28) + 15) & 0xFFFFFFF0;
LABEL_54:
  if (v31 <= 96) {
    int v33 = 96;
  }
  else {
    int v33 = v31;
  }
  pthread_mutex_lock(&sInitLocker);
  if (sIsInitialized != 1) {
    operator new();
  }
  uint64_t v34 = *(void *)(sSincKernelFactory + 8) - *(void *)sSincKernelFactory;
  if (!v34) {
LABEL_66:
  }
    operator new();
  uint64_t v35 = 0;
  unint64_t v36 = v34 >> 3;
  unsigned int v37 = 1;
  while (1)
  {
    uint64_t v38 = *(void *)(*(void *)sSincKernelFactory + 8 * v35);
    if (*(double *)(v38 + 32) == 1.0 / v27 * v29
      && *(double *)(v38 + 24) == v30
      && *(_DWORD *)(v38 + 12) == v31
      && *(_DWORD *)(v38 + 16) == v24)
    {
      break;
    }
    uint64_t v35 = v37;
    BOOL v13 = v36 > v37++;
    if (!v13) {
      goto LABEL_66;
    }
  }
  ++*(_DWORD *)(v38 + 8);
  *((void *)this + 6) = v38;
  pthread_mutex_unlock(&sInitLocker);
  *((void *)this + 5) = *((void *)this + 6);
  if (*((unsigned char *)this + 176)) {
    unsigned int v39 = v33 + 0x2000;
  }
  else {
    unsigned int v39 = vcvtpd_u64_f64((double)v33 + *((double *)this + 20) * 1024.0);
  }
  *((_DWORD *)this + 17) = v39;
  Resampler2::SetPrimeMethod((uint64_t)this, 1);
  unsigned int v16 = *((_DWORD *)this + 17);
LABEL_73:
  float32x4_t v40 = malloc_type_malloc(4 * v16, 0x2C8E6D5CuLL);
  float32x4_t v41 = v40;
  if (v16 && !v40)
  {
    exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    float32x4_t v47 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v47, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
  }
  bzero(v40, 4 * v16);
  *((void *)this + 9) = v41;
  uint64_t v42 = *((unsigned int *)this + 17);
  float32x4_t v43 = malloc_type_malloc(4 * v42, 0x2C8E6D5CuLL);
  float32x4_t v44 = v43;
  if (v42 && !v43)
  {
    float32x4_t v48 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    float32x4_t v49 = std::bad_alloc::bad_alloc(v48);
    __cxa_throw(v49, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
  }
  bzero(v43, 4 * v42);
  *((void *)this + 10) = v44;
  if (gCAVectorUnitType) {
    int v45 = 200;
  }
  else {
    int v45 = -1;
  }
  if ((gCAVectorUnitType & 1) == 0)
  {
    if (getenv("CA_NoVector"))
    {
      fwrite("CA_NoVector set; Vector unit optimized routines will be bypassed\n",
        0x41uLL,
        1uLL,
        (FILE *)*MEMORY[0x1E4F143C8]);
      int v45 = 0;
    }
    else
    {
      gCAVectorUnitType = 1;
      int v45 = 200;
    }
  }
  *((_DWORD *)this + 30) = v45;
  Resampler2::SetConverterFunction((uint64_t)this);
}

void sub_1BAC67C78(_Unwind_Exception *a1)
{
  int64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x1C1859840](v1, 0x80C40D6874129);
  pthread_mutex_unlock(&sInitLocker);
  _Unwind_Resume(a1);
}

void Resampler2::~Resampler2(Resampler2 *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 16) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v14 = 136315394;
    int v15 = "Resampler2.cpp";
    __int16 v16 = 1024;
    int v17 = 365;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d Someone is deleting a Resampler while it is in use.\n", (uint8_t *)&v14, 0x12u);
  }
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    free(v2);
    *((void *)this + 9) = 0;
  }
  int64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    free(v3);
    *((void *)this + 10) = 0;
  }
  pthread_mutex_lock(&sInitLocker);
  uint64_t v4 = *((void *)this + 5);
  if (v4)
  {
    double v5 = (uint64_t *)sSincKernelFactory;
    int v6 = *(_DWORD *)(v4 + 8) - 1;
    *(_DWORD *)(v4 + 8) = v6;
    if (!v6)
    {
      uint64_t v8 = *v5;
      uint64_t v7 = v5[1];
      if (v7 != *v5)
      {
        uint64_t v9 = 0;
        unsigned int v10 = 1;
        while (*(void *)(v8 + 8 * v9) != v4)
        {
          uint64_t v9 = v10;
          if ((v7 - *v5) >> 3 <= (unint64_t)v10++) {
            goto LABEL_10;
          }
        }
        uint64_t v12 = v8 + 8 * v9;
        uint64_t v13 = v7 - (v12 + 8);
        if (v7 != v12 + 8) {
          memmove((void *)(v8 + 8 * v9), (const void *)(v12 + 8), v7 - (v12 + 8));
        }
        v5[1] = v12 + v13;
        free(*(void **)v4);
        MEMORY[0x1C1859840](v4, 0x1080C4003DAF236);
      }
    }
  }
LABEL_10:
  pthread_mutex_unlock(&sInitLocker);
}

void sub_1BAC67EA4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t Resampler2::InitializeVarispeedMode(Resampler2 *this)
{
  if ((this + 1) >= 0x20) {
    uint64_t v1 = ((this + 1) >> 5) - 1;
  }
  else {
    uint64_t v1 = 0;
  }
  pthread_mutex_lock(&sInitLocker);
  if (!sVarispeedRefCount[v1])
  {
    uint64_t v2 = (void **)sVarispeedSincKernels[v1];
    if (!v2) {
      operator new();
    }
    std::vector<SincKernel *>::reserve(v2, 0x24uLL);
    signed int v3 = vcvtpd_s64_f64(exp2((double)0 * 3600.0 / 36.0 / 1200.0) * 100.0);
    if (v3 - 100 > 0)
    {
      uint64_t v4 = v3 - 100;
      double v5 = sVarispeedRateTable;
      do
      {
        *v5++ = 0;
        --v4;
      }
      while (v4);
    }
    operator new();
  }
  ++sVarispeedRefCount[v1];
  return pthread_mutex_unlock(&sInitLocker);
}

void sub_1BAC68210(ResamplerInitLocker *a1)
{
}

uint64_t Resampler2::ShutdownVarispeedMode(Resampler2 *this)
{
  int v1 = (int)this;
  pthread_mutex_lock(&sInitLocker);
  if ((v1 + 1) >= 0x20) {
    uint64_t v2 = ((v1 + 1) >> 5) - 1;
  }
  else {
    uint64_t v2 = 0;
  }
  int v3 = sVarispeedRefCount[v2];
  if (v3 >= 1) {
    sVarispeedRefCount[v2] = --v3;
  }
  if (!v3)
  {
    uint64_t v4 = (uint64_t *)sVarispeedSincKernels[v2];
    if (v4)
    {
      uint64_t v5 = v4[1];
      if (v5 != *v4)
      {
        unint64_t v6 = 0;
        unsigned int v7 = 1;
        uint64_t v5 = *v4;
        do
        {
          uint64_t v8 = *(void ***)(v5 + 8 * v6);
          if (v8)
          {
            free(*v8);
            MEMORY[0x1C1859840](v8, 0x1080C4003DAF236);
            uint64_t v4 = (uint64_t *)sVarispeedSincKernels[v2];
            uint64_t v5 = *v4;
          }
          unint64_t v6 = v7++;
        }
        while (v6 < (v4[1] - v5) >> 3);
      }
      v4[1] = v5;
    }
  }
  return pthread_mutex_unlock(&sInitLocker);
}

uint64_t Resampler2::SetVarispeedRate(uint64_t this, double a2)
{
  if (*(unsigned char *)(this + 176))
  {
    uint64_t v3 = this;
    *(unsigned char *)(this + 256) = 0;
    *(double *)(this + 160) = a2;
    *(double *)(this + 168) = 1.0 / a2;
    *(unsigned char *)(this + 125) = 0;
    Resampler2::SetConverterFunction(this);
    return Resampler2::SetVarispeedSinc(v3, a2);
  }
  return this;
}

uint64_t Resampler2::GetNumberOfSourceFrames(Resampler2 *this, unsigned int a2, unsigned int a3)
{
  if (!a2) {
    return 0;
  }
  if (!*((unsigned char *)this + 125))
  {
    if (*((unsigned char *)this + 124)) {
      goto LABEL_8;
    }
    double v8 = (double)a2;
    if (!*((unsigned char *)this + 256))
    {
      double v5 = *((double *)this + 20) * v8;
      goto LABEL_9;
    }
    double v9 = *((double *)this + 29);
    double v10 = *((double *)this + 30);
    double v11 = v9 + (double)a3;
    if (v8 <= 1000000000.0) {
      double v12 = (double)a2;
    }
    else {
      double v12 = 1000000000.0;
    }
    if (v10 <= v11)
    {
      double v14 = *((double *)this + 26);
      double v15 = (v11 - v10) * v14;
      double v16 = *((double *)this + 28);
      v13.f64[0] = v15 + v16;
      double v17 = floor(v10 + (v15 + 1000000000.0) / v14);
      double v18 = v12 + v11;
      if (v18 >= v17) {
        double v18 = v17;
      }
      if (v10 <= v18)
      {
        double v19 = v14 * (v18 - v10);
      }
      else
      {
        double v16 = (v18 - v9) * (*((double *)this + 25) + *((double *)this + 31) * 0.5 * (v18 - v9));
        double v19 = *((double *)this + 27);
      }
      double v29 = v16 + v19;
    }
    else
    {
      if (v9 > v11)
      {
        float64x2_t v13 = (float64x2_t)xmmword_1BAFF95B0;
LABEL_44:
        double v5 = (double)vcvtpd_u64_f64(vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v13, 1), v13).f64[0]);
        goto LABEL_9;
      }
      double v20 = *((double *)this + 31);
      double v21 = v20 * 0.5;
      double v22 = *((double *)this + 25);
      double v23 = *((double *)this + 27);
      double v24 = *((double *)this + 28);
      v13.f64[0] = v23 + (v11 - v9) * (v22 + v20 * 0.5 * (v11 - v9));
      double v25 = v13.f64[0] + 1000000000.0;
      if (v24 <= v13.f64[0] + 1000000000.0)
      {
        double v30 = v25 - v24;
        double v27 = *((double *)this + 30);
        double v28 = v30 / *((double *)this + 26);
      }
      else
      {
        double v26 = v25 - v23;
        if (v20 == 0.0)
        {
          double v27 = *((double *)this + 29);
          double v28 = v26 / v22;
        }
        else
        {
          double v28 = (sqrt(v22 * v22 + (v20 + v20) * v26) - v22) / v20;
          double v27 = *((double *)this + 29);
        }
      }
      double v31 = floor(v28 + v27);
      double v32 = v12 + v11;
      if (v10 >= v31) {
        double v33 = v31;
      }
      else {
        double v33 = *((double *)this + 30);
      }
      if (v32 >= v33) {
        double v32 = v33;
      }
      if (v10 <= v32) {
        double v23 = (v32 - v10) * *((double *)this + 26);
      }
      else {
        double v24 = (v32 - v9) * (v22 + v21 * (v32 - v9));
      }
      double v29 = v24 + v23;
    }
    v13.f64[1] = v29;
    goto LABEL_44;
  }
  if (*((unsigned char *)this + 124))
  {
LABEL_8:
    double v5 = (double)a2;
LABEL_9:
    double v6 = 1.0;
    if (*((_DWORD *)this + 27) != 1818848869)
    {
      LODWORD(v6) = *(_DWORD *)(*((void *)this + 6) + 12);
      double v6 = (double)*(unint64_t *)&v6 + -1.0;
    }
    int v7 = vcvtpd_s64_f64(v6 + *((double *)this + 19) + v5 + -0.0001 - (double)*((int *)this + 16));
    return v7 & ~(v7 >> 31);
  }
  if (*((_DWORD *)this + 27) == 1818848869) {
    int v3 = 2;
  }
  else {
    int v3 = *(_DWORD *)(*((void *)this + 6) + 12);
  }
  int v7 = v3
     + ~*((_DWORD *)this + 16)
     + (uint64_t)(*((unsigned int *)this + 25) * (unint64_t)a2
               + *((unsigned int *)this + 24)
               + (unint64_t)*((unsigned int *)this + 29)
               - 1)
     / *((unsigned int *)this + 29);
  return v7 & ~(v7 >> 31);
}

uint64_t Resampler2::PreFlight(Resampler2 *this, unsigned int *a2, unsigned int *a3)
{
  signed int v6 = *a3;
  uint64_t result = Resampler2::GetNumberOfSourceFrames(this, *a3, 0);
  int v8 = *a2;
  if (*((unsigned char *)this + 125) && !*((unsigned char *)this + 124))
  {
    if (*((_DWORD *)this + 27) == 1818848869) {
      int v13 = -1;
    }
    else {
      int v13 = 1 - *(_DWORD *)(*((void *)this + 6) + 12);
    }
    uint64_t v14 = (uint64_t)((v13 + v8 + *((_DWORD *)this + 16)) * (unint64_t)*((unsigned int *)this + 29)
                  - *((unsigned int *)this + 24))
        / *((unsigned int *)this + 25);
    signed int v12 = v14 & ~((int)v14 >> 31);
  }
  else
  {
    double v9 = 1.0;
    if (*((_DWORD *)this + 27) != 1818848869)
    {
      LODWORD(v9) = *(_DWORD *)(*((void *)this + 6) + 12);
      double v9 = (double)*(unint64_t *)&v9 + -1.0;
    }
    double v10 = (double)(*((_DWORD *)this + 16) + v8) - v9 - *((double *)this + 19);
    if (!*((unsigned char *)this + 124)) {
      double v10 = v10 * *((double *)this + 21);
    }
    if (v10 >= 0.0) {
      double v11 = v10 + 0.0001;
    }
    else {
      double v11 = 0.0001;
    }
    signed int v12 = vcvtmd_u64_f64(v11);
  }
  if ((int)result >= v8)
  {
    if (v12 < v6) {
      *a3 = v12;
    }
  }
  else
  {
    *a2 = result;
  }
  return result;
}

void *Resampler2::PushConvert(Resampler2 *this, const float *a2, const float *a3, float *a4, float *a5, unsigned int *a6, unsigned int *a7, int a8, unsigned int a9, unsigned int a10)
{
  *((unsigned char *)this + 16) = 1;
  unsigned int v66 = *a6;
  unsigned int v65 = *a7;
  Resampler2::PreFlight(this, &v66, &v65);
  unsigned int v15 = v65;
  if (v65)
  {
    unsigned int v16 = 0;
    int v17 = 0;
    unsigned int v18 = v66;
    __int16 v56 = a5;
    float32x4_t v60 = a5;
    int v19 = *((_DWORD *)this + 16);
    int v55 = a8;
    __int16 v54 = a2;
    while (1)
    {
      unsigned int v20 = *((_DWORD *)this + 17) - v19;
      unsigned int v59 = v18;
      if (v20 >= v18) {
        unsigned int v20 = v18;
      }
      unsigned int v63 = v15;
      unsigned int v64 = v20;
      Resampler2::PreFlight(this, &v64, &v63);
      unsigned int v21 = v63;
      uint64_t v22 = v64;
      double v23 = (float *)(*((void *)this + 9) + 4 * v19);
      unsigned int v61 = v64;
      if (a8 == 1) {
        break;
      }
      if (!a3)
      {
        if (v64)
        {
          int v39 = v17 * a8;
          uint64_t v40 = v64;
          do
          {
            *v23++ = a2[v39];
            v39 += a8;
            --v40;
          }
          while (v40);
        }
        goto LABEL_14;
      }
      if (v64)
      {
        double v26 = (float *)(*((void *)this + 10) + 4 * v19);
        int v27 = v17 * a8;
        do
        {
          *v23++ = a2[v27];
          *v26++ = a3[v27];
          v27 += a8;
          --v22;
        }
        while (v22);
LABEL_13:
        LODWORD(v22) = v61;
      }
LABEL_14:
      *((unsigned char *)this + 192) = 0;
      *((_DWORD *)this + 16) = v19 + v22;
      if (v21)
      {
        double v28 = *(void (**)(void *, float *, float *))this;
        uint64_t v29 = *((void *)this + 1);
        double v30 = (void *)((char *)this + (v29 >> 1));
        if (v29) {
          double v28 = *(void (**)(void *, float *, float *))(*v30 + v28);
        }
        unsigned int v31 = v15;
        int v32 = v17;
        unsigned int v33 = v21;
        v28(v30, a4, v60);
        unsigned int v34 = v63;
        unsigned int v57 = v63 * a9;
        unsigned int v58 = v64;
        uint64_t v35 = &v60[v63 * a9];
        if (!v60) {
          uint64_t v35 = 0;
        }
        float32x4_t v60 = v35;
        *((double *)this + 33) = *((double *)this + 33) + (double)v63;
        int v36 = (int)*((double *)this + 19);
        uint64_t v37 = v36;
        size_t v38 = 4 * (*((_DWORD *)this + 16) - v36);
        memmove(*((void **)this + 9), (const void *)(*((void *)this + 9) + 4 * v36), v38);
        if (v56) {
          memmove(*((void **)this + 10), (const void *)(*((void *)this + 10) + 4 * v37), v38);
        }
        *((double *)this + 19) = *((double *)this + 19) - (double)(int)v37;
        int v19 = *((_DWORD *)this + 16) - v37;
        *((_DWORD *)this + 16) = v19;
        *((void *)this + 23) -= v37;
        *((double *)this + 16) = *((double *)this + 16) + (double)(int)v37;
        if (*((unsigned char *)this + 125)) {
          *((_DWORD *)this + 24) -= *(_DWORD *)(*((void *)this + 6) + 16) * v37;
        }
        unsigned int v18 = v59 - v61;
        a4 += v57;
        int v17 = v58 + v32;
        v16 += v34;
        unsigned int v15 = v31 - v33;
        a2 = v54;
        a8 = v55;
        if (v15) {
          continue;
        }
      }
      goto LABEL_30;
    }
    unsigned int v24 = v63;
    size_t v25 = 4 * v64;
    memcpy(v23, &a2[v17], v25);
    int v19 = *((_DWORD *)this + 16);
    if (a3)
    {
      memcpy((void *)(*((void *)this + 10) + 4 * v19), &a3[v17], v25);
      int v19 = *((_DWORD *)this + 16);
    }
    unsigned int v21 = v24;
    goto LABEL_13;
  }
  int v17 = 0;
  unsigned int v16 = 0;
LABEL_30:
  unsigned int v41 = *a6;
  uint64_t result = (void *)Resampler2::GetNumberOfSourceFrames(this, 1u, v16);
  unsigned int v43 = v41 - v17;
  if (v41 != v17 && v43 <= result)
  {
    if (a8 == 1)
    {
      uint64_t result = memcpy((void *)(*((void *)this + 9) + 4 * *((int *)this + 16)), &a2[v17], 4 * (v41 - v17));
      if (a3) {
        uint64_t result = memcpy((void *)(*((void *)this + 10) + 4 * *((int *)this + 16)), &a3[v17], 4 * (v41 - v17));
      }
    }
    else
    {
      uint64_t v45 = *((int *)this + 16);
      float32x4_t v46 = (float *)(*((void *)this + 9) + 4 * v45);
      if (a3)
      {
        float32x4_t v47 = (float *)(*((void *)this + 10) + 4 * v45);
        int v48 = v17 * a8;
        uint64_t v49 = v41 - v17;
        do
        {
          *v46++ = a2[v48];
          *v47++ = a3[v48];
          v48 += a8;
          --v49;
        }
        while (v49);
      }
      else
      {
        int v50 = v17 * a8;
        uint64_t v51 = v41 - v17;
        do
        {
          *v46++ = a2[v50];
          v50 += a8;
          --v51;
        }
        while (v51);
      }
    }
    *((_DWORD *)this + 16) += v43;
  }
  *a7 = v16;
  *((unsigned char *)this + 16) = 0;
  return result;
}

void sub_1BAC68B14(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + 16) = 0;
  _Unwind_Resume(a1);
}

const __CFString *CACFString::GetCString(const __CFString *theString, __CFString *a2, char *a3, unsigned int *a4)
{
  if (*(_DWORD *)a3)
  {
    CFStringRef v6 = theString;
    if (theString)
    {
      usedBufLeuint64_t n = 0;
      v10.length = CFStringGetLength(theString);
      v10.locatiouint64_t n = 0;
      CFStringRef theString = (const __CFString *)CFStringGetBytes(v6, v10, 0x8000100u, 0, 0, (UInt8 *)a2, (*(_DWORD *)a3 - 1), &usedBufLen);
      int v7 = usedBufLen;
      *((unsigned char *)&a2->isa + usedBufLen) = 0;
      int v8 = v7 + 1;
    }
    else
    {
      LOBYTE(a2->isa) = 0;
      int v8 = 1;
    }
    *(_DWORD *)a3 = v8;
  }
  return theString;
}

void AMCP::Graph::Manifest_Log::get_queue(AMCP::Graph::Manifest_Log *this)
{
  v1[40] = *(void **)MEMORY[0x1E4F143B8];
  {
    {
      AMCP::Utility::Dispatch_Queue::create_serial_with_workloop((AMCP::Utility::Dispatch_Queue *)v1, "Manifest Log Queue");
      AMCP::Utility::Dispatch_Queue::Dispatch_Queue((uint64_t)&AMCP::Graph::Manifest_Log::get_queue(void)::s_instance, v1[0]);
      AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v1);
    }
  }
}

void AMCP::Graph::Manifest_Log::add_message(uint64_t a1, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  signed int v12 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  double v23 = &a9;
  vsnprintf(AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::temp_buffer, 0x7D0uLL, a3, &a9);
  std::string::basic_string[abi:ne180100]<0>(v18, AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::temp_buffer);
  int v13 = (const std::string::value_type *)v18[0];
  std::string::size_type v14 = v18[1];
  v22[0] = *(_DWORD *)v19;
  *(_DWORD *)((char *)v22 + 3) = *(_DWORD *)&v19[3];
  int v15 = v20;
  std::mutex::unlock(v12);
  AMCP::Graph::Manifest_Log::get_queue(v16);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(v18, *(void *)a1, *(std::__shared_weak_count **)(a1 + 8));
  *(_DWORD *)int v19 = a2;
  if (v15 < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v13, v14);
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
    __p.__r_.__value_.__l.__size_ = v14;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = v22[0];
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v22 + 3);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v15;
  }
  unsigned __int8 v17 = atomic_load((unsigned __int8 *)&unk_1E9F78DB8);
  if (v17) {
    atomic_store(1u, byte_1E9F78DB9);
  }
  operator new();
}

void sub_1BAC68E2C(void *a1)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  __clang_call_terminate(a1);
}

void sub_1BAC68E60(_Unwind_Exception *a1)
{
  if (v1 < 0) {
    JUMPOUT(0x1BAC68E68);
  }
  _Unwind_Resume(a1);
}

void sub_1BAC68E74()
{
  std::mutex::unlock(v0);
  JUMPOUT(0x1BAC68E80);
}

uint64_t *std::unique_ptr<AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::$_0,std::default_delete<AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 47) < 0) {
      operator delete(*(void **)(v2 + 24));
    }
    int v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    MEMORY[0x1C1859840](v2, 0x1032C4046F781F9);
  }
  return a1;
}

uint64_t *applesauce::dispatch::v1::async<AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::$_0 &>(dispatch_queue_s *,AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::$_0 &)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v13 = a1;
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = (std::string *)operator new(0x30uLL);
  v4->__r_.__value_.__r.__words[0] = 0;
  v4->__r_.__value_.__l.__size_ = 0;
  LODWORD(v4->__r_.__value_.__r.__words[2]) = *(_DWORD *)(a1 + 16);
  double v5 = v4 + 1;
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
    CFStringRef v6 = *(void **)a1;
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)v3;
    v4[1].__r_.__value_.__r.__words[2] = *(void *)(v3 + 16);
    CFStringRef v6 = v2;
  }
  std::string::size_type v8 = v2[2];
  int v7 = (std::string **)(v2 + 2);
  v4->__r_.__value_.__r.__words[0] = v8;
  v4->__r_.__value_.__l.__size_ = (std::string::size_type)v7;
  *(void *)(v8 + 8) = v4;
  *int v7 = v4;
  v7[2] = (std::string *)((char *)v7[2] + 1);
  unint64_t v9 = v6[4];
  if (v9 > v6[5])
  {
    uint64_t v10 = v6[3];
    double v11 = *(void **)v10;
    v11[1] = *(void *)(v10 + 8);
    **(void **)(v10 + 8) = v11;
    v6[4] = v9 - 1;
    std::__list_imp<std::pair<AMCP::Graph::Manifest_Message_Type,std::string>>::__delete_node[abi:ne180100]<>((void **)v10);
  }
  return std::unique_ptr<AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::$_0,std::default_delete<AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::$_0>>::~unique_ptr[abi:ne180100](&v13);
}

void sub_1BAC68FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  operator delete(v10);
  std::unique_ptr<AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::$_0,std::default_delete<AMCP::Graph::Manifest_Log::add_message(AMCP::Graph::Manifest_Message_Type,char const*,...)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::__list_imp<std::pair<AMCP::Graph::Manifest_Message_Type,std::string>>::__delete_node[abi:ne180100]<>(void **__p)
{
  if (*((char *)__p + 47) < 0) {
    operator delete(__p[3]);
  }

  operator delete(__p);
}

void ___ZN10applesauce8dispatch2v19sync_implIRZN4AMCP5Graph12Manifest_Log4dumpEvE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke(BOOL a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = **(void **)(a1 + 32);
  uint64_t v2 = v1 + 16;
  uint64_t v3 = *(void *)(v1 + 24);
  if (v3 != v1 + 16)
  {
    do
    {
      uint64_t v11 = 0;
      long long __p = 0uLL;
      switch(*(_DWORD *)(v3 + 16))
      {
        case 0:
          HIBYTE(v11) = 5;
          qmemcpy(&__p, "Start", 5);
          break;
        case 1:
          HIBYTE(v11) = 4;
          LODWORD(__p) = 1886352467;
          break;
        case 2:
          HIBYTE(v11) = 8;
          uint64_t v4 = 0x64616F6C7265764FLL;
          goto LABEL_11;
        case 3:
          HIBYTE(v11) = 7;
          qmemcpy(&__p, "Enqueue", 7);
          break;
        case 4:
          HIBYTE(v11) = 6;
          qmemcpy(&__p, "Buffer", 6);
          break;
        case 5:
          HIBYTE(v11) = 13;
          qmemcpy(&__p, "Swap Manifest", 13);
          break;
        case 6:
          HIBYTE(v11) = 11;
          *(_DWORD *)((char *)&__p + 7) = 1701669204;
          uint64_t v4 = *(void *)"Anchor Time";
          goto LABEL_11;
        case 7:
          HIBYTE(v11) = 11;
          *(_DWORD *)((char *)&__p + 7) = 1702521171;
          uint64_t v4 = *(void *)"Change Size";
LABEL_11:
          *(void *)&long long __p = v4;
          break;
        default:
          break;
      }
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      double v5 = **(NSObject ***)buf;
      if (*(void *)v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v13);
      }
      a1 = os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG);
      if (a1)
      {
        CFStringRef v6 = pthread_self();
        mach_port_t v7 = pthread_mach_thread_np(v6);
        p_p = &__p;
        if (v11 < 0) {
          p_p = (long long *)__p;
        }
        uint64_t v9 = v3 + 24;
        if (*(char *)(v3 + 47) < 0) {
          uint64_t v9 = *(void *)(v3 + 24);
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 67110402;
        *(_DWORD *)&uint8_t buf[4] = v7;
        *(_WORD *)uint64_t v13 = 2080;
        *(void *)&v13[2] = "Manifest_Log.cpp";
        __int16 v14 = 1024;
        int v15 = 93;
        __int16 v16 = 1040;
        int v17 = 14;
        __int16 v18 = 2080;
        int v19 = p_p;
        __int16 v20 = 2080;
        uint64_t v21 = v9;
        _os_log_debug_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d %14.14s: %s", buf, 0x32u);
      }
      if (SHIBYTE(v11) < 0) {
        operator delete((void *)__p);
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
}

void sub_1BAC692FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::get_control_property_traits_list(AMCP *this)
{
  {
    AMCP::get_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::get_control_property_traits_list(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&AMCP::get_control_property_traits_list(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_control_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_control_property_traits_list(void)::$_0 &&>>()
{
  v20[6] = *MEMORY[0x1E4F143B8];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v0, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v1, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v2, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v3, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v4, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v5, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v6, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v7, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v8, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v9, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1668506480, 1, 0, 0, &AMCP::Property_Traits<1668506480u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667591277u>::k_valid_scopes, 0, 1668506480, 18);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1667591277, 1, 0, 0, &AMCP::Property_Traits<1667591277u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668441199u>::k_valid_scopes, 0, 1667591277, 9);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v20, 1668441199, 1, 0, 0, &AMCP::Property_Traits<1668441199u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935962742u>::k_valid_scopes, 0, 0, 2);
  operator new();
}

void sub_1BAC699B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v16 = v15;
  *(void *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1C1859840](v14, 0x20C40960023A9);
  uint64_t v18 = 1008;
  while (1)
  {
    uint64_t v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(void *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t AMCP::get_slider_control_property_traits_list(AMCP *this)
{
  {
    AMCP::get_slider_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::get_slider_control_property_traits_list(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&AMCP::get_slider_control_property_traits_list(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_slider_control_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_slider_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_slider_control_property_traits_list(void)::$_0 &&>>()
{
  v22[6] = *MEMORY[0x1E4F143B8];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v0, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v1, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v2, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v3, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v4, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v5, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v6, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v7, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v8, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v9, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1668506480, 1, 0, 0, &AMCP::Property_Traits<1668506480u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667591277u>::k_valid_scopes, 0, 1668506480, 18);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1667591277, 1, 0, 0, &AMCP::Property_Traits<1667591277u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668441199u>::k_valid_scopes, 0, 1667591277, 9);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1668441199, 1, 0, 0, &AMCP::Property_Traits<1668441199u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935962742u>::k_valid_scopes, 0, 0, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1935962742, 1, 0, 1, &AMCP::Property_Traits<1935962742u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935962738u>::k_valid_scopes, 0, 1935962742, 24);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v22, 1935962738, 1, 0, 0, &AMCP::Property_Traits<1935962738u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1818456950u>::k_valid_scopes, 0, 1935962738, 13);
  operator new();
}

void sub_1BAC6A104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v16 = v15;
  *(void *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1C1859840](v14, 0x20C40960023A9);
  uint64_t v18 = 1104;
  while (1)
  {
    uint64_t v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(void *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t AMCP::get_level_control_property_traits_list(AMCP *this)
{
  {
    AMCP::get_level_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::get_level_control_property_traits_list(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&AMCP::get_level_control_property_traits_list(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_level_control_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_level_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_level_control_property_traits_list(void)::$_0 &&>>()
{
  v23[6] = *MEMORY[0x1E4F143B8];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v0, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v1, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v2, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v3, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v4, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v5, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v6, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v7, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v8, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v9, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1668506480, 1, 0, 0, &AMCP::Property_Traits<1668506480u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667591277u>::k_valid_scopes, 0, 1668506480, 18);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1667591277, 1, 0, 0, &AMCP::Property_Traits<1667591277u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668441199u>::k_valid_scopes, 0, 1667591277, 9);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1668441199, 1, 0, 0, &AMCP::Property_Traits<1668441199u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935962742u>::k_valid_scopes, 0, 0, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1818456950, 1, 0, 1, &AMCP::Property_Traits<1818456950u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1818453110u>::k_valid_scopes, 0, 1818456950, 10);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1818453110, 1, 0, 1, &AMCP::Property_Traits<1818453110u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1818453106u>::k_valid_scopes, 0, 1818453110, 10);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v23, 1818453106, 1, 0, 0, &AMCP::Property_Traits<1818453106u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650685548u>::k_valid_scopes, 0, 1818453106, 26);
  operator new();
}

void sub_1BAC6A880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v16 = v15;
  *(void *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1C1859840](v14, 0x20C40960023A9);
  uint64_t v18 = 1152;
  while (1)
  {
    uint64_t v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(void *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t AMCP::get_BOOLean_control_property_traits_list(AMCP *this)
{
  {
    AMCP::get_BOOLean_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::get_BOOLean_control_property_traits_list(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&AMCP::get_BOOLean_control_property_traits_list(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_BOOLean_control_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_BOOLean_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_BOOLean_control_property_traits_list(void)::$_0 &&>>()
{
  v21[6] = *MEMORY[0x1E4F143B8];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v0, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v1, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v2, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v3, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v4, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v5, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v6, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v7, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v8, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v9, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1668506480, 1, 0, 0, &AMCP::Property_Traits<1668506480u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667591277u>::k_valid_scopes, 0, 1668506480, 18);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1667591277, 1, 0, 0, &AMCP::Property_Traits<1667591277u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668441199u>::k_valid_scopes, 0, 1667591277, 9);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1668441199, 1, 0, 0, &AMCP::Property_Traits<1668441199u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935962742u>::k_valid_scopes, 0, 0, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v21, 1650685548, 1, 0, 1, &AMCP::Property_Traits<1650685548u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935893353u>::k_valid_scopes, 0, 1650685548, 2);
  operator new();
}

void sub_1BAC6AFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v16 = v15;
  *(void *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1C1859840](v14, 0x20C40960023A9);
  uint64_t v18 = 1056;
  while (1)
  {
    uint64_t v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(void *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t AMCP::get_selector_control_property_traits_list(AMCP *this)
{
  {
    AMCP::get_selector_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::get_selector_control_property_traits_list(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&AMCP::get_selector_control_property_traits_list(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_selector_control_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_selector_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_selector_control_property_traits_list(void)::$_0 &&>>()
{
  v23[6] = *MEMORY[0x1E4F143B8];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v0, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v1, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v2, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v3, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v4, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v5, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v6, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v7, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v8, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v9, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1668506480, 1, 0, 0, &AMCP::Property_Traits<1668506480u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667591277u>::k_valid_scopes, 0, 1668506480, 18);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1667591277, 1, 0, 0, &AMCP::Property_Traits<1667591277u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668441199u>::k_valid_scopes, 0, 1667591277, 9);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1668441199, 1, 0, 0, &AMCP::Property_Traits<1668441199u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935962742u>::k_valid_scopes, 0, 0, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1935893353, 1, 0, 1, &AMCP::Property_Traits<1935893353u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935893357u>::k_valid_scopes, 0, 1935893353, 20);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1935893357, 1, 0, 0, &AMCP::Property_Traits<1935893357u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935892841u>::k_valid_scopes, 0, 0, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v23, 1935892841, 1, 0, 0, &AMCP::Property_Traits<1935892841u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936745334u>::k_valid_scopes, 0, 0, 19);
  operator new();
}

void sub_1BAC6B720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v16 = v15;
  *(void *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1C1859840](v14, 0x20C40960023A9);
  uint64_t v18 = 1152;
  while (1)
  {
    uint64_t v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(void *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t AMCP::get_stereo_pan_control_property_traits_list(AMCP *this)
{
  {
    AMCP::get_stereo_pan_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::get_stereo_pan_control_property_traits_list(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&AMCP::get_stereo_pan_control_property_traits_list(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_stereo_pan_control_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_stereo_pan_control_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_stereo_pan_control_property_traits_list(void)::$_0 &&>>()
{
  v22[6] = *MEMORY[0x1E4F143B8];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v0, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v1, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v2, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v3, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v4, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v5, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v6, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v7, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v8, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v9, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1668506480, 1, 0, 0, &AMCP::Property_Traits<1668506480u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667591277u>::k_valid_scopes, 0, 1668506480, 18);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1667591277, 1, 0, 0, &AMCP::Property_Traits<1667591277u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668441199u>::k_valid_scopes, 0, 1667591277, 9);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1668441199, 1, 0, 0, &AMCP::Property_Traits<1668441199u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935962742u>::k_valid_scopes, 0, 0, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1936745334, 1, 0, 1, &AMCP::Property_Traits<1936745334u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936745315u>::k_valid_scopes, 0, 1936745334, 10);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v22, 1936745315, 1, 0, 0, &AMCP::Property_Traits<1936745315u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1853188452u>::k_valid_scopes, 0, 1936745315, 21);
  operator new();
}

void sub_1BAC6BE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v16 = v15;
  *(void *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1C1859840](v14, 0x20C40960023A9);
  uint64_t v18 = 1104;
  while (1)
  {
    uint64_t v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(void *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18) {
      _Unwind_Resume(a1);
    }
  }
}

AMCP::Log::Scope_Registry *AMCP::Utility::configure_thread_for_realtime(_opaque_pthread_t *this, _opaque_pthread_t *a2, int a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (a2 <= 0x4B0) {
    uint64_t v4 = 1200;
  }
  else {
    uint64_t v4 = a2;
  }
  if (v4 >= 0x124F80) {
    uint64_t v5 = 1200000;
  }
  else {
    uint64_t v5 = v4;
  }
  if (a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v4;
  }
  *(void *)policy_info = v6 | (v5 << 32);
  uint64_t v27 = v4 | 0x100000000;
  thread_act_t v7 = pthread_mach_thread_np(this);
  uint64_t result = (AMCP::Log::Scope_Registry *)thread_policy_set(v7, 2u, policy_info, 4u);
  if (result)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v9 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67111170;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)uint64_t v29 = 2080;
      *(void *)&v29[2] = "Thread_Utilities.cpp";
      __int16 v30 = 1024;
      int v31 = 90;
      __int16 v32 = 2080;
      *(void *)unsigned int v33 = "not (kernel_error == 0)";
      *(_WORD *)&v33[8] = 2048;
      *(void *)&v33[10] = a2;
      *(_WORD *)&v33[18] = 1024;
      *(_DWORD *)&v33[20] = policy_info[0];
      *(_WORD *)&v33[24] = 1024;
      integer_t v34 = policy_info[1];
      __int16 v35 = 1024;
      int v36 = v27;
      __int16 v37 = 1024;
      int v38 = HIDWORD(v27);
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s AMCP::Utility::Thread_Utilities::configure_thread_for_realtime - thread_policy_set failed. \tCycle Size: %llu \tThread Parameters: \t%u \t%u \t%u \t%d", buf, 0x44u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"AMCP::Utility::Thread_Utilities::configure_thread_for_realtime - thread_policy_set failed. \tCycle Size: %llu \tThread Parameters: \t%u \t%u \t%u \t%d", (uint64_t)&v17, a2, policy_info[0], policy_info[1], v27, HIDWORD(v27));
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v20 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&v33[6] = "kern_return_t AMCP::Utility::configure_thread_for_realtime(pthread_t, uint64_t, BOOL)";
    *(void *)&v33[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Utility/Thread_Utilities.cpp";
    *(_DWORD *)&v33[22] = 90;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    uint64_t v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return result;
}

void sub_1BAC6C1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,char a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v31 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a30);
  MEMORY[0x1C1859090](&a28);
  if (a27 < 0) {
    operator delete(a22);
  }
  if (v30) {
    __cxa_free_exception(a14);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v31 - 129));
  _Unwind_Resume(a1);
}

AMCP::Log::Scope_Registry *AMCP::Utility::configure_thread_for_normal_priority(_opaque_pthread_t *this, _opaque_pthread_t *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  integer_t policy_info = 1;
  thread_act_t v2 = pthread_mach_thread_np(this);
  uint64_t result = (AMCP::Log::Scope_Registry *)thread_policy_set(v2, 1u, &policy_info, 1u);
  if (result)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v4 = **(NSObject ***)buf;
    if (*(void *)v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v23);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = pthread_self();
      mach_port_t v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)uint64_t v23 = 2080;
      *(void *)&v23[2] = "Thread_Utilities.cpp";
      __int16 v24 = 1024;
      int v25 = 103;
      __int16 v26 = 2080;
      *(void *)uint64_t v27 = "not (kernel_error == 0)";
      _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s AMCP::Utility::Thread_Utilities::configure_thread_for_normal_priority - thread_policy_set failed.", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"AMCP::Utility::Thread_Utilities::configure_thread_for_normal_priority - thread_policy_set failed.", (uint64_t)&v12);
    std::logic_error::logic_error(&v13, &v12);
    v13.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v14, &v13);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = -1;
    v14.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v15 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(void *)&v27[6] = "kern_return_t AMCP::Utility::configure_thread_for_normal_priority(pthread_t)";
    double v28 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Utility/Thread_Utilities.cpp";
    int v29 = 103;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    long long v10 = v7;
    uint64_t v11 = v8;
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    uint64_t v9 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return result;
}

void sub_1BAC6C4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 117));
  _Unwind_Resume(a1);
}

BOOL AMCP::Utility::is_thread_configured_for_realtime(_opaque_pthread_t *this, _opaque_pthread_t *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (AMCP::Log::Scope_Registry *)pthread_self();
  if (v3 != (AMCP::Log::Scope_Registry *)this)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    long long v7 = *buf;
    if (*(void *)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v9;
      *(_WORD *)uint64_t v31 = 2080;
      *(void *)&v31[2] = "Thread_Utilities.cpp";
      __int16 v32 = 1024;
      int v33 = 112;
      __int16 v34 = 2080;
      *(void *)__int16 v35 = "not (in_thread == pthread_self())";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s is_thread_configured_for_realtime only works when in_thread == pthread_self()", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&get_default);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"is_thread_configured_for_realtime only works when in_thread == pthread_self()", (uint64_t)&v22);
    std::logic_error::logic_error(&v23, &v22);
    v23.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v24, &v23);
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    int v29 = -1;
    v24.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v25 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v24);
    *(void *)&void v35[6] = "BOOL AMCP::Utility::is_thread_configured_for_realtime(pthread_t)";
    int v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Utility/Thread_Utilities.cpp";
    int v37 = 112;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    int v19 = &unk_1F148AA90;
    long long v20 = v17;
    uint64_t v21 = v18;
    long long v17 = 0uLL;
    uint64_t v18 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  mach_msg_type_number_t policy_infoCnt = 1;
  BOOLean_t get_default = 0;
  thread_inspect_t v4 = pthread_mach_thread_np(this);
  uint64_t v5 = (AMCP::Log::Scope_Registry *)thread_policy_get(v4, 1u, &policy_info, &policy_infoCnt, &get_default);
  if (v5)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    long long v10 = *buf;
    if (*(void *)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v12;
      *(_WORD *)uint64_t v31 = 2080;
      *(void *)&v31[2] = "Thread_Utilities.cpp";
      __int16 v32 = 1024;
      int v33 = 121;
      __int16 v34 = 2080;
      *(void *)__int16 v35 = "not (the_error == 0)";
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v13);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v22);
    std::logic_error::logic_error(&v23, &v22);
    v23.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v24, &v23);
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    int v29 = -1;
    v24.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v25 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v24);
    *(void *)&void v35[6] = "BOOL AMCP::Utility::is_thread_configured_for_realtime(pthread_t)";
    int v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Utility/Thread_Utilities.cpp";
    int v37 = 121;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    int v19 = &unk_1F148AA90;
    long long v20 = v17;
    uint64_t v21 = v18;
    long long v17 = 0uLL;
    uint64_t v18 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return get_default != 0;
}

void sub_1BAC6CA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, __int16 a12, char a13, char a14, int a15, int a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34)
{
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v35 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a34);
  MEMORY[0x1C1859090](&a32);
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a11) {
    __cxa_free_exception(v34);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a14);
  _Unwind_Resume(a1);
}

AMCP::Log::Scope_Registry *AMCP::Utility::configure_syscall_mask_for_realtime_priority(AMCP::Utility *this)
{
  uint64_t v1 = (AMCP::Log::Scope_Registry *)debug_syscall_reject();
  thread_act_t v2 = v1;
  if (v1)
  {
    AMCP::Log::Scope_Registry::get(v1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
    uint64_t v3 = *(caulk::concurrent::messenger **)(v8 + 8);
    thread_inspect_t v4 = pthread_self();
    mach_port_t v5 = pthread_mach_thread_np(v4);
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
    *(_DWORD *)(v6 + 16) = 0;
    *(unsigned char *)(v6 + 20) = 1;
    *(_DWORD *)(v6 + 24) = v5;
    *(void *)(v6 + 32) = "Thread_Utilities.cpp";
    *(_DWORD *)(v6 + 40) = 156;
    *(void *)uint64_t v6 = &unk_1F14676F0;
    *(void *)(v6 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v3, (caulk::concurrent::message *)v6);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  return v2;
}

void sub_1BAC6CC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Utility::configure_syscall_mask_for_realtime_priority(void)::$_0,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  thread_act_t v2 = *v8;
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    LODWORD(v8) = 67109634;
    HIDWORD(v8) = v4;
    *(_WORD *)mach_port_t v9 = 2080;
    *(void *)&void v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d AMCP::Utility::Thread_Utilities::configure_syscall_mask_for_realtime_priority - syscall set mask for real time priority failed", (uint8_t *)&v8, 0x18u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAC6CDCC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Utility::configure_syscall_mask_for_realtime_priority(void)::$_0,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

AMCP::Log::Scope_Registry *AMCP::Utility::configure_syscall_mask_for_normal_priority(AMCP::Utility *this)
{
  char v10 = 65;
  uint64_t v1 = (AMCP::Log::Scope_Registry *)debug_syscall_reject();
  thread_act_t v2 = v1;
  if (v1)
  {
    AMCP::Log::Scope_Registry::get(v1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
    os_log_type_t v3 = *(caulk::concurrent::messenger **)(v8 + 8);
    int v4 = pthread_self();
    mach_port_t v5 = pthread_mach_thread_np(v4);
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
    *(_DWORD *)(v6 + 16) = 0;
    *(unsigned char *)(v6 + 20) = 1;
    *(_DWORD *)(v6 + 24) = v5;
    *(void *)(v6 + 32) = "Thread_Utilities.cpp";
    *(_DWORD *)(v6 + 40) = 181;
    *(void *)uint64_t v6 = &unk_1F1467748;
    *(void *)(v6 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v3, (caulk::concurrent::message *)v6);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  return v2;
}

void sub_1BAC6CF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Utility::configure_syscall_mask_for_normal_priority(void)::$_0,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  thread_act_t v2 = *v8;
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    LODWORD(v8) = 67109634;
    HIDWORD(v8) = v4;
    *(_WORD *)mach_port_t v9 = 2080;
    *(void *)&void v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d AMCP::Utility::Thread_Utilities::configure_syscall_mask_for_normal_priority - syscall set mask for normal priority failed", (uint8_t *)&v8, 0x18u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAC6D074(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Utility::configure_syscall_mask_for_normal_priority(void)::$_0,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t HALS_AHPDevice::GetNearestStartTime(HALS_AHPDevice *this, AudioTimeStamp *a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(void, void, AudioTimeStamp *, uint64_t))(**(void **)(*((void *)this + 163)
                                                                                              + 32)
                                                                                + 160))(*(void *)(*((void *)this + 163) + 32), *((unsigned int *)this + 4), a2, a3);
  if (result)
  {
    v6[0] = BYTE3(result);
    v6[1] = BYTE2(result);
    v6[2] = BYTE1(result);
    int v5 = result;
    v6[3] = result;
    v6[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v8 = "HALS_AHPPlugIn.cpp";
      __int16 v9 = 1024;
      int v10 = 210;
      __int16 v11 = 1024;
      int v12 = v5;
      __int16 v13 = 2080;
      std::logic_error v14 = v6;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::GetNearestStartTime: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v5;
  }
  return result;
}

uint64_t HALS_AHPDevice::TranslateTime(HALS_AHPDevice *this, const AudioTimeStamp *a2, AudioTimeStamp *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(void, void, const AudioTimeStamp *, AudioTimeStamp *))(**(void **)(*((void *)this + 163) + 32)
                                                                                               + 96))(*(void *)(*((void *)this + 163) + 32), *((unsigned int *)this + 4), a2, a3);
  if (result)
  {
    v6[0] = BYTE3(result);
    v6[1] = BYTE2(result);
    v6[2] = BYTE1(result);
    int v5 = result;
    v6[3] = result;
    v6[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v8 = "HALS_AHPPlugIn.cpp";
      __int16 v9 = 1024;
      int v10 = 204;
      __int16 v11 = 1024;
      int v12 = v5;
      __int16 v13 = 2080;
      std::logic_error v14 = v6;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::TranslateTime: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v5;
  }
  return result;
}

uint64_t HALS_AHPDevice::GetCurrentTime(HALS_AHPDevice *this, AudioTimeStamp *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(void, void, AudioTimeStamp *))(**(void **)(*((void *)this + 163) + 32)
                                                                       + 88))(*(void *)(*((void *)this + 163) + 32), *((unsigned int *)this + 4), a2);
  if (result)
  {
    v5[0] = BYTE3(result);
    v5[1] = BYTE2(result);
    uint64_t v5[2] = BYTE1(result);
    int v4 = result;
    v5[3] = result;
    v5[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      long long v7 = "HALS_AHPPlugIn.cpp";
      __int16 v8 = 1024;
      int v9 = 198;
      __int16 v10 = 1024;
      int v11 = v4;
      __int16 v12 = 2080;
      __int16 v13 = v5;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::DeviceGetCurrentTime: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v4;
  }
  return result;
}

uint64_t HALS_AHPDevice::Server_Internal_StopIOProcID(HALS_AHPDevice *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(void, void, int (*)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *)))(**(void **)(*((void *)this + 163) + 32) + 72))(*(void *)(*((void *)this + 163) + 32), *((unsigned int *)this + 4), a2);
  if (result)
  {
    v5[0] = BYTE3(result);
    v5[1] = BYTE2(result);
    uint64_t v5[2] = BYTE1(result);
    int v4 = result;
    v5[3] = result;
    v5[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      long long v7 = "HALS_AHPPlugIn.cpp";
      __int16 v8 = 1024;
      int v9 = 186;
      __int16 v10 = 1024;
      int v11 = v4;
      __int16 v12 = 2080;
      __int16 v13 = v5;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::StopIOProc: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v4;
  }
  return result;
}

uint64_t HALS_AHPDevice::Server_Internal_StartIOProcIDAtTime(HALS_AHPDevice *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(void, void, int (*)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), AudioTimeStamp *, uint64_t))(**(void **)(*((void *)this + 163) + 32) + 152))(*(void *)(*((void *)this + 163) + 32), *((unsigned int *)this + 4), a2, a3, a4);
  if (result)
  {
    v7[0] = BYTE3(result);
    v7[1] = BYTE2(result);
    v7[2] = BYTE1(result);
    int v6 = result;
    void v7[3] = result;
    void v7[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      int v9 = "HALS_AHPPlugIn.cpp";
      __int16 v10 = 1024;
      int v11 = 180;
      __int16 v12 = 1024;
      int v13 = v6;
      __int16 v14 = 2080;
      uint64_t v15 = v7;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::StartIOProcAtTime: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v6;
  }
  return result;
}

uint64_t HALS_AHPDevice::Server_Internal_StartIOProcID(HALS_AHPDevice *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(void, void, int (*)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *)))(**(void **)(*((void *)this + 163) + 32) + 64))(*(void *)(*((void *)this + 163) + 32), *((unsigned int *)this + 4), a2);
  if (result)
  {
    v5[0] = BYTE3(result);
    v5[1] = BYTE2(result);
    uint64_t v5[2] = BYTE1(result);
    int v4 = result;
    v5[3] = result;
    v5[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      long long v7 = "HALS_AHPPlugIn.cpp";
      __int16 v8 = 1024;
      int v9 = 174;
      __int16 v10 = 1024;
      int v11 = v4;
      __int16 v12 = 2080;
      int v13 = v5;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::StartIOProc: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v4;
  }
  return result;
}

uint64_t HALS_AHPDevice::Server_Internal_RemoveIOProc(HALS_AHPDevice *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(void, void, int (*)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *)))(**(void **)(*((void *)this + 163) + 32) + 56))(*(void *)(*((void *)this + 163) + 32), *((unsigned int *)this + 4), a2);
  if (result)
  {
    v5[0] = BYTE3(result);
    v5[1] = BYTE2(result);
    uint64_t v5[2] = BYTE1(result);
    int v4 = result;
    v5[3] = result;
    v5[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      long long v7 = "HALS_AHPPlugIn.cpp";
      __int16 v8 = 1024;
      int v9 = 168;
      __int16 v10 = 1024;
      int v11 = v4;
      __int16 v12 = 2080;
      int v13 = v5;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::RemoveIOProc: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v4;
  }
  return result;
}

uint64_t HALS_AHPDevice::Server_Internal_AddIOProc(HALS_AHPDevice *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(void, void, int (*)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), void *))(**(void **)(*((void *)this + 163) + 32) + 48))(*(void *)(*((void *)this + 163) + 32), *((unsigned int *)this + 4), a2, a3);
  if (result)
  {
    v6[0] = BYTE3(result);
    v6[1] = BYTE2(result);
    v6[2] = BYTE1(result);
    int v5 = result;
    v6[3] = result;
    v6[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      __int16 v8 = "HALS_AHPPlugIn.cpp";
      __int16 v9 = 1024;
      int v10 = 162;
      __int16 v11 = 1024;
      int v12 = v5;
      __int16 v13 = 2080;
      uint64_t v14 = v6;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::AddIOProc: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v5;
  }
  return result;
}

uint64_t HALS_AHPDevice::Server_Internal_DestroyIOProcID(HALS_AHPDevice *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(void, void, int (*)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *)))(**(void **)(*((void *)this + 163) + 32) + 232))(*(void *)(*((void *)this + 163) + 32), *((unsigned int *)this + 4), a2);
  if (result)
  {
    v5[0] = BYTE3(result);
    v5[1] = BYTE2(result);
    uint64_t v5[2] = BYTE1(result);
    int v4 = result;
    v5[3] = result;
    v5[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      long long v7 = "HALS_AHPPlugIn.cpp";
      __int16 v8 = 1024;
      int v9 = 156;
      __int16 v10 = 1024;
      int v11 = v4;
      __int16 v12 = 2080;
      __int16 v13 = v5;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::DeviceCreateIOProcID: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v4;
  }
  return result;
}

uint64_t HALS_AHPDevice::Server_Internal_CreateIOProcIDWithBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = 0;
  int v3 = (*(uint64_t (**)(void, uint64_t *, void, uint64_t, uint64_t))(**(void **)(*(void *)(a1 + 1304)
                                                                                            + 32)
                                                                              + 240))(*(void *)(*(void *)(a1 + 1304) + 32), &v7, *(unsigned int *)(a1 + 16), a2, a3);
  if (v3)
  {
    v8[0] = HIBYTE(v3);
    v8[1] = BYTE2(v3);
    v8[2] = BYTE1(v3);
    int v6 = v3;
    int v8[3] = v3;
    v8[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      __int16 v10 = "HALS_AHPPlugIn.cpp";
      __int16 v11 = 1024;
      int v12 = 138;
      __int16 v13 = 1024;
      int v14 = v6;
      __int16 v15 = 2080;
      uint64_t v16 = v8;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::DeviceCreateIOProcIDWithBlock: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v6;
  }
  return v7;
}

uint64_t HALS_AHPDevice::Server_Internal_CreateIOProcID(HALS_AHPDevice *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = 0;
  int v3 = (*(uint64_t (**)(void, void, int (*)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), void *, uint64_t *))(**(void **)(*((void *)this + 163) + 32) + 224))(*(void *)(*((void *)this + 163) + 32), *((unsigned int *)this + 4), a2, a3, &v7);
  if (v3)
  {
    v8[0] = HIBYTE(v3);
    v8[1] = BYTE2(v3);
    v8[2] = BYTE1(v3);
    int v6 = v3;
    int v8[3] = v3;
    v8[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      __int16 v10 = "HALS_AHPPlugIn.cpp";
      __int16 v11 = 1024;
      int v12 = 132;
      __int16 v13 = 1024;
      int v14 = v6;
      __int16 v15 = 2080;
      uint64_t v16 = v8;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::DeviceCreateIOProcID: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v6;
  }
  return v7;
}

uint64_t HALS_AHPDevice::_GetTotalNumberChannels(HALS_AHPDevice *this)
{
  return 0;
}

uint64_t HALS_AHPDevice::_CopyIOEngine(HALS_AHPDevice *this)
{
  return 0;
}

uint64_t HALS_AHPDevice::_CopyStreamByIndex(HALS_AHPDevice *this)
{
  return 0;
}

uint64_t HALS_AHPDevice::_GetNumberStreams(HALS_AHPDevice *this)
{
  return 0;
}

void HALS_AHPDevice::create_mcp_engine(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t HALS_AHPDevice::CanBeAggregated(HALS_AHPDevice *this)
{
  return 0;
}

uint64_t HALS_AHPDevice::SetPropertyData(HALS_AHPDevice *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_AHPDevice *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      int v19 = "HALS_AHPDevice.cpp";
      __int16 v20 = 1024;
      int v21 = 231;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPDevice::SetPropertyData: the property is not settable", (uint8_t *)&v18, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  __int16 v15 = *(HALS_AHPPlugIn **)(*((void *)this + 163) + 32);

  return HALS_AHPPlugIn::ObjectSetPropertyData(v15, a2, a3, a6, a7, a4, a5);
}

void HALS_AHPDevice::GetPropertyData(HALS_AHPDevice *this, const BOOL *a2, AudioObjectPropertyAddress *a3, const AudioObjectPropertyAddress *a4, unsigned int *a5, _DWORD *a6, void *a7, int *a8, HALS_Client *a9)
{
  if (((*(uint64_t (**)(HALS_AHPDevice *, const BOOL *, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1869638758)
  {
    BOOL v18 = mSelector == 1650682995;
    int v19 = 1668047219;
  }
  else
  {
    BOOL v18 = mSelector == 1869638759 || mSelector == 1937007734;
    int v19 = 1870098020;
  }
  if (v18 || mSelector == v19)
  {
    HALS_Device::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *a5 = a4;
    int v21 = *(HALS_AHPPlugIn **)(*((void *)this + 163) + 32);
    HALS_AHPPlugIn::ObjectGetPropertyData(v21, (uint64_t)a2, a3, (uint64_t)a7, a8, a5, a6);
  }
}

uint64_t HALS_AHPDevice::GetPropertyDataSize(HALS_Device ***this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4, int *a5, AudioObjectPropertyAddress *a6)
{
  if ((((uint64_t (*)(HALS_Device ***, uint64_t, AudioObjectPropertyAddress *, AudioObjectPropertyAddress *))(*this)[11])(this, a2, a3, a6) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1869638758)
  {
    BOOL v14 = mSelector == 1650682995;
    int v15 = 1668047219;
  }
  else
  {
    BOOL v14 = mSelector == 1869638759 || mSelector == 1937007734;
    int v15 = 1870098020;
  }
  if (v14 || mSelector == v15)
  {
    return HALS_Device::GetPropertyDataSize(this, v12, a3, a4, a5, a6);
  }
  else
  {
    BOOL v18 = this[163][4];
    return HALS_AHPPlugIn::ObjectGetPropertyDataSize(v18, a2, a3, (uint64_t)a4, a5);
  }
}

uint64_t HALS_AHPDevice::IsPropertySettable(HALS_Device ***this, uint64_t a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  if ((((uint64_t (*)(HALS_Device ***))(*this)[11])(this) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1869638758)
  {
    BOOL v10 = mSelector == 1650682995;
    int v11 = 1668047219;
  }
  else
  {
    BOOL v10 = mSelector == 1869638759 || mSelector == 1937007734;
    int v11 = 1870098020;
  }
  if (v10 || mSelector == v11)
  {
    return HALS_Device::IsPropertySettable(this, v8, a3, a4);
  }
  else
  {
    BOOL v14 = this[163][4];
    return HALS_AHPPlugIn::ObjectIsPropertySettable(v14, a2, a3);
  }
}

uint64_t HALS_AHPDevice::HasProperty(HALS_AHPDevice *this, const BOOL *a2, const AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1869638758)
  {
    BOOL v5 = mSelector == 1650682995;
    int v6 = 1668047219;
  }
  else
  {
    BOOL v5 = mSelector == 1869638759 || mSelector == 1937007734;
    int v6 = 1870098020;
  }
  if (!v5 && mSelector != v6) {
    return (*(unsigned int (**)(void))(**(void **)(*((void *)this + 163) + 32) + 184))(*(void *)(*((void *)this + 163) + 32)) != 0;
  }

  return HALS_Device::HasProperty((HALS_Device ***)this, a2, a3, a4);
}

void HALS_AHPDevice::~HALS_AHPDevice(HALS_AHPDevice *this)
{
  HALS_Device::~HALS_Device(this);

  JUMPOUT(0x1C1859840);
}

void HALS_AHPDevice::Activate(const __CFString **this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)" diubolg";
  uint64_t v10 = 0;
  uint64_t v2 = *((unsigned int *)this + 4);
  *(void *)AudioObjectPropertyAddress buf = 0;
  ((void (*)(const __CFString **, uint64_t, uint64_t *, uint64_t, char *, unsigned char *, void, void, void))(*this)[3].data)(this, v2, &v9, 8, (char *)&v10 + 4, buf, 0, 0, 0);
  uint64_t v7 = *(void *)buf;
  char v8 = 1;
  if (!*(void *)buf)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_AHPDevice.cpp";
      __int16 v12 = 1024;
      int v13 = 44;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPDevice::Activate: no UID", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  CACFString::operator=((uint64_t)(this + 12), (uint64_t)&v7);
  CFStringRef v4 = this[12];
  if (v4)
  {
    int v5 = CFStringGetLength(v4) + 1;
    CFStringRef v4 = this[12];
  }
  else
  {
    int v5 = 1;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = v5;
  CACFString::GetCString(v4, (__CFString *)((char *)this + 156), buf, v3);
  HALS_Device::Activate(this);
  CACFString::~CACFString((CACFString *)&v7);
}

void sub_1BAC6E85C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t HALS_Stream::GetIOBufferByteSize(HALS_Stream *this)
{
  return 0;
}

uint64_t HALS_Stream::GetIOBuffer(HALS_Stream *this)
{
  return 0;
}

uint64_t HALS_AHPStream::SetPropertyData(HALS_AHPStream *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  if (((*(uint64_t (**)(HALS_AHPStream *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    BOOL v21 = mSelector == 1937007734;
    int v22 = 1869638759;
  }
  else
  {
    BOOL v21 = mSelector == 1650682995;
    int v22 = 1668047219;
  }
  if (v21 || mSelector == v22) {
    HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v16, v17, v18, v19, (uint64_t)a8);
  }
  std::logic_error v24 = *(HALS_AHPPlugIn **)(*((void *)this + 8) + 32);

  return HALS_AHPPlugIn::ObjectSetPropertyData(v24, a2, a3, a6, a7, a4, a5);
}

uint64_t HALS_AHPStream::GetPropertyData(HALS_AHPStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, uint64_t *a6, uint64_t a7, const void *a8, HALS_Client *a9)
{
  if (((*(uint64_t (**)(HALS_AHPStream *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    BOOL v19 = mSelector == 1937007734;
    int v20 = 1869638759;
  }
  else
  {
    BOOL v19 = mSelector == 1650682995;
    int v20 = 1668047219;
  }
  if (v19 || mSelector == v20)
  {
    return HALS_Object::GetPropertyData((uint64_t)this, v17, (int *)a3, a4, (int *)a5, a6);
  }
  else
  {
    *a5 = a4;
    std::logic_error v23 = *(HALS_AHPPlugIn **)(*((void *)this + 8) + 32);
    return HALS_AHPPlugIn::ObjectGetPropertyData(v23, a2, a3, a7, a8, a5, a6);
  }
}

uint64_t HALS_AHPStream::GetPropertyDataSize(HALS_AHPStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, HALS_Client *a6)
{
  uint64_t v11 = (*(uint64_t (**)(HALS_AHPStream *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a6);
  if ((v11 & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    BOOL v14 = mSelector == 1937007734;
    int v15 = 1869638759;
  }
  else
  {
    BOOL v14 = mSelector == 1650682995;
    int v15 = 1668047219;
  }
  if (v14 || mSelector == v15)
  {
    return HALS_Object::GetPropertyDataSize(v11, v12, (int *)a3);
  }
  else
  {
    uint64_t v18 = *(HALS_AHPPlugIn **)(*((void *)this + 8) + 32);
    return HALS_AHPPlugIn::ObjectGetPropertyDataSize(v18, a2, a3, a4, a5);
  }
}

uint64_t HALS_AHPStream::IsPropertySettable(HALS_AHPStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  uint64_t v7 = (*(uint64_t (**)(HALS_AHPStream *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a4);
  if ((v7 & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    BOOL v10 = mSelector == 1937007734;
    int v11 = 1869638759;
  }
  else
  {
    BOOL v10 = mSelector == 1650682995;
    int v11 = 1668047219;
  }
  if (v10 || mSelector == v11)
  {
    return HALS_Object::IsPropertySettable(v7, v8, (int *)a3);
  }
  else
  {
    BOOL v14 = *(HALS_AHPPlugIn **)(*((void *)this + 8) + 32);
    return HALS_AHPPlugIn::ObjectIsPropertySettable(v14, a2, a3);
  }
}

BOOL HALS_AHPStream::HasProperty(uint64_t a1, uint64_t a2, int *a3)
{
  int v4 = *a3;
  BOOL result = 1;
  if (*a3 > 1869638758)
  {
    BOOL v6 = v4 == 1869638759;
    int v7 = 1937007734;
  }
  else
  {
    BOOL v6 = v4 == 1650682995;
    int v7 = 1668047219;
  }
  if (!v6 && v4 != v7) {
    return (*(unsigned int (**)(void))(**(void **)(*(void *)(a1 + 64) + 32) + 184))(*(void *)(*(void *)(a1 + 64) + 32)) != 0;
  }
  return result;
}

void HALS_AHPStream::~HALS_AHPStream(HALS_AHPStream *this)
{
  HALS_Object::~HALS_Object(this);

  JUMPOUT(0x1C1859840);
}

void HALS_AHPStream::Activate(HALS_AHPStream *this)
{
  v5.uint64_t mElement = 0;
  *(void *)&v5.AudioObjectPropertySelector mSelector = *(void *)"ridsbolg";
  unsigned int v3 = 4;
  int v4 = 0;
  HALS_AHPPlugIn::ObjectGetPropertyData(*(HALS_AHPPlugIn **)(*((void *)this + 8) + 32), *((unsigned int *)this + 4), &v5, 0, 0, &v3, &v4);
  *((unsigned char *)this + 52) = v4 != 0;
  HALS_Object::Activate(this, v2);
}

uint64_t HALS_AHPControl::GetHardwareReferenceStreamControlValue()
{
  return 0;
}

uint64_t HALS_AHPControl::SetPropertyData(HALS_AHPControl *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, void *a5, unsigned int a6, const void *a7, HALS_Client *a8)
{
  if (((*(uint64_t (**)(HALS_AHPControl *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1818456949)
  {
    if (mSelector != 1818456950)
    {
      BOOL v15 = mSelector == 1937007734;
      int v16 = 1869638759;
      goto LABEL_16;
    }
  }
  else if (mSelector != 1818453110)
  {
    BOOL v15 = mSelector == 1650682995;
    int v16 = 1668047219;
LABEL_16:
    if (v15 || mSelector == v16)
    {
      kdebug_trace();
      HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v27, v28, v29, v30, (uint64_t)a8);
    }
    return HALS_AHPPlugIn::ObjectSetPropertyData(*(HALS_AHPPlugIn **)(*((void *)this + 9) + 32), a2, a3, a6, a7, a4, a5);
  }
  std::string::basic_string[abi:ne180100]<0>(v36, "HALS_AHPControl::SetPropertyData");
  unint64_t v17 = *(void *)&a3->mSelector;
  AudioObjectPropertyElement mElement = a3->mElement;
  unsigned int v20 = *((_DWORD *)this + 12);
  unsigned int v19 = *((_DWORD *)this + 13);
  int v22 = (HALS_ObjectMap *)*((unsigned int *)this + 14);
  int v21 = *((_DWORD *)this + 15);
  std::logic_error v23 = "no control type";
  if (v21 == 1) {
    std::logic_error v23 = "software control";
  }
  if (v21) {
    std::logic_error v24 = (char *)v23;
  }
  else {
    std::logic_error v24 = "external driver";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v24);
  LogVolumeChangeForServerSideControl((uint64_t)v36, a2, v17, mElement, a4, (float *)a5, v22, v20, v19, (uint64_t)__p);
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  return HALS_AHPPlugIn::ObjectSetPropertyData(*(HALS_AHPPlugIn **)(*((void *)this + 9) + 32), a2, a3, a6, a7, a4, a5);
}

void sub_1BAC6F168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_AHPControl::GetPropertyData(HALS_AHPControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, uint64_t *a6, uint64_t a7, const void *a8, HALS_Client *a9)
{
  if (((*(uint64_t (**)(HALS_AHPControl *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    BOOL v19 = mSelector == 1937007734;
    int v20 = 1869638759;
  }
  else
  {
    BOOL v19 = mSelector == 1650682995;
    int v20 = 1668047219;
  }
  if (v19 || mSelector == v20)
  {
    return HALS_Object::GetPropertyData((uint64_t)this, v17, (int *)a3, a4, (int *)a5, a6);
  }
  else
  {
    *a5 = a4;
    std::logic_error v23 = *(HALS_AHPPlugIn **)(*((void *)this + 9) + 32);
    return HALS_AHPPlugIn::ObjectGetPropertyData(v23, a2, a3, a7, a8, a5, a6);
  }
}

uint64_t HALS_AHPControl::GetPropertyDataSize(HALS_AHPControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, HALS_Client *a6)
{
  uint64_t v11 = (*(uint64_t (**)(HALS_AHPControl *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a6);
  if ((v11 & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    BOOL v14 = mSelector == 1937007734;
    int v15 = 1869638759;
  }
  else
  {
    BOOL v14 = mSelector == 1650682995;
    int v15 = 1668047219;
  }
  if (v14 || mSelector == v15)
  {
    return HALS_Object::GetPropertyDataSize(v11, v12, (int *)a3);
  }
  else
  {
    uint64_t v18 = *(HALS_AHPPlugIn **)(*((void *)this + 9) + 32);
    return HALS_AHPPlugIn::ObjectGetPropertyDataSize(v18, a2, a3, a4, a5);
  }
}

uint64_t HALS_AHPControl::IsPropertySettable(HALS_AHPControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  uint64_t v7 = (*(uint64_t (**)(HALS_AHPControl *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a4);
  if ((v7 & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    BOOL v10 = mSelector == 1937007734;
    int v11 = 1869638759;
  }
  else
  {
    BOOL v10 = mSelector == 1650682995;
    int v11 = 1668047219;
  }
  if (v10 || mSelector == v11)
  {
    return HALS_Object::IsPropertySettable(v7, v8, (int *)a3);
  }
  else
  {
    BOOL v14 = *(HALS_AHPPlugIn **)(*((void *)this + 9) + 32);
    return HALS_AHPPlugIn::ObjectIsPropertySettable(v14, a2, a3);
  }
}

BOOL HALS_AHPControl::HasProperty(uint64_t a1, uint64_t a2, int *a3)
{
  int v4 = *a3;
  BOOL result = 1;
  if (*a3 > 1869638758)
  {
    BOOL v6 = v4 == 1869638759;
    int v7 = 1937007734;
  }
  else
  {
    BOOL v6 = v4 == 1650682995;
    int v7 = 1668047219;
  }
  if (!v6 && v4 != v7) {
    return (*(unsigned int (**)(void))(**(void **)(*(void *)(a1 + 72) + 32) + 184))(*(void *)(*(void *)(a1 + 72) + 32)) != 0;
  }
  return result;
}

void HALS_AHPControl::~HALS_AHPControl(HALS_AHPControl *this)
{
  HALS_Control::~HALS_Control(this);

  JUMPOUT(0x1C1859840);
}

void HALS_AHPControl::Activate(HALS_AHPControl *this)
{
  v6.AudioObjectPropertyElement mElement = 0;
  *(void *)&v6.AudioObjectPropertySelector mSelector = *(void *)"pcscbolg";
  unsigned int v5 = 4;
  HALS_AHPPlugIn::ObjectGetPropertyData(*(HALS_AHPPlugIn **)(*((void *)this + 9) + 32), *((unsigned int *)this + 4), &v6, 0, 0, &v5, (char *)this + 48);
  *(void *)&v4.AudioObjectPropertySelector mSelector = *(void *)"mlecbolg";
  v4.AudioObjectPropertyElement mElement = 0;
  unsigned int v3 = 4;
  HALS_AHPPlugIn::ObjectGetPropertyData(*(HALS_AHPPlugIn **)(*((void *)this + 9) + 32), *((unsigned int *)this + 4), &v4, 0, 0, &v3, (char *)this + 52);
  HALS_Object::Activate(this, v2);
}

void HALS_IOA2Device::PerformNonDriverConfigChange(HALS_IOA2Device *this, int a2, int a3)
{
  if (a2)
  {
    memset(v9, 0, sizeof(v9));
    HALS_IOA2Device::HandleConfigChange((unsigned int *)this, (uint64_t)v9);
  }
  else
  {
    uint64_t v5 = (*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 64))(this);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 0x40000000;
    v7[2] = ___ZN15HALS_IOA2Device28PerformNonDriverConfigChangeEbj_block_invoke;
    void v7[3] = &__block_descriptor_tmp_121;
    void v7[4] = this;
    int v8 = a3;
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v5 + 32));
    if (v6) {
      atomic_store(1u, (unsigned __int8 *)(v5 + 33));
    }
    dispatch_async(*(dispatch_queue_t *)v5, v7);
  }
}

void sub_1BAC6F7EC(void *a1)
{
}

void HALS_IOA2Device::HandleConfigChange(unsigned int *a1, uint64_t a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  kdebug_trace();
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = a1[4];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1860;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = a1 + 39;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v4;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOA2Device::HandleConfigChange: %s|%d: begin --->", buf, 0x22u);
  }
  __int16 v54 = 0;
  int v55 = 0;
  uint64_t v56 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = &v50;
  uint64_t v52 = 0x2000000000;
  uint64_t v53 = 0;
  v49[0] = MEMORY[0x1E4F143A8];
  v49[1] = 0x40000000;
  v49[2] = ___ZN15HALS_IOA2Device18HandleConfigChangeERK20IOAudio2Notificationj_block_invoke;
  v49[3] = &unk_1E6231B90;
  v49[4] = &v50;
  v49[5] = a1;
  uint64_t v5 = (HALB_Mutex *)(*(uint64_t (**)(unsigned int *))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v49);
  v48[0] = 0;
  v48[1] = 0;
  HALS_System::GetInstance(buf, 0, v48);
  uint64_t v6 = *(void *)buf;
  int v7 = (const void *)(*(uint64_t (**)(unsigned int *))(*(void *)a1 + 200))(a1);
  int v8 = v7;
  if (v7) {
    CFRetain(v7);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v8);
  HALS_System::GetRawDeviceListUsingClockDevice(v6, (uint64_t)&v54, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  BOOL v10 = (HALS_ObjectMap *)v51[3];
  if (v10)
  {
    *(void *)AudioObjectPropertyAddress buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x4802000000;
    *(void *)&unsigned char buf[24] = __Block_byref_object_copy__113;
    *(void *)&unsigned char buf[32] = __Block_byref_object_dispose__114;
    long long v63 = 0u;
    long long v64 = 0u;
    uint64_t v41 = 0;
    uint64_t v42 = &v41;
    uint64_t v43 = 0x4002000000;
    float32x4_t v44 = __Block_byref_object_copy__115;
    uint64_t v45 = __Block_byref_object_dispose__116;
    memset(v46, 0, sizeof(v46));
    int v11 = (HALS_NotificationManager *)a1[4];
    strcpy(v57, "bgfcbolg");
    v57[9] = 0;
    *(_WORD *)&v57[10] = 0;
    HALS_NotificationManager::PropertiesChanged_Sync(v11, 0, 1u, (const AudioObjectPropertyAddress *)v57, v9);
    long long __p = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    (*(void (**)(HALS_ObjectMap *, void **))(*(void *)v10 + 216))(v10, &__p);
    v37[0] = 0;
    v37[1] = 0;
    HALS_System::GetInstance(v57, 0, v37);
    HALS_IOContext_Manager::pause_contexts_for_device(*(os_unfair_lock_s **)(*(void *)v57 + 1392), (HALS_IODevice *)a1);
    if (*(void *)&v57[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v57[8]);
    }
    uint64_t v12 = *(void *)a1;
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 0x40000000;
    unsigned int v36[2] = ___ZN15HALS_IOA2Device18HandleConfigChangeERK20IOAudio2Notificationj_block_invoke_117;
    v36[3] = &unk_1E6231BB8;
    v36[6] = a1;
    v36[7] = a2;
    v36[4] = buf;
    v36[5] = &v41;
    int v13 = (HALB_Mutex *)(*(uint64_t (**)(unsigned int *))(v12 + 56))(a1);
    HALB_CommandGate::ExecuteCommand(v13, (uint64_t)v36);
    (*(void (**)(HALS_ObjectMap *))(*(void *)v10 + 936))(v10);
    v35[0] = 0;
    v35[1] = 0;
    HALS_System::GetInstance(v57, 0, v35);
    HALS_IOContext_Manager::rebuild_engine_for_device(*(HALS_IOContext_Manager **)(*(void *)v57 + 1392), (const HALS_IODevice *)a1);
    if (*(void *)&v57[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v57[8]);
    }
    if ((*(unsigned int (**)(unsigned int *))(*(void *)a1 + 440))(a1)
      && ((*(uint64_t (**)(unsigned int *))(*(void *)a1 + 432))(a1) & 1) == 0)
    {
      *(void *)unsigned int v57 = 0x676C6F6268647370;
      *(_DWORD *)&v57[4] = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 448))(a1);
      *(_DWORD *)&v57[8] = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(*(void *)&buf[8] + 40), (AudioObjectPropertyAddress *)v57, v14);
    }
    kdebug_trace();
    int v15 = *(const AudioObjectPropertyAddress **)(*(void *)&buf[8] + 40);
    int v16 = *(const AudioObjectPropertyAddress **)(*(void *)&buf[8] + 48);
    if (v15 != v16)
    {
      HALS_Object::PropertiesChanged_Sync((HALS_Object *)a1, (HALS_NotificationManager *)a1[4], 0, -1431655765 * ((unint64_t)((char *)v16 - (char *)v15) >> 2), v15);
      uint64_t v17 = (unsigned int *)v54;
      uint64_t v18 = v55;
      if (v54 != v55)
      {
        do
          HALS_Object::PropertiesChanged_Sync((HALS_Object *)a1, (HALS_NotificationManager *)*v17++, 0, -1431655765 * ((*(void *)(*(void *)&buf[8] + 48) - *(void *)(*(void *)&buf[8] + 40)) >> 2), *(const AudioObjectPropertyAddress **)(*(void *)&buf[8] + 40));
        while (v17 != v18);
      }
    }
    BOOL v19 = v42;
    uint64_t v20 = v42[5];
    uint64_t v21 = v42[6] - v20;
    if ((v21 & 0x1FFFFFFFE0) != 0)
    {
      uint64_t v22 = 0;
      unint64_t v23 = 0;
      do
      {
        if (v23 >= v21 >> 5) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v24 = v20 + v22;
        if (*(void *)(v20 + v22) != *(void *)(v20 + v22 + 8))
        {
          int v25 = (HALS_ObjectMap *)*(unsigned int *)(v24 + 24);
          uint64_t v27 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v25);
          if (v27) {
            HALS_Object::PropertiesChanged_Sync((HALS_Object *)a1, v25, 0, -1431655765 * ((*(void *)(v24 + 8) - *(void *)v24) >> 2), *(const AudioObjectPropertyAddress **)v24);
          }
          HALS_ObjectMap::ReleaseObject(v27, v26);
          BOOL v19 = v42;
        }
        ++v23;
        uint64_t v20 = v19[5];
        uint64_t v21 = v19[6] - v20;
        v22 += 32;
      }
      while (v23 < ((unint64_t)v21 >> 5));
    }
    kdebug_trace();
    (*(void (**)(HALS_ObjectMap *, uint64_t))(*(void *)v10 + 232))(v10, *(void *)&buf[8] + 40);
    (*(void (**)(HALS_ObjectMap *, void **))(*(void *)v10 + 224))(v10, &__p);
    v34[0] = 0;
    v34[1] = 0;
    HALS_System::GetInstance(v57, 0, v34);
    uint64_t v28 = (os_unfair_lock_s *)(*(void *)(*(void *)v57 + 1392) + 16);
    os_unfair_lock_lock(v28);
    os_unfair_lock_unlock(v28);
    if (*(void *)&v57[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v57[8]);
    }
    v33[0] = 0;
    v33[1] = 0;
    HALS_System::GetInstance(v57, 0, v33);
    HALS_IOContext_Manager::resume_contexts_for_device(*(os_unfair_lock_s **)(*(void *)v57 + 1392), (HALS_IODevice *)a1);
    if (*(void *)&v57[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v57[8]);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v29 = a1[4];
      *(_DWORD *)unsigned int v57 = 136315906;
      *(void *)&v57[4] = "HALS_IOA2Device.cpp";
      *(_WORD *)&v57[12] = 1024;
      *(_DWORD *)&v57[14] = 2149;
      __int16 v58 = 2080;
      unsigned int v59 = a1 + 39;
      __int16 v60 = 1024;
      unsigned int v61 = v29;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOA2Device::_HandleConfigChange: %s|%d:   end <---", v57, 0x22u);
    }
    if (__p)
    {
      uint64_t v39 = __p;
      operator delete(__p);
    }
    _Block_object_dispose(&v41, 8);
    *(void *)unsigned int v57 = v46;
    std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)v57);
    _Block_object_dispose(buf, 8);
    if ((void)v63)
    {
      *((void *)&v63 + 1) = v63;
      operator delete((void *)v63);
    }
  }
  else
  {
    v32[0] = MEMORY[0x1E4F143A8];
    v32[1] = 0x40000000;
    uint64_t v32[2] = ___ZN15HALS_IOA2Device18HandleConfigChangeERK20IOAudio2Notificationj_block_invoke_119;
    v32[3] = &__block_descriptor_tmp_120;
    v32[4] = a1;
    v32[5] = a2;
    uint64_t v30 = (HALB_Mutex *)(*(uint64_t (**)(unsigned int *))(*(void *)a1 + 56))(a1);
    HALB_CommandGate::ExecuteCommand(v30, (uint64_t)v32);
  }
  kdebug_trace();
  HALS_ObjectMap::ReleaseObject(v10, v31);
  _Block_object_dispose(&v50, 8);
  if (v54) {
    operator delete(v54);
  }
}

void sub_1BAC70078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a35, 8);
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Block_object_dispose((const void *)(v57 - 192), 8);
  __int16 v60 = *(void **)(v57 - 152);
  if (v60)
  {
    *(void *)(v57 - 144) = v60;
    operator delete(v60);
  }
  HALS_ObjectMap::ReleaseObject(v56, v59);
  _Block_object_dispose(&a52, 8);
  if (a56) {
    operator delete(a56);
  }
  _Unwind_Resume(a1);
}

void ___ZN15HALS_IOA2Device28PerformNonDriverConfigChangeEbj_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(unsigned int **)(a1 + 32);
  memset(v2, 0, sizeof(v2));
  HALS_IOA2Device::HandleConfigChange(v1, (uint64_t)v2);
}

void sub_1BAC701D0(void *a1)
{
}

void ___ZN15HALS_IOA2Device18HandleConfigChangeERK20IOAudio2Notificationj_block_invoke(uint64_t a1, HALS_Object *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 1776);
  if (v2)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v2;
    HALS_ObjectMap::RetainObject(*(HALS_ObjectMap **)(*(void *)(*(void *)(a1 + 32) + 8) + 24), a2);
  }
}

char *__Block_byref_object_copy__113(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v3 = a1 + 40;
  *(void *)(a1 + 56) = 0;
  BOOL result = std::vector<CAPropertyAddress>::__init_with_size[abi:ne180100]<CAPropertyAddress*,CAPropertyAddress*>((char *)(a1 + 40), *(uint64_t **)(a2 + 40), *(uint64_t **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2));
  *(void *)(v3 + 24) = *(void *)(a2 + 64);
  return result;
}

void __Block_byref_object_dispose__114(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t __Block_byref_object_copy__115(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = a1 + 40;
  *(void *)(v2 + 16) = 0;
  return std::vector<CAPropertyAddressList>::__init_with_size[abi:ne180100]<CAPropertyAddressList*,CAPropertyAddressList*>(v2, *(void *)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 5);
}

void __Block_byref_object_dispose__116(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN15HALS_IOA2Device18HandleConfigChangeERK20IOAudio2Notificationj_block_invoke_117(uint64_t a1)
{
  *(void *)((char *)&v43[3] + 6) = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)v29);
  HALS_DeviceState::Capture((HALS_DeviceState *)v29, (HALS_Device *)v2, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
  uint64_t v3 = *(void *)(v2 + 1856);
  *(void *)(v2 + 1856) = 0;
  HALS_IOA2Device::_UnmapDataExchangeBlocks((HALS_IOA2Device *)v2);
  HALS_IOA2Device::_UnmapBlockControlBuffers(*(HALS_IOA2Device **)(v2 + 1352), *(HALS_IOA2Device **)(v2 + 1360));
  HALS_IOA2Device::_ReleaseIOBuffers((HALS_IOA2Device *)v2);
  kdebug_trace();
  int v4 = HALS_IOA2UCDevice::PerformConfigChange(v2 + 1808, *(void **)(a1 + 56));
  kdebug_trace();
  if (v4 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
    __int16 v40 = 1024;
    *(_DWORD *)uint64_t v41 = 1930;
    *(_WORD *)&v41[4] = 1024;
    *(_DWORD *)&v41[6] = v4;
    __int16 v42 = 2080;
    v43[0] = v2 + 156;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOA2Device::HandleConfigChange: got an error (0x%X) from the performConfigChange routine of '%s'", buf, 0x22u);
  }
  *(unsigned char *)(v2 + 1840) = 1;
  HALB_UCObject::CacheProperties((HALB_UCObject *)(v2 + 1808));
  uint64_t v5 = 0;
  char v6 = 1;
  do
  {
    char v7 = v6;
    uint64_t v8 = v2 + 24 * v5;
    uint64_t v9 = *(void *)(v8 + 1304);
    if (*(void *)(v8 + 1312) != v9)
    {
      unint64_t v10 = 0;
      int v11 = (uint64_t *)(v8 + 1304);
      uint64_t v12 = (void *)(v8 + 1312);
      unsigned int v13 = 1;
      do
      {
        HALS_IOA2Stream::BuildFormatList(*(HALS_IOA2Stream **)(v9 + 8 * v10));
        unint64_t v10 = v13;
        uint64_t v9 = *v11;
        ++v13;
      }
      while (v10 < (*v12 - *v11) >> 3);
    }
    char v6 = 0;
    uint64_t v5 = 1;
  }
  while ((v7 & 1) != 0);
  __int16 v28 = 0;
  BOOL v27 = 0;
  HALS_IOA2Device::_UpdateStreams(v2, (uint64_t)&v28);
  HALS_IOA2Device::_UpdateControls((HALS_IOA2Device *)v2, &v27);
  HALS_IOA2Device::_MapIOBuffers((HALS_IOA2Device *)v2);
  HALS_IOA2Device::_MapBlockControlBuffers(*(HALS_IOA2Device **)(v2 + 1352), *(HALS_IOA2Device **)(v2 + 1360));
  HALS_IOA2Device::_MapDataExchangeBlocks((HALS_IOA2Device *)v2);
  if (v3)
  {
    uint64_t v14 = *(unsigned int *)(v2 + 1820);
    if (v14) {
      MEMORY[0x1C18588A0](v14, 0, *MEMORY[0x1E4F14960], v3);
    }
  }
  HALS_IOA2UCDevice::MapEngineStatus((HALB_UCObject *)(v2 + 1808), (uint64_t *)(v2 + 1856));
  HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)buf);
  HALS_DeviceState::Capture((HALS_DeviceState *)buf, (HALS_Device *)v2, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
  HALS_DeviceState::Compare((HALS_DeviceState *)v29, (const HALS_DeviceState *)buf, (const AudioObjectPropertyAddress *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), (CAPropertyAddressList **)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v15);
  *(void *)&v26.AudioObjectPropertySelector mSelector = 0x676C6F6200000000;
  if (HIBYTE(v28) | v28)
  {
    v26.AudioObjectPropertySelector mSelector = 1937009955;
    v26.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), &v26, v16);
    if (HIBYTE(v28))
    {
      *(void *)&v26.AudioObjectPropertySelector mSelector = 0x696E707473746D23;
      v26.AudioObjectPropertyElement mElement = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), &v26, v16);
    }
    if ((_BYTE)v28)
    {
      *(void *)&v26.AudioObjectPropertySelector mSelector = 0x6F75747073746D23;
      v26.AudioObjectPropertyElement mElement = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), &v26, v16);
    }
  }
  if (v27)
  {
    *(void *)&v26.AudioObjectPropertySelector mSelector = 0x676C6F626374726CLL;
    v26.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), &v26, v16);
  }
  uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(void *)(v17 + 40) == *(void *)(v17 + 48))
  {
    uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8);
    BOOL v19 = *(uint64_t **)(v18 + 40);
    uint64_t v20 = *(uint64_t **)(v18 + 48);
    while (v19 != v20)
    {
      uint64_t v21 = *v19;
      uint64_t v22 = v19[1];
      v19 += 4;
      if (v21 != v22) {
        goto LABEL_26;
      }
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v23 = *(_DWORD *)(v2 + 16);
      v32.AudioObjectPropertySelector mSelector = 136315906;
      *(void *)&v32.AudioObjectPropertyScope mScope = "HALS_IOA2Device.cpp";
      __int16 v33 = 1024;
      int v34 = 2008;
      __int16 v35 = 2080;
      uint64_t v36 = v2 + 156;
      __int16 v37 = 1024;
      int v38 = v23;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOA2Device::_HandleConfigChange: %s|%d: but nothing changed", (uint8_t *)&v32, 0x22u);
      uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 8);
    }
  }
LABEL_26:
  *(void *)&v26.AudioObjectPropertySelector mSelector = 0x676C6F6264696666;
  v26.AudioObjectPropertyElement mElement = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v17 + 40), &v26, v16);
  uint64_t v24 = *(void *)(*(void *)(a1 + 32) + 8);
  strcpy((char *)&v32, "egfcbolg");
  BYTE1(v32.mElement) = 0;
  HIWORD(v32.mElement) = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v24 + 40), &v32, v25);
  *(void *)&v32.AudioObjectPropertySelector mSelector = (char *)v43 + 6;
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*(void **)&v41[2]);
  *(void *)AudioObjectPropertyAddress buf = &v31;
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v30);
}

void sub_1BAC70774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2)
  {
    HALS_DeviceState::~HALS_DeviceState((HALS_DeviceState *)&a25);
    HALS_DeviceState::~HALS_DeviceState((HALS_DeviceState *)&a12);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAC70738);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN15HALS_IOA2Device18HandleConfigChangeERK20IOAudio2Notificationj_block_invoke_119(uint64_t a1)
{
  return HALS_IOA2UCDevice::PerformConfigChange(*(void *)(a1 + 32) + 1808, *(void **)(a1 + 40));
}

double HALS_IOA2Device::_UnmapDataExchangeBlocks(HALS_IOA2Device *this)
{
  uint64_t v2 = (char *)*((void *)this + 237);
  uint64_t v3 = (char *)this + 1904;
  if (v2 != (char *)this + 1904)
  {
    do
    {
      if (*((void *)v2 + 5)) {
        BOOL v4 = *((_DWORD *)this + 455) == 0;
      }
      else {
        BOOL v4 = 1;
      }
      if (!v4) {
        MEMORY[0x1C18588A0]();
      }
      uint64_t v5 = (char *)*((void *)v2 + 1);
      if (v5)
      {
        do
        {
          char v6 = v5;
          uint64_t v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          char v6 = (char *)*((void *)v2 + 2);
          BOOL v4 = *(void *)v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v4);
      }
      uint64_t v2 = v6;
    }
    while (v6 != v3);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 238));
  *((void *)this + 237) = v3;
  double result = 0.0;
  *((_OWORD *)this + 119) = 0u;
  return result;
}

void HALS_IOA2Device::_UnmapBlockControlBuffers(HALS_IOA2Device *this, HALS_IOA2Device *a2)
{
  if (this != a2)
  {
    uint64_t v3 = this;
    BOOL v4 = (unsigned int *)MEMORY[0x1E4F14960];
    do
    {
      uint64_t v5 = *(void *)v3;
      int v6 = *(_DWORD *)(*(void *)v3 + 20);
      int v7 = *(_DWORD *)(*(void *)v3 + 24);
      if (v6 == v7)
      {
        if (v6 != 1936028002 && v6 != 1651273579) {
          goto LABEL_45;
        }
      }
      else if (v6 != 1651273579 && v6 != 1936028002 && v7 != 1651273579 && v7 != 1936028002)
      {
        goto LABEL_45;
      }
      uint64_t v12 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v5 + 56));
      uint64_t v14 = (HALS_ObjectMap *)v12;
      int v15 = *(_DWORD *)(v5 + 20);
      int v16 = *(_DWORD *)(v5 + 24);
      if (v15 == v16)
      {
        if (v15 == 1936028002 || v15 == 1651273579) {
          goto LABEL_37;
        }
      }
      else if (v15 == 1651273579 || v15 == 1936028002 || v16 == 1651273579 || v16 == 1936028002)
      {
LABEL_37:
        if (*(void *)(v5 + 104)) {
          BOOL v21 = v12 == 0;
        }
        else {
          BOOL v21 = 1;
        }
        if (!v21)
        {
          uint64_t v22 = *(unsigned int *)(v12 + 1820);
          if (v22) {
            MEMORY[0x1C18588A0](v22, *(_DWORD *)(v5 + 72) & 0xFFFFFFF | 0x30000000u, *v4);
          }
          *(void *)(v5 + 104) = 0;
          *(_DWORD *)(v5 + 112) = 0;
        }
      }
      HALS_ObjectMap::ReleaseObject(v14, v13);
LABEL_45:
      uint64_t v3 = (HALS_IOA2Device *)((char *)v3 + 8);
    }
    while (v3 != a2);
  }
}

void HALS_IOA2Device::_ReleaseIOBuffers(HALS_IOA2Device *this)
{
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    char v4 = v3;
    uint64_t v5 = (char *)this + 24 * v2;
    uint64_t v6 = *((void *)v5 + 163);
    if (*((void *)v5 + 164) != v6)
    {
      unint64_t v7 = 0;
      uint64_t v8 = (uint64_t *)(v5 + 1304);
      uint64_t v9 = v5 + 1312;
      unsigned int v10 = 1;
      do
      {
        uint64_t v11 = *(void *)(v6 + 8 * v7);
        uint64_t v12 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v11 + 48));
        uint64_t v14 = (HALS_ObjectMap *)v12;
        if (v12)
        {
          int v15 = *(_DWORD *)(v12 + 1820);
          if (*(void *)(v11 + 128)) {
            BOOL v16 = v15 == 0;
          }
          else {
            BOOL v16 = 1;
          }
          if (!v16) {
            MEMORY[0x1C18588A0]();
          }
        }
        *(void *)(v11 + 128) = 0;
        *(_DWORD *)(v11 + 136) = 0;
        HALS_ObjectMap::ReleaseObject(v14, v13);
        unint64_t v7 = v10;
        uint64_t v6 = *v8;
        ++v10;
      }
      while (v7 < (*v9 - *v8) >> 3);
    }
    char v3 = 0;
    uint64_t v2 = 1;
  }
  while ((v4 & 1) != 0);
}

void sub_1BAC70AD8(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void HALS_IOA2Device::_UpdateStreams(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  char v4 = 1;
  do
  {
    char v5 = v4;
    *(unsigned char *)(a2 + v3) = 0;
    uint64_t v6 = a1 + 24 * v3;
    uint64_t v7 = *(void *)(v6 + 1312);
    uint64_t v8 = *(uint64_t **)(v6 + 1304);
    unint64_t v9 = v7 - (void)v8;
    uint64_t v10 = (v7 - (uint64_t)v8) >> 3;
    if ((int)v10 >= 1)
    {
      uint64_t v11 = (v9 >> 3);
      do
      {
        if (!v10) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v12 = *v8++;
        *(unsigned char *)(v12 + 13) = 0;
        --v10;
        --v11;
      }
      while (v11);
    }
    char v4 = 0;
    uint64_t v3 = 1;
  }
  while ((v5 & 1) != 0);
  uint64_t v13 = 0;
  float32x4_t v120 = (const __CFDictionary **)(a1 + 1808);
  long long v132 = 0u;
  long long v133 = 0u;
  long long v131 = 0u;
  CFStringRef v14 = @"output streams";
  long long v124 = 0u;
  long long v125 = 0u;
  long long v123 = 0u;
  char v15 = 1;
  do
  {
    char v16 = v15;
    CFArrayRef theArray = 0;
    HALB_UCObject::CopyProperty_CFArray(v120, v14, &theArray);
    *(void *)AudioObjectPropertyAddress buf = theArray;
    __int16 v130 = 1;
    if (theArray)
    {
      int Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        unsigned int v18 = 0;
        BOOL v19 = (void **)&v123 + 3 * v13;
        uint64_t v20 = (unsigned int **)(v19 + 1);
        BOOL v21 = v19 + 2;
        do
        {
          CFArrayRef theArray = 0;
          __int16 v128 = 1;
          CACFArray::GetCACFDictionary((CFArrayRef *)buf, v18, (CACFDictionary *)&theArray);
          if (theArray)
          {
            unsigned int v126 = 0;
            if (CACFDictionary::GetUInt32((uint64_t)theArray, @"stream ID", &v126))
            {
              uint64_t v22 = *v20;
              if ((unint64_t)*v20 >= *v21)
              {
                uint64_t v24 = (unsigned int *)*v19;
                uint64_t v25 = ((char *)v22 - (unsigned char *)*v19) >> 2;
                unint64_t v26 = v25 + 1;
                if ((unint64_t)(v25 + 1) >> 62) {
                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v27 = *v21 - (void)v24;
                if (v27 >> 1 > v26) {
                  unint64_t v26 = v27 >> 1;
                }
                BOOL v28 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL;
                unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v28) {
                  unint64_t v29 = v26;
                }
                if (v29)
                {
                  unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v29);
                  uint64_t v22 = *v20;
                  uint64_t v24 = (unsigned int *)*v19;
                }
                else
                {
                  uint64_t v30 = 0;
                }
                uint64_t v31 = (unsigned int *)(v29 + 4 * v25);
                *uint64_t v31 = v126;
                int v23 = v31 + 1;
                while (v22 != v24)
                {
                  unsigned int v32 = *--v22;
                  *--uint64_t v31 = v32;
                }
                uint64_t *v19 = v31;
                *uint64_t v20 = v23;
                *BOOL v21 = v29 + 4 * v30;
                if (v24) {
                  operator delete(v24);
                }
              }
              else
              {
                *uint64_t v22 = v126;
                int v23 = v22 + 1;
              }
              *uint64_t v20 = v23;
            }
          }
          CACFDictionary::~CACFDictionary((CACFDictionary *)&theArray);
          ++v18;
        }
        while (v18 != Count);
      }
    }
    CACFArray::~CACFArray((CACFArray *)buf);
    char v15 = 0;
    CFStringRef v14 = @"input streams";
    uint64_t v13 = 1;
  }
  while ((v16 & 1) != 0);
  uint64_t v33 = *(void *)(a1 + 448);
  BOOL IsEnabledForAnyClientOrContext = HALS_ReferenceStreamStateManager::ReferenceStreamIsEnabledForAnyClientOrContext(*(std::__shared_mutex_base **)(a1 + 440));
  long long v35 = v123;
  uint64_t v36 = *((void *)&v124 + 1);
  uint64_t v37 = v125;
  int v38 = operator new(0x50uLL);
  uint64_t v39 = (*((void *)&v35 + 1) - (void)v35) >> 2;
  *int v38 = 0;
  v38[1] = v39;
  uint64_t v40 = a2 + 1;
  BOOL v42 = (v33 & 0xFF00000000) != 0 && v33 == 1 && IsEnabledForAnyClientOrContext;
  *((void *)v38 + 1) = v35;
  *((void *)v38 + 2) = 0;
  *((void *)v38 + 3) = &v131;
  *((void *)v38 + 4) = a2;
  v38[10] = 1;
  v38[11] = (unint64_t)(v37 - v36) >> 2;
  *((void *)v38 + 6) = v36;
  *((void *)v38 + 7) = 1;
  *((void *)v38 + 8) = (char *)&v132 + 8;
  *((void *)v38 + 9) = v40;
  if (v42)
  {
    uint64_t v43 = (char *)v38;
    float32x4_t v44 = (char *)operator new(0xA0uLL);
    uint64_t v45 = v44;
    *((_DWORD *)v44 + 20) = 0;
    *((_DWORD *)v44 + 21) = v39;
    *((void *)v44 + 11) = v35;
    *((void *)v44 + 12) = 0x100000001;
    *((void *)v44 + 13) = (char *)&v132 + 8;
    *((void *)v44 + 14) = v40;
    float32x4_t v119 = v44 + 120;
    for (uint64_t i = 40; i != -40; i -= 40)
    {
      float32x4_t v47 = &v44[i];
      long long v48 = *(_OWORD *)&v43[i + 16];
      *(_OWORD *)float32x4_t v47 = *(_OWORD *)&v43[i];
      *((_OWORD *)v47 + 1) = v48;
      *((void *)v47 + 4) = *(void *)&v43[i + 32];
    }
    operator delete(v43);
    int v38 = v45;
  }
  else
  {
    float32x4_t v119 = (char *)(v38 + 20);
  }
  long long __p = v38;
  uint64_t v49 = (char *)v38;
  do
  {
    uint64_t v50 = *((unsigned int *)v49 + 1);
    if ((int)v50 >= 1)
    {
      uint64_t v51 = 0;
      uint64_t v52 = *((void *)v49 + 1);
      int v53 = *((_DWORD *)v49 + 5);
      do
      {
        uint64_t v54 = 0;
        for (char j = 1; ; char j = 0)
        {
          char v56 = j;
          uint64_t v57 = a1 + 24 * v54;
          uint64_t v58 = *(void *)(v57 + 1312);
          uint64_t v59 = *(void *)(v57 + 1304);
          uint64_t v60 = v58 - v59;
          if (v60) {
            break;
          }
LABEL_51:
          uint64_t v54 = 1;
          if ((v56 & 1) == 0) {
            operator new();
          }
        }
        uint64_t v61 = 0;
        unint64_t v62 = v60 >> 3;
        unsigned int v63 = 1;
        while (1)
        {
          uint64_t v64 = *(void *)(v59 + 8 * v61);
          if (*(_DWORD *)(v64 + 60) == *(_DWORD *)(v52 + 4 * v51) && *(_DWORD *)(v64 + 56) == v53) {
            break;
          }
          uint64_t v61 = v63;
          if (v62 <= v63++) {
            goto LABEL_51;
          }
        }
        *(unsigned char *)(v64 + 13) = 1;
        ++v51;
      }
      while (v51 != v50);
    }
    v49 += 40;
  }
  while (v49 != v119);
  uint64_t v66 = 0;
  char v67 = 1;
  do
  {
    char v68 = v67;
    uint64_t v69 = a1 + 24 * v66;
    unint64_t v70 = *(void *)(v69 + 1312) - *(void *)(v69 + 1304);
    if ((int)(v70 >> 3) >= 1)
    {
      float32x4_t v71 = (void *)(v69 + 1304);
      float32x4_t v72 = (void *)(v69 + 1312);
      uint64_t v73 = (v70 >> 3) + 1;
      while (1)
      {
        unint64_t v74 = (v73 - 2);
        if (v74 >= (uint64_t)(*v72 - *v71) >> 3) {
          break;
        }
        float32x4_t v75 = *(HALS_IOA2Stream **)(*v71 + 8 * v74);
        if (*((unsigned char *)v75 + 13))
        {
          HALS_IOA2Stream::BuildFormatList(v75);
        }
        else
        {
          (*(void (**)(HALS_IOA2Stream *))(*(void *)v75 + 8))(v75);
          HALS_ObjectMap::ObjectIsDead(v75, v76);
          uint64_t v77 = *v71 + 8 * v74;
          uint64_t v78 = *v72 - (v77 + 8);
          if (*v72 != v77 + 8) {
            memmove((void *)v77, (const void *)(v77 + 8), *v72 - (v77 + 8));
          }
          *float32x4_t v72 = v77 + v78;
          *(unsigned char *)(a2 + v66) = 1;
        }
        if ((unint64_t)--v73 <= 1) {
          goto LABEL_65;
        }
      }
LABEL_107:
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    }
LABEL_65:
    char v67 = 0;
    uint64_t v66 = 1;
  }
  while ((v68 & 1) != 0);
  uint64_t v79 = 0;
  char v80 = 1;
  do
  {
    char v81 = v80;
    float32x4_t v82 = (uint64_t *)&v131 + 3 * v79;
    uint64_t v83 = v82[1];
    uint64_t v84 = *v82;
    uint64_t v85 = v83 - *v82;
    if (v83 != *v82)
    {
      char v121 = v81;
      unint64_t v86 = v85 >> 3;
      if ((int)v86 >= 1)
      {
        unint64_t v87 = 0;
        uint64_t v88 = a1 + 24 * v79;
        float32x4_t v89 = (void *)(v88 + 1304);
        float32x4_t v90 = (void **)(v88 + 1312);
        float32x4_t v91 = (void *)(v88 + 1320);
        while (v86 > v87)
        {
          float32x4_t v92 = *(void (****)(void))(v84 + 8 * v87);
          float32x4_t v93 = *v90;
          if ((unint64_t)*v90 >= *v91)
          {
            uint64_t v95 = ((uint64_t)v93 - *v89) >> 3;
            if ((unint64_t)(v95 + 1) >> 61) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v96 = *v91 - *v89;
            uint64_t v97 = v96 >> 2;
            if (v96 >> 2 <= (unint64_t)(v95 + 1)) {
              uint64_t v97 = v95 + 1;
            }
            if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v98 = v97;
            }
            if (v98) {
              unint64_t v98 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v98);
            }
            else {
              uint64_t v99 = 0;
            }
            float32x4_t v100 = (void *)(v98 + 8 * v95);
            void *v100 = v92;
            float32x4_t v94 = v100 + 1;
            float32x4_t v101 = *v90;
            float32x4_t v102 = (void *)*v89;
            if (*v90 != (void *)*v89)
            {
              do
              {
                uint64_t v103 = *--v101;
                *--float32x4_t v100 = v103;
              }
              while (v101 != v102);
              float32x4_t v101 = (void *)*v89;
            }
            *float32x4_t v89 = v100;
            void *v90 = v94;
            void *v91 = v98 + 8 * v99;
            if (v101) {
              operator delete(v101);
            }
          }
          else
          {
            void *v93 = v92;
            float32x4_t v94 = v93 + 1;
          }
          void *v90 = v94;
          (**v92)(v92);
          ++v87;
          uint64_t v84 = *v82;
          uint64_t v104 = v82[1] - *v82;
          unint64_t v86 = v104 >> 3;
          if ((uint64_t)v87 >= (int)((unint64_t)v104 >> 3)) {
            goto LABEL_88;
          }
        }
        goto LABEL_107;
      }
LABEL_88:
      *(unsigned char *)(a2 + v79) = 1;
      char v81 = v121;
    }
    char v80 = 0;
    uint64_t v79 = 1;
  }
  while ((v81 & 1) != 0);
  uint64_t v105 = 0;
  char v106 = 1;
  do
  {
    char v107 = v106;
    uint64_t v108 = a1 + 24 * v105;
    uint64_t v109 = *(void *)(v108 + 1304);
    float32x4_t v110 = *(const HALS_Stream ***)(v108 + 1312);
    unint64_t v111 = 126 - 2 * __clz(((uint64_t)v110 - v109) >> 3);
    if (v110 == (const HALS_Stream **)v109) {
      uint64_t v112 = 0;
    }
    else {
      uint64_t v112 = v111;
    }
    std::__introsort<std::_ClassicAlgPolicy,HALS_IOA2Device::_UpdateStreams(std::array<BOOL,2ul> &)::$_0 &,HALS_IOA2Stream **,false>(v109, v110, v112, 1);
    char v106 = 0;
    uint64_t v105 = 1;
  }
  while ((v107 & 1) != 0);
  BOOL v113 = *(void *)(a1 + 1312) == *(void *)(a1 + 1304) && *(void *)(a1 + 1336) != *(void *)(a1 + 1328);
  *(unsigned char *)(a1 + 432) = v113;
  operator delete(__p);
  for (uint64_t k = 0; k != -48; k -= 24)
  {
    float32x4_t v115 = *(void **)((char *)&v124 + k + 8);
    if (v115)
    {
      *(void *)((char *)&v125 + k) = v115;
      operator delete(v115);
    }
  }
  for (uint64_t m = 0; m != -48; m -= 24)
  {
    float32x4_t v117 = *(void **)((char *)&v132 + m + 8);
    if (v117)
    {
      *(void *)((char *)&v133 + m) = v117;
      operator delete(v117);
    }
  }
}

void sub_1BAC7145C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  operator delete(__p);
  uint64_t v28 = 0;
  while (1)
  {
    unint64_t v29 = *(void **)((char *)&a20 + v28);
    if (v29)
    {
      *(uint64_t *)((char *)&a21 + v28) = (uint64_t)v29;
      operator delete(v29);
    }
    v28 -= 24;
    if (v28 == -48)
    {
      uint64_t v30 = 0;
      uint64_t v31 = v27 - 144;
      while (1)
      {
        unsigned int v32 = *(void **)(v31 + v30 + 24);
        if (v32)
        {
          *(void *)(v31 + v30 + 32) = v32;
          operator delete(v32);
        }
        v30 -= 24;
        if (v30 == -48) {
          JUMPOUT(0x1BAC7150CLL);
        }
      }
    }
  }
}

void HALS_IOA2Device::_UpdateControls(HALS_IOA2Device *this, BOOL *a2)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  uint64_t v4 = *((void *)this + 169);
  uint64_t v5 = *((void *)this + 170) - v4;
  uint64_t v6 = v5 >> 3;
  if ((int)(v5 >> 3) >= 1)
  {
    uint64_t v7 = ((unint64_t)v5 >> 3);
    do
    {
      if (!v6) {
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      }
      unsigned int v8 = *(_DWORD *)(*(void *)v4 + 60);
      if (v8 <= 1) {
        *(unsigned char *)(*(void *)v4 + 13) = v8;
      }
      v4 += 8;
      --v6;
      --v7;
    }
    while (v7);
  }
  *(void *)AudioObjectPropertyAddress buf = 0;
  HALB_UCObject::CopyProperty_CFArray((const __CFDictionary **)this + 226, @"controls", (const __CFArray **)buf);
  CFArrayRef v79 = *(CFArrayRef *)buf;
  __int16 v80 = 1;
  if (*(void *)buf && (int Count = CFArrayGetCount(*(CFArrayRef *)buf), Count >= 1))
  {
    uint64_t v71 = 0;
    unsigned int v11 = 0;
    *(void *)&long long v10 = 136315394;
    long long v73 = v10;
    unint64_t v74 = (uint64_t *)a2;
    do
    {
      uint64_t v77 = 0;
      __int16 v78 = 1;
      CACFArray::GetCACFDictionary(&v79, v11, (CACFDictionary *)&v77);
      if (v77)
      {
        unsigned int v76 = 0;
        if (CACFDictionary::GetUInt32(v77, @"control ID", &v76))
        {
          unsigned int v12 = 0;
          uint64_t v13 = *((void *)this + 169);
          do
          {
            if ((*((void *)this + 170) - v13) >> 3 <= (unint64_t)v12)
            {
              unsigned int v83 = 0;
              uint64_t v81 = v77;
              __int16 v82 = 0;
              uint64_t v75 = 0;
              if (!v77 || CACFDictionary::GetUInt32(v77, @"class", &v83))
              {
                CACFDictionary::~CACFDictionary((CACFDictionary *)&v81);
                unsigned int v83 = 0;
                uint64_t v81 = v77;
                __int16 v82 = 0;
                if (!v77 || CACFDictionary::GetUInt32(v77, @"base class", &v83))
                {
                  CACFDictionary::~CACFDictionary((CACFDictionary *)&v81);
                  unsigned int v83 = 0;
                  uint64_t v81 = v77;
                  __int16 v82 = 0;
                  if (!v77 || CACFDictionary::GetUInt32(v77, @"scope", &v83))
                  {
                    CACFDictionary::~CACFDictionary((CACFDictionary *)&v81);
                    unsigned int v83 = 0;
                    uint64_t v81 = v77;
                    __int16 v82 = 0;
                    if (!v77 || CACFDictionary::GetUInt32(v77, @"element", &v83))
                    {
                      CACFDictionary::~CACFDictionary((CACFDictionary *)&v81);
                      operator new();
                    }
                    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)AudioObjectPropertyAddress buf = v73;
                      *(void *)&uint8_t buf[4] = "HALS_IOA2UCDevice.cpp";
                      LOWORD(v85[0]) = 1024;
                      *(_DWORD *)((char *)v85 + 2) = 872;
                      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetControlInfoByIndex_Element: there is no control scope", buf, 0x12u);
                    }
                    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
                    *(void *)exceptiouint64_t n = off_1F148A5D8;
                    exception[2] = 1852797029;
                  }
                  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)AudioObjectPropertyAddress buf = v73;
                    *(void *)&uint8_t buf[4] = "HALS_IOA2UCDevice.cpp";
                    LOWORD(v85[0]) = 1024;
                    *(_DWORD *)((char *)v85 + 2) = 860;
                    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetControlInfoByIndex_Class: there is no control scope", buf, 0x12u);
                  }
                  unsigned int v18 = __cxa_allocate_exception(0x10uLL);
                  *(void *)unsigned int v18 = off_1F148A5D8;
                  void v18[2] = 1852797029;
                }
                if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)AudioObjectPropertyAddress buf = v73;
                  *(void *)&uint8_t buf[4] = "HALS_IOA2UCDevice.cpp";
                  LOWORD(v85[0]) = 1024;
                  *(_DWORD *)((char *)v85 + 2) = 836;
                  _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetControlInfoByIndex_BaseClass: there is no control base class", buf, 0x12u);
                }
                uint64_t v17 = __cxa_allocate_exception(0x10uLL);
                *(void *)uint64_t v17 = off_1F148A5D8;
                v17[2] = 1852797029;
              }
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = v73;
                *(void *)&uint8_t buf[4] = "HALS_IOA2UCDevice.cpp";
                LOWORD(v85[0]) = 1024;
                *(_DWORD *)((char *)v85 + 2) = 848;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetControlInfoByIndex_Class: there is no control class", buf, 0x12u);
              }
              char v16 = __cxa_allocate_exception(0x10uLL);
              *(void *)char v16 = off_1F148A5D8;
              v16[2] = 1852797029;
            }
            uint64_t v14 = *(void *)(v13 + 8 * v12++);
            if (v14) {
              BOOL v15 = *(_DWORD *)(v14 + 72) == v76;
            }
            else {
              BOOL v15 = 0;
            }
          }
          while (!v15);
          *(unsigned char *)(v14 + 13) = 1;
        }
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v77);
      ++v11;
    }
    while (v11 != Count);
  }
  else
  {
    uint64_t v71 = 0;
  }
  if (((*((void *)this + 56) & 0xFF00000000) == 0 || *((void *)this + 56) != 1)
    && *((void *)this + 164) != *((void *)this + 163))
  {
    *(void *)AudioObjectPropertyAddress buf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
    *(_WORD *)&uint8_t buf[8] = 257;
    operator new();
  }
  unint64_t v20 = *((void *)this + 170) - *((void *)this + 169);
  if ((int)(v20 >> 3) >= 1)
  {
    uint64_t v21 = (v20 >> 3) + 1;
    while (1)
    {
      unint64_t v22 = (v21 - 2);
      uint64_t v23 = *((void *)this + 169);
      if (v22 >= (*((void *)this + 170) - v23) >> 3) {
        break;
      }
      uint64_t v24 = *(HALS_IOA2Control **)(v23 + 8 * v22);
      if (*((unsigned char *)v24 + 13))
      {
        HALS_IOA2Control::SynchronizeWithRegistry(v24);
      }
      else
      {
        *a2 = 1;
        (*(void (**)(HALS_IOA2Control *))(*(void *)v24 + 8))(v24);
        HALS_ObjectMap::ObjectIsDead(v24, v25);
        uint64_t v26 = *((void *)this + 169) + 8 * v22;
        uint64_t v27 = *((void *)this + 170);
        uint64_t v28 = v27 - (v26 + 8);
        if (v27 != v26 + 8) {
          memmove((void *)v26, (const void *)(v26 + 8), v27 - (v26 + 8));
        }
        *((void *)this + 170) = v26 + v28;
      }
      if ((unint64_t)--v21 <= 1) {
        goto LABEL_57;
      }
    }
LABEL_114:
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  }
LABEL_57:
  uint64_t v29 = -v71;
  if (v71)
  {
    uint64_t v30 = v29 >> 3;
    if ((int)(v29 >> 3) >= 1)
    {
      uint64_t v31 = 0;
      uint64_t v32 = (int)(v29 >> 3);
      if (v32 <= 1) {
        uint64_t v33 = 1;
      }
      else {
        uint64_t v33 = v32;
      }
      do
      {
        *a2 = 1;
        if (v31 == v30) {
          goto LABEL_114;
        }
        int v34 = *(void (****)(void))(v71 + 8 * v31);
        (**v34)(v34);
        long long v35 = (void *)*((void *)this + 170);
        unint64_t v36 = *((void *)this + 171);
        if ((unint64_t)v35 >= v36)
        {
          uint64_t v38 = *((void *)this + 169);
          uint64_t v39 = ((uint64_t)v35 - v38) >> 3;
          if ((unint64_t)(v39 + 1) >> 61) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v40 = v36 - v38;
          uint64_t v41 = v40 >> 2;
          if (v40 >> 2 <= (unint64_t)(v39 + 1)) {
            uint64_t v41 = v39 + 1;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v41;
          }
          if (v42) {
            unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v42);
          }
          else {
            uint64_t v43 = 0;
          }
          float32x4_t v44 = (void *)(v42 + 8 * v39);
          *float32x4_t v44 = v34;
          uint64_t v37 = v44 + 1;
          uint64_t v45 = (char *)*((void *)this + 170);
          float32x4_t v46 = (char *)*((void *)this + 169);
          if (v45 != v46)
          {
            do
            {
              uint64_t v47 = *((void *)v45 - 1);
              v45 -= 8;
              *--float32x4_t v44 = v47;
            }
            while (v45 != v46);
            uint64_t v45 = (char *)*((void *)this + 169);
          }
          *((void *)this + 169) = v44;
          *((void *)this + 170) = v37;
          *((void *)this + 171) = v42 + 8 * v43;
          if (v45) {
            operator delete(v45);
          }
        }
        else
        {
          *long long v35 = v34;
          uint64_t v37 = v35 + 1;
        }
        *((void *)this + 170) = v37;
      }
      while (++v31 != v33);
    }
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 173));
  *((void *)this + 172) = (char *)this + 1384;
  *((void *)this + 174) = 0;
  *((void *)this + 173) = 0;
  long long v48 = (char ***)((char *)this + 1408);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 176));
  *((void *)this + 175) = (char *)this + 1408;
  *((void *)this + 177) = 0;
  *((void *)this + 176) = 0;
  uint64_t v49 = *((void *)this + 169);
  *(void *)&long long v73 = *((void *)this + 170);
  if (v49 == (void)v73) {
    goto LABEL_110;
  }
  float32x4_t v72 = (uint64_t **)((char *)this + 1376);
  do
  {
    int v50 = *(_DWORD *)(*(void *)v49 + 48);
    int v51 = *(_DWORD *)(*(void *)v49 + 52);
    int v52 = *(_DWORD *)(*(void *)v49 + 16);
    *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(*(void *)v49 + 20);
    *(_DWORD *)&uint8_t buf[4] = v50;
    LODWORD(v75) = v50;
    *(_DWORD *)&uint8_t buf[8] = v51;
    v85[0] = v52;
    int v53 = std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::tuple<unsigned int,unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::less<std::tuple<unsigned int,unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>>>::__emplace_unique_key_args<std::tuple<unsigned int,unsigned int,unsigned int>,std::pair<std::tuple<unsigned int,unsigned int,unsigned int> const,unsigned int>>(v72, (int *)buf, buf);
    if (!*(_DWORD *)(*(void *)v49 + 168)) {
      goto LABEL_104;
    }
    unint64_t v74 = &v71;
    MEMORY[0x1F4188790](v53);
    char v56 = (char *)&v71 - ((v55 + 15) & 0x7FFFFFFF0);
    unsigned int v57 = *(_DWORD *)(*(void *)v49 + 168);
    uint64_t v58 = v54 >= v57 ? v57 : v54;
    if (!v58) {
      goto LABEL_104;
    }
    memcpy(v56, (const void *)(*(void *)v49 + 172), 4 * v58);
    for (uint64_t i = 0; i != v58; ++i)
    {
      int v60 = *(_DWORD *)(*(void *)v49 + 16);
      *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)&v56[4 * i];
      *(_DWORD *)&uint8_t buf[4] = v75;
      *(_DWORD *)&uint8_t buf[8] = v51;
      v85[0] = v60;
      uint64_t v61 = (char **)((char *)this + 1408);
      unint64_t v62 = (char **)((char *)this + 1408);
      if (!*v48) {
        goto LABEL_100;
      }
      uint64_t v63 = *((void *)this + 181);
      if (!v63) {
LABEL_113:
      }
        std::__throw_bad_function_call[abi:ne180100]();
      uint64_t v61 = (char **)((char *)this + 1408);
      unint64_t v62 = *v48;
      while ((*(unsigned int (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v63 + 48))(v63, buf, (uint64_t)v62 + 28))
      {
        uint64_t v64 = *v62;
        uint64_t v61 = v62;
        if (!*v62) {
          goto LABEL_100;
        }
LABEL_97:
        uint64_t v63 = *((void *)this + 181);
        unint64_t v62 = (char **)v64;
        if (!v63) {
          goto LABEL_113;
        }
      }
      uint64_t v65 = *((void *)this + 181);
      if (!v65) {
        goto LABEL_113;
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v65 + 48))(v65, (uint64_t)v62 + 28, buf))
      {
        uint64_t v61 = v62 + 1;
        uint64_t v64 = v62[1];
        if (!v64) {
          goto LABEL_100;
        }
        goto LABEL_97;
      }
      if (!*v61)
      {
LABEL_100:
        uint64_t v66 = (char *)operator new(0x30uLL);
        *(void *)(v66 + 28) = *(void *)buf;
        int v67 = v85[0];
        *((_DWORD *)v66 + 9) = *(_DWORD *)&buf[8];
        *((_DWORD *)v66 + 10) = v67;
        *(void *)uint64_t v66 = 0;
        *((void *)v66 + 1) = 0;
        *((void *)v66 + 2) = v62;
        *uint64_t v61 = v66;
        uint64_t v68 = **((void **)this + 175);
        if (v68)
        {
          *((void *)this + 175) = v68;
          uint64_t v66 = *v61;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 176), (uint64_t *)v66);
        ++*((void *)this + 177);
      }
    }
LABEL_104:
    v49 += 8;
  }
  while (v49 != (void)v73);
  uint64_t v69 = *((void *)this + 169);
  uint64_t v70 = *((void *)this + 170);
  if (v69 != v70)
  {
    while (*(_DWORD *)(*(void *)v69 + 20) != 1702259059)
    {
      v69 += 8;
      if (v69 == v70) {
        goto LABEL_110;
      }
    }
    *((_DWORD *)this + 112) = *(_DWORD *)(*(void *)v69 + 60);
    *((unsigned char *)this + 452) = 1;
  }
LABEL_110:
  CACFArray::~CACFArray((CACFArray *)&v79);
  if (v71) {
    operator delete((void *)v71);
  }
}

void sub_1BAC72230(_Unwind_Exception *a1)
{
  MEMORY[0x1C1859840](v1, 0x10F1C404AE012DFLL);
  CACFDictionary::~CACFDictionary((CACFDictionary *)(v2 - 128));
  CACFArray::~CACFArray((CACFArray *)(v2 - 168));
  uint64_t v4 = *(void **)(v2 - 240);
  if (v4) {
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void HALS_IOA2Device::_MapIOBuffers(HALS_IOA2Device *this)
{
  uint64_t v1 = 0;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  char v2 = 1;
  do
  {
    char v17 = v2;
    uint64_t v3 = (char *)this + 24 * v1;
    uint64_t v4 = *((void *)v3 + 163);
    if (*((void *)v3 + 164) != v4)
    {
      unint64_t v5 = 0;
      uint64_t v6 = (uint64_t *)(v3 + 1304);
      uint64_t v7 = v3 + 1312;
      unsigned int v8 = 1;
      do
      {
        uint64_t v9 = *(void *)(v4 + 8 * v5);
        uint64_t v10 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v9 + 48));
        uint64_t v12 = v10;
        if (v10)
        {
          int v13 = *(_DWORD *)(v9 + 60);
          CFArrayRef v14 = HALS_IOA2UCDevice::CopyStreamDictionaryByID((const __CFDictionary **)(v10 + 1808), v13);
          CFArrayRef v18 = v14;
          __int16 v19 = 1;
          if (!v14)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v21 = "HALS_IOA2UCDevice.cpp";
              __int16 v22 = 1024;
              int v23 = 708;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::MapIOBufferForStream: no stream for the given ID", buf, 0x12u);
            }
            exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
            *(void *)exceptiouint64_t n = off_1F148A5D8;
            exception[2] = 1852797029;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 1;
          CACFDictionary::GetUInt32((uint64_t)v14, @"buffer mapping options", (unsigned int *)buf);
          *(void *)(v9 + 128) = HALB_UCObject::MapMemory((HALB_UCObject *)(v12 + 1808), v13 + 0x10000000, *(unsigned int *)buf, (unsigned int *)(v9 + 136));
          CACFDictionary::~CACFDictionary((CACFDictionary *)&v18);
        }
        HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v12, v11);
        unint64_t v5 = v8;
        uint64_t v4 = *v6;
        ++v8;
      }
      while (v5 < (*v7 - *v6) >> 3);
    }
    char v2 = 0;
    uint64_t v1 = 1;
  }
  while ((v17 & 1) != 0);
}

void sub_1BAC724D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  HALS_ObjectMap::ReleaseObject(v3, v5);
  _Unwind_Resume(a1);
}

void HALS_IOA2Device::_MapBlockControlBuffers(HALS_IOA2Device *this, HALS_IOA2Device *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (this != a2)
  {
    for (uint64_t i = this; i != a2; uint64_t i = (HALS_IOA2Device *)((char *)i + 8))
    {
      uint64_t v4 = *(void *)i;
      int v5 = *(_DWORD *)(*(void *)i + 20);
      int v6 = *(_DWORD *)(*(void *)i + 24);
      if (v5 == v6)
      {
        if (v5 != 1936028002 && v5 != 1651273579) {
          continue;
        }
      }
      else if (v5 != 1651273579 && v5 != 1936028002 && v6 != 1651273579 && v6 != 1936028002)
      {
        continue;
      }
      uint64_t v11 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v4 + 56));
      uint64_t v13 = v11;
      int v14 = *(_DWORD *)(v4 + 20);
      int v15 = *(_DWORD *)(v4 + 24);
      if (v14 == v15)
      {
        if (v14 == 1936028002 || v14 == 1651273579) {
          goto LABEL_37;
        }
      }
      else if (v14 == 1651273579 || v14 == 1936028002 || v15 == 1651273579 || v15 == 1936028002)
      {
LABEL_37:
        if (*(void *)(v4 + 104)) {
          BOOL v20 = 1;
        }
        else {
          BOOL v20 = v11 == 0;
        }
        if (!v20)
        {
          uint64_t v21 = *(void *)(v4 + 80);
          int v22 = *(_DWORD *)(v4 + 72);
          uint64_t v24 = v21;
          __int16 v25 = 0;
          if (!v21)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v27 = "HALS_IOA2UCDevice.cpp";
              __int16 v28 = 1024;
              int v29 = 1130;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::MapBlockControlBuffer: no control for the given ID", buf, 0x12u);
            }
            exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
            *(void *)exceptiouint64_t n = off_1F148A5D8;
            exception[2] = 1852797029;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 1;
          CACFDictionary::GetUInt32(v21, @"mapping options", (unsigned int *)buf);
          *(void *)(v4 + 104) = HALB_UCObject::MapMemory((HALB_UCObject *)(v13 + 1808), v22 & 0xFFFFFFF | 0x30000000u, *(unsigned int *)buf, (unsigned int *)(v4 + 112));
          CACFDictionary::~CACFDictionary((CACFDictionary *)&v24);
        }
      }
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v13, v12);
    }
  }
}

void sub_1BAC72798(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAC727A4);
  }
  __clang_call_terminate(a1);
}

const __CFArray *HALS_IOA2Device::_MapDataExchangeBlocks(HALS_IOA2Device *this)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 239))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
      __int16 v39 = 1024;
      int v40 = 2435;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::_MapDataExchangeBlocks: the size mDataExchangeBlockInfoMap is non-zero", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  unsigned int v2 = 0;
  uint64_t v3 = (CFArrayRef *)((char *)this + 1880);
  uint64_t v4 = (const __CFDictionary **)((char *)this + 1808);
  uint64_t v27 = (void *)((char *)this + 1904);
  CFStringRef v5 = @"block ID";
  while (1)
  {
    CFArrayRef result = *v3;
    if (*v3) {
      CFArrayRef result = (const __CFArray *)CFArrayGetCount(result);
    }
    if (v2 >= result) {
      return result;
    }
    uint64_t v32 = 0;
    if (CACFArray::GetDictionary(v3, v2, &v32))
    {
      uint64_t v30 = v32;
      __int16 v31 = 0;
      unsigned int v29 = 0;
      if (CACFDictionary::GetUInt32((uint64_t)v32, v5, &v29))
      {
        unsigned int v7 = v29;
        if (v29 >> 28)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
            __int16 v39 = 1024;
            int v40 = 2448;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::_MapDataExchangeBlocks: driver returned data exchange block ID that is larger than can fit in the lower 28 bits of a 32 bit integer", buf, 0x12u);
          }
          uint64_t v24 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v24 = off_1F148A5D8;
          v24[2] = 1852797029;
        }
        unsigned int v28 = 0;
        CFArrayRef theArray = 0;
        HALB_UCObject::CopyProperty_CFArray(v4, @"data exchange blocks", &theArray);
        *(void *)AudioObjectPropertyAddress buf = theArray;
        *(_WORD *)&uint8_t buf[8] = 1;
        if (theArray && (unsigned int Count = CFArrayGetCount(theArray)) != 0)
        {
          for (unsigned int i = 0; i < Count; ++i)
          {
            CFArrayRef theArray = 0;
            __int16 v37 = 0;
            CACFArray::GetCACFDictionary((CFArrayRef *)buf, i, (CACFDictionary *)&theArray);
            if (theArray
              && ((unsigned int v35 = 0, UInt32 = CACFDictionary::GetUInt32((uint64_t)theArray, @"block ID", &v35), v35 == v7)
                ? (int v11 = UInt32)
                : (int v11 = 0),
                  v11 == 1 && theArray))
            {
              CFRetain(theArray);
              CFArrayRef v12 = theArray;
            }
            else
            {
              CFArrayRef v12 = 0;
            }
            CACFDictionary::~CACFDictionary((CACFDictionary *)&theArray);
            if (v12) {
              break;
            }
          }
        }
        else
        {
          CFArrayRef v12 = 0;
        }
        CACFArray::~CACFArray((CACFArray *)buf);
        CFArrayRef v33 = v12;
        __int16 v34 = 1;
        if (!v12)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_IOA2UCDevice.cpp";
            __int16 v39 = 1024;
            int v40 = 1224;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::MapDataExchangeBlockBuffer: no data exchange block for the given ID", buf, 0x12u);
          }
          __int16 v25 = __cxa_allocate_exception(0x10uLL);
          *(void *)__int16 v25 = off_1F148A5D8;
          CFDictionaryRef v25[2] = 1852797029;
        }
        CFStringRef v13 = v5;
        *(_DWORD *)AudioObjectPropertyAddress buf = 1;
        CACFDictionary::GetUInt32((uint64_t)v12, @"buffer mapping options", (unsigned int *)buf);
        int v14 = v4;
        uint64_t v15 = HALB_UCObject::MapMemory((HALB_UCObject *)v4, v7 + 0x20000000, *(unsigned int *)buf, &v28);
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v33);
        unsigned int v16 = v28;
        unsigned int v17 = v29;
        CFArrayRef v18 = v27;
        __int16 v19 = v27;
        uint64_t v20 = *v27;
        if (*v27)
        {
          while (1)
          {
            while (1)
            {
              __int16 v19 = (void *)v20;
              unsigned int v21 = *(_DWORD *)(v20 + 32);
              if (v29 >= v21) {
                break;
              }
              uint64_t v20 = *v19;
              CFArrayRef v18 = v19;
              if (!*v19) {
                goto LABEL_32;
              }
            }
            if (v21 >= v29) {
              break;
            }
            uint64_t v20 = v19[1];
            if (!v20)
            {
              CFArrayRef v18 = v19 + 1;
              goto LABEL_32;
            }
          }
        }
        else
        {
LABEL_32:
          int v22 = operator new(0x38uLL);
          v22[8] = v17;
          *((void *)v22 + 5) = v15;
          v22[12] = v16;
          *(void *)int v22 = 0;
          *((void *)v22 + 1) = 0;
          *((void *)v22 + 2) = v19;
          *CFArrayRef v18 = v22;
          uint64_t v23 = **((void **)this + 237);
          if (v23)
          {
            *((void *)this + 237) = v23;
            int v22 = (_DWORD *)*v18;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 238), (uint64_t *)v22);
          ++*((void *)this + 239);
        }
        uint64_t v4 = v14;
        CFStringRef v5 = v13;
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v30);
    }
    ++v2;
  }
}

void sub_1BAC72C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  CACFArray::~CACFArray((CACFArray *)va1);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,HALS_IOA2Device::_UpdateStreams(std::array<BOOL,2ul> &)::$_0 &,HALS_IOA2Stream **,false>(uint64_t result, const HALS_Stream **a2, uint64_t a3, char a4)
{
  uint64_t v9 = (const HALS_Stream **)result;
LABEL_2:
  float32x4_t v91 = a2 - 2;
  float32x4_t v93 = a2 - 1;
  float32x4_t v90 = a2 - 3;
  uint64_t v10 = v9;
  while (1)
  {
    uint64_t v9 = v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    uint64_t v12 = a2 - v10;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return result;
        case 2:
          CFArrayRef result = StreamLessThan(*v93, *v9);
          if (result)
          {
            uint64_t v38 = *v9;
            void *v9 = *v93;
            void *v93 = v38;
          }
          break;
        case 3:
          CFArrayRef result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9, v9 + 1, v93);
          break;
        case 4:
          CFArrayRef result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9, v9 + 1, v9 + 2, v93);
          break;
        case 5:
          __int16 v39 = v9 + 2;
          int v40 = v9 + 3;
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9, v9 + 1, v9 + 2, v9 + 3);
          CFArrayRef result = StreamLessThan(*v93, v9[3]);
          if (result)
          {
            uint64_t v41 = *v40;
            *int v40 = *v93;
            void *v93 = v41;
            CFArrayRef result = StreamLessThan(*v40, *v39);
            if (result)
            {
              unint64_t v42 = *v39;
              uint64_t v43 = *v40;
              void *v39 = *v40;
              *int v40 = v42;
              CFArrayRef result = StreamLessThan(v43, v9[1]);
              if (result)
              {
                uint64_t v45 = v9[1];
                float32x4_t v44 = v9[2];
                float32x4_t v46 = *v9;
                v9[1] = v44;
                _OWORD v9[2] = v45;
                CFArrayRef result = StreamLessThan(v44, v46);
                if (result) {
                  *(int8x16_t *)uint64_t v9 = vextq_s8(*(int8x16_t *)v9, *(int8x16_t *)v9, 8uLL);
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v9 == a2) {
        return result;
      }
      int64_t v57 = (unint64_t)(v12 - 2) >> 1;
      int64_t v58 = v57;
      float32x4_t v92 = a2;
      do
      {
        int64_t v59 = v58;
        if (v57 >= v58)
        {
          uint64_t v60 = (2 * v58) | 1;
          uint64_t v61 = &v9[v60];
          if (2 * v58 + 2 < v12)
          {
            BOOL v62 = StreamLessThan(*v61, v61[1]);
            if (v62) {
              ++v61;
            }
            int64_t v57 = (unint64_t)(v12 - 2) >> 1;
            if (v62) {
              uint64_t v60 = 2 * v59 + 2;
            }
          }
          uint64_t v63 = &v9[v59];
          CFArrayRef result = StreamLessThan(*v61, *v63);
          if ((result & 1) == 0)
          {
            uint64_t v64 = *v63;
            do
            {
              uint64_t v65 = v63;
              uint64_t v63 = v61;
              const char *v65 = *v61;
              if (v57 < v60) {
                break;
              }
              uint64_t v66 = (2 * v60) | 1;
              uint64_t v61 = &v9[v66];
              uint64_t v67 = 2 * v60 + 2;
              if (v67 < v12)
              {
                BOOL v68 = StreamLessThan(*v61, v61[1]);
                if (v68) {
                  ++v61;
                }
                int64_t v57 = (unint64_t)(v12 - 2) >> 1;
                if (v68) {
                  uint64_t v66 = v67;
                }
              }
              CFArrayRef result = StreamLessThan(*v61, v64);
              uint64_t v60 = v66;
            }
            while (!result);
            char *v63 = v64;
          }
        }
        int64_t v58 = v59 - 1;
      }
      while (v59);
      uint64_t v69 = (unint64_t)v11 >> 3;
      uint64_t v70 = v92;
      while (2)
      {
        uint64_t v71 = v70;
        uint64_t v72 = 0;
        long long v73 = *v9;
        unint64_t v74 = v9;
        do
        {
          uint64_t v75 = &v74[v72 + 1];
          uint64_t v76 = (2 * v72) | 1;
          uint64_t v77 = 2 * v72 + 2;
          if (v77 < v69)
          {
            CFArrayRef result = StreamLessThan(*v75, v74[v72 + 2]);
            if (result)
            {
              ++v75;
              uint64_t v76 = v77;
            }
          }
          *unint64_t v74 = *v75;
          unint64_t v74 = v75;
          uint64_t v72 = v76;
        }
        while (v76 <= (uint64_t)((unint64_t)(v69 - 2) >> 1));
        __int16 v78 = v71 - 1;
        if (v75 != v78)
        {
          *uint64_t v75 = *v78;
          uint64_t v70 = v78;
          *__int16 v78 = v73;
          uint64_t v79 = (char *)v75 - (char *)v9 + 8;
          if (v79 >= 9)
          {
            unint64_t v80 = (((unint64_t)v79 >> 3) - 2) >> 1;
            uint64_t v81 = &v9[v80];
            CFArrayRef result = StreamLessThan(*v81, *v75);
            if (result)
            {
              long long v73 = *v75;
              do
              {
                __int16 v82 = v75;
                uint64_t v75 = v81;
                uint64_t *v82 = *v81;
                if (!v80) {
                  break;
                }
                unint64_t v80 = (v80 - 1) >> 1;
                uint64_t v81 = &v9[v80];
                CFArrayRef result = StreamLessThan(*v81, v73);
              }
              while ((result & 1) != 0);
LABEL_117:
              *uint64_t v75 = v73;
            }
          }
          if (v69-- <= 2) {
            return result;
          }
          continue;
        }
        break;
      }
      uint64_t v70 = v78;
      goto LABEL_117;
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    int v14 = &v9[(unint64_t)v12 >> 1];
    if ((unint64_t)v11 < 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v14, v9, v93);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9, v14, v93);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9 + 1, v14 - 1, v91);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9 + 2, &v9[v13 + 1], v90);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v14 - 1, v14, &v9[v13 + 1]);
      uint64_t v15 = *v9;
      void *v9 = *v14;
      HALS_ObjectMap *v14 = v15;
    }
    --a3;
    if ((a4 & 1) != 0 || StreamLessThan(*(v9 - 1), *v9))
    {
      unsigned int v16 = *v9;
      unsigned int v17 = v9;
      do
      {
        CFArrayRef v18 = v17;
        __int16 v19 = v17[1];
        ++v17;
      }
      while (StreamLessThan(v19, v16));
      uint64_t v20 = a2;
      if (v18 == v9)
      {
        do
        {
          if (v17 >= a2) {
            break;
          }
          int v22 = *--a2;
        }
        while (!StreamLessThan(v22, v16));
      }
      else
      {
        do
          unsigned int v21 = *--a2;
        while (!StreamLessThan(v21, v16));
      }
      if (v17 < a2)
      {
        uint64_t v23 = v17;
        uint64_t v24 = a2;
        do
        {
          __int16 v25 = *v23;
          *uint64_t v23 = *v24;
          *uint64_t v24 = v25;
          do
          {
            CFArrayRef v18 = v23;
            uint64_t v26 = v23[1];
            ++v23;
          }
          while (StreamLessThan(v26, v16));
          do
            uint64_t v27 = *--v24;
          while (!StreamLessThan(v27, v16));
        }
        while (v23 < v24);
      }
      if (v18 != v9) {
        void *v9 = *v18;
      }
      *CFArrayRef v18 = v16;
      BOOL v4 = v17 >= a2;
      a2 = v20;
      if (!v4) {
        goto LABEL_31;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HALS_IOA2Device::_UpdateStreams(std::array<BOOL,2ul> &)::$_0 &,HALS_IOA2Stream **>(v9, v18);
      uint64_t v10 = v18 + 1;
      CFArrayRef result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HALS_IOA2Device::_UpdateStreams(std::array<BOOL,2ul> &)::$_0 &,HALS_IOA2Stream **>(v18 + 1, v20);
      if (result)
      {
        a2 = v18;
        if (v28) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v28)
      {
LABEL_31:
        CFArrayRef result = std::__introsort<std::_ClassicAlgPolicy,HALS_IOA2Device::_UpdateStreams(std::array<BOOL,2ul> &)::$_0 &,HALS_IOA2Stream **,false>(v9, v18, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = v18 + 1;
      }
    }
    else
    {
      unsigned int v29 = *v9;
      CFArrayRef result = StreamLessThan(*v9, *v93);
      if (result)
      {
        uint64_t v10 = v9;
        do
        {
          uint64_t v30 = v10[1];
          ++v10;
          CFArrayRef result = StreamLessThan(v29, v30);
        }
        while ((result & 1) == 0);
      }
      else
      {
        __int16 v31 = v9 + 1;
        do
        {
          uint64_t v10 = v31;
          if (v31 >= a2) {
            break;
          }
          ++v31;
          CFArrayRef result = StreamLessThan(v29, *v10);
        }
        while (!result);
      }
      uint64_t v32 = a2;
      if (v10 < a2)
      {
        uint64_t v32 = a2;
        do
        {
          CFArrayRef v33 = *--v32;
          CFArrayRef result = StreamLessThan(v29, v33);
        }
        while ((result & 1) != 0);
      }
      while (v10 < v32)
      {
        __int16 v34 = *v10;
        *uint64_t v10 = *v32;
        __CFDictionary *v32 = v34;
        do
        {
          unsigned int v35 = v10[1];
          ++v10;
        }
        while (!StreamLessThan(v29, v35));
        do
        {
          unint64_t v36 = *--v32;
          CFArrayRef result = StreamLessThan(v29, v36);
        }
        while ((result & 1) != 0);
      }
      __int16 v37 = v10 - 1;
      BOOL v4 = v10 - 1 >= v9;
      BOOL v5 = v10 - 1 == v9;
      if (v10 - 1 != v9) {
        void *v9 = *v37;
      }
      a4 = 0;
      void *v37 = v29;
    }
  }
  uint64_t v47 = v9 + 1;
  BOOL v49 = v9 == a2 || v47 == a2;
  if (a4)
  {
    if (!v49)
    {
      uint64_t v50 = 0;
      int v51 = v9;
      do
      {
        int v53 = *v51;
        int v52 = v51[1];
        int v51 = v47;
        CFArrayRef result = StreamLessThan(v52, v53);
        if (result)
        {
          unsigned int v54 = *v51;
          uint64_t v55 = v50;
          while (1)
          {
            *(const HALS_Stream **)((char *)v9 + v55 + 8) = *(const HALS_Stream **)((char *)v9 + v55);
            if (!v55) {
              break;
            }
            CFArrayRef result = StreamLessThan(v54, *(const HALS_Stream **)((char *)v9 + v55 - 8));
            v55 -= 8;
            if ((result & 1) == 0)
            {
              char v56 = (const HALS_Stream **)((char *)v9 + v55 + 8);
              goto LABEL_81;
            }
          }
          char v56 = v9;
LABEL_81:
          *char v56 = v54;
        }
        uint64_t v47 = v51 + 1;
        v50 += 8;
      }
      while (v51 + 1 != a2);
    }
  }
  else if (!v49)
  {
    do
    {
      uint64_t v85 = *v9;
      uint64_t v84 = v9[1];
      uint64_t v9 = v47;
      CFArrayRef result = StreamLessThan(v84, v85);
      if (result)
      {
        uint64_t v86 = *v9;
        unint64_t v87 = v9;
        do
        {
          uint64_t v88 = v87;
          float32x4_t v89 = *--v87;
          _DWORD *v88 = v89;
          CFArrayRef result = StreamLessThan(v86, *(v88 - 2));
        }
        while ((result & 1) != 0);
        _DWORD *v87 = v86;
      }
      uint64_t v47 = v9 + 1;
    }
    while (v9 + 1 != a2);
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HALS_IOA2Device::_UpdateStreams(std::array<BOOL,2ul> &)::$_0 &,HALS_IOA2Stream **>(const HALS_Stream **a1, const HALS_Stream **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (StreamLessThan(*(a2 - 1), *a1))
      {
        uint64_t v6 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v15 = a1 + 2;
      unsigned int v16 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1, a1 + 1, a1 + 2, a1 + 3);
      if (StreamLessThan(*(a2 - 1), a1[3]))
      {
        unsigned int v17 = *v16;
        *unsigned int v16 = *(a2 - 1);
        *(a2 - 1) = v17;
        if (StreamLessThan(*v16, *v15))
        {
          CFArrayRef v18 = *v15;
          __int16 v19 = *v16;
          *uint64_t v15 = *v16;
          *unsigned int v16 = v18;
          if (StreamLessThan(v19, a1[1]))
          {
            unsigned int v21 = a1[1];
            uint64_t v20 = a1[2];
            int v22 = *a1;
            a1[1] = v20;
            a1[2] = v21;
            if (StreamLessThan(v20, v22)) {
              *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v7 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1, a1 + 1, a1 + 2);
      uint64_t v8 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (StreamLessThan(*v8, *v7))
    {
      uint64_t v11 = *v8;
      uint64_t v12 = v9;
      while (1)
      {
        unint64_t v13 = (const HALS_Stream **)((char *)a1 + v12);
        *(const HALS_Stream **)((char *)a1 + v12 + 24) = *(const HALS_Stream **)((char *)a1 + v12 + 16);
        if (v12 == -16) {
          break;
        }
        v12 -= 8;
        if (!StreamLessThan(v11, v13[1]))
        {
          int v14 = (const HALS_Stream **)((char *)a1 + v12 + 24);
          goto LABEL_13;
        }
      }
      int v14 = a1;
LABEL_13:
      HALS_ObjectMap *v14 = v11;
      if (++v10 == 8) {
        return v8 + 1 == a2;
      }
    }
    uint64_t v7 = v8;
    v9 += 8;
    if (++v8 == a2) {
      return 1;
    }
  }
}

uint64_t std::vector<CAPropertyAddressList>::__init_with_size[abi:ne180100]<CAPropertyAddressList*,CAPropertyAddressList*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 59) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (void *)result;
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CAPropertyAddressList>>(a4);
    uint64_t v8 = v7;
    void *v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[32 * v9];
    unint64_t v13 = v7;
    int v14 = v7;
    v11[0] = v6 + 2;
    v11[1] = &v13;
    _OWORD v11[2] = &v14;
    char v12 = 0;
    if (a2 != a3)
    {
      int v10 = v7;
      do
      {
        *(void *)int v10 = 0;
        *((void *)v10 + 1) = 0;
        *((void *)v10 + 2) = 0;
        std::vector<CAPropertyAddress>::__init_with_size[abi:ne180100]<CAPropertyAddress*,CAPropertyAddress*>(v10, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
        *((void *)v10 + 3) = *(void *)(a2 + 24);
        int v10 = v14 + 32;
        v14 += 32;
        a2 += 32;
      }
      while (a2 != a3);
      uint64_t v8 = v10;
    }
    char v12 = 1;
    BOOL result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CAPropertyAddressList>,CAPropertyAddressList*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
    v6[1] = v8;
  }
  return result;
}

void sub_1BAC7375C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CAPropertyAddressList>,CAPropertyAddressList*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      uint64_t v4 = **(void **)(a1 + 16);
      do
      {
        uint64_t v6 = *(void **)(v4 - 32);
        v4 -= 32;
        BOOL v5 = v6;
        if (v6)
        {
          *(void *)(v2 - 24) = v5;
          operator delete(v5);
        }
        uint64_t v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void HALS_IOA2Device::_ClientDescriptionChanged(uint64_t a1)
{
  kern_return_t v9;
  mach_port_t v10;
  kern_return_t v11;
  _DWORD *exception;
  double valuePtr;
  unint64_t v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  kern_return_t v20;
  uint64_t input[3];

  input[2] = *MEMORY[0x1E4F143B8];
  buf[0] = 0;
  HALB_UCObject::CopyProperty_BOOL((const __CFDictionary **)(a1 + 1808), @"supports client description", (BOOL *)buf);
  if (!buf[0]) {
    return;
  }
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 728))(a1);
  unsigned int valuePtr = 0.0;
  int v14 = 0;
  if (*(void *)(a1 + 536) != v2)
  {
    uint64_t v3 = v2;
    CACFDictionary::GetUInt64(*(void *)(v2 + 8), @"kind", &v14);
    CFDictionaryRef v4 = *(const __CFDictionary **)(v3 + 8);
    if (v4)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v4, @"UsageCaseSampleRate");
      if (Value)
      {
        CFNumberRef v6 = Value;
        CFTypeID v7 = CFGetTypeID(Value);
        if (v7 == CFNumberGetTypeID()) {
          CFNumberGetValue(v6, kCFNumberFloat64Type, &valuePtr);
        }
      }
    }
    if (v14 != 5)
    {
      if (v14 == 4)
      {
        unint64_t v8 = 2;
        goto LABEL_14;
      }
      if (v14 != 2)
      {
        unint64_t v8 = 1;
        goto LABEL_14;
      }
    }
    unint64_t v8 = 3;
LABEL_14:
    int v14 = v8;
    goto LABEL_15;
  }
  unint64_t v8 = 0;
LABEL_15:
  uint64_t v9 = 1937010544;
  input[0] = v8;
  input[1] = vcvtd_n_u64_f64(valuePtr - (double)(unint64_t)floor(valuePtr), 0x20uLL)
           + (vcvtmd_u64_f64(valuePtr) << 32);
  int v10 = *(_DWORD *)(a1 + 1820);
  if (!v10
    || !*(unsigned char *)(a1 + 1842)
    || (uint64_t v9 = IOConnectCallMethod(v10, 0xCu, input, 2u, 0, 0, 0, 0, 0, 0)) != 0)
  {
    uint64_t v11 = v9;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      unsigned int v16 = "HALS_IOA2UCDevice.cpp";
      unsigned int v17 = 1024;
      CFArrayRef v18 = 311;
      __int16 v19 = 1024;
      uint64_t v20 = v11;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::SetClientDescription: got an error when telling the hardware to change client description, Error: 0x%X", buf, 0x18u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v11;
  }
}

uint64_t HALS_IOA2Device::_CopyControlByDescription(HALS_IOA2Device *this, int a2, int a3, int a4)
{
  v8[0] = a2;
  v8[1] = a3;
  v8[2] = a4;
  BOOL v5 = (unsigned int *)std::__tree<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::tuple<unsigned int,unsigned int,unsigned int>,std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>,std::less<std::tuple<unsigned int,unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::tuple<unsigned int,unsigned int,unsigned int>,unsigned int>>>::find<std::tuple<unsigned int,unsigned int,unsigned int>>((uint64_t)this + 1376, v8);
  if ((unsigned int *)((char *)this + 1384) == v5) {
    return 0;
  }
  CFNumberRef v6 = (HALS_ObjectMap *)v5[10];
  if (!v6) {
    return 0;
  }

  return HALS_ObjectMap::CopyObjectByObjectID(v6);
}

HALS_ObjectMap *HALS_IOA2Device::_CopyControlByIndex(HALS_IOA2Device *this, HALS_Object *a2)
{
  uint64_t v2 = *((void *)this + 169);
  if (a2 >= (unint64_t)((*((void *)this + 170) - v2) >> 3)) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *(HALS_ObjectMap **)(v2 + 8 * a2);
  }
  HALS_ObjectMap::RetainObject(v3, a2);
  return v3;
}

uint64_t HALS_IOA2Device::_GetNumberControls(HALS_IOA2Device *this)
{
  return (*((void *)this + 170) - *((void *)this + 169)) >> 3;
}

void HALS_IOA2Device::_CopyControls(HALS_IOA2Device *this, HALS_Device::BasicControlList *a2)
{
  uint64_t v2 = (HALS_ObjectMap **)*((void *)this + 169);
  uint64_t v3 = (HALS_ObjectMap **)*((void *)this + 170);
  if (v2 != v3)
  {
    CFDictionaryRef v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, a2);
      BOOL v5 = *v2;
      CFTypeID v7 = (HALS_ObjectMap **)*((void *)v4 + 1);
      unint64_t v6 = *((void *)v4 + 2);
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = ((uint64_t)v7 - *(void *)v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v6 - *(void *)v4;
        uint64_t v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        }
        else {
          a2 = 0;
        }
        unint64_t v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        char *v13 = v5;
        unint64_t v8 = v13 + 1;
        uint64_t v15 = *(char **)v4;
        int v14 = (char *)*((void *)v4 + 1);
        if (v14 != *(char **)v4)
        {
          do
          {
            unsigned int v16 = (HALS_ObjectMap *)*((void *)v14 - 1);
            v14 -= 8;
            *--unint64_t v13 = v16;
          }
          while (v14 != v15);
          int v14 = *(char **)v4;
        }
        *(void *)CFDictionaryRef v4 = v13;
        *((void *)v4 + 1) = v8;
        *((void *)v4 + 2) = v12 + 8 * (void)a2;
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *CFTypeID v7 = v5;
        unint64_t v8 = v7 + 1;
      }
      *((void *)v4 + 1) = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

void HALS_IOA2Device::_CopyStreamList(uint64_t a1, unsigned int a2, void **a3)
{
  a3[1] = *a3;
  uint64_t v4 = a1 + 24 * a2;
  std::vector<void const*>::reserve(a3, (uint64_t)(*(void *)(v4 + 1312) - *(void *)(v4 + 1304)) >> 3);
  unint64_t v6 = *(HALS_ObjectMap ***)(v4 + 1304);
  for (unsigned int i = *(HALS_ObjectMap ***)(v4 + 1312); v6 != i; ++v6)
  {
    HALS_ObjectMap::RetainObject(*v6, v5);
    unint64_t v8 = *v6;
    uint64_t v10 = (HALS_ObjectMap **)a3[1];
    unint64_t v9 = (unint64_t)a3[2];
    if ((unint64_t)v10 >= v9)
    {
      uint64_t v12 = ((char *)v10 - (unsigned char *)*a3) >> 3;
      if ((unint64_t)(v12 + 1) >> 61) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v9 - (void)*a3;
      uint64_t v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
        uint64_t v14 = v12 + 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15) {
        unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v15);
      }
      else {
        BOOL v5 = 0;
      }
      unsigned int v16 = (HALS_ObjectMap **)(v15 + 8 * v12);
      *unsigned int v16 = v8;
      uint64_t v11 = (char *)(v16 + 1);
      CFArrayRef v18 = (char *)*a3;
      unsigned int v17 = (char *)a3[1];
      if (v17 != *a3)
      {
        do
        {
          __int16 v19 = (HALS_ObjectMap *)*((void *)v17 - 1);
          v17 -= 8;
          *--unsigned int v16 = v19;
        }
        while (v17 != v18);
        unsigned int v17 = (char *)*a3;
      }
      *a3 = v16;
      a3[1] = v11;
      a3[2] = (void *)(v15 + 8 * (void)v5);
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *uint64_t v10 = v8;
      uint64_t v11 = (char *)(v10 + 1);
    }
    a3[1] = v11;
  }
}

uint64_t HALS_IOA2Device::_GetTotalNumberChannels(HALS_IOA2Device *this, unsigned int a2)
{
  uint64_t v2 = (char *)this + 24 * a2;
  uint64_t v3 = (HALS_Stream **)*((void *)v2 + 163);
  if (v3 == *((HALS_Stream ***)v2 + 164)) {
    return 0;
  }
  LODWORD(v4) = 0;
  BOOL v5 = (HALS_Stream ***)(v2 + 1312);
  do
  {
    unint64_t v6 = *v3++;
    uint64_t v4 = HALS_Stream::GetNumberChannels(v6) + v4;
  }
  while (v3 != *v5);
  return v4;
}

uint64_t HALS_IOA2Device::_CopyDefaultElementName(HALS_IOA2Device *this)
{
  return 0;
}

void HALS_IOA2Device::_WriteHogModeOwnerStore(HALS_IOA2Device *this, const __CFString *a2)
{
}

uint64_t HALS_IOA2Device::_ReadHogModeOwnerStore(HALS_IOA2Device *this)
{
  uint64_t v1 = (HALS_IOA2Device *)((char *)this + 1808);
  *((unsigned char *)this + 1840) = 1;
  CFTypeRef cf = 0;
  if (!HALB_UCObject::CopyProperty_CFType((const __CFDictionary **)this + 226, @"exclusive access owner", &cf)) {
    return 0xFFFFFFFFLL;
  }
  CFTypeRef v2 = cf;
  CFTypeID v3 = CFGetTypeID(cf);
  if (v3 != CFNumberGetTypeID())
  {
    CFRelease(v2);
    return 0xFFFFFFFFLL;
  }
  CFTypeRef v7 = v2;
  char v8 = 0;
  unsigned int valuePtr = 0;
  if (v2)
  {
    CFNumberGetValue((CFNumberRef)v2, kCFNumberSInt32Type, &valuePtr);
    uint64_t v4 = valuePtr;
  }
  else
  {
    uint64_t v4 = 0;
  }
  CACFNumber::~CACFNumber((CACFNumber *)&v7);
  CFRelease(v2);
  if (v4 != -1)
  {
    pid_t v6 = CAProcess::sPID;
    if (CAProcess::sPID == -1)
    {
      pid_t v6 = getpid();
      CAProcess::sPID = v6;
    }
    if (v4 != v6 && ((int)v4 < 1 || kill(v4, 0) && *__error() == 3))
    {
      uint64_t v4 = 0xFFFFFFFFLL;
      HALB_UCObject::SetProperty_SInt32(v1, (const __CFString *)0xFFFFFFFFLL);
    }
  }
  return v4;
}

void sub_1BAC73F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void HALS_IOA2Device::_HogModeOwnerChanged(HALS_IOA2Device **this, int a2)
{
  if (!*((unsigned char *)this + 1800))
  {
    if (a2 == -1)
    {
      HALS_IOA2Device::_CloseConnection(this);
    }
    else if (getpid() == a2)
    {
      HALS_IOA2Device::_OpenConnection((HALS_IOA2Device *)this);
    }
  }
}

void HALS_IOA2Device::_CloseConnection(HALS_IOA2Device **this)
{
  uint64_t v2 = *((unsigned int *)this + 455);
  if (v2) {
    MEMORY[0x1C1858860](v2, 0, 0, 0);
  }
  HALS_IOA2Device::_UnmapDataExchangeBlocks((HALS_IOA2Device *)this);
  HALS_IOA2Device::_UnmapBlockControlBuffers(this[169], this[170]);
  HALS_IOA2Device::_ReleaseIOBuffers((HALS_IOA2Device *)this);
  uint64_t v3 = *((unsigned int *)this + 455);
  if (this[232] && v3)
  {
    MEMORY[0x1C18588A0](v3, 0, *MEMORY[0x1E4F14960]);
    LODWORD(v3) = *((_DWORD *)this + 455);
  }
  this[232] = 0;
  if (v3)
  {
    IOServiceClose(v3);
    *((_DWORD *)this + 455) = 0;
  }
  v5[0] = 0;
  v5[1] = 0;
  HALS_System::GetInstance(&v6, 0, v5);
  HALS_IOContext_Manager::destroy_engine_for_device(*(os_unfair_lock_s **)(v6 + 1392), (const HALS_IODevice *)this);
  uint64_t v4 = v7;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void HALS_IOA2Device::_OpenConnection(HALS_IOA2Device *this)
{
  kern_return_t v3;
  uint64_t v4;
  unsigned int v5;
  kern_return_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  HALS_Object *v18;
  HALS_ObjectMap *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  kern_return_t v22;
  _DWORD *v23;
  kern_return_t v24;
  _DWORD *exception;
  uint64_t v26[2];
  unsigned char buf[18];
  __int16 v28;
  kern_return_t v29;
  uint64_t v30;
  uint64_t vars8;

  uint64_t v30 = *MEMORY[0x1E4F143B8];
  io_service_t v2 = *((_DWORD *)this + 454);
  if (v2)
  {
    if (!*((_DWORD *)this + 455))
    {
      uint64_t v3 = IOServiceOpen(v2, *MEMORY[0x1E4F14960], 0, (io_connect_t *)this + 455);
      if (v3)
      {
        uint64_t v24 = v3;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "HALB_UCObject.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 710;
          BOOL v28 = 1024;
          unsigned int v29 = v24;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_UCObject::OpenConnection: failed to open a connection, Error: 0x%X", buf, 0x18u);
        }
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = off_1F148A5D8;
        exception[2] = v24;
      }
    }
  }
  HALS_IOA2UCDevice::MapEngineStatus((HALS_IOA2Device *)((char *)this + 1808), (uint64_t *)this + 232);
  uint64_t v4 = *((unsigned int *)this + 455);
  if (v4)
  {
    BOOL v5 = *((_DWORD *)this + 462);
    uint64_t v6 = MEMORY[0x1C1858860](v4, 0, v5, *((unsigned int *)this + 4));
    if (v5)
    {
      if (v6)
      {
        int v22 = v6;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "HALB_UCObject.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 730;
          BOOL v28 = 1024;
          unsigned int v29 = v22;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_UCObject::SetConnectionNotificationPort: Cannot set the connection's's notification port., Error: 0x%X", buf, 0x18u);
        }
        uint64_t v23 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v23 = off_1F148A5D8;
        v23[2] = v22;
      }
    }
  }
  HALS_IOA2Device::_MapIOBuffers(this);
  HALS_IOA2Device::_MapBlockControlBuffers(*((HALS_IOA2Device **)this + 169), *((HALS_IOA2Device **)this + 170));
  HALS_IOA2Device::_MapDataExchangeBlocks(this);
  CFTypeRef v7 = 0;
  char v8 = 1;
  do
  {
    unint64_t v9 = v8;
    uint64_t v10 = (char *)this + 24 * v7;
    uint64_t v11 = *((void *)v10 + 163);
    if (*((void *)v10 + 164) != v11)
    {
      uint64_t v12 = 0;
      uint64_t v13 = (uint64_t *)(v10 + 1304);
      uint64_t v14 = v10 + 1312;
      unint64_t v15 = 1;
      do
      {
        unsigned int v16 = *(void *)(v11 + 8 * v12);
        unsigned int v17 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v16 + 48));
        __int16 v19 = (HALS_ObjectMap *)v17;
        if (v17 && !*(_DWORD *)(v16 + 56)) {
          HALS_IOA2UCDevice::SetStreamActive((HALS_IOA2UCDevice *)(v17 + 1808), *(_DWORD *)(v16 + 60), *(unsigned __int8 *)(v16 + 64));
        }
        HALS_ObjectMap::ReleaseObject(v19, v18);
        uint64_t v12 = v15;
        uint64_t v11 = *v13;
        ++v15;
      }
      while (v12 < (*v14 - *v13) >> 3);
    }
    char v8 = 0;
    CFTypeRef v7 = 1;
  }
  while ((v9 & 1) != 0);
  uint64_t v20 = *((void *)this + 222);
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 936))(v20);
  }
  v26[0] = 0;
  v26[1] = 0;
  HALS_System::GetInstance(buf, 0, v26);
  HALS_IOContext_Manager::rebuild_engine_for_device(*(HALS_IOContext_Manager **)(*(void *)buf + 1392), this);
  unsigned int v21 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
}

void sub_1BAC743FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

HALS_ObjectMap *HALS_IOA2Device::_CopyIOEngine(HALS_ObjectMap **this, HALS_Object *a2)
{
  return this[222];
}

HALS_ObjectMap *HALS_IOA2Device::_CopyStreamByIndex(HALS_IOA2Device *this, HALS_Object *a2, unsigned int a3)
{
  uint64_t v3 = (char *)this + 24 * a2;
  uint64_t v4 = *((void *)v3 + 164);
  uint64_t v5 = *((void *)v3 + 163);
  if (a3 >= (unint64_t)((v4 - v5) >> 3)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *(HALS_ObjectMap **)(v5 + 8 * a3);
  }
  HALS_ObjectMap::RetainObject(v6, a2);
  return v6;
}

uint64_t HALS_IOA2Device::_GetNumberStreams(HALS_IOA2Device *this, unsigned int a2)
{
  return (*((void *)this + 3 * a2 + 164) - *((void *)this + 3 * a2 + 163)) >> 3;
}

uint64_t HALS_IOA2Device::_GetClockAlgorithm(HALS_IOA2Device *this)
{
  return 1835103847;
}

void HALS_IOA2Device::create_mcp_engine(HALS_IOA2Device *this)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  io_service_t v2 = (const __CFDictionary **)((char *)this + 1808);
  v32[0] = 0;
  HALB_UCObject::CopyProperty_CFString((const __CFDictionary **)this + 226, @"device UID", (const __CFString **)v32);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v32[0]);
  double NominalSampleRate = HALS_IOA2UCDevice::GetNominalSampleRate(v2);
  LODWORD(v32[0]) = 0;
  HALB_UCObject::CopyProperty_UInt32(v2, @"clock domain", (unsigned int *)v32);
  int v4 = (int)v32[0];
  LODWORD(v32[0]) = 0;
  HALB_UCObject::CopyProperty_UInt32(v2, @"input safety offset", (unsigned int *)v32);
  int v5 = (int)v32[0];
  LODWORD(v32[0]) = 0;
  HALB_UCObject::CopyProperty_UInt32(v2, @"output safety offset", (unsigned int *)v32);
  int v6 = (int)v32[0];
  LODWORD(v32[0]) = 0;
  HALB_UCObject::CopyProperty_UInt32(v2, @"input latency", (unsigned int *)v32);
  int v7 = (int)v32[0];
  LODWORD(v32[0]) = 0;
  HALB_UCObject::CopyProperty_UInt32(v2, @"output latency", (unsigned int *)v32);
  int v8 = (int)v32[0];
  int v9 = *((unsigned __int8 *)this + 1843);
  LOBYTE(v32[0]) = 0;
  HALB_UCObject::CopyProperty_BOOL(v2, @"wants input trap", (BOOL *)v32);
  int v10 = LOBYTE(v32[0]);
  LOBYTE(v32[0]) = 0;
  HALB_UCObject::CopyProperty_BOOL(v2, @"wants output trap", (BOOL *)v32);
  int v25 = LOBYTE(v32[0]);
  LODWORD(v32[0]) = 0;
  HALB_UCObject::CopyProperty_UInt32(v2, @"io buffer frame size", (unsigned int *)v32);
  LODWORD(v2) = v32[0];
  make_stream_list((uint64_t)v28, (uint64_t **)this + 166);
  int v23 = (int)v2;
  int v24 = v10;
  make_stream_list((uint64_t)__p, (uint64_t **)this + 163);
  AMCP::Utility::Dispatch_Queue::create_serial_with_workloop((AMCP::Utility::Dispatch_Queue *)v32, "IOAudio2::Engine Queue");
  uint64_t v11 = (dispatch_queue_t *)((char *)this + 1456);
  AMCP::Utility::Dispatch_Queue::operator=((NSObject **)this + 182, v32[0]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v32);
  io_connect_t connect = *((_DWORD *)this + 455);
  uint64_t v12 = IOConnectAddRef(connect);
  if (!v12)
  {
    uint64_t v13 = operator new(0x330uLL);
    int v14 = v8;
    v13[1] = 0;
    v13[2] = 0;
    void *v13 = &unk_1F1468240;
    io_connect_t v31 = connect;
    uint64_t v15 = IOConnectAddRef(connect);
    if (!v15)
    {
      int v16 = v7;
      CFTypeRef v17 = cf;
      if (cf) {
        CFRetain(cf);
      }
      CFTypeRef v30 = v17;
      BYTE1(v22) = v25 != 0;
      LOBYTE(v22) = v24 != 0;
      AMCP::IOAudio2::Engine::Engine((uint64_t)(v13 + 3), NominalSampleRate, (uint64_t)&v31, &v30, v23, v4, v9 != 0, v5, v6, v16, v14, (uint64_t)v28, (uint64_t)__p, v22, v11);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
    unsigned int v21 = std::system_category();
    MEMORY[0x1C1859250](exception, v15, v21, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  CFArrayRef v18 = __cxa_allocate_exception(0x20uLL);
  __int16 v19 = std::system_category();
  MEMORY[0x1C1859250](v18, v12, v19, "Error on IOConnectAddRef");
  __cxa_throw(v18, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
}

void sub_1BAC748A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, io_connect_t connect, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,const void *a25,__int16 a26,char a27,char a28,int a29,int a30,io_connect_t a31)
{
  __cxa_free_exception(v31);
  std::__shared_weak_count::~__shared_weak_count(v32);
  operator delete(v34);
  IOConnectRelease(connect);
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  applesauce::CF::StringRef::~StringRef(&a25);
  _Unwind_Resume(a1);
}

void sub_1BAC74984()
{
}

void make_stream_list(uint64_t a1, uint64_t **a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::reserve((void **)a1, a2[1] - *a2);
  int v4 = *a2;
  int v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      int v6 = (*(uint64_t (**)(void))(*(void *)*v4 + 200))();
      uint64_t v7 = *v4;
      int v8 = *(_DWORD *)(*v4 + 60);
      uint64_t v9 = *(unsigned int *)(*v4 + 16);
      uint64_t v34 = 0x676C6F6270667420;
      uint64_t v35 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, char *, long long *, void, void, void))(*(void *)v7 + 112))(v7, v9, &v34, 40, (char *)&v35 + 4, &v31, 0, 0, 0);
      uint64_t v11 = *(_DWORD **)(a1 + 8);
      unint64_t v10 = *(void *)(a1 + 16);
      if ((unint64_t)v11 >= v10)
      {
        int v16 = *(_DWORD **)a1;
        uint64_t v17 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v11 - *(void *)a1) >> 3);
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) > 0x492492492492492) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v19 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v10 - (void)v16) >> 3);
        if (2 * v19 > v18) {
          unint64_t v18 = 2 * v19;
        }
        if (v19 >= 0x249249249249249) {
          unint64_t v20 = 0x492492492492492;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20) {
          unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v20);
        }
        else {
          uint64_t v21 = 0;
        }
        unint64_t v22 = v20 + 56 * v17;
        uint64_t v23 = v33;
        long long v24 = v32;
        long long v25 = v31;
        *(_DWORD *)unint64_t v22 = v6;
        *(_DWORD *)(v22 + 4) = v8;
        *(_DWORD *)(v22 + 8) = 1;
        *(_OWORD *)(v22 + 16) = v25;
        *(_OWORD *)(v22 + 32) = v24;
        *(void *)(v22 + 48) = v23;
        if (v11 == v16)
        {
          unint64_t v30 = v20 + 56 * v17;
        }
        else
        {
          unint64_t v26 = v20 + 56 * v17;
          do
          {
            long long v27 = *(_OWORD *)(v11 - 14);
            long long v28 = *(_OWORD *)(v11 - 10);
            long long v29 = *(_OWORD *)(v11 - 6);
            unint64_t v30 = v26 - 56;
            *(void *)(v26 - 8) = *((void *)v11 - 1);
            *(_OWORD *)(v26 - 24) = v29;
            *(_OWORD *)(v26 - 40) = v28;
            *(_OWORD *)(v26 - 56) = v27;
            v11 -= 14;
            v26 -= 56;
          }
          while (v11 != v16);
        }
        uint64_t v15 = (_DWORD *)(v22 + 56);
        *(void *)a1 = v30;
        *(void *)(a1 + 8) = v22 + 56;
        *(void *)(a1 + 16) = v20 + 56 * v21;
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        uint64_t v12 = v33;
        long long v13 = v32;
        long long v14 = v31;
        _DWORD *v11 = v6;
        v11[1] = v8;
        _OWORD v11[2] = 1;
        *((_OWORD *)v11 + 1) = v14;
        *((_OWORD *)v11 + 2) = v13;
        *((void *)v11 + 6) = v12;
        uint64_t v15 = v11 + 14;
      }
      *(void *)(a1 + 8) = v15;
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_1BAC74BE4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOA2Device::HandleOwnedObjectPropertiesChanged(HALS_IOA2Device *this, const HALS_Object *a2, unsigned int a3, unsigned int a4, const AudioObjectPropertyAddress *a5, int a6)
{
  memset(v28, 0, sizeof(v28));
  unsigned int v12 = *((_DWORD *)a2 + 5);
  BOOL IsSubClass = HALB_Info::IsSubClass((HALB_Info *)v12, 1633907820);
  uint64_t v15 = (HALB_Info *)*((unsigned int *)a2 + 6);
  if (v12 == v15 || IsSubClass)
  {
    if (v12 != v15) {
      BOOL IsSubClass = 1;
    }
    if (!IsSubClass) {
      goto LABEL_46;
    }
  }
  else if (!HALB_Info::IsSubClass(v15, 1633907820))
  {
LABEL_46:
    uint64_t v23 = 0;
    goto LABEL_47;
  }
  if (!*((_DWORD *)a2 + 42) || !a4) {
    goto LABEL_46;
  }
  unint64_t v26 = a5;
  uint64_t v16 = a4;
  do
  {
    int v17 = *((_DWORD *)a2 + 6);
    if (v17 > 1936483441)
    {
      switch(v17)
      {
        case 1953458028:
          AudioObjectPropertySelector mSelector = a5->mSelector;
          unint64_t v19 = (AudioObjectPropertySelector *)((char *)a2 + 172);
          int v21 = 1650685548;
          goto LABEL_40;
        case 1936744814:
          AudioObjectPropertySelector mSelector = a5->mSelector;
          unint64_t v19 = (AudioObjectPropertySelector *)((char *)a2 + 172);
          if (a5->mSelector != 1936745334)
          {
            unint64_t v19 = (AudioObjectPropertySelector *)((char *)a2 + 176);
            int v21 = 1936745315;
            goto LABEL_40;
          }
          break;
        case 1936483442:
          AudioObjectPropertySelector mSelector = a5->mSelector;
          unint64_t v19 = (AudioObjectPropertySelector *)((char *)a2 + 172);
          if (a5->mSelector != 1935962742)
          {
            unint64_t v19 = (AudioObjectPropertySelector *)((char *)a2 + 176);
            int v21 = 1935962738;
            goto LABEL_40;
          }
          break;
        default:
          goto LABEL_42;
      }
    }
    else
    {
      if (v17 == 1651273579)
      {
        unint64_t v19 = (AudioObjectPropertySelector *)((char *)a2 + 172);
        if (a5->mSelector != 1651272546)
        {
          if (a5->mSelector != 1651272548) {
            goto LABEL_42;
          }
          unint64_t v19 = (AudioObjectPropertySelector *)((char *)a2 + 176);
        }
        goto LABEL_41;
      }
      if (v17 == 1818588780)
      {
        AudioObjectPropertySelector mSelector = a5->mSelector;
        if ((int)a5->mSelector > 1818456931)
        {
          unint64_t v19 = (AudioObjectPropertySelector *)((char *)a2 + 184);
          if (mSelector == 1818456932) {
            goto LABEL_41;
          }
          unint64_t v19 = (AudioObjectPropertySelector *)((char *)a2 + 172);
          if (mSelector == 1818456950) {
            goto LABEL_41;
          }
          unint64_t v19 = (AudioObjectPropertySelector *)((char *)a2 + 192);
          unsigned __int16 v22 = 29798;
        }
        else
        {
          unint64_t v19 = (AudioObjectPropertySelector *)((char *)a2 + 180);
          if (mSelector == 1818453106) {
            goto LABEL_41;
          }
          unint64_t v19 = (AudioObjectPropertySelector *)((char *)a2 + 188);
          if (mSelector == 1818453107) {
            goto LABEL_41;
          }
          unint64_t v19 = (AudioObjectPropertySelector *)((char *)a2 + 176);
          unsigned __int16 v22 = 25718;
        }
        int v21 = v22 | 0x6C630000;
LABEL_40:
        if (mSelector != v21) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
      if (v17 != 1936483188) {
        goto LABEL_42;
      }
      AudioObjectPropertySelector mSelector = a5->mSelector;
      if ((int)a5->mSelector > 1935893352)
      {
        unint64_t v19 = (AudioObjectPropertySelector *)((char *)a2 + 172);
        if (mSelector != 1935893353)
        {
          unint64_t v19 = (AudioObjectPropertySelector *)((char *)a2 + 180);
          unsigned __int16 v20 = 26990;
          goto LABEL_35;
        }
      }
      else
      {
        unint64_t v19 = (AudioObjectPropertySelector *)((char *)a2 + 184);
        if (mSelector != 1668049771)
        {
          unint64_t v19 = (AudioObjectPropertySelector *)((char *)a2 + 176);
          unsigned __int16 v20 = 24937;
LABEL_35:
          int v21 = v20 | 0x73630000;
          goto LABEL_40;
        }
      }
    }
LABEL_41:
    v27.AudioObjectPropertySelector mSelector = *v19;
    *(void *)&v27.AudioObjectPropertyScope mScope = *((void *)a2 + 6);
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v28, &v27, v13);
LABEL_42:
    ++a5;
    --v16;
  }
  while (v16);
  uint64_t v23 = *(void **)&v28[0];
  if (*(void *)&v28[0] == *((void *)&v28[0] + 1))
  {
    a5 = v26;
  }
  else
  {
    a5 = v26;
    long long v24 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    unsigned int v25 = -1431655765 * ((*((void *)&v28[0] + 1) - *(void *)&v28[0]) >> 2);
    if (a6) {
      HALS_Object::PropertiesChanged_Sync(this, v24, a3, v25, *(const AudioObjectPropertyAddress **)&v28[0]);
    }
    else {
      HALS_Object::PropertiesChanged(this, v24, a3, v25, *(const AudioObjectPropertyAddress **)&v28[0]);
    }
  }
LABEL_47:
  HALS_Device::HandleOwnedObjectPropertiesChanged(this, a2, a3, a4, a5, a6);
  if (v23)
  {
    *((void *)&v28[0] + 1) = v23;
    operator delete(v23);
  }
}

void sub_1BAC74FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (v19) {
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOA2Device::WantsOwnedObjectPropertiesChanged(HALS_IOA2Device *this)
{
  return 1;
}

void HALS_IOA2Device::SetPropertyData(HALS_IOA2Device *this, const AudioObjectPropertyAddress *a2, const AudioObjectPropertyAddress *a3, uint64_t a4, _DWORD *a5, uint64_t a6, int *a7, HALS_Client *a8)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_IOA2Device *, const AudioObjectPropertyAddress *, const AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    int v29 = 1852797029;
    goto LABEL_24;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if (!HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, v16)) {
    goto LABEL_9;
  }
  if (a8) {
    pid_t v18 = *((_DWORD *)a8 + 58);
  }
  else {
    pid_t v18 = getpid();
  }
  if (*((_DWORD *)this + 38) != v18 && HALS_Device::GetHogModeOwner(this) != -1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    int v29 = 560492391;
LABEL_24:
    exception[2] = v29;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
LABEL_9:
  if (mSelector == 1667329635)
  {
    if (a6 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1708;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::_SetPropertyData: bad qualifier data size for property 'canc'", buf, 0x12u);
      }
      long long v31 = __cxa_allocate_exception(0x10uLL);
      *(void *)long long v31 = off_1F148A5D8;
      v31[2] = 561211770;
    }
    if (!a7)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1709;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::_SetPropertyData: inQualifierData was NULL for property 'canc'", buf, 0x12u);
      }
      long long v32 = __cxa_allocate_exception(0x10uLL);
      *(void *)long long v32 = off_1F148A5D8;
      uint64_t v32[2] = 2003329396;
    }
    int v22 = *a7;
    *(void *)AudioObjectPropertyAddress buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000;
    LODWORD(v45) = 0;
    v40[0] = MEMORY[0x1E4F143A8];
    v40[1] = 0x40000000;
    v40[2] = ___ZN15HALS_IOA2Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_102;
    v40[3] = &unk_1E6231B40;
    int v41 = v22;
    int v42 = a4;
    v40[5] = this;
    v40[6] = a5;
    v40[4] = buf;
    uint64_t v23 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v23, (uint64_t)v40);
    if (*(_DWORD *)(*(void *)&buf[8] + 24))
    {
      uint64_t v33 = __cxa_allocate_exception(0x10uLL);
      int v34 = *(_DWORD *)(*(void *)&buf[8] + 24);
      *(void *)uint64_t v33 = off_1F148A5D8;
      uint64_t v33[2] = v34;
    }
    goto LABEL_17;
  }
  if (mSelector == 1853059700)
  {
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1692;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::_SetPropertyData: bad property data size for kAudioDevicePropertyNominalSampleRate", buf, 0x12u);
      }
      unint64_t v30 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v30 = off_1F148A5D8;
      unsigned int v30[2] = 561211770;
    }
    *(void *)AudioObjectPropertyAddress buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000;
    LODWORD(v45) = 0;
    v43[0] = MEMORY[0x1E4F143A8];
    v43[1] = 0x40000000;
    v43[2] = ___ZN15HALS_IOA2Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
    v43[3] = &unk_1E6231B18;
    v43[5] = this;
    void v43[6] = a5;
    v43[4] = buf;
    unint64_t v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v19, (uint64_t)v43);
    if (*(_DWORD *)(*(void *)&buf[8] + 24))
    {
      unsigned __int16 v20 = __cxa_allocate_exception(0x10uLL);
      int v21 = *(_DWORD *)(*(void *)&buf[8] + 24);
      *(void *)unsigned __int16 v20 = off_1F148A5D8;
      v20[2] = v21;
    }
LABEL_17:
    long long v24 = (uint64_t *)buf;
    goto LABEL_22;
  }
  uint64_t v36 = 0;
  __int16 v37 = &v36;
  uint64_t v38 = 0x2000000000;
  uint64_t v39 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&buf[16] = 0x3802000000;
  uint64_t v45 = __Block_byref_object_copy__25;
  float32x4_t v46 = __Block_byref_object_dispose__26;
  uint64_t v47 = 0;
  int v48 = 0;
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 0x40000000;
  uint64_t v35[2] = ___ZN15HALS_IOA2Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_104;
  v35[3] = &unk_1E6231B68;
  void v35[6] = this;
  v35[7] = a3;
  v35[4] = &v36;
  v35[5] = buf;
  unsigned int v25 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v25, (uint64_t)v35);
  unint64_t v26 = (unsigned int *)v37[3];
  if (v26)
  {
    (*(void (**)(unsigned int *, void, uint64_t, uint64_t, _DWORD *, uint64_t, int *, HALS_Client *))(*(void *)v26 + 120))(v26, v26[4], *(void *)&buf[8] + 40, a4, a5, a6, a7, a8);
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v37[3], v27);
  }
  else
  {
    HALS_Device::SetPropertyData(this, a2, a3, a4, a5, a6, a7, a8);
  }
  _Block_object_dispose(buf, 8);
  long long v24 = &v36;
LABEL_22:
  _Block_object_dispose(v24, 8);
}

void sub_1BAC75730(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN15HALS_IOA2Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  LODWORD(result) = 1937010544;
  uint64_t v2 = *(void *)(v1 + 40);
  unint64_t inputStruct = vcvtd_n_s64_f64(**(double **)(v1 + 48) - (double)(uint64_t)floor(**(double **)(v1 + 48)), 0x20uLL)
              + (vcvtmd_s64_f64(**(double **)(v1 + 48)) << 32);
  mach_port_t v3 = *(_DWORD *)(v2 + 1820);
  if (!v3
    || !*(unsigned char *)(v2 + 1842)
    || (BOOL result = IOConnectCallMethod(v3, 4u, 0, 0, &inputStruct, 8uLL, 0, 0, 0, 0), result))
  {
    int v4 = result;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      int v8 = "HALS_IOA2UCDevice.cpp";
      __int16 v9 = 1024;
      int v10 = 223;
      __int16 v11 = 1024;
      int v12 = v4;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::SetNominalSampleRate: got an error when telling the hardware to change a control value, Error: 0x%X", buf, 0x18u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v4;
  }
  return result;
}

uint64_t ___ZN15HALS_IOA2Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_102(uint64_t result)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(result + 40);
  uint64_t v2 = *(void *)(v1 + 1904);
  if (v2)
  {
    uint64_t v3 = result;
    unsigned int v4 = *(_DWORD *)(result + 56);
    uint64_t v5 = v1 + 1904;
    do
    {
      unsigned int v6 = *(_DWORD *)(v2 + 32);
      BOOL v7 = v6 >= v4;
      if (v6 >= v4) {
        int v8 = (uint64_t *)v2;
      }
      else {
        int v8 = (uint64_t *)(v2 + 8);
      }
      if (v7) {
        uint64_t v5 = v2;
      }
      uint64_t v2 = *v8;
    }
    while (*v8);
    if (v5 != v1 + 1904 && v4 >= *(_DWORD *)(v5 + 32))
    {
      __int16 v9 = *(void **)(v5 + 40);
      if (v9)
      {
        unsigned int v10 = *(_DWORD *)(v3 + 60);
        if (v10 <= *(_DWORD *)(v5 + 48))
        {
          if (*(void *)(v3 + 48))
          {
            memcpy(v9, *(const void **)(v3 + 48), *(unsigned int *)(v3 + 60));
            unsigned int v4 = *(_DWORD *)(v3 + 56);
            unsigned int v10 = *(_DWORD *)(v3 + 60);
          }
          return HALS_IOA2UCDevice::MoveDataExchangeBlockData((HALS_IOA2UCDevice *)(v1 + 1808), v4, 1u, v10);
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          int v13 = 136315394;
          long long v14 = "HALS_IOA2Device.cpp";
          __int16 v15 = 1024;
          int v16 = 1718;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::_SetPropertyData: wrong data size for property 'canc'", (uint8_t *)&v13, 0x12u);
        }
        int v11 = 561211770;
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          int v13 = 136315394;
          long long v14 = "HALS_IOA2Device.cpp";
          __int16 v15 = 1024;
          int v16 = 1717;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::_SetPropertyData: bad block ID for property 'canc'", (uint8_t *)&v13, 0x12u);
        }
        int v11 = 2003329396;
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = v11;
    }
  }
  return result;
}

void sub_1BAC75B4C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    unsigned int v4 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      int v5 = v4[2];
    }
    else {
      int v5 = 2003329396;
    }
    *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = v5;
    __cxa_end_catch();
    JUMPOUT(0x1BAC759FCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(result + 40) = v2;
  return result;
}

_DWORD *___ZN15HALS_IOA2Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_104(uint64_t a1)
{
  BOOL result = HALS_IOA2Device::_FindCustomControlForDeviceAddress(*(HALS_IOA2Device **)(a1 + 48), *(const AudioObjectPropertyAddress **)(a1 + 56), (AudioObjectPropertyAddress *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAC75BEC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_IOA2Device::GetPropertyData(HALS_IOA2Device *this, const BOOL *a2, AudioObjectPropertyAddress *a3, const AudioObjectPropertyAddress *a4, unsigned int *a5, int *a6, unsigned int a7, int *a8, HALS_Client *a9)
{
  uint64_t v145 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_IOA2Device *, const BOOL *, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  uint64_t v14 = (*(uint64_t (**)(HALS_IOA2Device *, HALS_Client *))(*(void *)this + 696))(this, a9);
  signed int mSelector = a3->mSelector;
  AudioObjectPropertyScope mScope = a3->mScope;
  if ((int)a3->mSelector <= 1819173228)
  {
    if (mSelector > 1735354733)
    {
      if (mSelector > 1751737453)
      {
        if (mSelector > 1818455661)
        {
          if (mSelector == 1818455662)
          {
            if (a4 <= 7)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1271;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioObjectPropertyElementNumberName", buf, 0x12u);
              }
              float32x4_t v91 = __cxa_allocate_exception(0x10uLL);
              *(void *)float32x4_t v91 = off_1F148A5D8;
              v91[2] = 561211770;
            }
            v135[0] = MEMORY[0x1E4F143A8];
            v135[1] = 0x40000000;
            v135[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_49;
            v135[3] = &__block_descriptor_tmp_50;
            v135[4] = this;
            v135[5] = a6;
            v135[6] = a3;
            uint64_t v47 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v47, (uint64_t)v135);
            goto LABEL_124;
          }
          if (mSelector == 1819107691)
          {
            if (a4 <= 7)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1253;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioObjectPropertyManufacturer", buf, 0x12u);
              }
              uint64_t v85 = __cxa_allocate_exception(0x10uLL);
              *(void *)uint64_t v85 = off_1F148A5D8;
              v85[2] = 561211770;
            }
            v137[0] = MEMORY[0x1E4F143A8];
            v137[1] = 0x40000000;
            v137[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_45;
            _OWORD v137[3] = &__block_descriptor_tmp_46;
            v137[4] = this;
            v137[5] = a6;
            long long v31 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v31, (uint64_t)v137);
            goto LABEL_124;
          }
          goto LABEL_117;
        }
        if (mSelector != 1751737454)
        {
          if (mSelector == 1818452846)
          {
            if (a4 <= 7)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1262;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioObjectPropertyElementCategoryName", buf, 0x12u);
              }
              uint64_t v77 = __cxa_allocate_exception(0x10uLL);
              *(void *)uint64_t v77 = off_1F148A5D8;
              v77[2] = 561211770;
            }
            v136[0] = MEMORY[0x1E4F143A8];
            v136[1] = 0x40000000;
            v136[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_47;
            v136[3] = &__block_descriptor_tmp_48;
            uint64_t v136[4] = this;
            v136[5] = a6;
            v136[6] = a3;
            uint64_t v23 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v23, (uint64_t)v136);
            goto LABEL_124;
          }
LABEL_117:
          HALS_IOA2Device::GetCustomPropertyInfoByAddress((HALS_IOA2Device *)&__p, (const AudioObjectPropertyAddress *)this, (CAPropertyAddress *)a3);
          if (theDict)
          {
            if (a4 <= 7)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1650;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for a custom property", buf, 0x12u);
              }
              uint64_t v99 = __cxa_allocate_exception(0x10uLL);
              *(void *)uint64_t v99 = off_1F148A5D8;
              void v99[2] = 561211770;
            }
            v104[0] = MEMORY[0x1E4F143A8];
            v104[1] = 1174405120;
            v104[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_94;
            v104[3] = &__block_descriptor_tmp_98;
            v104[4] = this;
            OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v105, theDict);
            v105[0] = &unk_1F14898A0;
            v105[2] = a6;
            BOOL v62 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v62, (uint64_t)v104);
            *a5 = 8;
            OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v105);
          }
          else
          {
            uint64_t v113 = 0;
            CFNumberRef v114 = (const __CFNumber *)&v113;
            uint64_t v115 = 0x2000000000;
            uint64_t v116 = 0;
            *(void *)AudioObjectPropertyAddress buf = 0;
            *(void *)&uint8_t buf[8] = buf;
            *(void *)&buf[16] = 0x3802000000;
            float32x4_t v141 = __Block_byref_object_copy__25;
            float32x4_t v142 = __Block_byref_object_dispose__26;
            float32x4_t v143 = 0;
            LODWORD(v144) = 0;
            v103[0] = MEMORY[0x1E4F143A8];
            v103[1] = 0x40000000;
            v103[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_99;
            v103[3] = &unk_1E6231AF0;
            v103[6] = this;
            v103[7] = a3;
            v103[4] = &v113;
            v103[5] = buf;
            uint64_t v64 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v64, (uint64_t)v103);
            uint64_t v65 = (unsigned int *)*((void *)v114 + 3);
            if (v65)
            {
              (*(void (**)(unsigned int *, void, uint64_t, const AudioObjectPropertyAddress *, unsigned int *, int *, void, int *, HALS_Client *))(*(void *)v65 + 112))(v65, v65[4], *(void *)&buf[8] + 40, a4, a5, a6, a7, a8, a9);
              HALS_ObjectMap::ReleaseObject(*((HALS_ObjectMap **)v114 + 3), v66);
            }
            else
            {
              HALS_Device::GetPropertyData(this, a2, a3, a4, a5, a6, (void *)a7, a8, a9);
            }
            _Block_object_dispose(buf, 8);
            _Block_object_dispose(&v113, 8);
          }
          p_p = &__p;
LABEL_136:
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)p_p);
          return;
        }
      }
      else
      {
        if (mSelector <= 1751412336)
        {
          if (mSelector == 1735354734 || mSelector == 1735356005)
          {
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1330;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceIsRunning", buf, 0x12u);
              }
              uint64_t v72 = __cxa_allocate_exception(0x10uLL);
              *(void *)uint64_t v72 = off_1F148A5D8;
              v72[2] = 561211770;
            }
            *a6 = (*(uint64_t (**)(void))(**((void **)this + 222) + 672))(*((void *)this + 222));
            goto LABEL_114;
          }
          goto LABEL_117;
        }
        if (mSelector != 1751412337)
        {
          if (mSelector == 1751474532)
          {
            if (a4 <= 7)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1607;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyHeadsetInfo", buf, 0x12u);
              }
              unsigned int v83 = __cxa_allocate_exception(0x10uLL);
              *(void *)unsigned int v83 = off_1F148A5D8;
              v83[2] = 561211770;
            }
            v108[0] = MEMORY[0x1E4F143A8];
            v108[1] = 0x40000000;
            v108[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_88;
            v108[3] = &__block_descriptor_tmp_89;
            v108[4] = this;
            v108[5] = a6;
            int v29 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v29, (uint64_t)v108);
LABEL_124:
            unsigned int v41 = 8;
            goto LABEL_125;
          }
          goto LABEL_117;
        }
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1536;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyIsHidden", buf, 0x12u);
        }
        unint64_t v74 = __cxa_allocate_exception(0x10uLL);
        *(void *)unint64_t v74 = off_1F148A5D8;
        v74[2] = 561211770;
      }
      v118[0] = MEMORY[0x1E4F143A8];
      v118[1] = 0x40000000;
      v118[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_79;
      uint64_t v118[3] = &__block_descriptor_tmp_80;
      v118[4] = this;
      v118[5] = a6;
      uint64_t v33 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v33, (uint64_t)v118);
      goto LABEL_114;
    }
    if (mSelector > 1667330159)
    {
      if (mSelector > 1668641651)
      {
        if (mSelector == 1668641652)
        {
          unint64_t Size = (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(*((const __CFArray **)this + 224));
          if (Size >= a4 / 0xCuLL) {
            unint64_t v37 = a4 / 0xCuLL;
          }
          else {
            unint64_t v37 = Size;
          }
          if (v37)
          {
            CFIndex v38 = 0;
            uint64_t v39 = (char *)this + 1784;
            int v40 = a6 + 1;
            do
            {
              OS::CF::ArrayBase<__CFArray const*>::operator[]((const __CFArray *)v109, (uint64_t)v39, v38);
              OS::CF::UntypedObject::As<OS::CF::Dictionary>(&__p, (uint64_t)v109);
              OS::CF::DictionaryBase<__CFDictionary const*>::operator[]((uint64_t)&v113, theDict, @"property selector");
              OS::CF::UntypedObject::As<OS::CF::Number>(buf, (uint64_t)&v113);
              *((_DWORD *)v40 - 1) = OS::CF::Number::GetValue<unsigned int>(*(const __CFNumber **)&buf[8], 0);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v113);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&__p);
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v109);
              *int v40 = 1886155636;
              int v40 = (void *)((char *)v40 + 12);
              ++v38;
            }
            while (v37 != v38);
          }
          unsigned int v41 = 12 * v37;
          goto LABEL_125;
        }
        if (mSelector == 1684434036)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1339;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceCanBeDefaultDevice", buf, 0x12u);
            }
            uint64_t v81 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v81 = off_1F148A5D8;
            v81[2] = 561211770;
          }
          v130[0] = MEMORY[0x1E4F143A8];
          v130[1] = 0x40000000;
          v130[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_62;
          void v130[3] = &__block_descriptor_tmp_63;
          v130[4] = this;
          v130[5] = a6;
          v130[6] = a3;
          v130[7] = a9;
          long long v28 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v28, (uint64_t)v130);
          goto LABEL_114;
        }
      }
      else
      {
        if (mSelector == 1667330160)
        {
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1280;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyConfigurationApplication", buf, 0x12u);
            }
            unint64_t v87 = __cxa_allocate_exception(0x10uLL);
            *(void *)unint64_t v87 = off_1F148A5D8;
            v87[2] = 561211770;
          }
          v134[0] = MEMORY[0x1E4F143A8];
          v134[1] = 0x40000000;
          v134[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_51;
          v134[3] = &__block_descriptor_tmp_52;
          v134[4] = this;
          v134[5] = a6;
          int v34 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v34, (uint64_t)v134);
          if (!*(void *)a6) {
            *(void *)a6 = CFRetain(@"com.apple.audio.AudioMIDISetup");
          }
          goto LABEL_124;
        }
        if (mSelector == 1668049764)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1320;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyClockDomain", buf, 0x12u);
            }
            uint64_t v75 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v75 = off_1F148A5D8;
            v75[2] = 561211770;
          }
          v131[0] = MEMORY[0x1E4F143A8];
          v131[1] = 0x40000000;
          v131[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_60;
          v131[3] = &__block_descriptor_tmp_61;
          v131[4] = this;
          v131[5] = a6;
          int v21 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v21, (uint64_t)v131);
          goto LABEL_114;
        }
      }
      goto LABEL_117;
    }
    if (mSelector != 1634429294)
    {
      if (mSelector == 1635087471)
      {
        *(void *)AudioObjectPropertyAddress buf = 0;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&buf[16] = 0x2000000000;
        LODWORD(v141) = 1;
        v106[0] = MEMORY[0x1E4F143A8];
        v106[1] = 0x40000000;
        v106[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_92;
        v106[3] = &unk_1E6231AC8;
        v106[4] = buf;
        v106[5] = this;
        int64_t v59 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v59, (uint64_t)v106);
        *a6 = *(_DWORD *)(*(void *)&buf[8] + 24);
        *a5 = 4;
      }
      else
      {
        if (mSelector != 1667329635) {
          goto LABEL_117;
        }
        if (a7 != 4)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1553;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyDataSize: bad qualifier data size for property 'canc'", buf, 0x12u);
          }
          uint64_t v79 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v79 = off_1F148A5D8;
          v79[2] = 561211770;
        }
        if (!a8)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1554;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyDataSize: inQualifierData was NULL for property 'canc'", buf, 0x12u);
          }
          uint64_t v96 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v96 = off_1F148A5D8;
          v96[2] = 2003329396;
        }
        int v25 = *a8;
        *(void *)AudioObjectPropertyAddress buf = 0;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&buf[16] = 0x3802000000;
        float32x4_t v141 = __Block_byref_object_copy__33;
        float32x4_t v142 = __Block_byref_object_dispose__34;
        float32x4_t v143 = 0;
        LODWORD(v144) = 0;
        uint64_t v113 = 0;
        CFNumberRef v114 = (const __CFNumber *)&v113;
        uint64_t v115 = 0x2000000000;
        LODWORD(v116) = 0;
        v110[0] = MEMORY[0x1E4F143A8];
        v110[1] = 0x40000000;
        v110[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_83;
        v110[3] = &unk_1E6231A60;
        int v111 = v25;
        int v112 = (int)a4;
        v110[6] = this;
        v110[7] = a5;
        v110[4] = buf;
        v110[5] = &v113;
        v110[8] = a6;
        unint64_t v26 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v26, (uint64_t)v110);
        if (*((_DWORD *)v114 + 6))
        {
          uint64_t v97 = __cxa_allocate_exception(0x10uLL);
          int v98 = *((_DWORD *)v114 + 6);
          *(void *)uint64_t v97 = off_1F148A5D8;
          v97[2] = v98;
        }
        _Block_object_dispose(&v113, 8);
      }
      _Block_object_dispose(buf, 8);
      return;
    }
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1311;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyRelatedDevices", buf, 0x12u);
      }
      float32x4_t v94 = __cxa_allocate_exception(0x10uLL);
      *(void *)float32x4_t v94 = off_1F148A5D8;
      v94[2] = 561211770;
    }
    int v20 = *((_DWORD *)this + 4);
LABEL_113:
    *a6 = v20;
LABEL_114:
    unsigned int v41 = 4;
LABEL_125:
    *a5 = v41;
    return;
  }
  double v18 = *(double *)&v14;
  char v19 = v15;
  if (mSelector > 1919251298)
  {
    if (mSelector > 1935763059)
    {
      if (mSelector > 1936876643)
      {
        if (mSelector == 1936876644)
        {
          unsigned int TotalNumberChannelsForClient = HALS_Device::GetTotalNumberChannelsForClient(this, mScope == 1768845428, a9);
          int v49 = caulk::numeric::exceptional_mul<unsigned int>(TotalNumberChannelsForClient);
          unsigned int v50 = caulk::numeric::exceptional_add<unsigned int>(v49);
          if (v50 > a4)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1424;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyDefaultChannelLayout", buf, 0x12u);
            }
            float32x4_t v92 = __cxa_allocate_exception(0x10uLL);
            *(void *)float32x4_t v92 = off_1F148A5D8;
            v92[2] = 561211770;
          }
          unsigned int v51 = v50;
          unsigned int v52 = (*(uint64_t (**)(HALS_IOA2Device *, BOOL, HALS_Client *))(*(void *)this + 600))(this, mScope == 1768845428, a9);
          *(void *)a6 = 0;
          a6[2] = v52;
          if (v52)
          {
            uint64_t v53 = v52;
            unsigned int v54 = a6 + 4;
            do
            {
              *((_DWORD *)v54 - 1) = -1;
              void *v54 = 0;
              v54[1] = 0;
              unsigned int v54 = (void *)((char *)v54 + 20);
              --v53;
            }
            while (v53);
          }
          *a5 = v51;
          *(void *)AudioObjectPropertyAddress buf = 0;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&buf[16] = 0x3802000000;
          float32x4_t v141 = __Block_byref_object_copy__72;
          float32x4_t v142 = (uint64_t (*)())__Block_byref_object_dispose__73;
          float32x4_t v143 = (HALS_ObjectMap *)&unk_1F1489968;
          uint64_t v144 = 0;
          v123[0] = MEMORY[0x1E4F143A8];
          v123[1] = 0x40000000;
          v123[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_74;
          uint64_t v123[3] = &unk_1E62319B0;
          v123[5] = this;
          v123[4] = buf;
          BOOL v124 = mScope == 1768845428;
          uint64_t v55 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v55, (uint64_t)v123);
          CFArrayRef v56 = *(const __CFArray **)(*(void *)&buf[8] + 48);
          if (v56)
          {
            unint64_t v57 = 0;
            int64_t v58 = a6 + 3;
            while ((unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v56) > v57
                 && v57 < a6[2])
            {
              OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Number>(&v113, *(void *)&buf[8] + 40, v57);
              *int64_t v58 = OS::CF::Number::GetValue<unsigned int>(v114, 0);
              v58 += 5;
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v113);
              ++v57;
              CFArrayRef v56 = *(const __CFArray **)(*(void *)&buf[8] + 48);
            }
          }
          _Block_object_dispose(buf, 8);
          p_p = (void **)&v143;
          goto LABEL_136;
        }
        if (mSelector == 1953653102)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1302;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyTransportType", buf, 0x12u);
            }
            uint64_t v86 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v86 = off_1F148A5D8;
            v86[2] = 561211770;
          }
          v132[0] = MEMORY[0x1E4F143A8];
          v132[1] = 0x40000000;
          v132[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_58;
          v132[3] = &__block_descriptor_tmp_59;
          v132[4] = this;
          v132[5] = a6;
          long long v32 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v32, (uint64_t)v132);
          goto LABEL_114;
        }
      }
      else
      {
        if (mSelector == 1935763060)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1405;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertySafetyOffset", buf, 0x12u);
            }
            float32x4_t v89 = __cxa_allocate_exception(0x10uLL);
            *(void *)float32x4_t v89 = off_1F148A5D8;
            v89[2] = 561211770;
          }
          v125[0] = MEMORY[0x1E4F143A8];
          v125[1] = 0x40000000;
          v125[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_70;
          v125[3] = &__block_descriptor_tmp_71;
          v125[4] = this;
          v125[5] = a3;
          v125[6] = v14;
          v125[7] = v15;
          v125[8] = a6;
          uint64_t v45 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v45, (uint64_t)v125);
          goto LABEL_114;
        }
        if (mSelector == 1936092276)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1348;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceCanBeDefaultSystemDevice", buf, 0x12u);
            }
            __int16 v78 = __cxa_allocate_exception(0x10uLL);
            *(void *)__int16 v78 = off_1F148A5D8;
            v78[2] = 561211770;
          }
          v129[0] = MEMORY[0x1E4F143A8];
          v129[1] = 0x40000000;
          v129[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_64;
          v129[3] = &__block_descriptor_tmp_65;
          v129[4] = this;
          v129[5] = a6;
          v129[6] = a3;
          v129[7] = a9;
          long long v24 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v24, (uint64_t)v129);
          goto LABEL_114;
        }
      }
      goto LABEL_117;
    }
    if (mSelector > 1919512166)
    {
      if (mSelector == 1919512167)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1396;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyZeroTimeStampPeriod", buf, 0x12u);
          }
          float32x4_t v90 = __cxa_allocate_exception(0x10uLL);
          *(void *)float32x4_t v90 = off_1F148A5D8;
          v90[2] = 561211770;
        }
        v126[0] = MEMORY[0x1E4F143A8];
        v126[1] = 0x40000000;
        v126[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_68;
        v126[3] = &__block_descriptor_tmp_69;
        v126[4] = this;
        v126[5] = a6;
        float32x4_t v46 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v46, (uint64_t)v126);
        goto LABEL_114;
      }
      if (mSelector == 1920168547)
      {
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1545;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyResourceBundle", buf, 0x12u);
          }
          uint64_t v84 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v84 = off_1F148A5D8;
          v84[2] = 561211770;
        }
        v117[0] = MEMORY[0x1E4F143A8];
        v117[1] = 0x40000000;
        v117[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_81;
        uint64_t v117[3] = &__block_descriptor_tmp_82;
        v117[4] = this;
        v117[5] = a6;
        unint64_t v30 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v30, (uint64_t)v117);
        goto LABEL_124;
      }
      goto LABEL_117;
    }
    if (mSelector != 1919251299 && mSelector != 1919251302) {
      goto LABEL_117;
    }
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1636;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyWantsControlsRestored or kAudioDevicePropertyWantsStreamFormatsRestored", buf, 0x12u);
      }
      long long v73 = __cxa_allocate_exception(0x10uLL);
      *(void *)long long v73 = off_1F148A5D8;
      v73[2] = 561211770;
    }
    int v20 = 1;
    goto LABEL_113;
  }
  if (mSelector <= 1836411235)
  {
    switch(mSelector)
    {
      case 1819173229:
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1226;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioObjectPropertyName", buf, 0x12u);
          }
          uint64_t v95 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v95 = off_1F148A5D8;
          v95[2] = 561211770;
        }
        v139[0] = MEMORY[0x1E4F143A8];
        v139[1] = 0x40000000;
        v139[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
        v139[3] = &__block_descriptor_tmp_39_5040;
        v139[4] = this;
        v139[5] = a6;
        uint64_t v61 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v61, (uint64_t)v139);
        goto LABEL_124;
      case 1819569763:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1357;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyLatency", buf, 0x12u);
          }
          float32x4_t v93 = __cxa_allocate_exception(0x10uLL);
          *(void *)float32x4_t v93 = off_1F148A5D8;
          v93[2] = 561211770;
        }
        v127[0] = MEMORY[0x1E4F143A8];
        v127[1] = 0x40000000;
        v127[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_66;
        v127[3] = &__block_descriptor_tmp_67;
        v127[4] = this;
        v127[5] = a3;
        BOOL v128 = mScope == 1768845428;
        v127[6] = v14;
        v127[7] = v15;
        v127[8] = a9;
        v127[9] = a6;
        uint64_t v60 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v60, (uint64_t)v127);
        goto LABEL_114;
      case 1819634020:
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1616;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyLegacyUIDList", buf, 0x12u);
          }
          unint64_t v80 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v80 = off_1F148A5D8;
          v80[2] = 561211770;
        }
        v107[0] = MEMORY[0x1E4F143A8];
        v107[1] = 0x40000000;
        v107[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_90;
        v107[3] = &__block_descriptor_tmp_91;
        v107[4] = this;
        v107[5] = a6;
        AudioObjectPropertyAddress v27 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v27, (uint64_t)v107);
        goto LABEL_124;
    }
    goto LABEL_117;
  }
  if (mSelector <= 1853059618)
  {
    if (mSelector == 1836411236)
    {
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1293;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyModelUID", buf, 0x12u);
        }
        uint64_t v88 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v88 = off_1F148A5D8;
        v88[2] = 561211770;
      }
      v133[0] = MEMORY[0x1E4F143A8];
      v133[1] = 0x40000000;
      void v133[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_56;
      v133[3] = &__block_descriptor_tmp_57;
      v133[4] = this;
      v133[5] = a6;
      uint64_t v35 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v35, (uint64_t)v133);
      goto LABEL_124;
    }
    if (mSelector == 1851878764)
    {
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1235;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA1Device::GetPropertyData: bad property data size for kAudioObjectPropertyName", buf, 0x12u);
        }
        uint64_t v76 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v76 = off_1F148A5D8;
        v76[2] = 561211770;
      }
      v138[0] = MEMORY[0x1E4F143A8];
      v138[1] = 0x40000000;
      v138[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_40;
      v138[3] = &__block_descriptor_tmp_44;
      v138[4] = this;
      v138[5] = a6;
      int v22 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v22, (uint64_t)v138);
      goto LABEL_124;
    }
    goto LABEL_117;
  }
  if (mSelector != 1853059619)
  {
    if (mSelector == 1853059700)
    {
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1448;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: bad property data size for kAudioDevicePropertyNominalSampleRate", buf, 0x12u);
        }
        __int16 v82 = __cxa_allocate_exception(0x10uLL);
        *(void *)__int16 v82 = off_1F148A5D8;
        v82[2] = 561211770;
      }
      if ((_BYTE)v15)
      {
        *(void *)a6 = v14;
        return;
      }
      v122[0] = MEMORY[0x1E4F143A8];
      v122[1] = 0x40000000;
      v122[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_76;
      uint64_t v122[3] = &__block_descriptor_tmp_77;
      v122[4] = this;
      v122[5] = a6;
      uint64_t v67 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v67, (uint64_t)v122);
      goto LABEL_124;
    }
    goto LABEL_117;
  }
  *(void *)AudioObjectPropertyAddress buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&buf[16] = 0x3002000000;
  float32x4_t v141 = __Block_byref_object_copy__30;
  float32x4_t v142 = (uint64_t (*)())__Block_byref_object_dispose__31;
  float32x4_t v143 = 0;
  v121[0] = MEMORY[0x1E4F143A8];
  v121[1] = 0x40000000;
  v121[2] = ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2;
  uint64_t v121[3] = &unk_1E62319F8;
  v121[5] = this;
  v121[4] = buf;
  int v42 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v42, (uint64_t)v121);
  uint64_t v43 = *(unsigned int **)(*(void *)&buf[8] + 40);
  if (v43)
  {
    uint64_t v44 = v43[4];
    uint64_t v113 = 0x676C6F6270667461;
    LODWORD(v114) = 0;
    (*(void (**)(unsigned int *, uint64_t, uint64_t *, void, void, void))(*(void *)v43 + 104))(v43, v44, &v113, 0, 0, 0);
    operator new[]();
  }
  if (v19) {
    double NominalSampleRate = v18;
  }
  else {
    double NominalSampleRate = HALS_IOA2UCDevice::GetNominalSampleRate((const __CFDictionary **)this + 226);
  }
  if (a4 < 0x10)
  {
    unsigned int v69 = 0;
  }
  else
  {
    *(double *)a6 = NominalSampleRate;
    *((double *)a6 + 1) = NominalSampleRate;
    unsigned int v69 = 16;
  }
  *a5 = v69;
  _Block_object_dispose(buf, 8);
  HALS_ObjectMap::ReleaseObject(v143, v70);
}

void sub_1BAC7888C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(v1 - 136), v3);
  _Unwind_Resume(a1);
}

BOOL ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v2 = (const __CFDictionary **)(*(void *)(a1 + 32) + 1808);
  unsigned int v4 = 0;
  BOOL result = HALB_UCObject::CopyProperty_CFString(v2, @"device name", (const __CFString **)&v4);
  **(void **)(a1 + 40) = v4;
  return result;
}

void sub_1BAC789E8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_40(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFTypeRef cf = 0;
  HALB_UCObject::CopyProperty_CFString((const __CFDictionary **)(v2 + 1808), @"device name", (const __CFString **)&cf);
  CFStringRef v4 = (const __CFString *)cf;
  if (!*(unsigned char *)(v2 + 1864))
  {
    *(unsigned char *)(v2 + 1864) = 1;
    CFTypeRef cf = 0;
    char v7 = 1;
    CACFString::~CACFString((CACFString *)&cf);
  }
  int v5 = *(HALB_CFBundle **)(v2 + 1872);
  if (!v5 || !*((void *)v5 + 1))
  {
    if (!v4)
    {
      **(void **)(a1 + 40) = 0;
      return;
    }
    CFRetain(v4);
    **(void **)(a1 + 40) = v4;
LABEL_9:
    CFRelease(v4);
    return;
  }
  **(void **)(a1 + 40) = HALB_CFBundle::CopyLocalizedString(v5, v4, @"IOAudioEngineDescription", v4, v3);
  if (v4) {
    goto LABEL_9;
  }
}

void sub_1BAC78AD8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

BOOL ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_45(uint64_t a1)
{
  uint64_t v2 = (const __CFDictionary **)(*(void *)(a1 + 32) + 1808);
  CFStringRef v4 = 0;
  BOOL result = HALB_UCObject::CopyProperty_CFString(v2, @"device manufacturer", (const __CFString **)&v4);
  **(void **)(a1 + 40) = v4;
  return result;
}

void sub_1BAC78B50(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_47(uint64_t result)
{
  **(void **)(result + 40) = 0;
  return result;
}

uint64_t ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_49(uint64_t result)
{
  **(void **)(result + 40) = 0;
  return result;
}

uint64_t ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_51(uint64_t result)
{
  **(void **)(result + 40) = 0;
  return result;
}

BOOL ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_56(uint64_t a1)
{
  uint64_t v2 = (const __CFDictionary **)(*(void *)(a1 + 32) + 1808);
  CFStringRef v4 = 0;
  BOOL result = HALB_UCObject::CopyProperty_CFString(v2, @"model UID", (const __CFString **)&v4);
  **(void **)(a1 + 40) = v4;
  return result;
}

void sub_1BAC78BE8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_58(uint64_t a1)
{
  uint64_t v2 = (const __CFDictionary **)(*(void *)(a1 + 32) + 1808);
  unsigned int v3 = 0;
  HALB_UCObject::CopyProperty_UInt32(v2, @"transport type", &v3);
  **(_DWORD **)(a1 + 40) = v3;
}

void sub_1BAC78C5C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_60(uint64_t a1)
{
  uint64_t v2 = (const __CFDictionary **)(*(void *)(a1 + 32) + 1808);
  unsigned int v3 = 0;
  HALB_UCObject::CopyProperty_UInt32(v2, @"clock domain", &v3);
  **(_DWORD **)(a1 + 40) = v3;
}

void sub_1BAC78CD0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_62(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, BOOL, void))(**(void **)(a1 + 32) + 568))(*(void *)(a1 + 32), *(_DWORD *)(*(void *)(a1 + 48) + 4) == 1768845428, *(void *)(a1 + 56));
  **(_DWORD **)(a1 + 40) = result != 0;
  return result;
}

void sub_1BAC78D6C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_64(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, BOOL, void))(**(void **)(a1 + 32) + 568))(*(void *)(a1 + 32), *(_DWORD *)(*(void *)(a1 + 48) + 4) == 1768845428, *(void *)(a1 + 56));
  **(_DWORD **)(a1 + 40) = result != 0;
  return result;
}

void sub_1BAC78E04(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_66(uint64_t a1)
{
  uint64_t v2 = *(const __CFDictionary ***)(a1 + 32);
  int v3 = *(_DWORD *)(*(void *)(a1 + 40) + 4);
  unsigned int v9 = 0;
  if (v3 == 1768845428) {
    CFStringRef v4 = @"input latency";
  }
  else {
    CFStringRef v4 = @"output latency";
  }
  HALB_UCObject::CopyProperty_UInt32(v2 + 226, v4, &v9);
  unsigned int v5 = v9;
  if ((*((unsigned int (**)(const __CFDictionary **))*v2 + 55))(v2)) {
    v5 += HALS_Device::GetStreamDSPLatency((HALS_Device *)v2, (const BOOL *)*(unsigned __int8 *)(a1 + 80));
  }
  if (*(unsigned char *)(a1 + 56))
  {
    double v6 = *(double *)(a1 + 48);
    unsigned int v5 = (v6 / (*((double (**)(const __CFDictionary **))*v2 + 33))(v2) * (double)v5);
  }
  char v7 = *(HALS_Client **)(a1 + 64);
  if (v7)
  {
    uint64_t DSPLatencyForClient = HALS_Device::GetDSPLatencyForClient((HALS_Device *)v2, *(unsigned char *)(a1 + 80), v7);
    if ((DSPLatencyForClient & 0xFF00000000) != 0) {
      v5 += DSPLatencyForClient;
    }
  }
  **(_DWORD **)(a1 + 72) = v5;
}

void sub_1BAC78F50(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_68(uint64_t a1)
{
  uint64_t v2 = (const __CFDictionary **)(*(void *)(a1 + 32) + 1808);
  unsigned int v3 = 0;
  HALB_UCObject::CopyProperty_UInt32(v2, @"io buffer frame size", &v3);
  **(_DWORD **)(a1 + 40) = v3;
}

void sub_1BAC78FD0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_70(uint64_t a1)
{
  uint64_t v2 = *(const __CFDictionary ***)(a1 + 32);
  int v3 = *(_DWORD *)(*(void *)(a1 + 40) + 4);
  unsigned int v7 = 0;
  if (v3 == 1768845428) {
    CFStringRef v4 = @"input safety offset";
  }
  else {
    CFStringRef v4 = @"output safety offset";
  }
  HALB_UCObject::CopyProperty_UInt32(v2 + 226, v4, &v7);
  unsigned int v5 = v7;
  if (*(unsigned char *)(a1 + 56))
  {
    double v6 = *(double *)(a1 + 48);
    unsigned int v5 = (v6 / (*((double (**)(const __CFDictionary **))*v2 + 33))(v2) * (double)v5);
  }
  **(_DWORD **)(a1 + 64) = v5;
}

void sub_1BAC790BC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t __Block_byref_object_copy__72(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 40) = &unk_1F1489968;
  return result;
}

void __Block_byref_object_dispose__73(uint64_t a1)
{
}

uint64_t ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_74(uint64_t a1)
{
  uint64_t v2 = (const __CFDictionary **)(*(void *)(a1 + 40) + 1808);
  if (*(unsigned char *)(a1 + 48)) {
    CFStringRef v3 = @"input channel layout";
  }
  else {
    CFStringRef v3 = @"output channel layout";
  }
  unsigned int v7 = 0;
  HALB_UCObject::CopyProperty_CFArray(v2, v3, &v7);
  CFStringRef v4 = v7;
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8) + 40;

  return OS::CF::UntypedObject::operator=(v5, (uint64_t)v4);
}

void sub_1BAC79198(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_76(uint64_t a1)
{
  **(double **)(a1 + 40) = HALS_IOA2UCDevice::GetNominalSampleRate((const __CFDictionary **)(*(void *)(a1 + 32)
                                                                                           + 1808));
}

void sub_1BAC791F0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t __Block_byref_object_copy__30(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__31(uint64_t a1, HALS_Object *a2)
{
}

void ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2(uint64_t a1, HALS_Object *a2)
{
  CFStringRef v3 = *(void **)(a1 + 40);
  CFStringRef v4 = (HALS_ObjectMap **)v3[163];
  if ((HALS_ObjectMap **)v3[164] == v4)
  {
    double v6 = (HALS_ObjectMap **)v3[167];
    unsigned int v7 = (HALS_ObjectMap **)v3[166];
    if (v6 == v7) {
      return;
    }
    uint64_t v5 = *v7;
  }
  else
  {
    uint64_t v5 = *v4;
  }
  HALS_ObjectMap::RetainObject(v5, a2);
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  unsigned int v10 = *(HALS_ObjectMap **)(v9 + 40);
  *(void *)(v9 + 40) = v5;

  HALS_ObjectMap::ReleaseObject(v10, v8);
}

uint64_t ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_79(uint64_t result)
{
  **(_DWORD **)(result + 40) = 0;
  return result;
}

uint64_t ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_81(uint64_t result)
{
  **(void **)(result + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__33(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(result + 40) = v2;
  return result;
}

unsigned int *___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_83(unsigned int *result)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)result + 6);
  uint64_t v2 = *(void *)(v1 + 1904);
  if (v2)
  {
    CFStringRef v3 = (unsigned int **)result;
    unsigned int v4 = result[18];
    uint64_t v5 = v1 + 1904;
    do
    {
      unsigned int v6 = *(_DWORD *)(v2 + 32);
      BOOL v7 = v6 >= v4;
      if (v6 >= v4) {
        int v8 = (uint64_t *)v2;
      }
      else {
        int v8 = (uint64_t *)(v2 + 8);
      }
      if (v7) {
        uint64_t v5 = v2;
      }
      uint64_t v2 = *v8;
    }
    while (*v8);
    if (v5 != v1 + 1904 && v4 >= *(_DWORD *)(v5 + 32))
    {
      uint64_t v9 = *(void *)(*((void *)result + 4) + 8);
      uint64_t v10 = *(void *)(v5 + 40);
      *(_DWORD *)(v9 + 48) = *(_DWORD *)(v5 + 48);
      *(void *)(v9 + 40) = v10;
      uint64_t v11 = *(void *)(*((void *)result + 4) + 8);
      int v12 = *(const void **)(v11 + 40);
      if (v12)
      {
        unsigned int v13 = *(_DWORD *)(v11 + 48);
        if (result[19] <= v13)
        {
          unsigned int v14 = **((_DWORD **)result + 7);
          if (v14 > v13 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            int v17 = 136315394;
            double v18 = "HALS_IOA2Device.cpp";
            __int16 v19 = 1024;
            int v20 = 1569;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: size specified for data exchange block is too large: this should have been caught in the _GetDevicePropertyDataSize check", (uint8_t *)&v17, 0x12u);
            unsigned int v14 = *v3[7];
          }
          *(_DWORD *)(*((void *)v3[5] + 1) + 24) = HALS_IOA2UCDevice::MoveDataExchangeBlockData((HALS_IOA2UCDevice *)(v1 + 1808), *((_DWORD *)v3 + 18), 0, v14);
          uint64_t result = v3[8];
          if (result) {
            return (unsigned int *)memcpy(result, v12, *v3[7]);
          }
          return result;
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          int v17 = 136315394;
          double v18 = "HALS_IOA2Device.cpp";
          __int16 v19 = 1024;
          int v20 = 1565;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyData: wrong data size for property 'canc'", (uint8_t *)&v17, 0x12u);
        }
        int v15 = 561211770;
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          int v17 = 136315394;
          double v18 = "HALS_IOA2Device.cpp";
          __int16 v19 = 1024;
          int v20 = 1564;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::GetPropertyDataSize: bad block ID for property 'canc'", (uint8_t *)&v17, 0x12u);
        }
        int v15 = 2003329396;
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = v15;
    }
  }
  return result;
}

void sub_1BAC795A8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    unsigned int v4 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      *(_DWORD *)(*(void *)(*(void *)(v2 + 40) + 8) + 24) = v4[2];
    }
    else {
      *(_DWORD *)(*(void *)(*(void *)(v2 + 40) + 8) + 24) = 2003329396;
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAC79454);
  }
  _Unwind_Resume(a1);
}

CFTypeID ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_88(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (const __CFDictionary **)(*(void *)(a1 + 32) + 1808);
  *(void *)CFTypeRef cf = 0;
  if (HALB_UCObject::CopyProperty_CFType(v2, @"headset info", (const void **)cf))
  {
    CFStringRef v3 = *(const void **)cf;
    CFTypeID v4 = CFGetTypeID(*(CFTypeRef *)cf);
    CFTypeID result = CFDictionaryGetTypeID();
    if (v4 == result)
    {
      if (v3) {
        goto LABEL_7;
      }
    }
    else
    {
      CFRelease(v3);
    }
  }
  CFTypeID result = (CFTypeID)CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  CFStringRef v3 = (const void *)result;
  if (!result)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CFTypeRef cf = 136315394;
      *(void *)&cf[4] = "HALS_IOA2UCDevice.cpp";
      __int16 v8 = 1024;
      int v9 = 285;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::CopyHeadsetInfo: could not allocate an empty dictionary", cf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003329396;
  }
LABEL_7:
  **(void **)(a1 + 40) = v3;
  return result;
}

void ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_90(uint64_t a1)
{
  uint64_t v2 = (const __CFDictionary **)(*(void *)(a1 + 32) + 1808);
  uint64_t v10 = 0;
  if (!HALB_UCObject::CopyProperty_CFArray(v2, @"legacy UID list", &v10))
  {
    value = 0;
    char v9 = 1;
    CFTypeRef cf = 0;
    if (HALB_UCObject::CopyProperty_CFString(v2, @"legacy UID list", (const __CFString **)&cf))
    {
      CFTypeRef v3 = cf;
      CACFString::operator=((uint64_t)&value, cf);
      if (v3) {
        CFRelease(v3);
      }
    }
    if (value)
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
      CFTypeRef cf = Mutable;
      __int16 v7 = 257;
      if (Mutable && (CFArrayAppendValue(Mutable, value), cf))
      {
        CFRetain(cf);
        uint64_t v5 = (__CFArray *)cf;
      }
      else
      {
        uint64_t v5 = 0;
      }
      uint64_t v10 = v5;
      CACFArray::~CACFArray((CACFArray *)&cf);
    }
    CACFString::~CACFString((CACFString *)&value);
  }
  **(void **)(a1 + 40) = v10;
}

void sub_1BAC798D4(void *a1)
{
  CACFArray::~CACFArray((CACFArray *)&v2);
  CACFString::~CACFString((CACFString *)&v3);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_92(uint64_t a1)
{
  uint64_t v2 = (const __CFDictionary **)(*(void *)(a1 + 40) + 1808);
  unsigned int v3 = 1;
  HALB_UCObject::CopyProperty_UInt32(v2, @"allows auto route", &v3);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
}

void sub_1BAC7997C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v9 = 0;
  OS::CF::DictionaryBase<__CFDictionary const*>::operator[]((uint64_t)v5, *(CFDictionaryRef *)(a1 + 48), @"registry key");
  CFTypeID TypeID = OS::CF::UntypedObject::GetTypeID(cf);
  if (TypeID == (const void *)CFStringGetTypeID())
  {
    CFStringRef v4 = (const __CFString *)cf;
    if (cf) {
      CFRetain(cf);
    }
    CFStringRef v8 = v4;
  }
  else
  {
    CFStringRef v4 = 0;
    CFStringRef v8 = 0;
  }
  __int16 v7 = &unk_1F1489A20;
  HALB_UCObject::CopyProperty_CFType((const __CFDictionary **)(v2 + 1808), v4, (const void **)&v9);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v7);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v5);
  **(void **)(a1 + 56) = v9;
}

void sub_1BAC79A90(void *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va1);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAC79A78);
}

_DWORD *___ZNK15HALS_IOA2Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_99(uint64_t a1)
{
  CFTypeID result = HALS_IOA2Device::_FindCustomControlForDeviceAddress(*(HALS_IOA2Device **)(a1 + 48), *(const AudioObjectPropertyAddress **)(a1 + 56), (AudioObjectPropertyAddress *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAC79AF8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void __destroy_helper_block_e8_40c24_ZTSN2OS2CF10DictionaryE(uint64_t a1)
{
}

OS::CF::UntypedObject *__copy_helper_block_e8_40c24_ZTSN2OS2CF10DictionaryE(uint64_t a1, uint64_t a2)
{
  CFTypeID result = OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(a1 + 40), *(CFTypeRef *)(a2 + 48));
  *(void *)(a1 + 40) = &unk_1F14898A0;
  return result;
}

uint64_t HALS_IOA2Device::GetPropertyDataSize(HALS_IOA2Device *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4, int *a5, AudioObjectPropertyAddress *a6)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_IOA2Device *, uint64_t, AudioObjectPropertyAddress *, AudioObjectPropertyAddress *))(*(void *)this + 88))(this, a2, a3, a6) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  signed int mSelector = a3->mSelector;
  uint64_t PropertyDataSize = 4;
  if ((int)a3->mSelector > 1751474531)
  {
    if (mSelector > 1919251298)
    {
      if (mSelector == 1919251299 || mSelector == 1919251302) {
        return PropertyDataSize;
      }
      if (mSelector != 1920168547) {
        goto LABEL_28;
      }
      return 8;
    }
    if (mSelector == 1751474532) {
      return 8;
    }
    if (mSelector == 1853059619)
    {
      *(void *)AudioObjectPropertyAddress buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&buf[16] = 0x3002000000;
      CFIndex v38 = __Block_byref_object_copy__30;
      uint64_t v39 = __Block_byref_object_dispose__31;
      int v40 = 0;
      v34[0] = MEMORY[0x1E4F143A8];
      v34[1] = 0x40000000;
      uint64_t v34[2] = ___ZNK15HALS_IOA2Device19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke;
      v34[3] = &unk_1E6231778;
      v34[4] = buf;
      v34[5] = this;
      int v15 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v15, (uint64_t)v34);
      int v16 = *(unsigned int **)(*(void *)&buf[8] + 40);
      if (v16)
      {
        uint64_t v17 = v16[4];
        strcpy(v35, "atfpbolg");
        v35[9] = 0;
        *(_WORD *)&v35[10] = 0;
        (*(void (**)(unsigned int *, uint64_t, unsigned char *, void, void, void))(*(void *)v16 + 104))(v16, v17, v35, 0, 0, 0);
        operator new[]();
      }
      uint64_t PropertyDataSize = 16;
      _Block_object_dispose(buf, 8);
      HALS_ObjectMap::ReleaseObject(v40, v24);
      return PropertyDataSize;
    }
LABEL_28:
    HALS_IOA2Device::GetCustomPropertyInfoByAddress((HALS_IOA2Device *)__p, (const AudioObjectPropertyAddress *)this, (CAPropertyAddress *)a3);
    if (__p[1])
    {
      uint64_t PropertyDataSize = 8;
    }
    else
    {
      *(void *)uint64_t v35 = 0;
      *(void *)&void v35[8] = v35;
      *(void *)&v35[16] = 0x2000000000;
      uint64_t v36 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&buf[16] = 0x3802000000;
      CFIndex v38 = __Block_byref_object_copy__25;
      uint64_t v39 = (void (*)(uint64_t, HALS_Object *))__Block_byref_object_dispose__26;
      int v40 = 0;
      int v41 = 0;
      v30[0] = MEMORY[0x1E4F143A8];
      v30[1] = 0x40000000;
      unsigned int v30[2] = ___ZNK15HALS_IOA2Device19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_37;
      v30[3] = &unk_1E62317C8;
      v30[6] = this;
      v30[7] = a3;
      v30[4] = v35;
      void v30[5] = buf;
      int v20 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v20, (uint64_t)v30);
      int v22 = *(unsigned int **)(*(void *)&v35[8] + 24);
      if (v22)
      {
        uint64_t PropertyDataSize = (*(uint64_t (**)(unsigned int *, void, uint64_t, HALS_Client *, int *, AudioObjectPropertyAddress *))(*(void *)v22 + 104))(v22, v22[4], *(void *)&buf[8] + 40, a4, a5, a6);
        HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(*(void *)&v35[8] + 24), v23);
      }
      else
      {
        uint64_t PropertyDataSize = HALS_Device::GetPropertyDataSize((HALS_Device ***)this, v21, a3, a4, a5, a6);
      }
      _Block_object_dispose(buf, 8);
      _Block_object_dispose(v35, 8);
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)__p);
    return PropertyDataSize;
  }
  if (mSelector <= 1667329634)
  {
    if (mSelector == 1634429294 || mSelector == 1635087471) {
      return PropertyDataSize;
    }
    goto LABEL_28;
  }
  if (mSelector != 1667329635)
  {
    if (mSelector == 1668641652) {
      return 12 * OS::CF::ArrayBase<__CFArray const*>::GetSize(*((const __CFArray **)this + 224));
    }
    goto LABEL_28;
  }
  if (a4 != 4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1144;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::_GetPropertyDataSize: bad qualifier data size for property 'canc'", buf, 0x12u);
    }
    AudioObjectPropertyAddress v27 = __cxa_allocate_exception(0x10uLL);
    *(void *)AudioObjectPropertyAddress v27 = off_1F148A5D8;
    uint64_t v27[2] = 561211770;
  }
  if (!a5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1145;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::_GetPropertyDataSize: inQualifierData was NULL for property 'canc'", buf, 0x12u);
    }
    long long v28 = __cxa_allocate_exception(0x10uLL);
    *(void *)long long v28 = off_1F148A5D8;
    _OWORD v28[2] = 2003329396;
  }
  int v18 = *a5;
  *(void *)AudioObjectPropertyAddress buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&buf[16] = 0x3802000000;
  CFIndex v38 = __Block_byref_object_copy__33;
  uint64_t v39 = (void (*)(uint64_t, HALS_Object *))__Block_byref_object_dispose__34;
  int v40 = 0;
  int v41 = 0;
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 0x40000000;
  v31[2] = ___ZNK15HALS_IOA2Device19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_35;
  v31[3] = &unk_1E62317A0;
  int v32 = v18;
  v31[4] = buf;
  v31[5] = this;
  __int16 v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v19, (uint64_t)v31);
  if (!*(void *)(*(void *)&buf[8] + 40))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v35 = 136315394;
      *(void *)&v35[4] = "HALS_IOA2Device.cpp";
      *(_WORD *)&v35[12] = 1024;
      *(_DWORD *)&unsigned char v35[14] = 1157;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::_GetPropertyDataSize: bad block ID for property 'canc'", v35, 0x12u);
    }
    int v29 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v29 = off_1F148A5D8;
    v29[2] = 2003329396;
  }
  uint64_t PropertyDataSize = *(unsigned int *)(*(void *)&buf[8] + 48);
  _Block_object_dispose(buf, 8);
  return PropertyDataSize;
}

void sub_1BAC7A468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p)
{
  MEMORY[0x1C1859810](v26, 0x1000C8021716A34);
  _Block_object_dispose((const void *)(v27 - 144), 8);
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(v27 - 104), v29);
  _Unwind_Resume(a1);
}

void ___ZNK15HALS_IOA2Device19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke(uint64_t a1, HALS_Object *a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  CFStringRef v4 = (HALS_ObjectMap **)v3[163];
  if ((HALS_ObjectMap **)v3[164] == v4)
  {
    unsigned int v6 = (HALS_ObjectMap **)v3[167];
    __int16 v7 = (HALS_ObjectMap **)v3[166];
    if (v6 == v7) {
      return;
    }
    uint64_t v5 = *v7;
  }
  else
  {
    uint64_t v5 = *v4;
  }
  HALS_ObjectMap::RetainObject(v5, a2);
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v10 = *(HALS_ObjectMap **)(v9 + 40);
  *(void *)(v9 + 40) = v5;

  HALS_ObjectMap::ReleaseObject(v10, v8);
}

uint64_t ___ZNK15HALS_IOA2Device19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_35(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  uint64_t v2 = *(void *)(v1 + 1904);
  if (v2)
  {
    uint64_t v3 = v1 + 1904;
    unsigned int v4 = *(_DWORD *)(result + 48);
    uint64_t v5 = v1 + 1904;
    do
    {
      unsigned int v6 = *(_DWORD *)(v2 + 32);
      BOOL v7 = v6 >= v4;
      if (v6 >= v4) {
        CFStringRef v8 = (uint64_t *)v2;
      }
      else {
        CFStringRef v8 = (uint64_t *)(v2 + 8);
      }
      if (v7) {
        uint64_t v5 = v2;
      }
      uint64_t v2 = *v8;
    }
    while (*v8);
    if (v5 != v3 && v4 >= *(_DWORD *)(v5 + 32))
    {
      uint64_t v9 = *(void *)(*(void *)(result + 32) + 8);
      uint64_t v10 = *(void *)(v5 + 40);
      *(_DWORD *)(v9 + 48) = *(_DWORD *)(v5 + 48);
      *(void *)(v9 + 40) = v10;
    }
  }
  return result;
}

_DWORD *___ZNK15HALS_IOA2Device19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_37(uint64_t a1)
{
  CFTypeID result = HALS_IOA2Device::_FindCustomControlForDeviceAddress(*(HALS_IOA2Device **)(a1 + 48), *(const AudioObjectPropertyAddress **)(a1 + 56), (AudioObjectPropertyAddress *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAC7A658(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_IOA2Device::IsPropertySettable(AudioObjectPropertyAddress *this, unsigned int a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  if (((*(uint64_t (**)(AudioObjectPropertyAddress *))(*(void *)&this->mSelector + 88))(this) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1751474531)
  {
    if (mSelector != 1635087471)
    {
      if (mSelector == 1667329635) {
        return 1;
      }
      if (mSelector != 1668641652) {
        goto LABEL_16;
      }
    }
    return 0;
  }
  if (mSelector == 1751474532) {
    return 0;
  }
  if (mSelector == 1919251299 || mSelector == 1919251302) {
    return 0;
  }
LABEL_16:
  HALS_IOA2Device::GetCustomPropertyInfoByAddress((HALS_IOA2Device *)v28, this, (CAPropertyAddress *)a3);
  if (v29)
  {
    uint64_t IsPropertySettable = 0;
  }
  else
  {
    uint64_t v24 = 0;
    int v25 = &v24;
    uint64_t v26 = 0x2000000000;
    uint64_t v27 = 0;
    uint64_t v17 = 0;
    int v18 = &v17;
    uint64_t v19 = 0x3802000000;
    int v20 = __Block_byref_object_copy__25;
    uint64_t v21 = __Block_byref_object_dispose__26;
    uint64_t v22 = 0;
    int v23 = 0;
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 0x40000000;
    v16[2] = ___ZNK15HALS_IOA2Device18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke;
    void v16[3] = &unk_1E6231750;
    v16[6] = this;
    v16[7] = a3;
    v16[4] = &v24;
    void v16[5] = &v17;
    uint64_t v11 = (HALB_Mutex *)(*(uint64_t (**)(AudioObjectPropertyAddress *))(*(void *)&this->mSelector + 56))(this);
    HALB_CommandGate::ExecuteCommand(v11, (uint64_t)v16);
    unsigned int v13 = (unsigned int *)v25[3];
    if (v13)
    {
      uint64_t IsPropertySettable = (*(uint64_t (**)(unsigned int *, void, uint64_t *, AudioObjectPropertyAddress *))(*(void *)v13 + 96))(v13, v13[4], v18 + 5, a4);
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v25[3], v14);
    }
    else
    {
      uint64_t IsPropertySettable = HALS_Device::IsPropertySettable((HALS_Device ***)this, v12, a3, a4);
    }
    _Block_object_dispose(&v17, 8);
    _Block_object_dispose(&v24, 8);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v28);
  return IsPropertySettable;
}

void sub_1BAC7A928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 80), 8);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v10 - 48));
  _Unwind_Resume(a1);
}

_DWORD *___ZNK15HALS_IOA2Device18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke(uint64_t a1)
{
  CFTypeID result = HALS_IOA2Device::_FindCustomControlForDeviceAddress(*(HALS_IOA2Device **)(a1 + 48), *(const AudioObjectPropertyAddress **)(a1 + 56), (AudioObjectPropertyAddress *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAC7A994(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t __Block_byref_object_copy__5093(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 40) = &unk_1F1489A20;
  return result;
}

void __Block_byref_object_dispose__5094(uint64_t a1)
{
}

uint64_t ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = (const __CFDictionary **)(*(void *)(a1 + 40) + 1808);
  unsigned int v6 = 0;
  HALB_UCObject::CopyProperty_CFString(v2, @"device manufacturer", (const __CFString **)&v6);
  uint64_t v3 = v6;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8) + 40;

  return OS::CF::UntypedObject::operator=(v4, (uint64_t)v3);
}

void sub_1BAC7AA50(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_3(uint64_t a1)
{
  return OS::CF::UntypedObject::operator=(*(void *)(*(void *)(a1 + 32) + 8) + 40, 0);
}

uint64_t ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_4(uint64_t a1)
{
  return OS::CF::UntypedObject::operator=(*(void *)(*(void *)(a1 + 32) + 8) + 40, 0);
}

uint64_t ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_5(uint64_t a1)
{
  uint64_t v2 = (const __CFDictionary **)(*(void *)(a1 + 40) + 1808);
  unsigned int v6 = 0;
  HALB_UCObject::CopyProperty_CFString(v2, @"model UID", (const __CFString **)&v6);
  uint64_t v3 = v6;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8) + 40;

  return OS::CF::UntypedObject::operator=(v4, (uint64_t)v3);
}

void sub_1BAC7AB00(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_6(uint64_t a1)
{
  return OS::CF::UntypedObject::operator=(*(void *)(*(void *)(a1 + 32) + 8) + 40, 0);
}

void ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_7(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  CFStringRef v4 = CFStringCreateWithCString(0, "Codec", 0x600u);
  char v5 = 1;
  if (CFStringCompare(*(CFStringRef *)(v2 + 96), v4, 0)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = *(void *)(v2 + 1912) != 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  CACFString::~CACFString((CACFString *)&v4);
}

void sub_1BAC7ABC0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_8(uint64_t a1)
{
  BOOL result = HALB_UCObject::HasProperty((HALB_UCObject *)(*(void *)(a1 + 40) + 1808), @"headset info");
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAC7AC24(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

BOOL ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_9(uint64_t a1)
{
  BOOL result = HALB_UCObject::HasProperty((HALB_UCObject *)(*(void *)(a1 + 40) + 1808), @"legacy UID list");
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAC7AC84(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

BOOL ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_10(uint64_t a1)
{
  BOOL result = HALB_UCObject::HasProperty((HALB_UCObject *)(*(void *)(a1 + 40) + 1808), @"allows auto route");
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAC7ACE4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

_DWORD *___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_27(uint64_t a1)
{
  BOOL result = HALS_IOA2Device::_FindCustomControlForDeviceAddress(*(HALS_IOA2Device **)(a1 + 48), *(const AudioObjectPropertyAddress **)(a1 + 56), (AudioObjectPropertyAddress *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAC7AD44(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_IOA2Device::CopyResourceBundle(HALS_IOA2Device *this)
{
  uint64_t v5 = 0;
  unsigned int v6 = &v5;
  uint64_t v7 = 0x2000000000;
  uint64_t v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK15HALS_IOA2Device18CopyResourceBundleEv_block_invoke;
  v4[3] = &unk_1E6231C20;
  v4[4] = &v5;
  unsigned char v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BAC7AE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZNK15HALS_IOA2Device18CopyResourceBundleEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (!*(unsigned char *)(v2 + 1864))
  {
    *(unsigned char *)(v2 + 1864) = 1;
    uint64_t v5 = 0;
    char v6 = 1;
    CACFString::~CACFString((CACFString *)&v5);
  }
  uint64_t v3 = *(void *)(v2 + 1872);
  if (v3)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(v3 + 8);
    CFStringRef v4 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    CFRetain(v4);
  }
}

uint64_t HALS_IOA2Device::_Deactivate(HALS_IOA2Device **this)
{
  HALS_IOA2Device::_CloseConnection(this);
  HALS_IOA2Device::_TeardownStreams((HALS_IOA2Device *)this);
  HALS_IOA2Device::_TeardownControls((HALS_IOA2Device *)this);
  if (*((unsigned char *)this + 1864))
  {
    uint64_t v2 = this[234];
    if (v2) {
      (*(void (**)(HALS_IOA2Device *))(*(void *)v2 + 8))(v2);
    }
    *((unsigned char *)this + 1864) = 0;
    this[234] = 0;
  }
  int v3 = *((_DWORD *)this + 462);
  *((_DWORD *)this + 462) = 0;
  CFStringRef v4 = (AMCP::Utility::Dispatch_Queue *)(*((uint64_t (**)(HALS_IOA2Device **))*this + 8))(this);
  AMCP::Utility::Dispatch_Queue::remove_mach_port_receiver(v4, v3);

  return HALS_Device::_Deactivate((HALS_Device *)this);
}

void HALS_IOA2Device::_TeardownStreams(HALS_IOA2Device *this)
{
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    char v4 = v3;
    uint64_t v5 = (char *)this + 24 * v2;
    char v6 = v5 + 1312;
    uint64_t v7 = *((void *)v5 + 164);
    if (v7 != *((void *)v5 + 163))
    {
      unint64_t v8 = 0;
      uint64_t v9 = (uint64_t *)(v5 + 1304);
      unsigned int v10 = 1;
      uint64_t v7 = *((void *)v5 + 163);
      do
      {
        uint64_t v11 = *(HALS_ObjectMap **)(v7 + 8 * v8);
        (*(void (**)(HALS_ObjectMap *))(*(void *)v11 + 8))(v11);
        HALS_ObjectMap::ObjectIsDead(v11, v12);
        unint64_t v8 = v10;
        uint64_t v7 = *v9;
        ++v10;
      }
      while (v8 < (*v6 - *v9) >> 3);
    }
    char v3 = 0;
    void *v6 = v7;
    uint64_t v2 = 1;
  }
  while ((v4 & 1) != 0);
}

void HALS_IOA2Device::_TeardownControls(HALS_IOA2Device *this)
{
  uint64_t v2 = *((void *)this + 170);
  if (v2 != *((void *)this + 169))
  {
    unint64_t v3 = 0;
    unsigned int v4 = 1;
    uint64_t v2 = *((void *)this + 169);
    do
    {
      uint64_t v5 = *(HALS_ObjectMap **)(v2 + 8 * v3);
      (*(void (**)(HALS_ObjectMap *))(*(void *)v5 + 8))(v5);
      HALS_ObjectMap::ObjectIsDead(v5, v6);
      unint64_t v3 = v4;
      uint64_t v2 = *((void *)this + 169);
      ++v4;
    }
    while (v3 < (*((void *)this + 170) - v2) >> 3);
  }
  *((void *)this + 170) = v2;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 173));
  *((void *)this + 172) = (char *)this + 1384;
  *((void *)this + 174) = 0;
  *((void *)this + 173) = 0;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 176));
  *((void *)this + 175) = (char *)this + 1408;
  *((void *)this + 177) = 0;
  *((void *)this + 176) = 0;
}

void HALS_IOA2Device::~HALS_IOA2Device(HALS_IOA2Device *this)
{
  HALS_IOA2Device::~HALS_IOA2Device(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t v2;
  HALS_Object *v3;
  void *v4;
  uint64_t i;
  void *v6;
  uint64_t v7[2];
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t vars8;

  *(void *)this = &unk_1F1467DA0;
  uint64_t v2 = *((void *)this + 222);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    HALS_ObjectMap::ObjectIsDead(*((HALS_ObjectMap **)this + 222), v3);
    *((void *)this + 222) = 0;
  }
  v7[0] = 0;
  v7[1] = 0;
  HALS_System::GetInstance(&v8, 0, v7);
  HALS_IOContext_Manager::destroy_engine_for_device(*(os_unfair_lock_s **)(v8 + 1392), this);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 238));
  CACFArray::~CACFArray((HALS_IOA2Device *)((char *)this + 1880));
  HALB_MachPort::~HALB_MachPort((mach_port_name_t *)this + 462);
  HALB_UCObject::~HALB_UCObject((HALS_IOA2Device *)((char *)this + 1808));
  OS::CF::UntypedObject::~UntypedObject((HALS_IOA2Device *)((char *)this + 1784));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_IOA2Device *)((char *)this + 1456));
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 176));
  std::__function::__value_func<BOOL ()(AudioObjectPropertyAddress const&,AudioObjectPropertyAddress const&)>::~__value_func[abi:ne180100]((void *)this + 178);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 173));
  unsigned int v4 = (void *)*((void *)this + 169);
  if (v4)
  {
    *((void *)this + 170) = v4;
    operator delete(v4);
  }
  for (unsigned int i = 0; i != -48; i -= 24)
  {
    char v6 = *(void **)((char *)this + i + 1328);
    if (v6)
    {
      *(void *)((char *)this + i + 1336) = v6;
      operator delete(v6);
    }
  }

  HALS_Device::~HALS_Device(this);
}

void *std::__function::__value_func<BOOL ()(AudioObjectPropertyAddress const&,AudioObjectPropertyAddress const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t HALS_IOA2Device::Activate(HALS_IOA2Device *this)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  int v2 = *((_DWORD *)this + 4);
  HALS_IOA2Device::_UpdateStreams((uint64_t)this, (uint64_t)v52);
  int v49 = MEMORY[0x1C18597F0]();
  unsigned int v50 = this;
  HALS_IOA2Device::_UpdateControls(this, &v51);
  int v47 = MEMORY[0x1C18597F0]();
  int v48 = this;
  *(void *)AudioObjectPropertyAddress buf = 0;
  HALB_UCObject::CopyProperty_CFArray((const __CFDictionary **)this + 226, @"custom property info", (const __CFArray **)buf);
  uint64_t v3 = OS::CF::UntypedObject::operator=((uint64_t)this + 1784, *(uint64_t *)buf);
  if (!*((void *)this + 222)) {
    operator new();
  }
  int v45 = MEMORY[0x1C18597F0](v3);
  float32x4_t v46 = this;
  uint64_t v4 = (*(uint64_t (**)(HALS_IOA2Device *))(*(void *)this + 64))(this);
  uintptr_t v5 = *((unsigned int *)this + 462);
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 0x40000000;
  handler[2] = ___ZN15HALS_IOA2Device8ActivateEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_5107;
  int v44 = v2;
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Dispatch_Queue.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 231;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Dispatch_Queue::install_mach_port_receiver: a mach port is required", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  uint64_t v6 = v4;
  char v7 = *((unsigned char *)this + 1852);
  char v8 = *((unsigned char *)this + 1853);
  uint64_t v9 = (std::mutex *)(v4 + 152);
  std::mutex::lock((std::mutex *)(v4 + 152));
  uint64_t v10 = *(void *)(v6 + 128);
  uint64_t v11 = *(void *)(v6 + 136);
  if (v10 != v11)
  {
    while (*(_DWORD *)(v10 + 8) != v5)
    {
      v10 += 16;
      if (v10 == v11) {
        goto LABEL_9;
      }
    }
  }
  if (v10 == v11)
  {
LABEL_9:
    int v12 = dispatch_source_create(MEMORY[0x1E4F14458], v5, 0, *(dispatch_queue_t *)v6);
    if (!v12)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Dispatch_Queue.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 242;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Dispatch_Queue::install_mach_port_receiver: failed to create the mach port event source", buf, 0x12u);
      }
      uint64_t v36 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v36 = off_1F148A5D8;
      unsigned int v36[2] = 2003329396;
    }
    unsigned int v13 = v12;
    dispatch_source_set_event_handler(v12, handler);
    *(void *)AudioObjectPropertyAddress buf = MEMORY[0x1E4F143A8];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&buf[16] = ___ZN4AMCP7Utility14Dispatch_Queue26install_mach_port_receiverEjU13block_pointerFvvEbb_block_invoke;
    unsigned int v54 = &__block_descriptor_tmp_2_4679;
    int v55 = v5;
    char v56 = v7;
    char v57 = v8;
    dispatch_source_set_cancel_handler(v13, buf);
    unint64_t v15 = *(void *)(v6 + 136);
    unint64_t v14 = *(void *)(v6 + 144);
    if (v15 >= v14)
    {
      uint64_t v17 = *(void *)(v6 + 128);
      uint64_t v18 = (uint64_t)(v15 - v17) >> 4;
      if ((unint64_t)(v18 + 1) >> 60) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v19 = v14 - v17;
      uint64_t v20 = v19 >> 3;
      if (v19 >> 3 <= (unint64_t)(v18 + 1)) {
        uint64_t v20 = v18 + 1;
      }
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v20;
      }
      if (v21 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v22 = (char *)operator new(16 * v21);
      int v23 = &v22[16 * v18];
      uint64_t v24 = &v22[16 * v21];
      *(void *)int v23 = v13;
      *((_DWORD *)v23 + 2) = v5;
      dispatch_retain(v13);
      int v16 = v23 + 16;
      uint64_t v26 = *(_DWORD **)(v6 + 128);
      int v25 = *(_DWORD **)(v6 + 136);
      if (v25 == v26)
      {
        *(void *)(v6 + 128) = v23;
        *(void *)(v6 + 136) = v16;
        *(void *)(v6 + 144) = v24;
        if (!v25) {
          goto LABEL_31;
        }
      }
      else
      {
        do
        {
          long long v28 = *((void *)v25 - 2);
          v25 -= 4;
          uint64_t v27 = v28;
          *((void *)v23 - 2) = v28;
          v23 -= 16;
          *((_DWORD *)v23 + 2) = v25[2];
          if (v28) {
            dispatch_retain(v27);
          }
        }
        while (v25 != v26);
        uint64_t v29 = *(_DWORD **)(v6 + 128);
        int v25 = *(_DWORD **)(v6 + 136);
        *(void *)(v6 + 128) = v23;
        *(void *)(v6 + 136) = v16;
        *(void *)(v6 + 144) = v24;
        if (v25 != v29)
        {
          unint64_t v30 = v25;
          do
          {
            int v32 = *((void *)v30 - 2);
            v30 -= 4;
            long long v31 = v32;
            if (v32)
            {
              dispatch_release(v31);
              *((void *)v25 - 2) = 0;
            }
            int v25 = v30;
          }
          while (v30 != v29);
          int v25 = v29;
        }
        if (!v25) {
          goto LABEL_31;
        }
      }
      operator delete(v25);
    }
    else
    {
      *(void *)unint64_t v15 = v13;
      *(_DWORD *)(v15 + 8) = v5;
      dispatch_retain(v13);
      int v16 = (char *)(v15 + 16);
    }
LABEL_31:
    *(void *)(v6 + 136) = v16;
    dispatch_release(v13);
    dispatch_resume(v13);
  }
  std::mutex::unlock(v9);
  *(_DWORD *)AudioObjectPropertyAddress buf = MEMORY[0x1C18597F0]();
  *(void *)&uint8_t buf[8] = this;
  if (*((unsigned char *)this + 1800)) {
    HALS_IOA2Device::_OpenConnection(this);
  }
  int v41 = MEMORY[0x1C18597F0]();
  uint64_t v42 = this;
  v38[0] = 0;
  v38[1] = 0;
  HALS_System::GetInstance(&v39, 0, v38);
  BOOL has_engine_for_device = HALS_IOContext_Manager::has_engine_for_device(*(HALS_IOContext_Manager **)(v39 + 1392), this);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (!has_engine_for_device)
  {
    v37[0] = 0;
    v37[1] = 0;
    HALS_System::GetInstance(&v39, 0, v37);
    HALS_IOContext_Manager::create_engine_for_device(*(os_unfair_lock_s **)(v39 + 1392), this);
    if (v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v40);
    }
  }
  HALS_Device::Activate((const __CFString **)this);
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_4,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&v41);
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_3,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)buf);
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_2,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&v45);
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_1,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&v47);
  return applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&v49);
}

void sub_1BAC7B8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  MEMORY[0x1C1859840](v26, 0x10E1C40CD27C91ELL);
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_1,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&a24);
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_IOA2Device8ActivateEv_block_invoke(uint64_t a1)
{
  mach_msg_return_t v7;
  uint64_t v8;
  uint8x8_t v9;
  unsigned char *v10;
  int v11;
  _DWORD *v12;
  int v13;
  int *v14;
  int v16;
  HALB_Mutex *v17;
  unsigned int *v18;
  HALS_Object *v19;
  int v20;
  HALB_Mutex *v21;
  void (**v22)(unsigned int *, unsigned char *);
  void *v25;
  int v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  BOOL v31;
  AudioObjectPropertyAddress *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned char *v47;
  unsigned char *v48;
  __int32 v49;
  int16x8_t v50;
  int16x8_t v51;
  const AudioObjectPropertyAddress *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  const char *v56;
  uint8_t *v57;
  uint32_t v58;
  char *v59;
  _DWORD *exception;
  unsigned __int32 v61;
  char v62;
  AudioObjectPropertyAddress v63;
  void v64[5];
  int v65;
  AudioObjectPropertyAddress v66;
  unsigned char v67[34];
  __int16 v68;
  unsigned __int32 *v69;
  __int16 v70;
  int v71;
  unsigned char buf[28];
  _DWORD v73[269];
  unsigned char v74[40];
  uint64_t v75;
  int v76;
  uint64_t v77;

  uint64_t v77 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 32);
  uint64_t v2 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)v1);
  BOOL v3 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v3)
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2266;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v2 + 156;
      LOWORD(v73[0]) = 1024;
      *(_DWORD *)((char *)v73 + 2) = v1;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOA2Device::IOAudio2DeviceNotificationPortMessageHandler: %s|%d +++++++++------>", buf, 0x22u);
    }
    mach_port_name_t v5 = *(_DWORD *)(v2 + 1848);
    if (v5)
    {
      memset(buf, 0, 24);
      char v7 = mach_msg((mach_msg_header_t *)buf, 2, 0, 0x448u, v5, 0, 0);
      if (!v7)
      {
        if (v73[0])
        {
          char v8 = 0;
          v9.i32[1] = 0;
          while (1)
          {
            uint64_t v10 = &buf[32 * v8];
            unsigned int v13 = *((_DWORD *)v10 + 9);
            int v12 = v10 + 36;
            uint64_t v11 = v13;
            unint64_t v14 = v12 - 1;
            if (v13 > 1735354733)
            {
              if (v11 == 1735354734 || v11 == 1751215220)
              {
                v9.i32[1] = 0;
                memset(v67, 0, 32);
                if (v11 == 1751215220 || v11 == 1735354734)
                {
                  *(void *)&v66.AudioObjectPropertySelector mSelector = 0x676C6F62676F6E65;
                  v66.AudioObjectPropertyElement mElement = 0;
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v67, &v66, v6);
                  int v25 = *(void **)v67;
                  if (*(void *)v67 != *(void *)&v67[8]) {
                    HALS_Object::PropertiesChanged((HALS_Object *)v2, (HALS_NotificationManager *)*(unsigned int *)(v2 + 16), 0, -1431655765 * ((*(void *)&v67[8] - *(void *)v67) >> 2), *(const AudioObjectPropertyAddress **)v67);
                  }
                  if (v25) {
                    operator delete(v25);
                  }
                }
              }
              else if (v11 == 1886547824)
              {
                *(unsigned char *)(v2 + 1840) = 1;
                uint64_t v26 = *v14;
                uint64_t v27 = (unsigned int *)(v2 + 16);
                if (*v14)
                {
                  long long v28 = 0;
                  uint64_t v29 = *(void *)(v2 + 1352);
                  while ((*(void *)(v2 + 1360) - v29) >> 3 > (unint64_t)v28)
                  {
                    unint64_t v30 = *(unsigned int **)(v29 + 8 * v28++);
                    if (v30) {
                      long long v31 = v30[18] == v26;
                    }
                    else {
                      long long v31 = 0;
                    }
                    if (v31) {
                      goto LABEL_53;
                    }
                  }
                  unint64_t v30 = 0;
LABEL_53:
                  uint64_t v35 = 0;
                  uint64_t v36 = 1;
                  do
                  {
                    unint64_t v37 = v36;
                    CFIndex v38 = v2 + 24 * v35;
                    uint64_t v39 = *(void *)(v38 + 1312);
                    int v40 = *(void *)(v38 + 1304);
                    int v41 = v39 - v40;
                    if (v41)
                    {
                      uint64_t v42 = 0;
                      uint64_t v43 = v41 >> 3;
                      int v44 = 1;
                      while (1)
                      {
                        int v45 = *(unsigned int **)(v40 + 8 * v42);
                        if (v45[15] == v26 && !v45[14]) {
                          break;
                        }
                        uint64_t v42 = v44;
                        if (v43 <= v44++) {
                          goto LABEL_59;
                        }
                      }
                      uint64_t v27 = v45 + 4;
                      goto LABEL_63;
                    }
LABEL_59:
                    uint64_t v36 = 0;
                    uint64_t v35 = 1;
                  }
                  while ((v37 & 1) != 0);
                  if (!v30) {
                    goto LABEL_64;
                  }
                  HALS_IOA2Control::SynchronizeWithRegistry((HALS_IOA2Control *)v30);
                  uint64_t v27 = v30 + 4;
                }
LABEL_63:
                unint64_t v30 = (unsigned int *)*v27;
LABEL_64:
                int v47 = &buf[32 * v8];
                int v49 = *((_DWORD *)v47 + 10);
                int v48 = v47 + 40;
                v9.i32[0] = v49;
                unsigned int v50 = (int16x8_t)vmovl_u8(v9);
                *(int16x4_t *)v50.i8 = vrev64_s16(*(int16x4_t *)v50.i8);
                *(int8x8_t *)v50.i8 = vmovn_s16(v50);
                v66.AudioObjectPropertySelector mSelector = v50.i32[0];
                LOBYTE(v66.mScope) = 0;
                v50.i32[0] = *((_DWORD *)v48 + 1);
                BOOL v51 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v50.i8);
                *(int16x4_t *)v51.i8 = vrev64_s16(*(int16x4_t *)v51.i8);
                uint64_t v61 = vmovn_s16(v51).u32[0];
                BOOL v62 = 0;
                if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v53 = *(void *)&v73[8 * v8 + 5];
                  *(_DWORD *)uint64_t v67 = 136316418;
                  *(void *)&v67[4] = "HALS_IOA2Device.cpp";
                  *(_WORD *)&v67[12] = 1024;
                  *(_DWORD *)&v67[14] = 2327;
                  *(_WORD *)&v67[18] = 1024;
                  *(_DWORD *)&v67[20] = v30;
                  *(_WORD *)&v67[24] = 2080;
                  *(void *)&v67[26] = &v66;
                  BOOL v68 = 2080;
                  unsigned int v69 = &v61;
                  uint64_t v70 = 1024;
                  uint64_t v71 = v53;
                  _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOA2Device::IOAudio2DeviceNotificationPortMessageHandler: property changed: ID: %d Address: '%s', '%s', %d", v67, 0x32u);
                }
                if (v30)
                {
                  unsigned int v54 = *(void *)&v73[8 * v8 + 5];
                  *(void *)&v63.AudioObjectPropertySelector mSelector = *(void *)v48;
                  v63.AudioObjectPropertyElement mElement = v54;
                  HALS_NotificationManager::PropertiesChanged((HALS_NotificationManager *)v30, 0, 1u, &v63, v52);
                }
              }
              goto LABEL_68;
            }
            if (v11 != 1668247142) {
              break;
            }
            HALS_IOA2Device::HandleConfigChange((unsigned int *)v2, (uint64_t)v14);
LABEL_68:
            if (++v8 >= (unint64_t)v73[0]) {
              goto LABEL_69;
            }
          }
          if (v11 != 1668443751 && v11 != 1668702572) {
            goto LABEL_68;
          }
          int v16 = *v14;
          *(void *)uint64_t v67 = 0;
          *(void *)&v67[8] = v67;
          *(_OWORD *)&v67[16] = 0x2000000000uLL;
          *(void *)unint64_t v74 = MEMORY[0x1E4F143A8];
          *(void *)&v74[8] = 0x40000000;
          *(void *)&v74[16] = ___ZNK15HALS_IOA2Device17CopyControlByUCIDEj_block_invoke;
          *(void *)&v74[24] = &unk_1E6231570;
          *(void *)&v74[32] = v67;
          uint64_t v75 = v2;
          uint64_t v76 = v16;
          uint64_t v17 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
          HALB_CommandGate::ExecuteCommand(v17, (uint64_t)v74);
          uint64_t v18 = *(unsigned int **)(*(void *)&v67[8] + 24);
          _Block_object_dispose(v67, 8);
          if (!v18)
          {
LABEL_51:
            HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v18, v19);
            goto LABEL_68;
          }
          memset(v74, 0, 32);
          if (*v12 == 1668443751)
          {
            *(unsigned char *)(v2 + 1840) = 1;
            HALS_IOA2Control::SynchronizeWithRegistry((HALS_IOA2Control *)v18);
            uint64_t v22 = (void (**)(unsigned int *, unsigned char *))(*(void *)v18 + 208);
          }
          else
          {
            if (*v12 != 1668702572)
            {
              int v32 = 0;
              uint64_t v33 = 0;
              goto LABEL_47;
            }
            uint64_t v20 = v73[8 * v8 + 3];
            v64[0] = MEMORY[0x1E4F143A8];
            v64[1] = 0x40000000;
            v64[2] = ___ZN16HALS_IOA2Control12PushNewValueEi_block_invoke;
            v64[3] = &__block_descriptor_tmp_77_11326;
            v64[4] = v18;
            uint64_t v65 = v20;
            unint64_t v21 = (HALB_Mutex *)(*(uint64_t (**)(unsigned int *))(*(void *)v18 + 56))(v18);
            HALB_CommandGate::ExecuteCommand(v21, (uint64_t)v64);
            uint64_t v22 = (void (**)(unsigned int *, unsigned char *))(*(void *)v18 + 200);
          }
          (*v22)(v18, v74);
          int v32 = *(AudioObjectPropertyAddress **)v74;
          uint64_t v33 = *(void *)&v74[8];
LABEL_47:
          int v34 = -1431655765 * ((unint64_t)(v33 - (void)v32) >> 2);
          if (v34)
          {
            HALS_Object::PropertiesChanged((HALS_Object *)v2, (HALS_NotificationManager *)v18[4], 0, v34, v32);
            int v32 = *(AudioObjectPropertyAddress **)v74;
          }
          if (v32)
          {
            *(void *)&v74[8] = v32;
            operator delete(v32);
          }
          goto LABEL_51;
        }
LABEL_69:
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t v67 = 136315906;
          *(void *)&v67[4] = "HALS_IOA2Device.cpp";
          *(_WORD *)&v67[12] = 1024;
          *(_DWORD *)&v67[14] = 2343;
          *(_WORD *)&v67[18] = 2080;
          *(void *)&v67[20] = v2 + 156;
          *(_WORD *)&v67[28] = 1024;
          *(_DWORD *)&v67[30] = v1;
          int v55 = MEMORY[0x1E4F14500];
          char v56 = "%25s:%-5d  HALS_IOA2Device::IOAudio2DeviceNotificationPortMessageHandler: %s|%d <------+++++++++";
          char v57 = v67;
          uint64_t v58 = 34;
LABEL_73:
          _os_log_impl(&dword_1BAA78000, v55, OS_LOG_TYPE_DEFAULT, v56, v57, v58);
          goto LABEL_74;
        }
        goto LABEL_74;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        int64_t v59 = mach_error_string(v7);
        *(_DWORD *)unint64_t v74 = 136315906;
        *(void *)&v74[4] = "HALB_MachPort.cpp";
        *(_WORD *)&v74[12] = 1024;
        *(_DWORD *)&v74[14] = 240;
        *(_WORD *)&v74[18] = 1024;
        *(_DWORD *)&v74[20] = v7;
        *(_WORD *)&v74[24] = 2080;
        *(void *)&v74[26] = v59;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALB_MachPort::ReceiveMessage: mach_msg() returned error 0x%X: '%s'", v74, 0x22u);
      }
    }
    else
    {
      char v7 = 268451842;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unint64_t v74 = 136315650;
      *(void *)&v74[4] = "HALS_IOA2Device.cpp";
      *(_WORD *)&v74[12] = 1024;
      *(_DWORD *)&v74[14] = 2276;
      *(_WORD *)&v74[18] = 1024;
      *(_DWORD *)&v74[20] = v7;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Device::_IOAudio2DeviceNotificationPortMessageHandler: failed to receive the message, Error: 0x%X", v74, 0x18u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v7;
  }
  if (v3)
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "HALS_IOA2Device.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2349;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = v1;
    int v55 = MEMORY[0x1E4F14500];
    char v56 = "%25s:%-5d  HALS_IOA2Device::IOAudio2DeviceNotificationPortMessageHandler: got a message for a non-existent device (%d)";
    char v57 = buf;
    uint64_t v58 = 24;
    goto LABEL_73;
  }
LABEL_74:
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v2, v4);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_4,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  if ((int)MEMORY[0x1C18597F0]() > *(_DWORD *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (*(unsigned char *)(v2 + 1800)) {
      HALS_IOA2Device::_CloseConnection((HALS_IOA2Device **)v2);
    }
  }
  return a1;
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_3,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  if ((int)MEMORY[0x1C18597F0]() > *(_DWORD *)a1)
  {
    uint64_t v2 = *(_DWORD **)(a1 + 8);
    int v3 = v2[462];
    v2[462] = 0;
    uint64_t v4 = (AMCP::Utility::Dispatch_Queue *)(*(uint64_t (**)(_DWORD *))(*(void *)v2 + 64))(v2);
    AMCP::Utility::Dispatch_Queue::remove_mach_port_receiver(v4, v3);
  }
  return a1;
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_2,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  if ((int)MEMORY[0x1C18597F0]() > *(_DWORD *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    (*(void (**)(void))(**(void **)(v2 + 1776) + 8))(*(void *)(v2 + 1776));
    HALS_ObjectMap::ObjectIsDead(*(HALS_ObjectMap **)(v2 + 1776), v3);
    *(void *)(v2 + 1776) = 0;
  }
  return a1;
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_1,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  if ((int)MEMORY[0x1C18597F0]() > *(_DWORD *)a1) {
    HALS_IOA2Device::_TeardownControls(*(HALS_IOA2Device **)(a1 + 8));
  }
  return a1;
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Device::Activate(void)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  if ((int)MEMORY[0x1C18597F0]() > *(_DWORD *)a1) {
    HALS_IOA2Device::_TeardownStreams(*(HALS_IOA2Device **)(a1 + 8));
  }
  return a1;
}

void ___ZNK15HALS_IOA2Device17CopyControlByUCIDEj_block_invoke(uint64_t a1, HALS_Object *a2)
{
  unsigned int v2 = 0;
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(v3 + 1360);
  uint64_t v5 = *(void *)(v3 + 1352);
  unint64_t v6 = (v4 - v5) >> 3;
  while (v6 > v2)
  {
    uint64_t v7 = *(void *)(v5 + 8 * v2++);
    if (v7) {
      BOOL v8 = *(_DWORD *)(v7 + 72) == *(_DWORD *)(a1 + 48);
    }
    else {
      BOOL v8 = 0;
    }
    if (v8) {
      goto LABEL_10;
    }
  }
  uint64_t v7 = 0;
LABEL_10:
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v7;
  HALS_ObjectMap::RetainObject(*(HALS_ObjectMap **)(*(void *)(*(void *)(a1 + 32) + 8) + 24), a2);
}

uint64_t std::__function::__value_func<BOOL ()(AudioObjectPropertyAddress const&,AudioObjectPropertyAddress const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN17CAPropertyAddress8LessThanC1EvEUlRKT_RKT0_E_NS_9allocatorISA_EEFbRK26AudioObjectPropertyAddressSF_EE11target_typeEv()
{
  return &_ZTIZN17CAPropertyAddress8LessThanC1EvEUlRKT_RKT0_E_;
}

uint64_t _ZNKSt3__110__function6__funcIZN17CAPropertyAddress8LessThanC1EvEUlRKT_RKT0_E_NS_9allocatorISA_EEFbRK26AudioObjectPropertyAddressSF_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN17CAPropertyAddress8LessThanC1EvEUlRKT_RKT0_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN17CAPropertyAddress8LessThanC1EvEUlRKT_RKT0_E_NS_9allocatorISA_EEFbRK26AudioObjectPropertyAddressSF_EEclESF_SF_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v3 = a2[1];
  unsigned int v4 = a3[1];
  BOOL v5 = v3 >= v4;
  if (v3 == v4)
  {
    BOOL v5 = *a2 >= *a3;
    if (*a2 == *a3) {
      BOOL v5 = a2[2] >= a3[2];
    }
  }
  return !v5;
}

void _ZNKSt3__110__function6__funcIZN17CAPropertyAddress8LessThanC1EvEUlRKT_RKT0_E_NS_9allocatorISA_EEFbRK26AudioObjectPropertyAddressSF_EE7__cloneEPNS0_6__baseISG_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14681B0;
}

void *_ZNKSt3__110__function6__funcIZN17CAPropertyAddress8LessThanC1EvEUlRKT_RKT0_E_NS_9allocatorISA_EEFbRK26AudioObjectPropertyAddressSF_EE7__cloneEv()
{
  BOOL result = operator new(0x10uLL);
  void *result = &unk_1F14681B0;
  return result;
}

void _ZNSt3__110__function6__funcIZN17CAPropertyAddress8LessThanC1EvEUlRKT_RKT0_E_NS_9allocatorISA_EEFbRK26AudioObjectPropertyAddressSF_EED0Ev()
{
}

uint64_t std::unordered_set<unsigned int>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (unsigned int i = *(uint64_t **)(a2 + 16); i; unsigned int i = (uint64_t *)*i)
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a1, *((_DWORD *)i + 4), *((_DWORD *)i + 4));
  return a1;
}

void sub_1BAC7C7A8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(HALS_Client *,BOOL)>::operator()(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = a2;
  char v4 = a3;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, char *))(*(void *)a1 + 48))(a1, &v5, &v4);
}

BOOL HALS_ReferenceStreamStateManager::GetReferenceStreamStateForClient(std::__shared_mutex_base *this, int a2)
{
  uint64_t v7 = this;
  char v8 = 1;
  std::__shared_mutex_base::lock_shared(this);
  for (unsigned int i = *(uint64_t **)&this[1].__mut_.__m_.__opaque[8]; i; unsigned int i = (uint64_t *)*i)
  {
    if (*((_DWORD *)i + 4) == a2) {
      break;
    }
  }
  BOOL v5 = i != 0;
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v7);
  return v5;
}

BOOL HALS_ReferenceStreamStateManager::ReferenceStreamIsEnabledForAnyClientOrContext(std::__shared_mutex_base *this)
{
  char v4 = this;
  char v5 = 1;
  std::__shared_mutex_base::lock_shared(this);
  BOOL v2 = (*(void *)&this[1].__mut_.__m_.__opaque[16] | this[1].__gate1_.__cv_.__sig) != 0;
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v4);
  return v2;
}

uint64_t AMCP::get_object_property_traits_list(AMCP *this)
{
  {
    AMCP::get_object_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::get_object_property_traits_list(void)::once, memory_order_acquire) != -1)
  {
    char v4 = &v2;
    unsigned int v3 = &v4;
    std::__call_once(&AMCP::get_object_property_traits_list(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_object_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_object_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_object_property_traits_list(void)::$_0 &&>>()
{
  v17[6] = *MEMORY[0x1E4F143B8];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v0, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v1, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v2, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v3, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v4, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v5, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v6, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v7, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v8, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v9, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v17, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  operator new();
}

void sub_1BAC7CEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v16 = v15;
  *(void *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1C1859840](v14, 0x20C40960023A9);
  uint64_t v18 = 864;
  while (1)
  {
    uint64_t v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(void *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t AMCP::get_device_property_traits_list(AMCP *this)
{
  {
    AMCP::get_device_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::get_device_property_traits_list(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&AMCP::get_device_property_traits_list(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_device_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_device_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_device_property_traits_list(void)::$_0 &&>>()
{
  void v32[6] = *MEMORY[0x1E4F143B8];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v0, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v1, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v2, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v3, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v4, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v5, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v6, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v7, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v8, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v9, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1969841184, 1, 1, 0, &AMCP::Property_Traits<1969841184u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1836411236u>::k_valid_scopes, 0, 1668639076, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1953653102, 1, 0, 0, &AMCP::Property_Traits<1953653102u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651007861u>::k_valid_scopes, 0, 1953653102, 23);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1668049764, 1, 0, 0, &AMCP::Property_Traits<1668049764u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1819569763u>::k_valid_scopes, 0, 1668049764, 7);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1819569763, 1, 0, 0, AMCP::Property_Traits<1819569763u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1853059700u>::k_valid_scopes, 0, 1819569763, 24);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1853059700, 1, 0, 1, &AMCP::Property_Traits<1853059700u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1853059619u>::k_valid_scopes, 0, 1853059700, 17);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v23, 1853059619, 1, 0, 0, &AMCP::Property_Traits<1853059619u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1935763060u>::k_valid_scopes, 0, 1853059619, 25);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v24, 1836411236, 0, 0, 0, &AMCP::Property_Traits<1836411236u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1751737454u>::k_valid_scopes, 0, 1836411236, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v25, 1935763060, 1, 0, 0, AMCP::Property_Traits<1935763060u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1937009955u>::k_valid_scopes, 0, 1935763060, 24);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v26, 1937009955, 1, 0, 0, &AMCP::Property_Traits<1937009955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1685222501u>::k_valid_scopes, 0, 1937009955, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v27, 1685222501, 0, 0, 0, &AMCP::Property_Traits<1685222501u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1936879204u>::k_valid_scopes, 0, 1685222501, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v28, 1936879204, 0, 0, 0, AMCP::Property_Traits<1936879204u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1684434036u>::k_valid_scopes, 0, 1936876644, 27);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v29, 1684434036, 1, 0, 0, &AMCP::Property_Traits<1684434036u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936092276u>::k_valid_scopes, 0, 1684434036, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v30, 1936092276, 1, 0, 0, &AMCP::Property_Traits<1936092276u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1684301171u>::k_valid_scopes, 0, 1936092276, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v31, 1684301171, 0, 0, 0, &AMCP::Property_Traits<1684301171u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667523955u>::k_valid_scopes, 0, 1684301171, 3);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v32, 1667523955, 0, 0, 1, &AMCP::Property_Traits<1667523955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935960434u>::k_valid_scopes, 0, 1667523955, 3);
  operator new();
}

void sub_1BAC7D868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v16 = v15;
  *(void *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1C1859840](v14, 0x20C40960023A9);
  uint64_t v18 = 1584;
  while (1)
  {
    uint64_t v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(void *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18) {
      _Unwind_Resume(a1);
    }
  }
}

void HALS_MultiChannelMixer::SetupGainTable(HALS_MultiChannelMixer *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 2) - v2) >> 4) <= a2) {
    goto LABEL_79;
  }
  if ((*((unsigned char *)this + 44) & 0x20) != 0) {
    unint64_t v5 = 1;
  }
  else {
    unint64_t v5 = *((unsigned int *)this + 15);
  }
  uint64_t v6 = v2 + 80 * a2;
  uint64_t v7 = (unsigned int *)(v6 + 36);
  unint64_t v8 = *(unsigned int *)(v6 + 36);
  LODWORD(v70[0]) = 0;
  std::vector<float>::vector(&__p, v5, v70);
  uint64_t v11 = *(void **)(v6 + 64);
  uint64_t v10 = (uint64_t *)(v6 + 64);
  uint64_t v9 = v11;
  uint64_t v13 = v10 - 1;
  uint64_t v12 = *(v10 - 1);
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - v12) >> 3);
  unint64_t v15 = v8 - v14;
  if (v8 <= v14)
  {
    if (v8 >= v14) {
      goto LABEL_25;
    }
    uint64_t v33 = (void *)(v12 + 24 * v8);
    if (v9 != v33)
    {
      int v34 = v9;
      do
      {
        uint64_t v36 = (void *)*(v34 - 3);
        v34 -= 3;
        uint64_t v35 = v36;
        if (v36)
        {
          *(v9 - 2) = v35;
          operator delete(v35);
        }
        uint64_t v9 = v34;
      }
      while (v34 != v33);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v2 + 80 * a2;
  uint64_t v19 = *(void *)(v16 + 72);
  uint64_t v18 = (char **)(v16 + 72);
  uint64_t v17 = v19;
  if (0xAAAAAAAAAAAAAAABLL * ((v19 - (uint64_t)v9) >> 3) >= v15)
  {
    uint64_t v33 = &v9[3 * v15];
    uint64_t v37 = 24 * v8 - 24 * v14;
    do
    {
      void *v9 = 0;
      v9[1] = 0;
      _OWORD v9[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v9, __p, (uint64_t)v65, (v65 - (unsigned char *)__p) >> 2);
      v9 += 3;
      v37 -= 24;
    }
    while (v37);
LABEL_24:
    *uint64_t v10 = (uint64_t)v33;
    goto LABEL_25;
  }
  BOOL v68 = v18;
  unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v12) >> 3);
  uint64_t v21 = 2 * v20;
  if (2 * v20 <= v8) {
    uint64_t v21 = v8;
  }
  if (v20 >= 0x555555555555555) {
    unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v22 = v21;
  }
  uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v22);
  uint64_t v24 = &v23[24 * v14];
  v66.__begin_ = v23;
  v66.__end_ = v24;
  v66.__end_cap_.__value_ = v24;
  uint64_t v67 = &v23[24 * v25];
  uint64_t v26 = 3 * v8;
  uint64_t v27 = &v23[24 * v8];
  uint64_t v28 = 8 * v26 - 24 * v14;
  do
  {
    *(void *)uint64_t v24 = 0;
    *((void *)v24 + 1) = 0;
    *((void *)v24 + 2) = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v24, __p, (uint64_t)v65, (v65 - (unsigned char *)__p) >> 2);
    v24 += 24;
    v28 -= 24;
  }
  while (v28);
  v66.__end_cap_.__value_ = v27;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)v18, *v10, (void *)*v10, *v13, (void *)*v13, (uint64_t)v66.__end_, (uint64_t)v66.__end_);
  uint64_t v29 = (char *)*v13;
  uint64_t *v13 = v30;
  v66.__end_ = v29;
  uint64_t v31 = (char *)*v10;
  *uint64_t v10 = (uint64_t)v66.__end_cap_.__value_;
  v66.__end_cap_.__value_ = v31;
  int v32 = *v18;
  *uint64_t v18 = v67;
  uint64_t v67 = v32;
  v66.__begin_ = v29;
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v66);
LABEL_25:
  if (__p)
  {
    uint64_t v65 = __p;
    operator delete(__p);
  }
  uint64_t v38 = *((void *)this + 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 2) - v38) >> 4) <= a2) {
LABEL_79:
  }
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  unsigned int v39 = *v7;
  uint64_t v40 = *(unsigned int *)(v38 + 80 * a2);
  uint64_t v71 = 0x6F75747073726E64;
  int v72 = 0;
  long long __p = 0;
  uint64_t v65 = 0;
  HALS_System::GetInstance(&v66, 0, (uint64_t *)&__p);
  char v41 = HALS_System::sIsInitialized;
  if (v66.__end_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v66.__end_);
  }
  if ((v41 & 1) == 0)
  {
    int v49 = (char *)*v13;
LABEL_74:
    HALS_MultiChannelMixer::GenerateDefaultGainTable(v49, (char *)*v10);
    return;
  }
  v70[0] = 0;
  v70[1] = 0;
  HALS_System::GetInstance(&v66, 0, v70);
  uint64_t v43 = HALS_System::CopyDeviceByObjectID((HALS_System *)v66.__begin_, v40, 0);
  if (v66.__end_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v66.__end_);
  }
  if (!v43
    || !(*(unsigned int (**)(HALS_Device *, uint64_t, uint64_t *, void))(*(void *)v43 + 88))(v43, v40, &v71, 0))
  {
    BOOL IsLayoutSMTPE_A_Mixable = 0;
    goto LABEL_61;
  }
  Totalint NumberChannels = HALS_Device::GetTotalNumberChannels(v43, 0);
  __x[0] = 0;
  std::vector<char>::vector(&v66, 0x20uLL, __x);
  begiuint64_t n = v66.__begin_;
  *(void *)v66.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  if (TotalNumberChannels <= 1) {
    unsigned int v46 = 1;
  }
  else {
    unsigned int v46 = TotalNumberChannels;
  }
  int v47 = (char *)(20 * v46 + 12);
  __x[0] = 0;
  int end = (int)v66.__end_;
  if (v47 <= (std::vector<char>::pointer)(v66.__end_ - begin))
  {
    if (v47 < (std::vector<char>::pointer)(v66.__end_ - begin))
    {
      int end = begin + v47;
      v66.__end_ = &v47[(void)begin];
    }
  }
  else
  {
    std::vector<char>::__append(&v66, (std::vector<char>::size_type)&v47[-(v66.__end_ - begin)], __x);
    begiuint64_t n = v66.__begin_;
    int end = (int)v66.__end_;
  }
  *((_DWORD *)begin + 2) = TotalNumberChannels;
  *(_DWORD *)std::vector<char>::value_type __x = 0;
  (*(void (**)(HALS_Device *, uint64_t, uint64_t *, void, std::vector<char>::value_type *, std::vector<char>::pointer, void, void, void))(*(void *)v43 + 112))(v43, v40, &v71, (end - begin), __x, begin, 0, 0, 0);
  unsigned int v52 = v66.__begin_;
  int v53 = *(_DWORD *)v66.__begin_;
  if (*(int *)v66.__begin_ > 8519687)
  {
    if (v53 <= 12713991)
    {
      if (v53 != 8519688 && v53 != 12582924)
      {
        int v54 = 12648464;
        goto LABEL_58;
      }
LABEL_59:
      BOOL IsLayoutSMTPE_A_Mixable = 1;
LABEL_60:
      v66.__end_ = v52;
      operator delete(v52);
      goto LABEL_61;
    }
    if (v53 == 12713992 || v53 == 12779530) {
      goto LABEL_59;
    }
    int v54 = 12845066;
LABEL_58:
    if (v53 != v54)
    {
      BOOL IsLayoutSMTPE_A_Mixable = 0;
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  if (v53 > 7929861)
  {
    if (v53 == 7929862 || v53 == 8257544) {
      goto LABEL_59;
    }
    int v54 = 8388616;
    goto LABEL_58;
  }
  if (v53)
  {
    int v54 = 7405571;
    goto LABEL_58;
  }
  BOOL IsLayoutSMTPE_A_Mixable = HALS_MultiChannelMixer::IsLayoutSMTPE_A_Mixable((HALS_MultiChannelMixer *)v66.__begin_, v51);
  unsigned int v52 = v66.__begin_;
  if (v66.__begin_) {
    goto LABEL_60;
  }
LABEL_61:
  HALS_ObjectMap::ReleaseObject(v43, v42);
  int v49 = (char *)*v13;
  if (!IsLayoutSMTPE_A_Mixable) {
    goto LABEL_74;
  }
  int v55 = *(_DWORD *)this;
  HALS_MultiChannelMixer::GenerateDefaultGainTable(v49, (char *)*v10);
  if (v39 >= 3 && v55 == 1)
  {
    uint64_t v56 = *v13;
    char v57 = (char *)operator new(8uLL);
    v66.__begin_ = v57;
    *(void *)char v57 = 0x3F0000003F000000;
    v66.__end_ = v57 + 8;
    v66.__end_cap_.__value_ = v57 + 8;
    std::vector<std::vector<float>>::insert(v10 - 1, (void *)(v56 + 48), (uint64_t)&v66);
    if (v66.__begin_) {
      operator delete(v66.__begin_);
    }
    int64_t v59 = (void **)(*v10 - 24);
    uint64_t v58 = *v59;
    if (*v59)
    {
      *(void *)(*v10 - 16) = v58;
      operator delete(v58);
    }
    *uint64_t v10 = (uint64_t)v59;
    uint64_t v60 = *v13;
    if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v59 - *v13) >> 3) >= 4)
    {
      uint64_t v61 = (char *)operator new(8uLL);
      v66.__end_ = v61 + 8;
      v66.__end_cap_.__value_ = v61 + 8;
      *(void *)uint64_t v61 = 0;
      v66.__begin_ = v61;
      std::vector<std::vector<float>>::insert(v10 - 1, (void *)(v60 + 72), (uint64_t)&v66);
      if (v66.__begin_) {
        operator delete(v66.__begin_);
      }
      uint64_t v63 = (void **)(*v10 - 24);
      BOOL v62 = *v63;
      if (*v63)
      {
        *(void *)(*v10 - 16) = v62;
        operator delete(v62);
      }
      *uint64_t v10 = (uint64_t)v63;
    }
  }
}

void sub_1BAC7DED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<HALS_MultiChannelMixer::StreamInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 80;
        uint64_t v7 = (void **)(v4 - 24);
        std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100](&v7);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *HALS_MultiChannelMixer::GenerateDefaultGainTable(char *result, char *a2)
{
  if (a2 == result) {
    goto LABEL_18;
  }
  unint64_t v2 = (a2 - result) / 24;
  uint64_t v3 = *((void *)result + 1);
  unint64_t v4 = (v3 - *(void *)result) >> 2;
  if (v2 > v4)
  {
    unint64_t v5 = 0;
    float v6 = (float)v4 / (float)v2;
    for (unsigned int i = result + 8; ; i += 3)
    {
      uint64_t v8 = *(i - 1);
      unint64_t v9 = (*i - v8) >> 2;
      if (v9 <= v5) {
        break;
      }
      *(float *)(v8 + 4 * v5) = v6;
      if (v5 + 1 == v9) {
        unint64_t v5 = 0;
      }
      else {
        ++v5;
      }
      if (!--v2) {
        return result;
      }
    }
LABEL_17:
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  }
  if (v3 != *(void *)result)
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
    while (v2 > v11)
    {
      uint64_t v12 = *(void *)&result[24 * v11];
      if (v10 >= (*(void *)&result[24 * v11 + 8] - v12) >> 2) {
        goto LABEL_17;
      }
      *(_DWORD *)(v12 + 4 * v10) = 1065353216;
      unint64_t v11 = (v11 + 1) % v2;
      if (v4 == ++v10) {
        return result;
      }
    }
LABEL_18:
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  }
  return result;
}

void std::vector<std::vector<float>>::insert(uint64_t *a1, void *a2, uint64_t a3)
{
  unint64_t v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = (uint64_t)a2 - *a1;
  int64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v16 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v7) >> 3);
    if (2 * v17 > v16) {
      unint64_t v16 = 2 * v17;
    }
    if (v17 >= 0x555555555555555) {
      unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v18 = v16;
    }
    uint64_t v42 = v11;
    if (v18) {
      unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v18);
    }
    else {
      uint64_t v19 = 0;
    }
    unint64_t v20 = (void *)(v18 + 8 * (v8 >> 3));
    unsigned int v39 = (char *)v18;
    *(void *)&long long v40 = v20;
    *((void *)&v40 + 1) = v20;
    char v41 = (char *)(v18 + 24 * v19);
    if (v9 == v19)
    {
      if (v8 < 1)
      {
        if ((void *)v7 == v4) {
          unint64_t v26 = 1;
        }
        else {
          unint64_t v26 = 0x5555555555555556 * (v8 >> 3);
        }
        uint64_t v46 = v11;
        uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v26);
        uint64_t v29 = v40;
        if (*((void *)&v40 + 1) == (void)v40)
        {
          int64x2_t v32 = vdupq_n_s64(v40);
          uint64_t v30 = (uint64_t)&v27[24 * (v26 >> 2)];
        }
        else
        {
          uint64_t v30 = (uint64_t)&v27[24 * (v26 >> 2) + *((void *)&v40 + 1) - v40];
          uint64_t v31 = &v27[24 * (v26 >> 2)];
          do
          {
            *(void *)uint64_t v31 = 0;
            *((void *)v31 + 1) = 0;
            *((void *)v31 + 2) = 0;
            *(_OWORD *)uint64_t v31 = *(_OWORD *)v29;
            *((void *)v31 + 2) = *(void *)(v29 + 16);
            *(void *)uint64_t v29 = 0;
            *(void *)(v29 + 8) = 0;
            *(void *)(v29 + 16) = 0;
            v31 += 24;
            v29 += 24;
          }
          while (v31 != (char *)v30);
          int64x2_t v32 = (int64x2_t)v40;
        }
        uint64_t v33 = v41;
        uint64_t v43 = v39;
        unsigned int v39 = v27;
        *(void *)&long long v40 = &v27[24 * (v26 >> 2)];
        int64x2_t v44 = v32;
        *((void *)&v40 + 1) = v30;
        char v41 = &v27[24 * v28];
        int v45 = v33;
        std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v43);
        unint64_t v20 = (void *)*((void *)&v40 + 1);
      }
      else
      {
        uint64_t v21 = v9 + 2;
        if (v9 >= -1) {
          uint64_t v21 = v9 + 1;
        }
        v20 -= 3 * (v21 >> 1);
        *(void *)&long long v40 = v20;
        *((void *)&v40 + 1) = v20;
      }
    }
    *unint64_t v20 = 0;
    v20[1] = 0;
    v20[2] = 0;
    *(_OWORD *)unint64_t v20 = *(_OWORD *)a3;
    v20[2] = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *((void *)&v40 + 1) += 24;
    std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(v11, (uint64_t)v4, v4, *a1, (void *)*a1, v40, v40);
    *(void *)&long long v40 = v34;
    uint64_t v35 = (void *)a1[1];
    uint64_t v36 = (void *)*((void *)&v40 + 1);
    if (v4 != v35)
    {
      do
      {
        *uint64_t v36 = 0;
        v36[1] = 0;
        unsigned int v36[2] = 0;
        *(_OWORD *)uint64_t v36 = *(_OWORD *)v4;
        unsigned int v36[2] = v4[2];
        *unint64_t v4 = 0;
        v4[1] = 0;
        v4[2] = 0;
        v36 += 3;
        v4 += 3;
      }
      while (v4 != v35);
      uint64_t v34 = v40;
      unint64_t v4 = (void *)a1[1];
    }
    uint64_t v37 = *a1;
    *a1 = v34;
    a1[1] = (uint64_t)v36;
    uint64_t v38 = a1[2];
    a1[2] = (uint64_t)v41;
    *((void *)&v40 + 1) = v4;
    char v41 = (char *)v38;
    unsigned int v39 = (char *)v37;
    *(void *)&long long v40 = v37;
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v39);
  }
  else if (a2 == (void *)v6)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(void *)(v7 + 8 * (v8 >> 3) + 16) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    a1[1] = (uint64_t)(a2 + 3);
  }
  else
  {
    uint64_t v12 = a2 + 3;
    unint64_t v13 = v6 - 24;
    if (v6 < 0x18)
    {
      unint64_t v15 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = v6 - 24;
      unint64_t v15 = (void *)a1[1];
      do
      {
        *unint64_t v15 = 0;
        v15[1] = 0;
        uint64_t v15[2] = 0;
        *(_OWORD *)unint64_t v15 = *(_OWORD *)v14;
        uint64_t v15[2] = *(void *)(v14 + 16);
        *(void *)unint64_t v14 = 0;
        *(void *)(v14 + 8) = 0;
        *(void *)(v14 + 16) = 0;
        v15 += 3;
        v14 += 24;
      }
      while (v14 < v6);
    }
    a1[1] = (uint64_t)v15;
    if ((void *)v6 != v12)
    {
      uint64_t v22 = (uint64_t)(v6 - (void)v12) >> 3;
      do
      {
        uint64_t v23 = *(void **)v13;
        if (*(void *)v13)
        {
          *(void *)(v13 + 8) = v23;
          operator delete(v23);
          *(void *)unint64_t v13 = 0;
          *(void *)(v13 + 8) = 0;
          *(void *)(v13 + 16) = 0;
        }
        uint64_t v24 = (uint64_t)&v4[v22 - 3];
        *(_OWORD *)unint64_t v13 = *(_OWORD *)v24;
        *(void *)(v13 + 16) = v4[v22 - 1];
        *(void *)uint64_t v24 = 0;
        *(void *)(v24 + 8) = 0;
        *(void *)(v24 + 16) = 0;
        v13 -= 24;
        v22 -= 3;
      }
      while (v22 * 8);
    }
    uint64_t v25 = (void *)*v4;
    if (*v4)
    {
      *(void *)(v7 + 8 * (v8 >> 3) + 8) = v25;
      operator delete(v25);
      *unint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
    }
    *(_OWORD *)unint64_t v4 = *(_OWORD *)a3;
    *(void *)(v7 + 8 * (v8 >> 3) + 16) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
}

void sub_1BAC7E4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__split_buffer<std::vector<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    unint64_t v4 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  while (a3 != a5)
  {
    *(void *)(a7 - 24) = 0;
    *(void *)(a7 - 16) = 0;
    a7 -= 24;
    *(void *)(a7 + 16) = 0;
    long long v8 = *(_OWORD *)(a3 - 3);
    a3 -= 3;
    double result = *(double *)&v8;
    *(_OWORD *)a7 = v8;
    *(void *)(a7 + 16) = a3[2];
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

BOOL HALS_MultiChannelMixer::IsLayoutSMTPE_A_Mixable(HALS_MultiChannelMixer *this, AudioChannelLayout *a2)
{
  uint64_t v3 = operator new(0x10uLL);
  *uint64_t v3 = xmmword_1BAFF95E0;
  LODWORD(v4) = *((_DWORD *)this + 2);
  if (v4 >= 4) {
    unint64_t v4 = 4;
  }
  else {
    unint64_t v4 = v4;
  }
  if (v4)
  {
    if (*((_DWORD *)this + 3) == 1)
    {
      unint64_t v5 = 0;
      unint64_t v6 = (int *)((char *)this + 32);
      while (v4 - 1 != v5)
      {
        int v7 = *v6;
        v6 += 5;
        int v8 = *((_DWORD *)v3 + ++v5);
        if (v7 != v8) {
          goto LABEL_13;
        }
      }
      unint64_t v5 = v4;
LABEL_13:
      BOOL v9 = v5 >= v4;
    }
    else
    {
      BOOL v9 = 0;
    }
  }
  else
  {
    BOOL v9 = 1;
  }
  operator delete(v3);
  return v9;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<float>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  if (!(a2 >> 62))
  {
    uint64_t v2 = result;
    double result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
    }
  }
  __break(1u);
  return result;
}

caulk::rt_safe_memory_resource *std::vector<caulk::rt_vector<float>,caulk::rt_allocator<caulk::rt_vector<float>>>::__destroy_vector::operator()[abi:ne180100](caulk::rt_safe_memory_resource *result)
{
  uint64_t v1 = *(caulk::rt_safe_memory_resource ***)result;
  uint64_t v2 = **(caulk::rt_safe_memory_resource ***)result;
  if (v2)
  {
    uint64_t v3 = (caulk::rt_safe_memory_resource ***)result;
    unint64_t v4 = v1[1];
    unint64_t v5 = **(caulk::rt_safe_memory_resource ***)result;
    unint64_t v6 = v1;
    if (v4 != v2)
    {
      int v7 = v1[1];
      do
      {
        BOOL v9 = (caulk::rt_safe_memory_resource *)*((void *)v7 - 3);
        int v7 = (caulk::rt_safe_memory_resource *)((char *)v7 - 24);
        int v8 = v9;
        if (v9)
        {
          *((void *)v4 - 2) = v8;
          std::allocator_traits<caulk::rt_allocator<float>>::deallocate[abi:ne180100](v8, (uint64_t)(*((void *)v4 - 1) - (void)v8) >> 2);
        }
        unint64_t v4 = v7;
      }
      while (v7 != v2);
      unint64_t v6 = *v3;
      unint64_t v5 = **v3;
    }
    v1[1] = v2;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v6[2] - v5) >> 3);
    return std::allocator_traits<caulk::rt_allocator<caulk::rt_vector<float>>>::deallocate[abi:ne180100](v5, v10);
  }
  return result;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](void *a1)
{
  double result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
  if (*MEMORY[0x1E4FB7E88]) {
    return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, a1);
  }
  __break(1u);
  return result;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<caulk::rt_vector<float>>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  if (a2 < 0xAAAAAAAAAAAAAABLL)
  {
    uint64_t v2 = result;
    double result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
    }
  }
  __break(1u);
  return result;
}

void *std::vector<caulk::rt_vector<float>,caulk::rt_allocator<caulk::rt_vector<float>>>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    *(void *)(v4 - 24) = 0;
    *(void *)(v4 - 16) = 0;
    v4 -= 24;
    *(void *)(v4 + 16) = 0;
    long long v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)uint64_t v4 = v5;
    *(void *)(v4 + 16) = v2[2];
    void *v2 = 0;
    v2[1] = 0;
    _OWORD v2[2] = 0;
  }
  a2[1] = v4;
  unint64_t v6 = (void *)*result;
  caulk::rt_safe_memory_resource *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<caulk::rt_vector<float>,caulk::rt_allocator<caulk::rt_vector<float>> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v4 = *(caulk::rt_safe_memory_resource **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      std::allocator_traits<caulk::rt_allocator<float>>::deallocate[abi:ne180100](v4, (uint64_t)(*(void *)(v2 - 8) - (void)v4) >> 2);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(void *)a1) {
    std::allocator_traits<caulk::rt_allocator<caulk::rt_vector<float>>>::deallocate[abi:ne180100](*(caulk::rt_safe_memory_resource **)a1, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 3));
  }
  return a1;
}

void ***std::__exception_guard_exceptions<std::vector<char,caulk::rt_allocator<char>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = **a1;
    if (v3)
    {
      v2[1] = v3;
      std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v3);
    }
  }
  return a1;
}

void HALS_IOStackDescription::GetFormat(HALS_IOStackDescription *this, AudioStreamBasicDescription *a2)
{
  uint64_t v3 = (uint64_t *)*((void *)this + 1);
  unint64_t v4 = *((void *)this + 2) - (void)v3;
  if (v4)
  {
    if (-1431655765 * (v4 >> 3))
    {
      uint64_t v6 = *v3;
      if (*(_DWORD *)(v6 + 108))
      {
        HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v11, (uint64_t *)(v6 + 112));
      }
      else
      {
        long long v7 = *(_OWORD *)(v6 + 384);
        long long v11 = *(_OWORD *)(v6 + 368);
        long long v12 = v7;
        uint64_t v13 = *(void *)(v6 + 400);
      }
      long long v8 = v12;
      *(_OWORD *)&a2->mSampleRate = v11;
      *(_OWORD *)&a2->mBytesPerPacket = v8;
      *(void *)&a2->mBitsPerChannel = v13;
      if (a2->mFormatID == 1819304813)
      {
        UInt32 v9 = *(_DWORD *)this;
        UInt32 v10 = ((8 * a2->mBytesPerFrame / a2->mChannelsPerFrame) >> 3) * *(_DWORD *)this;
        a2->mBytesPerFrame = v10;
        a2->mChannelsPerFrame = v9;
        a2->mBytesPerPacket = v10;
      }
    }
  }
  else
  {
    *(void *)&a2->mBitsPerChannel = 0;
    *(_OWORD *)&a2->mSampleRate = 0u;
    *(_OWORD *)&a2->mBytesPerPacket = 0u;
  }
}

uint64_t std::__function::__value_func<int ()(unsigned long,HALS_IOStreamInfo &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<int ()(unsigned long,HALS_IOStreamInfo &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void AMCP::IOAudio2::Device_Sub_Object::~Device_Sub_Object(AMCP::IOAudio2::Device_Sub_Object *this)
{
  AMCP::IOAudio2::Device_Sub_Object::~Device_Sub_Object(this);

  JUMPOUT(0x1C1859840);
}

{
  const void *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1F1482788;
  uint64_t v2 = (const void *)*((void *)this + 5);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *std::__function::__func<HALS_BufferFactory::acquire_output_buffers(void)::$_0,std::allocator<HALS_BufferFactory::acquire_output_buffers(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::target_type()
{
}

uint64_t std::__function::__func<HALS_BufferFactory::acquire_output_buffers(void)::$_0,std::allocator<HALS_BufferFactory::acquire_output_buffers(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN18HALS_BufferFactory22acquire_output_buffersEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_BufferFactory::acquire_output_buffers(void)::$_0,std::allocator<HALS_BufferFactory::acquire_output_buffers(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::operator()(uint64_t a1, unsigned int *a2, uint64_t a3, HALS_IOStreamInfo *a4)
{
  uint64_t v5 = HALS_BufferFactory::acquire_buffers_non_dsp(*(HALS_BufferFactory **)(a1 + 8), (HALB_IOBufferManager_Server *)*a2, a3, a4);
  if (!v5) {
    HALS_BufferFactory::acquire_buffers_for_dsp(*(HALS_IOStreamInfo **)(a3 + 112), *(HALS_IOStreamInfo **)(a3 + 120));
  }
  return v5;
}

uint64_t HALS_BufferFactory::acquire_buffers_non_dsp(HALS_BufferFactory *this, HALB_IOBufferManager_Server *a2, uint64_t a3, HALS_IOStreamInfo *a4)
{
  unint64_t IOBuffer = HALB_IOBufferManager_Server::GetIOBuffer(this, *(unsigned __int8 *)(a3 + 8), a2, (unsigned int *)(a3 + 64));
  *(void *)(a3 + 56) = IOBuffer;
  if (!IOBuffer) {
    return 2003329396;
  }
  uint64_t v6 = *(HALS_IOProcessor **)(a3 + 96);
  if (v6)
  {
    if (HALS_IOProcessor::NeedsIntermediate1Buffer(*(HALS_IOProcessor **)(a3 + 96)))
    {
      vm_address_t Buffer = HALB_IOBufferManager_Server::AllocateBuffer(*(unsigned int *)(a3 + 48));
      uint64_t v6 = *(HALS_IOProcessor **)(a3 + 96);
    }
    else
    {
      vm_address_t Buffer = 0;
    }
    *(void *)(a3 + 32) = Buffer;
    if (HALS_IOProcessor::NeedsIntermediate2Buffer(v6))
    {
      vm_address_t v10 = HALB_IOBufferManager_Server::AllocateBuffer(*(unsigned int *)(a3 + 48));
      uint64_t v6 = *(HALS_IOProcessor **)(a3 + 96);
    }
    else
    {
      vm_address_t v10 = 0;
    }
    *(void *)(a3 + 40) = v10;
    uint64_t result = HALS_IOProcessor::NeedsLocalBuffer(v6);
    if (result)
    {
      vm_address_t v11 = HALB_IOBufferManager_Server::AllocateBuffer(*(unsigned int *)(a3 + 24));
      uint64_t result = 0;
    }
    else
    {
      vm_address_t v11 = *(void *)(a3 + 56);
    }
    *(void *)(a3 + 16) = v11;
  }
  else
  {
    unint64_t v9 = IOBuffer;
    uint64_t result = 0;
    *(void *)(a3 + 16) = v9;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
  }
  return result;
}

HALS_IOStreamInfo *HALS_BufferFactory::acquire_buffers_for_dsp(HALS_IOStreamInfo *this, HALS_IOStreamInfo *a2)
{
  if (this != a2)
  {
    uint64_t v3 = this;
    do
    {
      *((void *)v3 + 2) = HALB_IOBufferManager_Server::AllocateBuffer(*((unsigned int *)v3 + 6));
      this = (HALS_IOStreamInfo *)HALB_IOBufferManager_Server::AllocateBuffer(*((unsigned int *)v3 + 10));
      *((void *)v3 + 4) = this;
      uint64_t v3 = (HALS_IOStreamInfo *)((char *)v3 + 128);
    }
    while (v3 != a2);
  }
  return this;
}

uint64_t std::__function::__func<HALS_BufferFactory::acquire_output_buffers(void)::$_0,std::allocator<HALS_BufferFactory::acquire_output_buffers(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14683B0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<HALS_BufferFactory::acquire_output_buffers(void)::$_0,std::allocator<HALS_BufferFactory::acquire_output_buffers(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14683B0;
  result[1] = v3;
  return result;
}

void std::__function::__func<HALS_BufferFactory::acquire_output_buffers(void)::$_0,std::allocator<HALS_BufferFactory::acquire_output_buffers(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::~__func()
{
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_BufferFactory::acquire_input_buffers(void)::$_0>(HALS_BufferFactory ***a1, uint64_t a2, uint64_t a3, HALS_IOStreamInfo *a4)
{
  uint64_t v5 = HALS_BufferFactory::acquire_buffers_non_dsp(**a1, (HALB_IOBufferManager_Server *)*(unsigned int *)(a2 + 8), *(void *)a2, a4);
  if (!v5) {
    HALS_BufferFactory::acquire_buffers_for_dsp(*(HALS_IOStreamInfo **)(*(void *)a2 + 112), *(HALS_IOStreamInfo **)(*(void *)a2 + 120));
  }
  return v5;
}

void *std::__function::__func<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0,std::allocator<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::target_type()
{
}

uint64_t std::__function::__func<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0,std::allocator<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN18HALS_BufferFactory35calculate_shared_output_buffer_sizeEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0,std::allocator<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::operator()(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  return 0;
}

uint64_t std::__function::__func<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0,std::allocator<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1468330;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0,std::allocator<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F1468330;
  result[1] = v3;
  return result;
}

void std::__function::__func<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0,std::allocator<HALS_BufferFactory::calculate_shared_output_buffer_size(void)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::~__func()
{
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_BufferFactory::calculate_shared_input_buffer_size(void)::$_0>(HALB_IOBufferManager_Server ***a1, unsigned int *a2)
{
  return 0;
}

void *std::__function::__func<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0,std::allocator<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::target_type()
{
}

uint64_t std::__function::__func<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0,std::allocator<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN18HALS_BufferFactory28calculate_output_buffer_sizeEjP17HALS_IOEngineInfoE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0,std::allocator<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::operator()(uint64_t a1, int a2, HALS_BufferFactory **this, HALS_IOEngineInfo *a4)
{
  return 0;
}

uint64_t HALS_BufferFactory::calculate_buffer_size_for_non_dsp(HALS_BufferFactory *this, HALS_IOStreamInfo *a2, uint64_t a3, HALS_IOEngineInfo *a4)
{
  int v5 = (int)a2;
  if (*((_DWORD *)this + 27))
  {
    long long v7 = (uint64_t *)*((void *)this + 14);
    if (*((uint64_t **)this + 15) == v7 || v7 == 0) {
      uint64_t v10 = *((void *)this + 51);
    }
    else {
      uint64_t v10 = *v7;
    }
    if (*(void *)(v10 + 8))
    {
      HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)v12, (uint64_t *)this + 14);
      goto LABEL_12;
    }
LABEL_13:
    uint64_t result = 4096;
    goto LABEL_14;
  }
  uint64_t v10 = *((void *)this + 51);
  if (!*(void *)(v10 + 8)) {
    goto LABEL_13;
  }
  long long v9 = *((_OWORD *)this + 24);
  v12[0] = *((_OWORD *)this + 23);
  v12[1] = v9;
  uint64_t v13 = *((void *)this + 50);
LABEL_12:
  uint64_t result = HALS_BufferFactory::get_io_buffer_byte_size(v10, v5, a3, (uint64_t)v12);
LABEL_14:
  *((_DWORD *)this + 6) = result;
  *((_DWORD *)this + 12) = result;
  return result;
}

void HALS_BufferFactory::calculate_buffer_size_for_dsp(HALS_BufferFactory *this, HALS_IOStreamInfo *a2, int a3, HALS_IOEngineInfo *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (this != a2)
  {
    long long v7 = this;
    long long v8 = MEMORY[0x1E4F14500];
    do
    {
      uint64_t v9 = *(void *)v7;
      if (*(void *)(*(void *)v7 + 8))
      {
        if (*((_DWORD *)v7 + 25) == 4)
        {
          *((_DWORD *)v7 + 6) = 0;
          *((_DWORD *)v7 + 10) = 0;
          *((_DWORD *)v7 + 12) = 0;
        }
        else
        {
          long long v10 = *(_OWORD *)((char *)v7 + 72);
          v12[0] = *(_OWORD *)((char *)v7 + 56);
          v12[1] = v10;
          uint64_t v13 = *((void *)v7 + 11);
          io_buffer_byte_std::string::size_type size = HALS_BufferFactory::get_io_buffer_byte_size(v9, a3, (uint64_t)a4, (uint64_t)v12);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            unint64_t v15 = "HALS_BufferFactory.cpp";
            __int16 v16 = 1024;
            int v17 = 365;
            __int16 v18 = 1024;
            int v19 = io_buffer_byte_size;
            _os_log_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_BufferFactory::calculate_buffer_size_for_dsp(): theIOBufferByteunint64_t Size = %u", buf, 0x18u);
          }
          *((_DWORD *)v7 + 6) = io_buffer_byte_size;
          *((_DWORD *)v7 + 10) = io_buffer_byte_size;
          *((_DWORD *)v7 + 12) = *(_DWORD *)(*(void *)v7 + 308);
        }
      }
      else
      {
        *((_DWORD *)v7 + 6) = 4096;
        *((_DWORD *)v7 + 10) = 4096;
      }
      long long v7 = (HALS_IOStreamInfo *)((char *)v7 + 128);
    }
    while (v7 != a2);
  }
}

uint64_t HALS_BufferFactory::get_io_buffer_byte_size(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    (*(void (**)(void))(**(void **)(a3 + 8) + 328))(*(void *)(a3 + 8));
  }
  else {
    double v7 = *(double *)a4;
  }
  if (*(_DWORD *)(a4 + 8) == 1819304813)
  {
    if (*(unsigned char *)(a1 + 297) || v7 != *(double *)a4) {
      a2 *= 24;
    }
    int v8 = *(_DWORD *)(a4 + 24) * a2;
  }
  else
  {
    int v8 = *(_DWORD *)(a4 + 16);
  }
  return (v8 + *(_DWORD *)(a1 + 308));
}

__n128 std::__function::__func<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0,std::allocator<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14682A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0,std::allocator<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F14682A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0,std::allocator<HALS_BufferFactory::calculate_output_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0>,int ()(unsigned long,HALS_IOStreamInfo &)>::~__func()
{
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_BufferFactory::calculate_input_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0>(unsigned int **a1, HALS_BufferFactory **a2, uint64_t a3, HALS_IOEngineInfo *a4)
{
  int v5 = *a1;
  HALS_BufferFactory::calculate_buffer_size_for_non_dsp(*a2, (HALS_IOStreamInfo *)*v5, *((void *)v5 + 1), a4);
  HALS_BufferFactory::calculate_buffer_size_for_dsp(*((HALS_BufferFactory **)*a2 + 14), *((HALS_IOStreamInfo **)*a2 + 15), *v5, *((HALS_IOEngineInfo **)v5 + 1));
  return 0;
}

void *std::__function::__func<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::target_type()
{
}

uint64_t std::__function::__func<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN18HALS_BufferFactory16register_buffersERK24HALS_IOStreamActiveStatejE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::operator()(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v4 = *a2;
  int v5 = *(void **)(a1 + 8);
  uint64_t v6 = **(unsigned int **)(a1 + 16);
  if (*(_DWORD *)(a3 + 108)) {
    HALS_BufferFactory::register_buffers_for_dsp(v5, v4, a3, v6);
  }
  else {
    HALS_BufferFactory::register_buffers_non_dsp((uint64_t)v5, v4, a3, v6);
  }
  return 0;
}

void *HALS_BufferFactory::register_buffers_for_dsp(void *result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a3 + 8))
  {
    if (result[4] > (unint64_t)a2)
    {
      result += 3;
      goto LABEL_5;
    }
  }
  else if (result[1] > (unint64_t)a2)
  {
LABEL_5:
    if (((*(void *)(*result + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) >> a2) & 1) == 0) {
      return result;
    }
  }
  uint64_t v6 = *(void *)(a3 + 112);
  uint64_t v7 = *(void *)(a3 + 120);
  while (v6 != v7)
  {
    __n128 result = *(void **)(*(void *)v6 + 8);
    if (result)
    {
      if (*(void *)(v6 + 16)) {
        __n128 result = (void *)(*(uint64_t (**)(void *, void, void, uint64_t, void))(*result + 656))(result, *(unsigned __int8 *)(a3 + 8), *(unsigned int *)(v6 + 96), a4, *(unsigned int *)(v6 + 24));
      }
    }
    v6 += 128;
  }
  return result;
}

void sub_1BAC7F4E0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_BufferFactory::register_buffers_non_dsp(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (!*(_DWORD *)(a3 + 108)
    || ((v6 = *(uint64_t **)(a3 + 112), *(uint64_t **)(a3 + 120) != v6) ? (BOOL v7 = v6 == 0) : (BOOL v7 = 1), v7))
  {
    uint64_t v6 = (uint64_t *)(a3 + 408);
  }
  uint64_t v8 = *v6;
  if (*(unsigned char *)(a3 + 8))
  {
    if (*(void *)(result + 32) > (unint64_t)a2)
    {
      result += 24;
      goto LABEL_12;
    }
  }
  else if (*(void *)(result + 8) > (unint64_t)a2)
  {
LABEL_12:
    if (((*(void *)(*(void *)result + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) >> a2) & 1) == 0) {
      return result;
    }
  }
  __n128 result = *(void *)(v8 + 8);
  if (result && *(void *)(a3 + 16))
  {
    __n128 result = (*(uint64_t (**)(uint64_t, BOOL, void))(*(void *)result + 488))(result, *(unsigned char *)(a3 + 8) != 0, *(unsigned int *)(a3 + 12));
    if ((result & 1) == 0) {
      return (*(uint64_t (**)(void, void, void, uint64_t, void, void))(**(void **)(v8 + 8) + 656))(*(void *)(v8 + 8), *(unsigned __int8 *)(a3 + 8), *(unsigned int *)(a3 + 12), a4, *(unsigned int *)(a3 + 24), *(void *)(a3 + 16));
    }
  }
  return result;
}

void sub_1BAC7F624(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

__n128 std::__function::__func<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1468430;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F1468430;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::~__func()
{
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_BufferFactory::register_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0>(void ***a1, _DWORD *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)a2;
  int v4 = *(_DWORD *)(*(void *)a2 + 108);
  unsigned int v5 = a2[2];
  uint64_t v6 = **a1;
  uint64_t v7 = *(unsigned int *)v2[1];
  if (v4) {
    HALS_BufferFactory::register_buffers_for_dsp(v6, v5, v3, v7);
  }
  else {
    HALS_BufferFactory::register_buffers_non_dsp((uint64_t)v6, v5, v3, v7);
  }
  return 0;
}

void *std::__function::__func<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::target_type()
{
}

uint64_t std::__function::__func<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN18HALS_BufferFactory18unregister_buffersERK24HALS_IOStreamActiveStatejE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::operator()(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v4 = *a2;
  unsigned int v5 = *(void **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (*(_DWORD *)(a3 + 108)) {
    HALS_BufferFactory::unregister_buffers_for_dsp(v5, v4, a3, v6);
  }
  else {
    HALS_BufferFactory::unregister_buffers_non_dsp((uint64_t)v5, v4, a3, v6);
  }
  return 0;
}

void *HALS_BufferFactory::unregister_buffers_for_dsp(void *result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a3 + 8))
  {
    if (result[4] > (unint64_t)a2)
    {
      result += 3;
      goto LABEL_5;
    }
  }
  else if (result[1] > (unint64_t)a2)
  {
LABEL_5:
    if (((*(void *)(*result + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) >> a2) & 1) == 0) {
      return result;
    }
  }
  uint64_t v6 = *(void *)(a3 + 112);
  uint64_t v7 = *(void *)(a3 + 120);
  while (v6 != v7)
  {
    __n128 result = *(void **)(*(void *)v6 + 8);
    if (result)
    {
      if (*(void *)(v6 + 16)) {
        __n128 result = (void *)(*(uint64_t (**)(void *, void, void, uint64_t, void))(*result + 664))(result, *(unsigned __int8 *)(a3 + 8), *(unsigned int *)(v6 + 96), a4, *(unsigned int *)(v6 + 24));
      }
    }
    v6 += 128;
  }
  return result;
}

void sub_1BAC7F874(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_BufferFactory::unregister_buffers_non_dsp(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (!*(_DWORD *)(a3 + 108)
    || ((v6 = *(uint64_t **)(a3 + 112), *(uint64_t **)(a3 + 120) != v6) ? (BOOL v7 = v6 == 0) : (BOOL v7 = 1), v7))
  {
    uint64_t v6 = (uint64_t *)(a3 + 408);
  }
  uint64_t v8 = *v6;
  if (*(unsigned char *)(a3 + 8))
  {
    if (*(void *)(result + 32) > (unint64_t)a2)
    {
      result += 24;
      goto LABEL_12;
    }
  }
  else if (*(void *)(result + 8) > (unint64_t)a2)
  {
LABEL_12:
    if (((*(void *)(*(void *)result + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) >> a2) & 1) == 0) {
      return result;
    }
  }
  __n128 result = *(void *)(v8 + 8);
  if (result && *(void *)(a3 + 16))
  {
    __n128 result = (*(uint64_t (**)(uint64_t, BOOL, void))(*(void *)result + 488))(result, *(unsigned char *)(a3 + 8) != 0, *(unsigned int *)(a3 + 12));
    if ((result & 1) == 0) {
      return (*(uint64_t (**)(void, void, void, uint64_t, void, void))(**(void **)(v8 + 8) + 664))(*(void *)(v8 + 8), *(unsigned __int8 *)(a3 + 8), *(unsigned int *)(a3 + 12), a4, *(unsigned int *)(a3 + 24), *(void *)(a3 + 16));
    }
  }
  return result;
}

void sub_1BAC7F9B8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

__n128 std::__function::__func<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14684B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F14684B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1,std::allocator<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::~__func()
{
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_BufferFactory::unregister_buffers(HALS_IOStreamActiveState const&,unsigned int)::$_0>(void ***a1, _DWORD *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)a2;
  int v4 = *(_DWORD *)(*(void *)a2 + 108);
  unsigned int v5 = **a1;
  unsigned int v6 = a2[2];
  uint64_t v7 = *((unsigned int *)v2 + 2);
  if (v4) {
    HALS_BufferFactory::unregister_buffers_for_dsp(v5, v6, v3, v7);
  }
  else {
    HALS_BufferFactory::unregister_buffers_non_dsp((uint64_t)v5, v6, v3, v7);
  }
  return 0;
}

void *std::__function::__func<HALS_BufferFactory::free_buffers(void)::$_1,std::allocator<HALS_BufferFactory::free_buffers(void)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::target_type()
{
}

uint64_t std::__function::__func<HALS_BufferFactory::free_buffers(void)::$_1,std::allocator<HALS_BufferFactory::free_buffers(void)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN18HALS_BufferFactory12free_buffersEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_BufferFactory::free_buffers(void)::$_1,std::allocator<HALS_BufferFactory::free_buffers(void)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::operator()(int a1, HALS_IOStreamInfo *a2, HALS_BufferFactory *this)
{
  return 0;
}

void HALS_BufferFactory::free_buffers_non_dsp(HALS_BufferFactory *this, HALS_IOStreamInfo *a2)
{
  uint64_t v3 = (HALB_IOBufferManager_Server *)*((void *)this + 2);
  if (v3 != *((HALB_IOBufferManager_Server **)this + 7)) {
    HALB_IOBufferManager_Server::FreeBuffer(v3, *((_DWORD *)this + 6));
  }
  HALB_IOBufferManager_Server::FreeBuffer(*((HALB_IOBufferManager_Server **)this + 4), *((_DWORD *)this + 12));
  HALB_IOBufferManager_Server::FreeBuffer(*((HALB_IOBufferManager_Server **)this + 5), *((_DWORD *)this + 12));
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
}

void sub_1BAC7FB84(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void std::__function::__func<HALS_BufferFactory::free_buffers(void)::$_1,std::allocator<HALS_BufferFactory::free_buffers(void)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1468530;
}

void *std::__function::__func<HALS_BufferFactory::free_buffers(void)::$_1,std::allocator<HALS_BufferFactory::free_buffers(void)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_1F1468530;
  return result;
}

void std::__function::__func<HALS_BufferFactory::free_buffers(void)::$_1,std::allocator<HALS_BufferFactory::free_buffers(void)::$_1>,int ()(unsigned long,HALS_IOStreamInfo &)>::~__func()
{
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_BufferFactory::free_buffers(void)::$_0>(uint64_t a1, HALS_IOStreamInfo *a2)
{
  uint64_t v2 = *(HALS_BufferFactory **)a2;
  uint64_t v3 = *(void *)(*(void *)a2 + 112);
  uint64_t v4 = *(void *)(*(void *)a2 + 120);
  if (v3 != v4)
  {
    do
    {
      HALB_IOBufferManager_Server::FreeBuffer(*(HALB_IOBufferManager_Server **)(v3 + 16), *(_DWORD *)(v3 + 24));
      *(void *)(v3 + 16) = 0;
      *(_DWORD *)(v3 + 24) = 0;
      HALB_IOBufferManager_Server::FreeBuffer(*(HALB_IOBufferManager_Server **)(v3 + 32), *(_DWORD *)(v3 + 40));
      *(void *)(v3 + 32) = 0;
      *(_DWORD *)(v3 + 40) = 0;
      v3 += 128;
    }
    while (v3 != v4);
    uint64_t v2 = *(HALS_BufferFactory **)a2;
  }
  HALS_BufferFactory::free_buffers_non_dsp(v2, a2);
  return 0;
}

uint64_t HALS_MetaDevice::_HandleGroupObjectPropertiesChanged(HALS_MetaDevice *this, unsigned int a2, unsigned int a3, int a4, const unsigned int *a5, const unsigned int *a6, unsigned int a7, AudioObjectPropertyAddress *a8, CAPropertyAddressList *a9, CAPropertyAddressListVector *a10)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)this + 40))();
  if (result)
  {
    *(_WORD *)uint64_t v97 = 0;
    if (a7)
    {
      LOBYTE(v19) = 0;
      int v20 = 0;
      p_AudioObjectPropertyScope mScope = &a8->mScope;
      uint64_t v22 = a7;
      while (1)
      {
        int v23 = *(p_mScope - 1);
        if (v23 > 1983996970) {
          break;
        }
        if (v23 == 1934647636) {
          goto LABEL_11;
        }
        if (v23 == 1684629094)
        {
          unsigned int v81 = v17;
          char v87 = 0;
          unsigned int v85 = 1;
          goto LABEL_17;
        }
LABEL_12:
        p_mScope += 3;
        if (!--v22)
        {
          unsigned int v81 = v17;
          unsigned int v85 = 0;
          char v87 = 1;
          goto LABEL_17;
        }
      }
      if (v23 != 1986622324 && v23 != 1983996971) {
        goto LABEL_12;
      }
LABEL_11:
      uint64_t v18 = *(void *)p_mScope;
      unsigned int v17 = v23 >> 8;
      int v20 = 1;
      int v19 = *(p_mScope - 1);
      goto LABEL_12;
    }
    int v20 = 0;
    LOBYTE(v19) = 0;
    unsigned int v85 = 0;
    char v87 = 1;
LABEL_17:
    int v84 = v20;
    unsigned __int8 v82 = v19;
    uint64_t v25 = (HALS_MetaSubDevice *)*((void *)this + 178);
    if (!v25) {
      uint64_t v25 = (HALS_MetaSubDevice *)*((void *)this + 177);
    }
    int v26 = 0;
    uint64_t v83 = v18;
    unsigned int v86 = a3;
    int v88 = a4;
    int v27 = 0;
    if (v25 && a4)
    {
      uint64_t v28 = 0;
      uint64_t v29 = a8;
      while (1)
      {
        unsigned int v30 = a5[v28];
        if (v30 == *((_DWORD *)v25 + 4) || v30 == HALS_MetaSubDevice::GetRealDeviceObjectID(v25)) {
          break;
        }
        v29 += a6[v28++];
        if (a4 == v28)
        {
          int v26 = 0;
          int v27 = 0;
          goto LABEL_38;
        }
      }
      uint64_t v31 = a6[v28];
      if (v31)
      {
        char v32 = 0;
        char v33 = 0;
        do
        {
          AudioObjectPropertySelector mSelector = v29->mSelector;
          if (HALS_MetaDevice::PassRealNotificationToClient((HALS_MetaDevice *)v29->mSelector, (const AudioObjectPropertyAddress *)1))
          {
            CAPropertyAddressList::AppendUniqueItem(a9, v29, v35);
            AudioObjectPropertySelector mSelector = v29->mSelector;
          }
          if (mSelector == 1853059700) {
            char v33 = 1;
          }
          if (mSelector == 1853059619) {
            char v32 = 1;
          }
          ++v29;
          --v31;
        }
        while (v31);
      }
      else
      {
        char v33 = 0;
        char v32 = 0;
      }
      int v26 = v33 & 1;
      int v27 = v32 & 1;
    }
LABEL_38:
    if ((v26 & 1) != 0 || v27)
    {
      uint64_t v36 = 0;
      char v37 = 1;
      do
      {
        char v38 = v37;
        unsigned int v39 = (char *)this + 24 * v36;
        long long v40 = (unsigned int **)*((void *)v39 + 180);
        if (v40 != *((unsigned int ***)v39 + 181))
        {
          char v41 = (unsigned int ***)(v39 + 1448);
          do
          {
            uint64_t v42 = *v40;
            if (!(*(unsigned int (**)(unsigned int *))(*(void *)*v40 + 280))(*v40))
            {
              (*(void (**)(unsigned int *))(*(void *)v42 + 272))(v42);
              uint64_t v44 = v42[4];
              uint64_t v45 = *(void *)a10;
              while (v45 != *((void *)a10 + 1))
              {
                uint64_t v46 = *(void *)(v45 + 24);
                v45 += 32;
                if (v46 == v44)
                {
LABEL_53:
                  int v48 = (CAPropertyAddressList *)(v45 - 32);
                  if (v26)
                  {
                    *(void *)&long long v93 = 0x676C6F6270667420;
                    DWORD2(v93) = 0;
                    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v45 - 32), (AudioObjectPropertyAddress *)&v93, v43);
                    *(void *)&long long v93 = 0x676C6F6273666D74;
                    DWORD2(v93) = 0;
                    CAPropertyAddressList::AppendUniqueItem(v48, (AudioObjectPropertyAddress *)&v93, v49);
                  }
                  if (v27)
                  {
                    *(void *)&long long v93 = 0x676C6F6270667461;
                    DWORD2(v93) = 0;
                    CAPropertyAddressList::AppendUniqueItem(v48, (AudioObjectPropertyAddress *)&v93, v43);
                    *(void *)&long long v93 = 0x676C6F6273666D61;
                    DWORD2(v93) = 0;
                    CAPropertyAddressList::AppendUniqueItem(v48, (AudioObjectPropertyAddress *)&v93, v50);
                  }
                  goto LABEL_44;
                }
              }
              long long v93 = 0uLL;
              float32x4_t v94 = 0;
              uint64_t v95 = v44;
              CAPropertyAddressListVector::AppendItem(a10, (uint64_t **)&v93);
              uint64_t v45 = *(void *)a10;
              while (v45 != *((void *)a10 + 1))
              {
                uint64_t v47 = *(void *)(v45 + 24);
                v45 += 32;
                if (v47 == v42[4]) {
                  goto LABEL_53;
                }
              }
            }
LABEL_44:
            ++v40;
          }
          while (v40 != *v41);
        }
        char v37 = 0;
        uint64_t v36 = 1;
      }
      while ((v38 & 1) != 0);
    }
    if (v88)
    {
      for (uint64_t i = 0; i != v88; ++i)
      {
        uint64_t v53 = (*(uint64_t (**)(HALS_MetaDevice *, void))(*(void *)this + 952))(this, a5[i]);
        if (v53
          || (uint64_t v53 = (*(uint64_t (**)(HALS_MetaDevice *, void))(*(void *)this + 960))(this, a5[i])) != 0)
        {
          uint64_t v54 = *(unsigned int *)(v53 + 16);
          uint64_t v55 = *(void *)a10;
          while (v55 != *((void *)a10 + 1))
          {
            uint64_t v56 = *(void *)(v55 + 24);
            v55 += 32;
            if (v56 == v54)
            {
LABEL_69:
              uint64_t v58 = (CAPropertyAddressList *)(v55 - 32);
              goto LABEL_71;
            }
          }
          long long v93 = 0uLL;
          float32x4_t v94 = 0;
          uint64_t v95 = v54;
          CAPropertyAddressListVector::AppendItem(a10, (uint64_t **)&v93);
          uint64_t v55 = *(void *)a10;
          while (v55 != *((void *)a10 + 1))
          {
            uint64_t v57 = *(void *)(v55 + 24);
            v55 += 32;
            if (v57 == *(_DWORD *)(v53 + 16)) {
              goto LABEL_69;
            }
          }
          uint64_t v58 = 0;
LABEL_71:
          if (a6[i])
          {
            unint64_t v59 = 0;
            uint64_t v60 = a8;
            do
            {
              CAPropertyAddressList::AppendUniqueItem(v58, v60, v52);
              ++v59;
              unint64_t v61 = a6[i];
              ++v60;
            }
            while (v59 < v61);
          }
          else
          {
            LODWORD(v61) = 0;
          }
        }
        else
        {
          LODWORD(v61) = a6[i];
        }
        a8 += v61;
      }
    }
    if ((v87 & 1) == 0)
    {
      HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)&v93);
      HALS_DeviceState::Capture((HALS_DeviceState *)&v93, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
      HALS_MetaDeviceDescription::UpdateSubDeviceList((CFDictionaryRef *)this + 165, 0);
      HALS_MetaDevice::_UpdateStreams((const __CFDictionary **)this, (BOOL *)v97);
      HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)v91);
      HALS_DeviceState::Capture((HALS_DeviceState *)v91, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
      HALS_DeviceState::Compare((HALS_DeviceState *)&v93, (const HALS_DeviceState *)v91, (const AudioObjectPropertyAddress *)a9, (CAPropertyAddressList **)a10, v62);
      *(void *)&v90.AudioObjectPropertySelector mSelector = 0x676C6F62616D7374;
      v90.AudioObjectPropertyElement mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a9, &v90, v63);
      *(void *)&v90.AudioObjectPropertySelector mSelector = 0x676C6F6261706364;
      v90.AudioObjectPropertyElement mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a9, &v90, v64);
      *(void *)&v90.AudioObjectPropertySelector mSelector = 0x676C6F6267727570;
      v90.AudioObjectPropertyElement mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a9, &v90, v65);
      *(void *)&v90.AudioObjectPropertySelector mSelector = 0x676C6F6261677270;
      v90.AudioObjectPropertyElement mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a9, &v90, v66);
      *(void *)&v90.AudioObjectPropertySelector mSelector = 0x676C6F6261746170;
      v90.AudioObjectPropertyElement mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a9, &v90, v67);
      *(void *)&v90.AudioObjectPropertySelector mSelector = 0x676C6F6274617023;
      v90.AudioObjectPropertyElement mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a9, &v90, v68);
      *(void *)&v90.AudioObjectPropertySelector mSelector = 0x676C6F6261636F6DLL;
      v90.AudioObjectPropertyElement mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a9, &v90, v69);
      *(void *)&v90.AudioObjectPropertySelector mSelector = 0x676C6F6273746D23;
      v90.AudioObjectPropertyElement mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(a9, &v90, v70);
      BOOL v72 = v97[1];
      BOOL v73 = v97[0];
      if (v97[1] | v97[0])
      {
        *(void *)&v90.AudioObjectPropertySelector mSelector = 0x676C6F6273746D23;
        v90.AudioObjectPropertyElement mElement = 0;
        CAPropertyAddressList::AppendUniqueItem(a9, &v90, v71);
        if (v72)
        {
          *(void *)&v90.AudioObjectPropertySelector mSelector = 0x696E707473746D23;
          v90.AudioObjectPropertyElement mElement = 0;
          CAPropertyAddressList::AppendUniqueItem(a9, &v90, v74);
        }
        if (v73)
        {
          *(void *)&v90.AudioObjectPropertySelector mSelector = 0x6F75747073746D23;
          v90.AudioObjectPropertyElement mElement = 0;
          CAPropertyAddressList::AppendUniqueItem(a9, &v90, v74);
        }
        if (*(void *)a9 == *((void *)a9 + 1))
        {
          uint64_t v75 = *(uint64_t **)a10;
          while (v75 != *((uint64_t **)a10 + 1))
          {
            uint64_t v76 = *v75;
            uint64_t v77 = v75[1];
            v75 += 4;
            if (v76 != v77) {
              goto LABEL_88;
            }
          }
        }
        else
        {
LABEL_88:
          *(void *)&v90.AudioObjectPropertySelector mSelector = 0x676C6F6264696666;
          v90.AudioObjectPropertyElement mElement = 0;
          CAPropertyAddressList::AppendUniqueItem(a9, &v90, v74);
        }
      }
      *(void *)&v90.AudioObjectPropertySelector mSelector = &v92;
      std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
      std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v91[2]);
      v91[0] = (void **)&v96;
      std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100](v91);
      std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v94);
    }
    if (v86 && v84)
    {
      uint64_t v79 = (HALS_Client *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)v86);
      if (v79)
      {
        HALS_MetaDevice::InheritSubdeviceDSPForClient(this, v83 == 1768845428, v79);
        LODWORD(v93) = v82 | (v81 << 8);
        *(void *)((char *)&v93 + 4) = v83;
        CAPropertyAddressList::AppendUniqueItem(a9, (AudioObjectPropertyAddress *)&v93, v80);
      }
      HALS_ObjectMap::ReleaseObject(v79, v78);
    }
    return v85;
  }
  return result;
}

void sub_1BAC80470(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  HALS_ObjectMap::ReleaseObject(v28, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaDevice::PassRealNotificationToClient(HALS_MetaDevice *this, const AudioObjectPropertyAddress *a2)
{
  int v2 = (int)this;
  uint64_t result = 0;
  if (v2 > 1935762291)
  {
    if (v2 <= 1935960433)
    {
      if (v2 == 1935762292 || v2 == 1935763060) {
        return 1;
      }
      int v4 = 1935894638;
    }
    else
    {
      if (v2 <= 1936092531)
      {
        if (v2 != 1935960434)
        {
          int v4 = 1936092513;
          goto LABEL_20;
        }
        return 1;
      }
      if (v2 == 1936092532) {
        return 1;
      }
      int v4 = 1952805485;
    }
LABEL_20:
    if (v2 != v4) {
      return result;
    }
    return 1;
  }
  if (v2 > 1853059699)
  {
    if (v2 == 1853059700) {
      return (uint64_t)a2;
    }
    if (v2 == 1885762592) {
      return 1;
    }
    int v4 = 1885762657;
    goto LABEL_20;
  }
  if (v2 == 1684629094 || v2 == 1819569763) {
    return 1;
  }
  if (v2 == 1853059619) {
    return a2;
  }
  else {
    return 0;
  }
}

void HALS_MetaDevice::_UpdateStreams(const __CFDictionary **this, BOOL *a2)
{
  int v2 = a2;
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  int v4 = this + 165;
  if (HALS_MetaDeviceDescription::IsStackRequested(this + 165)) {
    goto LABEL_2;
  }
  CFDictionaryRef v6 = this[169];
  uint64_t v7 = (uint64_t **)this[168];
  if (v6 - (const __CFDictionary *)v7 == 24 && (unint64_t)((char *)v7[1] - (char *)*v7) > 8) {
    goto LABEL_2;
  }
  if (v7 == (uint64_t **)v6) {
    goto LABEL_18;
  }
  CFDictionaryRef v8 = (const __CFDictionary *)(v7 + 3);
  do
  {
    unint64_t v9 = *((void *)v8 - 2) - *((void *)v8 - 3);
    BOOL v10 = v9 > 0xF || v8 == v6;
    CFDictionaryRef v8 = (const __CFDictionary *)((char *)v8 + 24);
  }
  while (!v10);
  if (v9 > 0xF)
  {
LABEL_2:
    BOOL updated = HALS_MetaDevice::_UpdateStreams_Output_Stacked(this);
    goto LABEL_37;
  }
  if (this[177]) {
    BOOL v11 = v7 == (uint64_t **)v6;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    int v12 = 0;
    uint64_t v13 = 0;
    do
    {
      unint64_t v14 = *v7;
      if (*v7 != v7[1] && *v14)
      {
        uint64_t v15 = HALS_MetaSubDevice::CopyRealDevice<HALS_Device>(*v14);
        unsigned int v17 = (HALS_ObjectMap *)v15;
        if (v15)
        {
          BOOL v72 = 0;
          BOOL v73 = 0;
          uint64_t v74 = 0;
          HALS_Device::CopyStreamList(v15, 0, &v72);
          if (v73 != v72)
          {
            unint64_t v19 = 0;
            do
            {
              uint64_t v20 = (*((uint64_t (**)(const __CFDictionary **, void, uint64_t))*this + 49))(this, 0, v13);
              uint64_t v21 = (HALS_ObjectMap *)v20;
              if (!v20) {
                operator new();
              }
              (*(void (**)(uint64_t, void, HALS_ObjectMap *, unint64_t))(*(void *)v20 + 232))(v20, 0, v17, v19);
              HALS_ObjectMap::ReleaseObject(v21, v22);
              uint64_t v13 = (v13 + 1);
              unint64_t v19 = (v19 + 1);
            }
            while (v19 < (v73 - v72) >> 3);
          }
          HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)&v72, v18);
        }
        HALS_ObjectMap::ReleaseObject(v17, v16);
      }
      v7 += 3;
    }
    while (v7 != (uint64_t **)v6);
    goto LABEL_31;
  }
LABEL_18:
  int v12 = 0;
  LODWORD(v13) = 0;
LABEL_31:
  unint64_t v23 = v13;
  CFDictionaryRef v24 = this[180];
  if (v13 < (unint64_t)((this[181] - v24) >> 3))
  {
    do
    {
      uint64_t v25 = (HALS_ObjectMap *)*((void *)v24 + v23);
      (*(void (**)(HALS_ObjectMap *))(*(void *)v25 + 8))(v25);
      HALS_ObjectMap::ObjectIsDead(v25, v26);
      CFDictionaryRef v24 = this[180];
      int v27 = (char *)v24 + 8 * v23;
      CFDictionaryRef v28 = this[181];
      uint64_t v29 = (char *)(v28 - (const __CFDictionary *)(v27 + 8));
      if (v28 != (const __CFDictionary *)(v27 + 8))
      {
        memmove((char *)v24 + 8 * v23, v27 + 8, v28 - (const __CFDictionary *)(v27 + 8));
        CFDictionaryRef v24 = this[180];
      }
      this[181] = (const __CFDictionary *)&v29[(void)v27];
    }
    while (v23 < (&v29[(void)v27] - (char *)v24) >> 3);
    int v12 = 1;
  }
  BOOL updated = v12 != 0;
  int v2 = a2;
LABEL_37:
  BOOL *v2 = updated;
  CFDictionaryRef v30 = this[177];
  if (HALS_MetaDeviceDescription::GetStackedChannelPolicy(v4)) {
    unsigned __int8 v31 = 0;
  }
  else {
    unsigned __int8 v31 = HALS_MetaDeviceDescription::IsStackRequested(v4);
  }
  int v32 = 0;
  uint64_t v33 = 0;
  if (v30 && (v31 & 1) == 0)
  {
    CFDictionaryRef v34 = this[168];
    CFDictionaryRef v70 = this[169];
    if (v34 == v70)
    {
      int v32 = 0;
      uint64_t v33 = 0;
    }
    else
    {
      int v32 = 0;
      uint64_t v33 = 0;
      do
      {
        uint64_t v36 = *(uint64_t **)v34;
        uint64_t v35 = (uint64_t *)*((void *)v34 + 1);
        CFDictionaryRef v71 = v34;
        while (v36 != v35)
        {
          uint64_t v37 = HALS_MetaSubDevice::CopyRealDevice<HALS_Device>(*v36);
          unsigned int v39 = (HALS_ObjectMap *)v37;
          if (v37)
          {
            BOOL v72 = 0;
            BOOL v73 = 0;
            uint64_t v74 = 0;
            HALS_Device::CopyStreamList(v37, 1, &v72);
            if (v73 != v72)
            {
              unint64_t v41 = 0;
              do
              {
                uint64_t v42 = (*((uint64_t (**)(const __CFDictionary **, uint64_t, uint64_t))*this + 49))(this, 1, v33);
                uint64_t v43 = (HALS_ObjectMap *)v42;
                if (!v42) {
                  operator new();
                }
                (*(void (**)(uint64_t, uint64_t, HALS_ObjectMap *, unint64_t))(*(void *)v42 + 232))(v42, 1, v39, v41);
                HALS_ObjectMap::ReleaseObject(v43, v44);
                uint64_t v33 = (v33 + 1);
                unint64_t v41 = (v41 + 1);
              }
              while (v41 < (v73 - v72) >> 3);
            }
            HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)&v72, v40);
          }
          HALS_ObjectMap::ReleaseObject(v39, v38);
          ++v36;
        }
        CFDictionaryRef v34 = (const __CFDictionary *)((char *)v71 + 24);
      }
      while ((const __CFDictionary *)((char *)v71 + 24) != v70);
    }
  }
  CFDictionaryRef v45 = this[174];
  for (CFDictionaryRef i = this[175]; v45 != i; v45 = (const __CFDictionary *)((char *)v45 + 8))
  {
    uint64_t v47 = *(void *)v45;
    uint64_t v48 = (*((uint64_t (**)(const __CFDictionary **, uint64_t, uint64_t))*this + 49))(this, 1, v33);
    int v49 = (HALS_ObjectMap *)v48;
    if (!v48) {
      operator new();
    }
    (*(void (**)(uint64_t, void))(*(void *)v48 + 248))(v48, *(unsigned int *)(v47 + 72));
    HALS_ObjectMap::ReleaseObject(v49, v50);
    uint64_t v33 = (v33 + 1);
  }
  unint64_t v51 = v33;
  CFDictionaryRef v52 = this[183];
  if (v33 < (unint64_t)((this[184] - v52) >> 3))
  {
    do
    {
      uint64_t v53 = (HALS_ObjectMap *)*((void *)v52 + v51);
      (*(void (**)(HALS_ObjectMap *))(*(void *)v53 + 8))(v53);
      HALS_ObjectMap::ObjectIsDead(v53, v54);
      CFDictionaryRef v52 = this[183];
      uint64_t v55 = (char *)v52 + 8 * v51;
      CFDictionaryRef v56 = this[184];
      uint64_t v57 = (char *)(v56 - (const __CFDictionary *)(v55 + 8));
      if (v56 != (const __CFDictionary *)(v55 + 8))
      {
        memmove((char *)v52 + 8 * v51, v55 + 8, v56 - (const __CFDictionary *)(v55 + 8));
        CFDictionaryRef v52 = this[183];
      }
      this[184] = (const __CFDictionary *)&v57[(void)v55];
    }
    while (v51 < (&v57[(void)v55] - (char *)v52) >> 3);
    int v32 = 1;
  }
  char v58 = 0;
  a2[1] = v32 != 0;
  char v59 = 1;
  do
  {
    char v60 = v59;
    int NumberStreams = HALS_IODevice::GetNumberStreams((HALS_IODevice *)this, v58 & 1);
    if (NumberStreams)
    {
      int v62 = NumberStreams;
      uint64_t v63 = 0;
      int v64 = 1;
      do
      {
        uint64_t v65 = (HALS_Stream *)(*((uint64_t (**)(const __CFDictionary **, void, uint64_t))*this + 49))(this, v58 & 1, v63);
        (*(void (**)(void))(*(void *)v65 + 264))();
        int NumberChannels = HALS_Stream::GetNumberChannels(v65);
        HALS_ObjectMap::ReleaseObject(v65, v67);
        v64 += NumberChannels;
        uint64_t v63 = (v63 + 1);
      }
      while (v62 != v63);
    }
    char v59 = 0;
    char v58 = 1;
  }
  while ((v60 & 1) != 0);
  BOOL v68 = this[181] == this[180] && this[184] != this[183];
  *((unsigned char *)this + 432) = v68;
}

void sub_1BAC81040(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)va, a2);
  HALS_ObjectMap::ReleaseObject(v6, v8);
  _Unwind_Resume(a1);
}

void HALS_MetaDevice::InheritSubdeviceDSPForClient(HALS_MetaDevice *this, char a2, HALS_Client *a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZN15HALS_MetaDevice28InheritSubdeviceDSPForClientEbP11HALS_Client_block_invoke;
  v4[3] = &__block_descriptor_tmp_141;
  char v5 = a2;
  v4[4] = this;
  unsigned char v4[5] = a3;
  uint64_t v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v4);
}

uint64_t ___ZN15HALS_MetaDevice28InheritSubdeviceDSPForClientEbP11HALS_Client_block_invoke(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    int v2 = *(uint64_t ***)(result + 32);
    uint64_t v1 = *(void *)(result + 40);
    uint64_t result = HALS_Device::GetNumberStreamsExcludingReferenceStreams((HALS_Device *)v2, 1);
    if (result)
    {
      uint64_t v22 = 0x696E707476697374;
      int v23 = 0;
      uint64_t v3 = v2[168];
      int v4 = v2[169];
      if (v3 == v4) {
        goto LABEL_11;
      }
      int v5 = 0;
      do
      {
        uint64_t v7 = *v3;
        uint64_t v6 = v3[1];
        v3 += 3;
        v5 += (unint64_t)(v6 - v7) >> 3;
      }
      while (v3 != v4);
      if (!v5)
      {
LABEL_11:
        BOOL v10 = v1 != 0;
      }
      else
      {
        int v8 = 0;
        while (1)
        {
          uint64_t result = HALS_MetaDeviceDescription::GetSubDeviceByIndex((uint64_t **)v2[168], (HALS_MetaDeviceDescription *)v2[169], v8);
          if (result)
          {
            uint64_t v9 = result;
            uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t *, uint64_t))(*(void *)result + 88))(result, 0, &v22, v1);
            if (result) {
              break;
            }
          }
          if (v5 == ++v8) {
            goto LABEL_11;
          }
        }
        int v19 = 4;
        int v20 = 0;
        uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t *, uint64_t, int *, int *, void, void, uint64_t))(*(void *)v9 + 112))(v9, 0, &v22, 4, &v19, &v20, 0, 0, v1);
        int v21 = v20;
        BOOL v10 = v1 != 0;
        if (v1 && v20)
        {
          uint64_t result = ((uint64_t (*)(uint64_t **, void, uint64_t *, uint64_t, int *, void, void, uint64_t))(*v2)[15])(v2, 0, &v22, 4, &v21, 0, 0, v1);
          BOOL v10 = 1;
        }
      }
      uint64_t v22 = 0x696E70747641642BLL;
      int v23 = 0;
      BOOL v11 = v2[168];
      int v12 = v2[169];
      if (v11 != v12)
      {
        int v13 = 0;
        do
        {
          uint64_t v15 = *v11;
          uint64_t v14 = v11[1];
          v11 += 3;
          v13 += (unint64_t)(v14 - v15) >> 3;
        }
        while (v11 != v12);
        if (v13)
        {
          int v16 = 0;
          while (1)
          {
            uint64_t result = HALS_MetaDeviceDescription::GetSubDeviceByIndex((uint64_t **)v2[168], (HALS_MetaDeviceDescription *)v2[169], v16);
            if (result)
            {
              uint64_t v17 = result;
              uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t *, uint64_t))(*(void *)result + 88))(result, 0, &v22, v1);
              if (result) {
                break;
              }
            }
            if (v13 == ++v16) {
              return result;
            }
          }
          int v19 = 4;
          int v20 = 0;
          uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t *, uint64_t, int *, int *, void, void, uint64_t))(*(void *)v17 + 112))(v17, 0, &v22, 4, &v19, &v20, 0, 0, v1);
          int v21 = v20;
          if (v20) {
            BOOL v18 = v10;
          }
          else {
            BOOL v18 = 0;
          }
          if (v18) {
            return ((uint64_t (*)(uint64_t **, void, uint64_t *, uint64_t, int *, void, void, uint64_t))(*v2)[15])(v2, 0, &v22, 4, &v21, 0, 0, v1);
          }
        }
      }
    }
  }
  return result;
}

BOOL HALS_MetaDevice::_UpdateStreams_Output_Stacked(const __CFDictionary **this)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!this[177] || (CFDictionaryRef v2 = this[168], v3 = this[169], v2 == v3))
  {
    int v4 = 0;
    LODWORD(v5) = 0;
  }
  else
  {
    int v4 = 0;
    uint64_t v5 = 0;
    do
    {
      if (*(void *)v2 != *((void *)v2 + 1))
      {
        FirstDeviceWithDirectiouint64_t n = HALS_MetaDeviceDescription::FindFirstDeviceWithDirection((HALS_MetaSubDevice ***)v2);
        if (FirstDeviceWithDirection)
        {
          uint64_t v7 = (HALS_Device *)HALS_MetaSubDevice::CopyRealDevice<HALS_Device>((uint64_t)FirstDeviceWithDirection);
          uint64_t v9 = v7;
          if (v7)
          {
            Totalint NumberChannels = HALS_Device::GetTotalNumberChannels(v7, 0);
            if (HALS_MetaDeviceDescription::GetStackedChannelPolicy(this + 165)) {
              uint64_t v11 = TotalNumberChannels;
            }
            else {
              uint64_t v11 = 2;
            }
            uint64_t v12 = (*((uint64_t (**)(const __CFDictionary **, void, uint64_t))*this + 49))(this, 0, v5);
            int v13 = (HALS_ObjectMap *)v12;
            if (!v12) {
              operator new();
            }
            (*(void (**)(uint64_t, void, uint64_t))(*(void *)v12 + 240))(v12, 0, v11);
            HALS_ObjectMap::ReleaseObject(v13, v14);
            uint64_t v5 = (v5 + 1);
          }
          HALS_ObjectMap::ReleaseObject(v9, v8);
        }
      }
      CFDictionaryRef v2 = (const __CFDictionary *)((char *)v2 + 24);
    }
    while (v2 != v3);
  }
  unint64_t v15 = v5;
  CFDictionaryRef v16 = this[180];
  if (v5 < (unint64_t)((this[181] - v16) >> 3))
  {
    do
    {
      uint64_t v17 = (HALS_ObjectMap *)*((void *)v16 + v15);
      (*(void (**)(HALS_ObjectMap *))(*(void *)v17 + 8))(v17);
      HALS_ObjectMap::ObjectIsDead(v17, v18);
      CFDictionaryRef v16 = this[180];
      int v19 = (char *)v16 + 8 * v15;
      CFDictionaryRef v20 = this[181];
      int v21 = (char *)(v20 - (const __CFDictionary *)(v19 + 8));
      if (v20 != (const __CFDictionary *)(v19 + 8))
      {
        memmove((char *)v16 + 8 * v15, v19 + 8, v20 - (const __CFDictionary *)(v19 + 8));
        CFDictionaryRef v16 = this[180];
      }
      this[181] = (const __CFDictionary *)&v21[(void)v19];
    }
    while (v15 < (&v21[(void)v19] - (char *)v16) >> 3);
    int v4 = 1;
  }
  return v4 != 0;
}

void sub_1BAC81934(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(0, a2);
  HALS_ObjectMap::ReleaseObject(v2, v4);
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaSubDevice::CopyRealDevice<HALS_Device>(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  uint64_t v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK18HALS_MetaSubDevice14CopyRealDeviceI11HALS_DeviceEEPT_v_block_invoke;
  v4[3] = &unk_1E6232340;
  v4[4] = &v5;
  unsigned char v4[5] = a1;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BAC81A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

HALS_ObjectMap *___ZNK18HALS_MetaSubDevice14CopyRealDeviceI11HALS_DeviceEEPT_v_block_invoke(uint64_t a1)
{
  uint64_t result = HALS_MetaSubDevice::_CopyRealDevice<HALS_Device>(*(void *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAC81AE0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

HALS_ObjectMap *HALS_MetaSubDevice::_CopyRealDevice<HALS_Device>(uint64_t a1)
{
  uint64_t v1 = (HALS_ObjectMap **)boost::variant<HALS_Device *,HALS_ClockDevice *>::apply_visitor<boost::detail::variant::get_visitor<HALS_Device * const>>((int *)(a1 + 56));
  if (!v1) {
    boost::throw_exception<boost::bad_get>();
  }
  CFDictionaryRef v3 = *v1;
  HALS_ObjectMap::RetainObject(*v1, v2);
  return v3;
}

void sub_1BAC81B68(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

_DWORD *boost::variant<HALS_Device *,HALS_ClockDevice *>::apply_visitor<boost::detail::variant::get_visitor<HALS_Device * const>>(int *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 2;
  switch(v2 ^ (v2 >> 31))
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 0;
      break;
    default:
      boost::detail::variant::forced_return<BOOL>();
  }
  return result;
}

void boost::throw_exception<boost::bad_get>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
  exception[4] = 0;
  exception[5] = 0;
  *((_DWORD *)exception + 12) = -1;
  *exceptiouint64_t n = &unk_1F1480620;
  exception[1] = &unk_1F1480650;
  exception[2] = &unk_1F1480678;
  exception[3] = 0;
}

uint64_t boost::wrapexcept<boost::bad_get>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_get>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t vars8;

  *a1 = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);

  std::exception::~exception((std::exception *)a1 - 1);
}

const char *boost::bad_get::what(boost::bad_get *this)
{
  return "boost::bad_get: failed value get using boost::get";
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_get>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t vars8;

  *(void *)(a1 + 8) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));

  std::exception::~exception((std::exception *)a1);
}

void boost::wrapexcept<boost::bad_get>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));

  JUMPOUT(0x1C1859840);
}

void boost::wrapexcept<boost::bad_get>::rethrow(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
  boost::wrapexcept<boost::bad_get>::wrapexcept((uint64_t)exception, a1);
}

void sub_1BAC81F84(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::bad_get>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F148A978;
  *(void *)(a1 + 8) = &unk_1F1480698;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_1F148A9F0;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_1F1480620;
  *(void *)(a1 + 8) = &unk_1F1480650;
  *(void *)(a1 + 16) = &unk_1F1480678;
  return a1;
}

void sub_1BAC820B4(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_get>::clone()
{
}

void sub_1BAC82288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::bad_get::~bad_get(std::exception *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x1C1859840);
}

HALS_MetaSubDevice *HALS_MetaDeviceDescription::FindFirstDeviceWithDirection(HALS_MetaSubDevice ***a1)
{
  uint64_t v1 = *a1;
  int v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  while (!HALS_MetaSubDevice::GetNumberStreams(*v1, 0))
  {
    if (++v1 == v2)
    {
      uint64_t v1 = v2;
      break;
    }
  }
  if (v1 == a1[1]) {
    return 0;
  }
  else {
    return *v1;
  }
}

uint64_t HALS_MetaDevice::_HandleObjectPropertiesChanged(const HALS_Object **this, const HALS_Object *a2, unsigned int a3, unsigned int a4, AudioObjectPropertyAddress *a5, CAPropertyAddressList *a6, CAPropertyAddressListVector *a7)
{
  uint64_t result = (*((uint64_t (**)(void))*this + 5))();
  if (!result) {
    return result;
  }
  *(_WORD *)uint64_t v79 = 0;
  if (a4)
  {
    char v17 = 0;
    LOBYTE(v18) = 0;
    int v19 = 0;
    p_AudioObjectPropertyScope mScope = &a5->mScope;
    uint64_t v21 = a4;
    while (1)
    {
      int v22 = *(p_mScope - 1);
      if (v22 > 1983996970)
      {
        if (v22 != 1986622324 && v22 != 1983996971) {
          goto LABEL_15;
        }
      }
      else
      {
        if (v22 == 1684629094)
        {
          char v17 = 1;
          goto LABEL_15;
        }
        if (v22 != 1934647636) {
          goto LABEL_15;
        }
      }
      uint64_t v16 = *(void *)p_mScope;
      unsigned int v15 = v22 >> 8;
      int v19 = 1;
      int v18 = *(p_mScope - 1);
LABEL_15:
      p_mScope += 3;
      if (!--v21) {
        goto LABEL_18;
      }
    }
  }
  int v19 = 0;
  LOBYTE(v18) = 0;
  char v17 = 0;
LABEL_18:
  uint64_t v69 = v16;
  unsigned int v67 = v15;
  unsigned __int8 v68 = v18;
  unsigned int v70 = a3;
  CFDictionaryRef v24 = this[178];
  CFDictionaryRef v71 = a6;
  if ((v24 || (CFDictionaryRef v24 = this[177]) != 0)
    && (v24 == a2 || (int v25 = *((_DWORD *)a2 + 4), v25 == HALS_MetaSubDevice::GetRealDeviceObjectID(v24))))
  {
    if (a4)
    {
      char v26 = 0;
      char v27 = 0;
      uint64_t v28 = a4;
      do
      {
        AudioObjectPropertySelector mSelector = a5->mSelector;
        if (HALS_MetaDevice::PassRealNotificationToClient((HALS_MetaDevice *)a5->mSelector, (const AudioObjectPropertyAddress *)1))
        {
          CAPropertyAddressList::AppendUniqueItem(a6, a5, v30);
          AudioObjectPropertySelector mSelector = a5->mSelector;
        }
        if (mSelector == 1853059700) {
          char v27 = 1;
        }
        if (mSelector == 1853059619) {
          char v26 = 1;
        }
        ++a5;
        --v28;
      }
      while (v28);
    }
    else
    {
      char v27 = 0;
      char v26 = 0;
    }
    int v31 = v27 & 1;
    int v32 = v26 & 1;
    if (v31)
    {
LABEL_36:
      uint64_t v33 = 0;
      char v34 = 1;
      do
      {
        char v35 = v34;
        uint64_t v36 = &this[3 * v33];
        uint64_t v37 = (unsigned int **)v36[180];
        if (v37 != (unsigned int **)v36[181])
        {
          char v38 = (unsigned int ***)(v36 + 181);
          do
          {
            unsigned int v39 = *v37;
            if (!(*(unsigned int (**)(unsigned int *))(*(void *)*v37 + 280))(*v37))
            {
              (*(void (**)(unsigned int *))(*(void *)v39 + 272))(v39);
              uint64_t v41 = v39[4];
              uint64_t v42 = *(void *)a7;
              while (v42 != *((void *)a7 + 1))
              {
                uint64_t v43 = *(void *)(v42 + 24);
                v42 += 32;
                if (v43 == v41)
                {
LABEL_49:
                  CFDictionaryRef v45 = (CAPropertyAddressList *)(v42 - 32);
                  if (v31)
                  {
                    *(void *)&long long v75 = 0x676C6F6270667420;
                    DWORD2(v75) = 0;
                    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v42 - 32), (AudioObjectPropertyAddress *)&v75, v40);
                    *(void *)&long long v75 = 0x676C6F6273666D74;
                    DWORD2(v75) = 0;
                    CAPropertyAddressList::AppendUniqueItem(v45, (AudioObjectPropertyAddress *)&v75, v46);
                  }
                  if (v32)
                  {
                    *(void *)&long long v75 = 0x676C6F6270667461;
                    DWORD2(v75) = 0;
                    CAPropertyAddressList::AppendUniqueItem(v45, (AudioObjectPropertyAddress *)&v75, v40);
                    *(void *)&long long v75 = 0x676C6F6273666D61;
                    DWORD2(v75) = 0;
                    CAPropertyAddressList::AppendUniqueItem(v45, (AudioObjectPropertyAddress *)&v75, v47);
                  }
                  goto LABEL_40;
                }
              }
              long long v75 = 0uLL;
              uint64_t v76 = 0;
              uint64_t v77 = v41;
              CAPropertyAddressListVector::AppendItem(a7, (uint64_t **)&v75);
              uint64_t v42 = *(void *)a7;
              while (v42 != *((void *)a7 + 1))
              {
                uint64_t v44 = *(void *)(v42 + 24);
                v42 += 32;
                if (v44 == v39[4]) {
                  goto LABEL_49;
                }
              }
            }
LABEL_40:
            ++v37;
          }
          while (v37 != *v38);
        }
        char v34 = 0;
        uint64_t v33 = 1;
      }
      while ((v35 & 1) != 0);
      goto LABEL_54;
    }
  }
  else
  {
    int v31 = 0;
    int v32 = 0;
  }
  if (v32) {
    goto LABEL_36;
  }
LABEL_54:
  if (v17)
  {
    HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)&v75);
    HALS_DeviceState::Capture((HALS_DeviceState *)&v75, (HALS_Device *)this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
    HALS_MetaDeviceDescription::UpdateSubDeviceList(this + 165, 0);
    HALS_MetaDevice::_UpdateStreams(this, (BOOL *)v79);
    HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)v73);
    HALS_DeviceState::Capture((HALS_DeviceState *)v73, (HALS_Device *)this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
    HALS_DeviceState::Compare((HALS_DeviceState *)&v75, (const HALS_DeviceState *)v73, (const AudioObjectPropertyAddress *)v71, (CAPropertyAddressList **)a7, v48);
    *(void *)&v72.AudioObjectPropertySelector mSelector = 0x676C6F62616D7374;
    v72.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem(v71, &v72, v49);
    *(void *)&v72.AudioObjectPropertySelector mSelector = 0x676C6F6261706364;
    v72.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem(v71, &v72, v50);
    *(void *)&v72.AudioObjectPropertySelector mSelector = 0x676C6F6267727570;
    v72.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem(v71, &v72, v51);
    *(void *)&v72.AudioObjectPropertySelector mSelector = 0x676C6F6261677270;
    v72.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem(v71, &v72, v52);
    *(void *)&v72.AudioObjectPropertySelector mSelector = 0x676C6F6261746170;
    v72.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem(v71, &v72, v53);
    *(void *)&v72.AudioObjectPropertySelector mSelector = 0x676C6F6274617023;
    v72.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem(v71, &v72, v54);
    *(void *)&v72.AudioObjectPropertySelector mSelector = 0x676C6F6261636F6DLL;
    v72.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem(v71, &v72, v55);
    *(void *)&v72.AudioObjectPropertySelector mSelector = 0x676C6F6273746D23;
    v72.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem(v71, &v72, v56);
    BOOL v58 = v79[1];
    BOOL v59 = v79[0];
    if (v79[1] | v79[0])
    {
      *(void *)&v72.AudioObjectPropertySelector mSelector = 0x676C6F6273746D23;
      v72.AudioObjectPropertyElement mElement = 0;
      CAPropertyAddressList::AppendUniqueItem(v71, &v72, v57);
      if (v58)
      {
        *(void *)&v72.AudioObjectPropertySelector mSelector = 0x696E707473746D23;
        v72.AudioObjectPropertyElement mElement = 0;
        CAPropertyAddressList::AppendUniqueItem(v71, &v72, v60);
      }
      if (v59)
      {
        *(void *)&v72.AudioObjectPropertySelector mSelector = 0x6F75747073746D23;
        v72.AudioObjectPropertyElement mElement = 0;
        CAPropertyAddressList::AppendUniqueItem(v71, &v72, v60);
      }
      if (*(void *)v71 == *((void *)v71 + 1))
      {
        unint64_t v61 = *(uint64_t **)a7;
        while (v61 != *((uint64_t **)a7 + 1))
        {
          uint64_t v62 = *v61;
          uint64_t v63 = v61[1];
          v61 += 4;
          if (v62 != v63) {
            goto LABEL_64;
          }
        }
      }
      else
      {
LABEL_64:
        *(void *)&v72.AudioObjectPropertySelector mSelector = 0x676C6F6264696666;
        v72.AudioObjectPropertyElement mElement = 0;
        CAPropertyAddressList::AppendUniqueItem(v71, &v72, v60);
      }
    }
    *(void *)&v72.AudioObjectPropertySelector mSelector = &v74;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v73[2]);
    v73[0] = (void **)&v78;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100](v73);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v76);
  }
  if (v70 && v19)
  {
    uint64_t v65 = (HALS_Client *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)v70);
    if (v65)
    {
      HALS_MetaDevice::InheritSubdeviceDSPForClient((HALS_MetaDevice *)this, v69 == 1768845428, v65);
      LODWORD(v75) = v68 | (v67 << 8);
      *(void *)((char *)&v75 + 4) = v69;
      CAPropertyAddressList::AppendUniqueItem(v71, (AudioObjectPropertyAddress *)&v75, v66);
    }
    HALS_ObjectMap::ReleaseObject(v65, v64);
  }
  return v17 & 1;
}

void sub_1BAC829C8(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  HALS_ObjectMap::ReleaseObject(v24, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaDevice::_GetStreamByRealStreamID(HALS_MetaDevice *this, int a2)
{
  uint64_t v4 = 0;
  char v5 = 1;
  do
  {
    uint64_t v6 = (char *)this + 24 * v4;
    uint64_t v7 = (uint64_t *)*((void *)v6 + 180);
    if (v7 == *((uint64_t **)v6 + 181))
    {
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = (uint64_t **)(v6 + 1448);
      do
      {
        uint64_t v11 = *v7++;
        uint64_t v10 = v11;
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 288))(v11) == a2) {
          uint64_t v8 = v10;
        }
      }
      while (v7 != *v9);
    }
    char v12 = (v8 == 0) & v5;
    uint64_t v4 = 1;
    char v5 = 0;
  }
  while ((v12 & 1) != 0);
  return v8;
}

uint64_t HALS_MetaDevice::_GetStreamByStreamID(HALS_MetaDevice *this, int a2)
{
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    uint64_t v4 = (char *)this + 24 * v2;
    char v5 = (uint64_t *)*((void *)v4 + 180);
    uint64_t v6 = (uint64_t *)*((void *)v4 + 181);
    if (v5 == v6)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v9 = *v5++;
        uint64_t v8 = v9;
        if (*(_DWORD *)(v9 + 16) == a2) {
          uint64_t v7 = v8;
        }
      }
      while (v5 != v6);
    }
    char v10 = (v7 == 0) & v3;
    uint64_t v2 = 1;
    char v3 = 0;
  }
  while ((v10 & 1) != 0);
  return v7;
}

HALS_PlatformBehaviors *HALS_MetaDevice::HasInternalIOContext(HALS_MetaDevice *this)
{
  platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(this);
  uint64_t result = (HALS_PlatformBehaviors *)(*(uint64_t (**)(uint64_t *))(*platform_behaviors + 16))(platform_behaviors);
  if (result != 1)
  {
    char v3 = HALS_PlatformBehaviors::get_platform_behaviors(result);
    return (HALS_PlatformBehaviors *)((*(unsigned int (**)(uint64_t *))(*v3 + 16))(v3) == 2);
  }
  return result;
}

uint64_t HALS_MetaDevice::IsInputMutedForClient(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a2 + 696));
  return v2 & 1;
}

CFDictionaryRef HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_MetaDevice *this, HALS_Client *a2)
{
  uint64_t v180 = *MEMORY[0x1E4F143B8];
  float32x4_t v151 = 0;
  HALS_Device::_GetDSPTypesForClient((uint64_t *)buf, (uint64_t)this, 1, (uint64_t)a2);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(0);
  char v3 = (void *)v171;
  unsigned int v149 = *(NSObject ***)buf;
  long long v150 = v171;
  if (*((void *)&v171 + 1))
  {
    *(void *)(v171 + 16) = &v150;
    *(void *)AudioObjectPropertyAddress buf = &v171;
    long long v171 = 0uLL;
    char v3 = 0;
  }
  else
  {
    unsigned int v149 = (NSObject **)&v150;
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v3);
  uint64_t v4 = (HALS_Device_HostedDSP *)*((void *)this + 76);
  if (v4)
  {
    HALS_Device_HostedDSP::RationalizeDSPOffloadsForClient((HALS_Device_HostedDSP *)buf, v4, (HALS_Client *)1, (uint64_t)a2);
    char v5 = *(DSP_Host_OffloadDictionary **)buf;
  }
  else
  {
    char v5 = 0;
  }
  float32x4_t v136 = a2;
  uint64_t v6 = v151;
  float32x4_t v151 = v5;
  if (v6)
  {
    uint64_t v6 = (AMCP::Log::Scope_Registry *)std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100]((uint64_t)v6);
    char v5 = v151;
  }
  if (v5)
  {
    uint64_t v7 = (__CFString *)CFStringCreateWithBytes(0, (const UInt8 *)"dsp offload bypass override", 27, 0x8000100u, 0);
    p_isa = &v7->isa;
    if (!v7)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (OS::CF::DictionaryBase<__CFDictionary const*>::HasKey(*((const __CFDictionary **)this + 167), v7))
    {
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Dictionary>((uint64_t)buf, *((CFDictionaryRef *)this + 167), v7);
      if ((void)v171) {
        operator new();
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
    }
    CFRelease(v7);
  }
  AMCP::Log::Scope_Registry::get(v6);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  uint64_t v8 = **(NSObject ***)buf;
  if ((void)v171) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v171);
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    float32x4_t v94 = pthread_self();
    mach_port_t v95 = pthread_mach_thread_np(v94);
    mach_port_t v96 = v95;
    if (v136) {
      int v97 = *((_DWORD *)v136 + 4);
    }
    else {
      int v97 = 0;
    }
    int v100 = *((_DWORD *)this + 4);
    if (v151)
    {
      DSP_Host_OffloadDictionary::get_debug_string((DSP_Host_OffloadDictionary *)&p_isa, (uint64_t)v151);
      if (v178[0] >= 0) {
        p_p_isa = (void **)&p_isa;
      }
      else {
        p_p_isa = p_isa;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 67110402;
      *(_DWORD *)&uint8_t buf[4] = v96;
      LOWORD(v171) = 2080;
      *(void *)((char *)&v171 + 2) = "HALS_MetaDevice.cpp";
      WORD5(v171) = 1024;
      HIDWORD(v171) = 938;
      __int16 v172 = 1024;
      int v173 = v97;
      __int16 v174 = 1024;
      *(_DWORD *)uint64_t v175 = v100;
      *(_WORD *)&v175[4] = 2080;
      *(void *)&v175[6] = p_p_isa;
      _os_log_debug_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp][offloads] (Client ID: %d) (Device ID: %d) Aggregate context description has %s for offloads.", buf, 0x2Eu);
      if (SHIBYTE(v178[0]) < 0) {
        operator delete(p_isa);
      }
    }
    else
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 67110402;
      *(_DWORD *)&uint8_t buf[4] = v95;
      LOWORD(v171) = 2080;
      *(void *)((char *)&v171 + 2) = "HALS_MetaDevice.cpp";
      WORD5(v171) = 1024;
      HIDWORD(v171) = 938;
      __int16 v172 = 1024;
      int v173 = v97;
      __int16 v174 = 1024;
      *(_DWORD *)uint64_t v175 = v100;
      *(_WORD *)&v175[4] = 2080;
      *(void *)&v175[6] = "NOTHING";
      _os_log_debug_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp][offloads] (Client ID: %d) (Device ID: %d) Aggregate context description has %s for offloads.", buf, 0x2Eu);
    }
  }
  int v9 = *((_DWORD *)this + 4);
  v167[0] = &unk_1F14689B0;
  v167[1] = this;
  v167[3] = v167;
  OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)v154);
  OS::CF::Number::Number<unsigned int>(buf, v9);
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, @"device id", (const void *)v171);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
  char v10 = (HALS_MetaSubDevice *)*((void *)this + 177);
  if (v10) {
    uint64_t v11 = (const void *)HALS_MetaSubDevice::CopyRealDeviceUID(v10);
  }
  else {
    uint64_t v11 = 0;
  }
  v153[0] = &unk_1F1489A20;
  v153[1] = v11;
  if (v11) {
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(theDict, @"master uid", v11);
  }
  char v12 = (HALS_MetaSubDevice *)*((void *)this + 178);
  if (v12) {
    int v13 = (const void *)HALS_MetaSubDevice::CopyRealDeviceUID(v12);
  }
  else {
    int v13 = 0;
  }
  float32x4_t v137 = (const __CFDictionary **)((char *)this + 1320);
  v152[0] = &unk_1F1489A20;
  v152[1] = v13;
  if (v13)
  {
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(theDict, @"clock device uid", v13);
  }
  else
  {
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)buf, *((CFDictionaryRef *)this + 167), @"clock");
    if ((void)v171) {
      OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(theDict, @"clock device uid", (const void *)v171);
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(buf, *((CFDictionaryRef *)this + 167), @"LDCM");
  int v14 = OS::CF::Boolean::AsBool((const __CFBoolean *)v171);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
  OS::CF::Boolean::Boolean(v15, v14);
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Boolean>(theDict, @"LDCM", (const void *)v171);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
  unint64_t v16 = HALS_MetaDeviceDescription::IsolatedUseCaseID(v137);
  if (HIDWORD(v16)) {
    BOOL v17 = v16 == 1836346212;
  }
  else {
    BOOL v17 = 0;
  }
  int v18 = v17;
  OS::CF::Boolean::Boolean((OS::CF::Boolean *)buf, v18);
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Boolean>(theDict, @"use corrected reference stream offset", (const void *)v171);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
  int StackedChannelPolicy = HALS_MetaDeviceDescription::GetStackedChannelPolicy(v137);
  if (HALS_MetaDeviceDescription::IsStackRequested(v137)) {
    goto LABEL_40;
  }
  unsigned int v39 = (char *)*((void *)this + 169);
  long long v40 = (char *)*((void *)this + 168);
  if (v39 - v40 == 24 && *((void *)v40 + 1) - *(void *)v40 > 8uLL) {
    goto LABEL_40;
  }
  if (v40 == v39) {
    goto LABEL_79;
  }
  uint64_t v41 = v40 + 24;
  do
  {
    unint64_t v42 = *((void *)v41 - 2) - *((void *)v41 - 3);
    BOOL v43 = v42 > 0xF || v41 == v39;
    v41 += 24;
  }
  while (!v43);
  if (v42 > 0xF)
  {
LABEL_40:
    OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)v156);
    uint64_t v19 = *((void *)this + 168);
    uint64_t v20 = *((void *)this + 169);
    uint64_t v140 = v20;
    while (v19 != v20)
    {
      if (*(void *)v19 != *(void *)(v19 + 8))
      {
        if (StackedChannelPolicy == 1
          && (FirstDeviceWithDirectiouint64_t n = HALS_MetaDeviceDescription::FindFirstDeviceWithDirection((HALS_MetaSubDevice ***)v19)) != 0)
        {
          Totalint NumberChannels = HALS_MetaSubDevice::GetTotalNumberChannels(FirstDeviceWithDirection, 0);
        }
        else
        {
          Totalint NumberChannels = 2;
        }
        OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)buf);
        OS::CF::Number::Number<unsigned int>(&p_isa, TotalNumberChannels);
        OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>((__CFDictionary *)v171, @"channels", v177);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&p_isa);
        OS::CF::MutableArray::MutableArray(v23);
        uint64_t v24 = v19;
        int v25 = *(HALS_MetaSubDevice ***)v19;
        uint64_t v141 = v24;
        char v26 = *(HALS_MetaSubDevice ***)(v24 + 8);
        float32x4_t v142 = v26;
        while (v25 != v26)
        {
          char v27 = (__CFArray *)HALS_MetaSubDevice::CopyRealDeviceUID(*v25);
          float32x4_t v168 = &unk_1F1489A20;
          float32x4_t v169 = v27;
          IsSynchPaddingOuint64_t n = HALS_MetaSubDevice::IsSynchPaddingOn(*v25);
          IsDriftCorrectionOuint64_t n = HALS_MetaSubDevice::IsDriftCorrectionOn(*v25);
          int ExtraLatency = HALS_MetaSubDevice::GetExtraLatency(*v25, 0);
          OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)&value);
          unsigned int NumberStreams = HALS_MetaSubDevice::GetNumberStreams(*v25, 0);
          if (TotalNumberChannels)
          {
            unsigned int v30 = NumberStreams;
            if (NumberStreams)
            {
              unsigned int v31 = 0;
              unsigned int v32 = 0;
              do
              {
                char v34 = (HALS_Stream *)HALS_MetaSubDevice::CopyStreamByIndex(*v25, 0, v31);
                if (v34)
                {
                  OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&v165);
                  OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>((__CFDictionary *)v166, @"uid", v169);
                  OS::CF::Number::Number<unsigned int>(&v163, v31);
                  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>((__CFDictionary *)v166, @"index", v164);
                  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v163);
                  OS::CF::Boolean::Boolean((OS::CF::Boolean *)&v163, IsSynchPaddingOn);
                  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Boolean>((__CFDictionary *)v166, @"synch padding", v164);
                  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v163);
                  OS::CF::Boolean::Boolean((OS::CF::Boolean *)&v163, IsDriftCorrectionOn);
                  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Boolean>((__CFDictionary *)v166, @"drift", v164);
                  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v163);
                  OS::CF::Number::Number<unsigned int>(&v163, ExtraLatency);
                  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>((__CFDictionary *)v166, @"extra latency", v164);
                  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v163);
                  OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)&v163);
                  int NumberChannels = HALS_Stream::GetNumberChannels(v34);
                  unsigned int v36 = v32;
                  for (int i = NumberChannels; i; --i)
                  {
                    if (v36 >= TotalNumberChannels) {
                      OS::CF::Number::Number<int>(&v161, -1);
                    }
                    else {
                      OS::CF::Number::Number<unsigned int>(&v161, v36);
                    }
                    OS::CF::MutableArray::AppendValue<OS::CF::Number>((__CFArray *)v164, v162);
                    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v161);
                    ++v36;
                  }
                  v32 += NumberChannels;
                  OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>((__CFDictionary *)v166, @"channel map", v164);
                  OS::CF::MutableArray::AppendValue<OS::CF::MutableDictionary>(v159, v166);
                  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v163);
                  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v165);
                }
                HALS_ObjectMap::ReleaseObject(v34, v33);
                if (v32 >= TotalNumberChannels) {
                  break;
                }
                ++v31;
              }
              while (v31 < v30);
            }
          }
          OS::CF::MutableArray::AppendValue<OS::CF::MutableArray>((__CFArray *)v177, v159);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&value);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v168);
          ++v25;
          char v26 = v142;
        }
        if (OS::CF::ArrayBase<__CFArray *>::GetSize((const __CFArray *)v177)) {
          OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>((__CFDictionary *)v171, @"stream groups", v177);
        }
        OS::CF::MutableArray::AppendValue<OS::CF::MutableDictionary>(v157, (const void *)v171);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&p_isa);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
        uint64_t v19 = v141;
      }
      v19 += 24;
      uint64_t v20 = v140;
    }
    if (OS::CF::ArrayBase<__CFArray *>::GetSize(v157)) {
      OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>(theDict, @"grid-out", v157);
    }
    char v38 = (OS::CF::UntypedObject *)v156;
  }
  else
  {
LABEL_79:
    OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)&v161);
    uint64_t v44 = *((void *)this + 168);
    uint64_t v45 = *((void *)this + 169);
    *(void *)float32x4_t v147 = v45;
    while (v44 != v45)
    {
      uint64_t v46 = *(HALS_MetaSubDevice ***)v44;
      if (*(void *)v44 != *(void *)(v44 + 8))
      {
        uint64_t v47 = *v46;
        if (*v46)
        {
          uint64_t v48 = HALS_MetaSubDevice::CopyRealDeviceUID(*v46);
          *(void *)AudioObjectPropertyAddress buf = &unk_1F1489A20;
          *(void *)&long long v171 = v48;
          int v49 = HALS_MetaSubDevice::IsSynchPaddingOn(v47);
          int v50 = HALS_MetaSubDevice::IsDriftCorrectionOn(v47);
          DriftCorrectionAlgorithunsigned int m = HALS_MetaSubDevice::GetDriftCorrectionAlgorithm(v47);
          int DriftCorrectionQuality = HALS_MetaSubDevice::GetDriftCorrectionQuality(v47);
          int v53 = HALS_MetaSubDevice::GetExtraLatency(v47, 0);
          int v54 = HALS_MetaSubDevice::GetNumberStreams(v47, 0);
          if (v54)
          {
            for (int j = 0; j != v54; ++j)
            {
              uint64_t v57 = (HALS_Stream *)HALS_MetaSubDevice::CopyStreamByIndex(v47, 0, j);
              if (v57)
              {
                OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&p_isa);
                int v58 = HALS_Stream::GetNumberChannels(v57);
                OS::CF::Number::Number<unsigned int>(&v168, v58);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>((__CFDictionary *)v177, @"channels", v169);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v168);
                OS::CF::MutableArray::MutableArray(v59);
                OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)&value);
                OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&v165);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>((__CFDictionary *)v166, @"uid", (const void *)v171);
                OS::CF::Number::Number<unsigned int>(&v163, j);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>((__CFDictionary *)v166, @"index", v164);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v163);
                OS::CF::Boolean::Boolean((OS::CF::Boolean *)&v163, v49);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::Boolean>((__CFDictionary *)v166, @"synch padding", v164);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v163);
                OS::CF::Boolean::Boolean((OS::CF::Boolean *)&v163, v50);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::Boolean>((__CFDictionary *)v166, @"drift", v164);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v163);
                OS::CF::Number::Number<unsigned int>(&v163, DriftCorrectionAlgorithm);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>((__CFDictionary *)v166, @"drift algorithm", v164);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v163);
                OS::CF::Number::Number<unsigned int>(&v163, DriftCorrectionQuality);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>((__CFDictionary *)v166, @"drift quality", v164);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v163);
                OS::CF::Number::Number<unsigned int>(&v163, v53);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>((__CFDictionary *)v166, @"extra latency", v164);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v163);
                OS::CF::MutableArray::AppendValue<OS::CF::MutableDictionary>(v159, v166);
                OS::CF::MutableArray::AppendValue<OS::CF::MutableArray>(v169, v159);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>((__CFDictionary *)v177, @"stream groups", v169);
                OS::CF::MutableArray::AppendValue<OS::CF::MutableDictionary>(v162, v177);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v165);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&value);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v168);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&p_isa);
              }
              HALS_ObjectMap::ReleaseObject(v57, v56);
            }
          }
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
        }
      }
      v44 += 24;
      uint64_t v45 = *(void *)v147;
    }
    if (OS::CF::ArrayBase<__CFArray *>::GetSize(v162)) {
      OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>(theDict, @"grid-out", v162);
    }
    char v38 = (OS::CF::UntypedObject *)&v161;
  }
  OS::CF::UntypedObject::~UntypedObject(v38);
  std::__function::__value_func<BOOL ()(HALS_Stream *,HALS_Client *)>::__value_func[abi:ne180100]((uint64_t)&v168, (uint64_t)v167);
  OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)&v163);
  if (StackedChannelPolicy || (HALS_MetaDeviceDescription::IsStackRequested(v137) & 1) == 0)
  {
    char v60 = v149;
    if (v149 != (NSObject **)&v150)
    {
      while (1)
      {
        int v61 = *((_DWORD *)v60 + 7);
        if ((v61 - 2) < 2) {
          break;
        }
        if (v61 == 6)
        {
          OS::CF::Number::Number<unsigned int>(buf, 1);
          uint64_t v62 = theDict;
          uint64_t v63 = (const void *)v171;
          int v64 = @"voice activity detection enable";
          goto LABEL_100;
        }
LABEL_101:
        uint64_t v65 = v60[1];
        if (v65)
        {
          do
          {
            std::vector<char> v66 = (NSObject **)v65;
            uint64_t v65 = v65->isa;
          }
          while (v65);
        }
        else
        {
          do
          {
            std::vector<char> v66 = (NSObject **)v60[2];
            BOOL v17 = *v66 == v60;
            char v60 = v66;
          }
          while (!v17);
        }
        char v60 = v66;
        if (v66 == (NSObject **)&v150) {
          goto LABEL_107;
        }
      }
      OS::CF::Number::Number<unsigned int>(buf, v61);
      uint64_t v62 = theDict;
      uint64_t v63 = (const void *)v171;
      int v64 = @"vocal isolation type";
LABEL_100:
      OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(v62, v64, v63);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
      goto LABEL_101;
    }
LABEL_107:
    unsigned int v67 = v151;
    if (v151)
    {
      CFDictionaryRef v68 = (const __CFDictionary *)*((void *)v151 + 2);
      if (v68)
      {
        if (CFDictionaryGetCount(v68))
        {
          if (!DSP_Host_OffloadDictionary::has_all_id(v67))
          {
            uint64_t v69 = v151;
            CFDictionaryRef v70 = (const __CFDictionary *)*((void *)v151 + 2);
            if (v70)
            {
              if (CFDictionaryGetCount(v70))
              {
                CFDictionaryRef v71 = PropertyListDeepImmutableCopy(*((const __CFString **)v69 + 2));
                *(void *)AudioObjectPropertyAddress buf = &unk_1F14898A0;
                *(void *)&long long v171 = v71;
                CFStringRef v72 = CFStringCreateWithBytes(0, (const UInt8 *)"device dsp offloads input", 25, 0x8000100u, 0);
                if (!v72)
                {
                  float32x4_t v135 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v135, "Could not construct");
                  __cxa_throw(v135, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::Dictionary>(theDict, v72, (const void *)v171);
                CFRelease(v72);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
              }
            }
          }
        }
      }
    }
    p_isa = (void **)v136;
    uint64_t v177 = &v163;
    std::__function::__value_func<BOOL ()(HALS_Stream *,HALS_Client *)>::__value_func[abi:ne180100]((uint64_t)v178, (uint64_t)&v168);
    uint64_t v73 = *((void *)this + 168);
    uint64_t v74 = *((void *)this + 169);
    uint64_t v143 = v74;
    while (v73 != v74)
    {
      uint64_t v76 = *(HALS_MetaSubDevice ***)v73;
      long long v75 = *(HALS_MetaSubDevice ***)(v73 + 8);
      *(void *)uint64_t v145 = v73;
      *(void *)unsigned int v148 = v75;
      while (v76 != v75)
      {
        uint64_t v77 = *v76;
        uint64_t v78 = HALS_MetaSubDevice::CopyRealDeviceUID(*v76);
        *(void *)AudioObjectPropertyAddress buf = &unk_1F1489A20;
        *(void *)&long long v171 = v78;
        int v79 = HALS_MetaSubDevice::IsSynchPaddingOn(v77);
        int v80 = HALS_MetaSubDevice::IsDriftCorrectionOn(v77);
        int v81 = HALS_MetaSubDevice::GetDriftCorrectionAlgorithm(v77);
        int v82 = HALS_MetaSubDevice::GetDriftCorrectionQuality(v77);
        int v83 = HALS_MetaSubDevice::GetExtraLatency(v77, 1);
        int v84 = HALS_MetaSubDevice::GetNumberStreams(v77, 1);
        if (v84)
        {
          for (int k = 0; k != v84; ++k)
          {
            unsigned int v86 = (HALS_ObjectMap *)HALS_MetaSubDevice::CopyStreamByIndex(v77, 1, k);
            int v88 = v86;
            if (v86)
            {
              value = v86;
              float32x4_t v165 = p_isa;
              if (!v179) {
                std::__throw_bad_function_call[abi:ne180100]();
              }
              if ((*(unsigned int (**)(uint64_t, void **, void ***))(*(void *)v179 + 48))(v179, &value, &v165))
              {
                OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&value);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(v159, @"uid", (const void *)v171);
                OS::CF::Number::Number<unsigned int>(&v165, k);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(v159, @"index", v166);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v165);
                OS::CF::Boolean::Boolean((OS::CF::Boolean *)&v165, v79);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::Boolean>(v159, @"synch padding", v166);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v165);
                OS::CF::Boolean::Boolean((OS::CF::Boolean *)&v165, v80);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::Boolean>(v159, @"drift", v166);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v165);
                OS::CF::Number::Number<unsigned int>(&v165, v81);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(v159, @"drift algorithm", v166);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v165);
                OS::CF::Number::Number<unsigned int>(&v165, v82);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(v159, @"drift quality", v166);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v165);
                OS::CF::Number::Number<unsigned int>(&v165, v83);
                OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(v159, @"extra latency", v166);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v165);
                OS::CF::MutableArray::AppendValue<OS::CF::MutableDictionary>(v177[1], v159);
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&value);
              }
            }
            HALS_ObjectMap::ReleaseObject(v88, v87);
          }
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
        ++v76;
        long long v75 = *(HALS_MetaSubDevice ***)v148;
      }
      uint64_t v74 = v143;
      uint64_t v73 = *(void *)v145 + 24;
    }
    std::__function::__value_func<BOOL ()(HALS_Stream *,HALS_Client *)>::~__value_func[abi:ne180100](v178);
  }
  if (OS::CF::ArrayBase<__CFArray *>::GetSize((const __CFArray *)v164)) {
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>(theDict, @"grid-in", v164);
  }
  unint64_t v89 = HALS_MetaDeviceDescription::IsolatedUseCaseID(v137);
  AudioObjectPropertyAddress v90 = theDict;
  if (!theDict
    || (AudioObjectPropertyAddress v90 = (AMCP::Log::Scope_Registry *)CFDictionaryContainsKey(theDict, @"device id"), !v90))
  {
    int v93 = 0;
    goto LABEL_157;
  }
  *(void *)AudioObjectPropertyAddress buf = &unk_1F14899D0;
  *(void *)&long long v171 = 0;
  CFNumberRef v91 = theDict;
  if (theDict)
  {
    value = 0;
    if (!CFDictionaryGetValueIfPresent(theDict, @"device id", (const void **)&value)) {
      goto LABEL_155;
    }
    CFTypeID v92 = value ? CFGetTypeID(value) : 0;
    if (v92 != CFNumberGetTypeID()) {
      goto LABEL_155;
    }
    int v98 = value;
    if (value)
    {
      CFRetain(value);
      uint64_t v99 = (const void *)v171;
      *(void *)&long long v171 = v98;
      if (v99) {
        goto LABEL_154;
      }
    }
    else
    {
      uint64_t v99 = (const void *)v171;
      *(void *)&long long v171 = 0;
      if (v99) {
LABEL_154:
      }
        CFRelease(v99);
    }
LABEL_155:
    CFNumberRef v91 = (const __CFNumber *)v171;
  }
  int v93 = OS::CF::Number::GetValue<unsigned int>(v91, 0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
LABEL_157:
  if (HIDWORD(v89))
  {
    AMCP::Log::Scope_Registry::get(v90);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v105 = **(NSObject ***)buf;
    if ((void)v171) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v171);
    }
    BOOL v106 = os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT);
    if (v106)
    {
      char v107 = pthread_self();
      mach_port_t v108 = pthread_mach_thread_np(v107);
      v109.i32[0] = bswap32(v89);
      int8x8_t v110 = vzip1_s8(v109, v109);
      v111.i64[0] = 0x1F0000001FLL;
      v111.i64[1] = 0x1F0000001FLL;
      v112.i64[0] = 0x5F0000005FLL;
      v112.i64[1] = 0x5F0000005FLL;
      char v160 = 4;
      *(int8x8_t *)v113.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v112, (uint32x4_t)vsraq_n_s32(v111, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v110), 0x18uLL), 0x18uLL))), v110, (int8x8_t)0x2E002E002E002ELL);
      LODWORD(value) = vmovn_s16(v113).u32[0];
      BYTE4(value) = 0;
      *(_DWORD *)AudioObjectPropertyAddress buf = 67110403;
      *(_DWORD *)&uint8_t buf[4] = v108;
      LOWORD(v171) = 2080;
      *(void *)((char *)&v171 + 2) = "HALS_MetaDevice.cpp";
      WORD5(v171) = 1024;
      HIDWORD(v171) = 1140;
      __int16 v172 = 1024;
      int v173 = v93;
      __int16 v174 = 2081;
      *(void *)uint64_t v175 = "has isolated audio use case";
      *(_WORD *)&v175[8] = 2081;
      *(void *)&v175[10] = &value;
      _os_log_impl(&dword_1BAA78000, v105, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d [hal_dsp][iso] (Device ID: %d) %{private}s %{private}s.", buf, 0x32u);
      if (v160 < 0) {
        operator delete(value);
      }
    }
    uint64_t v114 = v150;
    if ((void)v150)
    {
      uint64_t v115 = &v150;
      do
      {
        uint64_t v116 = (uint64_t *)v114;
        float32x4_t v117 = v115;
        unsigned int v118 = *(_DWORD *)(v114 + 28);
        float32x4_t v119 = (uint64_t *)(v114 + 8);
        if (v118 >= 6)
        {
          float32x4_t v119 = v116;
          uint64_t v115 = (long long *)v116;
        }
        uint64_t v114 = *v119;
      }
      while (v114);
      if (v115 != &v150)
      {
        if (v118 < 6) {
          uint64_t v116 = (uint64_t *)v117;
        }
        if (*((_DWORD *)v116 + 7) <= 6u)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v106);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          float32x4_t v120 = **(NSObject ***)buf;
          if ((void)v171) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v171);
          }
          if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
          {
            char v121 = pthread_self();
            mach_port_t v122 = pthread_mach_thread_np(v121);
            *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v122;
            LOWORD(v171) = 2080;
            *(void *)((char *)&v171 + 2) = "HALS_MetaDevice.cpp";
            WORD5(v171) = 1024;
            HIDWORD(v171) = 1142;
            __int16 v172 = 1024;
            int v173 = v93;
            _os_log_impl(&dword_1BAA78000, v120, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d [hal_dsp][iso][mtd] (Device ID: %d) has DSP type property for mtd.", buf, 0x1Eu);
          }
        }
      }
    }
  }
  else if (!*((void *)&v150 + 1))
  {
    AMCP::Log::Scope_Registry::get(v90);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    float32x4_t v102 = **(NSObject ***)buf;
    if ((void)v171) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v171);
    }
    if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v103 = pthread_self();
      mach_port_t v104 = pthread_mach_thread_np(v103);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67110147;
      *(_DWORD *)&uint8_t buf[4] = v104;
      LOWORD(v171) = 2080;
      *(void *)((char *)&v171 + 2) = "HALS_MetaDevice.cpp";
      WORD5(v171) = 1024;
      HIDWORD(v171) = 1147;
      __int16 v172 = 1024;
      int v173 = v93;
      __int16 v174 = 2081;
      *(void *)uint64_t v175 = "Has no isolated audio use case nor any DSP Types";
      _os_log_debug_impl(&dword_1BAA78000, v102, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp][iso] (Device ID: %d) %{private}s.", buf, 0x28u);
    }
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v163);
  std::__function::__value_func<BOOL ()(HALS_Stream *,HALS_Client *)>::~__value_func[abi:ne180100](&v168);
  unsigned int v123 = HALS_MetaDeviceDescription::IsPrivate(v137);
  BOOL v124 = (__CFDictionary *)HALS_MetaDeviceDescription::CopyTapList(*((CFDictionaryRef *)this + 167));
  p_isa = (void **)&unk_1F1489968;
  uint64_t v177 = (HALS_System **)v124;
  if (v124)
  {
    OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)&value);
    for (unsigned int m = 0; (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize((const __CFArray *)v177) > m; ++m)
    {
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)buf, (uint64_t)&p_isa, m);
      if ((void)v171)
      {
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v165, (CFDictionaryRef)v171, @"uid");
        uint64_t v161 = 0;
        float32x4_t v162 = 0;
        HALS_System::GetInstance(&v163, 0, &v161);
        float32x4_t v127 = (HALS_ObjectMap *)HALS_System::CopyTapByUUID(v163, v166);
        if (v164) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v164);
        }
        if (v127)
        {
          unsigned int v128 = *((unsigned char *)v127 + 83) ? v123 : 1;
          if (v128 == 1) {
            OS::CF::MutableArray::AppendValue<OS::CF::Dictionary>(v159, (const void *)v171);
          }
        }
        HALS_ObjectMap::ReleaseObject(v127, v126);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v165);
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
    }
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>(theDict, @"taps", v159);
    if (HALS_MetaDeviceDescription::IsPrivate(v137))
    {
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(buf, *((CFDictionaryRef *)this + 167), @"tapautostart");
      if (OS::CF::Boolean::AsBool((const __CFBoolean *)v171)) {
        int v129 = HALS_MetaDeviceDescription::IsPrivate(v137);
      }
      else {
        int v129 = 0;
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
      OS::CF::Boolean::Boolean(v130, v129);
      OS::CF::MutableDictionary::SetValueForKey<OS::CF::Boolean>(theDict, @"tapautostart", (const void *)v171);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&value);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&p_isa);
  CFDictionaryRef v131 = theDict;
  if (theDict) {
    CFRetain(theDict);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v152);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v153);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v154);
  std::__function::__value_func<BOOL ()(HALS_Stream *,HALS_Client *)>::~__value_func[abi:ne180100](v167);
  long long v132 = v151;
  float32x4_t v151 = 0;
  if (v132) {
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100]((uint64_t)v132);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v150);
  return v131;
}

void sub_1BAC842F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<BOOL ()(HALS_Stream *,HALS_Client *)>::~__value_func[abi:ne180100](void *a1)
{
  unsigned __int8 v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void HostedDSPContextBuildArguments::~HostedDSPContextBuildArguments(HostedDSPContextBuildArguments *this)
{
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v2);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 1));
}

OS::CF::MutableDictionary *OS::CF::MutableDictionary::MutableDictionary(OS::CF::MutableDictionary *this)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  *(void *)this = &unk_1F1486FB0;
  *((void *)this + 1) = Mutable;
  return this;
}

void *OS::CF::Number::Number<unsigned int>(void *a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  *a1 = &unk_1F14899D0;
  a1[1] = v3;
  return a1;
}

void OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
  {
    if (a3) {
      CFDictionarySetValue(a1, a2, a3);
    }
  }
}

void OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
  {
    if (a3) {
      CFDictionarySetValue(a1, a2, a3);
    }
  }
}

{
  if (a1) {
    CFDictionarySetValue(a1, a2, a3);
  }
}

void OS::CF::MutableDictionary::SetValueForKey<OS::CF::Boolean>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
  {
    if (a3) {
      CFDictionarySetValue(a1, a2, a3);
    }
  }
}

uint64_t std::__function::__value_func<BOOL ()(HALS_Stream *,HALS_Client *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1)
  {
    if (a3) {
      CFDictionarySetValue(a1, a2, a3);
    }
  }
}

void OS::CF::MutableArray::AppendValue<OS::CF::Dictionary>(__CFArray *a1, const void *a2)
{
  if (a1)
  {
    if (a2) {
      CFArrayAppendValue(a1, a2);
    }
  }
}

void OS::CF::MutableArray::AppendValue<OS::CF::MutableDictionary>(__CFArray *a1, const void *a2)
{
  if (a1)
  {
    if (a2) {
      CFArrayAppendValue(a1, a2);
    }
  }
}

const __CFArray *OS::CF::ArrayBase<__CFArray *>::GetSize(const __CFArray *result)
{
  if (result) {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

void OS::CF::MutableArray::AppendValue<OS::CF::MutableArray>(__CFArray *a1, const void *a2)
{
  if (a1)
  {
    if (a2) {
      CFArrayAppendValue(a1, a2);
    }
  }
}

void OS::CF::MutableArray::AppendValue<OS::CF::Number>(__CFArray *a1, const void *a2)
{
  if (a1)
  {
    if (a2) {
      CFArrayAppendValue(a1, a2);
    }
  }
}

void *OS::CF::Number::Number<int>(void *a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  *a1 = &unk_1F14899D0;
  a1[1] = v3;
  return a1;
}

void OS::CF::MutableDictionary::~MutableDictionary(OS::CF::MutableDictionary *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0,std::allocator<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0>,BOOL ()(HALS_Stream *,HALS_Client *)>::target_type()
{
}

uint64_t std::__function::__func<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0,std::allocator<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0>,BOOL ()(HALS_Stream *,HALS_Client *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK15HALS_MetaDevice33_CreateLegacyIOContextDescriptionEP11HALS_ClientE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0,std::allocator<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0>,BOOL ()(HALS_Stream *,HALS_Client *)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 8) + 608))(*(void *)(a1 + 8), *a2, *a3);
}

uint64_t std::__function::__func<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0,std::allocator<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0>,BOOL ()(HALS_Stream *,HALS_Client *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14689B0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0,std::allocator<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0>,BOOL ()(HALS_Stream *,HALS_Client *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14689B0;
  result[1] = v3;
  return result;
}

void std::__function::__func<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0,std::allocator<HALS_MetaDevice::_CreateLegacyIOContextDescription(HALS_Client *)::$_0>,BOOL ()(HALS_Stream *,HALS_Client *)>::~__func()
{
}

BOOL HALS_MetaDevice::_ClientCanUseStream(HALS_MetaDevice *this, HALS_Stream *a2, HALS_Client *a3)
{
  if (a2)
  {
    if ((*(unsigned int (**)(HALS_Stream *))(*(void *)a2 + 208))(a2))
    {
      if (!*((unsigned char *)a2 + 52) || !HALS_Stream::IsReferenceStream(a2)) {
        return 1;
      }
      uint64_t v6 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_Stream *))(*(void *)a2 + 280))(a2);
      uint64_t v7 = HALS_ObjectMap::CopyObjectByObjectID(v6);
      int v9 = (HALS_ObjectMap *)v7;
      BOOL ReferenceStreamStateForClient = 1;
      if (v7 && a3 && !*((unsigned char *)this + 520)) {
        BOOL ReferenceStreamStateForClient = HALS_ReferenceStreamStateManager::GetReferenceStreamStateForClient(*(std::__shared_mutex_base **)(v7 + 440), *((_DWORD *)a3 + 4));
      }
LABEL_15:
      HALS_ObjectMap::ReleaseObject(v9, v8);
      return ReferenceStreamStateForClient;
    }
    if (*((unsigned char *)a2 + 52) && HALS_Stream::IsReferenceStream(a2))
    {
      uint64_t v11 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)a2 + 7));
      int v9 = (HALS_ObjectMap *)v11;
      BOOL ReferenceStreamStateForClient = 1;
      if (a3 && !*((unsigned char *)this + 520)) {
        BOOL ReferenceStreamStateForClient = HALS_ReferenceStreamStateManager::GetReferenceStreamStateForClient(*(std::__shared_mutex_base **)(v11 + 440), *((_DWORD *)a3 + 4));
      }
      goto LABEL_15;
    }
  }

  return HALS_Device::_ClientCanUseStream((uint64_t)this, a2, (uint64_t)a3);
}

void sub_1BAC84BD8(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaDevice::_GetNumberStreamsForClient(HALS_MetaDevice *this, uint64_t a2, HALS_Client *a3)
{
  uint64_t v6 = HALS_Device::ClientDSPInfo::find((uint64_t)this + 616, (uint64_t)a3);
  if (!v6) {
    goto LABEL_13;
  }
  uint64_t v7 = v6 + 5;
  uint64_t v8 = 5;
  if (a2)
  {
    uint64_t v8 = 0;
    uint64_t v7 = v6;
  }
  int v9 = (void *)v6[v8];
  char v10 = v7 + 1;
  if (v9 == v10)
  {
LABEL_13:
    int v15 = (*(uint64_t (**)(HALS_MetaDevice *, uint64_t))(*(void *)this + 384))(this, a2);
    if (v15)
    {
      int v16 = v15;
      LODWORD(v17) = 0;
      uint64_t v18 = 0;
      do
      {
        uint64_t v19 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_MetaDevice *, uint64_t, uint64_t))(*(void *)this + 392))(this, a2, v18);
        int v20 = (*(uint64_t (**)(HALS_MetaDevice *, HALS_ObjectMap *, HALS_Client *))(*(void *)this + 608))(this, v19, a3);
        HALS_ObjectMap::ReleaseObject(v19, v21);
        uint64_t v17 = (v17 + v20);
        uint64_t v18 = (v18 + 1);
      }
      while (v16 != v18);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      unsigned int v11 = *((_DWORD *)v9 + 7) - 2;
      if (v11 < 7 && ((0x4Fu >> v11) & 1) != 0) {
        return 1;
      }
      char v12 = (void *)v9[1];
      if (v12)
      {
        do
        {
          int v13 = v12;
          char v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          int v13 = (void *)v9[2];
          BOOL v14 = *v13 == (void)v9;
          int v9 = v13;
        }
        while (!v14);
      }
      int v9 = v13;
      if (v13 == v10) {
        goto LABEL_13;
      }
    }
  }
  return v17;
}

void sub_1BAC84DC8(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void HALS_MetaDevice::_CopyStreamList(uint64_t a1, unsigned int a2, void **a3)
{
  a3[1] = *a3;
  uint64_t v4 = a1 + 24 * a2;
  std::vector<void const*>::reserve(a3, (uint64_t)(*(void *)(v4 + 1448) - *(void *)(v4 + 1440)) >> 3);
  uint64_t v6 = *(HALS_ObjectMap ***)(v4 + 1440);
  for (int i = *(HALS_ObjectMap ***)(v4 + 1448); v6 != i; ++v6)
  {
    HALS_ObjectMap::RetainObject(*v6, v5);
    uint64_t v8 = *v6;
    char v10 = (HALS_ObjectMap **)a3[1];
    unint64_t v9 = (unint64_t)a3[2];
    if ((unint64_t)v10 >= v9)
    {
      uint64_t v12 = ((char *)v10 - (unsigned char *)*a3) >> 3;
      if ((unint64_t)(v12 + 1) >> 61) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v9 - (void)*a3;
      uint64_t v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
        uint64_t v14 = v12 + 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15) {
        unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v15);
      }
      else {
        char v5 = 0;
      }
      int v16 = (HALS_ObjectMap **)(v15 + 8 * v12);
      *int v16 = v8;
      unsigned int v11 = (char *)(v16 + 1);
      uint64_t v18 = (char *)*a3;
      uint64_t v17 = (char *)a3[1];
      if (v17 != *a3)
      {
        do
        {
          uint64_t v19 = (HALS_ObjectMap *)*((void *)v17 - 1);
          v17 -= 8;
          *--int v16 = v19;
        }
        while (v17 != v18);
        uint64_t v17 = (char *)*a3;
      }
      *a3 = v16;
      a3[1] = v11;
      a3[2] = (void *)(v15 + 8 * (void)v5);
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *char v10 = v8;
      unsigned int v11 = (char *)(v10 + 1);
    }
    a3[1] = v11;
  }
}

uint64_t HALS_MetaDevice::_GetTotalNumberChannels(HALS_MetaDevice *this, unsigned int a2)
{
  uint64_t v2 = (char *)this + 24 * a2;
  uint64_t v3 = (HALS_Stream **)*((void *)v2 + 180);
  if (v3 == *((HALS_Stream ***)v2 + 181)) {
    return 0;
  }
  LODWORD(v4) = 0;
  char v5 = (HALS_Stream ***)(v2 + 1448);
  do
  {
    uint64_t v6 = *v3++;
    uint64_t v4 = HALS_Stream::GetNumberChannels(v6) + v4;
  }
  while (v3 != *v5);
  return v4;
}

uint64_t HALS_MetaDevice::_CopyDefaultElementName(HALS_MetaDevice *this, int a2, unsigned int a3)
{
  if (a2 != 1869968496 && a2 != 1768845428) {
    return 0;
  }
  v18[7] = v3;
  void v18[8] = v4;
  unsigned int v6 = a3;
  if (a3)
  {
    uint64_t v8 = *((void *)this + 168);
    for (uint64_t i = *((void *)this + 169); v8 != i; v8 += 24)
    {
      char v10 = *(HALS_MetaSubDevice ***)v8;
      if (*(void *)(v8 + 8) != *(void *)v8)
      {
        unsigned int v11 = *v10;
        Totalint NumberChannels = HALS_MetaSubDevice::GetTotalNumberChannels(*v10, a2 == 1768845428);
        if (v6 <= TotalNumberChannels)
        {
          if (v11) {
            goto LABEL_16;
          }
        }
        else
        {
          v6 -= TotalNumberChannels;
        }
      }
    }
    return 0;
  }
  unsigned int v11 = (HALS_MetaSubDevice *)*((void *)this + 177);
  if (!v11) {
    return 0;
  }
  unsigned int v6 = 0;
LABEL_16:
  v16[0] = 1818454126;
  v16[1] = a2;
  v16[2] = v6;
  int v14 = (*(uint64_t (**)(HALS_MetaSubDevice *, void, _DWORD *, void))(*(void *)v11 + 88))(v11, *((unsigned int *)v11 + 4), v16, 0);
  uint64_t result = 0;
  if (v14)
  {
    uint64_t v15 = *((unsigned int *)v11 + 4);
    v18[0] = 0;
    int v17 = 0;
    (*(void (**)(HALS_MetaSubDevice *, uint64_t, _DWORD *, uint64_t, int *, void *, void, void, void))(*(void *)v11 + 112))(v11, v15, v16, 8, &v17, v18, 0, 0, 0);
    return v18[0];
  }
  return result;
}

BOOL HALS_MetaDevice::CanBeSeenByProcess(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(a1 + 1432));
  BOOL result = 1;
  if (a2 && (v3 & 1) != 0)
  {
    int v5 = *(_DWORD *)(a2 + 232);
    if (v5 != -1) {
      return v5 == *(_DWORD *)(a1 + 1312);
    }
  }
  return result;
}

uint64_t HALS_MetaDevice::IsolatedUseCaseID(HALS_MetaDevice *this)
{
  uint64_t v5 = 0;
  unsigned int v6 = &v5;
  uint64_t v7 = 0x3002000000;
  uint64_t v8 = __Block_byref_object_copy__142;
  unint64_t v9 = __Block_byref_object_dispose__143;
  char v10 = 0;
  char v11 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK15HALS_MetaDevice17IsolatedUseCaseIDEv_block_invoke;
  v4[3] = &unk_1E6232318;
  v4[4] = &v5;
  unsigned char v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = v6[5];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BAC85220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__142(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(result + 44) = *(unsigned char *)(a2 + 44);
  *(_DWORD *)(result + 40) = v2;
  return result;
}

uint64_t ___ZNK15HALS_MetaDevice17IsolatedUseCaseIDEv_block_invoke(uint64_t a1)
{
  uint64_t result = HALS_MetaDeviceDescription::IsolatedUseCaseID((const __CFDictionary **)(*(void *)(a1 + 40) + 1320));
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  *(unsigned char *)(v3 + 44) = BYTE4(result);
  *(_DWORD *)(v3 + 40) = result;
  return result;
}

uint64_t HALS_MetaDevice::_CopyIOEngine(HALS_MetaDevice *this)
{
  return 0;
}

HALS_ObjectMap *HALS_MetaDevice::_CopyStreamByIndex(HALS_MetaDevice *this, HALS_Object *a2, unsigned int a3)
{
  uint64_t v3 = (char *)this + 24 * a2;
  uint64_t v4 = *((void *)v3 + 181);
  uint64_t v5 = *((void *)v3 + 180);
  if (a3 >= (unint64_t)((v4 - v5) >> 3)) {
    unsigned int v6 = 0;
  }
  else {
    unsigned int v6 = *(HALS_ObjectMap **)(v5 + 8 * a3);
  }
  HALS_ObjectMap::RetainObject(v6, a2);
  return v6;
}

uint64_t HALS_MetaDevice::_GetNumberStreams(HALS_MetaDevice *this, unsigned int a2)
{
  return (*((void *)this + 3 * a2 + 181) - *((void *)this + 3 * a2 + 180)) >> 3;
}

void HALS_MetaDevice::create_mcp_engine(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t HALS_MetaDevice::DoAnyQueuesHaveWorkAfterFlush(HALS_MetaDevice *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 697);
  if (v1) {
    return 1;
  }
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)this + 1017);
  if (v2) {
    return 1;
  }
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)this + 1537);
  return v3 & 1;
}

void HALS_MetaDevice::FlushAllQueues(HALS_MetaDevice *this)
{
  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_MetaDevice *)((char *)this + 664));
  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_MetaDevice *)((char *)this + 984));

  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_MetaDevice *)((char *)this + 1504));
}

uint64_t HALS_MetaDevice::CanBeAggregated(HALS_MetaDevice *this)
{
  return 0;
}

void HALS_MetaDevice::HandleGroupObjectPropertiesChanged(HALS_Device *a1, int a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9, uint64_t a10, dispatch_object_t *a11)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v42 = 0;
  BOOL v43 = &v42;
  uint64_t v44 = 0x4802000000;
  uint64_t v45 = __Block_byref_object_copy__5289;
  uint64_t v46 = __Block_byref_object_dispose__5290;
  long long v47 = 0u;
  long long v48 = 0u;
  uint64_t v36 = 0;
  uint64_t v37 = &v36;
  uint64_t v38 = 0x4002000000;
  unsigned int v39 = __Block_byref_object_copy__1;
  long long v40 = __Block_byref_object_dispose__2;
  memset(v41, 0, sizeof(v41));
  unsigned int v32 = 0;
  uint64_t v33 = &v32;
  uint64_t v34 = 0x2000000000;
  char v35 = 0;
  uint64_t v18 = *a11;
  if (*a11)
  {
    dispatch_retain(*a11);
    dispatch_group_enter(v18);
  }
  unsigned int v31 = v18;
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 0x40000000;
  uint64_t v26[2] = ___ZN15HALS_MetaDevice34HandleGroupObjectPropertiesChangedEjjjPKjS1_jPK26AudioObjectPropertyAddressbRKNSt3__16vectorIjNS5_9allocatorIjEEEEN10applesauce8dispatch2v15groupE_block_invoke;
  v26[3] = &unk_1E6231CE8;
  int v27 = a2;
  unsigned int v28 = a3;
  int v29 = a4;
  v26[8] = a5;
  v26[9] = a6;
  int v30 = a7;
  v26[10] = a8;
  v26[4] = &v32;
  v26[5] = &v42;
  v26[6] = &v36;
  v26[7] = a1;
  uint64_t v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v19, (uint64_t)v26);
  if (*((unsigned char *)v33 + 24)) {
    HALS_Device::UpdateInternalIOContext(a1);
  }
  unsigned int v20 = *((_DWORD *)a1 + 4);
  uint64_t v21 = v43;
  int v22 = v37;
  uint64_t v23 = *(_opaque_pthread_t **)((*(uint64_t (**)(HALS_Device *))(*(void *)a1 + 48))(a1) + 72);
  uint64_t v24 = (uint64_t)(v21 + 5);
  if (v23 == pthread_self() && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "HALS_Object.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 675;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Object::GroupPropertiesChanged: Notifications are being sent from inside the command gate.", buf, 0x12u);
  }
  memset(buf, 0, sizeof(buf));
  HALS_NotificationManager::GroupPropertiesChanged(a9, v20, a3, v24, v22 + 5, (uint64_t)buf);
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  if (v18)
  {
    dispatch_group_leave(v18);
    dispatch_release(v18);
  }
  _Block_object_dispose(&v32, 8);
  _Block_object_dispose(&v36, 8);
  unsigned int v32 = (void **)v41;
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](&v32);
  _Block_object_dispose(&v42, 8);
  if ((void)v47)
  {
    *((void *)&v47 + 1) = v47;
    operator delete((void *)v47);
  }
}

void sub_1BAC856D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,dispatch_object_t a25,void **a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  unsigned int v32 = *(void **)(v30 - 128);
  if (v32)
  {
    *(void *)(v30 - 120) = v32;
    operator delete(v32);
  }
  applesauce::dispatch::v1::group_session::~group_session(&a25);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  a26 = a11;
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](&a26);
  _Block_object_dispose((const void *)(v30 - 200), 8);
  uint64_t v33 = *(void **)(v30 - 160);
  if (v33)
  {
    *(void *)(v30 - 152) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

char *__Block_byref_object_copy__5289(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v3 = a1 + 40;
  *(void *)(a1 + 56) = 0;
  uint64_t result = std::vector<CAPropertyAddress>::__init_with_size[abi:ne180100]<CAPropertyAddress*,CAPropertyAddress*>((char *)(a1 + 40), *(uint64_t **)(a2 + 40), *(uint64_t **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2));
  *(void *)(v3 + 24) = *(void *)(a2 + 64);
  return result;
}

void __Block_byref_object_dispose__5290(uint64_t a1)
{
  unsigned __int8 v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = a1 + 40;
  *(void *)(v2 + 16) = 0;
  return std::vector<CAPropertyAddressList>::__init_with_size[abi:ne180100]<CAPropertyAddressList*,CAPropertyAddressList*>(v2, *(void *)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 5);
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  unsigned __int8 v1 = (void **)(a1 + 40);
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t ___ZN15HALS_MetaDevice34HandleGroupObjectPropertiesChangedEjjjPKjS1_jPK26AudioObjectPropertyAddressbRKNSt3__16vectorIjNS5_9allocatorIjEEEEN10applesauce8dispatch2v15groupE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void, void, void, void, void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 976))(*(void *)(a1 + 56), *(unsigned int *)(a1 + 88), *(unsigned int *)(a1 + 92), *(unsigned int *)(a1 + 96), *(void *)(a1 + 64), *(void *)(a1 + 72), *(unsigned int *)(a1 + 100), *(void *)(a1 + 80), *(void *)(*(void *)(a1 + 40) + 8) + 40, *(void *)(*(void *)(a1 + 48) + 8) + 40);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAC85884(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void applesauce::dispatch::v1::group_session::~group_session(dispatch_object_t *this)
{
  uint64_t v2 = *this;
  if (v2)
  {
    dispatch_group_leave(v2);
    if (*this) {
      dispatch_release(*this);
    }
  }
}

void HALS_MetaDevice::HandleObjectPropertiesChanged(HALS_MetaDevice *this, const HALS_Object *a2, uint64_t a3, int a4, const AudioObjectPropertyAddress *a5)
{
  uint64_t v38 = 0;
  unsigned int v39 = &v38;
  uint64_t v40 = 0x4802000000;
  uint64_t v41 = __Block_byref_object_copy__5289;
  uint64_t v42 = __Block_byref_object_dispose__5290;
  long long v43 = 0u;
  long long v44 = 0u;
  uint64_t v32 = 0;
  uint64_t v33 = &v32;
  uint64_t v34 = 0x4002000000;
  char v35 = __Block_byref_object_copy__1;
  uint64_t v36 = __Block_byref_object_dispose__2;
  memset(v37, 0, sizeof(v37));
  unsigned int v28 = 0;
  int v29 = &v28;
  uint64_t v30 = 0x2000000000;
  char v31 = 0;
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 0x40000000;
  CFDictionaryRef v25[2] = ___ZN15HALS_MetaDevice29HandleObjectPropertiesChangedEPK11HALS_ObjectjjPK26AudioObjectPropertyAddress_block_invoke;
  v25[3] = &unk_1E6231CC0;
  int v26 = a3;
  int v27 = a4;
  v25[8] = a2;
  v25[9] = a5;
  v25[4] = &v28;
  void v25[5] = &v38;
  v25[6] = &v32;
  v25[7] = this;
  uint64_t v7 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v7, (uint64_t)v25);
  if (*((unsigned char *)v29 + 24)) {
    HALS_Device::UpdateInternalIOContext(this);
  }
  uint64_t v8 = (const AudioObjectPropertyAddress *)v39[5];
  unint64_t v9 = (const AudioObjectPropertyAddress *)v39[6];
  BOOL v10 = v8 != v9;
  if (v8 != v9) {
    HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), a3, -1431655765 * ((unint64_t)((char *)v9 - (char *)v8) >> 2), v8);
  }
  uint64_t v11 = v33[5];
  uint64_t v12 = v33[6];
  if (((v12 - v11) & 0x1FFFFFFFE0) != 0)
  {
    if (v12 == v11) {
LABEL_15:
    }
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    while (1)
    {
      uint64_t v15 = v11 + v13;
      uint64_t v16 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v11 + v13 + 24));
      uint64_t v18 = (HALS_ObjectMap *)v16;
      uint64_t v19 = *(void *)(v15 + 8);
      if (*(void *)v15 != v19 && v16 != 0)
      {
        HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*(unsigned int *)(v16 + 16), 0, -1431655765 * ((unint64_t)(v19 - *(void *)v15) >> 2), *(const AudioObjectPropertyAddress **)v15);
        BOOL v10 = 1;
      }
      HALS_ObjectMap::ReleaseObject(v18, v17);
      ++v14;
      uint64_t v11 = v33[5];
      uint64_t v21 = v33[6] - v11;
      if (v14 >= ((unint64_t)v21 >> 5)) {
        break;
      }
      v13 += 32;
      if (v14 >= v21 >> 5) {
        goto LABEL_15;
      }
    }
  }
  if (v10)
  {
    v22[0] = 0;
    v22[1] = 0;
    HALS_System::GetInstance(&v23, 0, v22);
    HALS_System::CheckForDefaultDeviceChanges(v23);
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
  }
  _Block_object_dispose(&v28, 8);
  _Block_object_dispose(&v32, 8);
  unsigned int v28 = (void **)v37;
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](&v28);
  _Block_object_dispose(&v38, 8);
  if ((void)v43)
  {
    *((void *)&v43 + 1) = v43;
    operator delete((void *)v43);
  }
}

void sub_1BAC85BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](&a24);
  _Block_object_dispose((const void *)(v28 - 152), 8);
  uint64_t v30 = *(void **)(v28 - 112);
  if (v30)
  {
    *(void *)(v28 - 104) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN15HALS_MetaDevice29HandleObjectPropertiesChangedEPK11HALS_ObjectjjPK26AudioObjectPropertyAddress_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void, void, uint64_t, uint64_t))(**(void **)(a1 + 56)
                                                                                               + 968))(*(void *)(a1 + 56), *(void *)(a1 + 64), *(unsigned int *)(a1 + 80), *(unsigned int *)(a1 + 84), *(void *)(a1 + 72), *(void *)(*(void *)(a1 + 40) + 8) + 40, *(void *)(*(void *)(a1 + 48) + 8) + 40);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAC85CB0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_MetaDevice::SetPropertyData(HALS_MetaDevice *this, const AudioObjectPropertyAddress *a2, const AudioObjectPropertyAddress *a3, unsigned int a4, _DWORD *a5, int a6, int *a7, HALS_Client *a8)
{
  uint64_t v241 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_MetaDevice *, const AudioObjectPropertyAddress *, const AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    int v172 = 2003332927;
    goto LABEL_211;
  }
  signed int mSelector = a3->mSelector;
  IsHogModeOwnerOrFree = (AMCP::Log::Scope_Registry *)HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, v16);
  if (!IsHogModeOwnerOrFree) {
    goto LABEL_5;
  }
  IsHogModeOwnerOrFree = (AMCP::Log::Scope_Registry *)HALS_Device::IsHogModeOwnerOrFree(this, a8);
  if ((IsHogModeOwnerOrFree & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    int v172 = 560492391;
LABEL_211:
    exception[2] = v172;
  }
  signed int mSelector = a3->mSelector;
LABEL_5:
  __int16 v218 = 0;
  long long v216 = 0u;
  long long v217 = 0u;
  float32x4_t v214 = 0;
  float32x4_t v213 = 0;
  uint64_t v215 = 0;
  if (mSelector <= 1735554415)
  {
    if (mSelector > 1685087595)
    {
      if ((mSelector - 1685278561) <= 0x11 && ((1 << (mSelector - 97)) & 0x20003) != 0)
      {
        uint64_t v19 = (uint64_t *)*((void *)this + 187);
        if (v19 && (mSelector - 1685278561) <= 0x11 && ((0x20001u >> (mSelector - 97)) & 1) != 0)
        {
          if (mSelector != 1685278561 && mSelector != 1685278578)
          {
            AMCP::Log::Scope_Registry::get(IsHogModeOwnerOrFree);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            float32x4_t v138 = **(NSObject ***)&buf[0].mSelector;
            if (*(void *)&buf[0].mElement) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[0].mElement);
            }
            if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR))
            {
              float32x4_t v139 = pthread_self();
              mach_port_t v140 = pthread_mach_thread_np(v139);
              buf[0].signed int mSelector = 67109890;
              buf[0].AudioObjectPropertyScope mScope = v140;
              LOWORD(buf[0].mElement) = 2080;
              *(void *)((char *)&buf[0].mElement + 2) = "HALS_MetaDevice_HostedDSP.cpp";
              HIWORD(buf[1].mScope) = 1024;
              buf[1].AudioObjectPropertyElement mElement = 134;
              LOWORD(v224) = 2080;
              *(void *)((char *)&v224 + 2) = "HandlesProperty(inAddress, inClient)";
              _os_log_error_impl(&dword_1BAA78000, v138, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s This property is not processed by HALS_MetaDevice_HostedDSP", (uint8_t *)buf, 0x22u);
            }
            abort();
          }
          v236.__r_.__value_.__r.__words[0] = 0;
          v236.__r_.__value_.__l.__size_ = (std::string::size_type)&v236;
          v236.__r_.__value_.__r.__words[2] = 0x2000000000;
          LOBYTE(v237) = 0;
          uint64_t v20 = *v19;
          *(void *)&buf[0].signed int mSelector = MEMORY[0x1E4F143A8];
          *(void *)&buf[0].AudioObjectPropertyElement mElement = 0x40000000;
          *(void *)&buf[1].AudioObjectPropertyScope mScope = ___ZN25HALS_MetaDevice_HostedDSP15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
          *(void *)&long long v224 = &unk_1E6230380;
          float32x4_t v226 = a3;
          float32x4_t v227 = a5;
          unsigned int v230 = a4;
          int v231 = a6;
          float32x4_t v228 = a7;
          float32x4_t v229 = a8;
          long long __p = v19;
          *((void *)&v224 + 1) = &v236;
          uint64_t v21 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 56))(v20);
          HALB_CommandGate::ExecuteCommand(v21, (uint64_t)buf);
          if (*(unsigned char *)(v236.__r_.__value_.__l.__size_ + 24))
          {
            int v22 = (HALS_Object *)*v19;
            uint64_t v23 = (HALS_NotificationManager *)*(unsigned int *)(*v19 + 16);
            if (a8) {
              uint64_t v24 = *((unsigned int *)a8 + 4);
            }
            else {
              uint64_t v24 = 0;
            }
            AudioObjectPropertyElement mElement = a3->mElement;
            uint64_t v201 = *(void *)&a3->mSelector;
            LODWORD(v202) = mElement;
            HALS_Object::PropertiesChanged(v22, v23, v24, 1u, (const AudioObjectPropertyAddress *)&v201);
          }
          uint64_t v63 = &v236;
          goto LABEL_111;
        }
        goto LABEL_61;
      }
      if (mSelector == 1685087596)
      {
        if (a4 > 3)
        {
          *(void *)&buf[0].signed int mSelector = 0;
          *(void *)&buf[0].AudioObjectPropertyElement mElement = buf;
          *(void *)&buf[1].AudioObjectPropertyScope mScope = 0x2000000000;
          LODWORD(v224) = 0;
          v206[0] = MEMORY[0x1E4F143A8];
          v206[1] = 0x40000000;
          v206[2] = ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_116;
          v206[3] = &unk_1E62321A0;
          v206[5] = this;
          v206[6] = a5;
          v206[4] = buf;
          BOOL v59 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v59, (uint64_t)v206);
          if (*(_DWORD *)(*(void *)&buf[0].mElement + 24))
          {
            char v60 = __cxa_allocate_exception(0x10uLL);
            int v61 = *(_DWORD *)(*(void *)&buf[0].mElement + 24);
            *(void *)char v60 = off_1F148A5D8;
            v60[2] = v61;
          }
LABEL_64:
          uint64_t v63 = buf;
LABEL_111:
          _Block_object_dispose(v63, 8);
          goto LABEL_112;
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          buf[0].signed int mSelector = 136315394;
          *(void *)&buf[0].AudioObjectPropertyScope mScope = "HALS_MetaDevice.cpp";
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 2547;
          int v173 = MEMORY[0x1E4F14500];
          __int16 v174 = "%25s:%-5d  HALS_MetaDevice::SetPropertyData: bad property data size for kAudioDevicePropertyEnableListening";
LABEL_229:
          _os_log_impl(&dword_1BAA78000, v173, OS_LOG_TYPE_ERROR, v174, (uint8_t *)buf, 0x12u);
          goto LABEL_230;
        }
        goto LABEL_230;
      }
      goto LABEL_61;
    }
    if (mSelector != 1633906541)
    {
      if (mSelector == 1634562932)
      {
        if (a4 <= 7)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_230;
          }
          buf[0].signed int mSelector = 136315394;
          *(void *)&buf[0].AudioObjectPropertyScope mScope = "HALS_MetaDevice.cpp";
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 2475;
          int v173 = MEMORY[0x1E4F14500];
          __int16 v174 = "%25s:%-5d  HALS_MetaDevice::SetPropertyData: bad property data size for kAudioAggregateDevicePropertyMainSubDevice";
          goto LABEL_229;
        }
        HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)buf);
        HALS_DeviceState::Capture((HALS_DeviceState *)buf, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
        uint64_t v201 = 0;
        *(void *)&long long v202 = &v201;
        *((void *)&v202 + 1) = 0x2000000000;
        LODWORD(v203) = 0;
        v208[0] = MEMORY[0x1E4F143A8];
        v208[1] = 0x40000000;
        v208[2] = ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_112;
        v208[3] = &unk_1E6232150;
        v208[6] = a5;
        v208[7] = &v218;
        v208[4] = &v201;
        v208[5] = this;
        int v100 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v100, (uint64_t)v208);
        if (*(_DWORD *)(v202 + 24))
        {
          float32x4_t v186 = __cxa_allocate_exception(0x10uLL);
          int v187 = *(_DWORD *)(v202 + 24);
          *(void *)float32x4_t v186 = off_1F148A5D8;
          v186[2] = v187;
        }
        HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)&v236);
        HALS_DeviceState::Capture(v101, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
        HALS_DeviceState::Compare((HALS_DeviceState *)buf, (const HALS_DeviceState *)&v236, (const AudioObjectPropertyAddress *)&v216, &v213, v102);
        *(void *)&long long v221 = 0x676C6F62616D7374;
        DWORD2(v221) = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v221, v103);
        *(void *)&long long v221 = 0x676C6F6261636F6DLL;
        DWORD2(v221) = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v221, v104);
      }
      else
      {
        if (mSelector != 1634755428) {
          goto LABEL_61;
        }
        if (a4 <= 7)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_230;
          }
          buf[0].signed int mSelector = 136315394;
          *(void *)&buf[0].AudioObjectPropertyScope mScope = "HALS_MetaDevice.cpp";
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 2511;
          int v173 = MEMORY[0x1E4F14500];
          __int16 v174 = "%25s:%-5d  HALS_MetaDevice::SetPropertyData: bad property data size for kAudioAggregateDevicePropertyClockDevice";
          goto LABEL_229;
        }
        HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)buf);
        HALS_DeviceState::Capture((HALS_DeviceState *)buf, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
        uint64_t v201 = 0;
        *(void *)&long long v202 = &v201;
        *((void *)&v202 + 1) = 0x2000000000;
        LODWORD(v203) = 0;
        v207[0] = MEMORY[0x1E4F143A8];
        v207[1] = 0x40000000;
        v207[2] = ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_114;
        v207[3] = &unk_1E6232178;
        v207[6] = a5;
        v207[7] = &v218;
        v207[4] = &v201;
        v207[5] = this;
        uint64_t v28 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v28, (uint64_t)v207);
        if (*(_DWORD *)(v202 + 24))
        {
          uint64_t v182 = __cxa_allocate_exception(0x10uLL);
          int v183 = *(_DWORD *)(v202 + 24);
          *(void *)uint64_t v182 = off_1F148A5D8;
          v182[2] = v183;
        }
        HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)&v236);
        HALS_DeviceState::Capture(v29, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
        HALS_DeviceState::Compare((HALS_DeviceState *)buf, (const HALS_DeviceState *)&v236, (const AudioObjectPropertyAddress *)&v216, &v213, v30);
        *(void *)&long long v221 = 0x676C6F6261706364;
        DWORD2(v221) = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v221, v31);
        *(void *)&long long v221 = 0x676C6F6261636F6DLL;
        DWORD2(v221) = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v221, v32);
        HALS_Device::UpdateInternalIOContext(this);
      }
      *(void *)&long long v221 = (char *)&v237 + 8;
      std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
      std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy((void *)v236.__r_.__value_.__r.__words[2]);
      _Block_object_dispose(&v201, 8);
      v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&v224 + 8;
      std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
      int v58 = *(void **)&buf[1].mScope;
      goto LABEL_96;
    }
    if (a4 <= 7)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_230;
      }
      buf[0].signed int mSelector = 136315394;
      *(void *)&buf[0].AudioObjectPropertyScope mScope = "HALS_MetaDevice.cpp";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 2406;
      int v173 = MEMORY[0x1E4F14500];
      __int16 v174 = "%25s:%-5d  HALS_MetaDevice::SetPropertyData: bad property data size for kAudioAggregateDevicePropertyComposition";
      goto LABEL_229;
    }
    uint64_t v73 = pthread_self();
    if (AMCP::Utility::is_thread_configured_for_realtime(v73, v74))
    {
      std::vector<void *>::vector(&v201);
      int v75 = backtrace((void **)v201, (unint64_t)(v202 - v201) >> 3);
      std::vector<void *>::resize((char **)&v201, v75);
      applesauce::backtrace::detail::symbolicate_snapshot(&v236, (uint64_t)&v201);
      uint64_t v192 = MEMORY[0x1E4FBA488] + 104;
      v235[0] = MEMORY[0x1E4FBA488] + 104;
      uint64_t v191 = MEMORY[0x1E4FBA488] + 64;
      *(void *)&buf[1].AudioObjectPropertyScope mScope = MEMORY[0x1E4FBA488] + 64;
      uint64_t v76 = (void *)MEMORY[0x1E4FBA408];
      uint64_t v77 = *(void *)(MEMORY[0x1E4FBA408] + 24);
      *(void *)&buf[0].signed int mSelector = *(void *)(MEMORY[0x1E4FBA408] + 16);
      *(void *)((char *)&buf[0].mSelector + *(void *)(*(void *)&buf[0].mSelector - 24)) = v77;
      *(void *)&buf[0].AudioObjectPropertyElement mElement = 0;
      uint64_t v78 = (std::ios_base *)((char *)buf + *(void *)(*(void *)&buf[0].mSelector - 24));
      std::ios_base::init(v78, &v224);
      uint64_t v79 = MEMORY[0x1E4FBA488] + 24;
      v78[1].__vftable = 0;
      v78[1].__fmtflags_ = -1;
      uint64_t v80 = v76[5];
      *(void *)&buf[1].AudioObjectPropertyScope mScope = v76[4];
      *(void *)((char *)&buf[1].mScope + *(void *)(*(void *)&buf[1].mScope - 24)) = v80;
      *(void *)&buf[0].signed int mSelector = v76[1];
      *(void *)((char *)&buf[0].mSelector + *(void *)(*(void *)&buf[0].mSelector - 24)) = v76[6];
      v235[0] = v192;
      *(void *)&buf[0].signed int mSelector = v79;
      *(void *)&buf[1].AudioObjectPropertyScope mScope = v191;
      std::streambuf::basic_streambuf();
      uint64_t v81 = MEMORY[0x1E4FBA470] + 16;
      std::string v232 = v236;
      *(void *)&long long v224 = MEMORY[0x1E4FBA470] + 16;
      memset(&v236, 0, sizeof(v236));
      uint64_t v233 = 0;
      int v234 = 24;
      std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)&v224);
      if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v236.__r_.__value_.__l.__data_);
      }
      long long v221 = 0uLL;
      *(void *)&long long v222 = 0;
      AMCP::Log::Scope_Registry::get(v82);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v236, "com.apple.coreaudio", "AMCP");
      int v83 = *(NSObject **)v236.__r_.__value_.__l.__data_;
      if (v236.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v236.__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
      {
        float32x4_t v136 = pthread_self();
        mach_port_t v137 = pthread_mach_thread_np(v136);
        LODWORD(v236.__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(v236.__r_.__value_.__r.__words[0]) = v137;
        LOWORD(v236.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v236.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_MetaDevice.cpp";
        WORD1(v236.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v236.__r_.__value_.__r.__words[2]) = 2413;
        _os_log_error_impl(&dword_1BAA78000, v83, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Set aggregate on IO thread!!! logging backtrace", (uint8_t *)&v236, 0x18u);
      }
      uint64_t v190 = v81;
      int v84 = (std::locale::id *)MEMORY[0x1E4FBA258];
      while (1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)buf + *(void *)(*(void *)&buf[0].mSelector - 24)));
        unsigned int v85 = std::locale::use_facet((const std::locale *)&v236, v84);
        unsigned __int8 v86 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v85->__vftable[2].~facet_0)(v85, 10);
        std::locale::~locale((std::locale *)&v236);
        char v87 = (AMCP::Log::Scope_Registry *)std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(buf, (uint64_t)&v221, v86);
        if ((*((unsigned char *)&v224 + *(void *)(*(void *)&buf[0].mSelector - 24) + 8) & 5) != 0) {
          break;
        }
        AMCP::Log::Scope_Registry::get(v87);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v236, "com.apple.coreaudio", "AMCP");
        int v88 = *(NSObject **)v236.__r_.__value_.__l.__data_;
        if (v236.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v236.__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
        {
          unint64_t v89 = pthread_self();
          mach_port_t v90 = pthread_mach_thread_np(v89);
          CFNumberRef v91 = &v221;
          if (SBYTE7(v222) < 0) {
            CFNumberRef v91 = (long long *)v221;
          }
          LODWORD(v236.__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(v236.__r_.__value_.__r.__words[0]) = v90;
          LOWORD(v236.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v236.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_MetaDevice.cpp";
          WORD1(v236.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v236.__r_.__value_.__r.__words[2]) = 2416;
          LOWORD(v237) = 2080;
          *(void *)((char *)&v237 + 2) = v91;
          _os_log_error_impl(&dword_1BAA78000, v88, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d SetAggOnIOThreadBT: %s", (uint8_t *)&v236, 0x22u);
        }
      }
      if (SBYTE7(v222) < 0) {
        operator delete((void *)v221);
      }
      *(void *)&buf[0].signed int mSelector = *MEMORY[0x1E4FBA408];
      uint64_t v106 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(void *)((char *)&buf[0].mSelector + *(void *)(*(void *)&buf[0].mSelector - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
      *(void *)&buf[1].AudioObjectPropertyScope mScope = v106;
      *(void *)&long long v224 = v190;
      if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v232.__r_.__value_.__l.__data_);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1C1859700](v235);
      if (v201)
      {
        *(void *)&long long v202 = v201;
        operator delete((void *)v201);
      }
    }
    HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)buf);
    HALS_DeviceState::Capture((HALS_DeviceState *)buf, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
    HALS_MetaDevice::UnregisterTaps(this);
    uint64_t v201 = 0;
    *(void *)&long long v202 = &v201;
    *((void *)&v202 + 1) = 0x2000000000;
    LODWORD(v203) = 0;
    v209[0] = MEMORY[0x1E4F143A8];
    v209[1] = 0x40000000;
    v209[2] = ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_110;
    v209[3] = &unk_1E6232128;
    v209[6] = a5;
    v209[7] = &v218;
    v209[5] = this;
    v209[4] = &v201;
    char v107 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v107, (uint64_t)v209);
    if (*(_DWORD *)(v202 + 24))
    {
      float32x4_t v188 = __cxa_allocate_exception(0x10uLL);
      int v189 = *(_DWORD *)(v202 + 24);
      *(void *)float32x4_t v188 = off_1F148A5D8;
      v188[2] = v189;
    }
    HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)&v236);
    HALS_DeviceState::Capture(v108, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
    HALS_DeviceState::Compare((HALS_DeviceState *)buf, (const HALS_DeviceState *)&v236, (const AudioObjectPropertyAddress *)&v216, &v213, v109);
    *(void *)&long long v221 = 0x676C6F62616D7374;
    DWORD2(v221) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v221, v110);
    *(void *)&long long v221 = 0x676C6F6261706364;
    DWORD2(v221) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v221, v111);
    *(void *)&long long v221 = 0x676C6F6267727570;
    DWORD2(v221) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v221, v112);
    *(void *)&long long v221 = 0x676C6F6261746170;
    DWORD2(v221) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v221, v113);
    *(void *)&long long v221 = 0x676C6F6261636F6DLL;
    DWORD2(v221) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v221, v114);
    *(void *)&long long v221 = 0x676C6F6274617023;
    DWORD2(v221) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v221, v115);
    HALS_MetaDevice::RegisterTaps(this);
LABEL_106:
    *(void *)&long long v221 = (char *)&v237 + 8;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v221);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy((void *)v236.__r_.__value_.__r.__words[2]);
    _Block_object_dispose(&v201, 8);
    v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&v224 + 8;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*(void **)&buf[1].mScope);
    BOOL v68 = 1;
    int v105 = 1;
    goto LABEL_114;
  }
  if (mSelector <= 1853059699)
  {
    if (mSelector == 1735554416)
    {
      if (a4 <= 7)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_230;
        }
        buf[0].signed int mSelector = 136315394;
        *(void *)&buf[0].AudioObjectPropertyScope mScope = "HALS_MetaDevice.cpp";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 2366;
        int v173 = MEMORY[0x1E4F14500];
        __int16 v174 = "%25s:%-5d  HALS_MetaDevice::SetPropertyData: bad property data size for kAudioAggregateDevicePropertyFullSubDeviceList";
        goto LABEL_229;
      }
      HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)buf);
      HALS_DeviceState::Capture((HALS_DeviceState *)buf, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
      uint64_t v201 = 0;
      *(void *)&long long v202 = &v201;
      *((void *)&v202 + 1) = 0x2000000000;
      LODWORD(v203) = 0;
      v210[0] = MEMORY[0x1E4F143A8];
      v210[1] = 0x40000000;
      v210[2] = ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_108;
      v210[3] = &unk_1E6232100;
      v210[6] = a5;
      v210[7] = &v218;
      v210[5] = this;
      v210[4] = &v201;
      CFTypeID v92 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v92, (uint64_t)v210);
      if (*(_DWORD *)(v202 + 24))
      {
        float32x4_t v184 = __cxa_allocate_exception(0x10uLL);
        int v185 = *(_DWORD *)(v202 + 24);
        *(void *)float32x4_t v184 = off_1F148A5D8;
        v184[2] = v185;
      }
      HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)&v236);
      HALS_DeviceState::Capture(v93, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
      HALS_DeviceState::Compare((HALS_DeviceState *)buf, (const HALS_DeviceState *)&v236, (const AudioObjectPropertyAddress *)&v216, &v213, v94);
      *(void *)&long long v221 = 0x676C6F62616D7374;
      DWORD2(v221) = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v221, v95);
      *(void *)&long long v221 = 0x676C6F6261706364;
      DWORD2(v221) = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v221, v96);
      *(void *)&long long v221 = 0x676C6F6267727570;
      DWORD2(v221) = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v221, v97);
      *(void *)&long long v221 = 0x676C6F6261677270;
      DWORD2(v221) = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v221, v98);
      *(void *)&long long v221 = 0x676C6F6261636F6DLL;
      DWORD2(v221) = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v221, v99);
      goto LABEL_106;
    }
    if (mSelector != 1819173229 && mSelector != 1851878764) {
      goto LABEL_61;
    }
    if (a4 <= 7)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_230;
      }
      buf[0].signed int mSelector = 136315394;
      *(void *)&buf[0].AudioObjectPropertyScope mScope = "HALS_MetaDevice.cpp";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 2329;
      int v173 = MEMORY[0x1E4F14500];
      __int16 v174 = "%25s:%-5d  HALS_MetaDevice::SetPropertyData: bad property data size for kAudioObjectPropertyName";
      goto LABEL_229;
    }
    *(void *)&buf[0].signed int mSelector = 0;
    *(void *)&buf[0].AudioObjectPropertyElement mElement = buf;
    *(void *)&buf[1].AudioObjectPropertyScope mScope = 0x2000000000;
    LODWORD(v224) = 0;
    v212[0] = MEMORY[0x1E4F143A8];
    v212[1] = 0x40000000;
    v212[2] = ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
    v212[3] = &unk_1E62320B0;
    v212[6] = a5;
    v212[5] = this;
    v212[4] = buf;
    uint64_t v33 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v33, (uint64_t)v212);
    if (*(_DWORD *)(*(void *)&buf[0].mElement + 24))
    {
      uint64_t v175 = __cxa_allocate_exception(0x10uLL);
      int v176 = *(_DWORD *)(*(void *)&buf[0].mElement + 24);
      *(void *)uint64_t v175 = off_1F148A5D8;
      v175[2] = v176;
    }
    v236.__r_.__value_.__r.__words[0] = 0x676C6F626C6E616DLL;
    LODWORD(v236.__r_.__value_.__r.__words[1]) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v236, v34);
LABEL_36:
    _Block_object_dispose(buf, 8);
LABEL_97:
    int v105 = 0;
    BOOL v68 = 1;
    goto LABEL_114;
  }
  if (mSelector > 1983996970)
  {
    if (mSelector == 1983996971)
    {
      AudioObjectPropertyScope mScope = a3->mScope;
      BOOL v65 = mScope == 1768845428;
      if (mScope != 1768845428)
      {
        AMCP::Log::Scope_Registry::get(IsHogModeOwnerOrFree);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v144 = **(NSObject ***)&buf[0].mSelector;
        if (*(void *)&buf[0].mElement) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[0].mElement);
        }
        if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
        {
          uint64_t v145 = pthread_self();
          mach_port_t v146 = pthread_mach_thread_np(v145);
          buf[0].signed int mSelector = 67109890;
          buf[0].AudioObjectPropertyScope mScope = v146;
          LOWORD(buf[0].mElement) = 2080;
          *(void *)((char *)&buf[0].mElement + 2) = "HALS_MetaDevice.cpp";
          HIWORD(buf[1].mScope) = 1024;
          buf[1].AudioObjectPropertyElement mElement = 2622;
          LOWORD(v224) = 2080;
          *(void *)((char *)&v224 + 2) = "isInput == false";
          _os_log_error_impl(&dword_1BAA78000, v144, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_MetaDevice::SetPropertyData: only valid for input scope kAudioDevicePropertyVoiceActivityDetectionEnable", (uint8_t *)buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v205);
        __cxa_allocate_exception(0x40uLL);
        *(void *)&long long v219 = off_1F148A5D8;
        DWORD2(v219) = 1852797029;
        LODWORD(v236.__r_.__value_.__r.__words[1]) = 1852797029;
        float32x4_t v238 = 0;
        LODWORD(v239) = -1;
        v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1487130;
        v236.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1487158;
        long long v237 = 0uLL;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&v236);
        *((void *)&v224 + 1) = "virtual void HALS_MetaDevice::SetPropertyData(AudioObjectID, const AudioObjectPropertyA"
                                 "ddress &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
        long long __p = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Meta/HALS_MetaDevice.cpp";
        LODWORD(v226) = 2622;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v221);
        long long v202 = v221;
        uint64_t v201 = (uint64_t)&unk_1F148AA90;
        uint64_t v203 = v222;
        long long v221 = 0uLL;
        *(void *)&long long v222 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
      }
      atomic_load((unsigned __int8 *)this + 1432);
      if (!a5)
      {
        AMCP::Log::Scope_Registry::get(IsHogModeOwnerOrFree);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        float32x4_t v147 = **(NSObject ***)&buf[0].mSelector;
        if (*(void *)&buf[0].mElement) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[0].mElement);
        }
        if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
        {
          unsigned int v148 = pthread_self();
          mach_port_t v149 = pthread_mach_thread_np(v148);
          buf[0].signed int mSelector = 67109890;
          buf[0].AudioObjectPropertyScope mScope = v149;
          LOWORD(buf[0].mElement) = 2080;
          *(void *)((char *)&buf[0].mElement + 2) = "HALS_MetaDevice.cpp";
          HIWORD(buf[1].mScope) = 1024;
          buf[1].AudioObjectPropertyElement mElement = 2624;
          LOWORD(v224) = 2080;
          *(void *)((char *)&v224 + 2) = "inData == nullptr";
          _os_log_error_impl(&dword_1BAA78000, v147, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_MetaDevice::SetPropertyData: inData is nullptr for kAudioDevicePropertyVoiceActivityDetectionEnable", (uint8_t *)buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v205);
        __cxa_allocate_exception(0x40uLL);
        *(void *)&long long v219 = off_1F148A5D8;
        DWORD2(v219) = 1852797029;
        LODWORD(v236.__r_.__value_.__r.__words[1]) = 1852797029;
        float32x4_t v238 = 0;
        LODWORD(v239) = -1;
        v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1487130;
        v236.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1487158;
        long long v237 = 0uLL;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&v236);
        *((void *)&v224 + 1) = "virtual void HALS_MetaDevice::SetPropertyData(AudioObjectID, const AudioObjectPropertyA"
                                 "ddress &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
        long long __p = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Meta/HALS_MetaDevice.cpp";
        LODWORD(v226) = 2624;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v221);
        long long v202 = v221;
        uint64_t v201 = (uint64_t)&unk_1F148AA90;
        uint64_t v203 = v222;
        long long v221 = 0uLL;
        *(void *)&long long v222 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
      }
      if (a4 != 4)
      {
        AMCP::Log::Scope_Registry::get(IsHogModeOwnerOrFree);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        float32x4_t v153 = **(NSObject ***)&buf[0].mSelector;
        if (*(void *)&buf[0].mElement) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[0].mElement);
        }
        if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
        {
          float32x4_t v154 = pthread_self();
          mach_port_t v155 = pthread_mach_thread_np(v154);
          buf[0].signed int mSelector = 67109890;
          buf[0].AudioObjectPropertyScope mScope = v155;
          LOWORD(buf[0].mElement) = 2080;
          *(void *)((char *)&buf[0].mElement + 2) = "HALS_MetaDevice.cpp";
          HIWORD(buf[1].mScope) = 1024;
          buf[1].AudioObjectPropertyElement mElement = 2625;
          LOWORD(v224) = 2080;
          *(void *)((char *)&v224 + 2) = "inDataSize != sizeof(UInt32)";
          _os_log_error_impl(&dword_1BAA78000, v153, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_MetaDevice::SetPropertyData: inDataSize is not UInt32 for kAudioDevicePropertyVoiceActivityDetectionEnable", (uint8_t *)buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v205);
        __cxa_allocate_exception(0x40uLL);
        *(void *)&long long v219 = off_1F148A5D8;
        DWORD2(v219) = 1852797029;
        LODWORD(v236.__r_.__value_.__r.__words[1]) = 1852797029;
        float32x4_t v238 = 0;
        LODWORD(v239) = -1;
        v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1487130;
        v236.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1487158;
        long long v237 = 0uLL;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&v236);
        *((void *)&v224 + 1) = "virtual void HALS_MetaDevice::SetPropertyData(AudioObjectID, const AudioObjectPropertyA"
                                 "ddress &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
        long long __p = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Meta/HALS_MetaDevice.cpp";
        LODWORD(v226) = 2625;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v221);
        long long v202 = v221;
        uint64_t v201 = (uint64_t)&unk_1F148AA90;
        uint64_t v203 = v222;
        long long v221 = 0uLL;
        *(void *)&long long v222 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
      }
      if (!a8)
      {
        AMCP::Log::Scope_Registry::get(IsHogModeOwnerOrFree);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        float32x4_t v159 = **(NSObject ***)&buf[0].mSelector;
        if (*(void *)&buf[0].mElement) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[0].mElement);
        }
        if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
        {
          char v160 = pthread_self();
          mach_port_t v161 = pthread_mach_thread_np(v160);
          buf[0].signed int mSelector = 67109890;
          buf[0].AudioObjectPropertyScope mScope = v161;
          LOWORD(buf[0].mElement) = 2080;
          *(void *)((char *)&buf[0].mElement + 2) = "HALS_MetaDevice.cpp";
          HIWORD(buf[1].mScope) = 1024;
          buf[1].AudioObjectPropertyElement mElement = 2626;
          LOWORD(v224) = 2080;
          *(void *)((char *)&v224 + 2) = "inClient == nullptr";
          _os_log_error_impl(&dword_1BAA78000, v159, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_MetaDevice::SetPropertyData: inClient is null for kAudioDevicePropertyVoiceActivityDetectionEnable", (uint8_t *)buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v205);
        __cxa_allocate_exception(0x40uLL);
        *(void *)&long long v219 = off_1F148A5D8;
        DWORD2(v219) = 1852797029;
        LODWORD(v236.__r_.__value_.__r.__words[1]) = 1852797029;
        float32x4_t v238 = 0;
        LODWORD(v239) = -1;
        v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1487130;
        v236.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1487158;
        long long v237 = 0uLL;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&v236);
        *((void *)&v224 + 1) = "virtual void HALS_MetaDevice::SetPropertyData(AudioObjectID, const AudioObjectPropertyA"
                                 "ddress &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
        long long __p = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Meta/HALS_MetaDevice.cpp";
        LODWORD(v226) = 2626;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v221);
        long long v202 = v221;
        uint64_t v201 = (uint64_t)&unk_1F148AA90;
        uint64_t v203 = v222;
        long long v221 = 0uLL;
        *(void *)&long long v222 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
      }
      int v66 = *a5;
      HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)buf);
      HALS_DeviceState::Capture((HALS_DeviceState *)buf, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
      v195[0] = MEMORY[0x1E4F143A8];
      v195[1] = 0x40000000;
      v195[2] = ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_128;
      v195[3] = &__block_descriptor_tmp_129;
      int v196 = v66;
      BOOL v197 = v65;
      v195[4] = this;
      v195[5] = a8;
      v195[6] = &v218;
      unsigned int v67 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v67, (uint64_t)v195);
      BOOL v68 = (_BYTE)v218 != 0;
      if ((_BYTE)v218)
      {
        HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)&v236);
        HALS_DeviceState::Capture(v69, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
        HALS_DeviceState::Compare((HALS_DeviceState *)buf, (const HALS_DeviceState *)&v236, (const AudioObjectPropertyAddress *)&v216, &v213, v70);
        uint64_t v201 = 0x676C6F6261677270;
        LODWORD(v202) = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v201, v71);
        uint64_t v201 = 0x676C6F6261636F6DLL;
        LODWORD(v202) = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v201, v72);
        uint64_t v201 = (uint64_t)&v237 + 8;
        std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v201);
        std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy((void *)v236.__r_.__value_.__r.__words[2]);
      }
      v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&v224 + 8;
      std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
      std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*(void **)&buf[1].mScope);
      goto LABEL_113;
    }
    if (mSelector != 1986622324) {
      goto LABEL_61;
    }
    AudioObjectPropertyScope v36 = a3->mScope;
    BOOL v37 = v36 == 1768845428;
    if (v36 != 1768845428)
    {
      AMCP::Log::Scope_Registry::get(IsHogModeOwnerOrFree);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v141 = **(NSObject ***)&buf[0].mSelector;
      if (*(void *)&buf[0].mElement) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[0].mElement);
      }
      if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
      {
        float32x4_t v142 = pthread_self();
        mach_port_t v143 = pthread_mach_thread_np(v142);
        buf[0].signed int mSelector = 67109890;
        buf[0].AudioObjectPropertyScope mScope = v143;
        LOWORD(buf[0].mElement) = 2080;
        *(void *)((char *)&buf[0].mElement + 2) = "HALS_MetaDevice.cpp";
        HIWORD(buf[1].mScope) = 1024;
        buf[1].AudioObjectPropertyElement mElement = 2564;
        LOWORD(v224) = 2080;
        *(void *)((char *)&v224 + 2) = "isInput == false";
        _os_log_error_impl(&dword_1BAA78000, v141, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_MetaDevice::SetPropertyData: only valid for input scope kAudioDevicePropertyVocalIsolationType", (uint8_t *)buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v205);
      __cxa_allocate_exception(0x40uLL);
      *(void *)&long long v219 = off_1F148A5D8;
      DWORD2(v219) = 1852797029;
      LODWORD(v236.__r_.__value_.__r.__words[1]) = 1852797029;
      float32x4_t v238 = 0;
      LODWORD(v239) = -1;
      v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1487130;
      v236.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1487158;
      long long v237 = 0uLL;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&v236);
      *((void *)&v224 + 1) = "virtual void HALS_MetaDevice::SetPropertyData(AudioObjectID, const AudioObjectPropertyAdd"
                               "ress &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
      long long __p = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Meta/HALS_MetaDevice.cpp";
      LODWORD(v226) = 2564;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v221);
      long long v202 = v221;
      uint64_t v201 = (uint64_t)&unk_1F148AA90;
      uint64_t v203 = v222;
      long long v221 = 0uLL;
      *(void *)&long long v222 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
    }
    int NumberStreamsExcludingReferenceStreams = (AMCP::Log::Scope_Registry *)HALS_Device::GetNumberStreamsExcludingReferenceStreams(this, 1);
    if (!NumberStreamsExcludingReferenceStreams)
    {
      AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      long long v150 = **(NSObject ***)&buf[0].mSelector;
      if (*(void *)&buf[0].mElement) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[0].mElement);
      }
      if (os_log_type_enabled(v150, OS_LOG_TYPE_ERROR))
      {
        float32x4_t v151 = pthread_self();
        mach_port_t v152 = pthread_mach_thread_np(v151);
        buf[0].signed int mSelector = 67109890;
        buf[0].AudioObjectPropertyScope mScope = v152;
        LOWORD(buf[0].mElement) = 2080;
        *(void *)((char *)&buf[0].mElement + 2) = "HALS_MetaDevice.cpp";
        HIWORD(buf[1].mScope) = 1024;
        buf[1].AudioObjectPropertyElement mElement = 2566;
        LOWORD(v224) = 2080;
        *(void *)((char *)&v224 + 2) = "hasNonTapInputStream == false";
        _os_log_error_impl(&dword_1BAA78000, v150, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_MetaDevice::SetPropertyData: Device does not have non-tap input streams for  kAudioDevicePropertyVocalIsolationType", (uint8_t *)buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v205);
      __cxa_allocate_exception(0x40uLL);
      *(void *)&long long v219 = off_1F148A5D8;
      DWORD2(v219) = 1852797029;
      LODWORD(v236.__r_.__value_.__r.__words[1]) = 1852797029;
      float32x4_t v238 = 0;
      LODWORD(v239) = -1;
      v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1487130;
      v236.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1487158;
      long long v237 = 0uLL;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&v236);
      *((void *)&v224 + 1) = "virtual void HALS_MetaDevice::SetPropertyData(AudioObjectID, const AudioObjectPropertyAdd"
                               "ress &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
      long long __p = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Meta/HALS_MetaDevice.cpp";
      LODWORD(v226) = 2566;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v221);
      long long v202 = v221;
      uint64_t v201 = (uint64_t)&unk_1F148AA90;
      uint64_t v203 = v222;
      long long v221 = 0uLL;
      *(void *)&long long v222 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
    }
    atomic_load((unsigned __int8 *)this + 1432);
    if (!a5)
    {
      AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      float32x4_t v156 = **(NSObject ***)&buf[0].mSelector;
      if (*(void *)&buf[0].mElement) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[0].mElement);
      }
      if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
      {
        float32x4_t v157 = pthread_self();
        mach_port_t v158 = pthread_mach_thread_np(v157);
        buf[0].signed int mSelector = 67109890;
        buf[0].AudioObjectPropertyScope mScope = v158;
        LOWORD(buf[0].mElement) = 2080;
        *(void *)((char *)&buf[0].mElement + 2) = "HALS_MetaDevice.cpp";
        HIWORD(buf[1].mScope) = 1024;
        buf[1].AudioObjectPropertyElement mElement = 2568;
        LOWORD(v224) = 2080;
        *(void *)((char *)&v224 + 2) = "inData == nullptr";
        _os_log_error_impl(&dword_1BAA78000, v156, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_MetaDevice::SetPropertyData: inData is nullptr for kAudioDevicePropertyVocalIsolationType", (uint8_t *)buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v205);
      __cxa_allocate_exception(0x40uLL);
      *(void *)&long long v219 = off_1F148A5D8;
      DWORD2(v219) = 1852797029;
      LODWORD(v236.__r_.__value_.__r.__words[1]) = 1852797029;
      float32x4_t v238 = 0;
      LODWORD(v239) = -1;
      v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1487130;
      v236.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1487158;
      long long v237 = 0uLL;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&v236);
      *((void *)&v224 + 1) = "virtual void HALS_MetaDevice::SetPropertyData(AudioObjectID, const AudioObjectPropertyAdd"
                               "ress &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
      long long __p = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Meta/HALS_MetaDevice.cpp";
      LODWORD(v226) = 2568;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v221);
      long long v202 = v221;
      uint64_t v201 = (uint64_t)&unk_1F148AA90;
      uint64_t v203 = v222;
      long long v221 = 0uLL;
      *(void *)&long long v222 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
    }
    if (a4 != 4)
    {
      AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      float32x4_t v162 = **(NSObject ***)&buf[0].mSelector;
      if (*(void *)&buf[0].mElement) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[0].mElement);
      }
      if (os_log_type_enabled(v162, OS_LOG_TYPE_ERROR))
      {
        float32x4_t v163 = pthread_self();
        mach_port_t v164 = pthread_mach_thread_np(v163);
        buf[0].signed int mSelector = 67109890;
        buf[0].AudioObjectPropertyScope mScope = v164;
        LOWORD(buf[0].mElement) = 2080;
        *(void *)((char *)&buf[0].mElement + 2) = "HALS_MetaDevice.cpp";
        HIWORD(buf[1].mScope) = 1024;
        buf[1].AudioObjectPropertyElement mElement = 2569;
        LOWORD(v224) = 2080;
        *(void *)((char *)&v224 + 2) = "inDataSize != sizeof(UInt32)";
        _os_log_error_impl(&dword_1BAA78000, v162, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_MetaDevice::SetPropertyData: inDataSize is not UInt32 for kAudioDevicePropertyVocalIsolationType", (uint8_t *)buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v205);
      __cxa_allocate_exception(0x40uLL);
      *(void *)&long long v219 = off_1F148A5D8;
      DWORD2(v219) = 1852797029;
      LODWORD(v236.__r_.__value_.__r.__words[1]) = 1852797029;
      float32x4_t v238 = 0;
      LODWORD(v239) = -1;
      v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1487130;
      v236.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1487158;
      long long v237 = 0uLL;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&v236);
      *((void *)&v224 + 1) = "virtual void HALS_MetaDevice::SetPropertyData(AudioObjectID, const AudioObjectPropertyAdd"
                               "ress &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
      long long __p = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Meta/HALS_MetaDevice.cpp";
      LODWORD(v226) = 2569;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v221);
      long long v202 = v221;
      uint64_t v201 = (uint64_t)&unk_1F148AA90;
      uint64_t v203 = v222;
      long long v221 = 0uLL;
      *(void *)&long long v222 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
    }
    if (!a8)
    {
      AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      float32x4_t v165 = **(NSObject ***)&buf[0].mSelector;
      if (*(void *)&buf[0].mElement) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[0].mElement);
      }
      if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR))
      {
        float32x4_t v166 = pthread_self();
        mach_port_t v167 = pthread_mach_thread_np(v166);
        buf[0].signed int mSelector = 67109890;
        buf[0].AudioObjectPropertyScope mScope = v167;
        LOWORD(buf[0].mElement) = 2080;
        *(void *)((char *)&buf[0].mElement + 2) = "HALS_MetaDevice.cpp";
        HIWORD(buf[1].mScope) = 1024;
        buf[1].AudioObjectPropertyElement mElement = 2570;
        LOWORD(v224) = 2080;
        *(void *)((char *)&v224 + 2) = "inClient == nullptr";
        _os_log_error_impl(&dword_1BAA78000, v165, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_MetaDevice::SetPropertyData: inClient is null for kAudioDevicePropertyVocalIsolationType", (uint8_t *)buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v205);
      __cxa_allocate_exception(0x40uLL);
      *(void *)&long long v219 = off_1F148A5D8;
      DWORD2(v219) = 1852797029;
      LODWORD(v236.__r_.__value_.__r.__words[1]) = 1852797029;
      float32x4_t v238 = 0;
      LODWORD(v239) = -1;
      v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1487130;
      v236.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1487158;
      long long v237 = 0uLL;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&v236);
      *((void *)&v224 + 1) = "virtual void HALS_MetaDevice::SetPropertyData(AudioObjectID, const AudioObjectPropertyAdd"
                               "ress &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
      long long __p = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Meta/HALS_MetaDevice.cpp";
      LODWORD(v226) = 2570;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v221);
      long long v202 = v221;
      uint64_t v201 = (uint64_t)&unk_1F148AA90;
      uint64_t v203 = v222;
      long long v221 = 0uLL;
      *(void *)&long long v222 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
    }
    unsigned int v39 = *a5;
    if (v39 >= 3)
    {
      AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      float32x4_t v168 = **(NSObject ***)&buf[0].mSelector;
      if (*(void *)&buf[0].mElement) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[0].mElement);
      }
      if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
      {
        float32x4_t v169 = pthread_self();
        mach_port_t v170 = pthread_mach_thread_np(v169);
        buf[0].signed int mSelector = 67109890;
        buf[0].AudioObjectPropertyScope mScope = v170;
        LOWORD(buf[0].mElement) = 2080;
        *(void *)((char *)&buf[0].mElement + 2) = "HALS_MetaDevice.cpp";
        HIWORD(buf[1].mScope) = 1024;
        buf[1].AudioObjectPropertyElement mElement = 2572;
        LOWORD(v224) = 2080;
        *(void *)((char *)&v224 + 2) = "dataValue > kAudioDevicePropertyVocalIsolationTypeBasic";
        _os_log_error_impl(&dword_1BAA78000, v168, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_MetaDevice::SetPropertyData inData is an invalid value for kAudioDevicePropertyVocalIsolationType", (uint8_t *)buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v205);
      __cxa_allocate_exception(0x40uLL);
      *(void *)&long long v219 = off_1F148A5D8;
      DWORD2(v219) = 1852797029;
      LODWORD(v236.__r_.__value_.__r.__words[1]) = 1852797029;
      float32x4_t v238 = 0;
      LODWORD(v239) = -1;
      v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1487130;
      v236.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1487158;
      long long v237 = 0uLL;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&v236);
      *((void *)&v224 + 1) = "virtual void HALS_MetaDevice::SetPropertyData(AudioObjectID, const AudioObjectPropertyAdd"
                               "ress &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
      long long __p = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Meta/HALS_MetaDevice.cpp";
      LODWORD(v226) = 2572;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v221);
      long long v202 = v221;
      uint64_t v201 = (uint64_t)&unk_1F148AA90;
      uint64_t v203 = v222;
      long long v221 = 0uLL;
      *(void *)&long long v222 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
    }
    HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)&v201);
    HALS_DeviceState::Capture((HALS_DeviceState *)&v201, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
    v198[0] = MEMORY[0x1E4F143A8];
    v198[1] = 0x40000000;
    v198[2] = ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_125;
    v198[3] = &__block_descriptor_tmp_126;
    unsigned int v199 = v39;
    v198[4] = this;
    v198[5] = a8;
    BOOL v200 = v37;
    v198[6] = &v218;
    uint64_t v40 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v40, (uint64_t)v198);
    if (!(_BYTE)v218)
    {
      *(void *)&buf[0].signed int mSelector = v204;
      std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*((void **)&v202 + 1));
      goto LABEL_112;
    }
    long long v221 = 0u;
    long long v222 = 0u;
    strcpy((char *)buf, "#mtsbolg");
    BYTE1(buf[0].mElement) = 0;
    HIWORD(buf[0].mElement) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v221, buf, v41);
    strcpy((char *)buf, "tmfsbolg");
    BYTE1(buf[0].mElement) = 0;
    HIWORD(buf[0].mElement) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v221, buf, v42);
    strcpy((char *)buf, "#mfsbolg");
    BYTE1(buf[0].mElement) = 0;
    HIWORD(buf[0].mElement) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v221, buf, v43);
    strcpy((char *)buf, "yalsbolg");
    BYTE1(buf[0].mElement) = 0;
    HIWORD(buf[0].mElement) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v221, buf, v44);
    uint64_t v45 = (void *)v221;
    HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), *((unsigned int *)a8 + 4), -1431655765 * ((*((void *)&v221 + 1) - (void)v221) >> 2), (const AudioObjectPropertyAddress *)v221);
    long long v219 = 0u;
    long long v220 = 0u;
    strcpy((char *)buf, "tmfsbolg");
    BYTE1(buf[0].mElement) = 0;
    HIWORD(buf[0].mElement) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v219, buf, v46);
    strcpy((char *)buf, "amfsbolg");
    BYTE1(buf[0].mElement) = 0;
    HIWORD(buf[0].mElement) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v219, buf, v47);
    strcpy((char *)buf, " tfpbolg");
    BYTE1(buf[0].mElement) = 0;
    HIWORD(buf[0].mElement) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v219, buf, v48);
    strcpy((char *)buf, "atfpbolg");
    BYTE1(buf[0].mElement) = 0;
    HIWORD(buf[0].mElement) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v219, buf, v49);
    *(void *)&buf[0].signed int mSelector = 0;
    *(void *)&buf[0].AudioObjectPropertyElement mElement = buf;
    *(void *)&buf[1].AudioObjectPropertyScope mScope = 0x4002000000;
    *(void *)&long long v224 = __Block_byref_object_copy__137;
    *((void *)&v224 + 1) = __Block_byref_object_dispose__138;
    long long __p = 0;
    float32x4_t v227 = 0;
    float32x4_t v226 = 0;
    v236.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
    v236.__r_.__value_.__l.__size_ = 0x40000000;
    v236.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN15HALS_MetaDevice25NotifyDSPChangedForClientEbP11HALS_Client_block_invoke;
    *(void *)&long long v237 = &unk_1E62322A8;
    char v240 = 1;
    float32x4_t v238 = this;
    float32x4_t v239 = a8;
    *((void *)&v237 + 1) = buf;
    uint64_t v50 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v50, (uint64_t)&v236);
    unint64_t v51 = *(unsigned int **)(*(void *)&buf[0].mElement + 40);
    CFDictionaryRef v52 = *(unsigned int **)(*(void *)&buf[0].mElement + 48);
    if (v51 != v52)
    {
      int v53 = (const AudioObjectPropertyAddress *)v219;
      unsigned int v54 = -1431655765 * ((*((void *)&v219 + 1) - (void)v219) >> 2);
      do
        HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*v51++, *((unsigned int *)a8 + 4), v54, v53);
      while (v51 != v52);
    }
    _Block_object_dispose(buf, 8);
    if (__p)
    {
      float32x4_t v226 = (const AudioObjectPropertyAddress *)__p;
      operator delete(__p);
    }
    if ((void)v219) {
      operator delete((void *)v219);
    }
    if (v45) {
      operator delete(v45);
    }
    HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)buf);
    HALS_DeviceState::Capture((HALS_DeviceState *)buf, this, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
    HALS_DeviceState::Compare((HALS_DeviceState *)&v201, (const HALS_DeviceState *)buf, (const AudioObjectPropertyAddress *)&v216, &v213, v55);
    v236.__r_.__value_.__r.__words[0] = 0x676C6F6261677270;
    LODWORD(v236.__r_.__value_.__r.__words[1]) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v236, v56);
    v236.__r_.__value_.__r.__words[0] = 0x676C6F6261636F6DLL;
    LODWORD(v236.__r_.__value_.__r.__words[1]) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v236, v57);
    v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&v224 + 8;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*(void **)&buf[1].mScope);
    *(void *)&buf[0].signed int mSelector = v204;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    int v58 = (void *)*((void *)&v202 + 1);
LABEL_96:
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v58);
    goto LABEL_97;
  }
  if (mSelector == 1853059700)
  {
    if (a4 > 7)
    {
      *(void *)&buf[0].signed int mSelector = 0;
      *(void *)&buf[0].AudioObjectPropertyElement mElement = buf;
      *(void *)&buf[1].AudioObjectPropertyScope mScope = 0x2000000000;
      LODWORD(v224) = 0;
      v211[0] = MEMORY[0x1E4F143A8];
      v211[1] = 0x40000000;
      v211[2] = ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_106;
      v211[3] = &unk_1E62320D8;
      v211[6] = a5;
      v211[7] = a8;
      v211[5] = this;
      v211[4] = buf;
      uint64_t v62 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v62, (uint64_t)v211);
      if (*(_DWORD *)(*(void *)&buf[0].mElement + 24))
      {
        uint64_t v180 = __cxa_allocate_exception(0x10uLL);
        int v181 = *(_DWORD *)(*(void *)&buf[0].mElement + 24);
        *(void *)uint64_t v180 = off_1F148A5D8;
        v180[2] = v181;
      }
      goto LABEL_64;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      buf[0].signed int mSelector = 136315394;
      *(void *)&buf[0].AudioObjectPropertyScope mScope = "HALS_MetaDevice.cpp";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 2348;
      int v173 = MEMORY[0x1E4F14500];
      __int16 v174 = "%25s:%-5d  HALS_MetaDevice::SetPropertyData: bad property data size for kAudioDevicePropertyNominalSampleRate";
      goto LABEL_229;
    }
LABEL_230:
    uint64_t v177 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v177 = off_1F148A5D8;
    v177[2] = 561211770;
  }
  if (mSelector == 1952542755)
  {
    if (a4 <= 7)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_230;
      }
      buf[0].signed int mSelector = 136315394;
      *(void *)&buf[0].AudioObjectPropertyScope mScope = "HALS_MetaDevice.cpp";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 2669;
      int v173 = MEMORY[0x1E4F14500];
      __int16 v174 = "%25s:%-5d  HALS_MetaDevice::SetPropertyData: bad property data size for kAudioAggregateDevicePropertyTapList";
      goto LABEL_229;
    }
    HALS_MetaDevice::UnregisterTaps(this);
    *(void *)&buf[0].signed int mSelector = 0;
    *(void *)&buf[0].AudioObjectPropertyElement mElement = buf;
    *(void *)&buf[1].AudioObjectPropertyScope mScope = 0x2000000000;
    LODWORD(v224) = 0;
    v194[0] = MEMORY[0x1E4F143A8];
    v194[1] = 0x40000000;
    v194[2] = ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_130;
    v194[3] = &unk_1E6232208;
    v194[6] = a5;
    v194[7] = &v218;
    v194[4] = buf;
    v194[5] = this;
    int v25 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v25, (uint64_t)v194);
    if (*(_DWORD *)(*(void *)&buf[0].mElement + 24))
    {
      double v178 = __cxa_allocate_exception(0x10uLL);
      int v179 = *(_DWORD *)(*(void *)&buf[0].mElement + 24);
      *(void *)double v178 = off_1F148A5D8;
      v178[2] = v179;
    }
    v236.__r_.__value_.__r.__words[0] = 0x676C6F6261746170;
    LODWORD(v236.__r_.__value_.__r.__words[1]) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v236, v26);
    v236.__r_.__value_.__r.__words[0] = 0x676C6F6274617023;
    LODWORD(v236.__r_.__value_.__r.__words[1]) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v236, v27);
    HALS_MetaDevice::RegisterTaps(this);
    goto LABEL_36;
  }
LABEL_61:
  HALS_Device::SetPropertyData(this, a2, a3, a4, a5, a6, a7, a8);
LABEL_112:
  BOOL v68 = 0;
LABEL_113:
  int v105 = 0;
LABEL_114:
  int v117 = HIBYTE(v218) | v218;
  if (v117)
  {
    v236.__r_.__value_.__r.__words[0] = 0x676C6F6273746D23;
    LODWORD(v236.__r_.__value_.__r.__words[1]) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v236, v35);
    if (HIBYTE(v218))
    {
      v236.__r_.__value_.__r.__words[0] = 0x696E707473746D23;
      LODWORD(v236.__r_.__value_.__r.__words[1]) = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v236, v35);
    }
    int v117 = v218;
    if ((_BYTE)v218)
    {
      v236.__r_.__value_.__r.__words[0] = 0x6F75747073746D23;
      LODWORD(v236.__r_.__value_.__r.__words[1]) = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v236, v35);
      int v117 = v218;
    }
  }
  unsigned int v118 = (AudioObjectPropertyAddress *)v216;
  if (HIBYTE(v218) || v117)
  {
    if ((void)v216 == *((void *)&v216 + 1))
    {
      float32x4_t v119 = v213;
      while (v119 != v214)
      {
        uint64_t v120 = *(void *)v119;
        uint64_t v121 = *((void *)v119 + 1);
        float32x4_t v119 = (CAPropertyAddressList *)((char *)v119 + 32);
        if (v120 != v121) {
          goto LABEL_125;
        }
      }
    }
    else
    {
LABEL_125:
      v236.__r_.__value_.__r.__words[0] = 0x676C6F6264696666;
      LODWORD(v236.__r_.__value_.__r.__words[1]) = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v216, (AudioObjectPropertyAddress *)&v236, v35);
      unsigned int v118 = (AudioObjectPropertyAddress *)v216;
    }
  }
  if (v118 != *((AudioObjectPropertyAddress **)&v216 + 1))
  {
    if (a8) {
      uint64_t v122 = *((unsigned int *)a8 + 4);
    }
    else {
      uint64_t v122 = 0;
    }
    HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), v122, -1431655765 * ((*((void *)&v216 + 1) - (void)v118) >> 2), v118);
  }
  unsigned int v123 = v213;
  uint64_t v124 = v214 - v213;
  if (((v214 - v213) & 0x1FFFFFFFE0) != 0)
  {
    uint64_t v125 = 0;
    unint64_t v126 = 0;
    do
    {
      if (v126 >= v124 >> 5) {
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      }
      float32x4_t v127 = (char *)v123 + v125;
      uint64_t v128 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)((char *)v123 + v125 + 24));
      __int16 v130 = (HALS_ObjectMap *)v128;
      uint64_t v131 = *((void *)v127 + 1);
      if (*(void *)v127 != v131 && v128 != 0)
      {
        if (a8) {
          uint64_t v133 = *((unsigned int *)a8 + 4);
        }
        else {
          uint64_t v133 = 0;
        }
        HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*(unsigned int *)(v128 + 16), v133, -1431655765 * ((unint64_t)(v131 - *(void *)v127) >> 2), *(const AudioObjectPropertyAddress **)v127);
      }
      HALS_ObjectMap::ReleaseObject(v130, v129);
      ++v126;
      unsigned int v123 = v213;
      uint64_t v124 = v214 - v213;
      v125 += 32;
    }
    while (v126 < ((unint64_t)(v214 - v213) >> 5));
  }
  if (((v68 | v105) & 1) != 0 && HIBYTE(v218) | v218)
  {
    uint64_t v134 = (HALS_NotificationManager *)*(unsigned int *)(*((void *)this + 163) + 16);
    uint64_t v135 = a8 ? *((unsigned int *)a8 + 4) : 0;
    strcpy((char *)buf, "#vedbolg");
    BYTE1(buf[0].mElement) = 0;
    HIWORD(buf[0].mElement) = 0;
    HALS_Object::PropertiesChanged(this, v134, v135, 1u, buf);
    v193[0] = 0;
    v193[1] = 0;
    HALS_System::GetInstance(buf, 0, v193);
    HALS_System::CheckForDefaultDeviceChanges(*(HALS_System **)&buf[0].mSelector);
    if (*(void *)&buf[0].mElement) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[0].mElement);
    }
  }
  *(void *)&buf[0].signed int mSelector = &v213;
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v118) {
    operator delete(v118);
  }
}

void sub_1BAC89380(_Unwind_Exception *a1)
{
  STACK[0x360] = (unint64_t)&STACK[0x2F8];
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x360]);
  if (STACK[0x310]) {
    operator delete((void *)STACK[0x310]);
  }
  _Unwind_Resume(a1);
}

void ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = **(const void ***)(a1 + 48);
  OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&v4, *(CFDictionaryRef *)(v1 + 1336));
  if (v2) {
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(theDict, @"name", v2);
  }
  else {
    OS::CF::MutableDictionary::RemoveKey(theDict, @"name");
  }
  CFDictionaryRef Copy = theDict;
  if (theDict) {
    CFDictionaryRef Copy = CFDictionaryCreateCopy(0, theDict);
  }
  OS::CF::UntypedObject::operator=(v1 + 1328, (uint64_t)Copy);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v4);
}

void ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_106(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  double v2 = **(double **)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = (HALS_MetaSubDevice ***)v1[168];
  uint64_t v5 = (HALS_MetaSubDevice ***)v1[169];
  while (v4 != v5)
  {
    unsigned int v6 = *v4;
    uint64_t v7 = v4[1];
    while (v6 != v7)
    {
      uint64_t v8 = HALS_MetaSubDevice::CopyRealIODevice(*v6);
      BOOL v10 = (HALS_ObjectMap *)v8;
      if (v8) {
        (*(void (**)(uint64_t, uint64_t, double))(*(void *)v8 + 272))(v8, v3, v2);
      }
      HALS_ObjectMap::ReleaseObject(v10, v9);
      ++v6;
    }
    v4 += 3;
  }
  uint64_t v11 = v1[174];
  for (uint64_t i = v1[175]; v11 != i; v11 += 8)
  {
    uint64_t v13 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(*(void *)v11 + 72));
    uint64_t v15 = (HALS_ObjectMap *)v13;
    if (v13)
    {
      uint64_t v16 = *(void *)(v13 + 248);
      int v17 = (std::__shared_weak_count *)*((void *)v15 + 32);
      if (v17)
      {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        if (v2 != 0.0)
        {
          long long v18 = *(_OWORD *)(v16 + 40);
          long long v24 = *(_OWORD *)(v16 + 24);
          long long v25 = v18;
          uint64_t v26 = *(void *)(v16 + 56);
          *(double *)&long long v24 = v2;
          HALS_MultiTap::set_format((HALS_MultiTap *)v16, &v24, 0);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      else if (v2 != 0.0)
      {
        long long v19 = *(_OWORD *)(v16 + 40);
        long long v24 = *(_OWORD *)(v16 + 24);
        long long v25 = v19;
        uint64_t v26 = *(void *)(v16 + 56);
        *(double *)&long long v24 = v2;
        HALS_MultiTap::set_format((HALS_MultiTap *)v16, &v24, 0);
      }
    }
    HALS_ObjectMap::ReleaseObject(v15, v14);
  }
  uint64_t v20 = (HALS_MetaSubDevice *)v1[178];
  if (v20)
  {
    uint64_t v21 = HALS_MetaSubDevice::CopyRealIODevice(v20);
    uint64_t v23 = (HALS_ObjectMap *)v21;
    if (v21) {
      (*(void (**)(uint64_t, uint64_t, double))(*(void *)v21 + 272))(v21, v3, v2);
    }
    HALS_ObjectMap::ReleaseObject(v23, v22);
  }
}

void sub_1BAC89994(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  int v28 = (int)a2;
  HALS_ObjectMap::ReleaseObject(v27, a2);
  uint64_t v30 = __cxa_begin_catch(a1);
  if (v28 == 2) {
    int v31 = v30[2];
  }
  else {
    int v31 = 2003329396;
  }
  *(_DWORD *)(*(void *)(*(void *)(v26 + 32) + 8) + 24) = v31;
  __cxa_end_catch();
}

void ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_108(uint64_t a1)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(const __CFDictionary ***)(a1 + 40);
  double v2 = *(CFTypeRef **)(a1 + 48);
  CFArrayRef v4 = (const __CFArray *)*v2;
  if (*v2) {
    CFRetain(*v2);
  }
  unint64_t v14 = &unk_1F1489968;
  CFArrayRef v15 = v4;
  OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)&v12);
  CFArrayRef Size = OS::CF::ArrayBase<__CFArray const*>::GetSize(v15);
  if (Size)
  {
    CFArrayRef v6 = Size;
    for (CFIndex i = 0; (const __CFArray *)i != v6; ++i)
    {
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::String>((const __CFArray *)&v10, (uint64_t)&v14, i);
      if (v11)
      {
        v16[0] = @"uid";
        v16[1] = v11;
        OS::CF::Dictionary::Dictionary(v9, (uint64_t)v16, 1uLL);
        OS::CF::MutableArray::AppendValue<OS::CF::Dictionary>(v13, (const void *)v9[1]);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v9);
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v10);
    }
  }
  OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&v10, v3[167]);
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>(v11, @"subdevices", v13);
  CFDictionaryRef Copy = v11;
  if (v11) {
    CFDictionaryRef Copy = CFDictionaryCreateCopy(0, v11);
  }
  OS::CF::UntypedObject::operator=((uint64_t)(v3 + 166), (uint64_t)Copy);
  HALS_MetaDeviceDescription::UpdateSubDeviceList(v3 + 165, 0);
  HALS_MetaDeviceDescription::UpdateSubTapList((HALS_MetaDeviceDescription *)(v3 + 165));
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v10);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v12);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v14);
  HALS_MetaDevice::_UpdateStreams(v3, *(BOOL **)(a1 + 56));
}

void *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x1C18592D0](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      void v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    ++v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1BAC89DF0(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1BAC89DB0);
  }
  __cxa_rethrow();
}

void sub_1BAC89E6C(_Unwind_Exception *a1)
{
}

void HALS_MetaDevice::UnregisterTaps(HALS_MetaDevice *this)
{
  uint64_t v21 = 0;
  int v22 = &v21;
  uint64_t v23 = 0x3802000000;
  long long v24 = __Block_byref_object_copy__132;
  long long v25 = __Block_byref_object_dispose__133;
  v26[0] = &unk_1F1489968;
  v26[1] = 0;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 0x40000000;
  v20[2] = ___ZN15HALS_MetaDevice14UnregisterTapsEv_block_invoke;
  v20[3] = &unk_1E6232258;
  v20[4] = &v21;
  v20[5] = this;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v20);
  CFArrayRef v3 = (const __CFArray *)v22[6];
  if (v3)
  {
    for (unsigned int i = 0; (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v3) > i; ++i)
    {
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v18, (uint64_t)(v22 + 5), i);
      if (theDict)
      {
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v16, theDict, @"uid");
        v13[0] = 0;
        v13[1] = 0;
        HALS_System::GetInstance(&v14, 0, v13);
        uint64_t v6 = (HALS_ObjectMap *)HALS_System::CopyTapByUUID(v14, v17);
        if (v15) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
        if (v6)
        {
          uint64_t v7 = (os_unfair_lock_s *)*((void *)v6 + 31);
          uint64_t v8 = (std::__shared_weak_count *)*((void *)v6 + 32);
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            HALS_MultiTap::unregister_meta_device(v7, *((_DWORD *)this + 4));
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          }
          else
          {
            HALS_MultiTap::unregister_meta_device(v7, *((_DWORD *)this + 4));
          }
          v12[0] = 0;
          v12[1] = 0;
          HALS_System::GetInstance(&v14, 0, v12);
          int v9 = v14;
          uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 32);
          v11[0] = *((void *)v6 + 31);
          v11[1] = (uint64_t)v10;
          if (v10) {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          HALS_System::RemoveTapFromAllContexts((uint64_t)v9, v11);
          if (v10) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          }
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
        }
        HALS_ObjectMap::ReleaseObject(v6, v5);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v16);
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v18);
      CFArrayRef v3 = (const __CFArray *)v22[6];
    }
  }
  _Block_object_dispose(&v21, 8);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v26);
}

void sub_1BAC8A0CC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 120), 8);
  OS::CF::UntypedObject::~UntypedObject(v1);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_110(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = *(CFTypeRef **)(a1 + 48);
  CFTypeRef v4 = *v2;
  if (*v2)
  {
    CFRetain(*v2);
    uint64_t v5 = v3 + 1328;
    uint64_t v6 = (uint64_t)v4;
  }
  else
  {
    uint64_t v5 = v3 + 1328;
    uint64_t v6 = 0;
  }
  OS::CF::UntypedObject::operator=(v5, v6);
  HALS_MetaDeviceDescription::UpdateSubDeviceList((CFDictionaryRef *)(v3 + 1320), 0);
  HALS_MetaDeviceDescription::UpdateSubTapList((HALS_MetaDeviceDescription *)(v3 + 1320));
  atomic_store(HALS_MetaDeviceDescription::IsPrivate((const __CFDictionary **)(v3 + 1320)), (unsigned __int8 *)(v3 + 1432));
  HALS_MetaDevice::_UpdateStreams((const __CFDictionary **)v3, *(BOOL **)(a1 + 56));
}

void sub_1BAC8A1DC(void *a1, int a2)
{
  CFTypeRef v4 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    int v5 = v4[2];
  }
  else {
    int v5 = 2003329396;
  }
  *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = v5;
  __cxa_end_catch();
}

void HALS_MetaDevice::RegisterTaps(HALS_MetaDevice *this)
{
  uint64_t v17 = 0;
  long long v18 = &v17;
  uint64_t v19 = 0x3802000000;
  uint64_t v20 = __Block_byref_object_copy__132;
  uint64_t v21 = __Block_byref_object_dispose__133;
  v22[0] = &unk_1F1489968;
  v22[1] = 0;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 0x40000000;
  v16[2] = ___ZN15HALS_MetaDevice12RegisterTapsEv_block_invoke;
  _DWORD v16[3] = &unk_1E6232230;
  v16[4] = &v17;
  void v16[5] = this;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v16);
  CFArrayRef v3 = (const __CFArray *)v18[6];
  if (v3)
  {
    for (unsigned int i = 0; (unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v3) > i; ++i)
    {
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v14, (uint64_t)(v18 + 5), i);
      if (theDict)
      {
        OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v12, theDict, @"uid");
        v9[0] = 0;
        v9[1] = 0;
        HALS_System::GetInstance(&v10, 0, v9);
        uint64_t v6 = HALS_System::CopyTapByUUID(v10, v13);
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        if (v6 && *(unsigned char *)(v6 + 240))
        {
          uint64_t v7 = *(os_unfair_lock_s **)(v6 + 248);
          uint64_t v8 = *(std::__shared_weak_count **)(v6 + 256);
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            HALS_MultiTap::register_meta_device(v7, *((_DWORD *)this + 4));
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          }
          else
          {
            HALS_MultiTap::register_meta_device(v7, *((_DWORD *)this + 4));
          }
          HALS_Tap::AddTapToAllContexts((HALS_Tap *)v6);
        }
        HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v6, v5);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v12);
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v14);
      CFArrayRef v3 = (const __CFArray *)v18[6];
    }
  }
  _Block_object_dispose(&v17, 8);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v22);
}

void sub_1BAC8A438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  OS::CF::UntypedObject::~UntypedObject(v16);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_112(uint64_t a1)
{
  CFArrayRef v3 = *(const __CFDictionary ***)(a1 + 40);
  uint64_t v2 = *(const __CFString ***)(a1 + 48);
  CFStringRef v4 = *v2;
  if (*v2 && HALS_MetaDeviceDescription::IsDeviceInRawDescription(v3 + 165, *v2))
  {
    OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&v6, v3[167]);
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(theDict, @"master", v4);
    CFDictionaryRef Copy = theDict;
    if (theDict) {
      CFDictionaryRef Copy = CFDictionaryCreateCopy(0, theDict);
    }
    OS::CF::UntypedObject::operator=((uint64_t)(v3 + 166), (uint64_t)Copy);
    HALS_MetaDeviceDescription::UpdateSubDeviceList(v3 + 165, 0);
    HALS_MetaDeviceDescription::UpdateSubTapList((HALS_MetaDeviceDescription *)(v3 + 165));
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v6);
  }
  HALS_MetaDevice::_UpdateStreams(v3, *(BOOL **)(a1 + 56));
}

void sub_1BAC8A554(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v21);
  uint64_t v19 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    int v20 = v19[2];
  }
  else {
    int v20 = 2003329396;
  }
  *(_DWORD *)(*(void *)(*(void *)(v16 + 32) + 8) + 24) = v20;
  __cxa_end_catch();
}

void ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_114(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 40);
  CFArrayRef v3 = **(const void ***)(a1 + 48);
  if (v3)
  {
    uint64_t v34 = *(void *)(a1 + 40);
    OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)v42, *(CFDictionaryRef *)(v2 + 1336));
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(theDict, @"clock", v3);
    v41[0] = &unk_1F1489A20;
    v41[1] = v3;
    uint64_t v32 = (CFDictionaryRef *)(v2 + 1320);
    ClockSubDevice = (HALS_MetaSubDevice *)HALS_MetaDeviceDescription::AllocateClockSubDevice(v2 + 1320, (uint64_t)v41);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v41);
    char v35 = ClockSubDevice;
    if (ClockSubDevice)
    {
      ClockDomaiuint64_t n = HALS_MetaSubDevice::GetClockDomain(ClockSubDevice);
      uint64_t v6 = *(HALS_MetaSubDevice ****)(v2 + 1344);
      AudioObjectPropertyScope v36 = *(HALS_MetaSubDevice ****)(v2 + 1352);
      if (v6 != v36)
      {
        int v7 = ClockDomain;
        int v38 = ClockDomain;
        while (1)
        {
          uint64_t v8 = *v6;
          int v9 = v6[1];
          BOOL v37 = v6;
          unsigned int v39 = v9;
          if (*v6 != v9) {
            break;
          }
LABEL_41:
          uint64_t v6 = v37 + 3;
          if (v37 + 3 == v36) {
            goto LABEL_42;
          }
        }
        while (1)
        {
          uint64_t v45 = 0x676C6F6264726674;
          int v46 = 0;
          int v10 = HALS_MetaSubDevice::GetClockDomain(*v8);
          if (v10) {
            BOOL v11 = v10 == v7;
          }
          else {
            BOOL v11 = 0;
          }
          int v12 = !v11;
          int v44 = v12;
          (*(void (**)(HALS_MetaSubDevice *, void, uint64_t *, uint64_t, int *, void, void, void))(*(void *)*v8 + 120))(*v8, *((unsigned int *)*v8 + 4), &v45, 4, &v44, 0, 0, 0);
          if (!v44) {
            goto LABEL_40;
          }
          uint64_t v13 = (__CFDictionary *)HALS_MetaSubDevice::CopyRealDeviceUID(*v8);
          char v60 = &unk_1F1489968;
          CFArrayRef v61 = 0;
          if (theDict)
          {
            value = 0;
            if (CFDictionaryGetValueIfPresent(theDict, @"subdevices", (const void **)&value))
            {
              CFTypeID v14 = value ? CFGetTypeID(value) : 0;
              if (v14 == CFArrayGetTypeID())
              {
                CFArrayRef v15 = (const __CFArray *)value;
                if (value)
                {
                  CFRetain(value);
                  CFArrayRef v16 = v61;
                  CFArrayRef v61 = v15;
                  if (!v16) {
                    goto LABEL_25;
                  }
                }
                else
                {
                  CFArrayRef v16 = v61;
                  CFArrayRef v61 = 0;
                  if (!v16) {
                    goto LABEL_39;
                  }
                }
                CFRelease(v16);
              }
            }
            if (v61)
            {
LABEL_25:
              uint64_t v40 = v8;
              OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)&value);
              CFArrayRef Size = OS::CF::ArrayBase<__CFArray const*>::GetSize(v61);
              if (Size)
              {
                unint64_t v18 = (unint64_t)Size;
                CFIndex v19 = 0;
                unsigned int v20 = 0;
                char v21 = 0;
                do
                {
                  OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Array>((const __CFArray *)v56, (uint64_t)&v60, v19);
                  OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)v54);
                  CFArrayRef v22 = OS::CF::ArrayBase<__CFArray const*>::GetSize(v57);
                  if (v22)
                  {
                    unint64_t v23 = (unint64_t)v22;
                    CFIndex v24 = 0;
                    unsigned int v25 = 1;
                    do
                    {
                      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v52, (uint64_t)v56, v24);
                      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v50, v53, @"uid");
                      long long v48 = &unk_1F1489A20;
                      int v49 = v13;
                      BOOL v26 = OS::CF::operator==(theString1, (const __CFString *)v13);
                      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v48);
                      if (v26)
                      {
                        OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&v48, v53);
                        char v21 = 1;
                        OS::CF::Number::Number<int>(v47, 1);
                        OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(v49, @"drift", (const void *)v47[1]);
                        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v47);
                        OS::CF::MutableArray::AppendValue<OS::CF::MutableDictionary>(v55, v49);
                        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v48);
                      }
                      else
                      {
                        OS::CF::MutableArray::AppendValue<OS::CF::Dictionary>(v59, v53);
                      }
                      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v50);
                      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v52);
                      CFIndex v24 = v25;
                    }
                    while (v23 > v25++);
                  }
                  if (v21) {
                    OS::CF::MutableArray::AppendValue<OS::CF::MutableArray>(v59, v55);
                  }
                  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v54);
                  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v56);
                  CFIndex v19 = ++v20;
                }
                while (v18 > v20);
                int v7 = v38;
                if (v21) {
                  OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>(theDict, @"subdevices", v59);
                }
              }
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&value);
              int v9 = v39;
              uint64_t v8 = v40;
            }
          }
LABEL_39:
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v60);
LABEL_40:
          if (++v8 == v9) {
            goto LABEL_41;
          }
        }
      }
    }
LABEL_42:
    CFDictionaryRef Copy = theDict;
    if (theDict)
    {
      CFDictionaryRef Copy = CFDictionaryCreateCopy(0, theDict);
      int v29 = v32;
      uint64_t v1 = a1;
      uint64_t v2 = v34;
      uint64_t v30 = v35;
    }
    else
    {
      uint64_t v1 = a1;
      uint64_t v2 = v34;
      uint64_t v30 = v35;
      int v29 = v32;
    }
    OS::CF::UntypedObject::operator=(v2 + 1328, (uint64_t)Copy);
    HALS_MetaDeviceDescription::UpdateSubDeviceList(v29, 0);
    HALS_MetaDeviceDescription::UpdateSubTapList((HALS_MetaDeviceDescription *)v29);
    HALS_ObjectMap::ReleaseObject(v30, v31);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v42);
  }
  HALS_MetaDevice::_UpdateStreams((const __CFDictionary **)v2, *(BOOL **)(v1 + 56));
}

void sub_1BAC8AA0C(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, HALS_ObjectMap *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  int v56 = (int)a2;
  HALS_ObjectMap::ReleaseObject(v61, a2);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v62);
  int v58 = __cxa_begin_catch(a1);
  if (v56 == 2) {
    int v59 = v58[2];
  }
  else {
    int v59 = 2003329396;
  }
  *(_DWORD *)(*(void *)(*(void *)(v60 + 32) + 8) + 24) = v59;
  __cxa_end_catch();
}

void ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_116(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(uint64_t ***)(v1 + 1344);
  CFArrayRef v3 = *(uint64_t ***)(v1 + 1352);
  if (v2 != v3)
  {
    BOOL v4 = **(_DWORD **)(a1 + 48) != 0;
    do
    {
      int v5 = *v2;
      uint64_t v6 = v2[1];
      while (v5 != v6)
      {
        int v7 = (unsigned int *)HALS_MetaSubDevice::CopyRealDevice<HALS_Device>(*v5);
        int v9 = (HALS_ObjectMap *)v7;
        if (v7)
        {
          uint64_t v10 = v7[4];
          uint64_t v11 = 0x676C6F626470656CLL;
          int v12 = 0;
          BOOL v13 = v4;
          (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, BOOL *, void, void, void))(*(void *)v7 + 120))(v7, v10, &v11, 4, &v13, 0, 0, 0);
        }
        HALS_ObjectMap::ReleaseObject(v9, v8);
        ++v5;
      }
      v2 += 3;
    }
    while (v2 != v3);
  }
}

void sub_1BAC8ABCC(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  int v24 = (int)a2;
  HALS_ObjectMap::ReleaseObject(v23, a2);
  BOOL v26 = __cxa_begin_catch(a1);
  if (v24 == 2) {
    int v27 = v26[2];
  }
  else {
    int v27 = 2003329396;
  }
  *(_DWORD *)(*(void *)(*(void *)(v22 + 32) + 8) + 24) = v27;
  __cxa_end_catch();
}

void ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_125(uint64_t a1)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 56);
  if (v3 == 2)
  {
    LODWORD(v24[0]) = 3;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v19, (unsigned int *)v24, 1);
    HALS_MetaDeviceDescription::SetSubDSPTypesForClient(v2 + 1320, v19);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v19[1]);
    int v8 = *(unsigned __int8 *)(a1 + 60);
    uint64_t v9 = *(void *)(a1 + 40);
    LODWORD(v24[0]) = 3;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v18, (unsigned int *)v24, 1);
    unsigned int v20 = 2;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v17, &v20, 1);
    char v6 = HALS_Device::_ConfigureDSPTypesForClient(v2, (const BOOL *)(v8 != 0), v9, (uint64_t)v18, v17);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v17[1]);
    int v7 = (void *)v18[1];
  }
  else if (v3 == 1)
  {
    LODWORD(v24[0]) = 2;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v23, (unsigned int *)v24, 1);
    HALS_MetaDeviceDescription::SetSubDSPTypesForClient(v2 + 1320, v23);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v23[1]);
    int v4 = *(unsigned __int8 *)(a1 + 60);
    uint64_t v5 = *(void *)(a1 + 40);
    LODWORD(v24[0]) = 2;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v22, (unsigned int *)v24, 1);
    unsigned int v20 = 3;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v21, &v20, 1);
    char v6 = HALS_Device::_ConfigureDSPTypesForClient(v2, (const BOOL *)(v4 != 0), v5, (uint64_t)v22, v21);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v21[1]);
    int v7 = (void *)v22[1];
  }
  else
  {
    v16[0] = 0;
    v16[1] = 0;
    CFArrayRef v15 = v16;
    HALS_MetaDeviceDescription::SetSubDSPTypesForClient(v2 + 1320, &v15);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v16[0]);
    int v10 = *(unsigned __int8 *)(a1 + 60);
    uint64_t v11 = *(void *)(a1 + 40);
    v14[0] = 0;
    v14[1] = 0;
    BOOL v13 = v14;
    v24[0] = 0x200000003;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v12, (unsigned int *)v24, 2);
    char v6 = HALS_Device::_ConfigureDSPTypesForClient(v2, (const BOOL *)(v10 != 0), v11, (uint64_t)&v13, v12);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v12[1]);
    int v7 = (void *)v14[0];
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v7);
  **(unsigned char **)(a1 + 48) = v6;
}

void sub_1BAC8AE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22)
{
  if (a2)
  {
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a19);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a22);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAC8AE44);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_128(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 60);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (*(_DWORD *)(a1 + 56))
  {
    unsigned int v12 = 6;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v13, &v12, 1);
    v11[0] = 0;
    v11[1] = 0;
    int v10 = v11;
    char v5 = HALS_Device::_ConfigureDSPTypesForClient(v4, (const BOOL *)(v2 != 0), v3, (uint64_t)v13, &v10);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v11[0]);
    char v6 = (void *)v13[1];
  }
  else
  {
    v9[0] = 0;
    v9[1] = 0;
    int v8 = v9;
    unsigned int v12 = 6;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v7, &v12, 1);
    char v5 = HALS_Device::_ConfigureDSPTypesForClient(v4, (const BOOL *)(v2 != 0), v3, (uint64_t)&v8, v7);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v7[1]);
    char v6 = (void *)v9[0];
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v6);
  **(unsigned char **)(a1 + 48) = v5;
}

void sub_1BAC8B010(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void ___ZN15HALS_MetaDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_130(uint64_t a1)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(const __CFDictionary ***)(a1 + 40);
  int v2 = *(CFTypeRef **)(a1 + 48);
  CFArrayRef v4 = (const __CFArray *)*v2;
  if (*v2) {
    CFRetain(*v2);
  }
  CFTypeID v14 = &unk_1F1489968;
  CFArrayRef v15 = v4;
  OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)&v12);
  CFArrayRef Size = OS::CF::ArrayBase<__CFArray const*>::GetSize(v15);
  if (Size)
  {
    CFArrayRef v6 = Size;
    for (CFIndex i = 0; (const __CFArray *)i != v6; ++i)
    {
      OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::String>((const __CFArray *)&v10, (uint64_t)&v14, i);
      if (v11)
      {
        v16[0] = @"uid";
        v16[1] = v11;
        OS::CF::Dictionary::Dictionary(v9, (uint64_t)v16, 1uLL);
        OS::CF::MutableArray::AppendValue<OS::CF::Dictionary>(v13, (const void *)v9[1]);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v9);
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v10);
    }
  }
  OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&v10, v3[167]);
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>(v11, @"taps", v13);
  CFDictionaryRef Copy = v11;
  if (v11) {
    CFDictionaryRef Copy = CFDictionaryCreateCopy(0, v11);
  }
  OS::CF::UntypedObject::operator=((uint64_t)(v3 + 166), (uint64_t)Copy);
  HALS_MetaDeviceDescription::UpdateSubDeviceList(v3 + 165, 0);
  HALS_MetaDeviceDescription::UpdateSubTapList((HALS_MetaDeviceDescription *)(v3 + 165));
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v10);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v12);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v14);
  HALS_MetaDevice::_UpdateStreams(v3, *(BOOL **)(a1 + 56));
}

uint64_t *std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  a1[1] = 0;
  CFArrayRef v4 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (a3)
  {
    uint64_t v6 = 4 * a3;
    do
    {
      std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(a1, v4, *a2, *a2);
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_1BAC8B314(_Unwind_Exception *a1)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*v1);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__137(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__138(uint64_t a1)
{
  int v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN15HALS_MetaDevice25NotifyDSPChangedForClientEbP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v2 + 568))(v2, *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 48));
  if (v3)
  {
    int v4 = v3;
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t, void, uint64_t, void))(*(void *)v2 + 592))(v2, *(unsigned __int8 *)(a1 + 56), v5, *(void *)(a1 + 48));
      int v8 = (HALS_ObjectMap *)v6;
      if (v6 && *(_DWORD *)(v6 + 56) == 2)
      {
        uint64_t v9 = *(void **)(*(void *)(a1 + 32) + 8);
        int v10 = *(_DWORD *)(v6 + 16);
        uint64_t v12 = (char *)v9[6];
        unint64_t v11 = v9[7];
        if ((unint64_t)v12 >= v11)
        {
          CFTypeID v14 = (char *)v9[5];
          uint64_t v15 = (v12 - v14) >> 2;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = v11 - (void)v14;
          if (v17 >> 1 > v16) {
            unint64_t v16 = v17 >> 1;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v18);
            CFTypeID v14 = (char *)v9[5];
            uint64_t v12 = (char *)v9[6];
          }
          else
          {
            int v7 = 0;
          }
          CFIndex v19 = (_DWORD *)(v18 + 4 * v15);
          _DWORD *v19 = v10;
          BOOL v13 = v19 + 1;
          while (v12 != v14)
          {
            int v20 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *--CFIndex v19 = v20;
          }
          void v9[5] = v19;
          v9[6] = v13;
          v9[7] = v18 + 4 * (void)v7;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v12 = v10;
          BOOL v13 = v12 + 4;
        }
        v9[6] = v13;
      }
      HALS_ObjectMap::ReleaseObject(v8, v7);
      uint64_t v5 = (v5 + 1);
    }
    while (v5 != v4);
  }
}

void sub_1BAC8B504(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__132(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 40) = &unk_1F1489968;
  return result;
}

void __Block_byref_object_dispose__133(uint64_t a1)
{
}

uint64_t ___ZN15HALS_MetaDevice12RegisterTapsEv_block_invoke(uint64_t a1)
{
  CFTypeRef v2 = HALS_MetaDeviceDescription::CopyTapList(*(CFDictionaryRef *)(*(void *)(a1 + 40) + 1336));
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8) + 40;

  return OS::CF::UntypedObject::operator=(v3, (uint64_t)v2);
}

uint64_t ___ZN15HALS_MetaDevice14UnregisterTapsEv_block_invoke(uint64_t a1)
{
  CFTypeRef v2 = HALS_MetaDeviceDescription::CopyTapList(*(CFDictionaryRef *)(*(void *)(a1 + 40) + 1336));
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8) + 40;

  return OS::CF::UntypedObject::operator=(v3, (uint64_t)v2);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  CFTypeRef v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    int v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    int v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        int v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

void HALS_MetaDevice::GetPropertyData(HALS_MetaDevice *this, const BOOL *a2, AudioObjectPropertyAddress *a3, const AudioObjectPropertyAddress *a4, unsigned int *a5, int *a6, void *a7, int *a8, HALS_Client *a9)
{
  uint64_t v155 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(HALS_MetaDevice *, const BOOL *, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a9);
  if ((v17 & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  signed int mSelector = a3->mSelector;
  AudioObjectPropertyScope mScope = a3->mScope;
  if ((int)a3->mSelector <= 1735554415)
  {
    if (mSelector > 1684434035)
    {
      if (mSelector <= 1685278560)
      {
        switch(mSelector)
        {
          case 1684434036:
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1970;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceCanBeDefaultDevice", buf, 0x12u);
              }
              unsigned __int8 v86 = __cxa_allocate_exception(0x10uLL);
              *(void *)unsigned __int8 v86 = off_1F148A5D8;
              v86[2] = 561211770;
            }
            v130[0] = MEMORY[0x1E4F143A8];
            v130[1] = 0x40000000;
            v130[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_65;
            void v130[3] = &__block_descriptor_tmp_66;
            v130[4] = this;
            v130[5] = a6;
            BOOL v131 = mScope == 1768845428;
            v130[6] = a9;
            int v44 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v44, (uint64_t)v130);
            break;
          case 1684893796:
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2273;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyMaximumPastData", buf, 0x12u);
              }
              unsigned int v85 = __cxa_allocate_exception(0x10uLL);
              *(void *)unsigned int v85 = off_1F148A5D8;
              v85[2] = 561211770;
            }
            v102[0] = MEMORY[0x1E4F143A8];
            v102[1] = 0x40000000;
            v102[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_101;
            v102[3] = &__block_descriptor_tmp_102;
            v102[4] = this;
            v102[5] = a6;
            long long v43 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v43, (uint64_t)v102);
            break;
          case 1685087596:
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2282;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyEnableListening", buf, 0x12u);
              }
              uint64_t v80 = __cxa_allocate_exception(0x10uLL);
              *(void *)uint64_t v80 = off_1F148A5D8;
              v80[2] = 561211770;
            }
            v101[0] = MEMORY[0x1E4F143A8];
            v101[1] = 0x40000000;
            v101[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_103;
            v101[3] = &__block_descriptor_tmp_104;
            v101[4] = this;
            v101[5] = a6;
            uint64_t v28 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v28, (uint64_t)v101);
            break;
          default:
            goto LABEL_89;
        }
      }
      else
      {
        if (mSelector <= 1685287011)
        {
          if ((mSelector - 1685278561) <= 0x11 && ((1 << (mSelector - 97)) & 0x20003) != 0)
          {
            int v20 = (uint64_t *)*((void *)this + 187);
            if (v20)
            {
              if (mSelector - 1685278561) <= 0x11 && ((0x20001u >> (mSelector - 97)))
              {
                if (mSelector != 1685278561 && mSelector != 1685278578)
                {
                  AMCP::Log::Scope_Registry::get(v17);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
                  int v98 = **(NSObject ***)buf;
                  if (*(void *)&buf[8]) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
                  }
                  if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v99 = pthread_self();
                    mach_port_t v100 = pthread_mach_thread_np(v99);
                    *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
                    *(_DWORD *)&uint8_t buf[4] = v100;
                    *(_WORD *)&uint8_t buf[8] = 2080;
                    *(void *)&buf[10] = "HALS_MetaDevice_HostedDSP.cpp";
                    *(_WORD *)&unsigned char buf[18] = 1024;
                    *(_DWORD *)&buf[20] = 116;
                    LOWORD(v147) = 2080;
                    *(void *)((char *)&v147 + 2) = "HandlesProperty(inAddress, inClient)";
                    _os_log_error_impl(&dword_1BAA78000, v98, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s This property is not processed by HALS_MetaDevice_HostedDSP", buf, 0x22u);
                  }
                  abort();
                }
                uint64_t v21 = *v20;
                *(void *)AudioObjectPropertyAddress buf = MEMORY[0x1E4F143A8];
                *(void *)&uint8_t buf[8] = 0x40000000;
                *(void *)&buf[16] = ___ZNK25HALS_MetaDevice_HostedDSP15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
                *(void *)&long long v147 = &__block_descriptor_tmp_7;
                *((void *)&v147 + 1) = v20;
                unsigned int v148 = a3;
                mach_port_t v149 = a5;
                long long v150 = a6;
                int v153 = (int)a4;
                int v154 = (int)a7;
                float32x4_t v151 = a8;
                mach_port_t v152 = a9;
                uint64_t v22 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v21 + 56))(v21);
                HALB_CommandGate::ExecuteCommand(v22, (uint64_t)buf);
                return;
              }
            }
          }
          goto LABEL_89;
        }
        if (mSelector != 1685287012)
        {
          if (mSelector == 1735354734 || mSelector == 1735356005)
          {
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1960;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceIsRunning", buf, 0x12u);
              }
              int v75 = __cxa_allocate_exception(0x10uLL);
              *(void *)int v75 = off_1F148A5D8;
              v75[2] = 561211770;
            }
            int v29 = *((_DWORD *)this + 4);
            v132[1] = 0;
            v132[0] = 0;
            HALS_System::GetInstance(&theArray, 0, v132);
            *(void *)AudioObjectPropertyAddress buf = 0;
            *(void *)&uint8_t buf[8] = buf;
            *(void *)&buf[16] = 0x4002000000;
            *(void *)&long long v147 = __Block_byref_object_copy__47;
            *((void *)&v147 + 1) = __Block_byref_object_dispose__48;
            unsigned int v148 = 0;
            mach_port_t v149 = 0;
            long long v150 = 0;
            CFMutableDictionaryRef Mutable = (__CFArray *)MEMORY[0x1E4F143A8];
            uint64_t v141 = 0x40000000;
            float32x4_t v142 = ___ZN11HALS_System37IsUnderlyingIOContextRunningForDeviceEj_block_invoke;
            mach_port_t v143 = &unk_1E6233038;
            uint64_t v144 = buf;
            CFArrayRef v145 = theArray;
            uint64_t v30 = (HALB_Mutex *)(*(uint64_t (**)(CFArrayRef))(*(void *)theArray + 56))(theArray);
            HALB_CommandGate::ExecuteCommand(v30, (uint64_t)&Mutable);
            uint64_t v31 = *(void *)(*(void *)&buf[8] + 40);
            uint64_t v32 = *(void *)(*(void *)&buf[8] + 48);
            while (1)
            {
              if (v31 == v32)
              {
                int v39 = 0;
                goto LABEL_95;
              }
              if (*(void *)v31
                && (*(unsigned int (**)(void))(**(void **)(*(void *)v31 + 96) + 728))(*(void *)(*(void *)v31 + 96)) == v29
                && ((*(uint64_t (**)(void))(**(void **)(*(void *)v31 + 96) + 152))(*(void *)(*(void *)v31 + 96)) & 1) != 0)
              {
                break;
              }
              v31 += 8;
            }
            int v39 = 1;
LABEL_95:
            _Block_object_dispose(buf, 8);
            unsigned int v118 = &v148;
            std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
            *a6 = v39;
            if (v134) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v134);
            }
            goto LABEL_172;
          }
LABEL_89:
          HALS_Device::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
          return;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2255;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertySupportsPastData", buf, 0x12u);
          }
          mach_port_t v96 = __cxa_allocate_exception(0x10uLL);
          *(void *)mach_port_t v96 = off_1F148A5D8;
          v96[2] = 561211770;
        }
        v104[0] = MEMORY[0x1E4F143A8];
        v104[1] = 0x40000000;
        v104[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_97;
        v104[3] = &__block_descriptor_tmp_98_5357;
        v104[4] = this;
        void v104[5] = a6;
        int v66 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v66, (uint64_t)v104);
      }
LABEL_172:
      unsigned int v61 = 4;
      goto LABEL_173;
    }
    if (mSelector <= 1634755427)
    {
      if (mSelector > 1634429293)
      {
        if (mSelector == 1634429294)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1950;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyRelatedDevices", buf, 0x12u);
            }
            int v93 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v93 = off_1F148A5D8;
            v93[2] = 561211770;
          }
          v135[0] = MEMORY[0x1E4F143A8];
          v135[1] = 0x40000000;
          v135[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_63;
          v135[3] = &__block_descriptor_tmp_64;
          v135[4] = this;
          v135[5] = a6;
          uint64_t v62 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v62, (uint64_t)v135);
          goto LABEL_172;
        }
        if (mSelector != 1634562932) {
          goto LABEL_89;
        }
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2162;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioAggregateDevicePropertyMainSubDevice", buf, 0x12u);
          }
          int v82 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v82 = off_1F148A5D8;
          v82[2] = 561211770;
        }
        v108[0] = MEMORY[0x1E4F143A8];
        v108[1] = 0x40000000;
        v108[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_88;
        v108[3] = &__block_descriptor_tmp_89_5352;
        v108[4] = this;
        v108[5] = a6;
        char v35 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v35, (uint64_t)v108);
      }
      else
      {
        if (mSelector != 1633906541)
        {
          if (mSelector != 1634169456) {
            goto LABEL_89;
          }
          *(void *)AudioObjectPropertyAddress buf = 0;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&buf[16] = 0x2000000000;
          LODWORD(v147) = 0;
          v112[0] = MEMORY[0x1E4F143A8];
          v112[1] = 0x40000000;
          v112[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_83;
          v112[3] = &unk_1E6231F30;
          v112[5] = this;
          v112[4] = buf;
          int v113 = (int)a4;
          v112[6] = a6;
          int v24 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v24, (uint64_t)v112);
          goto LABEL_99;
        }
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2153;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioAggregateDevicePropertyComposition", buf, 0x12u);
          }
          unint64_t v89 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v89 = off_1F148A5D8;
          v89[2] = 561211770;
        }
        v109[0] = MEMORY[0x1E4F143A8];
        v109[1] = 0x40000000;
        v109[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_86;
        v109[3] = &__block_descriptor_tmp_87;
        v109[4] = this;
        v109[5] = a6;
        int v49 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v49, (uint64_t)v109);
      }
      goto LABEL_162;
    }
    if (mSelector <= 1668049763)
    {
      if (mSelector != 1634755428)
      {
        if (mSelector != 1635017072) {
          goto LABEL_89;
        }
        *(void *)AudioObjectPropertyAddress buf = 0;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&buf[16] = 0x2000000000;
        LODWORD(v147) = 0;
        v110[0] = MEMORY[0x1E4F143A8];
        v110[1] = 0x40000000;
        v110[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3;
        v110[3] = &unk_1E6231F58;
        v110[4] = buf;
        v110[5] = this;
        int v111 = (int)a4;
        v110[6] = a6;
        BOOL v26 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v26, (uint64_t)v110);
LABEL_99:
        int v41 = 4 * *(_DWORD *)(*(void *)&buf[8] + 24);
        goto LABEL_100;
      }
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2171;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioAggregateDevicePropertyClockDevice", buf, 0x12u);
        }
        CFNumberRef v91 = __cxa_allocate_exception(0x10uLL);
        *(void *)CFNumberRef v91 = off_1F148A5D8;
        v91[2] = 561211770;
      }
      v107[0] = MEMORY[0x1E4F143A8];
      v107[1] = 0x40000000;
      v107[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_90;
      v107[3] = &__block_descriptor_tmp_92;
      v107[4] = this;
      v107[5] = a6;
      uint64_t v60 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v60, (uint64_t)v107);
      goto LABEL_162;
    }
    if (mSelector != 1668049764)
    {
      if (mSelector != 1684107364) {
        goto LABEL_89;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2264;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyAvailablePastData", buf, 0x12u);
        }
        int v84 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v84 = off_1F148A5D8;
        v84[2] = 561211770;
      }
      v103[0] = MEMORY[0x1E4F143A8];
      v103[1] = 0x40000000;
      v103[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_99;
      v103[3] = &__block_descriptor_tmp_100_5359;
      v103[4] = this;
      v103[5] = a6;
      BOOL v37 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v37, (uint64_t)v103);
      goto LABEL_172;
    }
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2233;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyClockDomain", buf, 0x12u);
      }
      float32x4_t v94 = __cxa_allocate_exception(0x10uLL);
      *(void *)float32x4_t v94 = off_1F148A5D8;
      v94[2] = 561211770;
    }
    *(void *)AudioObjectPropertyAddress buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000;
    *(void *)&long long v147 = 0;
    v105[0] = MEMORY[0x1E4F143A8];
    v105[1] = 0x40000000;
    v105[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_95;
    void v105[3] = &unk_1E6232008;
    v105[4] = buf;
    v105[5] = this;
    uint64_t v63 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v63, (uint64_t)v105);
    uint64_t v64 = *(void *)(*(void *)&buf[8] + 24);
    if (v64)
    {
      (*(void (**)(uint64_t, void, AudioObjectPropertyAddress *, const AudioObjectPropertyAddress *, unsigned int *, int *, void *, int *, HALS_Client *))(*(void *)v64 + 112))(v64, 0, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_101;
    }
    *a6 = 0;
    int v41 = 4;
LABEL_100:
    *a5 = v41;
LABEL_101:
    _Block_object_dispose(buf, 8);
    return;
  }
  if (mSelector <= 1853059618)
  {
    if (mSelector > 1819107690)
    {
      if (mSelector > 1819569762)
      {
        if (mSelector == 1819569763)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1988;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyLatency", buf, 0x12u);
            }
            mach_port_t v95 = __cxa_allocate_exception(0x10uLL);
            *(void *)mach_port_t v95 = off_1F148A5D8;
            v95[2] = 561211770;
          }
          v126[0] = MEMORY[0x1E4F143A8];
          v126[1] = 0x40000000;
          v126[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_69;
          v126[3] = &__block_descriptor_tmp_70;
          v126[4] = this;
          v126[5] = a6;
          BOOL v127 = mScope == 1768845428;
          void v126[6] = a9;
          BOOL v65 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v65, (uint64_t)v126);
          goto LABEL_172;
        }
        int v27 = 1851878764;
      }
      else
      {
        if (mSelector == 1819107691)
        {
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1932;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioObjectPropertyManufacturer", buf, 0x12u);
            }
            CFTypeID v92 = __cxa_allocate_exception(0x10uLL);
            *(void *)CFTypeID v92 = off_1F148A5D8;
            v92[2] = 561211770;
          }
          *(void *)a6 = @"Apple Inc.";
          goto LABEL_162;
        }
        int v27 = 1819173229;
      }
      if (mSelector != v27) {
        goto LABEL_89;
      }
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1923;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioObjectPropertyName", buf, 0x12u);
        }
        uint64_t v76 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v76 = off_1F148A5D8;
        v76[2] = 561211770;
      }
      v136[0] = MEMORY[0x1E4F143A8];
      v136[1] = 0x40000000;
      v136[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_58;
      v136[3] = &__block_descriptor_tmp_59_5333;
      uint64_t v136[4] = this;
      v136[5] = a6;
      int v38 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v38, (uint64_t)v136);
LABEL_162:
      unsigned int v61 = 8;
LABEL_173:
      *a5 = v61;
      return;
    }
    if (mSelector > 1751737453)
    {
      if (mSelector != 1751737454)
      {
        if (mSelector != 1769302372) {
          goto LABEL_89;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2291;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyUseCaseID", buf, 0x12u);
          }
          int v83 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v83 = off_1F148A5D8;
          v83[2] = 561211770;
        }
        uint64_t v36 = (*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 464))(this);
        if ((v36 & 0xFF00000000) != 0) {
          int v23 = v36;
        }
        else {
          int v23 = 0;
        }
LABEL_79:
        *a6 = v23;
        goto LABEL_172;
      }
    }
    else
    {
      if (mSelector == 1735554416)
      {
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2055;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioAggregateDevicePropertyFullSubDeviceList", buf, 0x12u);
          }
          mach_port_t v90 = __cxa_allocate_exception(0x10uLL);
          *(void *)mach_port_t v90 = off_1F148A5D8;
          v90[2] = 561211770;
        }
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
        LOWORD(v141) = 257;
        *(void *)AudioObjectPropertyAddress buf = 0;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&buf[16] = 0x3802000000;
        *(void *)&long long v147 = __Block_byref_object_copy__76;
        *((void *)&v147 + 1) = __Block_byref_object_dispose__77;
        unsigned int v148 = 0;
        LOWORD(v149) = 1;
        v120[0] = MEMORY[0x1E4F143A8];
        v120[1] = 0x40000000;
        v120[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_78;
        uint64_t v120[3] = &unk_1E6231F08;
        v120[5] = this;
        v120[4] = buf;
        uint64_t v50 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v50, (uint64_t)v120);
        if (*(void *)(*(void *)&buf[8] + 40))
        {
          CFArrayRef theArray = 0;
          LOWORD(v134) = 1;
          CACFDictionary::GetCACFArray((const __CFDictionary **)(*(void *)&buf[8] + 40), @"subdevices", (CACFArray *)&theArray);
          if (theArray)
          {
            int Count = CFArrayGetCount(theArray);
            if (Count)
            {
              for (unsigned int i = 0; i != Count; ++i)
              {
                unsigned int v118 = 0;
                __int16 v119 = 1;
                CACFArray::GetCACFDictionary(&theArray, i, (CACFDictionary *)&v118);
                if (v118)
                {
                  value = 0;
                  LOBYTE(v117) = 1;
                  CACFDictionary::GetCACFString((const __CFDictionary **)&v118, @"uid", (CFTypeRef *)&value);
                  if (value && Mutable && BYTE1(v141)) {
                    CFArrayAppendValue(Mutable, value);
                  }
                  CACFString::~CACFString((CACFString *)&value);
                }
                else
                {
                  value = 0;
                  __int16 v117 = 1;
                  CFTypeRef cf = 0;
                  unsigned int CFType = CACFArray::GetCFType(&theArray, i, &cf);
                  CFTypeRef v54 = cf;
                  if (cf) {
                    unsigned int v55 = CFType;
                  }
                  else {
                    unsigned int v55 = 0;
                  }
                  if (v55 == 1)
                  {
                    CFTypeID v56 = CFGetTypeID(cf);
                    if (v56 == CFArrayGetTypeID()) {
                      CACFDictionary::operator=((uint64_t)&value, v54);
                    }
                  }
                  if (value)
                  {
                    int v57 = CFArrayGetCount((CFArrayRef)value);
                    if (v57)
                    {
                      for (unsigned int j = 0; j != v57; ++j)
                      {
                        CACFArray::GetCACFDictionary((CFArrayRef *)&value, j, (CACFDictionary *)&v118);
                        if (v118)
                        {
                          CFTypeRef cf = 0;
                          char v115 = 1;
                          CACFDictionary::GetCACFString((const __CFDictionary **)&v118, @"uid", &cf);
                          if (cf && Mutable && BYTE1(v141)) {
                            CFArrayAppendValue(Mutable, cf);
                          }
                          CACFString::~CACFString((CACFString *)&cf);
                        }
                      }
                    }
                  }
                  CACFArray::~CACFArray((CACFArray *)&value);
                }
                CACFDictionary::~CACFDictionary((CACFDictionary *)&v118);
              }
            }
          }
          CACFArray::~CACFArray((CACFArray *)&theArray);
        }
        if (Mutable)
        {
          CFRetain(Mutable);
          goto LABEL_157;
        }
LABEL_179:
        int v59 = 0;
        goto LABEL_180;
      }
      if (mSelector != 1751412337) {
        goto LABEL_89;
      }
    }
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2046;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyIsHidden", buf, 0x12u);
      }
      uint64_t v77 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v77 = off_1F148A5D8;
      v77[2] = 561211770;
    }
    *a6 = HALS_MetaDeviceDescription::IsHidden((const __CFDictionary **)this + 165);
    goto LABEL_172;
  }
  if (mSelector <= 1935763059)
  {
    if (mSelector > 1870098019)
    {
      if (mSelector != 1870098020)
      {
        if (mSelector != 1919512167) {
          goto LABEL_89;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1997;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyZeroTimeStampPeriod", buf, 0x12u);
          }
          uint64_t v33 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v33 = off_1F148A5D8;
          uint64_t v33[2] = 561211770;
        }
        goto LABEL_172;
      }
      *(void *)AudioObjectPropertyAddress buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&buf[16] = 0x2000000000;
      LODWORD(v147) = 0;
      v137[0] = MEMORY[0x1E4F143A8];
      v137[1] = 0x40000000;
      v137[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
      _OWORD v137[3] = &unk_1E6231DD8;
      v137[5] = this;
      v137[4] = buf;
      unsigned int v138 = a4 >> 2;
      unsigned int v139 = a7 >> 2;
      void v137[6] = a8;
      v137[7] = a6;
      uint64_t v42 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v42, (uint64_t)v137);
      goto LABEL_99;
    }
    if (mSelector != 1853059619)
    {
      if (mSelector != 1853059700) {
        goto LABEL_89;
      }
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2028;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyNominalSampleRate", buf, 0x12u);
        }
        uint64_t v79 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v79 = off_1F148A5D8;
        v79[2] = 561211770;
      }
      v123[0] = MEMORY[0x1E4F143A8];
      v123[1] = 0x40000000;
      v123[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_73;
      uint64_t v123[3] = &__block_descriptor_tmp_74;
      v123[4] = this;
      v123[5] = a6;
      unsigned int v25 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v25, (uint64_t)v123);
      goto LABEL_162;
    }
    *(void *)AudioObjectPropertyAddress buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000;
    LODWORD(v147) = a4 >> 4;
    v121[0] = MEMORY[0x1E4F143A8];
    v121[1] = 0x40000000;
    v121[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2;
    uint64_t v121[3] = &unk_1E6231EE0;
    int v122 = (int)a4;
    v121[5] = this;
    v121[4] = buf;
    void v121[6] = a6;
    uint64_t v40 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v40, (uint64_t)v121);
    int v41 = 16 * *(_DWORD *)(*(void *)&buf[8] + 24);
    goto LABEL_100;
  }
  if (mSelector <= 1936876643)
  {
    if (mSelector == 1935763060)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2006;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertySafetyOffset", buf, 0x12u);
        }
        char v87 = __cxa_allocate_exception(0x10uLL);
        *(void *)char v87 = off_1F148A5D8;
        v87[2] = 561211770;
      }
      v124[0] = MEMORY[0x1E4F143A8];
      v124[1] = 0x40000000;
      v124[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_71;
      v124[3] = &__block_descriptor_tmp_72;
      v124[4] = this;
      v124[5] = a6;
      BOOL v125 = mScope == 1768845428;
      uint64_t v45 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v45, (uint64_t)v124);
    }
    else
    {
      if (mSelector != 1936092276) {
        goto LABEL_89;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1979;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceCanBeDefaultSystemDevice", buf, 0x12u);
        }
        uint64_t v81 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v81 = off_1F148A5D8;
        v81[2] = 561211770;
      }
      v128[0] = MEMORY[0x1E4F143A8];
      v128[1] = 0x40000000;
      v128[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_67;
      v128[3] = &__block_descriptor_tmp_68;
      v128[4] = this;
      v128[5] = a6;
      BOOL v129 = mScope == 1768845428;
      v128[6] = a9;
      uint64_t v34 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v34, (uint64_t)v128);
    }
    goto LABEL_172;
  }
  if (mSelector != 1936876644)
  {
    if (mSelector != 1952542755)
    {
      if (mSelector != 1953653102) {
        goto LABEL_89;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1941;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyTransportType", buf, 0x12u);
        }
        uint64_t v78 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v78 = off_1F148A5D8;
        v78[2] = 561211770;
      }
      int v23 = 1735554416;
      goto LABEL_79;
    }
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2193;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioAggregateDevicePropertyFullSubDeviceList", buf, 0x12u);
      }
      int v88 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v88 = off_1F148A5D8;
      v88[2] = 561211770;
    }
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
    LOWORD(v141) = 257;
    *(void *)AudioObjectPropertyAddress buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x3802000000;
    *(void *)&long long v147 = __Block_byref_object_copy__76;
    *((void *)&v147 + 1) = __Block_byref_object_dispose__77;
    unsigned int v148 = 0;
    LOWORD(v149) = 1;
    v106[0] = MEMORY[0x1E4F143A8];
    v106[1] = 0x40000000;
    v106[2] = ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_93;
    v106[3] = &unk_1E6231FE0;
    v106[4] = buf;
    v106[5] = this;
    int v46 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v46, (uint64_t)v106);
    if (*(void *)(*(void *)&buf[8] + 40))
    {
      CFArrayRef theArray = 0;
      LOWORD(v134) = 1;
      CACFDictionary::GetCACFArray((const __CFDictionary **)(*(void *)&buf[8] + 40), @"taps", (CACFArray *)&theArray);
      if (theArray)
      {
        int v47 = CFArrayGetCount(theArray);
        if (v47)
        {
          for (unsigned int k = 0; k != v47; ++k)
          {
            unsigned int v118 = 0;
            __int16 v119 = 1;
            CACFArray::GetCACFDictionary(&theArray, k, (CACFDictionary *)&v118);
            if (v118)
            {
              value = 0;
              LOBYTE(v117) = 1;
              CACFDictionary::GetCACFString((const __CFDictionary **)&v118, @"uid", (CFTypeRef *)&value);
              if (value && Mutable && BYTE1(v141)) {
                CFArrayAppendValue(Mutable, value);
              }
              CACFString::~CACFString((CACFString *)&value);
            }
            CACFDictionary::~CACFDictionary((CACFDictionary *)&v118);
          }
        }
      }
      CACFArray::~CACFArray((CACFArray *)&theArray);
    }
    if (Mutable)
    {
      CFRetain(Mutable);
LABEL_157:
      int v59 = Mutable;
LABEL_180:
      *(void *)a6 = v59;
      *a5 = 8;
      _Block_object_dispose(buf, 8);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v148);
      CACFArray::~CACFArray((CACFArray *)&Mutable);
      return;
    }
    goto LABEL_179;
  }
  unsigned int TotalNumberChannelsForClient = HALS_Device::GetTotalNumberChannelsForClient(this, mScope == 1768845428, a9);
  int v68 = caulk::numeric::exceptional_mul<unsigned int>(TotalNumberChannelsForClient);
  unsigned int v69 = caulk::numeric::exceptional_add<unsigned int>(v68);
  if (v69 > a4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_MetaDevice.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2016;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDefaultChannelLayout", buf, 0x12u);
    }
    int v97 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v97 = off_1F148A5D8;
    v97[2] = 561211770;
  }
  unsigned int v70 = v69;
  unsigned int v71 = (*(uint64_t (**)(HALS_MetaDevice *, BOOL, HALS_Client *))(*(void *)this + 600))(this, mScope == 1768845428, a9);
  *(void *)a6 = 0;
  a6[2] = v71;
  if (v71)
  {
    uint64_t v72 = v71;
    uint64_t v73 = a6 + 4;
    do
    {
      *((_DWORD *)v73 - 1) = -1;
      *uint64_t v73 = 0;
      v73[1] = 0;
      uint64_t v73 = (void *)((char *)v73 + 20);
      --v72;
    }
    while (v72);
  }
  *a5 = v70;
}

void sub_1BAC8E10C(_Unwind_Exception *a1)
{
  CACFArray::~CACFArray((CACFArray *)&STACK[0x418]);
  _Block_object_dispose((const void *)(v2 - 192), 8);
  CACFDictionary::~CACFDictionary(v1);
  CACFArray::~CACFArray((CACFArray *)(v2 - 240));
  _Unwind_Resume(a1);
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, HALS_Object *a4)
{
  unint64_t v5 = *(HALS_IODevice **)(a1 + 40);
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) < *(_DWORD *)(a1 + 64))
  {
    char v6 = 0;
    char v7 = 1;
    do
    {
      unsigned int NumberStreams = HALS_IODevice::GetNumberStreams(v5, v6 & 1);
      unsigned int v9 = NumberStreams;
      unsigned int v10 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      unsigned int v11 = *(_DWORD *)(a1 + 64);
      if (v10 < v11 && NumberStreams != 0)
      {
        unsigned int v13 = 1;
        do
        {
          uint64_t v16 = (*(uint64_t (**)(HALS_IODevice *, void, void))(*(void *)v5 + 392))(v5, v6 & 1, v13 - 1);
          if (v16
            && HALS_Object::IsObjectClassInClassIDList((HALS_Object *)*(unsigned int *)(a1 + 68), *(void *)(a1 + 48), (const unsigned int *)v16, v15))
          {
            *(_DWORD *)(*(void *)(a1 + 56)
                      + 4 * (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))++) = *(_DWORD *)(v16 + 16);
          }
          HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v16, v14);
          unsigned int v10 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
          unsigned int v11 = *(_DWORD *)(a1 + 64);
        }
        while (v10 < v11 && v13++ < v9);
      }
      char v18 = (v10 < v11) & v7;
      char v6 = 1;
      char v7 = 0;
    }
    while ((v18 & 1) != 0);
  }
  CFIndex v19 = (uint64_t **)*((void *)v5 + 168);
  int v20 = (HALS_MetaDeviceDescription *)*((void *)v5 + 169);
  if (v19 != (uint64_t **)v20)
  {
    int v21 = 0;
    uint64_t v22 = (HALS_MetaDeviceDescription *)*((void *)v5 + 168);
    do
    {
      uint64_t v24 = *(void *)v22;
      uint64_t v23 = *((void *)v22 + 1);
      uint64_t v22 = (HALS_MetaDeviceDescription *)((char *)v22 + 24);
      v21 += (unint64_t)(v23 - v24) >> 3;
    }
    while (v22 != v20);
    if (v21)
    {
      for (int i = 0; i != v21; ++i)
      {
        uint64_t SubDeviceByIndex = HALS_MetaDeviceDescription::GetSubDeviceByIndex(v19, v20, i);
        if (HALS_Object::IsObjectClassInClassIDList((HALS_Object *)*(unsigned int *)(a1 + 68), *(void *)(a1 + 48), (const unsigned int *)SubDeviceByIndex, v27))*(_DWORD *)(*(void *)(a1 + 56)+ 4 * (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))++) = *(_DWORD *)(SubDeviceByIndex + 16); {
      }
        }
    }
  }
  uint64_t v28 = (const unsigned int **)*((void *)v5 + 175);
  int v29 = (const unsigned int **)*((void *)v5 + 174);
  unint64_t v30 = (unint64_t)((char *)v28 - (char *)v29) >> 3;
  if (!v30) {
    return;
  }
  int v31 = 0;
  do
  {
    if (v29 == v28) {
      goto LABEL_37;
    }
    int v32 = 0;
    uint64_t v33 = v29;
    while (1)
    {
      if (v32 != v31)
      {
        ++v32;
        goto LABEL_33;
      }
      uint64_t v34 = *v33;
      int v32 = v31;
      if (*v33) {
        break;
      }
LABEL_33:
      if (++v33 == v28) {
        goto LABEL_37;
      }
    }
    if (HALS_Object::IsObjectClassInClassIDList((HALS_Object *)*(unsigned int *)(a1 + 68), *(void *)(a1 + 48), *v33, a4))*(_DWORD *)(*(void *)(a1 + 56)+ 4 * (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))++) = v34[4]; {
LABEL_37:
    }
    ++v31;
  }
  while (v31 != v30);
}

void sub_1BAC8E484(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

CFTypeRef ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_58(uint64_t a1)
{
  CFTypeRef result = HALS_MetaDeviceDescription::CopyDeviceName(*(CFDictionaryRef *)(*(void *)(a1 + 32) + 1336));
  **(void **)(a1 + 40) = result;
  return result;
}

uint64_t ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_63(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(_DWORD *)(*(void *)(result + 32) + 16);
  return result;
}

uint64_t ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_65(uint64_t a1)
{
  uint64_t v2 = *(const __CFDictionary ***)(a1 + 32);
  uint64_t result = (*((uint64_t (**)(const __CFDictionary **, void, void))*v2 + 71))(v2, *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 48));
  if (result) {
    uint64_t result = HALS_MetaDeviceDescription::CanBeDefaultDevice(v2 + 165, *(unsigned __int8 *)(a1 + 56), 0);
  }
  **(_DWORD **)(a1 + 40) = result;
  return result;
}

void sub_1BAC8E574(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_67(uint64_t a1)
{
  uint64_t v2 = *(const __CFDictionary ***)(a1 + 32);
  uint64_t result = (*((uint64_t (**)(const __CFDictionary **, void, void))*v2 + 71))(v2, *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 48));
  if (result) {
    uint64_t result = HALS_MetaDeviceDescription::CanBeDefaultDevice(v2 + 165, *(unsigned __int8 *)(a1 + 56), 1);
  }
  **(_DWORD **)(a1 + 40) = result;
  return result;
}

void sub_1BAC8E60C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

unint64_t ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_69(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 48);
  unint64_t v5 = *(HALS_MetaSubDevice **)(v2 + 1424);
  if (v5 || (unint64_t v5 = *(HALS_MetaSubDevice **)(v2 + 1416)) != 0)
  {
    uint64_t v6 = HALS_MetaSubDevice::CopyRealIODevice(v5);
    uint64_t v8 = (HALS_ObjectMap *)v6;
    if (v6) {
      int v9 = (*(uint64_t (**)(uint64_t, BOOL))(*(void *)v6 + 304))(v6, v3 != 0);
    }
    else {
      int v9 = 0;
    }
    HALS_ObjectMap::ReleaseObject(v8, v7);
  }
  else
  {
    int v9 = 0;
  }
  unint64_t result = HALS_Device::_GetDSPLatencyForClient(v2, v3 != 0, v4);
  int v11 = 0;
  if (result > 0x100000000) {
    int v11 = result;
  }
  **(_DWORD **)(a1 + 40) = v9 + v11;
  return result;
}

void sub_1BAC8E704(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  HALS_ObjectMap::ReleaseObject(v16, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_71(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v4 = (HALS_MetaSubDevice *)v2[178];
  if (v4 || (uint64_t v4 = (HALS_MetaSubDevice *)v2[177]) != 0)
  {
    uint64_t v5 = HALS_MetaSubDevice::CopyRealIODevice(v4);
    char v7 = (HALS_ObjectMap *)v5;
    if (v5) {
      int v8 = (*(uint64_t (**)(uint64_t, BOOL))(*(void *)v5 + 312))(v5, v3 != 0);
    }
    else {
      int v8 = 0;
    }
  }
  else
  {
    uint64_t v9 = v2[175];
    uint64_t v10 = v2[174];
    if (((v9 - v10) & 0x7FFFFFFF8) == 0 || v3 == 0)
    {
      int v8 = 0;
      goto LABEL_7;
    }
    uint64_t v12 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(*(void *)v10 + 72));
    char v7 = (HALS_ObjectMap *)v12;
    if (v12)
    {
      uint64_t v14 = *(void *)(v12 + 248);
      unsigned int v13 = *(std::__shared_weak_count **)(v12 + 256);
      if (v13)
      {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        int v8 = *(_DWORD *)(v14 + 68);
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      else
      {
        int v8 = *(_DWORD *)(v14 + 68);
      }
    }
    else
    {
      int v8 = 0;
    }
  }
  HALS_ObjectMap::ReleaseObject(v7, v6);
LABEL_7:
  **(_DWORD **)(a1 + 40) = v8;
}

void sub_1BAC8E860(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  HALS_ObjectMap::ReleaseObject(v14, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_73(uint64_t a1)
{
  **(double **)(a1 + 40) = HALS_MetaDeviceDescription::GetNominalSampleRate((HALS_MetaDeviceDescription *)(*(void *)(a1 + 32) + 1320));
}

void sub_1BAC8E8D8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(_DWORD *)(a1 + 56) >> 4;
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  *(_DWORD *)(v3 + 24) = 0;
  uint64_t v4 = (_DWORD *)(v3 + 24);
  uint64_t v5 = *(_OWORD **)(a1 + 48);
  uint64_t v6 = *(HALS_MetaSubDevice **)(v2 + 1424);
  if (v6 || (uint64_t v6 = *(HALS_MetaSubDevice **)(v2 + 1416)) != 0)
  {
    uint64_t v7 = HALS_MetaSubDevice::CopyRealIODevice(v6);
    uint64_t v9 = (HALS_ObjectMap *)v7;
    if (v7) {
      (*(void (**)(uint64_t, uint64_t, _DWORD *, _OWORD *))(*(void *)v7 + 288))(v7, v1, v4, v5);
    }
    HALS_ObjectMap::ReleaseObject(v9, v8);
  }
  else if (((*(void *)(v2 + 1400) - *(void *)(v2 + 1392)) & 0x7FFFFFFF8) != 0)
  {
    get_tap_sample_rate_range((uint64_t)v17);
    uint64_t v10 = (long long *)v17[0];
    uint64_t v11 = (v17[1] - v17[0]) >> 4;
    if (v11 >= v1) {
      LODWORD(v11) = v1;
    }
    *uint64_t v4 = v11;
    uint64_t v12 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(**(void **)(v2 + 1392) + 72));
    if (v12)
    {
      uint64_t v14 = *v4;
      if (v14)
      {
        uint64_t v15 = v10;
        do
        {
          long long v16 = *v15++;
          *v5++ = v16;
          --v14;
        }
        while (v14);
      }
    }
    HALS_ObjectMap::ReleaseObject(v12, v13);
    if (v10) {
      operator delete(v10);
    }
  }
}

void sub_1BAC8EA20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (v20) {
    operator delete(v20);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

CFTypeRef __Block_byref_object_copy__76(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  int v4 = *(unsigned __int8 *)(a2 + 48);
  *(unsigned char *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  if (v4) {
    BOOL v5 = result == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    return CFRetain(result);
  }
  return result;
}

void __Block_byref_object_dispose__77(uint64_t a1)
{
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_78(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  CFDictionaryRef v2 = HALS_MetaDeviceDescription::CopyRawDescription((CFDictionaryRef *)(*(void *)(a1 + 40) + 1320));
  CACFDictionary::AssignWithoutRetain((const __CFDictionary **)(v1 + 40), v2);
}

void sub_1BAC8EAF0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_83(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(uint64_t **)(v2 + 1344);
  int v4 = *(uint64_t **)(v2 + 1352);
  if (v3 == v4)
  {
    unsigned int v5 = 0;
  }
  else
  {
    unsigned int v5 = 0;
    do
    {
      uint64_t v7 = *v3;
      uint64_t v6 = v3[1];
      v3 += 3;
      v5 += (unint64_t)(v6 - v7) >> 3;
    }
    while (v3 != v4);
  }
  if (v5 >= *(_DWORD *)(a1 + 56) >> 2) {
    int v8 = *(_DWORD *)(a1 + 56) >> 2;
  }
  else {
    int v8 = v5;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v8;
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t SubDeviceByIndex = (HALS_MetaSubDevice *)HALS_MetaDeviceDescription::GetSubDeviceByIndex(*(uint64_t ***)(v2 + 1344), *(HALS_MetaDeviceDescription **)(v2 + 1352), v9);
      uint64_t v11 = (HALS_ObjectMap *)HALS_MetaSubDevice::CopyRealIODevice(SubDeviceByIndex);
      *(_DWORD *)(*(void *)(a1 + 48) + 4 * v9) = *((_DWORD *)v11 + 4);
      HALS_ObjectMap::ReleaseObject(v11, v12);
      ++v9;
    }
    while (v9 < *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  }
}

void sub_1BAC8EBE0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = (*(void *)(v1 + 1400) - *(void *)(v1 + 1392)) >> 3;
  unsigned int v3 = *(_DWORD *)(a1 + 56);
  BOOL v4 = v2 >= v3 >> 2;
  unsigned int v5 = v3 >> 2;
  if (v4) {
    LODWORD(v2) = v5;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v2;
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    for (unint64_t i = 0; i < *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24); ++i)
    {
      int v8 = 0;
      uint64_t v9 = *(void *)(v1 + 1392);
      while (v8 != i)
      {
        ++v8;
LABEL_11:
        v9 += 8;
      }
      int v8 = i;
      if (!*(void *)v9) {
        goto LABEL_11;
      }
      uint64_t v10 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(*(void *)v9 + 72));
      *(_DWORD *)(*(void *)(a1 + 48) + 4 * i) = *((_DWORD *)v10 + 4);
      HALS_ObjectMap::ReleaseObject(v10, v11);
    }
  }
}

void sub_1BAC8ECCC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

CFDictionaryRef ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_86(uint64_t a1)
{
  CFDictionaryRef result = HALS_MetaDeviceDescription::CopyRawDescription((CFDictionaryRef *)(*(void *)(a1 + 32) + 1320));
  **(void **)(a1 + 40) = result;
  return result;
}

void sub_1BAC8ED24(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

HALS_MetaSubDevice *___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_88(uint64_t a1)
{
  CFDictionaryRef result = *(HALS_MetaSubDevice **)(*(void *)(a1 + 32) + 1416);
  if (result) {
    CFDictionaryRef result = (HALS_MetaSubDevice *)HALS_MetaSubDevice::CopyRealDeviceUID(result);
  }
  **(void **)(a1 + 40) = result;
  return result;
}

void sub_1BAC8ED7C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_90(uint64_t a1)
{
  uint64_t v2 = *(HALS_MetaSubDevice **)(*(void *)(a1 + 32) + 1424);
  if (v2 && (uint64_t v3 = HALS_MetaSubDevice::CopyRealDeviceUID(v2)) != 0)
  {
    **(void **)(a1 + 40) = v3;
  }
  else
  {
    CFStringRef v4 = CFStringCreateWithCString(0, "", 0x600u);
    char v5 = 0;
    **(void **)(a1 + 40) = v4;
    CACFString::~CACFString((CACFString *)&v4);
  }
}

void sub_1BAC8EE10(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_93(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  CFDictionaryRef v2 = HALS_MetaDeviceDescription::CopyRawDescription((CFDictionaryRef *)(*(void *)(a1 + 40) + 1320));
  CACFDictionary::AssignWithoutRetain((const __CFDictionary **)(v1 + 40), v2);
}

void sub_1BAC8EE70(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_95(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  uint64_t v2 = *(void *)(v1 + 1424);
  if (!v2) {
    uint64_t v2 = *(void *)(v1 + 1416);
  }
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2;
  return result;
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_97(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(HALS_MetaSubDevice ****)(v2 + 1344);
  CFStringRef v4 = *(HALS_MetaSubDevice ****)(v2 + 1352);
  if (v3 == v4)
  {
    char v5 = 0;
  }
  else
  {
    char v5 = 0;
    do
    {
      uint64_t v6 = *v3;
      uint64_t v7 = v3[1];
      while (v6 != v7)
      {
        uint64_t v8 = HALS_MetaSubDevice::CopyRealIODevice(*v6);
        uint64_t v10 = (HALS_ObjectMap *)v8;
        if (v8)
        {
          char v11 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 408))(v8);
          if (v5) {
            char v5 = 1;
          }
          else {
            char v5 = v11;
          }
        }
        HALS_ObjectMap::ReleaseObject(v10, v9);
        ++v6;
      }
      v3 += 3;
    }
    while (v3 != v4);
  }
  **(_DWORD **)(a1 + 40) = v5 != 0;
}

void sub_1BAC8EF88(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  HALS_ObjectMap::ReleaseObject(v18, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_99(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(HALS_MetaSubDevice ****)(v2 + 1344);
  CFStringRef v4 = *(HALS_MetaSubDevice ****)(v2 + 1352);
  if (v3 == v4)
  {
    unsigned int v5 = 0;
  }
  else
  {
    unsigned int v5 = 0;
    do
    {
      uint64_t v6 = *v3;
      uint64_t v7 = v3[1];
      while (v6 != v7)
      {
        uint64_t v8 = HALS_MetaSubDevice::CopyRealIODevice(*v6);
        uint64_t v10 = (HALS_ObjectMap *)v8;
        if (v8)
        {
          unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 416))(v8);
          if (v5 <= v11) {
            unsigned int v5 = v11;
          }
        }
        HALS_ObjectMap::ReleaseObject(v10, v9);
        ++v6;
      }
      v3 += 3;
    }
    while (v3 != v4);
  }
  **(_DWORD **)(a1 + 40) = v5;
}

void sub_1BAC8F0A4(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  HALS_ObjectMap::ReleaseObject(v18, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_101(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(HALS_MetaSubDevice ****)(v2 + 1344);
  CFStringRef v4 = *(HALS_MetaSubDevice ****)(v2 + 1352);
  if (v3 == v4)
  {
    unsigned int v5 = 0;
  }
  else
  {
    unsigned int v5 = 0;
    do
    {
      uint64_t v6 = *v3;
      uint64_t v7 = v3[1];
      while (v6 != v7)
      {
        uint64_t v8 = HALS_MetaSubDevice::CopyRealIODevice(*v6);
        uint64_t v10 = (HALS_ObjectMap *)v8;
        if (v8)
        {
          unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 424))(v8);
          if (v5 <= v11) {
            unsigned int v5 = v11;
          }
        }
        HALS_ObjectMap::ReleaseObject(v10, v9);
        ++v6;
      }
      v3 += 3;
    }
    while (v3 != v4);
  }
  **(_DWORD **)(a1 + 40) = v5;
}

void sub_1BAC8F1C0(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  HALS_ObjectMap::ReleaseObject(v18, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_MetaDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_103(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(uint64_t ***)(v2 + 1344);
  CFStringRef v4 = *(uint64_t ***)(v2 + 1352);
  while (v3 != v4)
  {
    unsigned int v5 = *v3;
    uint64_t v6 = v3[1];
    while (v5 != v6)
    {
      uint64_t v7 = (HALS_ObjectMap *)HALS_MetaSubDevice::CopyRealDevice<HALS_Device>(*v5);
      HALS_ObjectMap::ReleaseObject(v7, v8);
      ++v5;
    }
    v3 += 3;
  }
  **(_DWORD **)(a1 + 40) = 0;
}

void sub_1BAC8F284(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void CACFDictionary::AssignWithoutRetain(const __CFDictionary **this, const __CFDictionary *a2)
{
  CFDictionaryRef v3 = *this;
  if (v3 != a2)
  {
    if (v3) {
      BOOL v5 = *((unsigned char *)this + 8) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      CFRelease(v3);
    }
    *this = a2;
    *((unsigned char *)this + 9) = 0;
  }
  *((unsigned char *)this + 8) = 1;
}

uint64_t HALS_MetaDevice::GetPropertyDataSize(HALS_MetaDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4, int *a5, AudioObjectPropertyAddress *a6)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  unsigned int v11 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(HALS_MetaDevice *, uint64_t, AudioObjectPropertyAddress *, AudioObjectPropertyAddress *))(*(void *)this + 88))(this, a2, a3, a6);
  if ((v11 & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  signed int mSelector = a3->mSelector;
  uint64_t v14 = 4;
  if ((int)a3->mSelector > 1685278560)
  {
    if (mSelector <= 1735554415)
    {
      if ((mSelector - 1685278561) <= 0x11 && ((1 << (mSelector - 97)) & 0x20003) != 0)
      {
        CFIndex v19 = (void *)*((void *)this + 187);
        if (v19 && (mSelector - 1685278561) <= 0x11 && ((0x20001u >> (mSelector - 97)) & 1) != 0)
        {
          if (mSelector != 1685278561 && mSelector != 1685278578)
          {
            AMCP::Log::Scope_Registry::get(v11);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            int v27 = **(NSObject ***)buf;
            if ((void)v40) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v40);
            }
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            {
              uint64_t v28 = pthread_self();
              mach_port_t v29 = pthread_mach_thread_np(v28);
              *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v29;
              LOWORD(v40) = 2080;
              *(void *)((char *)&v40 + 2) = "HALS_MetaDevice_HostedDSP.cpp";
              WORD5(v40) = 1024;
              HIDWORD(v40) = 94;
              LOWORD(v41) = 2080;
              *(void *)((char *)&v41 + 2) = "HandlesProperty(inAddress, inClient)";
              _os_log_error_impl(&dword_1BAA78000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s This property is not processed by HALS_MetaDevice_HostedDSP", buf, 0x22u);
            }
            abort();
          }
          uint64_t v35 = 0;
          uint64_t v36 = &v35;
          uint64_t v37 = 0x2000000000;
          int v38 = 0;
          uint64_t v20 = *v19;
          *(void *)AudioObjectPropertyAddress buf = MEMORY[0x1E4F143A8];
          *(void *)&long long v40 = 0x40000000;
          *((void *)&v40 + 1) = ___ZNK25HALS_MetaDevice_HostedDSP19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke;
          *(void *)&long long v41 = &unk_1E6230338;
          int v46 = (int)a4;
          long long v43 = a3;
          int v44 = a5;
          uint64_t v45 = a6;
          *((void *)&v41 + 1) = &v35;
          uint64_t v42 = v19;
          int v21 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 56))(v20);
          HALB_CommandGate::ExecuteCommand(v21, (uint64_t)buf);
          uint64_t v14 = *((unsigned int *)v36 + 6);
          uint64_t v22 = (uint8_t *)&v35;
          goto LABEL_45;
        }
        goto LABEL_40;
      }
      int v15 = 1685287012;
    }
    else
    {
      if (mSelector > 1853059618)
      {
        if (mSelector == 1853059619)
        {
          *(void *)AudioObjectPropertyAddress buf = 0;
          *(void *)&long long v40 = buf;
          *((void *)&v40 + 1) = 0x2000000000;
          LODWORD(v41) = 0;
          v32[0] = MEMORY[0x1E4F143A8];
          v32[1] = 0x40000000;
          uint64_t v32[2] = ___ZNK15HALS_MetaDevice19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2;
          v32[3] = &unk_1E6231D60;
          v32[4] = buf;
          v32[5] = this;
          unsigned int v25 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v25, (uint64_t)v32);
          uint64_t v14 = (16 * *(_DWORD *)(v40 + 24));
          goto LABEL_44;
        }
        if (mSelector == 1952542755) {
          return 8;
        }
        if (mSelector != 1870098020) {
          goto LABEL_40;
        }
        *(void *)AudioObjectPropertyAddress buf = 0;
        *(void *)&long long v40 = buf;
        *((void *)&v40 + 1) = 0x2000000000;
        LODWORD(v41) = 0;
        v33[0] = MEMORY[0x1E4F143A8];
        v33[1] = 0x40000000;
        uint64_t v33[2] = ___ZNK15HALS_MetaDevice19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke;
        v33[3] = &unk_1E6231D38;
        unsigned int v34 = a4 >> 2;
        v33[5] = this;
        v33[6] = a5;
        v33[4] = buf;
        long long v16 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v16, (uint64_t)v33);
LABEL_34:
        uint64_t v14 = (4 * *(_DWORD *)(v40 + 24));
LABEL_44:
        uint64_t v22 = buf;
LABEL_45:
        _Block_object_dispose(v22, 8);
        return v14;
      }
      if (mSelector == 1735554416) {
        return 8;
      }
      int v15 = 1769302372;
    }
LABEL_39:
    if (mSelector != v15) {
      goto LABEL_40;
    }
    return v14;
  }
  if (mSelector <= 1634755427)
  {
    if (mSelector > 1634429293)
    {
      if (mSelector == 1634429294) {
        return v14;
      }
      if (mSelector != 1634562932) {
        goto LABEL_40;
      }
      return 8;
    }
    if (mSelector == 1633906541) {
      return 8;
    }
    if (mSelector != 1634169456) {
      goto LABEL_40;
    }
    *(void *)AudioObjectPropertyAddress buf = 0;
    *(void *)&long long v40 = buf;
    *((void *)&v40 + 1) = 0x2000000000;
    LODWORD(v41) = 0;
    v31[0] = MEMORY[0x1E4F143A8];
    v31[1] = 0x40000000;
    v31[2] = ___ZNK15HALS_MetaDevice19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3;
    v31[3] = &unk_1E6231D88;
    v31[4] = buf;
    v31[5] = this;
    uint64_t v17 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v17, (uint64_t)v31);
    goto LABEL_34;
  }
  if (mSelector > 1684107363)
  {
    if (mSelector == 1684107364 || mSelector == 1684893796) {
      return v14;
    }
    int v15 = 1685087596;
    goto LABEL_39;
  }
  if (mSelector == 1634755428) {
    return 8;
  }
  if (mSelector == 1635017072)
  {
    *(void *)AudioObjectPropertyAddress buf = 0;
    *(void *)&long long v40 = buf;
    *((void *)&v40 + 1) = 0x2000000000;
    LODWORD(v41) = 0;
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 0x40000000;
    unsigned int v30[2] = ___ZNK15HALS_MetaDevice19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4;
    v30[3] = &unk_1E6231DB0;
    v30[4] = buf;
    void v30[5] = this;
    uint64_t v23 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v23, (uint64_t)v30);
    goto LABEL_34;
  }
LABEL_40:

  return HALS_Device::GetPropertyDataSize((HALS_Device ***)this, v12, a3, a4, a5, a6);
}

void sub_1BAC8FA00(_Unwind_Exception *exception_object)
{
}

void ___ZNK15HALS_MetaDevice19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke(uint64_t a1)
{
  char v2 = 0;
  CFDictionaryRef v3 = *(void **)(a1 + 40);
  char v4 = 1;
  do
  {
    char v5 = v4;
    int v7 = (*(uint64_t (**)(void *, void))(*v3 + 384))(v3, v2 & 1);
    if (v7)
    {
      uint64_t v8 = 0;
      do
      {
        unsigned int v11 = (unsigned int *)(*(uint64_t (**)(void *, void, uint64_t))(*v3 + 392))(v3, v2 & 1, v8);
        if (v11
          && HALS_Object::IsObjectClassInClassIDList((HALS_Object *)*(unsigned int *)(a1 + 56), *(void *)(a1 + 48), v11, v10))
        {
          ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        }
        HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v11, v9);
        uint64_t v8 = (v8 + 1);
      }
      while (v7 != v8);
    }
    char v4 = 0;
    char v2 = 1;
  }
  while ((v5 & 1) != 0);
  uint64_t v12 = (uint64_t **)v3[168];
  unsigned int v13 = (HALS_MetaDeviceDescription *)v3[169];
  if (v12 != (uint64_t **)v13)
  {
    int v14 = 0;
    int v15 = (HALS_MetaDeviceDescription *)v3[168];
    do
    {
      uint64_t v17 = *(void *)v15;
      uint64_t v16 = *((void *)v15 + 1);
      int v15 = (HALS_MetaDeviceDescription *)((char *)v15 + 24);
      v14 += (unint64_t)(v16 - v17) >> 3;
    }
    while (v15 != v13);
    if (v14)
    {
      for (int i = 0; i != v14; ++i)
      {
        uint64_t SubDeviceByIndex = (const unsigned int *)HALS_MetaDeviceDescription::GetSubDeviceByIndex(v12, v13, i);
        if (HALS_Object::IsObjectClassInClassIDList((HALS_Object *)*(unsigned int *)(a1 + 56), *(void *)(a1 + 48), SubDeviceByIndex, v20))++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24); {
      }
        }
    }
  }
  int v21 = (const unsigned int **)v3[175];
  uint64_t v22 = (const unsigned int **)v3[174];
  unint64_t v23 = (unint64_t)((char *)v21 - (char *)v22) >> 3;
  if (!v23) {
    return;
  }
  int v24 = 0;
  do
  {
    if (v22 == v21) {
      goto LABEL_29;
    }
    int v25 = 0;
    BOOL v26 = v22;
    while (1)
    {
      if (v25 != v24)
      {
        ++v25;
        goto LABEL_25;
      }
      int v25 = v24;
      if (*v26) {
        break;
      }
LABEL_25:
      if (++v26 == v21) {
        goto LABEL_29;
      }
    }
    if (HALS_Object::IsObjectClassInClassIDList((HALS_Object *)*(unsigned int *)(a1 + 56), *(void *)(a1 + 48), *v26, v6))++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24); {
LABEL_29:
    }
    ++v24;
  }
  while (v24 != v23);
}

void sub_1BAC8FC48(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_MetaDevice19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2(uint64_t a1)
{
  char v2 = *(void **)(a1 + 40);
  CFDictionaryRef v3 = (HALS_MetaSubDevice *)v2[178];
  if (v3 || (CFDictionaryRef v3 = (HALS_MetaSubDevice *)v2[177]) != 0)
  {
    uint64_t v4 = HALS_MetaSubDevice::CopyRealIODevice(v3);
    uint64_t v6 = (HALS_ObjectMap *)v4;
    if (v4) {
      LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 280))(v4);
    }
    else {
      LODWORD(v7) = 0;
    }
    HALS_ObjectMap::ReleaseObject(v6, v5);
  }
  else if (((v2[175] - v2[174]) & 0x7FFFFFFF8) != 0)
  {
    get_tap_sample_rate_range((uint64_t)v8);
    unint64_t v7 = (unint64_t)((char *)v8[1] - (char *)v8[0]) >> 4;
    if (v8[0]) {
      operator delete(v8[0]);
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v7;
}

void sub_1BAC8FD58(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  HALS_ObjectMap::ReleaseObject(v18, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK15HALS_MetaDevice19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  char v2 = *(uint64_t **)(v1 + 1344);
  CFDictionaryRef v3 = *(uint64_t **)(v1 + 1352);
  if (v2 == v3)
  {
    int v4 = 0;
  }
  else
  {
    int v4 = 0;
    do
    {
      uint64_t v6 = *v2;
      uint64_t v5 = v2[1];
      v2 += 3;
      v4 += (unint64_t)(v5 - v6) >> 3;
    }
    while (v2 != v3);
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  return result;
}

uint64_t ___ZNK15HALS_MetaDevice19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (*(void *)(*(void *)(result + 40) + 1400)
                                                                   - *(void *)(*(void *)(result + 40) + 1392)) >> 3;
  return result;
}

uint64_t HALS_MetaDevice::IsPropertySettable(HALS_MetaDevice *this, unsigned int a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 88))(this);
  if ((v7 & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  signed int mSelector = a3->mSelector;
  BOOL v10 = 1;
  if ((int)a3->mSelector <= 1685287011)
  {
    if (mSelector > 1684107363)
    {
      if (mSelector <= 1685278560)
      {
        if (mSelector != 1684107364 && mSelector != 1684893796)
        {
          int v11 = 1685087596;
          goto LABEL_32;
        }
        return 0;
      }
      if ((mSelector - 1685278561) <= 0x11 && ((1 << (mSelector - 97)) & 0x20003) != 0)
      {
        unsigned int v13 = (void *)*((void *)this + 187);
        if (v13)
        {
          if (mSelector - 1685278561) <= 0x11 && ((0x20001u >> (mSelector - 97)))
          {
            if (mSelector != 1685278561 && mSelector != 1685278578)
            {
              AMCP::Log::Scope_Registry::get(v7);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
              uint64_t v18 = **(NSObject ***)buf;
              if ((void)v26) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v26);
              }
              if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
              {
                CFIndex v19 = pthread_self();
                mach_port_t v20 = pthread_mach_thread_np(v19);
                *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
                *(_DWORD *)&uint8_t buf[4] = v20;
                LOWORD(v26) = 2080;
                *(void *)((char *)&v26 + 2) = "HALS_MetaDevice_HostedDSP.cpp";
                WORD5(v26) = 1024;
                HIDWORD(v26) = 77;
                LOWORD(v27) = 2080;
                *(void *)((char *)&v27 + 2) = "HandlesProperty(inAddress, inClient)";
                _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s This property is not processed by HALS_MetaDevice_HostedDSP", buf, 0x22u);
              }
              abort();
            }
            uint64_t v21 = 0;
            uint64_t v22 = &v21;
            uint64_t v23 = 0x2000000000;
            char v24 = 0;
            uint64_t v14 = *v13;
            *(void *)AudioObjectPropertyAddress buf = MEMORY[0x1E4F143A8];
            *(void *)&long long v26 = 0x40000000;
            *((void *)&v26 + 1) = ___ZNK25HALS_MetaDevice_HostedDSP18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke;
            *(void *)&long long v27 = &unk_1E6230310;
            mach_port_t v29 = a3;
            unint64_t v30 = a4;
            *((void *)&v27 + 1) = &v21;
            uint64_t v28 = v13;
            int v15 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 56))(v14);
            HALB_CommandGate::ExecuteCommand(v15, (uint64_t)buf);
            BOOL v10 = *((unsigned char *)v22 + 24) != 0;
            _Block_object_dispose(&v21, 8);
            return v10;
          }
        }
      }
      goto LABEL_41;
    }
    if (mSelector <= 1634562931)
    {
      if (mSelector == 1633906541) {
        return v10;
      }
      int v12 = 1634169456;
    }
    else
    {
      if (mSelector == 1634562932 || mSelector == 1634755428) {
        return v10;
      }
      int v12 = 1635017072;
    }
LABEL_38:
    if (mSelector == v12) {
      return 0;
    }
    goto LABEL_41;
  }
  if (mSelector <= 1851878763)
  {
    if (mSelector > 1769302371)
    {
      if (mSelector == 1769302372) {
        return 0;
      }
      int v11 = 1819173229;
    }
    else
    {
      if (mSelector == 1685287012) {
        return 0;
      }
      int v11 = 1735554416;
    }
LABEL_32:
    if (mSelector != v11) {
      goto LABEL_41;
    }
    return v10;
  }
  if (mSelector <= 1952542754)
  {
    if (mSelector == 1851878764) {
      return v10;
    }
    int v12 = 1869180523;
    goto LABEL_38;
  }
  if (mSelector == 1952542755) {
    return v10;
  }
  if (mSelector == 1983996971 || mSelector == 1986622324)
  {
    if (a3->mScope == 1768845428)
    {
      atomic_load((unsigned __int8 *)this + 1432);
      return v10;
    }
    return 0;
  }
LABEL_41:

  return HALS_Device::IsPropertySettable((HALS_Device ***)this, v8, a3, a4);
}

void sub_1BAC902AC(_Unwind_Exception *exception_object)
{
}

uint64_t HALS_MetaDevice::HasProperty(HALS_MetaDevice *this, unsigned int a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  if (!(*(unsigned int (**)(HALS_MetaDevice *, AudioObjectPropertyAddress *, AudioObjectPropertyAddress *))(*(void *)this + 176))(this, a3, a4))return 0; {
  signed int mSelector = a3->mSelector;
  }
  BOOL v10 = 1;
  if ((int)a3->mSelector > 1685287011)
  {
    if (mSelector > 1851878763)
    {
      if (mSelector > 1952542754)
      {
        if (mSelector == 1952542755) {
          return v10;
        }
        if (mSelector != 1983996971 && mSelector != 1986622324) {
          goto LABEL_47;
        }
        if (a3->mScope == 1768845428)
        {
          atomic_load((unsigned __int8 *)this + 1432);
          return v10;
        }
        return 0;
      }
      if (mSelector != 1851878764)
      {
        if (mSelector != 1852793963)
        {
          int v15 = 1869180523;
          goto LABEL_36;
        }
        return 0;
      }
    }
    else
    {
      if (mSelector <= 1769302371)
      {
        if (mSelector == 1685287012) {
          return v10;
        }
        if (mSelector != 1685414763)
        {
          int v14 = 1735554416;
          goto LABEL_46;
        }
        return 0;
      }
      if (mSelector == 1769302372) {
        return a3->mScope == 1735159650 && a3->mElement == 0;
      }
      if (mSelector == 1819107691) {
        return v10;
      }
      if (mSelector != 1819173229) {
        goto LABEL_47;
      }
    }
    uint64_t v19 = 0;
    mach_port_t v20 = &v19;
    uint64_t v21 = 0x3802000000;
    uint64_t v22 = __Block_byref_object_copy__49;
    uint64_t v23 = __Block_byref_object_dispose__50;
    v24[0] = &unk_1F1489A20;
    v24[1] = 0;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 0x40000000;
    void v18[2] = ___ZNK15HALS_MetaDevice11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke;
    uint64_t v18[3] = &unk_1E6231D10;
    v18[4] = &v19;
    v18[5] = this;
    uint64_t v16 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaDevice *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v16, (uint64_t)v18);
    BOOL v10 = v20[6] != 0;
    _Block_object_dispose(&v19, 8);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v24);
    return v10;
  }
  if (mSelector <= 1635017071)
  {
    if (mSelector <= 1634755427)
    {
      if (mSelector == 1633906541 || mSelector == 1634169456) {
        return v10;
      }
      int v14 = 1634562932;
      goto LABEL_46;
    }
    if (mSelector == 1634755428) {
      return v10;
    }
    if (mSelector != 1634758765)
    {
      int v15 = 1634758774;
LABEL_36:
      if (mSelector != v15) {
        goto LABEL_47;
      }
      return 0;
    }
    return 0;
  }
  if (mSelector <= 1685087595)
  {
    if (mSelector == 1635017072 || mSelector == 1684107364) {
      return v10;
    }
    int v14 = 1684893796;
    goto LABEL_46;
  }
  if ((mSelector - 1685278561) > 0x11 || ((1 << (mSelector - 97)) & 0x20003) == 0)
  {
    int v14 = 1685087596;
LABEL_46:
    if (mSelector != v14) {
      goto LABEL_47;
    }
    return v10;
  }
  int v11 = (HALS_MetaDevice_HostedDSP *)*((void *)this + 187);
  if (v11)
  {
    unsigned int v12 = mSelector - 1685278561;
    if (v12 <= 0x11 && ((0x20001u >> v12) & 1) != 0)
    {
      return HALS_MetaDevice_HostedDSP::HasProperty(v11, a3, a4, v8);
    }
  }
LABEL_47:

  return HALS_Device::HasProperty((HALS_Device ***)this, v7, a3, a4);
}

void sub_1BAC906F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  OS::CF::UntypedObject::~UntypedObject(v8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__49(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 40) = &unk_1F1489A20;
  return result;
}

void __Block_byref_object_dispose__50(uint64_t a1)
{
}

uint64_t ___ZNK15HALS_MetaDevice11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke(uint64_t a1)
{
  CFTypeRef v2 = HALS_MetaDeviceDescription::CopyDeviceName(*(CFDictionaryRef *)(*(void *)(a1 + 40) + 1336));
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8) + 40;

  return OS::CF::UntypedObject::operator=(v3, (uint64_t)v2);
}

uint64_t HALS_MetaDevice::_Deactivate(HALS_MetaDevice *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (((*((void *)this + 175) - *((void *)this + 174)) & 0x7FFFFFFF8) != 0) {
    HALS_MetaDevice::UnregisterTaps(this);
  }
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    char v4 = v3;
    uint64_t v5 = (char *)this + 24 * v2;
    uint64_t v6 = v5 + 1448;
    uint64_t v7 = *((void *)v5 + 181);
    if (v7 != *((void *)v5 + 180))
    {
      unint64_t v8 = 0;
      uint64_t v9 = (uint64_t *)(v5 + 1440);
      unsigned int v10 = 1;
      uint64_t v7 = *((void *)v5 + 180);
      do
      {
        int v11 = *(HALS_ObjectMap **)(v7 + 8 * v8);
        (*(void (**)(HALS_ObjectMap *))(*(void *)v11 + 8))(v11);
        HALS_ObjectMap::ObjectIsDead(v11, v12);
        unint64_t v8 = v10;
        uint64_t v7 = *v9;
        ++v10;
      }
      while (v8 < (*v6 - *v9) >> 3);
    }
    char v3 = 0;
    void *v6 = v7;
    uint64_t v2 = 1;
  }
  while ((v4 & 1) != 0);
  unsigned int v13 = *(_opaque_pthread_t **)((*(uint64_t (**)(void))(**((void **)this + 165) + 56))() + 72);
  if (v13 != pthread_self())
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      uint64_t v17 = "HALS_MetaDeviceDescription.cpp";
      __int16 v18 = 1024;
      int v19 = 63;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaDeviceDescription::Deactivate: inner methods have to be called from inside the command gate", (uint8_t *)&v16, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  HALS_MetaDeviceDescription::TeardownSubDeviceList((HALS_MetaDevice *)((char *)this + 1320));
  HALS_MetaDeviceDescription::TeardownSubTapList((HALS_MetaDevice *)((char *)this + 1320));

  return HALS_Device::_Deactivate(this);
}

void HALS_MetaDevice::~HALS_MetaDevice(void **this)
{
  HALS_MetaDevice::~HALS_MetaDevice(this);

  JUMPOUT(0x1C1859840);
}

{
  void *v2;
  uint64_t i;
  void *v4;
  uint64_t vars8;

  *this = &unk_1F14685B0;
  if (*((char *)this + 1847) < 0) {
    operator delete(this[228]);
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(this + 188));
  uint64_t v2 = this[187];
  this[187] = 0;
  if (v2) {
    MEMORY[0x1C1859840](v2, 0x20C4093837F09);
  }
  for (int i = 0; i != -6; i -= 3)
  {
    char v4 = this[i + 183];
    if (v4)
    {
      this[i + 184] = v4;
      operator delete(v4);
    }
  }
  HALS_MetaDeviceDescription::~HALS_MetaDeviceDescription((HALS_MetaDeviceDescription *)(this + 165));

  HALS_Device::~HALS_Device((HALS_Device *)this);
}

void HALS_MetaDevice::Activate(const __CFDictionary **this)
{
  HALS_MetaDevice::_UpdateStreams(this, &v5);
  if (*((unsigned char *)this + 1492)) {
    uint64_t v2 = (HALS_ObjectMap *)*((unsigned int *)this + 372);
  }
  else {
    uint64_t v2 = 0;
  }
  char v3 = (HALS_Client *)HALS_ObjectMap::CopyObjectByObjectID(v2);
  HALS_MetaDevice::InheritSubdeviceDSPForClient((HALS_MetaDevice *)this, 1, v3);
  HALS_Device::Activate((const __CFString **)this);
  HALS_ObjectMap::ReleaseObject(v3, v4);
}

void sub_1BAC90B30(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_MetaDevice17RealDeviceArrivedEP11HALS_Device_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(CFDictionaryRef **)(a1 + 48);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  if (HALS_MetaDeviceDescription::IsDeviceInRawDescription(v1 + 165, *(HALS_Device **)(a1 + 56)))
  {
    *(_WORD *)int v25 = 0;
    HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)v22);
    HALS_DeviceState::Capture((HALS_DeviceState *)v22, (HALS_Device *)v1, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
    HALS_MetaDeviceDescription::UpdateSubDeviceList(v1 + 165, 0);
    HALS_MetaDevice::_UpdateStreams(v1, v25);
    HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)v20);
    HALS_DeviceState::Capture((HALS_DeviceState *)v20, (HALS_Device *)v1, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
    HALS_DeviceState::Compare((HALS_DeviceState *)v22, (const HALS_DeviceState *)v20, (const AudioObjectPropertyAddress *)(v2 + 40), (CAPropertyAddressList **)(v3 + 40), v4);
    *(void *)&v19.signed int mSelector = 0x676C6F62616D7374;
    v19.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v2 + 40), &v19, v5);
    *(void *)&v19.signed int mSelector = 0x676C6F6261706364;
    v19.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v2 + 40), &v19, v6);
    *(void *)&v19.signed int mSelector = 0x676C6F6267727570;
    v19.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v2 + 40), &v19, v7);
    *(void *)&v19.signed int mSelector = 0x676C6F6261677270;
    v19.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v2 + 40), &v19, v8);
    *(void *)&v19.signed int mSelector = 0x676C6F6261636F6DLL;
    v19.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v2 + 40), &v19, v9);
    *(void *)&v19.signed int mSelector = 0x676C6F6261746170;
    v19.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v2 + 40), &v19, v10);
    *(void *)&v19.signed int mSelector = 0x676C6F6274617023;
    v19.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v2 + 40), &v19, v11);
    BOOL v13 = v25[1];
    BOOL v14 = v25[0];
    if (v25[1] || v25[0])
    {
      *(void *)&v19.signed int mSelector = 0x676C6F6273746D23;
      v19.AudioObjectPropertyElement mElement = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v2 + 40), &v19, v12);
      if (v13)
      {
        *(void *)&v19.signed int mSelector = 0x696E707473746D23;
        v19.AudioObjectPropertyElement mElement = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v2 + 40), &v19, v15);
      }
      if (v14)
      {
        *(void *)&v19.signed int mSelector = 0x6F75747073746D23;
        v19.AudioObjectPropertyElement mElement = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v2 + 40), &v19, v15);
      }
      if (*(void *)(v2 + 40) == *(void *)(v2 + 48))
      {
        int v16 = *(uint64_t **)(v3 + 40);
        while (v16 != *(uint64_t **)(v3 + 48))
        {
          uint64_t v17 = *v16;
          uint64_t v18 = v16[1];
          v16 += 4;
          if (v17 != v18) {
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        *(void *)&v19.signed int mSelector = 0x676C6F6264696666;
        v19.AudioObjectPropertyElement mElement = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v2 + 40), &v19, v15);
      }
    }
    *(void *)&v19.signed int mSelector = &v21;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v20[2]);
    v20[0] = (void **)&v24;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100](v20);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v23);
  }
}

void sub_1BAC90DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, void **a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23)
{
  a10 = (void **)&a16;
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(a14);
  a12 = (void **)&a23;
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(a21);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_MetaDevice14RealDeviceDiedEP11HALS_Device_block_invoke(void *a1)
{
  uint64_t v1 = (CFDictionaryRef *)a1[6];
  uint64_t v2 = (HALS_Device *)a1[7];
  uint64_t v3 = *(void *)(a1[4] + 8);
  uint64_t v4 = *(void *)(a1[5] + 8);
  if (HALS_MetaDeviceDescription::IsDeviceInRawDescription(v1 + 165, v2))
  {
    *(_WORD *)long long v26 = 0;
    HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)v23);
    HALS_DeviceState::Capture((HALS_DeviceState *)v23, (HALS_Device *)v1, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
    HALS_MetaDeviceDescription::UpdateSubDeviceList(v1 + 165, v2);
    HALS_MetaDevice::_UpdateStreams(v1, v26);
    HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)v21);
    HALS_DeviceState::Capture((HALS_DeviceState *)v21, (HALS_Device *)v1, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
    HALS_DeviceState::Compare((HALS_DeviceState *)v23, (const HALS_DeviceState *)v21, (const AudioObjectPropertyAddress *)(v3 + 40), (CAPropertyAddressList **)(v4 + 40), v5);
    *(void *)&v20.signed int mSelector = 0x676C6F62616D7374;
    v20.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v3 + 40), &v20, v6);
    *(void *)&v20.signed int mSelector = 0x676C6F6261706364;
    v20.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v3 + 40), &v20, v7);
    *(void *)&v20.signed int mSelector = 0x676C6F6267727570;
    v20.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v3 + 40), &v20, v8);
    *(void *)&v20.signed int mSelector = 0x676C6F6261677270;
    v20.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v3 + 40), &v20, v9);
    *(void *)&v20.signed int mSelector = 0x676C6F6261636F6DLL;
    v20.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v3 + 40), &v20, v10);
    *(void *)&v20.signed int mSelector = 0x676C6F6261746170;
    v20.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v3 + 40), &v20, v11);
    *(void *)&v20.signed int mSelector = 0x676C6F6274617023;
    v20.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v3 + 40), &v20, v12);
    BOOL v14 = v26[1];
    BOOL v15 = v26[0];
    if (v26[1] || v26[0])
    {
      *(void *)&v20.signed int mSelector = 0x676C6F6273746D23;
      v20.AudioObjectPropertyElement mElement = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v3 + 40), &v20, v13);
      if (v14)
      {
        *(void *)&v20.signed int mSelector = 0x696E707473746D23;
        v20.AudioObjectPropertyElement mElement = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v3 + 40), &v20, v16);
      }
      if (v15)
      {
        *(void *)&v20.signed int mSelector = 0x6F75747073746D23;
        v20.AudioObjectPropertyElement mElement = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v3 + 40), &v20, v16);
      }
      if (*(void *)(v3 + 40) == *(void *)(v3 + 48))
      {
        uint64_t v17 = *(uint64_t **)(v4 + 40);
        while (v17 != *(uint64_t **)(v4 + 48))
        {
          uint64_t v18 = *v17;
          uint64_t v19 = v17[1];
          v17 += 4;
          if (v18 != v19) {
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        *(void *)&v20.signed int mSelector = 0x676C6F6264696666;
        v20.AudioObjectPropertyElement mElement = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v3 + 40), &v20, v16);
      }
    }
    *(void *)&v20.signed int mSelector = &v22;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v21[2]);
    v21[0] = (void **)&v25;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100](v21);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v24);
  }
}

void sub_1BAC910A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, void **a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23)
{
  a10 = (void **)&a16;
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(a14);
  a12 = (void **)&a23;
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(a21);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_MetaDevice25HandleTapSampleRateChangeEv_block_invoke(void *a1)
{
  uint64_t v1 = a1[6];
  if (((*(void *)(v1 + 1400) - *(void *)(v1 + 1392)) & 0x7FFFFFFF8) != 0)
  {
    *(_WORD *)long long v43 = 0;
    HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)v40);
    HALS_DeviceState::Capture((HALS_DeviceState *)v40, (HALS_Device *)v1, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
    HALS_MetaDeviceDescription::UpdateSubDeviceList((CFDictionaryRef *)(v1 + 1320), 0);
    HALS_MetaDevice::_UpdateStreams((const __CFDictionary **)v1, v43);
    HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)v38);
    HALS_DeviceState::Capture((HALS_DeviceState *)v38, (HALS_Device *)v1, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
    HALS_DeviceState::Compare((HALS_DeviceState *)v40, (const HALS_DeviceState *)v38, (const AudioObjectPropertyAddress *)(*(void *)(a1[4] + 8) + 40), (CAPropertyAddressList **)(*(void *)(a1[5] + 8) + 40), v3);
    uint64_t v4 = *(void *)(a1[4] + 8);
    *(void *)&v37.signed int mSelector = 0x676C6F62616D7374;
    v37.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v4 + 40), &v37, v5);
    uint64_t v6 = *(void *)(a1[4] + 8);
    *(void *)&v37.signed int mSelector = 0x676C6F6261706364;
    v37.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v6 + 40), &v37, v7);
    uint64_t v8 = *(void *)(a1[4] + 8);
    *(void *)&v37.signed int mSelector = 0x676C6F6267727570;
    v37.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v8 + 40), &v37, v9);
    uint64_t v10 = *(void *)(a1[4] + 8);
    *(void *)&v37.signed int mSelector = 0x676C6F6261677270;
    v37.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v10 + 40), &v37, v11);
    uint64_t v12 = *(void *)(a1[4] + 8);
    *(void *)&v37.signed int mSelector = 0x676C6F6261636F6DLL;
    v37.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v12 + 40), &v37, v13);
    uint64_t v14 = *(void *)(a1[4] + 8);
    *(void *)&v37.signed int mSelector = 0x676C6F6261746170;
    v37.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v14 + 40), &v37, v15);
    uint64_t v16 = *(void *)(a1[4] + 8);
    *(void *)&v37.signed int mSelector = 0x676C6F6274617023;
    v37.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v16 + 40), &v37, v17);
    uint64_t v18 = *(void *)(a1[4] + 8);
    *(void *)&v37.signed int mSelector = 0x676C6F626E737274;
    v37.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v18 + 40), &v37, v19);
    uint64_t v20 = *(void *)(a1[4] + 8);
    *(void *)&v37.signed int mSelector = 0x676C6F6261737274;
    v37.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v20 + 40), &v37, v21);
    uint64_t v22 = *(void *)(a1[4] + 8);
    *(void *)&v37.signed int mSelector = 0x676C6F626E737223;
    v37.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(v22 + 40), &v37, v23);
    BOOL v25 = v43[1];
    BOOL v26 = v43[0];
    if (v43[1] || v43[0])
    {
      *(void *)&v37.signed int mSelector = 0x676C6F6273746D23;
      v37.AudioObjectPropertyElement mElement = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(*(void *)(a1[4] + 8) + 40), &v37, v24);
      if (v25)
      {
        *(void *)&v37.signed int mSelector = 0x696E707473746D23;
        v37.AudioObjectPropertyElement mElement = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(*(void *)(a1[4] + 8) + 40), &v37, v27);
      }
      if (v26)
      {
        *(void *)&v37.signed int mSelector = 0x6F75747073746D23;
        v37.AudioObjectPropertyElement mElement = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(*(void *)(a1[4] + 8) + 40), &v37, v27);
      }
      uint64_t v28 = *(void *)(a1[4] + 8);
      uint64_t v30 = *(void *)(v28 + 40);
      uint64_t v31 = *(void *)(v28 + 48);
      mach_port_t v29 = (CAPropertyAddressList *)(v28 + 40);
      if (v30 == v31)
      {
        uint64_t v32 = *(void *)(a1[5] + 8);
        uint64_t v33 = *(uint64_t **)(v32 + 40);
        unsigned int v34 = *(uint64_t **)(v32 + 48);
        while (v33 != v34)
        {
          uint64_t v35 = *v33;
          uint64_t v36 = v33[1];
          v33 += 4;
          if (v35 != v36) {
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        *(void *)&v37.signed int mSelector = 0x676C6F6264696666;
        v37.AudioObjectPropertyElement mElement = 0;
        CAPropertyAddressList::AppendUniqueItem(v29, &v37, v27);
      }
    }
    *(void *)&v37.signed int mSelector = &v39;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v38[2]);
    v38[0] = (void **)&v42;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100](v38);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v41);
  }
}

void sub_1BAC91448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  HALS_DeviceState::~HALS_DeviceState((HALS_DeviceState *)va);
  HALS_DeviceState::~HALS_DeviceState((HALS_DeviceState *)va1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN15HALS_MetaDevice6HasTapEN10applesauce2CF9StringRefE_block_invoke(uint64_t a1)
{
  CFTypeRef v2 = HALS_MetaDeviceDescription::CopyTapList(*(CFDictionaryRef *)(*(void *)(a1 + 40) + 1336));
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8) + 40;

  return OS::CF::UntypedObject::operator=(v3, (uint64_t)v2);
}

CFDictionaryRef ___ZN15HALS_MetaDevice16UpdateTapReadersEN10applesauce2CF9StringRefE_block_invoke(uint64_t a1)
{
  CFDictionaryRef result = HALS_MetaDeviceDescription::CopyRawDescription((CFDictionaryRef *)(*(void *)(a1 + 40) + 1320));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t HALS_AHPObject::SetPropertyData(HALS_AHPObject *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  if (((*(uint64_t (**)(HALS_AHPObject *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    BOOL v21 = mSelector == 1937007734;
    int v22 = 1869638759;
  }
  else
  {
    BOOL v21 = mSelector == 1650682995;
    int v22 = 1668047219;
  }
  if (v21 || mSelector == v22) {
    HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v16, v17, v18, v19, (uint64_t)a8);
  }
  uint64_t v24 = *(HALS_AHPPlugIn **)(*((void *)this + 6) + 32);

  return HALS_AHPPlugIn::ObjectSetPropertyData(v24, a2, a3, a6, a7, a4, a5);
}

uint64_t HALS_AHPObject::GetPropertyData(HALS_AHPObject *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, uint64_t *a6, uint64_t a7, const void *a8, HALS_Client *a9)
{
  if (((*(uint64_t (**)(HALS_AHPObject *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    BOOL v19 = mSelector == 1937007734;
    int v20 = 1869638759;
  }
  else
  {
    BOOL v19 = mSelector == 1650682995;
    int v20 = 1668047219;
  }
  if (v19 || mSelector == v20)
  {
    return HALS_Object::GetPropertyData((uint64_t)this, v17, (int *)a3, a4, (int *)a5, a6);
  }
  else
  {
    *a5 = a4;
    uint64_t v23 = *(HALS_AHPPlugIn **)(*((void *)this + 6) + 32);
    return HALS_AHPPlugIn::ObjectGetPropertyData(v23, a2, a3, a7, a8, a5, a6);
  }
}

uint64_t HALS_AHPObject::GetPropertyDataSize(HALS_AHPObject *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, HALS_Client *a6)
{
  uint64_t v11 = (*(uint64_t (**)(HALS_AHPObject *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a6);
  if ((v11 & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    BOOL v14 = mSelector == 1937007734;
    int v15 = 1869638759;
  }
  else
  {
    BOOL v14 = mSelector == 1650682995;
    int v15 = 1668047219;
  }
  if (v14 || mSelector == v15)
  {
    return HALS_Object::GetPropertyDataSize(v11, v12, (int *)a3);
  }
  else
  {
    uint64_t v18 = *(HALS_AHPPlugIn **)(*((void *)this + 6) + 32);
    return HALS_AHPPlugIn::ObjectGetPropertyDataSize(v18, a2, a3, a4, a5);
  }
}

uint64_t HALS_AHPObject::IsPropertySettable(HALS_AHPObject *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  uint64_t v7 = (*(uint64_t (**)(HALS_AHPObject *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a4);
  if ((v7 & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    BOOL v10 = mSelector == 1937007734;
    int v11 = 1869638759;
  }
  else
  {
    BOOL v10 = mSelector == 1650682995;
    int v11 = 1668047219;
  }
  if (v10 || mSelector == v11)
  {
    return HALS_Object::IsPropertySettable(v7, v8, (int *)a3);
  }
  else
  {
    BOOL v14 = *(HALS_AHPPlugIn **)(*((void *)this + 6) + 32);
    return HALS_AHPPlugIn::ObjectIsPropertySettable(v14, a2, a3);
  }
}

BOOL HALS_AHPObject::HasProperty(uint64_t a1, uint64_t a2, int *a3)
{
  int v4 = *a3;
  BOOL result = 1;
  if (*a3 > 1869638758)
  {
    BOOL v6 = v4 == 1869638759;
    int v7 = 1937007734;
  }
  else
  {
    BOOL v6 = v4 == 1650682995;
    int v7 = 1668047219;
  }
  if (!v6 && v4 != v7) {
    return (*(unsigned int (**)(void))(**(void **)(*(void *)(a1 + 48) + 32) + 184))(*(void *)(*(void *)(a1 + 48) + 32)) != 0;
  }
  return result;
}

void HALS_AHPObject::~HALS_AHPObject(HALS_AHPObject *this)
{
  HALS_Object::~HALS_Object(this);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Tone_Generator::generate_or_compare_audio(AMCP::DAL::DAL_Time const&,AMCP::DAL::DAL_Timed_Segment &,AMCP::DAL::Container const&,AMCP::Tone_Generator::Generate_Or_Compare,double)::$_0,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  CFTypeRef v2 = *v8;
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    LODWORD(v8) = 67109634;
    HIDWORD(v8) = v4;
    *(_WORD *)uint64_t v9 = 2080;
    *(void *)&void v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Cannot compare empty range", (uint8_t *)&v8, 0x18u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAC91C74(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Tone_Generator::generate_or_compare_audio(AMCP::DAL::DAL_Time const&,AMCP::DAL::DAL_Timed_Segment &,AMCP::DAL::Container const&,AMCP::Tone_Generator::Generate_Or_Compare,double)::$_0,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

float AMCP::DAL::Sample_Setter<float>::get_sample(AMCP::Log::Scope_Registry *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)a1 + 1);
  if (a2 >= (*((void *)a1 + 2) - v3) >> 4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v5 = **(NSObject ***)buf;
    if (*(void *)v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v26);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = pthread_self();
      mach_port_t v7 = pthread_mach_thread_np(v6);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)BOOL v26 = 2080;
      *(void *)&BOOL v26[2] = "Sample_Format_Handler.h";
      __int16 v27 = 1024;
      int v28 = 144;
      __int16 v29 = 2080;
      *(void *)uint64_t v30 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v16);
    std::logic_error::logic_error(&v17, &v16);
    v17.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v18, &v17);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v23 = -1;
    v18.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    BOOL v19 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v18);
    *(void *)&void v30[6] = "virtual float AMCP::DAL::Sample_Setter<float>::get_sample(size_t, size_t) [T = float]";
    uint64_t v31 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v32 = 144;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
    long long v14 = v11;
    uint64_t v15 = v12;
    long long v11 = 0uLL;
    uint64_t v12 = 0;
    BOOL v13 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*(void *)(v3 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v8 = **(NSObject ***)buf;
    if (*(void *)v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v26);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)BOOL v26 = 2080;
      *(void *)&BOOL v26[2] = "Sample_Format_Handler.h";
      __int16 v27 = 1024;
      int v28 = 145;
      __int16 v29 = 2080;
      *(void *)uint64_t v30 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v16);
    std::logic_error::logic_error(&v17, &v16);
    v17.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v18, &v17);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v23 = -1;
    v18.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    BOOL v19 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v18);
    *(void *)&void v30[6] = "virtual float AMCP::DAL::Sample_Setter<float>::get_sample(size_t, size_t) [T = float]";
    uint64_t v31 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v32 = 145;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
    long long v14 = v11;
    uint64_t v15 = v12;
    long long v11 = 0uLL;
    uint64_t v12 = 0;
    BOOL v13 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return *(float *)(*(void *)(v3 + 16 * a2) + 4 * a3);
}

void sub_1BAC92164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

float AMCP::DAL::Sample_Setter<float>::subtract_sample(AMCP::Log::Scope_Registry *a1, unint64_t a2, unint64_t a3, float a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a1 + 1);
  if (a2 >= (*((void *)a1 + 2) - v4) >> 4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v7 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)uint64_t v28 = 2080;
      *(void *)&_OWORD v28[2] = "Sample_Format_Handler.h";
      __int16 v29 = 1024;
      int v30 = 138;
      __int16 v31 = 2080;
      *(void *)int v32 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v21 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(void *)&void v32[6] = "virtual void AMCP::DAL::Sample_Setter<float>::subtract_sample(size_t, size_t, float) [T = float]";
    uint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v34 = 138;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    uint64_t v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*(void *)(v4 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v10 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      long long v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)uint64_t v28 = 2080;
      *(void *)&_OWORD v28[2] = "Sample_Format_Handler.h";
      __int16 v29 = 1024;
      int v30 = 139;
      __int16 v31 = 2080;
      *(void *)int v32 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v21 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(void *)&void v32[6] = "virtual void AMCP::DAL::Sample_Setter<float>::subtract_sample(size_t, size_t, float) [T = float]";
    uint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v34 = 139;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    uint64_t v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v5 = *(void *)(v4 + 16 * a2);
  float result = *(float *)(v5 + 4 * a3) - a4;
  *(float *)(v5 + 4 * a3) = result;
  return result;
}

void sub_1BAC926B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

float AMCP::DAL::Sample_Setter<float>::add_sample(AMCP::Log::Scope_Registry *a1, unint64_t a2, unint64_t a3, float a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a1 + 1);
  if (a2 >= (*((void *)a1 + 2) - v4) >> 4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v7 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)uint64_t v28 = 2080;
      *(void *)&_OWORD v28[2] = "Sample_Format_Handler.h";
      __int16 v29 = 1024;
      int v30 = 132;
      __int16 v31 = 2080;
      *(void *)int v32 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v21 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(void *)&void v32[6] = "virtual void AMCP::DAL::Sample_Setter<float>::add_sample(size_t, size_t, float) [T = float]";
    uint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v34 = 132;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    uint64_t v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*(void *)(v4 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v10 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      long long v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)uint64_t v28 = 2080;
      *(void *)&_OWORD v28[2] = "Sample_Format_Handler.h";
      __int16 v29 = 1024;
      int v30 = 133;
      __int16 v31 = 2080;
      *(void *)int v32 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v21 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(void *)&void v32[6] = "virtual void AMCP::DAL::Sample_Setter<float>::add_sample(size_t, size_t, float) [T = float]";
    uint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v34 = 133;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    uint64_t v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v5 = *(void *)(v4 + 16 * a2);
  float result = *(float *)(v5 + 4 * a3) + a4;
  *(float *)(v5 + 4 * a3) = result;
  return result;
}

void sub_1BAC92BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

AMCP::Log::Scope_Registry *AMCP::DAL::Sample_Setter<float>::set_sample(AMCP::Log::Scope_Registry *result, unint64_t a2, unint64_t a3, float a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)result + 1);
  if (a2 >= (*((void *)result + 2) - v4) >> 4)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v5 = **(NSObject ***)buf;
    if (*(void *)v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v26);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = pthread_self();
      mach_port_t v7 = pthread_mach_thread_np(v6);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)char v26 = 2080;
      *(void *)&BOOL v26[2] = "Sample_Format_Handler.h";
      __int16 v27 = 1024;
      int v28 = 126;
      __int16 v29 = 2080;
      *(void *)int v30 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v16);
    std::logic_error::logic_error(&v17, &v16);
    v17.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v18, &v17);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v23 = -1;
    v18.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    std::logic_error v19 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v18);
    *(void *)&void v30[6] = "virtual void AMCP::DAL::Sample_Setter<float>::set_sample(size_t, size_t, float) [T = float]";
    __int16 v31 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v32 = 126;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
    long long v14 = v11;
    uint64_t v15 = v12;
    long long v11 = 0uLL;
    uint64_t v12 = 0;
    long long v13 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*(void *)(v4 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v8 = **(NSObject ***)buf;
    if (*(void *)v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v26);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)char v26 = 2080;
      *(void *)&BOOL v26[2] = "Sample_Format_Handler.h";
      __int16 v27 = 1024;
      int v28 = 127;
      __int16 v29 = 2080;
      *(void *)int v30 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v16);
    std::logic_error::logic_error(&v17, &v16);
    v17.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v18, &v17);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v23 = -1;
    v18.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    std::logic_error v19 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v18);
    *(void *)&void v30[6] = "virtual void AMCP::DAL::Sample_Setter<float>::set_sample(size_t, size_t, float) [T = float]";
    __int16 v31 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v32 = 127;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
    long long v14 = v11;
    uint64_t v15 = v12;
    long long v11 = 0uLL;
    uint64_t v12 = 0;
    long long v13 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  *(float *)(*(void *)(v4 + 16 * a2) + 4 * a3) = a4;
  return result;
}

void sub_1BAC93140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Sample_Setter<float>::length_in_frames(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)a1 + 1);
  if (v1 == *((void *)a1 + 2))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v3 = **(NSObject ***)buf;
    if (*(void *)v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v21);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = pthread_self();
      mach_port_t v5 = pthread_mach_thread_np(v4);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v5;
      *(_WORD *)uint64_t v21 = 2080;
      *(void *)&v21[2] = "Sample_Format_Handler.h";
      __int16 v22 = 1024;
      int v23 = 121;
      __int16 v24 = 2080;
      *(void *)int v25 = "not (not m_sample_group.empty())";
      _os_log_error_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v19);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v11);
    std::logic_error::logic_error(&v12, &v11);
    v12.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v13, &v12);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = -1;
    v13.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v14 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v13);
    *(void *)&v25[6] = "virtual size_t AMCP::DAL::Sample_Setter<float>::length_in_frames() const [T = float]";
    char v26 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v27 = 121;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v6);
    long long v9 = v6;
    uint64_t v10 = v7;
    long long v6 = 0uLL;
    uint64_t v7 = 0;
    uint64_t v8 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return *(void *)(v1 + 8);
}

void sub_1BAC93458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Sample_Setter<float>::numbers_of_channel_streams(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4;
}

void AMCP::DAL::Sample_Setter<float>::~Sample_Setter(void *a1)
{
  *a1 = &unk_1F1468C10;
  CFTypeRef v2 = (caulk::rt_safe_memory_resource *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](v2, (uint64_t)(a1[3] - (void)v2) >> 4);
  }

  JUMPOUT(0x1C1859840);
}

void *AMCP::DAL::Sample_Setter<float>::~Sample_Setter(void *a1)
{
  *a1 = &unk_1F1468C10;
  CFTypeRef v2 = (caulk::rt_safe_memory_resource *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](v2, (uint64_t)(a1[3] - (void)v2) >> 4);
  }
  return a1;
}

float AMCP::DAL::Sample_Setter<int>::get_sample(AMCP::Log::Scope_Registry *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)a1 + 1);
  if (a2 >= (*((void *)a1 + 2) - v3) >> 4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v5 = **(NSObject ***)buf;
    if (*(void *)v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v26);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      long long v6 = pthread_self();
      mach_port_t v7 = pthread_mach_thread_np(v6);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)char v26 = 2080;
      *(void *)&BOOL v26[2] = "Sample_Format_Handler.h";
      __int16 v27 = 1024;
      int v28 = 144;
      __int16 v29 = 2080;
      *(void *)int v30 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v16);
    std::logic_error::logic_error(&v17, &v16);
    v17.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v18, &v17);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v23 = -1;
    v18.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    char v19 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v18);
    *(void *)&void v30[6] = "virtual float AMCP::DAL::Sample_Setter<int>::get_sample(size_t, size_t) [T = int]";
    __int16 v31 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v32 = 144;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
    long long v14 = v11;
    uint64_t v15 = v12;
    long long v11 = 0uLL;
    uint64_t v12 = 0;
    std::logic_error v13 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*(void *)(v3 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v8 = **(NSObject ***)buf;
    if (*(void *)v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v26);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      long long v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)char v26 = 2080;
      *(void *)&BOOL v26[2] = "Sample_Format_Handler.h";
      __int16 v27 = 1024;
      int v28 = 145;
      __int16 v29 = 2080;
      *(void *)int v30 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v16);
    std::logic_error::logic_error(&v17, &v16);
    v17.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v18, &v17);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v23 = -1;
    v18.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    char v19 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v18);
    *(void *)&void v30[6] = "virtual float AMCP::DAL::Sample_Setter<int>::get_sample(size_t, size_t) [T = int]";
    __int16 v31 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v32 = 145;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
    long long v14 = v11;
    uint64_t v15 = v12;
    long long v11 = 0uLL;
    uint64_t v12 = 0;
    std::logic_error v13 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return (double)*(int *)(*(void *)(v3 + 16 * a2) + 4 * a3) / 2147483650.0;
}

void sub_1BAC93A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

double AMCP::DAL::Sample_Setter<int>::subtract_sample(AMCP::Log::Scope_Registry *a1, unint64_t a2, unint64_t a3, float a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a1 + 1);
  if (a2 >= (*((void *)a1 + 2) - v4) >> 4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v6 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)__int16 v27 = 2080;
      *(void *)&uint64_t v27[2] = "Sample_Format_Handler.h";
      __int16 v28 = 1024;
      int v29 = 138;
      __int16 v30 = 2080;
      *(void *)__int16 v31 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v20 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&void v31[6] = "virtual void AMCP::DAL::Sample_Setter<int>::subtract_sample(size_t, size_t, float) [T = int]";
    int v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v33 = 138;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    long long v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*(void *)(v4 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v9 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)__int16 v27 = 2080;
      *(void *)&uint64_t v27[2] = "Sample_Format_Handler.h";
      __int16 v28 = 1024;
      int v29 = 139;
      __int16 v30 = 2080;
      *(void *)__int16 v31 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v20 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&void v31[6] = "virtual void AMCP::DAL::Sample_Setter<int>::subtract_sample(size_t, size_t, float) [T = int]";
    int v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v33 = 139;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    long long v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double result = fminf(fmaxf(a4, -1.0), 1.0) * 2147483650.0;
  *(_DWORD *)(*(void *)(v4 + 16 * a2) + 4 * a3) -= (int)result;
  return result;
}

void sub_1BAC93FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

double AMCP::DAL::Sample_Setter<int>::add_sample(AMCP::Log::Scope_Registry *a1, unint64_t a2, unint64_t a3, float a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a1 + 1);
  if (a2 >= (*((void *)a1 + 2) - v4) >> 4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v6 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)__int16 v27 = 2080;
      *(void *)&uint64_t v27[2] = "Sample_Format_Handler.h";
      __int16 v28 = 1024;
      int v29 = 132;
      __int16 v30 = 2080;
      *(void *)__int16 v31 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v20 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&void v31[6] = "virtual void AMCP::DAL::Sample_Setter<int>::add_sample(size_t, size_t, float) [T = int]";
    int v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v33 = 132;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    long long v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*(void *)(v4 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v9 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)__int16 v27 = 2080;
      *(void *)&uint64_t v27[2] = "Sample_Format_Handler.h";
      __int16 v28 = 1024;
      int v29 = 133;
      __int16 v30 = 2080;
      *(void *)__int16 v31 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v20 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&void v31[6] = "virtual void AMCP::DAL::Sample_Setter<int>::add_sample(size_t, size_t, float) [T = int]";
    int v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v33 = 133;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    long long v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double result = fminf(fmaxf(a4, -1.0), 1.0) * 2147483650.0;
  *(_DWORD *)(*(void *)(v4 + 16 * a2) + 4 * a3) += (int)result;
  return result;
}

void sub_1BAC9456C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

double AMCP::DAL::Sample_Setter<int>::set_sample(AMCP::Log::Scope_Registry *a1, unint64_t a2, unint64_t a3, float a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a1 + 1);
  if (a2 >= (*((void *)a1 + 2) - v4) >> 4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v6 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)__int16 v27 = 2080;
      *(void *)&uint64_t v27[2] = "Sample_Format_Handler.h";
      __int16 v28 = 1024;
      int v29 = 126;
      __int16 v30 = 2080;
      *(void *)__int16 v31 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v20 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&void v31[6] = "virtual void AMCP::DAL::Sample_Setter<int>::set_sample(size_t, size_t, float) [T = int]";
    int v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v33 = 126;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    long long v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*(void *)(v4 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v9 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)__int16 v27 = 2080;
      *(void *)&uint64_t v27[2] = "Sample_Format_Handler.h";
      __int16 v28 = 1024;
      int v29 = 127;
      __int16 v30 = 2080;
      *(void *)__int16 v31 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v20 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&void v31[6] = "virtual void AMCP::DAL::Sample_Setter<int>::set_sample(size_t, size_t, float) [T = int]";
    int v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v33 = 127;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    long long v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double result = fminf(fmaxf(a4, -1.0), 1.0) * 2147483650.0;
  *(_DWORD *)(*(void *)(v4 + 16 * a2) + 4 * a3) = (int)result;
  return result;
}

void sub_1BAC94AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Sample_Setter<int>::length_in_frames(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)a1 + 1);
  if (v1 == *((void *)a1 + 2))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v3 = **(NSObject ***)buf;
    if (*(void *)v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v21);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = pthread_self();
      mach_port_t v5 = pthread_mach_thread_np(v4);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v5;
      *(_WORD *)uint64_t v21 = 2080;
      *(void *)&v21[2] = "Sample_Format_Handler.h";
      __int16 v22 = 1024;
      int v23 = 121;
      __int16 v24 = 2080;
      *(void *)char v25 = "not (not m_sample_group.empty())";
      _os_log_error_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v19);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v11);
    std::logic_error::logic_error(&v12, &v11);
    v12.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v13, &v12);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = -1;
    v13.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v14 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v13);
    *(void *)&v25[6] = "virtual size_t AMCP::DAL::Sample_Setter<int>::length_in_frames() const [T = int]";
    char v26 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v27 = 121;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v6);
    long long v9 = v6;
    uint64_t v10 = v7;
    long long v6 = 0uLL;
    uint64_t v7 = 0;
    mach_port_t v8 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return *(void *)(v1 + 8);
}

void sub_1BAC94DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Sample_Setter<int>::numbers_of_channel_streams(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4;
}

void AMCP::DAL::Sample_Setter<int>::~Sample_Setter(void *a1)
{
  *a1 = &unk_1F1468BA8;
  CFTypeRef v2 = (caulk::rt_safe_memory_resource *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<int>>>::deallocate[abi:ne180100](v2, (uint64_t)(a1[3] - (void)v2) >> 4);
  }

  JUMPOUT(0x1C1859840);
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<int>>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  if (!(a2 >> 60))
  {
    CFTypeRef v2 = result;
    double result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
    }
  }
  __break(1u);
  return result;
}

void *AMCP::DAL::Sample_Setter<int>::~Sample_Setter(void *a1)
{
  *a1 = &unk_1F1468BA8;
  CFTypeRef v2 = (caulk::rt_safe_memory_resource *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<int>>>::deallocate[abi:ne180100](v2, (uint64_t)(a1[3] - (void)v2) >> 4);
  }
  return a1;
}

float AMCP::DAL::Sample_Setter<short>::get_sample(AMCP::Log::Scope_Registry *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)a1 + 1);
  if (a2 >= (*((void *)a1 + 2) - v3) >> 4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v5 = **(NSObject ***)buf;
    if (*(void *)v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v26);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      long long v6 = pthread_self();
      mach_port_t v7 = pthread_mach_thread_np(v6);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)char v26 = 2080;
      *(void *)&BOOL v26[2] = "Sample_Format_Handler.h";
      __int16 v27 = 1024;
      int v28 = 144;
      __int16 v29 = 2080;
      *(void *)__int16 v30 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v16);
    std::logic_error::logic_error(&v17, &v16);
    v17.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v18, &v17);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v23 = -1;
    v18.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    char v19 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v18);
    *(void *)&void v30[6] = "virtual float AMCP::DAL::Sample_Setter<short>::get_sample(size_t, size_t) [T = short]";
    __int16 v31 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v32 = 144;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
    long long v14 = v11;
    uint64_t v15 = v12;
    long long v11 = 0uLL;
    uint64_t v12 = 0;
    std::logic_error v13 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*(void *)(v3 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v8 = **(NSObject ***)buf;
    if (*(void *)v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v26);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      long long v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)char v26 = 2080;
      *(void *)&BOOL v26[2] = "Sample_Format_Handler.h";
      __int16 v27 = 1024;
      int v28 = 145;
      __int16 v29 = 2080;
      *(void *)__int16 v30 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v16);
    std::logic_error::logic_error(&v17, &v16);
    v17.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v18, &v17);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v23 = -1;
    v18.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    char v19 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v18);
    *(void *)&void v30[6] = "virtual float AMCP::DAL::Sample_Setter<short>::get_sample(size_t, size_t) [T = short]";
    __int16 v31 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v32 = 145;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
    long long v14 = v11;
    uint64_t v15 = v12;
    long long v11 = 0uLL;
    uint64_t v12 = 0;
    std::logic_error v13 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return (double)*(__int16 *)(*(void *)(v3 + 16 * a2) + 2 * a3) / 32767.0;
}

void sub_1BAC95468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

double AMCP::DAL::Sample_Setter<short>::subtract_sample(AMCP::Log::Scope_Registry *a1, unint64_t a2, unint64_t a3, float a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a1 + 1);
  if (a2 >= (*((void *)a1 + 2) - v4) >> 4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v6 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)__int16 v27 = 2080;
      *(void *)&uint64_t v27[2] = "Sample_Format_Handler.h";
      __int16 v28 = 1024;
      int v29 = 138;
      __int16 v30 = 2080;
      *(void *)__int16 v31 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v20 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&void v31[6] = "virtual void AMCP::DAL::Sample_Setter<short>::subtract_sample(size_t, size_t, float) [T = short]";
    int v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v33 = 138;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    long long v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*(void *)(v4 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v9 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)__int16 v27 = 2080;
      *(void *)&uint64_t v27[2] = "Sample_Format_Handler.h";
      __int16 v28 = 1024;
      int v29 = 139;
      __int16 v30 = 2080;
      *(void *)__int16 v31 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v20 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&void v31[6] = "virtual void AMCP::DAL::Sample_Setter<short>::subtract_sample(size_t, size_t, float) [T = short]";
    int v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v33 = 139;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    long long v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double result = fminf(fmaxf(a4, -1.0), 1.0) * 32767.0;
  *(_WORD *)(*(void *)(v4 + 16 * a2) + 2 * a3) -= (int)result;
  return result;
}

void sub_1BAC959D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

double AMCP::DAL::Sample_Setter<short>::add_sample(AMCP::Log::Scope_Registry *a1, unint64_t a2, unint64_t a3, float a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a1 + 1);
  if (a2 >= (*((void *)a1 + 2) - v4) >> 4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v6 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)__int16 v27 = 2080;
      *(void *)&uint64_t v27[2] = "Sample_Format_Handler.h";
      __int16 v28 = 1024;
      int v29 = 132;
      __int16 v30 = 2080;
      *(void *)__int16 v31 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v20 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&void v31[6] = "virtual void AMCP::DAL::Sample_Setter<short>::add_sample(size_t, size_t, float) [T = short]";
    int v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v33 = 132;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    long long v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*(void *)(v4 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v9 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)__int16 v27 = 2080;
      *(void *)&uint64_t v27[2] = "Sample_Format_Handler.h";
      __int16 v28 = 1024;
      int v29 = 133;
      __int16 v30 = 2080;
      *(void *)__int16 v31 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v20 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&void v31[6] = "virtual void AMCP::DAL::Sample_Setter<short>::add_sample(size_t, size_t, float) [T = short]";
    int v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v33 = 133;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    long long v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double result = fminf(fmaxf(a4, -1.0), 1.0) * 32767.0;
  *(_WORD *)(*(void *)(v4 + 16 * a2) + 2 * a3) += (int)result;
  return result;
}

void sub_1BAC95F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

double AMCP::DAL::Sample_Setter<short>::set_sample(AMCP::Log::Scope_Registry *a1, unint64_t a2, unint64_t a3, float a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a1 + 1);
  if (a2 >= (*((void *)a1 + 2) - v4) >> 4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v6 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)__int16 v27 = 2080;
      *(void *)&uint64_t v27[2] = "Sample_Format_Handler.h";
      __int16 v28 = 1024;
      int v29 = 126;
      __int16 v30 = 2080;
      *(void *)__int16 v31 = "not (stream < m_sample_group.size())";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v20 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&void v31[6] = "virtual void AMCP::DAL::Sample_Setter<short>::set_sample(size_t, size_t, float) [T = short]";
    int v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v33 = 126;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    long long v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*(void *)(v4 + 16 * a2 + 8) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v9 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)__int16 v27 = 2080;
      *(void *)&uint64_t v27[2] = "Sample_Format_Handler.h";
      __int16 v28 = 1024;
      int v29 = 127;
      __int16 v30 = 2080;
      *(void *)__int16 v31 = "not (index < m_sample_group[stream].m_number_of_samples)";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v20 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&void v31[6] = "virtual void AMCP::DAL::Sample_Setter<short>::set_sample(size_t, size_t, float) [T = short]";
    int v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v33 = 127;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    long long v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double result = fminf(fmaxf(a4, -1.0), 1.0) * 32767.0;
  *(_WORD *)(*(void *)(v4 + 16 * a2) + 2 * a3) = (int)result;
  return result;
}

void sub_1BAC964B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Sample_Setter<short>::length_in_frames(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)a1 + 1);
  if (v1 == *((void *)a1 + 2))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v3 = **(NSObject ***)buf;
    if (*(void *)v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v21);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = pthread_self();
      mach_port_t v5 = pthread_mach_thread_np(v4);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v5;
      *(_WORD *)uint64_t v21 = 2080;
      *(void *)&v21[2] = "Sample_Format_Handler.h";
      __int16 v22 = 1024;
      int v23 = 121;
      __int16 v24 = 2080;
      *(void *)char v25 = "not (not m_sample_group.empty())";
      _os_log_error_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v19);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v11);
    std::logic_error::logic_error(&v12, &v11);
    v12.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v13, &v12);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = -1;
    v13.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v14 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v13);
    *(void *)&v25[6] = "virtual size_t AMCP::DAL::Sample_Setter<short>::length_in_frames() const [T = short]";
    char v26 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Sample_Format_Handler.h";
    int v27 = 121;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v6);
    long long v9 = v6;
    uint64_t v10 = v7;
    long long v6 = 0uLL;
    uint64_t v7 = 0;
    mach_port_t v8 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return *(void *)(v1 + 8);
}

void sub_1BAC967C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Sample_Setter<short>::numbers_of_channel_streams(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4;
}

void AMCP::DAL::Sample_Setter<short>::~Sample_Setter(void *a1)
{
  *a1 = &unk_1F1468B30;
  CFTypeRef v2 = (caulk::rt_safe_memory_resource *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<short>>>::deallocate[abi:ne180100](v2, (uint64_t)(a1[3] - (void)v2) >> 4);
  }

  JUMPOUT(0x1C1859840);
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<short>>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  if (!(a2 >> 60))
  {
    CFTypeRef v2 = result;
    double result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
    }
  }
  __break(1u);
  return result;
}

void *AMCP::DAL::Sample_Setter<short>::~Sample_Setter(void *a1)
{
  *a1 = &unk_1F1468B30;
  CFTypeRef v2 = (caulk::rt_safe_memory_resource *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<short>>>::deallocate[abi:ne180100](v2, (uint64_t)(a1[3] - (void)v2) >> 4);
  }
  return a1;
}

void AMCP::Null_Driver::~Null_Driver(AMCP::Null_Driver *this)
{
  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

AMCP::Object *AMCP::Null_Driver::Null_Driver(AMCP::Object *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Null-Driver", 27, 0x8000100u, 0);
  if (!cf)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Driver::Driver((uint64_t)a1, a2, (uint64_t)&cf);
  if (cf) {
    CFRelease(cf);
  }
  *(void *)a1 = &unk_1F1468CD0;
  uint64_t v4 = AMCP::Object::constructed_correct_class(a1, (AMCP *)0x6E756C6C);
  if ((v4 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v6 = **(NSObject ***)buf;
    if (*(void *)v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v12);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)std::logic_error v12 = 2080;
      *(void *)&uint64_t v12[2] = "Null_Driver.cpp";
      __int16 v13 = 1024;
      int v14 = 25;
      __int16 v15 = 2080;
      uint64_t v16 = "constructed_correct_class(k_class_id_null_driver)";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", buf, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1BAC96BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *uint64_t v10 = &unk_1F145F4E8;
  std::logic_error v12 = (std::__shared_weak_count *)v10[3];
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Null_Driver::create_objects(AMCP::Null_Driver *this@<X0>, const applesauce::CF::ArrayRef *a2@<X1>, void *a3@<X8>)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  mach_port_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v5 && (uint64_t v7 = std::__shared_weak_count::lock(v5)) != 0)
  {
    mach_port_t v8 = v7;
    long long v9 = (int8x8_t *)*((void *)this + 2);
    if (v9)
    {
      uint64_t v25 = 0x676C6F626E756C6CLL;
      int v26 = 0;
      operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v27, v9, (unsigned int *)&v25);
      std::string v11 = v27;
      if (!v27)
      {
        AMCP::Log::Scope_Registry::get(operation);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        char v19 = **(NSObject ***)buf;
        if (*(void *)v44) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v44);
        }
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          uint64_t v20 = pthread_self();
          mach_port_t v21 = pthread_mach_thread_np(v20);
          *(_DWORD *)AudioObjectPropertyAddress buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v21;
          *(_WORD *)int v44 = 2080;
          *(void *)&v44[2] = "Core.h";
          __int16 v45 = 1024;
          int v46 = 202;
          _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v42);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v34);
        std::runtime_error::runtime_error(&v35, &v34);
        std::runtime_error::runtime_error(&v36, &v35);
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        int v41 = -1;
        v36.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        AudioObjectPropertyAddress v37 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
        uint64_t v47 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Ty"
              "pe = std::vector<unsigned int>, Argument_Types = <const applesauce::CF::ArrayRef &>]";
        long long v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
        int v49 = 202;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v29);
        long long v32 = v29;
        uint64_t v33 = v30;
        long long v29 = 0uLL;
        uint64_t v30 = 0;
        __int16 v31 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      unint64_t v12 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>>();
      __int16 v13 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v11, v12);
      if (!v13)
      {
        AMCP::Log::Scope_Registry::get(0);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        __int16 v22 = **(NSObject ***)buf;
        if (*(void *)v44) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v44);
        }
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          int v23 = pthread_self();
          mach_port_t v24 = pthread_mach_thread_np(v23);
          *(_DWORD *)AudioObjectPropertyAddress buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v24;
          *(_WORD *)int v44 = 2080;
          *(void *)&v44[2] = "Operation.h";
          __int16 v45 = 1024;
          int v46 = 154;
          _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v42);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v34);
        std::runtime_error::runtime_error(&v35, &v34);
        std::runtime_error::runtime_error(&v36, &v35);
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        int v41 = -1;
        v36.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        AudioObjectPropertyAddress v37 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
        uint64_t v47 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::vector<unsig"
              "ned int>, Argument_Types = <const applesauce::CF::ArrayRef &>]";
        long long v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        int v49 = 154;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v29);
        long long v32 = v29;
        uint64_t v33 = v30;
        long long v29 = 0uLL;
        uint64_t v30 = 0;
        __int16 v31 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      int v14 = v13;
      if (!*((void *)v13 + 7)
        || (*(void *)AudioObjectPropertyAddress buf = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>>(),
            (__int16 v13 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v14 + 7))(4, (uint64_t)v14 + 24, 0, buf)) == 0))
      {
        AMCP::Log::Scope_Registry::get(v13);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v16 = **(NSObject ***)buf;
        if (*(void *)v44) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v44);
        }
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          uint64_t v17 = pthread_self();
          mach_port_t v18 = pthread_mach_thread_np(v17);
          *(_DWORD *)AudioObjectPropertyAddress buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v18;
          *(_WORD *)int v44 = 2080;
          *(void *)&v44[2] = "Operation.h";
          __int16 v45 = 1024;
          int v46 = 161;
          _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v42);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v34);
        std::runtime_error::runtime_error(&v35, &v34);
        std::runtime_error::runtime_error(&v36, &v35);
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        int v41 = -1;
        v36.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        AudioObjectPropertyAddress v37 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
        uint64_t v47 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::vector<unsig"
              "ned int>, Argument_Types = <const applesauce::CF::ArrayRef &>]";
        long long v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        int v49 = 161;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v29);
        long long v32 = v29;
        uint64_t v33 = v30;
        long long v29 = 0uLL;
        uint64_t v30 = 0;
        __int16 v31 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      uint64_t v15 = *((void *)v13 + 3);
      if (!v15) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, const applesauce::CF::ArrayRef *))(*(void *)v15 + 48))(v15, a2);
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_1BAC97398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::runtime_error a26,char a27)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>>()
{
  uint64_t v0 = &unk_1E9F79000;
  {
    uint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      uint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[307];
}

void AMCP::Null_Driver::destroy_objects(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3)
  {
    mach_port_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      long long v6 = v5;
      uint64_t v7 = *(int8x8_t **)(a1 + 16);
      if (v7)
      {
        uint64_t v11 = 0x676C6F626E756C6CLL;
        int v12 = 0;
        AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v27, v7, (unsigned int *)&v11);
        if (!v27)
        {
          AMCP::Log::Scope_Registry::get(0);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          mach_port_t v8 = **(NSObject ***)buf;
          if (*(void *)v30) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
          }
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            long long v9 = pthread_self();
            mach_port_t v10 = pthread_mach_thread_np(v9);
            *(_DWORD *)AudioObjectPropertyAddress buf = 67109634;
            *(_DWORD *)&uint8_t buf[4] = v10;
            *(_WORD *)uint64_t v30 = 2080;
            *(void *)&unsigned int v30[2] = "Core.h";
            __int16 v31 = 1024;
            int v32 = 202;
            _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v18);
          std::runtime_error::runtime_error(&v19, &v18);
          std::runtime_error::runtime_error(&v20, &v19);
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          int v25 = -1;
          v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
          mach_port_t v21 = &unk_1F148A9D0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
          uint64_t v33 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_"
                "Type = void, Argument_Types = <const std::vector<unsigned int> &>]";
          std::string v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
          int v35 = 202;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
          long long v16 = v13;
          uint64_t v17 = v14;
          long long v13 = 0uLL;
          uint64_t v14 = 0;
          uint64_t v15 = &unk_1F148AA90;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
        }
        AMCP::Core::Operation::call_function<void,std::vector<unsigned int> const&>(v27, a2);
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1BAC977B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  int v27 = *(std::__shared_weak_count **)(v25 - 136);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  __clang_call_terminate(exception_object);
}

uint64_t HALS_IOUAEngine::_WriteToStream_Write(void *a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  mach_port_t v10 = *(char **)(a3 + 168);
  unint64_t v11 = *(unsigned int *)(a1[96] + 16);
  if (*(_DWORD *)(a3 + 128) == 1667326771) {
    uint64_t v12 = 4;
  }
  else {
    uint64_t v12 = *(unsigned int *)(a3 + 144);
  }
  unint64_t v13 = (unint64_t)*(double *)(a4 + 144) % v11;
  uint64_t v14 = a5;
  if (v13 + a5 <= v11) {
    unint64_t v15 = a5;
  }
  else {
    unint64_t v15 = v11 - v13;
  }
  if (*(void *)a6) {
    long long v16 = (char *)(*(void *)a6 + *(unsigned int *)(a6 + 8));
  }
  else {
    long long v16 = 0;
  }
  memcpy(&v10[v13 * v12], v16, v15 * v12);
  if (v14 != v15) {
    memcpy(v10, &v16[v15 * v12], (v14 - v15) * v12);
  }
  _X0 = (AMCP::Log::Scope_Registry *)*(double *)(a4 + 80);
  std::string v18 = (uint64_t *)a1[146];
  uint64_t v19 = *v18;
  do
  {
    _X5 = v18[1];
    __asm { CASP            X4, X5, X0, X1, [X8] }
    _ZF = _X4 == v19;
    uint64_t v19 = _X4;
  }
  while (!_ZF);
  uint64_t v24 = a1[150];
  if (!v24) {
    goto LABEL_26;
  }
  uint64_t v25 = a1 + 150;
  do
  {
    unsigned int v26 = *(_DWORD *)(v24 + 32);
    _CF = v26 >= a2;
    if (v26 >= a2) {
      uint64_t v28 = (uint64_t *)v24;
    }
    else {
      uint64_t v28 = (uint64_t *)(v24 + 8);
    }
    if (_CF) {
      uint64_t v25 = (void *)v24;
    }
    uint64_t v24 = *v28;
  }
  while (*v28);
  if (v25 == a1 + 150 || *((_DWORD *)v25 + 8) > a2)
  {
LABEL_26:
    AMCP::Log::Scope_Registry::get(_X0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v29 = **(NSObject ***)buf;
    if (*(void *)v58) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v58);
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = pthread_self();
      mach_port_t v31 = pthread_mach_thread_np(v30);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v31;
      *(_WORD *)int v58 = 2080;
      *(void *)&v58[2] = "HALS_IOUAEngine.cpp";
      __int16 v59 = 1024;
      int v60 = 355;
      __int16 v61 = 2080;
      *(void *)uint64_t v62 = "io_ipc_info_iter == m_io_ipc_info_map.end()";
      *(_WORD *)&v62[8] = 2048;
      *(void *)&v62[10] = a2;
      _os_log_error_impl(&dword_1BAA78000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to find IOThread, io ipc info not found, context id %lu", buf, 0x2Cu);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v49, "Failed to find IOThread, io ipc info not found");
    std::runtime_error::runtime_error(&v50, &v49);
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    int v55 = -1;
    v50.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    unint64_t v51 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
    *(void *)&v62[6] = "virtual int HALS_IOUAEngine::_WriteToStream_Write(AudioObjectID, HALS_IOEngine2_StreamInfo &, c"
                         "onst AudioServerPlugInIOCycleInfo &, UInt32, const HALS_BufferInfo &)";
    *(void *)&v62[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAEngine.cpp";
    int v63 = 355;
    std::vector<void *>::vector(&v44);
    int v32 = backtrace((void **)v44, (*((void *)&v44 + 1) - (void)v44) >> 3);
    std::vector<void *>::resize((char **)&v44, v32);
    int v46 = &unk_1F148AA90;
    long long v47 = v44;
    uint64_t v48 = v45;
    long long v44 = 0uLL;
    uint64_t v45 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v33 = (double *)v25[5];
  std::string v34 = (std::__shared_weak_count *)v25[6];
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v35 = a1[148];
  *(_DWORD *)uint64_t v35 = a5;
  *(_DWORD *)(v35 + 24) = 1;
  *(void *)(v35 + 8) = (unint64_t)*(double *)(a4 + 144);
  *(void *)(v35 + 16) = *(void *)(a4 + 152);
  unint64_t v36 = caulk::mach::os_eventlink::timed_wait_signal_or_error((caulk::mach::os_eventlink *)v33, (double)a5 / v33[9]);
  _ZF = (v36 & 0xFF00000000) == 0 || v36 == 0;
  if (_ZF)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v36);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v38 = *(caulk::concurrent::messenger **)(*(void *)buf + 8);
    uint64_t v39 = pthread_self();
    mach_port_t v40 = pthread_mach_thread_np(v39);
    uint64_t v41 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
    *(_DWORD *)(v41 + 16) = 0;
    *(unsigned char *)(v41 + 20) = 16;
    *(_DWORD *)(v41 + 24) = v40;
    *(void *)(v41 + 32) = "HALS_IOUAEngine.cpp";
    *(_DWORD *)(v41 + 40) = 372;
    *(void *)uint64_t v41 = &unk_1F1469328;
    *(void *)(v41 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v38, (caulk::concurrent::message *)v41);
    if (*(void *)v58) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v58);
    }
    uint64_t v42 = 2003329396;
    if (v34) {
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v42 = 0;
    if (v34) {
LABEL_43:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  return v42;
}

void sub_1BAC97E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,uint64_t a29)
{
  if (a28.__imp_.__imp_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a28.__imp_.__imp_);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOUAEngine::_WriteToStream_Write(unsigned int,HALS_IOEngine2_StreamInfo &,AudioServerPlugInIOCycleInfo const&,unsigned int,HALS_BufferInfo const&)::$_0,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  int v2 = *v8;
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    LODWORD(v8) = 67109634;
    HIDWORD(v8) = v4;
    *(_WORD *)long long v9 = 2080;
    *(void *)&void v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Timed out signalling event link", (uint8_t *)&v8, 0x18u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAC9806C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOUAEngine::_WriteToStream_Write(unsigned int,HALS_IOEngine2_StreamInfo &,AudioServerPlugInIOCycleInfo const&,unsigned int,HALS_BufferInfo const&)::$_0,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void HALS_IOUAEngine::_ReadFromStream_Read(AMCP::Log::Scope_Registry *a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (*(void *)a6)
  {
    uint64_t v8 = *((void *)a1 + 150);
    if (!v8) {
      goto LABEL_13;
    }
    uint64_t v12 = (char *)(*(void *)a6 + *(unsigned int *)(a6 + 8));
    unint64_t v13 = (void *)((char *)a1 + 1200);
    do
    {
      unsigned int v14 = *(_DWORD *)(v8 + 32);
      _CF = v14 >= a2;
      if (v14 >= a2) {
        long long v16 = (uint64_t *)v8;
      }
      else {
        long long v16 = (uint64_t *)(v8 + 8);
      }
      if (_CF) {
        unint64_t v13 = (void *)v8;
      }
      uint64_t v8 = *v16;
    }
    while (*v16);
    if (v13 == (void *)((char *)a1 + 1200) || *((_DWORD *)v13 + 8) > a2)
    {
LABEL_13:
      AMCP::Log::Scope_Registry::get(a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v17 = **(NSObject ***)buf;
      if (*(void *)v57) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v57);
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        std::string v18 = pthread_self();
        mach_port_t v19 = pthread_mach_thread_np(v18);
        *(_DWORD *)AudioObjectPropertyAddress buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v19;
        *(_WORD *)int v57 = 2080;
        *(void *)&v57[2] = "HALS_IOUAEngine.cpp";
        __int16 v58 = 1024;
        int v59 = 263;
        __int16 v60 = 2080;
        *(void *)__int16 v61 = "io_ipc_info_iter == m_io_ipc_info_map.end()";
        *(_WORD *)&v61[8] = 2048;
        *(void *)&v61[10] = a2;
        _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to find IOThread, io ipc info not found, context id %lu", buf, 0x2Cu);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v55);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v48, "Failed to find IOThread, io ipc info not found");
      std::runtime_error::runtime_error(&v49, &v48);
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      int v54 = -1;
      v49.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      std::runtime_error v50 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v49);
      *(void *)&v61[6] = "virtual void HALS_IOUAEngine::_ReadFromStream_Read(AudioObjectID, HALS_IOEngine2_StreamInfo &"
                           ", const AudioServerPlugInIOCycleInfo &, UInt32, const HALS_BufferInfo &)";
      *(void *)&v61[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAEngine.cpp";
      int v62 = 263;
      std::vector<void *>::vector(&v43);
      int v20 = backtrace((void **)v43, (*((void *)&v43 + 1) - (void)v43) >> 3);
      std::vector<void *>::resize((char **)&v43, v20);
      uint64_t v45 = &unk_1F148AA90;
      long long v46 = v43;
      uint64_t v47 = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    mach_port_t v21 = (double *)v13[5];
    uint64_t v22 = (std::__shared_weak_count *)v13[6];
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v23 = *((void *)a1 + 148);
    *(_DWORD *)uint64_t v23 = a5;
    *(_DWORD *)(v23 + 24) = 0;
    *(void *)(v23 + 8) = (unint64_t)*(double *)(a4 + 80);
    *(void *)(v23 + 16) = *(void *)(a4 + 88);
    unint64_t v24 = caulk::mach::os_eventlink::timed_wait_signal_or_error((caulk::mach::os_eventlink *)v21, (double)a5 / v21[9]);
    _ZF = (v24 & 0xFF00000000) == 0 || v24 == 0;
    if (_ZF)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v24);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unsigned int v26 = *(caulk::concurrent::messenger **)(*(void *)buf + 8);
      int v27 = pthread_self();
      mach_port_t v28 = pthread_mach_thread_np(v27);
      uint64_t v29 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
      *(_DWORD *)(v29 + 16) = 0;
      *(unsigned char *)(v29 + 20) = 16;
      *(_DWORD *)(v29 + 24) = v28;
      *(void *)(v29 + 32) = "HALS_IOUAEngine.cpp";
      *(_DWORD *)(v29 + 40) = 280;
      *(void *)uint64_t v29 = &unk_1F14692D0;
      *(void *)(v29 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v26, (caulk::concurrent::message *)v29);
      if (*(void *)v57) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v57);
      }
    }
    double v30 = *(double *)(a4 + 80);
    if (v30 >= 0.0)
    {
      mach_port_t v31 = *(char **)(a3 + 168);
      unint64_t v32 = *(unsigned int *)(*((void *)a1 + 96) + 16);
      if (*(_DWORD *)(a3 + 128) == 1667326771) {
        uint64_t v33 = 4;
      }
      else {
        uint64_t v33 = *(unsigned int *)(a3 + 144);
      }
      unint64_t v34 = (unint64_t)v30 % v32;
      if (v34 + a5 <= v32) {
        unint64_t v35 = a5;
      }
      else {
        unint64_t v35 = v32 - v34;
      }
      memcpy(v12, &v31[v34 * v33], v35 * v33);
      if (a5 != v35) {
        memcpy(&v12[v35 * v33], v31, (a5 - v35) * v33);
      }
    }
    else
    {
      bzero(v12, a5);
    }
    _X0 = (unint64_t)*(double *)(a4 + 80);
    AudioObjectPropertyAddress v37 = (uint64_t *)*((void *)a1 + 146);
    uint64_t v38 = *v37;
    do
    {
      _X5 = v37[1];
      __asm { CASP            X4, X5, X0, X1, [X8] }
      _ZF = _X4 == v38;
      uint64_t v38 = _X4;
    }
    while (!_ZF);
    if (v22)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
}

void sub_1BAC986A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,uint64_t a29)
{
  if (a28.__imp_.__imp_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a28.__imp_.__imp_);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOUAEngine::_ReadFromStream_Read(unsigned int,HALS_IOEngine2_StreamInfo &,AudioServerPlugInIOCycleInfo const&,unsigned int,HALS_BufferInfo const&)::$_0,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  int v2 = *v8;
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    LODWORD(v8) = 67109634;
    HIDWORD(v8) = v4;
    *(_WORD *)long long v9 = 2080;
    *(void *)&void v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Timed out signalling event link", (uint8_t *)&v8, 0x18u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAC988E8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOUAEngine::_ReadFromStream_Read(unsigned int,HALS_IOEngine2_StreamInfo &,AudioServerPlugInIOCycleInfo const&,unsigned int,HALS_BufferInfo const&)::$_0,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

AMCP::Log::Scope_Registry *HALS_IOUAEngine::_TellHardwareToStop(uint64_t a1)
{
  input[2] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 1128);
  input[0] = *(unsigned int *)(a1 + 1120);
  input[1] = 0;
  double result = (AMCP::Log::Scope_Registry *)IOConnectCallMethod(*(_DWORD *)(v1 + 4), 0xAu, input, 2u, 0, 0, 0, 0, 0, 0);
  int v3 = (int)result;
  if (result)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v4 = **(NSObject ***)buf;
    if (*(void *)v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v21);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = pthread_self();
      mach_port_t v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)mach_port_t v21 = 2080;
      *(void *)&v21[2] = "HALS_IOUAUCDriver.cpp";
      __int16 v22 = 1024;
      int v23 = 488;
      __int16 v24 = 2080;
      *(void *)uint64_t v25 = "ret != kIOReturnSuccess";
      *(_WORD *)&v25[8] = 1024;
      *(_DWORD *)&void v25[10] = v3;
      _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to stop device %u", buf, 0x28u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v19);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v12, "Failed to stop device");
    std::runtime_error::runtime_error(&v13, &v12);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = -1;
    v13.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    unsigned int v14 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v13);
    *(void *)&v25[6] = "void HALS_IOUAUCDriver::stop_io(AudioObjectID, AudioDriverKit::IOUserAudioStartStopFlags)";
    unsigned int v26 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v27 = 488;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    long long v9 = &unk_1F148AA90;
    long long v10 = v7;
    uint64_t v11 = v8;
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  return result;
}

void sub_1BAC98BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,std::runtime_error a22,char a23)
{
  if (a2)
  {
    if (__p) {
      operator delete(__p);
    }
    if (a14) {
      operator delete(a14);
    }
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 144);
    boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
    std::runtime_error::~runtime_error(&a22);
    if (a13) {
      __cxa_free_exception(v23);
    }
    AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 145));
    int v27 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v27);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v25 - 144), "com.apple.coreaudio", "AMCP");
    mach_port_t v28 = *(std::__shared_weak_count **)(v25 - 136);
    uint64_t v29 = **(NSObject ***)(v25 - 144);
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      double v30 = pthread_self();
      mach_port_t v31 = pthread_mach_thread_np(v30);
      *(_DWORD *)(v25 - 144) = 67109634;
      *(_DWORD *)(v25 - 140) = v31;
      *(_WORD *)(v25 - 136) = 2080;
      *(void *)(v24 + 10) = "HALS_IOUAEngine.cpp";
      *(_WORD *)(v25 - 126) = 1024;
      *(_DWORD *)(v25 - 124) = 220;
      _os_log_error_impl(&dword_1BAA78000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception while stopping IO!", (uint8_t *)(v25 - 144), 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAC9899CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOUAEngine::_TellHardwareToStart(uint64_t a1)
{
  input[2] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 1128);
  input[0] = *(unsigned int *)(a1 + 1120);
  input[1] = 0;
  int v2 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod(*(_DWORD *)(v1 + 4), 9u, input, 2u, 0, 0, 0, 0, 0, 0);
  int v3 = (int)v2;
  if (v2)
  {
    AMCP::Log::Scope_Registry::get(v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v5 = **(NSObject ***)buf;
    if (*(void *)v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v6 = pthread_self();
      mach_port_t v7 = pthread_mach_thread_np(v6);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)__int16 v22 = 2080;
      *(void *)&void v22[2] = "HALS_IOUAUCDriver.cpp";
      __int16 v23 = 1024;
      int v24 = 481;
      __int16 v25 = 2080;
      *(void *)unsigned int v26 = "ret != kIOReturnSuccess";
      *(_WORD *)&v26[8] = 1024;
      *(_DWORD *)&unsigned char v26[10] = v3;
      _os_log_error_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to start device %u", buf, 0x28u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v13, "Failed to start device");
    std::runtime_error::runtime_error(&v14, &v13);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = -1;
    v14.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v15 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(void *)&v26[6] = "void HALS_IOUAUCDriver::start_io(AudioObjectID, AudioDriverKit::IOUserAudioStartStopFlags)";
    int v27 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v28 = 481;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v8);
    long long v10 = &unk_1F148AA90;
    long long v11 = v8;
    uint64_t v12 = v9;
    long long v8 = 0uLL;
    uint64_t v9 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  return 0;
}

void sub_1BAC98FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,std::runtime_error a22,char a23)
{
  if (a2)
  {
    if (__p) {
      operator delete(__p);
    }
    if (a14) {
      operator delete(a14);
    }
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 144);
    boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
    std::runtime_error::~runtime_error(&a22);
    if (a13) {
      __cxa_free_exception(v23);
    }
    AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 145));
    int v27 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v27);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v25 - 144), "com.apple.coreaudio", "AMCP");
    int v28 = *(std::__shared_weak_count **)(v25 - 136);
    uint64_t v29 = **(NSObject ***)(v25 - 144);
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      double v30 = pthread_self();
      mach_port_t v31 = pthread_mach_thread_np(v30);
      *(_DWORD *)(v25 - 144) = 67109634;
      *(_DWORD *)(v25 - 140) = v31;
      *(_WORD *)(v25 - 136) = 2080;
      *(void *)(v24 + 10) = "HALS_IOUAEngine.cpp";
      *(_WORD *)(v25 - 126) = 1024;
      *(_DWORD *)(v25 - 124) = 205;
      _os_log_error_impl(&dword_1BAA78000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception while starting IO!", (uint8_t *)(v25 - 144), 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAC98D90);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOEngine2::get_timebase@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 1088);
  *a2 = *(void *)(this + 1080);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t HALS_IOUAEngine::EndIOCycle(HALS_IOUAEngine *this, unsigned int a2, const HALS_IOEngineInfo *a3)
{
  return 0;
}

uint64_t HALS_IOUAEngine::BeginIOCycle(HALS_IOUAEngine *this, unsigned int a2, const HALS_IOEngineInfo *a3)
{
  return 0;
}

uint64_t HALS_IOUAEngine::Unregister_IOThread(HALS_IOUAEngine *this, unsigned int a2, unsigned int a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  int v4 = (char *)*((void *)this + 150);
  if (!v4) {
    goto LABEL_20;
  }
  mach_port_t v6 = (char *)this + 1200;
  do
  {
    unsigned int v7 = *((_DWORD *)v4 + 8);
    BOOL v8 = v7 >= a3;
    if (v7 >= a3) {
      uint64_t v9 = (char **)v4;
    }
    else {
      uint64_t v9 = (char **)(v4 + 8);
    }
    if (v8) {
      mach_port_t v6 = v4;
    }
    int v4 = *v9;
  }
  while (*v9);
  if (v6 == (char *)this + 1200 || *((_DWORD *)v6 + 8) > a3)
  {
LABEL_20:
    uint64_t v29 = (char *)this + 1200;
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v17 = **(NSObject ***)buf;
    if (*(void *)v44) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v44);
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = pthread_self();
      mach_port_t v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v19;
      *(_WORD *)uint64_t v44 = 2080;
      *(void *)&v44[2] = "HALS_IOUAEngine.cpp";
      __int16 v45 = 1024;
      int v46 = 173;
      __int16 v47 = 2080;
      *(void *)std::runtime_error v48 = "io_ipc_info_iter == m_io_ipc_info_map.end()";
      *(_WORD *)&v48[8] = 2048;
      *(void *)&v48[10] = a3;
      _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to unregister IOThread, io ipc info not found, client id %lu", buf, 0x2Cu);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v35);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&input, "Failed to unregister IOThread, io ipc info not found");
    std::runtime_error::runtime_error(&v36, &input);
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    int v41 = -1;
    v36.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    AudioObjectPropertyAddress v37 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
    *(void *)&v48[6] = "virtual OSStatus HALS_IOUAEngine::Unregister_IOThread(AudioObjectID, UInt32)";
    *(void *)&v48[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAEngine.cpp";
    int v49 = 173;
    std::vector<void *>::vector(&v30);
    int v20 = backtrace((void **)v30, (*((void *)&v30 + 1) - (void)v30) >> 3);
    std::vector<void *>::resize((char **)&v30, v20);
    unint64_t v32 = &unk_1F148AA90;
    long long v33 = v30;
    uint64_t v34 = v31;
    long long v30 = 0uLL;
    uint64_t v31 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  v28[0] = (uint64_t)this;
  v28[1] = (uint64_t)&v29;
  uint64_t v29 = v6;
  long long v10 = (caulk::mach::os_eventlink *)*((void *)v6 + 5);
  long long v11 = (std::__shared_weak_count *)*((void *)v6 + 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(void *)v10)
  {
    uint64_t v12 = (AMCP::Log::Scope_Registry *)caulk::mach::os_eventlink::dissociate(v10);
    if (v12)
    {
      int v24 = (int)v12;
      AMCP::Log::Scope_Registry::get(v12);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v25 = **(NSObject ***)buf;
      if (*(void *)v44) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v44);
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        unsigned int v26 = pthread_self();
        mach_port_t v27 = pthread_mach_thread_np(v26);
        *(_DWORD *)AudioObjectPropertyAddress buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v27;
        *(_WORD *)uint64_t v44 = 2080;
        *(void *)&v44[2] = "HALS_IOUAEngine.cpp";
        __int16 v45 = 1024;
        int v46 = 182;
        __int16 v47 = 2080;
        *(void *)std::runtime_error v48 = "error != 0";
        *(_WORD *)&v48[8] = 2048;
        *(void *)&v48[10] = v24;
        _os_log_error_impl(&dword_1BAA78000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to disassociate event link %li", buf, 0x2Cu);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v35);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&input, "Failed to disassociate event link");
      std::runtime_error::runtime_error(&v36, &input);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      int v41 = -1;
      v36.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      AudioObjectPropertyAddress v37 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
      *(void *)&v48[6] = "virtual OSStatus HALS_IOUAEngine::Unregister_IOThread(AudioObjectID, UInt32)";
      *(void *)&v48[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAEngine.cpp";
      int v49 = 182;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v30);
      unint64_t v32 = &unk_1F148AA90;
      long long v33 = v30;
      uint64_t v34 = v31;
      long long v30 = 0uLL;
      uint64_t v31 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
  }
  uint64_t v13 = *((void *)this + 141);
  input.__vftable = (std::runtime_error_vtbl *)*((unsigned int *)this + 280);
  input.__imp_.__imp_ = (const char *)a3;
  std::runtime_error v14 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod(*(_DWORD *)(v13 + 4), 0x12u, (const uint64_t *)&input, 2u, 0, 0, 0, 0, 0, 0);
  int v15 = (int)v14;
  if (v14)
  {
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v21 = **(NSObject ***)buf;
    if (*(void *)v44) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v44);
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      __int16 v22 = pthread_self();
      mach_port_t v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v23;
      *(_WORD *)uint64_t v44 = 2080;
      *(void *)&v44[2] = "HALS_IOUAUCDriver.cpp";
      __int16 v45 = 1024;
      int v46 = 527;
      __int16 v47 = 2080;
      *(void *)std::runtime_error v48 = "ret != kIOReturnSuccess";
      *(_WORD *)&v48[8] = 1024;
      *(_DWORD *)&v48[10] = v15;
      _os_log_error_impl(&dword_1BAA78000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to unregister io thread %u", buf, 0x28u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v42);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v35, "Failed to unregister io thread");
    std::runtime_error::runtime_error(&v36, &v35);
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    int v41 = -1;
    v36.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    AudioObjectPropertyAddress v37 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
    *(void *)&v48[6] = "void HALS_IOUAUCDriver::unregister_io_thread(AudioObjectID, AudioObjectID)";
    *(void *)&v48[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v49 = 527;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v30);
    unint64_t v32 = &unk_1F148AA90;
    long long v33 = v30;
    uint64_t v34 = v31;
    long long v30 = 0uLL;
    uint64_t v31 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOUAEngine::Unregister_IOThread(unsigned int,unsigned int)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(v28);
  return 0;
}

void sub_1BAC99870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,std::runtime_error a23,std::runtime_error a24,uint64_t a25)
{
  if (a2)
  {
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    applesauce::raii::v1::detail::ScopeGuard<HALS_IOUAEngine::Unregister_IOThread(unsigned int,unsigned int)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(&a12);
    uint64_t v29 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v29);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v27 - 160), "com.apple.coreaudio", "AMCP");
    long long v30 = *(std::__shared_weak_count **)(v27 - 152);
    uint64_t v31 = **(NSObject ***)(v27 - 160);
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      unint64_t v32 = pthread_self();
      mach_port_t v33 = pthread_mach_thread_np(v32);
      *(_DWORD *)(v27 - 160) = 67109634;
      *(_DWORD *)(v27 - 156) = v33;
      *(_WORD *)(v27 - 152) = 2080;
      *(void *)(v26 + 10) = "HALS_IOUAEngine.cpp";
      *(_WORD *)(v27 - 142) = 1024;
      *(_DWORD *)(v27 - 140) = 189;
      _os_log_error_impl(&dword_1BAA78000, v31, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Failed to unregister io thread!", (uint8_t *)(v27 - 160), 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAC99258);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAC99B28()
{
}

void sub_1BAC99B30()
{
}

uint64_t *applesauce::raii::v1::detail::ScopeGuard<HALS_IOUAEngine::Unregister_IOThread(unsigned int,unsigned int)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = (uint64_t **)a1[1];
  int v4 = *v3;
  uint64_t v5 = (uint64_t *)(*v3)[1];
  if (v5)
  {
    do
    {
      mach_port_t v6 = v5;
      uint64_t v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  else
  {
    unsigned int v7 = *v3;
    do
    {
      mach_port_t v6 = (uint64_t *)v7[2];
      BOOL v8 = *v6 == (void)v7;
      unsigned int v7 = v6;
    }
    while (!v8);
  }
  if (*(uint64_t **)(v2 + 1192) == v4) {
    *(void *)(v2 + 1192) = v6;
  }
  --*(void *)(v2 + 1208);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 1200), v4);
  uint64_t v9 = (std::__shared_weak_count *)v4[6];
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  operator delete(v4);
  return a1;
}

uint64_t HALS_IOUAEngine::Register_IOThread(uint64_t **this, unsigned int a2, uint64_t a3, double a4, unsigned int a5, int a6)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  if (a4 <= 0.0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v92, "com.apple.coreaudio", "AMCP");
    __int16 v47 = *(NSObject **)v92.__r_.__value_.__l.__data_;
    if (v92.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v92.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      std::runtime_error v48 = pthread_self();
      mach_port_t v49 = pthread_mach_thread_np(v48);
      LODWORD(v92.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v92.__r_.__value_.__r.__words[0]) = v49;
      LOWORD(v92.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v92.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_IOUAEngine.cpp";
      WORD1(v92.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v92.__r_.__value_.__r.__words[2]) = 129;
      __int16 v93 = 2080;
      *(void *)float32x4_t v94 = "inNominalSampleRate <= 0.0";
      _os_log_error_impl(&dword_1BAA78000, v47, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid nominal sample rate", (uint8_t *)&v92, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v80);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v81, "Invalid nominal sample rate");
    std::runtime_error::runtime_error((std::runtime_error *)&v84, &v81);
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    uint64_t v87 = 0;
    int v88 = -1;
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148A9A8;
    v84.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v92, (uint64_t)&v84);
    *(void *)&v94[6] = "virtual OSStatus HALS_IOUAEngine::Register_IOThread(AudioObjectID, UInt32, Float64, UInt32, mach_port_t)";
    *(void *)&v94[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAEngine.cpp";
    int v95 = 129;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v90);
    long long v97 = *(_OWORD *)v90;
    uint64_t input = (uint64_t)&unk_1F148AA90;
    uint64_t v98 = *(void *)&v90[16];
    memset(v90, 0, sizeof(v90));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  long long v10 = (uint64_t *)(this + 150);
  long long v11 = this[150];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)(this + 150);
    do
    {
      unsigned int v13 = *((_DWORD *)v11 + 8);
      BOOL v14 = v13 >= a3;
      if (v13 >= a3) {
        int v15 = (uint64_t **)v11;
      }
      else {
        int v15 = (uint64_t **)(v11 + 1);
      }
      if (v14) {
        uint64_t v12 = v11;
      }
      long long v11 = *v15;
    }
    while (*v15);
    if (v12 != v10 && *((_DWORD *)v12 + 8) <= a3)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v92, "com.apple.coreaudio", "AMCP");
      std::runtime_error v50 = *(NSObject **)v92.__r_.__value_.__l.__data_;
      if (v92.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v92.__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      {
        uint64_t v51 = pthread_self();
        mach_port_t v52 = pthread_mach_thread_np(v51);
        LODWORD(v92.__r_.__value_.__l.__data_) = 67110146;
        HIDWORD(v92.__r_.__value_.__r.__words[0]) = v52;
        LOWORD(v92.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v92.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_IOUAEngine.cpp";
        WORD1(v92.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v92.__r_.__value_.__r.__words[2]) = 134;
        __int16 v93 = 2080;
        *(void *)float32x4_t v94 = "io_ipc_info_iter != m_io_ipc_info_map.end()";
        *(_WORD *)&v94[8] = 2048;
        *(void *)&v94[10] = a3;
        _os_log_error_impl(&dword_1BAA78000, v50, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s IOContext %lu is already registered", (uint8_t *)&v92, 0x2Cu);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v80);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v81, "IOContext is already registered");
      std::runtime_error::runtime_error((std::runtime_error *)&v84, &v81);
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      uint64_t v87 = 0;
      int v88 = -1;
      v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148A9A8;
      v84.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v92, (uint64_t)&v84);
      *(void *)&v94[6] = "virtual OSStatus HALS_IOUAEngine::Register_IOThread(AudioObjectID, UInt32, Float64, UInt32, mach_port_t)";
      *(void *)&v94[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAEngine.cpp";
      int v95 = 134;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v90);
      long long v97 = *(_OWORD *)v90;
      uint64_t input = (uint64_t)&unk_1F148AA90;
      uint64_t v98 = *(void *)&v90[16];
      memset(v90, 0, sizeof(v90));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
  }
  if (!a6)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v92, "com.apple.coreaudio", "AMCP");
    uint64_t v53 = *(NSObject **)v92.__r_.__value_.__l.__data_;
    if (v92.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v92.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      int v54 = pthread_self();
      mach_port_t v55 = pthread_mach_thread_np(v54);
      LODWORD(v92.__r_.__value_.__l.__data_) = 67110146;
      HIDWORD(v92.__r_.__value_.__r.__words[0]) = v55;
      LOWORD(v92.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v92.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_IOUAEngine.cpp";
      WORD1(v92.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v92.__r_.__value_.__r.__words[2]) = 137;
      __int16 v93 = 2080;
      *(void *)float32x4_t v94 = "error || (ioc_workgroup_mach_port == MACH_PORT_NULL)";
      *(_WORD *)&v94[8] = 2048;
      *(void *)&v94[10] = 0;
      _os_log_error_impl(&dword_1BAA78000, v53, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to copy workgroup mach port %li", (uint8_t *)&v92, 0x2Cu);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v80);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v81, "Failed to copy workgroup mach port");
    std::runtime_error::runtime_error((std::runtime_error *)&v84, &v81);
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    uint64_t v87 = 0;
    int v88 = -1;
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148A9A8;
    v84.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v92, (uint64_t)&v84);
    *(void *)&v94[6] = "virtual OSStatus HALS_IOUAEngine::Register_IOThread(AudioObjectID, UInt32, Float64, UInt32, mach_port_t)";
    *(void *)&v94[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAEngine.cpp";
    int v95 = 137;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v90);
    long long v97 = *(_OWORD *)v90;
    uint64_t input = (uint64_t)&unk_1F148AA90;
    uint64_t v98 = *(void *)&v90[16];
    memset(v90, 0, sizeof(v90));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  caulk::make_string((caulk *)"eventlink-%u-%u", (uint64_t)&v80, *((unsigned int *)this + 280), a3);
  caulk::make_string((caulk *)"workgroup-%u-%u", (uint64_t)&__p, *((unsigned int *)this + 280), a3);
  uint64_t v16 = (std::__shared_weak_count *)operator new(0x68uLL);
  v16->__shared_owners_ = 0;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1469280;
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v92, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
  }
  else {
    std::string v92 = v80;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v84, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v84 = __p;
  }
  caulk::mach::os_eventlink::make();
  caulk::mach::os_workgroup_managed::make();
  *(double *)&v16[4].__vftable = a4;
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v84.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v92.__r_.__value_.__l.__data_);
  }
  *(void *)&long long v17 = v16 + 1;
  *((void *)&v17 + 1) = v16;
  long long v78 = v17;
  atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v18 = *v10;
  mach_port_t v19 = v10;
  if (*v10)
  {
    while (1)
    {
      while (1)
      {
        mach_port_t v19 = (uint64_t *)v18;
        unsigned int v20 = *(_DWORD *)(v18 + 32);
        if (v20 <= a3) {
          break;
        }
        uint64_t v18 = *v19;
        long long v10 = v19;
        if (!*v19) {
          goto LABEL_31;
        }
      }
      if (v20 >= a3) {
        break;
      }
      uint64_t v18 = v19[1];
      if (!v18)
      {
        long long v10 = v19 + 1;
        goto LABEL_31;
      }
    }
  }
  else
  {
LABEL_31:
    mach_port_t v21 = (char *)operator new(0x38uLL);
    *((_DWORD *)v21 + 8) = a3;
    *(_OWORD *)(v21 + 40) = v78;
    *(void *)mach_port_t v21 = 0;
    *((void *)v21 + 1) = 0;
    *((void *)v21 + 2) = v19;
    *long long v10 = (uint64_t)v21;
    __int16 v22 = (uint64_t *)*this[149];
    if (v22)
    {
      this[149] = v22;
      mach_port_t v21 = (char *)*v10;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[150], (uint64_t *)v21);
    this[151] = (uint64_t *)((char *)this[151] + 1);
    *((void *)&v17 + 1) = 0;
  }
  if (*((void *)&v17 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
  }
  mach_port_t v23 = this[141];
  uint64_t v24 = a3;
  uint64_t input = *((unsigned int *)this + 280);
  *(void *)&long long v97 = a3;
  uint64_t v25 = a5;
  *((void *)&v97 + 1) = (unint64_t)a4;
  uint64_t v98 = a5;
  uint64_t v26 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod(*((_DWORD *)v23 + 1), 0x11u, &input, 4u, 0, 0, 0, 0, 0, 0);
  int v27 = (int)v26;
  if (v26)
  {
    AMCP::Log::Scope_Registry::get(v26);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v92, "com.apple.coreaudio", "AMCP");
    char v56 = *(NSObject **)v92.__r_.__value_.__l.__data_;
    if (v92.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v92.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      int v57 = pthread_self();
      mach_port_t v58 = pthread_mach_thread_np(v57);
      LODWORD(v92.__r_.__value_.__l.__data_) = 67110146;
      HIDWORD(v92.__r_.__value_.__r.__words[0]) = v58;
      LOWORD(v92.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v92.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_IOUAUCDriver.cpp";
      WORD1(v92.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v92.__r_.__value_.__r.__words[2]) = 520;
      __int16 v93 = 2080;
      *(void *)float32x4_t v94 = "ret != kIOReturnSuccess";
      *(_WORD *)&v94[8] = 1024;
      *(_DWORD *)&v94[10] = v27;
      _os_log_error_impl(&dword_1BAA78000, v56, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to register io thread %u", (uint8_t *)&v92, 0x28u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v89);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v83, "Failed to register io thread");
    std::runtime_error::runtime_error((std::runtime_error *)&v84, &v83);
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    uint64_t v87 = 0;
    int v88 = -1;
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148A9A8;
    v84.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v92, (uint64_t)&v84);
    *(void *)&v94[6] = "void HALS_IOUAUCDriver::register_io_thread(AudioObjectID, AudioObjectID, double, uint32_t)";
    *(void *)&v94[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v95 = 520;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v81);
    *(std::runtime_error *)&v90[8] = v81;
    *(void *)mach_port_t v90 = &unk_1F148AA90;
    uint64_t v91 = v82;
    v81.__vftable = 0;
    v81.__imp_.__imp_ = 0;
    uint64_t v82 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  int v28 = this[141];
  uint64_t v29 = (AMCP::Log::Scope_Registry *)caulk::mach::os_eventlink::copy_mach_port((caulk::mach::os_eventlink *)&v16[1]);
  if (!v29)
  {
    AMCP::Log::Scope_Registry::get(v29);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v92, "com.apple.coreaudio", "AMCP");
    int v59 = *(NSObject **)v92.__r_.__value_.__l.__data_;
    if (v92.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v92.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      __int16 v60 = pthread_self();
      mach_port_t v61 = pthread_mach_thread_np(v60);
      LODWORD(v92.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v92.__r_.__value_.__r.__words[0]) = v61;
      LOWORD(v92.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v92.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_IOUAUCDriver.cpp";
      WORD1(v92.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v92.__r_.__value_.__r.__words[2]) = 493;
      __int16 v93 = 2080;
      *(void *)float32x4_t v94 = "in_eventlink_mach_port == MACH_PORT_NULL";
      _os_log_error_impl(&dword_1BAA78000, v59, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid eventlink mach port", (uint8_t *)&v92, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v83);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v81, "Invalid eventlink mach port");
    std::runtime_error::runtime_error((std::runtime_error *)&v84, &v81);
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    uint64_t v87 = 0;
    int v88 = -1;
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148A9A8;
    v84.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v92, (uint64_t)&v84);
    *(void *)&v94[6] = "void HALS_IOUAUCDriver::register_eventlink(const std::string &, mach_port_t)";
    *(void *)&v94[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v95 = 493;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v90);
    long long v97 = *(_OWORD *)v90;
    uint64_t input = (uint64_t)&unk_1F148AA90;
    uint64_t v98 = *(void *)&v90[16];
    memset(v90, 0, sizeof(v90));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unsigned int v30 = v29;
  io_connect_t v31 = *((_DWORD *)v28 + 1);
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v32 = &v80;
  }
  else {
    unint64_t v32 = (std::string *)v80.__r_.__value_.__r.__words[0];
  }
  uintptr_t v33 = strlen((const char *)v32);
  uint64_t v34 = (AMCP::Log::Scope_Registry *)IOConnectTrap3(v31, 0, (uintptr_t)v32, v33, v30);
  if (v34)
  {
    AMCP::Log::Scope_Registry::get(v34);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v92, "com.apple.coreaudio", "AMCP");
    int v62 = *(NSObject **)v92.__r_.__value_.__l.__data_;
    if (v92.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v92.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      uint64_t v63 = pthread_self();
      mach_port_t v64 = pthread_mach_thread_np(v63);
      LODWORD(v92.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v92.__r_.__value_.__r.__words[0]) = v64;
      LOWORD(v92.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v92.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_IOUAUCDriver.cpp";
      WORD1(v92.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v92.__r_.__value_.__r.__words[2]) = 500;
      __int16 v93 = 2080;
      *(void *)float32x4_t v94 = "ret != kIOReturnSuccess";
      _os_log_error_impl(&dword_1BAA78000, v62, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to register event link", (uint8_t *)&v92, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v83);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v81, "Failed to register event link");
    std::runtime_error::runtime_error((std::runtime_error *)&v84, &v81);
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    uint64_t v87 = 0;
    int v88 = -1;
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148A9A8;
    v84.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v92, (uint64_t)&v84);
    *(void *)&v94[6] = "void HALS_IOUAUCDriver::register_eventlink(const std::string &, mach_port_t)";
    *(void *)&v94[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v95 = 500;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v90);
    long long v97 = *(_OWORD *)v90;
    uint64_t input = (uint64_t)&unk_1F148AA90;
    uint64_t v98 = *(void *)&v90[16];
    memset(v90, 0, sizeof(v90));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  std::runtime_error v35 = this[141];
  std::runtime_error v36 = (AMCP::Log::Scope_Registry *)caulk::mach::os_workgroup_managed::copy_mach_port((caulk::mach::os_workgroup_managed *)&v16[1].__shared_owners_);
  if (!v36)
  {
    AMCP::Log::Scope_Registry::get(v36);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v92, "com.apple.coreaudio", "AMCP");
    BOOL v65 = *(NSObject **)v92.__r_.__value_.__l.__data_;
    if (v92.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v92.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      int v66 = pthread_self();
      mach_port_t v67 = pthread_mach_thread_np(v66);
      LODWORD(v92.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v92.__r_.__value_.__r.__words[0]) = v67;
      LOWORD(v92.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v92.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_IOUAUCDriver.cpp";
      WORD1(v92.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v92.__r_.__value_.__r.__words[2]) = 505;
      __int16 v93 = 2080;
      *(void *)float32x4_t v94 = "in_workgroup_mach_port == MACH_PORT_NULL";
      _os_log_error_impl(&dword_1BAA78000, v65, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid workgroup mach port", (uint8_t *)&v92, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v83);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v81, "Invalid workgroup mach port");
    std::runtime_error::runtime_error((std::runtime_error *)&v84, &v81);
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    uint64_t v87 = 0;
    int v88 = -1;
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148A9A8;
    v84.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v92, (uint64_t)&v84);
    *(void *)&v94[6] = "void HALS_IOUAUCDriver::register_workgroup(const std::string &, mach_port_t)";
    *(void *)&v94[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v95 = 505;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v90);
    long long v97 = *(_OWORD *)v90;
    uint64_t input = (uint64_t)&unk_1F148AA90;
    uint64_t v98 = *(void *)&v90[16];
    memset(v90, 0, sizeof(v90));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unsigned int v37 = v36;
  io_connect_t v38 = *((_DWORD *)v35 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uintptr_t v40 = strlen((const char *)p_p);
  int v41 = (AMCP::Log::Scope_Registry *)IOConnectTrap3(v38, 1u, (uintptr_t)p_p, v40, v37);
  if (v41)
  {
    AMCP::Log::Scope_Registry::get(v41);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v92, "com.apple.coreaudio", "AMCP");
    int v68 = *(NSObject **)v92.__r_.__value_.__l.__data_;
    if (v92.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v92.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
    {
      unsigned int v69 = pthread_self();
      mach_port_t v70 = pthread_mach_thread_np(v69);
      LODWORD(v92.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v92.__r_.__value_.__r.__words[0]) = v70;
      LOWORD(v92.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v92.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_IOUAUCDriver.cpp";
      WORD1(v92.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v92.__r_.__value_.__r.__words[2]) = 512;
      __int16 v93 = 2080;
      *(void *)float32x4_t v94 = "ret != kIOReturnSuccess";
      _os_log_error_impl(&dword_1BAA78000, v68, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to register workgroup", (uint8_t *)&v92, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v83);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v81, "Failed to register workgroup");
    std::runtime_error::runtime_error((std::runtime_error *)&v84, &v81);
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    uint64_t v87 = 0;
    int v88 = -1;
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148A9A8;
    v84.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v92, (uint64_t)&v84);
    *(void *)&v94[6] = "void HALS_IOUAUCDriver::register_workgroup(const std::string &, mach_port_t)";
    *(void *)&v94[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v95 = 512;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v90);
    long long v97 = *(_OWORD *)v90;
    uint64_t input = (uint64_t)&unk_1F148AA90;
    uint64_t v98 = *(void *)&v90[16];
    memset(v90, 0, sizeof(v90));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  char v42 = this[141];
  uint64_t input = *((unsigned int *)this + 280);
  *(void *)&long long v97 = v24;
  *((void *)&v97 + 1) = (unint64_t)a4;
  uint64_t v98 = v25;
  long long v43 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod(*((_DWORD *)v42 + 1), 0x13u, &input, 4u, 0, 0, 0, 0, 0, 0);
  int v44 = (int)v43;
  if (v43)
  {
    AMCP::Log::Scope_Registry::get(v43);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v92, "com.apple.coreaudio", "AMCP");
    unsigned int v71 = *(NSObject **)v92.__r_.__value_.__l.__data_;
    if (v92.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v92.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
    {
      uint64_t v72 = pthread_self();
      mach_port_t v73 = pthread_mach_thread_np(v72);
      LODWORD(v92.__r_.__value_.__l.__data_) = 67110146;
      HIDWORD(v92.__r_.__value_.__r.__words[0]) = v73;
      LOWORD(v92.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v92.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_IOUAUCDriver.cpp";
      WORD1(v92.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v92.__r_.__value_.__r.__words[2]) = 534;
      __int16 v93 = 2080;
      *(void *)float32x4_t v94 = "ret != kIOReturnSuccess";
      *(_WORD *)&v94[8] = 1024;
      *(_DWORD *)&v94[10] = v44;
      _os_log_error_impl(&dword_1BAA78000, v71, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to start io thread %u", (uint8_t *)&v92, 0x28u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v89);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v83, "Failed to start io thread");
    std::runtime_error::runtime_error((std::runtime_error *)&v84, &v83);
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    uint64_t v87 = 0;
    int v88 = -1;
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148A9A8;
    v84.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v92, (uint64_t)&v84);
    *(void *)&v94[6] = "void HALS_IOUAUCDriver::start_io_thread(AudioObjectID, AudioObjectID, double, uint32_t)";
    *(void *)&v94[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
    int v95 = 534;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v81);
    *(std::runtime_error *)&v90[8] = v81;
    *(void *)mach_port_t v90 = &unk_1F148AA90;
    uint64_t v91 = v82;
    v81.__vftable = 0;
    v81.__imp_.__imp_ = 0;
    uint64_t v82 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  if (v16[1].__vftable)
  {
    __int16 v45 = (AMCP::Log::Scope_Registry *)caulk::mach::os_eventlink::associate((caulk::mach::os_eventlink *)&v16[1]);
    if (v45)
    {
      int v74 = (int)v45;
      AMCP::Log::Scope_Registry::get(v45);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v92, "com.apple.coreaudio", "AMCP");
      int v75 = *(NSObject **)v92.__r_.__value_.__l.__data_;
      if (v92.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v92.__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
      {
        uint64_t v76 = pthread_self();
        mach_port_t v77 = pthread_mach_thread_np(v76);
        LODWORD(v92.__r_.__value_.__l.__data_) = 67110146;
        HIDWORD(v92.__r_.__value_.__r.__words[0]) = v77;
        LOWORD(v92.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v92.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"HALS_IOUAEngine.cpp";
        WORD1(v92.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v92.__r_.__value_.__r.__words[2]) = 154;
        __int16 v93 = 2080;
        *(void *)float32x4_t v94 = "error != 0";
        *(_WORD *)&v94[8] = 2048;
        *(void *)&v94[10] = v74;
        _os_log_error_impl(&dword_1BAA78000, v75, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to associate event link %li", (uint8_t *)&v92, 0x2Cu);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v83);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v81, "Failed to associate event link");
      std::runtime_error::runtime_error((std::runtime_error *)&v84, &v81);
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      uint64_t v87 = 0;
      int v88 = -1;
      v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148A9A8;
      v84.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v92, (uint64_t)&v84);
      *(void *)&v94[6] = "virtual OSStatus HALS_IOUAEngine::Register_IOThread(AudioObjectID, UInt32, Float64, UInt32, mach_port_t)";
      *(void *)&v94[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAEngine.cpp";
      int v95 = 154;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v90);
      long long v97 = *(_OWORD *)v90;
      uint64_t input = (uint64_t)&unk_1F148AA90;
      uint64_t v98 = *(void *)&v90[16];
      memset(v90, 0, sizeof(v90));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1BAC9B2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,std::runtime_error a25,uint64_t a26,uint64_t a27,std::runtime_error a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,NSObject **buf,long long a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
    if (a18 < 0) {
      operator delete(__p);
    }
    if (a24 < 0) {
      operator delete(a19);
    }
    std::runtime_error v50 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v50);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    uint64_t v51 = *buf;
    if ((void)a41) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a41);
    }
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v52 = pthread_self();
      mach_port_t v53 = pthread_mach_thread_np(v52);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v53;
      LOWORD(a41) = 2080;
      *(void *)((char *)&a41 + 2) = "HALS_IOUAEngine.cpp";
      WORD5(a41) = 1024;
      HIDWORD(a41) = 159;
      _os_log_error_impl(&dword_1BAA78000, v51, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Failed to register io thread!", (uint8_t *)&buf, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAC99F88);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<HALS_IOUAEngine::io_ipc_info_t>::__on_zero_shared(uint64_t a1)
{
  caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)(a1 + 32));
  int v3 = *(caulk::mach::details **)(a1 + 24);

  return caulk::mach::details::release_os_object(v3, v2);
}

void std::__shared_ptr_emplace<HALS_IOUAEngine::io_ipc_info_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1469280;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_IOUAEngine::io_ipc_info_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1469280;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t HALS_IOUAEngine::GetZeroTimeStamp(HALS_IOUAEngine *this, unsigned int a2, double *a3, unint64_t *a4, unint64_t *a5)
{
  _X4 = 0;
  _X5 = 0;
  __asm { CASP            X4, X5, X4, X5, [X8] }
  *a3 = (double)_X4;
  *a4 = 0;
  return 0;
}

uint64_t HALS_IOEngine2::UseClockBoundsCheck(HALS_IOEngine2 *this)
{
  return 1;
}

uint64_t HALS_IOEngine2::NeedNoDisplaySleepPowerAssertion(HALS_IOEngine2 *this)
{
  return 0;
}

void HALS_IOUAEngine::~HALS_IOUAEngine(HALS_IOUAEngine *this)
{
  HALS_IOUAEngine::~HALS_IOUAEngine(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  *(void *)this = &unk_1F1468D08;
  uint64_t v2 = *((void *)this + 143);
  if (v2)
  {
    int v3 = *((void *)this + 144);
    if (v3) {
      HALS_IOUAUCDriver::unmap_memory((HALS_IOUAUCDriver *)*(unsigned int *)(*((void *)this + 141) + 4), v2, v3);
    }
  }
  int v4 = *((void *)this + 145);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 146);
    if (v5) {
      HALS_IOUAUCDriver::unmap_memory((HALS_IOUAUCDriver *)*(unsigned int *)(*((void *)this + 141) + 4), v4, v5);
    }
  }
  mach_port_t v6 = *((void *)this + 147);
  if (v6)
  {
    unsigned int v7 = *((void *)this + 148);
    if (v7) {
      HALS_IOUAUCDriver::unmap_memory((HALS_IOUAUCDriver *)*(unsigned int *)(*((void *)this + 141) + 4), v6, v7);
    }
  }
  *(_OWORD *)((char *)this + 1160) = 0u;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1144) = 0u;
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>>>::destroy(*((void **)this + 150));
  *((void *)this + 149) = (char *)this + 1200;
  *((void *)this + 151) = 0;
  *((void *)this + 150) = 0;
  BOOL v8 = (std::__shared_weak_count *)*((void *)this + 142);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  HALS_IOEngine2::~HALS_IOEngine2(this);
}

void sub_1BAC9B860(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, NSObject **a9, long long a10)
{
  if (a2)
  {
    long long v10 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    long long v11 = *a9;
    if ((void)a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a10);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      LODWORD(a9) = 67109634;
      HIDWORD(a9) = v13;
      LOWORD(a10) = 2080;
      *(void *)((char *)&a10 + 2) = "HALS_IOUAEngine.cpp";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 99;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception unmapping engine buffers", (uint8_t *)&a9, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAC9B7F4);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[6];
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    operator delete(a1);
  }
}

void AMCP::IO_Core::Node::update_core(std::string::size_type a1, uint64_t a2)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  LODWORD(v112.__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 8);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v120, 0, (int *)&v112, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v120 + 40), v120);
  if (*(void *)&v120[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v120[8]);
  }
  LODWORD(v112.__r_.__value_.__l.__data_) = (*(uint64_t (**)(std::string::size_type))(*(void *)a1 + 40))(a1);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v120, 0, (int *)&v112, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v120 + 40), v120);
  if (*(void *)&v120[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v120[8]);
  }
  LODWORD(v112.__r_.__value_.__l.__data_) = (*(uint64_t (**)(std::string::size_type))(*(void *)a1 + 40))(a1);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v120, 0, (int *)&v112, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v120 + 40), v120);
  if (*(void *)&v120[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v120[8]);
  }
  LODWORD(v112.__r_.__value_.__l.__data_) = 1;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v120, 0, (int *)&v112, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v120 + 40), v120);
  if (*(void *)&v120[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v120[8]);
  }
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 8);
  *(void *)uint64_t v120 = v4;
  *(_DWORD *)&v120[8] = v5;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>((uint64_t *)&v112, 0, (long long *)v120, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v112.__r_.__value_.__r.__words[0] + 40), &v112);
  if (v112.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v112.__r_.__value_.__l.__size_);
  }
  mach_port_t v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v6 || (v6 = std::__shared_weak_count::lock(v6)) == 0 || (uint64_t v7 = *(void *)(a1 + 16)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v120, "com.apple.coreaudio", "AMCP");
    std::runtime_error v83 = **(NSObject ***)v120;
    if (*(void *)&v120[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v120[8]);
    }
    if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
    {
      std::string v84 = pthread_self();
      mach_port_t v85 = pthread_mach_thread_np(v84);
      *(_DWORD *)uint64_t v120 = 67109890;
      *(_DWORD *)&v120[4] = v85;
      *(_WORD *)&v120[8] = 2080;
      *(void *)&v120[10] = "Node.cpp";
      *(_WORD *)&v120[18] = 1024;
      *(_DWORD *)&v120[20] = 220;
      *(_WORD *)&v120[24] = 2080;
      *(void *)&v120[26] = "not (node.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v83, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid node in core object", v120, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v95);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid node in core object", (uint64_t)&v126);
    std::logic_error::logic_error(&v96, &v126);
    v96.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v112, &v96);
    int v113 = 0;
    uint64_t v114 = 0;
    char v115 = 0;
    int v116 = -1;
    v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v112.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v120, (uint64_t)&v112);
    *(void *)&v120[32] = "virtual void AMCP::IO_Core::Node::update_core(Core::Operation_Set &)";
    uint64_t v121 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Node.cpp";
    int v122 = 220;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v97.__r_.__value_.__l.__data_);
    *(void *)uint64_t v98 = &unk_1F148AA90;
    *(std::string *)&v98[8] = v97;
    memset(&v97, 0, sizeof(v97));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v86 = v6;
  if (*(char *)(v7 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v126, *(const std::string::value_type **)(v7 + 24), *(void *)(v7 + 32));
  }
  else {
    std::string v126 = *(std::string *)(v7 + 24);
  }
  uint64_t v87 = (_OWORD *)(v7 + 24);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v97, 0, 1.5836601e190);
  uint64_t v8 = v97.__r_.__value_.__r.__words[0];
  unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  int v10 = SHIBYTE(v126.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v98, v126.__r_.__value_.__l.__data_, v126.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)uint64_t v98 = v126;
  }
  int v113 = 0;
  long long v11 = (char *)operator new(0x20uLL);
  *(void *)long long v11 = &unk_1F1469440;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)v98;
  *((void *)v11 + 3) = *(void *)&v98[16];
  memset(v98, 0, 24);
  int v113 = (std::string *)v11;
  memset(v120, 0, sizeof(v120));
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v120, (uint64_t)&v112);
  *(void *)&v120[32] = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v8, v9, (AMCP *)v120);
  if (*(void *)&v120[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v120[32])(0, v120, 0, 0);
  }
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::~__value_func[abi:ne180100](&v112);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(v8);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v8 + 40), &v97);
  if (v97.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v97.__r_.__value_.__l.__size_);
  }
  if (v10 < 0) {
    operator delete(v126.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  v111[0] = &unk_1F14695E0;
  v111[3] = v111;
  if (*(char *)(v7 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)(v7 + 24), *(void *)(v7 + 32));
  }
  else
  {
    *(_OWORD *)&v97.__r_.__value_.__l.__data_ = *v87;
    v97.__r_.__value_.__r.__words[2] = *(void *)(v7 + 40);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v96, 0, 1.5836601e190);
  mach_port_t v13 = v96.__vftable;
  int v14 = SHIBYTE(v97.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v112, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else {
    std::string v112 = v97;
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v113, (uint64_t)v111);
  std::string::size_type v93 = a1;
  uint64_t v94 = a2;
  uint64_t v117 = v12;
  uint64_t v118 = 0x676C6F626E64696FLL;
  int v119 = 0;
  unint64_t v15 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>>();
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v120, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)uint64_t v120 = v112;
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v120[24], (uint64_t)&v113);
  uint64_t v123 = v117;
  uint64_t v124 = v118;
  int v125 = v119;
  BOOL v127 = 0;
  uint64_t v16 = (char *)operator new(0x58uLL);
  *(void *)uint64_t v16 = &unk_1F14694C0;
  long long v17 = (std::string *)(v16 + 8);
  if ((v120[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v120, *(std::string::size_type *)&v120[8]);
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)v120;
    *((void *)v16 + 3) = *(void *)&v120[16];
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v16 + 32), (uint64_t)&v120[24]);
  *((void *)v16 + 8) = v123;
  *((void *)v16 + 9) = v124;
  *((_DWORD *)v16 + 20) = v125;
  BOOL v127 = v16;
  memset(v98, 0, sizeof(v98));
  uint64_t v99 = 0;
  std::__function::__value_func<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::__value_func[abi:ne180100]((uint64_t)v98, (uint64_t)&v126);
  uint64_t v99 = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v13, v15, (AMCP *)v98);
  if (v99) {
    v99(0, (uint64_t)v98, 0, 0);
  }
  std::__function::__value_func<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::~__value_func[abi:ne180100](&v126);
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](&v120[24]);
  if ((v120[23] & 0x80000000) != 0) {
    operator delete(*(void **)v120);
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](&v113);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v112.__r_.__value_.__l.__data_);
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_44;
    }
  }
  else if ((v14 & 0x80000000) == 0)
  {
LABEL_44:
    std::string v112 = v97;
    goto LABEL_47;
  }
  std::string::__init_copy_ctor_external(&v112, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
LABEL_47:
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v113, (uint64_t)v111);
  uint64_t v117 = v12;
  unint64_t v18 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>>();
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v120, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)uint64_t v120 = v112;
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v120[24], (uint64_t)&v113);
  uint64_t v123 = v117;
  BOOL v127 = 0;
  mach_port_t v19 = operator new(0x48uLL);
  void *v19 = &unk_1F1469550;
  unsigned int v20 = (std::string *)(v19 + 1);
  if ((v120[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)v120, *(std::string::size_type *)&v120[8]);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)v120;
    uint64_t v19[3] = *(void *)&v120[16];
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v19 + 4), (uint64_t)&v120[24]);
  unsigned char v19[8] = v123;
  BOOL v127 = v19;
  memset(v98, 0, sizeof(v98));
  uint64_t v99 = 0;
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::__value_func[abi:ne180100]((uint64_t)v98, (uint64_t)&v126);
  uint64_t v99 = AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v13, v18, (AMCP *)v98);
  if (v99) {
    v99(0, (uint64_t)v98, 0, 0);
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::~__value_func[abi:ne180100](&v126);
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](&v120[24]);
  if ((v120[23] & 0x80000000) != 0) {
    operator delete(*(void **)v120);
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](&v113);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v112.__r_.__value_.__l.__data_);
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)&v13[1].what, &v96);
  if (v96.__imp_.__imp_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v96.__imp_.__imp_);
  }
  if (v14 < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](v111);
  strcpy(v120, "revobolg");
  v120[9] = 0;
  *(_WORD *)&v120[10] = 0;
  v110[0] = &unk_1F1469790;
  v110[3] = v110;
  AMCP::IO_Core::setup_proc<std::function<void ()>>(a2, (uint64_t)v120, v12, v7, (uint64_t)v110);
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](v110);
  v109[0] = &unk_1F1469940;
  v109[3] = v109;
  if (*(char *)(v7 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)(v7 + 24), *(void *)(v7 + 32));
  }
  else
  {
    *(_OWORD *)&v97.__r_.__value_.__l.__data_ = *v87;
    v97.__r_.__value_.__r.__words[2] = *(void *)(v7 + 40);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v96, 0, 1.58366012e190);
  mach_port_t v21 = v96.__vftable;
  int v22 = SHIBYTE(v97.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v112, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else {
    std::string v112 = v97;
  }
  std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v113, (uint64_t)v109);
  uint64_t v117 = v12;
  uint64_t v118 = 0x676C6F6274686572;
  int v119 = 0;
  unint64_t v23 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(void)>)>>();
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v120, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)uint64_t v120 = v112;
  }
  std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v120[24], (uint64_t)&v113);
  uint64_t v123 = v117;
  uint64_t v124 = v118;
  int v125 = v119;
  BOOL v127 = 0;
  uint64_t v24 = (char *)operator new(0x58uLL);
  *(void *)uint64_t v24 = &unk_1F1469820;
  uint64_t v25 = (std::string *)(v24 + 8);
  if ((v120[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v25, *(const std::string::value_type **)v120, *(std::string::size_type *)&v120[8]);
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v120;
    *((void *)v24 + 3) = *(void *)&v120[16];
  }
  std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v24 + 32), (uint64_t)&v120[24]);
  *((void *)v24 + 8) = v123;
  *((void *)v24 + 9) = v124;
  *((_DWORD *)v24 + 20) = v125;
  BOOL v127 = v24;
  memset(v98, 0, sizeof(v98));
  uint64_t v99 = 0;
  std::__function::__value_func<void ()(std::function<void ()(void)>)>::__value_func[abi:ne180100]((uint64_t)v98, (uint64_t)&v126);
  uint64_t v99 = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(void)>)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v21, v23, (AMCP *)v98);
  if (v99) {
    v99(0, (uint64_t)v98, 0, 0);
  }
  std::__function::__value_func<void ()(std::function<void ()(void)>)>::~__value_func[abi:ne180100](&v126);
  std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](&v120[24]);
  if ((v120[23] & 0x80000000) != 0) {
    operator delete(*(void **)v120);
  }
  std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](&v113);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v112.__r_.__value_.__l.__data_);
    if ((v22 & 0x80000000) == 0) {
      goto LABEL_81;
    }
  }
  else if ((v22 & 0x80000000) == 0)
  {
LABEL_81:
    std::string v112 = v97;
    goto LABEL_84;
  }
  std::string::__init_copy_ctor_external(&v112, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
LABEL_84:
  std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v113, (uint64_t)v109);
  uint64_t v117 = v12;
  unint64_t v26 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(void)> ()(void)>>();
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v120, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)uint64_t v120 = v112;
  }
  std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v120[24], (uint64_t)&v113);
  uint64_t v123 = v117;
  BOOL v127 = 0;
  int v27 = operator new(0x48uLL);
  *int v27 = &unk_1F14698B0;
  int v28 = (std::string *)(v27 + 1);
  if ((v120[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)v120, *(std::string::size_type *)&v120[8]);
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)v120;
    v27[3] = *(void *)&v120[16];
  }
  std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v27 + 4), (uint64_t)&v120[24]);
  v27[8] = v123;
  BOOL v127 = v27;
  memset(v98, 0, sizeof(v98));
  uint64_t v99 = 0;
  std::__function::__value_func<std::function<void ()(void)> ()(void)>::__value_func[abi:ne180100]((uint64_t)v98, (uint64_t)&v126);
  uint64_t v99 = AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(void)> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v21, v26, (AMCP *)v98);
  if (v99) {
    v99(0, (uint64_t)v98, 0, 0);
  }
  std::__function::__value_func<std::function<void ()(void)> ()(void)>::~__value_func[abi:ne180100](&v126);
  std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](&v120[24]);
  if ((v120[23] & 0x80000000) != 0) {
    operator delete(*(void **)v120);
  }
  std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](&v113);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v112.__r_.__value_.__l.__data_);
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)&v21[1].what, &v96);
  if (v96.__imp_.__imp_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v96.__imp_.__imp_);
  }
  if (v22 < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](v109);
  strcpy(v120, "lcerbolg");
  v120[9] = 0;
  *(_WORD *)&v120[10] = 0;
  v108[0] = &unk_1F14699D0;
  v108[3] = v108;
  AMCP::IO_Core::setup_proc<std::function<void ()>>(a2, (uint64_t)v120, v12, v7, (uint64_t)v108);
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](v108);
  strcpy(v120, "pbdnbolg");
  v120[9] = 0;
  *(_WORD *)&v120[10] = 0;
  v107[0] = &unk_1F1469A50;
  v107[3] = v107;
  AMCP::IO_Core::setup_proc<std::function<void ()>>(a2, (uint64_t)v120, v12, v7, (uint64_t)v107);
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](v107);
  strcpy(v120, "pednbolg");
  v120[9] = 0;
  *(_WORD *)&v120[10] = 0;
  v106[0] = &unk_1F1469AD0;
  v106[3] = v106;
  AMCP::IO_Core::setup_proc<std::function<void ()>>(a2, (uint64_t)v120, v12, v7, (uint64_t)v106);
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](v106);
  strcpy(v120, "cbdnbolg");
  v120[9] = 0;
  *(_WORD *)&v120[10] = 0;
  v105[0] = &unk_1F1469C70;
  void v105[3] = v105;
  AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(a2, (uint64_t)v120, v12, v7, (uint64_t)v105);
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](v105);
  strcpy(v120, "cednbolg");
  v120[9] = 0;
  *(_WORD *)&v120[10] = 0;
  v104[0] = &unk_1F1469D00;
  v104[3] = v104;
  AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(a2, (uint64_t)v120, v12, v7, (uint64_t)v104);
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](v104);
  strcpy(v120, "lcnubolg");
  v120[9] = 0;
  *(_WORD *)&v120[10] = 0;
  v103[0] = &unk_1F1469D80;
  v103[3] = v103;
  AMCP::IO_Core::setup_proc<std::function<void ()>>(a2, (uint64_t)v120, v12, v7, (uint64_t)v103);
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](v103);
  v102[0] = &unk_1F1469F20;
  v102[3] = v102;
  if (*(char *)(v7 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)(v7 + 24), *(void *)(v7 + 32));
  }
  else
  {
    *(_OWORD *)&v97.__r_.__value_.__l.__data_ = *v87;
    v97.__r_.__value_.__r.__words[2] = *(void *)(v7 + 40);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v96, 0, 1.5836601e190);
  uint64_t v29 = v96.__vftable;
  int v30 = SHIBYTE(v97.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v112, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else {
    std::string v112 = v97;
  }
  std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v113, (uint64_t)v102);
  uint64_t v117 = v12;
  uint64_t v118 = 0x676C6F626E646C61;
  int v119 = 0;
  unint64_t v31 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<long long ()(void)>)>>();
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v120, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)uint64_t v120 = v112;
  }
  std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v120[24], (uint64_t)&v113);
  uint64_t v123 = v117;
  uint64_t v124 = v118;
  int v125 = v119;
  BOOL v127 = 0;
  unint64_t v32 = (char *)operator new(0x58uLL);
  *(void *)unint64_t v32 = &unk_1F1469E00;
  uintptr_t v33 = (std::string *)(v32 + 8);
  if ((v120[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v33, *(const std::string::value_type **)v120, *(std::string::size_type *)&v120[8]);
  }
  else
  {
    *(_OWORD *)&v33->__r_.__value_.__l.__data_ = *(_OWORD *)v120;
    *((void *)v32 + 3) = *(void *)&v120[16];
  }
  std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v32 + 32), (uint64_t)&v120[24]);
  *((void *)v32 + 8) = v123;
  *((void *)v32 + 9) = v124;
  *((_DWORD *)v32 + 20) = v125;
  BOOL v127 = v32;
  memset(v98, 0, sizeof(v98));
  uint64_t v99 = 0;
  std::__function::__value_func<void ()(std::function<long long ()(void)>)>::__value_func[abi:ne180100]((uint64_t)v98, (uint64_t)&v126);
  uint64_t v99 = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<long long ()(void)>)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v29, v31, (AMCP *)v98);
  if (v99) {
    v99(0, (uint64_t)v98, 0, 0);
  }
  std::__function::__value_func<void ()(std::function<long long ()(void)>)>::~__value_func[abi:ne180100](&v126);
  std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](&v120[24]);
  if ((v120[23] & 0x80000000) != 0) {
    operator delete(*(void **)v120);
  }
  std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](&v113);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v112.__r_.__value_.__l.__data_);
    if ((v30 & 0x80000000) == 0) {
      goto LABEL_118;
    }
  }
  else if ((v30 & 0x80000000) == 0)
  {
LABEL_118:
    std::string v112 = v97;
    goto LABEL_121;
  }
  std::string::__init_copy_ctor_external(&v112, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
LABEL_121:
  std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v113, (uint64_t)v102);
  uint64_t v117 = v12;
  unint64_t v34 = AMCP::Implementation::get_type_marker<std::function<std::function<long long ()(void)> ()(void)>>();
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v120, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)uint64_t v120 = v112;
  }
  std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v120[24], (uint64_t)&v113);
  uint64_t v123 = v117;
  BOOL v127 = 0;
  std::runtime_error v35 = operator new(0x48uLL);
  *std::runtime_error v35 = &unk_1F1469E90;
  std::runtime_error v36 = (std::string *)(v35 + 1);
  if ((v120[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)v120, *(std::string::size_type *)&v120[8]);
  }
  else
  {
    *(_OWORD *)&v36->__r_.__value_.__l.__data_ = *(_OWORD *)v120;
    v35[3] = *(void *)&v120[16];
  }
  std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v35 + 4), (uint64_t)&v120[24]);
  void v35[8] = v123;
  BOOL v127 = v35;
  memset(v98, 0, sizeof(v98));
  uint64_t v99 = 0;
  std::__function::__value_func<std::function<long long ()(void)> ()(void)>::__value_func[abi:ne180100]((uint64_t)v98, (uint64_t)&v126);
  uint64_t v99 = AMCP::Implementation::In_Place_Storage<std::function<std::function<long long ()(void)> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v29, v34, (AMCP *)v98);
  if (v99) {
    v99(0, (uint64_t)v98, 0, 0);
  }
  std::__function::__value_func<std::function<long long ()(void)> ()(void)>::~__value_func[abi:ne180100](&v126);
  std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](&v120[24]);
  if ((v120[23] & 0x80000000) != 0) {
    operator delete(*(void **)v120);
  }
  std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](&v113);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v112.__r_.__value_.__l.__data_);
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)&v29[1].what, &v96);
  if (v96.__imp_.__imp_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v96.__imp_.__imp_);
  }
  if (v30 < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](v102);
  v101[0] = &unk_1F146A0D0;
  v101[3] = v101;
  if (*(char *)(v7 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)(v7 + 24), *(void *)(v7 + 32));
  }
  else
  {
    *(_OWORD *)&v97.__r_.__value_.__l.__data_ = *v87;
    v97.__r_.__value_.__r.__words[2] = *(void *)(v7 + 40);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v96, 0, 1.58366009e190);
  unsigned int v37 = v96.__vftable;
  int v38 = SHIBYTE(v97.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v112, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else {
    std::string v112 = v97;
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v113, (uint64_t)v101);
  uint64_t v117 = v12;
  uint64_t v118 = 0x676C6F626973666FLL;
  int v119 = 0;
  unint64_t v39 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long)>)>>();
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v120, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)uint64_t v120 = v112;
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v120[24], (uint64_t)&v113);
  uint64_t v123 = v117;
  uint64_t v124 = v118;
  int v125 = v119;
  BOOL v127 = 0;
  uintptr_t v40 = (char *)operator new(0x58uLL);
  *(void *)uintptr_t v40 = &unk_1F1469FB0;
  int v41 = (std::string *)(v40 + 8);
  if ((v120[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v41, *(const std::string::value_type **)v120, *(std::string::size_type *)&v120[8]);
  }
  else
  {
    *(_OWORD *)&v41->__r_.__value_.__l.__data_ = *(_OWORD *)v120;
    *((void *)v40 + 3) = *(void *)&v120[16];
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v40 + 32), (uint64_t)&v120[24]);
  *((void *)v40 + 8) = v123;
  *((void *)v40 + 9) = v124;
  *((_DWORD *)v40 + 20) = v125;
  BOOL v127 = v40;
  memset(v98, 0, sizeof(v98));
  uint64_t v99 = 0;
  std::__function::__value_func<void ()(std::function<unsigned long long ()(unsigned long long)>)>::__value_func[abi:ne180100]((uint64_t)v98, (uint64_t)&v126);
  uint64_t v99 = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<unsigned long long ()(unsigned long long)>)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v37, v39, (AMCP *)v98);
  if (v99) {
    v99(0, (uint64_t)v98, 0, 0);
  }
  std::__function::__value_func<void ()(std::function<unsigned long long ()(unsigned long long)>)>::~__value_func[abi:ne180100](&v126);
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](&v120[24]);
  if ((v120[23] & 0x80000000) != 0) {
    operator delete(*(void **)v120);
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](&v113);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v112.__r_.__value_.__l.__data_);
    if ((v38 & 0x80000000) == 0) {
      goto LABEL_155;
    }
  }
  else if ((v38 & 0x80000000) == 0)
  {
LABEL_155:
    std::string v112 = v97;
    goto LABEL_158;
  }
  std::string::__init_copy_ctor_external(&v112, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
LABEL_158:
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v113, (uint64_t)v101);
  uint64_t v117 = v12;
  unint64_t v42 = AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long)> ()(void)>>();
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v120, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)uint64_t v120 = v112;
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v120[24], (uint64_t)&v113);
  uint64_t v123 = v117;
  BOOL v127 = 0;
  long long v43 = operator new(0x48uLL);
  *long long v43 = &unk_1F146A040;
  int v44 = (std::string *)(v43 + 1);
  if ((v120[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v44, *(const std::string::value_type **)v120, *(std::string::size_type *)&v120[8]);
  }
  else
  {
    *(_OWORD *)&v44->__r_.__value_.__l.__data_ = *(_OWORD *)v120;
    v43[3] = *(void *)&v120[16];
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v43 + 4), (uint64_t)&v120[24]);
  v43[8] = v123;
  BOOL v127 = v43;
  memset(v98, 0, sizeof(v98));
  uint64_t v99 = 0;
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> ()(void)>::__value_func[abi:ne180100]((uint64_t)v98, (uint64_t)&v126);
  uint64_t v99 = AMCP::Implementation::In_Place_Storage<std::function<std::function<unsigned long long ()(unsigned long long)> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v37, v42, (AMCP *)v98);
  if (v99) {
    v99(0, (uint64_t)v98, 0, 0);
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> ()(void)>::~__value_func[abi:ne180100](&v126);
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](&v120[24]);
  if ((v120[23] & 0x80000000) != 0) {
    operator delete(*(void **)v120);
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](&v113);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v112.__r_.__value_.__l.__data_);
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)&v37[1].what, &v96);
  if (v96.__imp_.__imp_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v96.__imp_.__imp_);
  }
  if (v38 < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](v101);
  v100[0] = &unk_1F146A280;
  v100[3] = v100;
  if (*(char *)(v7 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)(v7 + 24), *(void *)(v7 + 32));
  }
  else
  {
    *(_OWORD *)&v97.__r_.__value_.__l.__data_ = *v87;
    v97.__r_.__value_.__r.__words[2] = *(void *)(v7 + 40);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v96, 0, 1.58366011e190);
  __int16 v45 = v96.__vftable;
  int v46 = SHIBYTE(v97.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v112, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  }
  else {
    std::string v112 = v97;
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v113, (uint64_t)v100);
  uint64_t v117 = v12;
  uint64_t v118 = 0x676C6F626F736669;
  int v119 = 0;
  unint64_t v47 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>>();
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v120, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)uint64_t v120 = v112;
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v120[24], (uint64_t)&v113);
  uint64_t v123 = v117;
  uint64_t v124 = v118;
  int v125 = v119;
  BOOL v127 = 0;
  std::runtime_error v48 = (char *)operator new(0x58uLL);
  *(void *)std::runtime_error v48 = &unk_1F146A160;
  mach_port_t v49 = (std::string *)(v48 + 8);
  if ((v120[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v49, *(const std::string::value_type **)v120, *(std::string::size_type *)&v120[8]);
  }
  else
  {
    *(_OWORD *)&v49->__r_.__value_.__l.__data_ = *(_OWORD *)v120;
    *((void *)v48 + 3) = *(void *)&v120[16];
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v48 + 32), (uint64_t)&v120[24]);
  *((void *)v48 + 8) = v123;
  *((void *)v48 + 9) = v124;
  *((_DWORD *)v48 + 20) = v125;
  BOOL v127 = v48;
  memset(v98, 0, sizeof(v98));
  uint64_t v99 = 0;
  std::__function::__value_func<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::__value_func[abi:ne180100]((uint64_t)v98, (uint64_t)&v126);
  uint64_t v99 = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v45, v47, (AMCP *)v98);
  if (v99) {
    v99(0, (uint64_t)v98, 0, 0);
  }
  std::__function::__value_func<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::~__value_func[abi:ne180100](&v126);
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](&v120[24]);
  if ((v120[23] & 0x80000000) != 0) {
    operator delete(*(void **)v120);
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](&v113);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v112.__r_.__value_.__l.__data_);
    if ((v46 & 0x80000000) == 0) {
      goto LABEL_192;
    }
  }
  else if ((v46 & 0x80000000) == 0)
  {
LABEL_192:
    std::string v112 = v97;
    goto LABEL_195;
  }
  std::string::__init_copy_ctor_external(&v112, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
LABEL_195:
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v113, (uint64_t)v100);
  uint64_t v117 = v12;
  unint64_t v50 = AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>>();
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v120, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)uint64_t v120 = v112;
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&v120[24], (uint64_t)&v113);
  uint64_t v123 = v117;
  BOOL v127 = 0;
  uint64_t v51 = operator new(0x48uLL);
  *uint64_t v51 = &unk_1F146A1F0;
  mach_port_t v52 = (std::string *)(v51 + 1);
  if ((v120[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v52, *(const std::string::value_type **)v120, *(std::string::size_type *)&v120[8]);
  }
  else
  {
    *(_OWORD *)&v52->__r_.__value_.__l.__data_ = *(_OWORD *)v120;
    v51[3] = *(void *)&v120[16];
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v51 + 4), (uint64_t)&v120[24]);
  v51[8] = v123;
  BOOL v127 = v51;
  memset(v98, 0, sizeof(v98));
  uint64_t v99 = 0;
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::__value_func[abi:ne180100]((uint64_t)v98, (uint64_t)&v126);
  uint64_t v99 = AMCP::Implementation::In_Place_Storage<std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v45, v50, (AMCP *)v98);
  if (v99) {
    v99(0, (uint64_t)v98, 0, 0);
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::~__value_func[abi:ne180100](&v126);
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](&v120[24]);
  if ((v120[23] & 0x80000000) != 0) {
    operator delete(*(void **)v120);
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](&v113);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v112.__r_.__value_.__l.__data_);
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v94, (unsigned int *)&v45[1].what, &v96);
  if (v96.__imp_.__imp_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v96.__imp_.__imp_);
  }
  if (v46 < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](v100);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v97, 0, 1.5836601e190);
  uint64_t v53 = v97.__r_.__value_.__r.__words[0];
  std::string::size_type v55 = *(void *)(v93 + 16);
  std::string::size_type v54 = *(void *)(v93 + 24);
  if (v54) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 16), 1uLL, memory_order_relaxed);
  }
  unint64_t v56 = AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Description ()(void)>>();
  v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F146A310;
  v112.__r_.__value_.__l.__size_ = v55;
  v112.__r_.__value_.__r.__words[2] = v54;
  int v113 = &v112;
  memset(v120, 0, sizeof(v120));
  std::__function::__value_func<AMCP::Node_Description ()(void)>::__value_func[abi:ne180100]((uint64_t)v120, (uint64_t)&v112);
  *(void *)&v120[32] = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Node_Description ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v53, v56, (AMCP *)v120);
  if (*(void *)&v120[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v120[32])(0, v120, 0, 0);
  }
  std::__function::__value_func<AMCP::Node_Description ()(void)>::~__value_func[abi:ne180100](&v112);
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v112, v53);
  char v115 = *(const char **)(v53 + 40);
  int v116 = *(_DWORD *)(v53 + 48);
  unint64_t v57 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  long long v58 = *(_OWORD *)&v112.__r_.__value_.__l.__data_;
  *(_OWORD *)&v112.__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)uint64_t v120 = v58;
  *(void *)&v120[16] = *((void *)&v112.__r_.__value_.__l + 2);
  *(void *)&v120[24] = v113;
  *(_DWORD *)&v120[32] = v114;
  if (v113)
  {
    unint64_t v59 = *(void *)(v112.__r_.__value_.__r.__words[2] + 8);
    if ((*((void *)&v58 + 1) & (*((void *)&v58 + 1) - 1)) != 0)
    {
      if (v59 >= *((void *)&v58 + 1)) {
        v59 %= *((void *)&v58 + 1);
      }
    }
    else
    {
      v59 &= *((void *)&v58 + 1) - 1;
    }
    *(void *)(v58 + 8 * v59) = &v120[16];
    v112.__r_.__value_.__r.__words[2] = 0;
    int v113 = 0;
  }
  uint64_t v121 = v115;
  int v122 = v116;
  BOOL v127 = 0;
  __int16 v60 = operator new(0x40uLL);
  void *v60 = &unk_1F146A3A0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v60 + 1), (uint64_t *)v120);
  v60[6] = v121;
  *((_DWORD *)v60 + 14) = v122;
  BOOL v127 = v60;
  memset(v98, 0, sizeof(v98));
  uint64_t v99 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v98, (uint64_t)&v126);
  uint64_t v99 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v53, v57, (AMCP *)v98);
  if (v99) {
    v99(0, (uint64_t)v98, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](&v126);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v120);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v112);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v94, (unsigned int *)(v53 + 40), &v97);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v120, 0, 1.5836601e190);
  std::string::size_type size = (std::__shared_weak_count *)v97.__r_.__value_.__l.__size_;
  *(_OWORD *)&v97.__r_.__value_.__l.__data_ = *(_OWORD *)v120;
  char v89 = *(std::__shared_weak_count **)&v120[8];
  uint64_t v62 = *(void *)v120;
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
  int v63 = *(_DWORD *)(v7 + 16);
  unint64_t v64 = AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Type ()(void)>>();
  v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F146A420;
  LODWORD(v112.__r_.__value_.__r.__words[1]) = v63;
  int v113 = &v112;
  memset(v120, 0, sizeof(v120));
  std::__function::__value_func<AMCP::Node_Type ()(void)>::__value_func[abi:ne180100]((uint64_t)v120, (uint64_t)&v112);
  *(void *)&v120[32] = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Node_Type ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v62, v64, (AMCP *)v120);
  if (*(void *)&v120[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v120[32])(0, v120, 0, 0);
  }
  std::__function::__value_func<AMCP::Node_Type ()(void)>::~__value_func[abi:ne180100](&v112);
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v112, v62);
  char v115 = *(const char **)(v62 + 40);
  int v116 = *(_DWORD *)(v62 + 48);
  unint64_t v65 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  std::string::size_type v67 = v112.__r_.__value_.__l.__size_;
  std::string::size_type v66 = v112.__r_.__value_.__r.__words[0];
  *(_OWORD *)&v112.__r_.__value_.__l.__data_ = 0uLL;
  *(void *)uint64_t v120 = v66;
  *(_OWORD *)&v120[8] = __PAIR128__(v112.__r_.__value_.__r.__words[2], v67);
  *(void *)&v120[24] = v113;
  *(_DWORD *)&v120[32] = v114;
  if (v113)
  {
    std::string::size_type v68 = *(void *)(v112.__r_.__value_.__r.__words[2] + 8);
    if ((v67 & (v67 - 1)) != 0)
    {
      if (v68 >= v67) {
        v68 %= v67;
      }
    }
    else
    {
      v68 &= v67 - 1;
    }
    *(void *)(v66 + 8 * v68) = &v120[16];
    v112.__r_.__value_.__r.__words[2] = 0;
    int v113 = 0;
  }
  uint64_t v121 = v115;
  int v122 = v116;
  BOOL v127 = 0;
  unsigned int v69 = operator new(0x40uLL);
  *unsigned int v69 = &unk_1F146A4B0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v69 + 1), (uint64_t *)v120);
  v69[6] = v121;
  *((_DWORD *)v69 + 14) = v122;
  BOOL v127 = v69;
  memset(v98, 0, sizeof(v98));
  uint64_t v99 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v98, (uint64_t)&v126);
  uint64_t v99 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v62, v65, (AMCP *)v98);
  if (v99) {
    v99(0, (uint64_t)v98, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](&v126);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v120);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v112);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v94, (unsigned int *)(v62 + 40), &v97);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v120, 0, 1.5836601e190);
  mach_port_t v70 = v89;
  long long v88 = *(_OWORD *)v120;
  *(_OWORD *)&v97.__r_.__value_.__l.__data_ = *(_OWORD *)v120;
  if (v70) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
  }
  std::string::size_type v72 = *(void *)(v93 + 16);
  std::string::size_type v71 = *(void *)(v93 + 24);
  if (v71) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v71 + 16), 1uLL, memory_order_relaxed);
  }
  unint64_t v73 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F146A530;
  v112.__r_.__value_.__l.__size_ = v72;
  v112.__r_.__value_.__r.__words[2] = v71;
  int v113 = &v112;
  memset(v120, 0, sizeof(v120));
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v120, (uint64_t)&v112);
  *(void *)&v120[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v88, v73, (AMCP *)v120);
  if (*(void *)&v120[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v120[32])(0, v120, 0, 0);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v112);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v88);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v94, (unsigned int *)(v88 + 40), &v97);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v120, 0, 1.58366007e190);
  int v74 = (std::__shared_weak_count *)*((void *)&v88 + 1);
  *(_OWORD *)&v97.__r_.__value_.__l.__data_ = *(_OWORD *)v120;
  mach_port_t v90 = *(std::__shared_weak_count **)&v120[8];
  uint64_t v75 = *(void *)v120;
  if (v74) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v74);
  }
  unint64_t v76 = AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(void)>>();
  v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F146A5B0;
  v112.__r_.__value_.__l.__size_ = v93;
  int v113 = &v112;
  memset(v120, 0, sizeof(v120));
  std::__function::__value_func<std::optional<CA::TimeStamp> ()(void)>::__value_func[abi:ne180100]((uint64_t)v120, (uint64_t)&v112);
  *(void *)&v120[32] = AMCP::Implementation::In_Place_Storage<std::function<std::optional<CA::TimeStamp> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v75, v76, (AMCP *)v120);
  if (*(void *)&v120[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v120[32])(0, v120, 0, 0);
  }
  std::__function::__value_func<std::optional<CA::TimeStamp> ()(void)>::~__value_func[abi:ne180100](&v112);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v94, (unsigned int *)(v75 + 40), &v97);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v120, 0, 1.58366012e190);
  mach_port_t v77 = v90;
  *(_OWORD *)&v97.__r_.__value_.__l.__data_ = *(_OWORD *)v120;
  uint64_t v91 = *(std::__shared_weak_count **)&v120[8];
  uint64_t v78 = *(void *)v120;
  if (v77) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v77);
  }
  unint64_t v79 = AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>>();
  v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F146A640;
  v112.__r_.__value_.__l.__size_ = v93;
  int v113 = &v112;
  memset(v120, 0, sizeof(v120));
  std::__function::__value_func<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>::__value_func[abi:ne180100]((uint64_t)v120, (uint64_t)&v112);
  *(void *)&v120[32] = AMCP::Implementation::In_Place_Storage<std::function<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v78, v79, (AMCP *)v120);
  if (*(void *)&v120[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v120[32])(0, v120, 0, 0);
  }
  std::__function::__value_func<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>::~__value_func[abi:ne180100](&v112);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v94, (unsigned int *)(v78 + 40), &v97);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v120, 0, 1.5836601e190);
  std::string v80 = v91;
  *(_OWORD *)&v97.__r_.__value_.__l.__data_ = *(_OWORD *)v120;
  std::string v92 = *(std::__shared_weak_count **)&v120[8];
  uint64_t v81 = *(void *)v120;
  if (v80) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v80);
  }
  unint64_t v82 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F146A6D0;
  v112.__r_.__value_.__l.__size_ = v93;
  int v113 = &v112;
  memset(v120, 0, sizeof(v120));
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)v120, (uint64_t)&v112);
  *(void *)&v120[32] = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v81, v82, (AMCP *)v120);
  if (*(void *)&v120[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v120[32])(0, v120, 0, 0);
  }
  std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](&v112);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v81);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v94, (unsigned int *)(v81 + 40), &v97);
  if (v92) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v92);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v86);
}

void sub_1BAC9DC40(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    operator delete(v2);
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a4 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(a4 + 24), *(void *)(a4 + 32));
  }
  else {
    std::string v19 = *(std::string *)(a4 + 24);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v17, *(_DWORD *)(a2 + 8), *(double *)a2);
  uint64_t v9 = v17;
  int v10 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v23, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  }
  else {
    std::string v23 = v19;
  }
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)v24, a5);
  uint64_t v25 = a3;
  double v26 = *(double *)a2;
  int v27 = *(_DWORD *)(a2 + 8);
  unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()>)>>();
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v28, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
  }
  else {
    std::string v28 = v23;
  }
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)v29, (uint64_t)v24);
  uint64_t v30 = v25;
  double v31 = v26;
  int v32 = v27;
  unint64_t v34 = 0;
  uint64_t v12 = (char *)operator new(0x58uLL);
  *(void *)uint64_t v12 = &unk_1F1469670;
  mach_port_t v13 = (std::string *)(v12 + 8);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
    *((void *)v12 + 3) = *((void *)&v28.__r_.__value_.__l + 2);
  }
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v12 + 32), (uint64_t)v29);
  *((void *)v12 + 8) = v30;
  *((double *)v12 + 9) = v31;
  *((_DWORD *)v12 + 20) = v32;
  unint64_t v34 = v12;
  long long v20 = 0u;
  long long v21 = 0u;
  int v22 = 0;
  std::__function::__value_func<void ()(std::function<void ()>)>::__value_func[abi:ne180100]((uint64_t)&v20, (uint64_t)v33);
  int v22 = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()>)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v9, v11, (AMCP *)&v20);
  if (v22) {
    v22(0, (uint64_t)&v20, 0, 0);
  }
  std::__function::__value_func<void ()(std::function<void ()>)>::~__value_func[abi:ne180100](v33);
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](v29);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](v24);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_19;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
LABEL_19:
    std::string v23 = v19;
    goto LABEL_22;
  }
  std::string::__init_copy_ctor_external(&v23, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
LABEL_22:
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)v24, a5);
  uint64_t v25 = a3;
  unint64_t v14 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()> ()(void)>>();
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v28, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
  }
  else {
    std::string v28 = v23;
  }
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)v29, (uint64_t)v24);
  uint64_t v30 = v25;
  unint64_t v34 = 0;
  unint64_t v15 = operator new(0x48uLL);
  *unint64_t v15 = &unk_1F1469700;
  uint64_t v16 = (std::string *)(v15 + 1);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v16, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
    v15[3] = *((void *)&v28.__r_.__value_.__l + 2);
  }
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v15 + 4), (uint64_t)v29);
  unsigned char v15[8] = v30;
  unint64_t v34 = (char *)v15;
  long long v20 = 0u;
  long long v21 = 0u;
  int v22 = 0;
  std::__function::__value_func<std::function<void ()> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v20, (uint64_t)v33);
  int v22 = AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v9, v14, (AMCP *)&v20);
  if (v22) {
    v22(0, (uint64_t)&v20, 0, 0);
  }
  std::__function::__value_func<std::function<void ()> ()(void)>::~__value_func[abi:ne180100](v33);
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](v29);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](v24);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)(v9 + 40), &v17);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v10 < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_1BAC9E540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a2)
  {
    operator delete(v29);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a4 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(a4 + 24), *(void *)(a4 + 32));
  }
  else {
    std::string v19 = *(std::string *)(a4 + 24);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v17, *(_DWORD *)(a2 + 8), *(double *)a2);
  uint64_t v9 = v17;
  int v10 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v23, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  }
  else {
    std::string v23 = v19;
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)v24, a5);
  uint64_t v25 = a3;
  double v26 = *(double *)a2;
  int v27 = *(_DWORD *)(a2 + 8);
  unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>>();
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v28, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
  }
  else {
    std::string v28 = v23;
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)v29, (uint64_t)v24);
  uint64_t v30 = v25;
  double v31 = v26;
  int v32 = v27;
  unint64_t v34 = 0;
  uint64_t v12 = (char *)operator new(0x58uLL);
  *(void *)uint64_t v12 = &unk_1F1469B50;
  mach_port_t v13 = (std::string *)(v12 + 8);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
    *((void *)v12 + 3) = *((void *)&v28.__r_.__value_.__l + 2);
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v12 + 32), (uint64_t)v29);
  *((void *)v12 + 8) = v30;
  *((double *)v12 + 9) = v31;
  *((_DWORD *)v12 + 20) = v32;
  unint64_t v34 = v12;
  long long v20 = 0u;
  long long v21 = 0u;
  int v22 = 0;
  std::__function::__value_func<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::__value_func[abi:ne180100]((uint64_t)&v20, (uint64_t)v33);
  int v22 = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v9, v11, (AMCP *)&v20);
  if (v22) {
    v22(0, (uint64_t)&v20, 0, 0);
  }
  std::__function::__value_func<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::~__value_func[abi:ne180100](v33);
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](v29);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](v24);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_19;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
LABEL_19:
    std::string v23 = v19;
    goto LABEL_22;
  }
  std::string::__init_copy_ctor_external(&v23, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
LABEL_22:
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)v24, a5);
  uint64_t v25 = a3;
  unint64_t v14 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>>();
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v28, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
  }
  else {
    std::string v28 = v23;
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)v29, (uint64_t)v24);
  uint64_t v30 = v25;
  unint64_t v34 = 0;
  unint64_t v15 = operator new(0x48uLL);
  *unint64_t v15 = &unk_1F1469BE0;
  uint64_t v16 = (std::string *)(v15 + 1);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v16, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
    v15[3] = *((void *)&v28.__r_.__value_.__l + 2);
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)(v15 + 4), (uint64_t)v29);
  unsigned char v15[8] = v30;
  unint64_t v34 = (char *)v15;
  long long v20 = 0u;
  long long v21 = 0u;
  int v22 = 0;
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v20, (uint64_t)v33);
  int v22 = AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v9, v14, (AMCP *)&v20);
  if (v22) {
    v22(0, (uint64_t)&v20, 0, 0);
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::~__value_func[abi:ne180100](v33);
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](v29);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](v24);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)(v9 + 40), &v17);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v10 < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_1BAC9EB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a2)
  {
    operator delete(v29);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<AMCP::Node_Description ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    int v3 = (void *)(a1 + 24);
  }
  *int v3 = 0;
  return a1;
}

void *std::__function::__value_func<AMCP::Node_Description ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Type ()(void)>>()
{
  uint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[74];
}

uint64_t std::__function::__value_func<AMCP::Node_Type ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    int v3 = (void *)(a1 + 24);
  }
  *int v3 = 0;
  return a1;
}

void *std::__function::__value_func<AMCP::Node_Type ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(void)>>()
{
  uint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[94];
}

uint64_t std::__function::__value_func<std::optional<CA::TimeStamp> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    int v3 = (void *)(a1 + 24);
  }
  *int v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::optional<CA::TimeStamp> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    int v3 = (void *)(a1 + 24);
  }
  *int v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE4$_18"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  uint64_t v12[4] = *MEMORY[0x1E4F143B8];
  uint64_t first_object_id_if = *(void *)(a1 + 8);
  int v2 = *(std::__shared_weak_count **)(first_object_id_if + 24);
  if (!v2) {
    return 0;
  }
  int v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(first_object_id_if + 16);
  if (!v5) {
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)(v5 + 144);
  mach_port_t v6 = *(std::__shared_weak_count **)(v5 + 152);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v7 + 24))(__p, v7);
    uint64_t v8 = (std::__shared_mutex_base *)(*(uint64_t (**)(void))(**(void **)(first_object_id_if + 32) + 16))(*(void *)(first_object_id_if + 32));
    v12[0] = &unk_1F14693C0;
    v12[1] = __p;
    uint64_t v12[3] = v12;
    uint64_t first_object_id_if = AMCP::Core::Broker::fetch_first_object_id_if (v8, (uint64_t)v12);
    std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](v12);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (!v7) {
LABEL_13:
  }
    uint64_t first_object_id_if = 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return first_object_id_if;
}

void sub_1BAC9F43C(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::IO_Core::Node::get_clock_id(void)::$_0,std::allocator<AMCP::IO_Core::Node::get_clock_id(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::get_clock_id(void)::$_0,std::allocator<AMCP::IO_Core::Node::get_clock_id(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK4AMCP7IO_Core4Node12get_clock_idEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::IO_Core::Node::get_clock_id(void)::$_0,std::allocator<AMCP::IO_Core::Node::get_clock_id(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  if (AMCP::is_base_of((AMCP *)0x61636C6B, simple_required))
  {
    AMCP::Core::Core::get_simple_required_property<1969841184u>(&v24, *a2);
    CFStringRef v5 = v24;
    if (!v24)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mach_port_t v6 = *(unsigned __int8 **)(a1 + 8);
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v24);
    uint64_t v7 = v6[23];
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = (void *)v6[23];
    }
    else {
      uint64_t v8 = (void *)*((void *)v6 + 1);
    }
    unint64_t v9 = v23;
    int v10 = (char)v23;
    if ((v23 & 0x80u) != 0) {
      unint64_t v9 = (unint64_t)__p[1];
    }
    if (v8 == (void *)v9)
    {
      if ((v23 & 0x80u) == 0) {
        char v11 = __p;
      }
      else {
        char v11 = (void **)__p[0];
      }
      if ((v7 & 0x80) != 0)
      {
        BOOL v19 = memcmp(*(const void **)v6, v11, *((void *)v6 + 1)) == 0;
      }
      else
      {
        if (!v6[23])
        {
          BOOL v19 = 1;
          if (((char)v23 & 0x80000000) == 0) {
            goto LABEL_27;
          }
          goto LABEL_26;
        }
        uint64_t v12 = v7 - 1;
        do
        {
          int v14 = *v6++;
          int v13 = v14;
          int v16 = *(unsigned __int8 *)v11;
          char v11 = (void **)((char *)v11 + 1);
          int v15 = v16;
          BOOL v18 = v12-- != 0;
          BOOL v19 = v13 == v15;
        }
        while (v13 == v15 && v18);
      }
      if (v10 < 0) {
LABEL_26:
      }
        operator delete(__p[0]);
    }
    else
    {
      BOOL v19 = 0;
      if ((char)v23 < 0) {
        goto LABEL_26;
      }
    }
LABEL_27:
    CFRelease(v5);
    return v19;
  }
  return 0;
}

void sub_1BAC9F608(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::get_clock_id(void)::$_0,std::allocator<AMCP::IO_Core::Node::get_clock_id(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14693C0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::Node::get_clock_id(void)::$_0,std::allocator<AMCP::IO_Core::Node::get_clock_id(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F14693C0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::get_clock_id(void)::$_0,std::allocator<AMCP::IO_Core::Node::get_clock_id(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F146A6D0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F146A6D0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::~__func()
{
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>>::dispatch;
LABEL_6:
      std::__function::__value_func<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(CA::TimeStamp)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      uint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17>,std::optional<CA::TimeStamp> ()(CA::TimeStamp)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17>,std::optional<CA::TimeStamp> ()(CA::TimeStamp)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE4$_17"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17>,std::optional<CA::TimeStamp> ()(CA::TimeStamp)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  CFStringRef v5 = *(std::__shared_weak_count **)(v4 + 24);
  if (!v5 || (v6 = *a2, uint64_t v7 = a2[1], v8 = *((_DWORD *)a2 + 14), (v9 = std::__shared_weak_count::lock(v5)) == 0))
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 64) = 0;
    return;
  }
  uint64_t v10 = v9;
  char v11 = *(__n128 **)(v4 + 16);
  if (!v11)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 64) = 0;
    goto LABEL_28;
  }
  __n128 v12 = v11[9];
  int v13 = (std::__shared_weak_count *)v11[9].n128_u64[1];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v12.n128_u64[0]) {
    goto LABEL_25;
  }
  __n128 v21 = v12;
  if (!(*(unsigned int (**)(unint64_t, __n128))(*(void *)v12.n128_u64[0] + 120))(v12.n128_u64[0], v12))goto LABEL_25; {
  if (v13)
  }
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  int v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  __n128 v26 = v21;
  if ((v8 & 1) == 0)
  {
    if ((v8 & 2) == 0)
    {
      uint64_t v14 = 0;
      long long v27 = 0u;
      long long v28 = 0u;
      uint64_t v15 = 0;
      double v16 = 0.0;
      uint64_t v17 = v13;
      uint64_t v18 = 0;
      goto LABEL_21;
    }
    int v19 = 1;
    goto LABEL_19;
  }
  uint64_t v24 = v6;
  int v23 = 2;
  if ((v8 & 2) != 0)
  {
    int v19 = 3;
LABEL_19:
    uint64_t v25 = v7;
    int v23 = v19;
  }
  AMCP::DAL::DAL_Time::validate((AMCP::DAL::DAL_Time *)&v23);
  uint64_t v18 = v24;
  uint64_t v14 = v25;
  double v16 = (*(double (**)(unint64_t))(*(void *)v26.n128_u64[0] + 160))(v26.n128_u64[0]);
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v15 = 7;
  uint64_t v17 = (std::__shared_weak_count *)v26.n128_u64[1];
LABEL_21:
  if (v17)
  {
    uint64_t v22 = v15;
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    uint64_t v15 = v22;
  }
  if (!v15)
  {
LABEL_25:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 64) = 0;
    goto LABEL_26;
  }
  *(void *)a3 = v18;
  *(void *)(a3 + 8) = v14;
  *(double *)(a3 + 16) = v16;
  long long v20 = v28;
  *(_OWORD *)(a3 + 24) = v27;
  *(_OWORD *)(a3 + 40) = v20;
  *(void *)(a3 + 56) = v15;
  *(unsigned char *)(a3 + 64) = 1;
LABEL_26:
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  if (!v13) {
    return;
  }
  uint64_t v9 = v13;
LABEL_28:

  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
}

void sub_1BAC9FB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17>,std::optional<CA::TimeStamp> ()(CA::TimeStamp)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F146A640;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17>,std::optional<CA::TimeStamp> ()(CA::TimeStamp)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F146A640;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_17>,std::optional<CA::TimeStamp> ()(CA::TimeStamp)>::~__func()
{
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::optional<CA::TimeStamp> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::optional<CA::TimeStamp> ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::optional<CA::TimeStamp> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::optional<CA::TimeStamp> ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<std::optional<CA::TimeStamp> ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      __n128 v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16>,std::optional<CA::TimeStamp> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16>,std::optional<CA::TimeStamp> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE4$_16"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16>,std::optional<CA::TimeStamp> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 24);
  if (v4 && (CFStringRef v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(v3 + 16);
    if (v7)
    {
      uint64_t v9 = *(void *)(v7 + 144);
      int v8 = *(std::__shared_weak_count **)(v7 + 152);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v9
        && (*(unsigned int (**)(uint64_t))(*(void *)v9 + 120))(v9)
        && ((*(void (**)(_OWORD *__return_ptr, uint64_t))(*(void *)v9 + 32))(v12, v9),
            *((void *)&v12[0] + 1)))
      {
        long long v10 = v12[1];
        *(_OWORD *)a2 = v12[0];
        *(_OWORD *)(a2 + 16) = v10;
        long long v11 = v12[3];
        *(_OWORD *)(a2 + 32) = v12[2];
        *(_OWORD *)(a2 + 48) = v11;
        *(unsigned char *)(a2 + 64) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
        *(unsigned char *)(a2 + 64) = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 64) = 0;
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 64) = 0;
  }
}

void sub_1BAC9FF54(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16>,std::optional<CA::TimeStamp> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F146A5B0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16>,std::optional<CA::TimeStamp> ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F146A5B0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_16>,std::optional<CA::TimeStamp> ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE4$_15"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    BOOL v5 = *(void *)(v4 + 104) != 0;
  }
  else {
    BOOL v5 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v5;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F146A530;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F146A530;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146A530;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146A530;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterINS_9Node_TypeEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = AMCP::Core::Operation::call_function<AMCP::Node_Type>((void *)(a1 + 8));
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = v3;
  *(void *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<AMCP::Node_Type>::dispatch;
  return result;
}

uint64_t AMCP::Core::Operation::call_function<AMCP::Node_Type>(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Type ()(void)>>();
  int v3 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v2);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v10 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      long long v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)long long v28 = 2080;
      *(void *)&uint64_t v28[2] = "Operation.h";
      __int16 v29 = 1024;
      int v30 = 154;
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    __n128 v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    double v31 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Node_Type, Argu"
          "ment_Types = <>]";
    int v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v33 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    uint64_t v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v4 = v3;
  if (!*((void *)v3 + 7)
    || (*(void *)AudioObjectPropertyAddress buf = AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Type ()(void)>>(),
        (int v3 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v4 + 7))(4, (uint64_t)v4 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v7 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)long long v28 = 2080;
      *(void *)&uint64_t v28[2] = "Operation.h";
      __int16 v29 = 1024;
      int v30 = 161;
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    __n128 v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    double v31 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Node_Type, Argu"
          "ment_Types = <>]";
    int v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v33 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    uint64_t v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v5 = *((void *)v3 + 3);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
}

void sub_1BACA075C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::In_Place_Storage<AMCP::Node_Type>::dispatch(uint64_t result, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      double result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_5;
    case 1:
      double result = 0;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<AMCP::Node_Type>::dispatch;
      return result;
    case 2:
      double result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<AMCP::Node_Type>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_5:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t v8 = AMCP::Implementation::get_type_marker<AMCP::Node_Type>();
      double result = 0;
      *a4 = v8;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Node_Type>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<AMCP::Node_Type>();
      long long v10 = *(void (**)(uint64_t, uint64_t, void, _OWORD *))(a2 + 32);
      *(void *)&v14[0] = 0;
      if (v10)
      {
        v10(3, a2, 0, v14);
        long long v10 = *(void (**)(uint64_t, uint64_t, void, _OWORD *))&v14[0];
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, _OWORD *))v9) {
        goto LABEL_20;
      }
      long long v11 = (void (*)(uint64_t, AMCP::Thing *, void, void))*((void *)a3 + 4);
      long long v16 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v16);
        long long v11 = v16;
      }
      if (v11 == (void (*)(uint64_t, AMCP::Thing *, void, void))v9)
      {
        if (*(void *)(a2 + 32))
        {
          *(void *)&v14[0] = AMCP::Implementation::get_type_marker<AMCP::Node_Type>();
          mach_port_t v12 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, void, _OWORD *))(a2 + 32))(4, a2, 0, v14);
        }
        else
        {
          mach_port_t v12 = 0;
        }
        *(void *)&v14[0] = AMCP::Implementation::get_type_marker<AMCP::Node_Type>();
        if (*v12 == *(_DWORD *)(*((uint64_t (**)(uint64_t, AMCP::Thing *, void, _OWORD *))a3 + 4))(4, a3, 0, v14))return 1; {
      }
        }
      else
      {
LABEL_20:
        int v13 = AMCP::Thing::convert_to<AMCP::Node_Type>(a2);
        if (v13 == AMCP::Thing::convert_to<AMCP::Node_Type>((uint64_t)a3)) {
          return 1;
        }
      }
      return 0;
    case 6:
      uint64_t v15 = 0;
      memset(v14, 0, sizeof(v14));
      AMCP::swap((AMCP::Thing *)v14, a3, a3);
      if (v15) {
        v15(0, v14, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<AMCP::Node_Type>()
{
  uint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[76];
}

uint64_t AMCP::Thing::convert_to<AMCP::Node_Type>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t v2 = AMCP::Implementation::get_type_marker<AMCP::Node_Type>();
  int v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  std::runtime_error v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    int v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))v2)
  {
    uint64_t v18 = v2;
    uint64_t v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4) {
      return *v4;
    }
LABEL_12:
    exceptiouint64_t n = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<AMCP::Node_Type>();
  memset(v16, 0, sizeof(v16));
  uint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    long long v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    long long v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = v2;
  uint64_t v6 = (unsigned int *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    mach_port_t v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5;
}

void sub_1BACA0C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146A4B0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  int v3 = operator new(0x40uLL);
  *int v3 = &unk_1F146A4B0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BACA0D7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146A4B0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Type>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146A4B0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<AMCP::Node_Type ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Node_Type ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<AMCP::Node_Type ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Node_Type ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<AMCP::Node_Type ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Type ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Type ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      mach_port_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14>,AMCP::Node_Type ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14>,AMCP::Node_Type ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE4$_14"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14>,AMCP::Node_Type ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14>,AMCP::Node_Type ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146A420;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14>,AMCP::Node_Type ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F146A420;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_14>,AMCP::Node_Type ()(void)>::~__func()
{
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterINS_16Node_DescriptionEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AMCP::Core::Operation::call_function<AMCP::Node_Description>((uint64_t)&v3, (void *)(a1 + 8));
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  AMCP::Implementation::Outboard_Storage<AMCP::Node_Description>::construct<AMCP::Node_Description&>(a2);
}

void sub_1BACA11B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  for (uint64_t i = 96; i != 48; i -= 24)
  {
    *(void *)(v23 - 40) = v22 + i;
    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 40));
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void AMCP::Implementation::Outboard_Storage<AMCP::Node_Description>::construct<AMCP::Node_Description&>(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = AMCP::Implementation::Outboard_Storage<AMCP::Node_Description>::dispatch;
  operator new();
}

void sub_1BACA126C(_Unwind_Exception *a1)
{
  MEMORY[0x1C1859840](v1, 0x1032C40BA2C682ELL);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::Outboard_Storage<AMCP::Node_Description>::dispatch(uint64_t result, uint64_t *a2, AMCP::Thing *a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      goto LABEL_6;
    case 1:
      AMCP::Implementation::Outboard_Storage<AMCP::Node_Description>::construct<AMCP::Node_Description&>(a3, *a2);
      return 0;
    case 2:
      uint64_t v7 = *a2;
      *a2 = 0;
      uint64_t v8 = *(void *)a3;
      *(void *)a3 = v7;
      if (v8) {
        std::default_delete<AMCP::Node_Description>::operator()[abi:ne180100](v8);
      }
      *((void *)a3 + 4) = AMCP::Implementation::Outboard_Storage<AMCP::Node_Description>::dispatch;
LABEL_6:
      uint64_t v9 = *a2;
      *a2 = 0;
      if (v9) {
        std::default_delete<AMCP::Node_Description>::operator()[abi:ne180100](v9);
      }
      uint64_t result = 0;
      a2[4] = 0;
      *(_OWORD *)a2 = 0u;
      *((_OWORD *)a2 + 1) = 0u;
      return result;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<AMCP::Node_Description>();
      uint64_t result = 0;
      *a4 = v10;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Node_Description>()) {
        return *a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v11 = AMCP::Implementation::get_type_marker<AMCP::Node_Description>();
      mach_port_t v12 = (void (*)(uint64_t, uint64_t *, void, void **))a2[4];
      v30[0] = 0;
      if (v12)
      {
        v12(3, a2, 0, v30);
        mach_port_t v12 = (void (*)(uint64_t, uint64_t *, void, void **))v30[0];
      }
      if (v12 != (void (*)(uint64_t, uint64_t *, void, void **))v11) {
        goto LABEL_23;
      }
      int v13 = (void **)*((void *)a3 + 4);
      uint64_t v22 = 0;
      if (v13)
      {
        ((void (*)(uint64_t, AMCP::Thing *, void, void ***))v13)(3, a3, 0, &v22);
        int v13 = v22;
      }
      if (v13 != (void **)v11)
      {
LABEL_23:
        AMCP::Thing::convert_to<AMCP::Node_Description>((AMCP::Node_Description *)v30, (uint64_t)a2);
        AMCP::Thing::convert_to<AMCP::Node_Description>((AMCP::Node_Description *)&v22, (uint64_t)a3);
        v38[0] = v30;
        v38[1] = &v30[1];
        uint64_t v38[2] = (void **)&v32;
        v38[3] = (void **)((char *)&v32 + 4);
        v38[4] = v33;
        v38[5] = (void **)&v35;
        v38[6] = (void **)&v36;
        v38[7] = (void **)((char *)&v35 + 4);
        v37[0] = &v22;
        v37[1] = v23;
        uint64_t v37[2] = &v25;
        void v37[3] = (char *)&v25 + 4;
        v37[4] = __p;
        v37[5] = &v28;
        v37[6] = &v29;
        v37[7] = (char *)&v28 + 4;
        BOOL v15 = std::__tuple_equal<7ul>::operator()[abi:ne180100]<std::tuple<AMCP::Node_Type const&,std::string const&,AMCP::Node_Thread_Policy const&,AMCP::Node_Buffer_Size_Change_Policy const&,std::string const&,AMCP::Node_Clock_Policy const&,AMCP::Index_Group<std::vector<AMCP::Terminal_Description>,AMCP::Direction> const&,unsigned int const&>,std::tuple<AMCP::Node_Type const&,std::string const&,AMCP::Node_Thread_Policy const&,AMCP::Node_Buffer_Size_Change_Policy const&,std::string const&,AMCP::Node_Clock_Policy const&,AMCP::Index_Group<std::vector<AMCP::Terminal_Description>,AMCP::Direction> const&,unsigned int const&>>((uint64_t)v38, (uint64_t)v37);
        int v16 = v15 && HIDWORD(v35) == HIDWORD(v28);
        for (uint64_t i = 12; i != 6; i -= 3)
        {
          v38[0] = &v23[i - 1];
          std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](v38);
        }
        if (SHIBYTE(v27) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v24) < 0) {
          operator delete(v23[0]);
        }
        for (uint64_t j = 12; j != 6; j -= 3)
        {
          uint64_t v22 = &v30[j];
          std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](&v22);
        }
        if (SHIBYTE(v34) < 0) {
          operator delete(v33[0]);
        }
        if (SHIBYTE(v31) < 0)
        {
          operator delete(v30[1]);
          if (!v16) {
            return 0;
          }
        }
        else if (!v16)
        {
          return 0;
        }
        return 1;
      }
      if (a2[4])
      {
        v30[0] = (void *)AMCP::Implementation::get_type_marker<AMCP::Node_Description>();
        uint64_t v14 = ((uint64_t (*)(uint64_t, uint64_t *, void, void **))a2[4])(4, a2, 0, v30);
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (*((void *)a3 + 4))
      {
        v30[0] = (void *)AMCP::Implementation::get_type_marker<AMCP::Node_Description>();
        std::runtime_error v19 = (void **)(*((uint64_t (**)(uint64_t, AMCP::Thing *, void, void **))a3 + 4))(4, a3, 0, v30);
      }
      else
      {
        std::runtime_error v19 = 0;
      }
      v30[0] = (void *)v14;
      v30[1] = (void *)(v14 + 8);
      std::runtime_error v20 = (_DWORD *)(v14 + 68);
      *(void *)&long long v31 = v14 + 32;
      *((void *)&v31 + 1) = v14 + 36;
      int v32 = (void (*)(void, void **, void, void))(v14 + 40);
      v33[0] = (void *)(v14 + 64);
      v33[1] = (void *)(v14 + 72);
      uint64_t v34 = v14 + 68;
      __n128 v21 = (_DWORD *)v19 + 17;
      uint64_t v22 = v19;
      v23[0] = v19 + 1;
      v23[1] = v19 + 4;
      int v24 = (char *)v19 + 36;
      uint64_t v25 = v19 + 5;
      __p[0] = v19 + 8;
      __p[1] = v19 + 9;
      long long v27 = (char *)v19 + 68;
      return std::__tuple_equal<7ul>::operator()[abi:ne180100]<std::tuple<AMCP::Node_Type const&,std::string const&,AMCP::Node_Thread_Policy const&,AMCP::Node_Buffer_Size_Change_Policy const&,std::string const&,AMCP::Node_Clock_Policy const&,AMCP::Index_Group<std::vector<AMCP::Terminal_Description>,AMCP::Direction> const&,unsigned int const&>,std::tuple<AMCP::Node_Type const&,std::string const&,AMCP::Node_Thread_Policy const&,AMCP::Node_Buffer_Size_Change_Policy const&,std::string const&,AMCP::Node_Clock_Policy const&,AMCP::Index_Group<std::vector<AMCP::Terminal_Description>,AMCP::Direction> const&,unsigned int const&>>((uint64_t)v30, (uint64_t)&v22)&& *v20 == *v21;
    case 6:
      int v32 = 0;
      *(_OWORD *)int v30 = 0u;
      long long v31 = 0u;
      AMCP::swap((AMCP::Thing *)v30, a3, a3);
      if (v32) {
        v32(0, v30, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void std::default_delete<AMCP::Node_Description>::operator()[abi:ne180100](uint64_t a1)
{
  for (uint64_t i = 96; i != 48; i -= 24)
  {
    uint64_t v3 = (void **)(a1 + i);
    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1C1859840);
}

BOOL std::__tuple_equal<7ul>::operator()[abi:ne180100]<std::tuple<AMCP::Node_Type const&,std::string const&,AMCP::Node_Thread_Policy const&,AMCP::Node_Buffer_Size_Change_Policy const&,std::string const&,AMCP::Node_Clock_Policy const&,AMCP::Index_Group<std::vector<AMCP::Terminal_Description>,AMCP::Direction> const&,unsigned int const&>,std::tuple<AMCP::Node_Type const&,std::string const&,AMCP::Node_Thread_Policy const&,AMCP::Node_Buffer_Size_Change_Policy const&,std::string const&,AMCP::Node_Clock_Policy const&,AMCP::Index_Group<std::vector<AMCP::Terminal_Description>,AMCP::Direction> const&,unsigned int const&>>(uint64_t a1, uint64_t a2)
{
  if (**(_DWORD **)a1 != **(_DWORD **)a2) {
    return 0;
  }
  uint64_t v4 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v5 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t v6 = v4[23];
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = (unsigned __int8 *)v4[23];
  }
  else {
    uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
  }
  uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
  int v9 = (char)v8;
  if ((char)v8 < 0) {
    uint64_t v8 = v5[1];
  }
  if (v7 != v8) {
    return 0;
  }
  if (v9 >= 0) {
    uint64_t v10 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    uint64_t v10 = *v5;
  }
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
      return 0;
    }
  }
  else if (v4[23])
  {
    uint64_t v11 = v6 - 1;
    do
    {
      int v13 = *v4++;
      int v12 = v13;
      int v15 = *v10++;
      int v14 = v15;
      BOOL v16 = v11-- != 0;
      char v17 = v16;
    }
    while (v12 == v14 && (v17 & 1) != 0);
    if (v12 != v14) {
      return 0;
    }
  }
  if (**(_DWORD **)(a1 + 16) != **(_DWORD **)(a2 + 16) || **(_DWORD **)(a1 + 24) != **(_DWORD **)(a2 + 24)) {
    return 0;
  }
  uint64_t v18 = *(unsigned __int8 **)(a1 + 32);
  std::runtime_error v19 = *(unsigned __int8 ***)(a2 + 32);
  uint64_t v20 = v18[23];
  if ((v20 & 0x80u) == 0) {
    __n128 v21 = (unsigned __int8 *)v18[23];
  }
  else {
    __n128 v21 = (unsigned __int8 *)*((void *)v18 + 1);
  }
  uint64_t v22 = (unsigned __int8 *)*((unsigned __int8 *)v19 + 23);
  int v23 = (char)v22;
  if ((char)v22 < 0) {
    uint64_t v22 = v19[1];
  }
  if (v21 != v22) {
    return 0;
  }
  if (v23 >= 0) {
    int v24 = *(unsigned __int8 **)(a2 + 32);
  }
  else {
    int v24 = *v19;
  }
  if ((v20 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v18, v24, *((void *)v18 + 1))) {
      return 0;
    }
  }
  else if (v18[23])
  {
    uint64_t v25 = v20 - 1;
    do
    {
      int v27 = *v18++;
      int v26 = v27;
      int v29 = *v24++;
      int v28 = v29;
      BOOL v16 = v25-- != 0;
      char v30 = v16;
    }
    while (v26 == v28 && (v30 & 1) != 0);
    if (v26 != v28) {
      return 0;
    }
  }
  if (**(_DWORD **)(a1 + 40) == **(_DWORD **)(a2 + 40))
  {
    uint64_t v31 = 0;
    uint64_t v32 = *(void *)(a1 + 48);
    int v33 = *(void **)(a2 + 48);
    while (1)
    {
      uint64_t v34 = (uint64_t *)(v32 + 24 * v31);
      uint64_t v36 = *v34;
      uint64_t v35 = v34[1];
      uint64_t v37 = *v33;
      if (v35 - *v34 != v33[1] - *v33) {
        break;
      }
      if (v36 != v35)
      {
        uint64_t v48 = v32;
        uint64_t v49 = v31;
        unint64_t v47 = v33;
LABEL_49:
        uint64_t v38 = v37 + 40;
        if (*(double *)v36 == *(double *)v37
          && *(_DWORD *)(v36 + 8) == *(_DWORD *)(v37 + 8)
          && *(_DWORD *)(v36 + 12) == *(_DWORD *)(v37 + 12)
          && *(_DWORD *)(v36 + 16) == *(_DWORD *)(v37 + 16)
          && *(_DWORD *)(v36 + 20) == *(_DWORD *)(v37 + 20)
          && *(_DWORD *)(v36 + 24) == *(_DWORD *)(v37 + 24)
          && *(_DWORD *)(v36 + 28) == *(_DWORD *)(v37 + 28)
          && *(_DWORD *)(v36 + 32) == *(_DWORD *)(v37 + 32))
        {
          uint64_t v39 = 0;
          while (1)
          {
            uint64_t v40 = v36 + 40 + 24 * v39;
            int v41 = *(unsigned __int8 **)v40;
            unint64_t v42 = *(unsigned __int8 **)(v40 + 8);
            long long v43 = *(unsigned __int8 **)v38;
            if (&v42[-*(void *)v40] != (unsigned __int8 *)(*(void *)(v38 + 8) - *(void *)v38)) {
              break;
            }
            if (v41 == v42)
            {
              BOOL result = 1;
            }
            else
            {
              do
              {
                BOOL result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v41, v43);
                if (!result) {
                  break;
                }
                v41 += 24;
                v43 += 24;
              }
              while (v41 != v42);
            }
            if (result)
            {
              ++v39;
              v38 += 24;
              if (v39 != 2) {
                continue;
              }
            }
            if (!result) {
              return result;
            }
            uint64_t v32 = v48;
            uint64_t v31 = v49;
            int v33 = v47;
            if (*(_DWORD *)(v36 + 88) != *(_DWORD *)(v37 + 88) || *(_DWORD *)(v36 + 92) != *(_DWORD *)(v37 + 92)) {
              return 0;
            }
            int v45 = *(unsigned __int8 *)(v36 + 96);
            int v46 = *(unsigned __int8 *)(v37 + 96);
            BOOL result = v45 == v46;
            if (v45 == v46)
            {
              v36 += 104;
              v37 += 104;
              if (v36 != v35) {
                goto LABEL_49;
              }
            }
            goto LABEL_73;
          }
        }
        return 0;
      }
      BOOL result = 1;
LABEL_73:
      if (result)
      {
        ++v31;
        v33 += 3;
        if (v31 != 2) {
          continue;
        }
      }
      return result;
    }
  }
  return 0;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146A3A0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  *uint64_t v3 = &unk_1F146A3A0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BACA1B68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146A3A0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Node_Description>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146A3A0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<AMCP::Node_Description ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Node_Description ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<AMCP::Node_Description ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Node_Description ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<AMCP::Node_Description ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Description ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Description ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13>,AMCP::Node_Description ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13>,AMCP::Node_Description ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE4$_13"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13>,AMCP::Node_Description ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4 && (char v17 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5)
    {
      int v6 = *(_DWORD *)(v5 + 16);
      if (*(char *)(v5 + 47) < 0) {
        std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(v5 + 24), *(void *)(v5 + 32));
      }
      else {
        std::string v20 = *(std::string *)(v5 + 24);
      }
      *(_DWORD *)a2 = v6;
      *(std::string *)(a2 + 8) = v20;
      memset(&v20, 0, sizeof(v20));
      *(void *)(a2 + 32) = 0x100000000;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_OWORD *)(a2 + 56) = 0u;
      *(_OWORD *)(a2 + 72) = 0u;
      *(_OWORD *)(a2 + 88) = 0u;
      *(_OWORD *)(a2 + 104) = 0u;
      if ((v6 & 0xFFFFFFFE) == 2) {
        *(_DWORD *)(a2 + 64) = 2;
      }
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(v5 + 48);
      std::string::operator=((std::string *)(a2 + 40), (const std::string *)(v5 + 112));
      char v8 = 0;
      uint64_t v9 = 0;
      *(_DWORD *)(a2 + 64) = *(_DWORD *)(v5 + 136);
      *(_DWORD *)(a2 + 68) = *(_DWORD *)(v5 + 160);
      uint64_t v10 = v5 + 56;
      do
      {
        char v11 = v8;
        int v12 = (uint64_t *)(v10 + 24 * v9);
        uint64_t v13 = *v12;
        uint64_t v14 = v12[1];
        if (*v12 != v14)
        {
          int v15 = (uint64_t *)(a2 + 72 + 24 * v9);
          do
          {
            AMCP::Graph::Terminal::get_description((AMCP::Graph::Terminal *)&v18, v13);
            std::vector<AMCP::Terminal_Description>::push_back[abi:ne180100](v15, &v18);
            for (uint64_t i = 64; i != 16; i -= 24)
            {
              __n128 v21 = (void **)((char *)&v18 + i);
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
            }
            v13 += 112;
          }
          while (v13 != v14);
        }
        char v8 = 1;
        uint64_t v9 = 1;
      }
      while ((v11 & 1) == 0);
      uint64_t v7 = v17;
      goto LABEL_21;
    }
    uint64_t v7 = v17;
  }
  else
  {
    uint64_t v7 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v18, "");
  *(_DWORD *)a2 = 0;
  *(_OWORD *)(a2 + 8) = v18;
  *(void *)(a2 + 24) = v19;
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  *(void *)(a2 + 32) = 0x100000000;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  if (v7) {
LABEL_21:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_1BACA2020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9)
{
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13>,AMCP::Node_Description ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13>,AMCP::Node_Description ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13>,AMCP::Node_Description ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F146A310;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13>,AMCP::Node_Description ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1F146A310;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13>,AMCP::Node_Description ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146A310;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_13>,AMCP::Node_Description ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146A310;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>>()
{
  uint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[88];
}

uint64_t std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFyyRyEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSD_4NodeEEENS3_IFRT_RNSD_9Node_ProcEEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 64) + 16))(&v6);
  uint64_t v4 = *(void *)(a1 + 56);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v6);
  std::__function::__value_func<unsigned long long ()(unsigned long long,unsigned long long &)>::__value_func[abi:ne180100](a2, v5);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1BACA2750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<unsigned long long ()(unsigned long long,unsigned long long &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    int v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy(uint64_t a1)
{
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146A1F0;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(a2 + 8), (long long *)(a1 + 8));
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((void *)a2 + 7);
  return this;
}

void sub_1BACA2924(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  int v2 = (char *)operator new(0x48uLL);
  *(void *)int v2 = &unk_1F146A1F0;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1BACA2994(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F146A1F0;
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F146A1F0;
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>>()
{
  uint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[64];
}

uint64_t std::__function::__value_func<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFyyRyEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSD_4NodeEEENS3_IFRT_RNSD_9Node_ProcEEEEEUlRKS6_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::operator()(uint64_t a1, uint64_t a2)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 64) + 16))(&v9);
  uint64_t v4 = *(void *)(a1 + 56);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v9);
  uint64_t v6 = (void *)v5[3];
  v5[3] = 0;
  if (v6 == v5)
  {
    (*(void (**)(void *))(*v5 + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void *))(*v6 + 40))(v6);
  }
  std::function<unsigned long long ()(unsigned long long,unsigned long long &)>::operator=(v5, a2);
  int v7 = *(_DWORD *)(a1 + 72);
  if (v7 == 1852074351)
  {
    uint64_t v8 = *(void *)(v9 + 576);
    if (v8)
    {
      std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100]((uint64_t)v11, v9 + 224);
      AMCP::Graph::Call_Audio_IO_Proc::update_proc(v8, (uint64_t)v11);
      std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100](v11);
    }
  }
  else if (v7 == 1919247212)
  {
    std::function<void ()>::operator()(*(void *)(v9 + 152), 0);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1BACA2F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  _Unwind_Resume(a1);
}

void *std::function<unsigned long long ()(unsigned long long,unsigned long long &)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<unsigned long long ()(unsigned long long,unsigned long long &)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<unsigned long long ()(unsigned long long,unsigned long long &)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<unsigned long long ()(unsigned long long,unsigned long long &)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::__function::__value_func<unsigned long long ()(unsigned long long,unsigned long long &)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1BACA3324(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<unsigned long long ()(unsigned long long,unsigned long long &)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::destroy(uint64_t a1)
{
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146A160;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1} const&,0ul>((std::string *)(a2 + 8), (long long *)(a1 + 8));
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1} const&,0ul>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((void *)a2 + 7);
  this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  return this;
}

void sub_1BACA3498(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::__clone(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  int v2 = (char *)operator new(0x58uLL);
  *(void *)int v2 = &unk_1F146A160;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1BACA3508(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F146A160;
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long,unsigned long long &)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long,unsigned long long &)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F146A160;
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE4$_12"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 480;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F146A280;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1F146A280;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_12>,std::function<unsigned long long ()(unsigned long long,unsigned long long &)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
}

uint64_t std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  long long v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long)> ()(void)>>()
{
  uint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[86];
}

uint64_t std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::function<unsigned long long ()(unsigned long long)> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<unsigned long long ()(unsigned long long)> ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<unsigned long long ()(unsigned long long)> ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long)> ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long)> ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long)> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long)> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFyyEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSC_4NodeEEENS3_IFRT_RNSC_9Node_ProcEEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long)> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 64) + 16))(&v6);
  uint64_t v4 = *(void *)(a1 + 56);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v6);
  std::__function::__value_func<unsigned long long ()(unsigned long long)>::__value_func[abi:ne180100](a2, v5);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1BACA3BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<unsigned long long ()(unsigned long long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long)> ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long)> ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    int v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long)> ()(void)>::destroy(uint64_t a1)
{
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long)> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146A040;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(a2 + 8), (long long *)(a1 + 8));
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((void *)a2 + 7);
  return this;
}

void sub_1BACA3DB0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long)> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  int v2 = (char *)operator new(0x48uLL);
  *(void *)int v2 = &unk_1F146A040;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1BACA3E20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long)> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F146A040;
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long)> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F146A040;
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long)>)>>()
{
  uint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[62];
}

uint64_t std::__function::__value_func<void ()(std::function<unsigned long long ()(unsigned long long)>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(std::function<unsigned long long ()(unsigned long long)>)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<unsigned long long ()(unsigned long long)>)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<unsigned long long ()(unsigned long long)>)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(std::function<unsigned long long ()(unsigned long long)>)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<unsigned long long ()(unsigned long long)>)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(std::function<unsigned long long ()(unsigned long long)>)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long)>)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long)>)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long)>)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long)>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFyyEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSC_4NodeEEENS3_IFRT_RNSC_9Node_ProcEEEEEUlRKS5_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long)>)>::operator()(uint64_t a1, uint64_t a2)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 64) + 16))(&v9);
  uint64_t v4 = *(void *)(a1 + 56);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v9);
  uint64_t v6 = (void *)v5[3];
  v5[3] = 0;
  if (v6 == v5)
  {
    (*(void (**)(void *))(*v5 + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void *))(*v6 + 40))(v6);
  }
  std::function<unsigned long long ()(unsigned long long)>::operator=(v5, a2);
  int v7 = *(_DWORD *)(a1 + 72);
  if (v7 == 1852074351)
  {
    uint64_t v8 = *(void *)(v9 + 576);
    if (v8)
    {
      std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100]((uint64_t)v11, v9 + 224);
      AMCP::Graph::Call_Audio_IO_Proc::update_proc(v8, (uint64_t)v11);
      std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100](v11);
    }
  }
  else if (v7 == 1919247212)
  {
    std::function<void ()>::operator()(*(void *)(v9 + 152), 0);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1BACA4414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  _Unwind_Resume(a1);
}

void *std::function<unsigned long long ()(unsigned long long)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<unsigned long long ()(unsigned long long)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<unsigned long long ()(unsigned long long)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<unsigned long long ()(unsigned long long)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::__function::__value_func<unsigned long long ()(unsigned long long)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1BACA4718(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<unsigned long long ()(unsigned long long)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long)>)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<unsigned long long ()(unsigned long long)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long)>)>::destroy(uint64_t a1)
{
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long)>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1469FB0;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1} const&,0ul>((std::string *)(a2 + 8), (long long *)(a1 + 8));
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1} const&,0ul>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((void *)a2 + 7);
  this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  return this;
}

void sub_1BACA488C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long)>)>::__clone(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  int v2 = (char *)operator new(0x58uLL);
  *(void *)int v2 = &unk_1F1469FB0;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1BACA48FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long)>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1469FB0;
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<unsigned long long ()(unsigned long long)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<unsigned long long ()(unsigned long long)> const&)#1}>,void ()(std::function<unsigned long long ()(unsigned long long)>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1469FB0;
  std::__function::__value_func<std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11>,std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11>,std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE4$_11"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11>,std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 448;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11>,std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F146A0D0;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11>,std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1F146A0D0;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_11>,std::function<unsigned long long ()(unsigned long long)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
}

uint64_t std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  long long v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::function<long long ()(void)> ()(void)>>()
{
  uint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[92];
}

uint64_t std::__function::__value_func<std::function<long long ()(void)> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::function<long long ()(void)> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::function<long long ()(void)> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<long long ()(void)> ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::function<long long ()(void)> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<long long ()(void)> ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<std::function<long long ()(void)> ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::function<long long ()(void)> ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::function<long long ()(void)> ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<long long ()(void)> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<long long ()(void)> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFxvEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSC_4NodeEEENS3_IFRT_RNSC_9Node_ProcEEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<long long ()(void)> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 64) + 16))(&v6);
  uint64_t v4 = *(void *)(a1 + 56);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v6);
  std::__function::__value_func<long long ()(void)>::__value_func[abi:ne180100](a2, v5);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1BACA4FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<long long ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<long long ()(void)> ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<long long ()(void)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<long long ()(void)> ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    int v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<long long ()(void)> ()(void)>::destroy(uint64_t a1)
{
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<long long ()(void)> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1469E90;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(a2 + 8), (long long *)(a1 + 8));
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((void *)a2 + 7);
  return this;
}

void sub_1BACA51A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<long long ()(void)> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  int v2 = (char *)operator new(0x48uLL);
  *(void *)int v2 = &unk_1F1469E90;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1BACA5214(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<long long ()(void)> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1469E90;
  std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<long long ()(void)> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1469E90;
  std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(std::function<long long ()(void)>)>>()
{
  uint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[68];
}

uint64_t std::__function::__value_func<void ()(std::function<long long ()(void)>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(std::function<long long ()(void)>)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<long long ()(void)>)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<long long ()(void)>)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(std::function<long long ()(void)>)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<long long ()(void)>)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(std::function<long long ()(void)>)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<long long ()(void)>)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(std::function<long long ()(void)>)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1}>,void ()(std::function<long long ()(void)>)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1}>,void ()(std::function<long long ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFxvEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSC_4NodeEEENS3_IFRT_RNSC_9Node_ProcEEEEEUlRKS5_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1}>,void ()(std::function<long long ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 64) + 16))(&v9);
  uint64_t v4 = *(void *)(a1 + 56);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v9);
  uint64_t v6 = (void *)v5[3];
  v5[3] = 0;
  if (v6 == v5)
  {
    (*(void (**)(void *))(*v5 + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void *))(*v6 + 40))(v6);
  }
  std::function<long long ()(void)>::operator=(v5, a2);
  int v7 = *(_DWORD *)(a1 + 72);
  if (v7 == 1852074351)
  {
    uint64_t v8 = *(void *)(v9 + 576);
    if (v8)
    {
      std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100]((uint64_t)v11, v9 + 224);
      AMCP::Graph::Call_Audio_IO_Proc::update_proc(v8, (uint64_t)v11);
      std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100](v11);
    }
  }
  else if (v7 == 1919247212)
  {
    std::function<void ()>::operator()(*(void *)(v9 + 152), 0);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1BACA5808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  _Unwind_Resume(a1);
}

void *std::function<long long ()(void)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<long long ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<long long ()(void)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<long long ()(void)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::__function::__value_func<long long ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1BACA5B0C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<long long ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1}>,void ()(std::function<long long ()(void)>)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<long long ()(void)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1}>,void ()(std::function<long long ()(void)>)>::destroy(uint64_t a1)
{
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1}>,void ()(std::function<long long ()(void)>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1469E00;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1} const&,0ul>((std::string *)(a2 + 8), (long long *)(a1 + 8));
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1} const&,0ul>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((void *)a2 + 7);
  this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  return this;
}

void sub_1BACA5C80(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1}>,void ()(std::function<long long ()(void)>)>::__clone(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  int v2 = (char *)operator new(0x58uLL);
  *(void *)int v2 = &unk_1F1469E00;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1BACA5CF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1}>,void ()(std::function<long long ()(void)>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1469E00;
  std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<long long ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<long long ()(void)> const&)#1}>,void ()(std::function<long long ()(void)>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1469E00;
  std::__function::__value_func<std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10>,std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10>,std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE4$_10"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10>,std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 384;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10>,std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1469F20;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10>,std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1F1469F20;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_10>,std::function<long long ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE3$_9"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 320;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1469D80;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1F1469D80;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_9>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE3$_8"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 256;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1469D00;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1F1469D00;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_8>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
}

uint64_t std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  long long v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>>()
{
  uint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[90];
}

uint64_t std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFvjRKNS_15Proc_Cycle_InfoEEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSF_4NodeEEENS3_IFRT_RNSF_9Node_ProcEEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 64) + 16))(&v6);
  uint64_t v4 = *(void *)(a1 + 56);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v6);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::__value_func[abi:ne180100](a2, v5);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1BACA6554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    int v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::destroy(uint64_t a1)
{
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1469BE0;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(a2 + 8), (long long *)(a1 + 8));
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((void *)a2 + 7);
  return this;
}

void sub_1BACA6728(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  int v2 = (char *)operator new(0x48uLL);
  *(void *)int v2 = &unk_1F1469BE0;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1BACA6798(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1469BE0;
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1469BE0;
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>>()
{
  uint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[66];
}

uint64_t std::__function::__value_func<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFvjRKNS_15Proc_Cycle_InfoEEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSF_4NodeEEENS3_IFRT_RNSF_9Node_ProcEEEEEUlRKS8_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::operator()(uint64_t a1, uint64_t a2)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 64) + 16))(&v9);
  uint64_t v4 = *(void *)(a1 + 56);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v9);
  uint64_t v6 = (void *)v5[3];
  v5[3] = 0;
  if (v6 == v5)
  {
    (*(void (**)(void *))(*v5 + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void *))(*v6 + 40))(v6);
  }
  std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::operator=(v5, a2);
  int v7 = *(_DWORD *)(a1 + 72);
  if (v7 == 1852074351)
  {
    uint64_t v8 = *(void *)(v9 + 576);
    if (v8)
    {
      std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100]((uint64_t)v11, v9 + 224);
      AMCP::Graph::Call_Audio_IO_Proc::update_proc(v8, (uint64_t)v11);
      std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100](v11);
    }
  }
  else if (v7 == 1919247212)
  {
    std::function<void ()>::operator()(*(void *)(v9 + 152), 0);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1BACA6D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  _Unwind_Resume(a1);
}

void *std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1BACA7090(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::destroy(uint64_t a1)
{
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1469B50;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1} const&,0ul>((std::string *)(a2 + 8), (long long *)(a1 + 8));
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1} const&,0ul>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((void *)a2 + 7);
  this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  return this;
}

void sub_1BACA7204(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::__clone(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  int v2 = (char *)operator new(0x58uLL);
  *(void *)int v2 = &unk_1F1469B50;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1BACA7274(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1469B50;
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1469B50;
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE3$_7"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 192;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1469C70;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1F1469C70;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_7>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE3$_6"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 288;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1469AD0;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1F1469AD0;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_6>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE3$_5"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 160;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1469A50;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1F1469A50;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_5>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 128;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14699D0;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1F14699D0;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_4>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
}

uint64_t std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  long long v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::function<void ()(void)> ()(void)>>()
{
  uint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[98];
}

uint64_t std::__function::__value_func<std::function<void ()(void)> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::function<void ()(void)> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(void)> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(void)> ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::function<void ()(void)> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(void)> ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<std::function<void ()(void)> ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(void)> ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::function<void ()(void)> ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(void)> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(void)> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFvvEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSC_4NodeEEENS3_IFRT_RNSC_9Node_ProcEEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(void)> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 64) + 16))(&v6);
  uint64_t v4 = *(void *)(a1 + 56);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v6);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a2, v5);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1BACA7BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(void)> ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(void)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(void)> ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    int v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(void)> ()(void)>::destroy(uint64_t a1)
{
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(void)> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14698B0;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(a2 + 8), (long long *)(a1 + 8));
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((void *)a2 + 7);
  return this;
}

void sub_1BACA7CDC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(void)> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  int v2 = (char *)operator new(0x48uLL);
  *(void *)int v2 = &unk_1F14698B0;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1BACA7D4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(void)> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F14698B0;
  std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(void)> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F14698B0;
  std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(void)>)>>()
{
  uint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[80];
}

uint64_t std::__function::__value_func<void ()(std::function<void ()(void)>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(std::function<void ()(void)>)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(void)>)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(void)>)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(std::function<void ()(void)>)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(void)>)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(std::function<void ()(void)>)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(void)>)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(void)>)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1}>,void ()(std::function<void ()(void)>)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1}>,void ()(std::function<void ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFvvEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSC_4NodeEEENS3_IFRT_RNSC_9Node_ProcEEEEEUlRKS5_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1}>,void ()(std::function<void ()(void)>)>::operator()(uint64_t a1, uint64_t a2)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 64) + 16))(&v9);
  uint64_t v4 = *(void *)(a1 + 56);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v9);
  uint64_t v6 = std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](v5);
  std::function<void ()(void)>::operator=(v6, a2);
  int v7 = *(_DWORD *)(a1 + 72);
  if (v7 == 1852074351)
  {
    uint64_t v8 = *(void *)(v9 + 576);
    if (v8)
    {
      std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100]((uint64_t)v11, v9 + 224);
      AMCP::Graph::Call_Audio_IO_Proc::update_proc(v8, (uint64_t)v11);
      std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100](v11);
    }
  }
  else if (v7 == 1919247212)
  {
    std::function<void ()>::operator()(*(void *)(v9 + 152), 0);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1BACA82D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1}>,void ()(std::function<void ()(void)>)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(void)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1}>,void ()(std::function<void ()(void)>)>::destroy(uint64_t a1)
{
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1}>,void ()(std::function<void ()(void)>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1469820;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1} const&,0ul>((std::string *)(a2 + 8), (long long *)(a1 + 8));
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1} const&,0ul>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((void *)a2 + 7);
  this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  return this;
}

void sub_1BACA846C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1}>,void ()(std::function<void ()(void)>)>::__clone(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  int v2 = (char *)operator new(0x58uLL);
  *(void *)int v2 = &unk_1F1469820;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1BACA84DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1}>,void ()(std::function<void ()(void)>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1469820;
  std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(void)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(void)> const&)#1}>,void ()(std::function<void ()(void)>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1469820;
  std::__function::__value_func<std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3>,std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3>,std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3>,std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 544;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3>,std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1469940;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3>,std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1F1469940;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_3>,std::function<void ()(void)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
}

uint64_t std::__function::__value_func<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  long long v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int)> ()(void)>>()
{
  uint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[84];
}

uint64_t std::__function::__value_func<std::function<void ()(unsigned int)> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::function<void ()(unsigned int)> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(unsigned int)> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()> ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::function<void ()> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()> ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<std::function<void ()> ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()> ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::function<void ()> ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int)> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int)> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFvjEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSC_4NodeEEENS3_IFRT_RNSC_9Node_ProcEEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int)> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 64) + 16))(&v6);
  uint64_t v4 = *(void *)(a1 + 56);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v6);
  std::__function::__value_func<void ()>::__value_func[abi:ne180100](a2, v5);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1BACA8BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int)> ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<void ()>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int)> ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    int v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int)> ()(void)>::destroy(uint64_t a1)
{
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int)> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1469700;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(a2 + 8), (long long *)(a1 + 8));
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((void *)a2 + 7);
  return this;
}

void sub_1BACA8CEC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int)> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  int v2 = (char *)operator new(0x48uLL);
  *(void *)int v2 = &unk_1F1469700;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1BACA8D5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int)> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1469700;
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int)> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1469700;
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::function<void ()(unsigned int)>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(std::function<void ()(unsigned int)>)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(unsigned int)>)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()>)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(std::function<void ()>)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()>)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(std::function<void ()>)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()>)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()>)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1}>,void ()(std::function<void ()(unsigned int)>)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1}>,void ()(std::function<void ()(unsigned int)>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFvjEEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSC_4NodeEEENS3_IFRT_RNSC_9Node_ProcEEEEEUlRKS5_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1}>,void ()(std::function<void ()(unsigned int)>)>::operator()(uint64_t a1, uint64_t a2)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 64) + 16))(&v9);
  uint64_t v4 = *(void *)(a1 + 56);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v9);
  uint64_t v6 = std::__function::__value_func<void ()>::operator=[abi:ne180100](v5);
  std::function<void ()>::operator=(v6, a2);
  int v7 = *(_DWORD *)(a1 + 72);
  if (v7 == 1852074351)
  {
    uint64_t v8 = *(void *)(v9 + 576);
    if (v8)
    {
      std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100]((uint64_t)v11, v9 + 224);
      AMCP::Graph::Call_Audio_IO_Proc::update_proc(v8, (uint64_t)v11);
      std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100](v11);
    }
  }
  else if (v7 == 1919247212)
  {
    std::function<void ()>::operator()(*(void *)(v9 + 152), 0);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1BACA9278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(unsigned int)>::operator=[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1}>,void ()(std::function<void ()(unsigned int)>)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<void ()>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1}>,void ()(std::function<void ()(unsigned int)>)>::destroy(uint64_t a1)
{
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1}>,void ()(std::function<void ()(unsigned int)>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1469670;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()> const&)#1} const&,0ul>((std::string *)(a2 + 8), (long long *)(a1 + 8));
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1} const&,0ul>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((void *)a2 + 7);
  this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  return this;
}

void sub_1BACA9414(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1}>,void ()(std::function<void ()(unsigned int)>)>::__clone(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  int v2 = (char *)operator new(0x58uLL);
  *(void *)int v2 = &unk_1F1469670;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()> const&)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1BACA9484(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1}>,void ()(std::function<void ()(unsigned int)>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1469670;
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int)> const&)#1}>,void ()(std::function<void ()(unsigned int)>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1469670;
  std::__function::__value_func<std::function<void ()> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 512;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1469790;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1F1469790;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_2>,std::function<void ()(unsigned int)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
}

uint64_t std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  long long v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}